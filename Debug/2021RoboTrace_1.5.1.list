
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017fe8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  080181a8  080181a8  000281a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018cec  08018cec  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018cec  08018cec  00028cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018cf4  08018cf4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018cf4  08018cf4  00028cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018cfc  08018cfc  00028cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018d00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c58  200001e0  08018edc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e38  08018edc  00030e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038b14  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000795a  00000000  00000000  00068d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002270  00000000  00000000  00070680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fb0  00000000  00000000  000728f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f79  00000000  00000000  000748a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000259f3  00000000  00000000  000ab819  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110912  00000000  00000000  000d120c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1b1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3c0  00000000  00000000  001e1b9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018190 	.word	0x08018190

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018190 	.word	0x08018190

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f008 fd7c 	bl	8009ad4 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e92c 	.word	0x2003e92c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 fd64 	bl	8009ad4 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e92c 	.word	0x2003e92c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f008 fc05 	bl	8009830 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 f96c 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 f966 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 f960 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 f95a 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 f954 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 f94e 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 f948 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 f942 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 f93c 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 f936 	bl	8008304 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 f92a 	bl	8008304 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 f924 	bl	8008304 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f014 fc05 	bl	8015938 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00c fb24 	bl	800d804 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00c fb20 	bl	800d804 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003eb80 	.word	0x2003eb80
 80011e0:	2003e864 	.word	0x2003e864
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f010 feb4 	bl	80122b8 <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003d770 	.word	0x2003d770

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f013 fa81 	bl	8014aa0 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f010 fef8 	bl	80123a0 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f010 fef3 	bl	80123a0 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f010 fc61 	bl	8011e8e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	080181a8 	.word	0x080181a8
 80015f8:	2003d6e0 	.word	0x2003d6e0
 80015fc:	2003d770 	.word	0x2003d770
 8001600:	2003d760 	.word	0x2003d760

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f010 fe6f 	bl	801230c <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f011 f8da 	bl	80127e8 <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f010 fe69 	bl	801230c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f013 fa1c 	bl	8014aa0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f010 fe96 	bl	80123a0 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f010 fc04 	bl	8011e8e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f010 fe08 	bl	80122b8 <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003d5e0 	.word	0x2003d5e0
 80016b8:	2003c4a0 	.word	0x2003c4a0
 80016bc:	080181c4 	.word	0x080181c4
 80016c0:	080181a8 	.word	0x080181a8
 80016c4:	2003d6e0 	.word	0x2003d6e0
 80016c8:	2003d770 	.word	0x2003d770
 80016cc:	2003d760 	.word	0x2003d760

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f013 fa1f 	bl	8014b48 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f011 fa38 	bl	8012ba4 <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f010 fdba 	bl	80122b8 <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	080181b4 	.word	0x080181b4
 8001754:	2003d6e0 	.word	0x2003d6e0
 8001758:	2003d770 	.word	0x2003d770

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f013 f9d9 	bl	8014b48 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 f9f2 	bl	8012ba4 <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f010 fd74 	bl	80122b8 <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	080181c0 	.word	0x080181c0
 80017e0:	2003d6e0 	.word	0x2003d6e0
 80017e4:	2003d770 	.word	0x2003d770

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f00f ffd6 	bl	80117a8 <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	080181d0 	.word	0x080181d0
 800181c:	2003c5a0 	.word	0x2003c5a0

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f013 f9b7 	bl	8014ba0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f013 f9b3 	bl	8014ba0 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003d5e0 	.word	0x2003d5e0
 8001848:	2003c4a0 	.word	0x2003c4a0

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f011 f88b 	bl	801296c <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f010 fd58 	bl	801230c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f00f ffe7 	bl	8011834 <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f010 fd50 	bl	801230c <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003d5e0 	.word	0x2003d5e0
 8001874:	2003c4a0 	.word	0x2003c4a0
 8001878:	2003d770 	.word	0x2003d770
 800187c:	080181c4 	.word	0x080181c4

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003d6e0 	.word	0x2003d6e0

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f007 ffae 	bl	8009830 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00b f957 	bl	800cb90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00b fa84 	bl	800cdf8 <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f007 ff9a 	bl	8009830 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003e80c 	.word	0x2003e80c

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f007 ff7d 	bl	8009830 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00b f926 	bl	800cb90 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00b f920 	bl	800cb90 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f007 ff6a 	bl	8009830 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003e80c 	.word	0x2003e80c

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003e7a8 	.word	0x2003e7a8
 8001a2c:	2003e7a6 	.word	0x2003e7a6
 8001a30:	2003e7a0 	.word	0x2003e7a0

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f006 fc28 	bl	8008304 <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	080181d4 	.word	0x080181d4
 8001ac0:	080181e0 	.word	0x080181e0
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003e7a8 	.word	0x2003e7a8
 8001b6c:	2003e7a6 	.word	0x2003e7a6
 8001b70:	2003e7a0 	.word	0x2003e7a0
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f006 fb72 	bl	8008304 <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f006 fb1c 	bl	8008304 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	080181e4 	.word	0x080181e4
 8001d34:	080181f0 	.word	0x080181f0

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f007 febd 	bl	8009ad4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f007 ffb1 	bl	8009cd0 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003e9c0 	.word	0x2003e9c0

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f007 fe85 	bl	8009ad4 <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003e9c0 	.word	0x2003e9c0

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f007 fcdb 	bl	8009800 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f007 fccb 	bl	8009800 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f007 fcba 	bl	8009800 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f007 fcaa 	bl	8009800 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f007 fc9a 	bl	8009800 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f007 fc8b 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f007 fc85 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f007 fc7f 	bl	8009830 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f007 fc75 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f007 fc6f 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f007 fc69 	bl	8009830 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f007 fc5f 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f007 fc59 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f007 fc53 	bl	8009830 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f007 fc49 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f007 fc43 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f007 fc3d 	bl	8009830 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f007 fc33 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f007 fc2d 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f007 fc27 	bl	8009830 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f007 fc1d 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f007 fc17 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f007 fc11 	bl	8009830 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f007 fc07 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f007 fc01 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f007 fbfb 	bl	8009830 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f007 fbf1 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f007 fbeb 	bl	8009830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f007 fbe5 	bl	8009830 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f007 fbcc 	bl	8009830 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f007 fbc1 	bl	8009830 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f007 fbb7 	bl	8009830 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f007 fbac 	bl	8009830 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f006 f904 	bl	80083d0 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003e8e4 	.word	0x2003e8e4

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f005 ff61 	bl	8008304 <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 f9de 	bl	800494c <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	080181fc 	.word	0x080181fc
 800266c:	08018208 	.word	0x08018208
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027be:	3348      	adds	r3, #72	; 0x48
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027cc:	330c      	adds	r3, #12
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027d8:	330e      	adds	r3, #14
 80027da:	2200      	movs	r2, #0
 80027dc:	801a      	strh	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e4:	3310      	adds	r3, #16
 80027e6:	2200      	movs	r2, #0
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80027f0:	3344      	adds	r3, #68	; 0x44
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80027fc:	3346      	adds	r3, #70	; 0x46
 80027fe:	2200      	movs	r2, #0
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002808:	3348      	adds	r3, #72	; 0x48
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002814:	3349      	adds	r3, #73	; 0x49
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002820:	334a      	adds	r3, #74	; 0x4a
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
{
	motor_ = motor;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a3a      	ldr	r2, [r7, #32]
 800283c:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002848:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284e:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002854:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002856:	2300      	movs	r3, #0
 8002858:	82fb      	strh	r3, [r7, #22]
 800285a:	8afb      	ldrh	r3, [r7, #22]
 800285c:	f241 726f 	movw	r2, #5999	; 0x176f
 8002860:	4293      	cmp	r3, r2
 8002862:	d80e      	bhi.n	8002882 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x142>
		velocity_table_[i] = 0;
 8002864:	8afb      	ldrh	r3, [r7, #22]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800286c:	3312      	adds	r3, #18
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	3304      	adds	r3, #4
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800287a:	8afb      	ldrh	r3, [r7, #22]
 800287c:	3301      	adds	r3, #1
 800287e:	82fb      	strh	r3, [r7, #22]
 8002880:	e7eb      	b.n	800285a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x11a>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002882:	2300      	movs	r3, #0
 8002884:	82bb      	strh	r3, [r7, #20]
 8002886:	8abb      	ldrh	r3, [r7, #20]
 8002888:	2b63      	cmp	r3, #99	; 0x63
 800288a:	d80e      	bhi.n	80028aa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x16a>
		crossline_distance_[i] = 0;
 800288c:	8abb      	ldrh	r3, [r7, #20]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002894:	3304      	adds	r3, #4
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028a2:	8abb      	ldrh	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	82bb      	strh	r3, [r7, #20]
 80028a8:	e7ed      	b.n	8002886 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x146>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028aa:	2300      	movs	r3, #0
 80028ac:	827b      	strh	r3, [r7, #18]
 80028ae:	8a7b      	ldrh	r3, [r7, #18]
 80028b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b4:	d20e      	bcs.n	80028d4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x194>
		sideline_distance_[i] = 0;
 80028b6:	8a7b      	ldrh	r3, [r7, #18]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028be:	3328      	adds	r3, #40	; 0x28
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028cc:	8a7b      	ldrh	r3, [r7, #18]
 80028ce:	3301      	adds	r3, #1
 80028d0:	827b      	strh	r3, [r7, #18]
 80028d2:	e7ec      	b.n	80028ae <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x16e>
	}
}
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4618      	mov	r0, r3
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	0000      	movs	r0, r0
 80028e4:	0000      	movs	r0, r0
	...

080028e8 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800290c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800293c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002950:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800295c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002968:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002974:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002980:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800298c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002990:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002994:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <_ZN9LineTrace9calcErrorEv+0x130>)
 800299c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fde9 	bl	8000578 <__aeabi_f2d>
 80029a6:	a318      	add	r3, pc, #96	; (adr r3, 8002a08 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f7fd fe3c 	bl	8000628 <__aeabi_dmul>
 80029b0:	4603      	mov	r3, r0
 80029b2:	460c      	mov	r4, r1
 80029b4:	4625      	mov	r5, r4
 80029b6:	461c      	mov	r4, r3
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <_ZN9LineTrace9calcErrorEv+0x134>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fddb 	bl	8000578 <__aeabi_f2d>
 80029c2:	a313      	add	r3, pc, #76	; (adr r3, 8002a10 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd fe2e 	bl	8000628 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4620      	mov	r0, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7fd fc72 	bl	80002bc <__adddf3>
 80029d8:	4603      	mov	r3, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	4618      	mov	r0, r3
 80029de:	4621      	mov	r1, r4
 80029e0:	f7fe f91a 	bl	8000c18 <__aeabi_d2f>
 80029e4:	4603      	mov	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <_ZN9LineTrace9calcErrorEv+0x138>)
 80029ec:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <_ZN9LineTrace9calcErrorEv+0x134>)
 80029f2:	6013      	str	r3, [r2, #0]

	return diff;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	ee07 3a90 	vmov	s15, r3

}
 80029fa:	eeb0 0a67 	vmov.f32	s0, s15
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdb0      	pop	{r4, r5, r7, pc}
 8002a04:	f3af 8000 	nop.w
 8002a08:	47ae147b 	.word	0x47ae147b
 8002a0c:	3fb47ae1 	.word	0x3fb47ae1
 8002a10:	d70a3d71 	.word	0xd70a3d71
 8002a14:	3fed70a3 	.word	0x3fed70a3
 8002a18:	2000025c 	.word	0x2000025c
 8002a1c:	20000280 	.word	0x20000280
 8002a20:	20000260 	.word	0x20000260
 8002a24:	00000000 	.word	0x00000000

08002a28 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ff59 	bl	80028e8 <_ZN9LineTrace9calcErrorEv>
 8002a36:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a44:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	edd7 6a05 	vldr	s13, [r7, #20]
 8002a76:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	ee17 0a90 	vmov	r0, s15
 8002a82:	f7fd fd79 	bl	8000578 <__aeabi_f2d>
 8002a86:	a32a      	add	r3, pc, #168	; (adr r3, 8002b30 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fef6 	bl	800087c <__aeabi_ddiv>
 8002a90:	4603      	mov	r3, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	4618      	mov	r0, r3
 8002a96:	4621      	mov	r1, r4
 8002a98:	f7fe f8be 	bl	8000c18 <__aeabi_d2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd67 	bl	8000578 <__aeabi_f2d>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	460d      	mov	r5, r1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abc:	ee17 0a90 	vmov	r0, s15
 8002ac0:	f7fd fd5a 	bl	8000578 <__aeabi_f2d>
 8002ac4:	a31a      	add	r3, pc, #104	; (adr r3, 8002b30 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd fdad 	bl	8000628 <__aeabi_dmul>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7fd fbf1 	bl	80002bc <__adddf3>
 8002ada:	4603      	mov	r3, r0
 8002adc:	460c      	mov	r4, r1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	f7fe f899 	bl	8000c18 <__aeabi_d2f>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002aea:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002aec:	ed97 7a04 	vldr	s14, [r7, #16]
 8002af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b02:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b10:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b14:	eeb0 0a67 	vmov.f32	s0, s15
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f002 faf9 	bl	8005110 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b1e:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	6013      	str	r3, [r2, #0]

}
 8002b24:	bf00      	nop
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2c:	f3af 8000 	nop.w
 8002b30:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b34:	3f50624d 	.word	0x3f50624d
 8002b38:	20000288 	.word	0x20000288
 8002b3c:	20000284 	.word	0x20000284

08002b40 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fcab 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fdba 	bl	80046d0 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 fae7 	bl	8004134 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 fb4c 	bl	8004220 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc8:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf4:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002bf8:	4a3d      	ldr	r2, [pc, #244]	; (8002cf0 <_ZN9LineTrace11isCrossLineEv+0x158>)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002bfe:	4a3d      	ldr	r2, [pc, #244]	; (8002cf4 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c04:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d03e      	beq.n	8002c90 <_ZN9LineTrace11isCrossLineEv+0xf8>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c16:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002cfc <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	d50f      	bpl.n	8002c44 <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c28:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002cfc <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	d506      	bpl.n	8002c44 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c40:	801a      	strh	r2, [r3, #0]
 8002c42:	e002      	b.n	8002c4a <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c44:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d947      	bls.n	8002ce2 <_ZN9LineTrace11isCrossLineEv+0x14a>
			flag = true;
 8002c52:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c6a:	334a      	adds	r3, #74	; 0x4a
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c76:	3310      	adds	r3, #16
 8002c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 ff39 	bl	8003af8 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002c86:	e02c      	b.n	8002ce2 <_ZN9LineTrace11isCrossLineEv+0x14a>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 ffa5 	bl	8003bd8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
 8002c8e:	e028      	b.n	8002ce2 <_ZN9LineTrace11isCrossLineEv+0x14a>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c94:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d08 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca0:	dd0f      	ble.n	8002cc2 <_ZN9LineTrace11isCrossLineEv+0x12a>
 8002ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d08 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	dd06      	ble.n	8002cc2 <_ZN9LineTrace11isCrossLineEv+0x12a>
			cnt++;
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	e002      	b.n	8002cc8 <_ZN9LineTrace11isCrossLineEv+0x130>
		}
		else{
			cnt = 0;
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d908      	bls.n	8002ce2 <_ZN9LineTrace11isCrossLineEv+0x14a>
			flag = false;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000268 	.word	0x20000268
 8002cf4:	2000026c 	.word	0x2000026c
 8002cf8:	2000028f 	.word	0x2000028f
 8002cfc:	44160000 	.word	0x44160000
 8002d00:	2000028c 	.word	0x2000028c
 8002d04:	2000028e 	.word	0x2000028e
 8002d08:	43fa0000 	.word	0x43fa0000

08002d0c <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d1e:	3310      	adds	r3, #16
 8002d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d11b      	bne.n	8002d60 <_ZN9LineTrace15radius2VelocityEf+0x54>
		if(radius < 130) velocity = 1.3;
 8002d28:	edd7 7a00 	vldr	s15, [r7]
 8002d2c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002dc8 <_ZN9LineTrace15radius2VelocityEf+0xbc>
 8002d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	d502      	bpl.n	8002d40 <_ZN9LineTrace15radius2VelocityEf+0x34>
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <_ZN9LineTrace15radius2VelocityEf+0xc0>)
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	e038      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else if(radius < 2000) velocity = 1.7;
 8002d40:	edd7 7a00 	vldr	s15, [r7]
 8002d44:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002dd0 <_ZN9LineTrace15radius2VelocityEf+0xc4>
 8002d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	d502      	bpl.n	8002d58 <_ZN9LineTrace15radius2VelocityEf+0x4c>
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <_ZN9LineTrace15radius2VelocityEf+0xc8>)
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e02c      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else velocity = max_velocity_;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e028      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d66:	3310      	adds	r3, #16
 8002d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d11e      	bne.n	8002dae <_ZN9LineTrace15radius2VelocityEf+0xa2>
		if(radius < 130) velocity = 1.5;
 8002d70:	edd7 7a00 	vldr	s15, [r7]
 8002d74:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002dc8 <_ZN9LineTrace15radius2VelocityEf+0xbc>
 8002d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	d503      	bpl.n	8002d8a <_ZN9LineTrace15radius2VelocityEf+0x7e>
 8002d82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e013      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else if(radius < 500) velocity = 1.5;
 8002d8a:	edd7 7a00 	vldr	s15, [r7]
 8002d8e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002dd8 <_ZN9LineTrace15radius2VelocityEf+0xcc>
 8002d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	d503      	bpl.n	8002da4 <_ZN9LineTrace15radius2VelocityEf+0x98>
 8002d9c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e006      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else velocity = max_velocity2_;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e001      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
	}
	else velocity = 1.3;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <_ZN9LineTrace15radius2VelocityEf+0xc0>)
 8002db0:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	ee07 3a90 	vmov	s15, r3
}
 8002db8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	43020000 	.word	0x43020000
 8002dcc:	3fa66666 	.word	0x3fa66666
 8002dd0:	44fa0000 	.word	0x44fa0000
 8002dd4:	3fd9999a 	.word	0x3fd9999a
 8002dd8:	43fa0000 	.word	0x43fa0000

08002ddc <_ZN9LineTrace20createVelocityTabeleEv>:

void LineTrace::createVelocityTabele()
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b08b      	sub	sp, #44	; 0x2c
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 f8fe 	bl	8003fea <_ZN6Logger23getDistanceArrayPointerEv>
 8002dee:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 f904 	bl	8004002 <_ZN6Logger20getThetaArrayPointerEv>
 8002dfa:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	837b      	strh	r3, [r7, #26]
 8002e00:	8b7b      	ldrh	r3, [r7, #26]
 8002e02:	f241 726f 	movw	r2, #5999	; 0x176f
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d84b      	bhi.n	8002ea2 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002e0a:	8b7b      	ldrh	r3, [r7, #26]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002e16:	8b7b      	ldrh	r3, [r7, #26]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002e22:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d101      	bne.n	8002e34 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <_ZN9LineTrace20createVelocityTabeleEv+0xf4>)
 8002e32:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002e34:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e38:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e40:	eeb0 0a66 	vmov.f32	s0, s13
 8002e44:	f7ff fc6c 	bl	8002720 <_ZSt3absf>
 8002e48:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002e4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e50:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002ed4 <_ZN9LineTrace20createVelocityTabeleEv+0xf8>
 8002e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5c:	db01      	blt.n	8002e62 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <_ZN9LineTrace20createVelocityTabeleEv+0xfc>)
 8002e60:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002e62:	8b7c      	ldrh	r4, [r7, #26]
 8002e64:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff4f 	bl	8002d0c <_ZN9LineTrace15radius2VelocityEf>
 8002e6e:	eef0 7a40 	vmov.f32	s15, s0
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002e78:	3312      	adds	r3, #18
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3304      	adds	r3, #4
 8002e80:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002e84:	8b7b      	ldrh	r3, [r7, #26]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	8b7b      	ldrh	r3, [r7, #26]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	3322      	adds	r3, #34	; 0x22
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002e9a:	8b7b      	ldrh	r3, [r7, #26]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	837b      	strh	r3, [r7, #26]
 8002ea0:	e7ae      	b.n	8002e00 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(MAX_DEC, p_distance);
 8002ea2:	6939      	ldr	r1, [r7, #16]
 8002ea4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f8c1 	bl	8003030 <_ZN9LineTrace20decelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002eb4:	334c      	adds	r3, #76	; 0x4c
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	9200      	str	r2, [sp, #0]
 8002eba:	f241 7270 	movw	r2, #6000	; 0x1770
 8002ebe:	4907      	ldr	r1, [pc, #28]	; (8002edc <_ZN9LineTrace20createVelocityTabeleEv+0x100>)
 8002ec0:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <_ZN9LineTrace20createVelocityTabeleEv+0x104>)
 8002ec2:	f7fe fb9f 	bl	8001604 <sd_write_array_float>

}
 8002ec6:	bf00      	nop
 8002ec8:	3724      	adds	r7, #36	; 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd90      	pop	{r4, r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	3727c5ac 	.word	0x3727c5ac
 8002ed4:	459c4000 	.word	0x459c4000
 8002ed8:	459c4000 	.word	0x459c4000
 8002edc:	0801824c 	.word	0x0801824c
 8002ee0:	0801825c 	.word	0x0801825c

08002ee4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b08b      	sub	sp, #44	; 0x2c
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69d8      	ldr	r0, [r3, #28]
 8002ef0:	4b46      	ldr	r3, [pc, #280]	; (800300c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x128>)
 8002ef2:	4a47      	ldr	r2, [pc, #284]	; (8003010 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x12c>)
 8002ef4:	4947      	ldr	r1, [pc, #284]	; (8003014 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x130>)
 8002ef6:	f001 f900 	bl	80040fa <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT, ", CROSSLINE_SIZE, crossline_distance_);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f00:	3314      	adds	r3, #20
 8002f02:	2264      	movs	r2, #100	; 0x64
 8002f04:	4944      	ldr	r1, [pc, #272]	; (8003018 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x134>)
 8002f06:	4843      	ldr	r0, [pc, #268]	; (8003014 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x130>)
 8002f08:	f7fe fbe2 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT, ", SIDELINE_SIZE, sideline_distance_);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8002f12:	33a4      	adds	r3, #164	; 0xa4
 8002f14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f18:	4940      	ldr	r1, [pc, #256]	; (800301c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x138>)
 8002f1a:	483e      	ldr	r0, [pc, #248]	; (8003014 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x130>)
 8002f1c:	f7fe fbd8 	bl	80016d0 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 f860 	bl	8003fea <_ZN6Logger23getDistanceArrayPointerEv>
 8002f2a:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 f866 	bl	8004002 <_ZN6Logger20getThetaArrayPointerEv>
 8002f36:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f38:	2300      	movs	r3, #0
 8002f3a:	837b      	strh	r3, [r7, #26]
 8002f3c:	8b7b      	ldrh	r3, [r7, #26]
 8002f3e:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d84b      	bhi.n	8002fde <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>
		temp_distance = p_distance[i];
 8002f46:	8b7b      	ldrh	r3, [r7, #26]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f52:	8b7b      	ldrh	r3, [r7, #26]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	d101      	bne.n	8002f70 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x13c>)
 8002f6e:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002f70:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f74:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f7c:	eeb0 0a66 	vmov.f32	s0, s13
 8002f80:	f7ff fbce 	bl	8002720 <_ZSt3absf>
 8002f84:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f8c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003024 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x140>
 8002f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f98:	db01      	blt.n	8002f9e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x144>)
 8002f9c:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002f9e:	8b7c      	ldrh	r4, [r7, #26]
 8002fa0:	ed97 0a05 	vldr	s0, [r7, #20]
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff feb1 	bl	8002d0c <_ZN9LineTrace15radius2VelocityEf>
 8002faa:	eef0 7a40 	vmov.f32	s15, s0
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002fb4:	3312      	adds	r3, #18
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002fc0:	8b7b      	ldrh	r3, [r7, #26]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	8b7b      	ldrh	r3, [r7, #26]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	3322      	adds	r3, #34	; 0x22
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002fd6:	8b7b      	ldrh	r3, [r7, #26]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	837b      	strh	r3, [r7, #26]
 8002fdc:	e7ae      	b.n	8002f3c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(MAX_DEC, p_distance);
 8002fde:	6939      	ldr	r1, [r7, #16]
 8002fe0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f823 	bl	8003030 <_ZN9LineTrace20decelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002ff0:	334c      	adds	r3, #76	; 0x4c
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	9200      	str	r2, [sp, #0]
 8002ff6:	f241 7270 	movw	r2, #6000	; 0x1770
 8002ffa:	490c      	ldr	r1, [pc, #48]	; (800302c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x148>)
 8002ffc:	4805      	ldr	r0, [pc, #20]	; (8003014 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x130>)
 8002ffe:	f7fe fb01 	bl	8001604 <sd_write_array_float>

}
 8003002:	bf00      	nop
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	bf00      	nop
 800300c:	08018268 	.word	0x08018268
 8003010:	08018274 	.word	0x08018274
 8003014:	0801825c 	.word	0x0801825c
 8003018:	08018284 	.word	0x08018284
 800301c:	08018294 	.word	0x08018294
 8003020:	3727c5ac 	.word	0x3727c5ac
 8003024:	459c4000 	.word	0x459c4000
 8003028:	459c4000 	.word	0x459c4000
 800302c:	0801824c 	.word	0x0801824c

08003030 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	ed87 0a02 	vstr	s0, [r7, #8]
 800303c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800303e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003042:	83fb      	strh	r3, [r7, #30]
 8003044:	8bfb      	ldrh	r3, [r7, #30]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8091 	beq.w	800316e <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800304c:	8bfb      	ldrh	r3, [r7, #30]
 800304e:	3b01      	subs	r3, #1
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003056:	3312      	adds	r3, #18
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	3304      	adds	r3, #4
 800305e:	ed93 7a00 	vldr	s14, [r3]
 8003062:	8bfb      	ldrh	r3, [r7, #30]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800306a:	3312      	adds	r3, #18
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	3304      	adds	r3, #4
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307a:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800307e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308a:	dd6c      	ble.n	8003166 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 800308c:	8bfb      	ldrh	r3, [r7, #30]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fa6e 	bl	8000578 <__aeabi_f2d>
 800309c:	a336      	add	r3, pc, #216	; (adr r3, 8003178 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd fac1 	bl	8000628 <__aeabi_dmul>
 80030a6:	4603      	mov	r3, r0
 80030a8:	460c      	mov	r4, r1
 80030aa:	4625      	mov	r5, r4
 80030ac:	461c      	mov	r4, r3
 80030ae:	69b8      	ldr	r0, [r7, #24]
 80030b0:	f7fd fa62 	bl	8000578 <__aeabi_f2d>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4620      	mov	r0, r4
 80030ba:	4629      	mov	r1, r5
 80030bc:	f7fd fbde 	bl	800087c <__aeabi_ddiv>
 80030c0:	4603      	mov	r3, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	4618      	mov	r0, r3
 80030c6:	4621      	mov	r1, r4
 80030c8:	f7fd fda6 	bl	8000c18 <__aeabi_d2f>
 80030cc:	4603      	mov	r3, r0
 80030ce:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80030d0:	edd7 6a06 	vldr	s13, [r7, #24]
 80030d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80030d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030dc:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80030e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80030e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80030e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f0:	dd39      	ble.n	8003166 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80030f2:	8bfb      	ldrh	r3, [r7, #30]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030fa:	3312      	adds	r3, #18
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fa37 	bl	8000578 <__aeabi_f2d>
 800310a:	4604      	mov	r4, r0
 800310c:	460d      	mov	r5, r1
 800310e:	8bfb      	ldrh	r3, [r7, #30]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	ed93 7a00 	vldr	s14, [r3]
 800311a:	edd7 7a02 	vldr	s15, [r7, #8]
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	ee17 0a90 	vmov	r0, s15
 8003126:	f7fd fa27 	bl	8000578 <__aeabi_f2d>
 800312a:	a313      	add	r3, pc, #76	; (adr r3, 8003178 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f7fd fa7a 	bl	8000628 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4620      	mov	r0, r4
 800313a:	4629      	mov	r1, r5
 800313c:	f7fd f8be 	bl	80002bc <__adddf3>
 8003140:	4603      	mov	r3, r0
 8003142:	460c      	mov	r4, r1
 8003144:	4619      	mov	r1, r3
 8003146:	4622      	mov	r2, r4
 8003148:	8bfb      	ldrh	r3, [r7, #30]
 800314a:	1e5c      	subs	r4, r3, #1
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	f7fd fd62 	bl	8000c18 <__aeabi_d2f>
 8003154:	4601      	mov	r1, r0
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800315c:	3312      	adds	r3, #18
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003166:	8bfb      	ldrh	r3, [r7, #30]
 8003168:	3b01      	subs	r3, #1
 800316a:	83fb      	strh	r3, [r7, #30]
 800316c:	e76a      	b.n	8003044 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800316e:	bf00      	nop
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bdb0      	pop	{r4, r5, r7, pc}
 8003176:	bf00      	nop
 8003178:	d2f1a9fc 	.word	0xd2f1a9fc
 800317c:	3f50624d 	.word	0x3f50624d

08003180 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800318e:	330c      	adds	r3, #12
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8087 	beq.w	80032a6 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe f965 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80031a2:	eeb0 7a40 	vmov.f32	s14, s0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031ac:	3348      	adds	r3, #72	; 0x48
 80031ae:	edd3 7a00 	vldr	s15, [r3]
 80031b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	bfac      	ite	ge
 80031bc:	2301      	movge	r3, #1
 80031be:	2300      	movlt	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d025      	beq.n	8003212 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031cc:	3348      	adds	r3, #72	; 0x48
 80031ce:	ed93 7a00 	vldr	s14, [r3]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031d8:	330e      	adds	r3, #14
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	3322      	adds	r3, #34	; 0x22
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031f2:	3348      	adds	r3, #72	; 0x48
 80031f4:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031fe:	330e      	adds	r3, #14
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800320c:	330e      	adds	r3, #14
 800320e:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003210:	e7c2      	b.n	8003198 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003218:	330e      	adds	r3, #14
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003220:	4293      	cmp	r3, r2
 8003222:	d906      	bls.n	8003232 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800322a:	330e      	adds	r3, #14
 800322c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003230:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003238:	3348      	adds	r3, #72	; 0x48
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800323e:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe f911 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800324a:	eef0 7a40 	vmov.f32	s15, s0
 800324e:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003250:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800325a:	330e      	adds	r3, #14
 800325c:	881a      	ldrh	r2, [r3, #0]
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 8003260:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003268:	330e      	adds	r3, #14
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003272:	3312      	adds	r3, #18
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	eeb0 0a67 	vmov.f32	s0, s15
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f947 	bl	8003516 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800328e:	330e      	adds	r3, #14
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003298:	3312      	adds	r3, #18
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a06      	ldr	r2, [pc, #24]	; (80032bc <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 80032a4:	6013      	str	r3, [r2, #0]

	}
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000270 	.word	0x20000270
 80032b4:	20000274 	.word	0x20000274
 80032b8:	20000278 	.word	0x20000278
 80032bc:	2000027c 	.word	0x2000027c

080032c0 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80032c8:	2300      	movs	r3, #0
 80032ca:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe f8bc 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 80032d6:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 f9e5 	bl	80046ae <_ZN8Odometry8getThetaEv>
 80032e4:	ec54 3b10 	vmov	r3, r4, d0
 80032e8:	4618      	mov	r0, r3
 80032ea:	4621      	mov	r1, r4
 80032ec:	f7fd fc94 	bl	8000c18 <__aeabi_d2f>
 80032f0:	4603      	mov	r3, r0
 80032f2:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80032f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80032f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003300:	d101      	bne.n	8003306 <_ZN9LineTrace8isStableEv+0x46>
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <_ZN9LineTrace8isStableEv+0xd0>)
 8003304:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003306:	ed97 7a02 	vldr	s14, [r7, #8]
 800330a:	edd7 7a04 	vldr	s15, [r7, #16]
 800330e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003312:	eeb0 0a66 	vmov.f32	s0, s13
 8003316:	f7ff fa03 	bl	8002720 <_ZSt3absf>
 800331a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800331e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003322:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003394 <_ZN9LineTrace8isStableEv+0xd4>
 8003326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	db01      	blt.n	8003334 <_ZN9LineTrace8isStableEv+0x74>
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <_ZN9LineTrace8isStableEv+0xd8>)
 8003332:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800333a:	334a      	adds	r3, #74	; 0x4a
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <_ZN9LineTrace8isStableEv+0xdc>)
 8003344:	2200      	movs	r2, #0
 8003346:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800334e:	334a      	adds	r3, #74	; 0x4a
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003354:	edd7 7a03 	vldr	s15, [r7, #12]
 8003358:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80033a0 <_ZN9LineTrace8isStableEv+0xe0>
 800335c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	db06      	blt.n	8003374 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <_ZN9LineTrace8isStableEv+0xdc>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <_ZN9LineTrace8isStableEv+0xdc>)
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	e002      	b.n	800337a <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <_ZN9LineTrace8isStableEv+0xdc>)
 8003376:	2200      	movs	r2, #0
 8003378:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <_ZN9LineTrace8isStableEv+0xdc>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	2b16      	cmp	r3, #22
 8003380:	d901      	bls.n	8003386 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003382:	2301      	movs	r3, #1
 8003384:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003386:	7dfb      	ldrb	r3, [r7, #23]
}
 8003388:	4618      	mov	r0, r3
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd90      	pop	{r4, r7, pc}
 8003390:	3727c5ac 	.word	0x3727c5ac
 8003394:	459c4000 	.word	0x459c4000
 8003398:	459c4000 	.word	0x459c4000
 800339c:	20000290 	.word	0x20000290
 80033a0:	44fa0000 	.word	0x44fa0000

080033a4 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	2201      	movs	r2, #1
 80033b2:	4927      	ldr	r1, [pc, #156]	; (8003450 <_ZN9LineTrace4initEv+0xac>)
 80033b4:	4827      	ldr	r0, [pc, #156]	; (8003454 <_ZN9LineTrace4initEv+0xb0>)
 80033b6:	f7fe f98b 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80033ba:	f107 0318 	add.w	r3, r7, #24
 80033be:	2201      	movs	r2, #1
 80033c0:	4925      	ldr	r1, [pc, #148]	; (8003458 <_ZN9LineTrace4initEv+0xb4>)
 80033c2:	4824      	ldr	r0, [pc, #144]	; (8003454 <_ZN9LineTrace4initEv+0xb0>)
 80033c4:	f7fe f984 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	2201      	movs	r2, #1
 80033ce:	4923      	ldr	r1, [pc, #140]	; (800345c <_ZN9LineTrace4initEv+0xb8>)
 80033d0:	4820      	ldr	r0, [pc, #128]	; (8003454 <_ZN9LineTrace4initEv+0xb0>)
 80033d2:	f7fe f97d 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80033d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80033da:	ed97 7a06 	vldr	s14, [r7, #24]
 80033de:	edd7 6a05 	vldr	s13, [r7, #20]
 80033e2:	eeb0 1a66 	vmov.f32	s2, s13
 80033e6:	eef0 0a47 	vmov.f32	s1, s14
 80033ea:	eeb0 0a67 	vmov.f32	s0, s15
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f83c 	bl	800346c <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	2201      	movs	r2, #1
 80033fa:	4919      	ldr	r1, [pc, #100]	; (8003460 <_ZN9LineTrace4initEv+0xbc>)
 80033fc:	4815      	ldr	r0, [pc, #84]	; (8003454 <_ZN9LineTrace4initEv+0xb0>)
 80033fe:	f7fe f967 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003402:	f107 030c 	add.w	r3, r7, #12
 8003406:	2201      	movs	r2, #1
 8003408:	4916      	ldr	r1, [pc, #88]	; (8003464 <_ZN9LineTrace4initEv+0xc0>)
 800340a:	4812      	ldr	r0, [pc, #72]	; (8003454 <_ZN9LineTrace4initEv+0xb0>)
 800340c:	f7fe f960 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003410:	f107 0308 	add.w	r3, r7, #8
 8003414:	2201      	movs	r2, #1
 8003416:	4914      	ldr	r1, [pc, #80]	; (8003468 <_ZN9LineTrace4initEv+0xc4>)
 8003418:	480e      	ldr	r0, [pc, #56]	; (8003454 <_ZN9LineTrace4initEv+0xb0>)
 800341a:	f7fe f959 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 800341e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003422:	eeb0 0a67 	vmov.f32	s0, s15
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f875 	bl	8003516 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 800342c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003430:	eeb0 0a67 	vmov.f32	s0, s15
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f87d 	bl	8003534 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 800343a:	edd7 7a02 	vldr	s15, [r7, #8]
 800343e:	eeb0 0a67 	vmov.f32	s0, s15
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f885 	bl	8003552 <_ZN9LineTrace15setMaxVelocity2Ef>
}
 8003448:	bf00      	nop
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	080182a4 	.word	0x080182a4
 8003454:	080182ac 	.word	0x080182ac
 8003458:	080182b4 	.word	0x080182b4
 800345c:	080182bc 	.word	0x080182bc
 8003460:	080182c4 	.word	0x080182c4
 8003464:	080182d0 	.word	0x080182d0
 8003468:	080182dc 	.word	0x080182dc

0800346c <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	ed87 0a02 	vstr	s0, [r7, #8]
 8003478:	edc7 0a01 	vstr	s1, [r7, #4]
 800347c:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
	return kp_;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	ee07 3a90 	vmov	s15, r3
}
 80034ae:	eeb0 0a67 	vmov.f32	s0, s15
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	return ki_;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	ee07 3a90 	vmov	s15, r3
}
 80034cc:	eeb0 0a67 	vmov.f32	s0, s15
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
	return kd_;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	ee07 3a90 	vmov	s15, r3
}
 80034ea:	eeb0 0a67 	vmov.f32	s0, s15
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	641a      	str	r2, [r3, #64]	; 0x40
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357e:	ee07 3a90 	vmov	s15, r3
}
 8003582:	eeb0 0a67 	vmov.f32	s0, s15
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359c:	ee07 3a90 	vmov	s15, r3
}
 80035a0:	eeb0 0a67 	vmov.f32	s0, s15
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035bc:	ee07 3a90 	vmov	s15, r3
}
 80035c0:	eeb0 0a67 	vmov.f32	s0, s15
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80c1 	beq.w	8003766 <_ZN9LineTrace4flipEv+0x196>
		// ---- line following processing -----//
		pidTrace();
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff fa1f 	bl	8002a28 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 80035ea:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fa60 	bl	8003ab4 <_ZN9LineTrace16isTargetDistanceEf>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d028      	beq.n	800364c <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9be 	bl	800397c <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fe5d 	bl	80032c0 <_ZN9LineTrace8isStableEv>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <_ZN9LineTrace4flipEv+0x56>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	4618      	mov	r0, r3
 8003612:	f001 faeb 	bl	8004bec <_ZN10SideSensor9getStatusEv>
 8003616:	4603      	mov	r3, r0
 8003618:	43db      	mvns	r3, r3
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d101      	bne.n	8003626 <_ZN9LineTrace4flipEv+0x56>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <_ZN9LineTrace4flipEv+0x58>
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <_ZN9LineTrace4flipEv+0x68>
				stable_flag_ = true;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003632:	3349      	adds	r3, #73	; 0x49
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fd ff33 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	4618      	mov	r0, r3
 8003648:	f001 f842 	bl	80046d0 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fd97 	bl	8003180 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff faa0 	bl	8002b98 <_ZN9LineTrace11isCrossLineEv>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	4618      	mov	r0, r3
 8003664:	f001 faea 	bl	8004c3c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd ff46 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	4618      	mov	r0, r3
 8003678:	f001 fafa 	bl	8004c70 <_ZN10SideSensor13getIgnoreFlagEv>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00f      	beq.n	80036a2 <_ZN9LineTrace4flipEv+0xd2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd ff2a 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 800368c:	eeb0 7a40 	vmov.f32	s14, s0
 8003690:	eddf 7a37 	vldr	s15, [pc, #220]	; 8003770 <_ZN9LineTrace4flipEv+0x1a0>
 8003694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369c:	db01      	blt.n	80036a2 <_ZN9LineTrace4flipEv+0xd2>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <_ZN9LineTrace4flipEv+0xd4>
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fad2 	bl	8004c56 <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80036b8:	3349      	adds	r3, #73	; 0x49
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <_ZN9LineTrace4flipEv+0x108>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fa91 	bl	8004bec <_ZN10SideSensor9getStatusEv>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d101      	bne.n	80036d8 <_ZN9LineTrace4flipEv+0x108>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <_ZN9LineTrace4flipEv+0x10a>
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01a      	beq.n	8003714 <_ZN9LineTrace4flipEv+0x144>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e4:	3310      	adds	r3, #16
 80036e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fa39 	bl	8003b66 <_ZN9LineTrace21storeSideLineDistanceEv>
 80036f4:	e002      	b.n	80036fc <_ZN9LineTrace4flipEv+0x12c>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 faa4 	bl	8003c44 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
			}

			stable_flag_ = false;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003702:	3349      	adds	r3, #73	; 0x49
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800370e:	334a      	adds	r3, #74	; 0x4a
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800371a:	3349      	adds	r3, #73	; 0x49
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <_ZN9LineTrace4flipEv+0x164>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	330c      	adds	r3, #12
 8003726:	2201      	movs	r2, #1
 8003728:	f04f 31ff 	mov.w	r1, #4294967295
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe fca1 	bl	8002074 <_ZN3LED2LREaa>
 8003732:	e007      	b.n	8003744 <_ZN9LineTrace4flipEv+0x174>
		else led_.LR(-1, 0);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	330c      	adds	r3, #12
 8003738:	2200      	movs	r2, #0
 800373a:	f04f 31ff 	mov.w	r1, #4294967295
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fc98 	bl	8002074 <_ZN3LED2LREaa>

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe ff93 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <_ZN9LineTrace4flipEv+0x196>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	eddf 0a06 	vldr	s1, [pc, #24]	; 8003774 <_ZN9LineTrace4flipEv+0x1a4>
 800375c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003774 <_ZN9LineTrace4flipEv+0x1a4>
 8003760:	4618      	mov	r0, r3
 8003762:	f001 fcd5 	bl	8005110 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	43480000 	.word	0x43480000
 8003774:	00000000 	.word	0x00000000

08003778 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fd14 	bl	80051c2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fa3c 	bl	8004c1c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80037aa:	3344      	adds	r3, #68	; 0x44
 80037ac:	2200      	movs	r2, #0
 80037ae:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80037b6:	3346      	adds	r3, #70	; 0x46
 80037b8:	2200      	movs	r2, #0
 80037ba:	801a      	strh	r2, [r3, #0]
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 fd05 	bl	80051e8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	330c      	adds	r3, #12
 80037e2:	2201      	movs	r2, #1
 80037e4:	f04f 31ff 	mov.w	r1, #4294967295
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe fc43 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037f4:	3310      	adds	r3, #16
 80037f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69d8      	ldr	r0, [r3, #28]
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <_ZN9LineTrace4stopEv+0xb4>)
 8003804:	4a1d      	ldr	r2, [pc, #116]	; (800387c <_ZN9LineTrace4stopEv+0xb8>)
 8003806:	491e      	ldr	r1, [pc, #120]	; (8003880 <_ZN9LineTrace4stopEv+0xbc>)
 8003808:	f000 fc30 	bl	800406c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 800380c:	e006      	b.n	800381c <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69d8      	ldr	r0, [r3, #28]
 8003812:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <_ZN9LineTrace4stopEv+0xc0>)
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <_ZN9LineTrace4stopEv+0xc4>)
 8003816:	491a      	ldr	r1, [pc, #104]	; (8003880 <_ZN9LineTrace4stopEv+0xbc>)
 8003818:	f000 fc4b 	bl	80040b2 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003822:	3314      	adds	r3, #20
 8003824:	2200      	movs	r2, #0
 8003826:	9200      	str	r2, [sp, #0]
 8003828:	2264      	movs	r2, #100	; 0x64
 800382a:	4918      	ldr	r1, [pc, #96]	; (800388c <_ZN9LineTrace4stopEv+0xc8>)
 800382c:	4814      	ldr	r0, [pc, #80]	; (8003880 <_ZN9LineTrace4stopEv+0xbc>)
 800382e:	f7fd fee9 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003838:	33a4      	adds	r3, #164	; 0xa4
 800383a:	2200      	movs	r2, #0
 800383c:	9200      	str	r2, [sp, #0]
 800383e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003842:	4913      	ldr	r1, [pc, #76]	; (8003890 <_ZN9LineTrace4stopEv+0xcc>)
 8003844:	480e      	ldr	r0, [pc, #56]	; (8003880 <_ZN9LineTrace4stopEv+0xbc>)
 8003846:	f7fd fedd 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	330c      	adds	r3, #12
 800384e:	2200      	movs	r2, #0
 8003850:	f04f 31ff 	mov.w	r1, #4294967295
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fc0d 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fcb5 	bl	80041ce <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fc63 	bl	8004134 <_ZN6Logger10resetLogs2Ev>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	08018268 	.word	0x08018268
 800387c:	08018274 	.word	0x08018274
 8003880:	0801825c 	.word	0x0801825c
 8003884:	080182e8 	.word	0x080182e8
 8003888:	080182f4 	.word	0x080182f4
 800388c:	08018304 	.word	0x08018304
 8003890:	08018314 	.word	0x08018314

08003894 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80038a0:	2300      	movs	r3, #0
 80038a2:	737b      	strb	r3, [r7, #13]
	start();
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff67 	bl	8003778 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80038aa:	7b7b      	ldrb	r3, [r7, #13]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d15b      	bne.n	8003968 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 80038b0:	89fb      	ldrh	r3, [r7, #14]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <_ZN9LineTrace7runningEv+0x28>
 80038b6:	2b0a      	cmp	r3, #10
 80038b8:	d030      	beq.n	800391c <_ZN9LineTrace7runningEv+0x88>
 80038ba:	e054      	b.n	8003966 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 f99f 	bl	8004c04 <_ZN10SideSensor16getWhiteLineCntREv>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d044      	beq.n	8003960 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff f932 	bl	8002b40 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038e2:	3310      	adds	r3, #16
 80038e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f89f 	bl	8003a30 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fe01 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fddf 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	330c      	adds	r3, #12
 800390a:	f04f 32ff 	mov.w	r2, #4294967295
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fbaf 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 8003916:	230a      	movs	r3, #10
 8003918:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800391a:	e021      	b.n	8003960 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	4618      	mov	r0, r3
 8003922:	f001 f96f 	bl	8004c04 <_ZN10SideSensor16getWhiteLineCntREv>
 8003926:	4603      	mov	r3, r0
 8003928:	2b02      	cmp	r3, #2
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d016      	beq.n	8003964 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff f91d 	bl	8002b76 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f88a 	bl	8003a56 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003942:	2064      	movs	r0, #100	; 0x64
 8003944:	f004 fcde 	bl	8008304 <HAL_Delay>

				setTargetVelocity(0);
 8003948:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003978 <_ZN9LineTrace7runningEv+0xe4>
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fde2 	bl	8003516 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003956:	f004 fcd5 	bl	8008304 <HAL_Delay>

				goal_flag = true;
 800395a:	2301      	movs	r3, #1
 800395c:	737b      	strb	r3, [r7, #13]

			}

			break;
 800395e:	e001      	b.n	8003964 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003960:	bf00      	nop
 8003962:	e7a2      	b.n	80038aa <_ZN9LineTrace7runningEv+0x16>
			break;
 8003964:	bf00      	nop
	while(goal_flag == false){
 8003966:	e7a0      	b.n	80038aa <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff2b 	bl	80037c4 <_ZN9LineTrace4stopEv>
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	00000000 	.word	0x00000000

0800397c <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	ed2d 8b02 	vpush	{d8}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800398e:	2b00      	cmp	r3, #0
 8003990:	d046      	beq.n	8003a20 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003998:	3310      	adds	r3, #16
 800399a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11c      	bne.n	80039dc <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69dc      	ldr	r4, [r3, #28]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fd4f 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 80039b0:	eeb0 8a40 	vmov.f32	s16, s0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fe78 	bl	80046ae <_ZN8Odometry8getThetaEv>
 80039be:	ec53 2b10 	vmov	r2, r3, d0
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	f7fd f927 	bl	8000c18 <__aeabi_d2f>
 80039ca:	4603      	mov	r3, r0
 80039cc:	ee00 3a90 	vmov	s1, r3
 80039d0:	eeb0 0a48 	vmov.f32	s0, s16
 80039d4:	4620      	mov	r0, r4
 80039d6:	f000 fa78 	bl	8003eca <_ZN6Logger21storeDistanceAndThetaEff>
 80039da:	e01b      	b.n	8003a14 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69dc      	ldr	r4, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd fd41 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80039ea:	eeb0 8a40 	vmov.f32	s16, s0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fe5b 	bl	80046ae <_ZN8Odometry8getThetaEv>
 80039f8:	ec53 2b10 	vmov	r2, r3, d0
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	f7fd f90a 	bl	8000c18 <__aeabi_d2f>
 8003a04:	4603      	mov	r3, r0
 8003a06:	ee00 3a90 	vmov	s1, r3
 8003a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f000 faa2 	bl	8003f58 <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(getTargetVelocity(), odometry_->getTheta());

		mon_store_cnt++;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003a1e:	801a      	strh	r2, [r3, #0]
	}
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	ecbd 8b02 	vpop	{d8}
 8003a2a:	bd90      	pop	{r4, r7, pc}
 8003a2c:	20000264 	.word	0x20000264

08003a30 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd fd41 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a48:	330c      	adds	r3, #12
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a64:	330c      	adds	r3, #12
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a70:	330e      	adds	r3, #14
 8003a72:	2200      	movs	r2, #0
 8003a74:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003a7c:	3348      	adds	r3, #72	; 0x48
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003aa2:	3310      	adds	r3, #16
 8003aa4:	887a      	ldrh	r2, [r7, #2]
 8003aa6:	801a      	strh	r2, [r3, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fd fcc0 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003ace:	eeb0 7a40 	vmov.f32	s14, s0
 8003ad2:	edd7 7a00 	vldr	s15, [r7]
 8003ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ade:	bf94      	ite	ls
 8003ae0:	2301      	movls	r3, #1
 8003ae2:	2300      	movhi	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b0a:	3344      	adds	r3, #68	; 0x44
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	461c      	mov	r4, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7fd fcab 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003b16:	eef0 7a40 	vmov.f32	s15, s0
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003b20:	3304      	adds	r3, #4
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	3304      	adds	r3, #4
 8003b28:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b32:	3344      	adds	r3, #68	; 0x44
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	3301      	adds	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b40:	3344      	adds	r3, #68	; 0x44
 8003b42:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b4a:	3344      	adds	r3, #68	; 0x44
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	2b63      	cmp	r3, #99	; 0x63
 8003b50:	d905      	bls.n	8003b5e <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b58:	3344      	adds	r3, #68	; 0x44
 8003b5a:	2263      	movs	r2, #99	; 0x63
 8003b5c:	801a      	strh	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd90      	pop	{r4, r7, pc}

08003b66 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8003b66:	b590      	push	{r4, r7, lr}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b78:	3346      	adds	r3, #70	; 0x46
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	461c      	mov	r4, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f7fd fc74 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003b84:	eef0 7a40 	vmov.f32	s15, s0
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003b8e:	3328      	adds	r3, #40	; 0x28
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ba0:	3346      	adds	r3, #70	; 0x46
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bae:	3346      	adds	r3, #70	; 0x46
 8003bb0:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bb8:	3346      	adds	r3, #70	; 0x46
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bc0:	d306      	bcc.n	8003bd0 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bc8:	3346      	adds	r3, #70	; 0x46
 8003bca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bce:	801a      	strh	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd90      	pop	{r4, r7, pc}

08003bd8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6959      	ldr	r1, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bea:	3344      	adds	r3, #68	; 0x44
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	edd3 7a00 	vldr	s15, [r3]
 8003c00:	eeb0 0a67 	vmov.f32	s0, s15
 8003c04:	4608      	mov	r0, r1
 8003c06:	f7fd fc40 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c10:	3344      	adds	r3, #68	; 0x44
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c1e:	3344      	adds	r3, #68	; 0x44
 8003c20:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c28:	3344      	adds	r3, #68	; 0x44
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	2b63      	cmp	r3, #99	; 0x63
 8003c2e:	d905      	bls.n	8003c3c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c36:	3344      	adds	r3, #68	; 0x44
 8003c38:	2263      	movs	r2, #99	; 0x63
 8003c3a:	801a      	strh	r2, [r3, #0]

}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	82fb      	strh	r3, [r7, #22]
 8003c50:	8afb      	ldrh	r3, [r7, #22]
 8003c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c56:	d239      	bcs.n	8003ccc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8003c58:	8afb      	ldrh	r3, [r7, #22]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003c60:	3328      	adds	r3, #40	; 0x28
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	3304      	adds	r3, #4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fd fbfb 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003c76:	eeb0 7a40 	vmov.f32	s14, s0
 8003c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c82:	eeb0 0a67 	vmov.f32	s0, s15
 8003c86:	f7fe fd4b 	bl	8002720 <_ZSt3absf>
 8003c8a:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 8003c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c92:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003cf4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8003c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9e:	d811      	bhi.n	8003cc4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6959      	ldr	r1, [r3, #20]
 8003ca4:	8afb      	ldrh	r3, [r7, #22]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003cac:	3328      	adds	r3, #40	; 0x28
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	edd3 7a00 	vldr	s15, [r3]
 8003cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	f7fd fbe4 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003cc2:	e003      	b.n	8003ccc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003cc4:	8afb      	ldrh	r3, [r7, #22]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	82fb      	strh	r3, [r7, #22]
 8003cca:	e7c1      	b.n	8003c50 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

		//sideline_idx_++;

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003cd2:	3346      	adds	r3, #70	; 0x46
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cda:	d306      	bcc.n	8003cea <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ce2:	3346      	adds	r3, #70	; 0x46
 8003ce4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ce8:	801a      	strh	r2, [r3, #0]

}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	42a00000 	.word	0x42a00000

08003cf8 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003d06:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003d14:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003d18:	2200      	movs	r2, #0
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003d22:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003d26:	2200      	movs	r2, #0
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003d30:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003d34:	2200      	movs	r2, #0
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8003d54:	f7fd fd48 	bl	80017e8 <sd_mount>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d016      	beq.n	8003d96 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8003d68:	f7fd f99a 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f7fd f9a6 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003d74:	4815      	ldr	r0, [pc, #84]	; (8003dcc <_ZN6Logger10sdCardInitEv+0x84>)
 8003d76:	f7fd f9cd 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7fd f99f 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003d82:	4813      	ldr	r0, [pc, #76]	; (8003dd0 <_ZN6Logger10sdCardInitEv+0x88>)
 8003d84:	f7fd f9c6 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8003d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d8c:	f004 faba 	bl	8008304 <HAL_Delay>

	  ret = true;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e015      	b.n	8003dc2 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8003d96:	f7fd f983 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7fd f98f 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003da2:	480a      	ldr	r0, [pc, #40]	; (8003dcc <_ZN6Logger10sdCardInitEv+0x84>)
 8003da4:	f7fd f9b6 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003da8:	2101      	movs	r1, #1
 8003daa:	2000      	movs	r0, #0
 8003dac:	f7fd f988 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8003db0:	4808      	ldr	r0, [pc, #32]	; (8003dd4 <_ZN6Logger10sdCardInitEv+0x8c>)
 8003db2:	f7fd f9af 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8003db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dba:	f004 faa3 	bl	8008304 <HAL_Delay>

	  ret = false;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	08018320 	.word	0x08018320
 8003dd0:	0801832c 	.word	0x0801832c
 8003dd4:	08018334 	.word	0x08018334

08003dd8 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003dea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d027      	beq.n	8003e44 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003dfa:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e10:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e20:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003e24:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e2c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <_ZN6Logger8storeLogEf+0x6c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e3c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003e40:	2200      	movs	r2, #0
 8003e42:	801a      	strh	r2, [r3, #0]
	}
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e62:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d028      	beq.n	8003ebe <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e72:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3304      	adds	r3, #4
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e8a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e9a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003e9e:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ea6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <_ZN6Logger9storeLog2Ef+0x6e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003eb6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003eba:	2200      	movs	r2, #0
 8003ebc:	801a      	strh	r2, [r3, #0]
	}
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ed6:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ee0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	3302      	adds	r3, #2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ef8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003f04:	3312      	adds	r3, #18
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f14:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f24:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f28:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f30:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	f241 726f 	movw	r2, #5999	; 0x176f
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d906      	bls.n	8003f4c <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f44:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f48:	2200      	movs	r2, #0
 8003f4a:	801a      	strh	r2, [r3, #0]
	//}
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f64:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f6e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8003f7a:	3322      	adds	r3, #34	; 0x22
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f8a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8003f96:	3352      	adds	r3, #82	; 0x52
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003fa6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003fb6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003fba:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003fc2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	f241 726f 	movw	r2, #5999	; 0x176f
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d906      	bls.n	8003fde <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003fd6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003fda:	2200      	movs	r2, #0
 8003fdc:	801a      	strh	r2, [r3, #0]
	//}
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3308      	adds	r3, #8
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004010:	3348      	adds	r3, #72	; 0x48
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b086      	sub	sp, #24
 8004022:	af02      	add	r7, sp, #8
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	2201      	movs	r2, #1
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	68b8      	ldr	r0, [r7, #8]
 8004038:	f7fd fae4 	bl	8001604 <sd_write_array_float>
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	2300      	movs	r3, #0
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	2201      	movs	r2, #1
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	68b8      	ldr	r0, [r7, #8]
 8004060:	f7fd fad0 	bl	8001604 <sd_write_array_float>
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f103 0208 	add.w	r2, r3, #8
 8004080:	2300      	movs	r3, #0
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	f241 7270 	movw	r2, #6000	; 0x1770
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	68b8      	ldr	r0, [r7, #8]
 800408e:	f7fd fab9 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004098:	3348      	adds	r3, #72	; 0x48
 800409a:	2200      	movs	r2, #0
 800409c:	9200      	str	r2, [sp, #0]
 800409e:	f241 7270 	movw	r2, #6000	; 0x1770
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	68b8      	ldr	r0, [r7, #8]
 80040a6:	f7fd faad 	bl	8001604 <sd_write_array_float>
}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af02      	add	r7, sp, #8
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80040c6:	3388      	adds	r3, #136	; 0x88
 80040c8:	2200      	movs	r2, #0
 80040ca:	9200      	str	r2, [sp, #0]
 80040cc:	f241 7270 	movw	r2, #6000	; 0x1770
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	68b8      	ldr	r0, [r7, #8]
 80040d4:	f7fd fa96 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80040de:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80040e2:	2200      	movs	r2, #0
 80040e4:	9200      	str	r2, [sp, #0]
 80040e6:	f241 7270 	movw	r2, #6000	; 0x1770
 80040ea:	6839      	ldr	r1, [r7, #0]
 80040ec:	68b8      	ldr	r0, [r7, #8]
 80040ee:	f7fd fa89 	bl	8001604 <sd_write_array_float>
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3308      	adds	r3, #8
 800410c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	68b8      	ldr	r0, [r7, #8]
 8004114:	f7fd fadc 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800411e:	3348      	adds	r3, #72	; 0x48
 8004120:	f241 7270 	movw	r2, #6000	; 0x1770
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	68b8      	ldr	r0, [r7, #8]
 8004128:	f7fd fad2 	bl	80016d0 <sd_read_array_float>
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004134:	b480      	push	{r7}
 8004136:	b08b      	sub	sp, #44	; 0x2c
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004142:	3388      	adds	r3, #136	; 0x88
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004150:	3340      	adds	r3, #64	; 0x40
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	429a      	cmp	r2, r3
 800415a:	d009      	beq.n	8004170 <_ZN6Logger10resetLogs2Ev+0x3c>
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	617b      	str	r3, [r7, #20]
		log = 0;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	3304      	adds	r3, #4
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	e7f1      	b.n	8004154 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004176:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004186:	3340      	adds	r3, #64	; 0x40
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	6a3a      	ldr	r2, [r7, #32]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	429a      	cmp	r2, r3
 8004190:	d009      	beq.n	80041a6 <_ZN6Logger10resetLogs2Ev+0x72>
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	3304      	adds	r3, #4
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	e7f1      	b.n	800418a <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041ac:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80041b0:	2200      	movs	r2, #0
 80041b2:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041ba:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041be:	2200      	movs	r2, #0
 80041c0:	801a      	strh	r2, [r3, #0]
}
 80041c2:	bf00      	nop
 80041c4:	372c      	adds	r7, #44	; 0x2c
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041dc:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80041e0:	2200      	movs	r2, #0
 80041e2:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041ea:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041ee:	2200      	movs	r2, #0
 80041f0:	801a      	strh	r2, [r3, #0]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <_ZN6Logger5startEv>:

void Logger::start()
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800420c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800422e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	805a      	strh	r2, [r3, #2]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800426c:	2108      	movs	r1, #8
 800426e:	4805      	ldr	r0, [pc, #20]	; (8004284 <_ZN5Motor4initEv+0x20>)
 8004270:	f009 f9f8 	bl	800d664 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004274:	210c      	movs	r1, #12
 8004276:	4803      	ldr	r0, [pc, #12]	; (8004284 <_ZN5Motor4initEv+0x20>)
 8004278:	f009 f9f4 	bl	800d664 <HAL_TIM_PWM_Start>

}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	2003e8a4 	.word	0x2003e8a4

08004288 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004296:	2b00      	cmp	r3, #0
 8004298:	da0d      	bge.n	80042b6 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800429a:	2200      	movs	r2, #0
 800429c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042a0:	481f      	ldr	r0, [pc, #124]	; (8004320 <_ZN5Motor9motorCtrlEv+0x98>)
 80042a2:	f005 fac5 	bl	8009830 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	425b      	negs	r3, r3
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	81fb      	strh	r3, [r7, #14]
 80042b4:	e00a      	b.n	80042cc <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80042b6:	2201      	movs	r2, #1
 80042b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042bc:	4818      	ldr	r0, [pc, #96]	; (8004320 <_ZN5Motor9motorCtrlEv+0x98>)
 80042be:	f005 fab7 	bl	8009830 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da0d      	bge.n	80042f2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80042d6:	2201      	movs	r2, #1
 80042d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042dc:	4810      	ldr	r0, [pc, #64]	; (8004320 <_ZN5Motor9motorCtrlEv+0x98>)
 80042de:	f005 faa7 	bl	8009830 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	425b      	negs	r3, r3
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	81bb      	strh	r3, [r7, #12]
 80042f0:	e00a      	b.n	8004308 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80042f2:	2200      	movs	r2, #0
 80042f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042f8:	4809      	ldr	r0, [pc, #36]	; (8004320 <_ZN5Motor9motorCtrlEv+0x98>)
 80042fa:	f005 fa99 	bl	8009830 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004304:	b29b      	uxth	r3, r3
 8004306:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004308:	89fa      	ldrh	r2, [r7, #14]
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <_ZN5Motor9motorCtrlEv+0x9c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004310:	89ba      	ldrh	r2, [r7, #12]
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004318:	bf00      	nop
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40020c00 	.word	0x40020c00
 8004324:	2003e8a4 	.word	0x2003e8a4

08004328 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6178      	str	r0, [r7, #20]
 8004330:	ed87 0b02 	vstr	d0, [r7, #8]
 8004334:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	4b30      	ldr	r3, [pc, #192]	; (8004400 <_ZN5Motor8setRatioEdd+0xd8>)
 800433e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004342:	f7fc fc01 	bl	8000b48 <__aeabi_dcmpgt>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <_ZN5Motor8setRatioEdd+0x30>
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	4c2b      	ldr	r4, [pc, #172]	; (8004400 <_ZN5Motor8setRatioEdd+0xd8>)
 8004352:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004356:	e00e      	b.n	8004376 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <_ZN5Motor8setRatioEdd+0xdc>)
 800435e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004362:	f7fc fbd3 	bl	8000b0c <__aeabi_dcmplt>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d004      	beq.n	8004376 <_ZN5Motor8setRatioEdd+0x4e>
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	4c24      	ldr	r4, [pc, #144]	; (8004404 <_ZN5Motor8setRatioEdd+0xdc>)
 8004372:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	4b21      	ldr	r3, [pc, #132]	; (8004400 <_ZN5Motor8setRatioEdd+0xd8>)
 800437c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004380:	f7fc fbe2 	bl	8000b48 <__aeabi_dcmpgt>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <_ZN5Motor8setRatioEdd+0x6e>
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	4c1c      	ldr	r4, [pc, #112]	; (8004400 <_ZN5Motor8setRatioEdd+0xd8>)
 8004390:	e9c7 3400 	strd	r3, r4, [r7]
 8004394:	e00e      	b.n	80043b4 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <_ZN5Motor8setRatioEdd+0xdc>)
 800439c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043a0:	f7fc fbb4 	bl	8000b0c <__aeabi_dcmplt>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <_ZN5Motor8setRatioEdd+0x8c>
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	4c15      	ldr	r4, [pc, #84]	; (8004404 <_ZN5Motor8setRatioEdd+0xdc>)
 80043b0:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	4b13      	ldr	r3, [pc, #76]	; (8004408 <_ZN5Motor8setRatioEdd+0xe0>)
 80043ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043be:	f7fc f933 	bl	8000628 <__aeabi_dmul>
 80043c2:	4603      	mov	r3, r0
 80043c4:	460c      	mov	r4, r1
 80043c6:	4618      	mov	r0, r3
 80043c8:	4621      	mov	r1, r4
 80043ca:	f7fc fbdd 	bl	8000b88 <__aeabi_d2iz>
 80043ce:	4603      	mov	r3, r0
 80043d0:	b21a      	sxth	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <_ZN5Motor8setRatioEdd+0xe0>)
 80043dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043e0:	f7fc f922 	bl	8000628 <__aeabi_dmul>
 80043e4:	4603      	mov	r3, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	4618      	mov	r0, r3
 80043ea:	4621      	mov	r1, r4
 80043ec:	f7fc fbcc 	bl	8000b88 <__aeabi_d2iz>
 80043f0:	4603      	mov	r3, r0
 80043f2:	b21a      	sxth	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	805a      	strh	r2, [r3, #2]

}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	3ff00000 	.word	0x3ff00000
 8004404:	bff00000 	.word	0xbff00000
 8004408:	409c2000 	.word	0x409c2000

0800440c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 800440c:	b490      	push	{r4, r7}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	f04f 0400 	mov.w	r4, #0
 8004424:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	f04f 0400 	mov.w	r4, #0
 8004432:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	f04f 0400 	mov.w	r4, #0
 8004440:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	f04f 0400 	mov.w	r4, #0
 800444e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	f04f 0400 	mov.w	r4, #0
 800445c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	609a      	str	r2, [r3, #8]
}
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bc90      	pop	{r4, r7}
 800447c:	4770      	bx	lr
	...

08004480 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004484:	b086      	sub	sp, #24
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd fb72 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 8004494:	ee10 3a10 	vmov	r3, s0
 8004498:	4618      	mov	r0, r3
 800449a:	f7fc f86d 	bl	8000578 <__aeabi_f2d>
 800449e:	4603      	mov	r3, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fc ffc0 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 80044b0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80044b4:	a376      	add	r3, pc, #472	; (adr r3, 8004690 <_ZN8Odometry12calcPotitionEv+0x210>)
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044be:	f7fc f8b3 	bl	8000628 <__aeabi_dmul>
 80044c2:	4603      	mov	r3, r0
 80044c4:	460c      	mov	r4, r1
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7fc f850 	bl	8000578 <__aeabi_f2d>
 80044d8:	4682      	mov	sl, r0
 80044da:	468b      	mov	fp, r1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044f0:	f7fc f9c4 	bl	800087c <__aeabi_ddiv>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4640      	mov	r0, r8
 80044fa:	4649      	mov	r1, r9
 80044fc:	f7fb fede 	bl	80002bc <__adddf3>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	ec43 2b17 	vmov	d7, r2, r3
 8004508:	eeb0 0a47 	vmov.f32	s0, s14
 800450c:	eef0 0a67 	vmov.f32	s1, s15
 8004510:	f00e fbee 	bl	8012cf0 <cos>
 8004514:	ec53 2b10 	vmov	r2, r3, d0
 8004518:	4650      	mov	r0, sl
 800451a:	4659      	mov	r1, fp
 800451c:	f7fc f884 	bl	8000628 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7fb fec8 	bl	80002bc <__adddf3>
 800452c:	4603      	mov	r3, r0
 800452e:	460c      	mov	r4, r1
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7fc f81b 	bl	8000578 <__aeabi_f2d>
 8004542:	4682      	mov	sl, r0
 8004544:	468b      	mov	fp, r1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800455a:	f7fc f98f 	bl	800087c <__aeabi_ddiv>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4640      	mov	r0, r8
 8004564:	4649      	mov	r1, r9
 8004566:	f7fb fea9 	bl	80002bc <__adddf3>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	ec43 2b17 	vmov	d7, r2, r3
 8004572:	eeb0 0a47 	vmov.f32	s0, s14
 8004576:	eef0 0a67 	vmov.f32	s1, s15
 800457a:	f00e fbfd 	bl	8012d78 <sin>
 800457e:	ec53 2b10 	vmov	r2, r3, d0
 8004582:	4650      	mov	r0, sl
 8004584:	4659      	mov	r1, fp
 8004586:	f7fc f84f 	bl	8000628 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4620      	mov	r0, r4
 8004590:	4629      	mov	r1, r5
 8004592:	f7fb fe93 	bl	80002bc <__adddf3>
 8004596:	4603      	mov	r3, r0
 8004598:	460c      	mov	r4, r1
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80045ac:	461a      	mov	r2, r3
 80045ae:	4623      	mov	r3, r4
 80045b0:	f7fb fe84 	bl	80002bc <__adddf3>
 80045b4:	4603      	mov	r3, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	ed93 7b08 	vldr	d7, [r3, #32]
 80045ca:	eeb0 0a47 	vmov.f32	s0, s14
 80045ce:	eef0 0a67 	vmov.f32	s1, s15
 80045d2:	f00e fb8d 	bl	8012cf0 <cos>
 80045d6:	ec51 0b10 	vmov	r0, r1, d0
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	4b28      	ldr	r3, [pc, #160]	; (8004680 <_ZN8Odometry12calcPotitionEv+0x200>)
 80045e0:	f7fc f822 	bl	8000628 <__aeabi_dmul>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4620      	mov	r0, r4
 80045ea:	4629      	mov	r1, r5
 80045ec:	f7fb fe66 	bl	80002bc <__adddf3>
 80045f0:	4603      	mov	r3, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	ed93 7b08 	vldr	d7, [r3, #32]
 8004606:	eeb0 0a47 	vmov.f32	s0, s14
 800460a:	eef0 0a67 	vmov.f32	s1, s15
 800460e:	f00e fbb3 	bl	8012d78 <sin>
 8004612:	ec51 0b10 	vmov	r0, r1, d0
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	4b19      	ldr	r3, [pc, #100]	; (8004680 <_ZN8Odometry12calcPotitionEv+0x200>)
 800461c:	f7fc f804 	bl	8000628 <__aeabi_dmul>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4620      	mov	r0, r4
 8004626:	4629      	mov	r1, r5
 8004628:	f7fb fe48 	bl	80002bc <__adddf3>
 800462c:	4603      	mov	r3, r0
 800462e:	460c      	mov	r4, r1
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800463c:	4618      	mov	r0, r3
 800463e:	4621      	mov	r1, r4
 8004640:	f7fc faea 	bl	8000c18 <__aeabi_d2f>
 8004644:	4602      	mov	r2, r0
 8004646:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004648:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004650:	4618      	mov	r0, r3
 8004652:	4621      	mov	r1, r4
 8004654:	f7fc fae0 	bl	8000c18 <__aeabi_d2f>
 8004658:	4602      	mov	r2, r0
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <_ZN8Odometry12calcPotitionEv+0x208>)
 800465c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004664:	4618      	mov	r0, r3
 8004666:	4621      	mov	r1, r4
 8004668:	f7fc fad6 	bl	8000c18 <__aeabi_d2f>
 800466c:	4602      	mov	r2, r0
 800466e:	4b07      	ldr	r3, [pc, #28]	; (800468c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004670:	601a      	str	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800467c:	f3af 8000 	nop.w
 8004680:	405b8000 	.word	0x405b8000
 8004684:	20000294 	.word	0x20000294
 8004688:	20000298 	.word	0x20000298
 800468c:	2000029c 	.word	0x2000029c
 8004690:	d2f1a9fc 	.word	0xd2f1a9fc
 8004694:	3f50624d 	.word	0x3f50624d

08004698 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	calcPotition();
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff feed 	bl	8004480 <_ZN8Odometry12calcPotitionEv>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80046ae:	b490      	push	{r4, r7}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
	return theta_;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80046bc:	ec44 3b17 	vmov	d7, r3, r4
}
 80046c0:	eeb0 0a47 	vmov.f32	s0, s14
 80046c4:	eef0 0a67 	vmov.f32	s1, s15
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc90      	pop	{r4, r7}
 80046ce:	4770      	bx	lr

080046d0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80046d0:	b490      	push	{r4, r7}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	f04f 0400 	mov.w	r4, #0
 80046e2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	f04f 0400 	mov.w	r4, #0
 80046f0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	f04f 0400 	mov.w	r4, #0
 80046fe:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bc90      	pop	{r4, r7}
 800470a:	4770      	bx	lr

0800470c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 800470c:	b490      	push	{r4, r7}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	f04f 0400 	mov.w	r4, #0
 8004724:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	f04f 0400 	mov.w	r4, #0
 8004732:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	f04f 0400 	mov.w	r4, #0
 8004740:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800474a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800474e:	2200      	movs	r2, #0
 8004750:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004752:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <_ZN13PathFollowingC1Ev+0xec>)
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	f04f 0400 	mov.w	r4, #0
 800475c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004760:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <_ZN13PathFollowingC1Ev+0xec>)
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	f04f 0400 	mov.w	r4, #0
 800476a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800476e:	4a22      	ldr	r2, [pc, #136]	; (80047f8 <_ZN13PathFollowingC1Ev+0xec>)
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	f04f 0400 	mov.w	r4, #0
 8004778:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <_ZN13PathFollowingC1Ev+0xf0>)
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	f04f 0400 	mov.w	r4, #0
 8004786:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800478a:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <_ZN13PathFollowingC1Ev+0xf0>)
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	f04f 0400 	mov.w	r4, #0
 8004794:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004798:	4a18      	ldr	r2, [pc, #96]	; (80047fc <_ZN13PathFollowingC1Ev+0xf0>)
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	f04f 0400 	mov.w	r4, #0
 80047a2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80047a6:	4a15      	ldr	r2, [pc, #84]	; (80047fc <_ZN13PathFollowingC1Ev+0xf0>)
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	f04f 0400 	mov.w	r4, #0
 80047b0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80047b4:	4a11      	ldr	r2, [pc, #68]	; (80047fc <_ZN13PathFollowingC1Ev+0xf0>)
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	f04f 0400 	mov.w	r4, #0
 80047be:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80047c2:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <_ZN13PathFollowingC1Ev+0xf0>)
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	f04f 0400 	mov.w	r4, #0
 80047cc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80047d0:	4a0b      	ldr	r2, [pc, #44]	; (8004800 <_ZN13PathFollowingC1Ev+0xf4>)
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	f04f 0400 	mov.w	r4, #0
 80047da:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80047de:	4a08      	ldr	r2, [pc, #32]	; (8004800 <_ZN13PathFollowingC1Ev+0xf4>)
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	f04f 0400 	mov.w	r4, #0
 80047e8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc90      	pop	{r4, r7}
 80047f6:	4770      	bx	lr
 80047f8:	2003eda8 	.word	0x2003eda8
 80047fc:	2003ed38 	.word	0x2003ed38
 8004800:	2003ed98 	.word	0x2003ed98

08004804 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800480c:	f001 fc82 	bl	8006114 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004810:	f107 0318 	add.w	r3, r7, #24
 8004814:	2201      	movs	r2, #1
 8004816:	4915      	ldr	r1, [pc, #84]	; (800486c <_ZN13PathFollowing4initEv+0x68>)
 8004818:	4815      	ldr	r0, [pc, #84]	; (8004870 <_ZN13PathFollowing4initEv+0x6c>)
 800481a:	f7fc ff9f 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800481e:	f107 0310 	add.w	r3, r7, #16
 8004822:	2201      	movs	r2, #1
 8004824:	4913      	ldr	r1, [pc, #76]	; (8004874 <_ZN13PathFollowing4initEv+0x70>)
 8004826:	4812      	ldr	r0, [pc, #72]	; (8004870 <_ZN13PathFollowing4initEv+0x6c>)
 8004828:	f7fc ff98 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800482c:	f107 0308 	add.w	r3, r7, #8
 8004830:	2201      	movs	r2, #1
 8004832:	4911      	ldr	r1, [pc, #68]	; (8004878 <_ZN13PathFollowing4initEv+0x74>)
 8004834:	480e      	ldr	r0, [pc, #56]	; (8004870 <_ZN13PathFollowing4initEv+0x6c>)
 8004836:	f7fc ff91 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800483a:	ed97 7b06 	vldr	d7, [r7, #24]
 800483e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004842:	ed97 5b02 	vldr	d5, [r7, #8]
 8004846:	eeb0 2a45 	vmov.f32	s4, s10
 800484a:	eef0 2a65 	vmov.f32	s5, s11
 800484e:	eeb0 1a46 	vmov.f32	s2, s12
 8004852:	eef0 1a66 	vmov.f32	s3, s13
 8004856:	eeb0 0a47 	vmov.f32	s0, s14
 800485a:	eef0 0a67 	vmov.f32	s1, s15
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f80c 	bl	800487c <_ZN13PathFollowing7setGainEddd>
}
 8004864:	bf00      	nop
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	0801833c 	.word	0x0801833c
 8004870:	08018344 	.word	0x08018344
 8004874:	0801834c 	.word	0x0801834c
 8004878:	08018354 	.word	0x08018354

0800487c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800487c:	b490      	push	{r4, r7}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	61f8      	str	r0, [r7, #28]
 8004884:	ed87 0b04 	vstr	d0, [r7, #16]
 8004888:	ed87 1b02 	vstr	d1, [r7, #8]
 800488c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004890:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004892:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004896:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800489a:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800489c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80048a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80048a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80048aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80048ae:	bf00      	nop
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc90      	pop	{r4, r7}
 80048b6:	4770      	bx	lr
 80048b8:	2003eda8 	.word	0x2003eda8

080048bc <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80048c4:	2088      	movs	r0, #136	; 0x88
 80048c6:	f7fd fa9a 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80048ca:	2080      	movs	r0, #128	; 0x80
 80048cc:	f7fd fa97 	bl	8001dfe <INA260_init>
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80048e0:	2188      	movs	r1, #136	; 0x88
 80048e2:	2002      	movs	r0, #2
 80048e4:	f7fd fa28 	bl	8001d38 <INA260_read>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fb fe32 	bl	8000554 <__aeabi_i2d>
 80048f0:	a30c      	add	r3, pc, #48	; (adr r3, 8004924 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb fe97 	bl	8000628 <__aeabi_dmul>
 80048fa:	4603      	mov	r3, r0
 80048fc:	460c      	mov	r4, r1
 80048fe:	4618      	mov	r0, r3
 8004900:	4621      	mov	r1, r4
 8004902:	f7fc f989 	bl	8000c18 <__aeabi_d2f>
 8004906:	4602      	mov	r2, r0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a03      	ldr	r2, [pc, #12]	; (8004920 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004912:	6013      	str	r3, [r2, #0]
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}
 800491c:	f3af 8000 	nop.w
 8004920:	200002a0 	.word	0x200002a0
 8004924:	47ae147b 	.word	0x47ae147b
 8004928:	3f547ae1 	.word	0x3f547ae1

0800492c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	ee07 3a90 	vmov	s15, r3

}
 800493c:	eeb0 0a67 	vmov.f32	s0, s15
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004958:	2102      	movs	r1, #2
 800495a:	4822      	ldr	r0, [pc, #136]	; (80049e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800495c:	f004 ff50 	bl	8009800 <HAL_GPIO_ReadPin>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004970:	89fb      	ldrh	r3, [r7, #14]
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004978:	2108      	movs	r1, #8
 800497a:	481a      	ldr	r0, [pc, #104]	; (80049e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800497c:	f004 ff40 	bl	8009800 <HAL_GPIO_ReadPin>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf0c      	ite	eq
 8004986:	2301      	moveq	r3, #1
 8004988:	2300      	movne	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004990:	89fb      	ldrh	r3, [r7, #14]
 8004992:	f043 0302 	orr.w	r3, r3, #2
 8004996:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004998:	2110      	movs	r1, #16
 800499a:	4812      	ldr	r0, [pc, #72]	; (80049e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800499c:	f004 ff30 	bl	8009800 <HAL_GPIO_ReadPin>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf0c      	ite	eq
 80049a6:	2301      	moveq	r3, #1
 80049a8:	2300      	movne	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80049b0:	89fb      	ldrh	r3, [r7, #14]
 80049b2:	f043 0304 	orr.w	r3, r3, #4
 80049b6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80049b8:	2180      	movs	r1, #128	; 0x80
 80049ba:	480a      	ldr	r0, [pc, #40]	; (80049e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80049bc:	f004 ff20 	bl	8009800 <HAL_GPIO_ReadPin>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80049d0:	89fb      	ldrh	r3, [r7, #14]
 80049d2:	f043 0308 	orr.w	r3, r3, #8
 80049d6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80049d8:	89fb      	ldrh	r3, [r7, #14]

}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40020c00 	.word	0x40020c00

080049e8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	805a      	strh	r2, [r3, #2]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	809a      	strh	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	719a      	strb	r2, [r3, #6]
{

}
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	799b      	ldrb	r3, [r3, #6]
 8004a24:	f083 0301 	eor.w	r3, r3, #1
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80c7 	beq.w	8004bbe <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004a30:	4b65      	ldr	r3, [pc, #404]	; (8004bc8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	f083 0301 	eor.w	r3, r3, #1
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d027      	beq.n	8004a8e <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004a3e:	2104      	movs	r1, #4
 8004a40:	4862      	ldr	r0, [pc, #392]	; (8004bcc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004a42:	f004 fedd 	bl	8009800 <HAL_GPIO_ReadPin>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d006      	beq.n	8004a64 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004a56:	4b5e      	ldr	r3, [pc, #376]	; (8004bd0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	e002      	b.n	8004a6a <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004a64:	4b5a      	ldr	r3, [pc, #360]	; (8004bd0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004a6a:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d93f      	bls.n	8004af2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004a80:	4b51      	ldr	r3, [pc, #324]	; (8004bc8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004a86:	4b52      	ldr	r3, [pc, #328]	; (8004bd0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	e031      	b.n	8004af2 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004a8e:	4b4e      	ldr	r3, [pc, #312]	; (8004bc8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d02d      	beq.n	8004af2 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004a96:	2104      	movs	r1, #4
 8004a98:	484c      	ldr	r0, [pc, #304]	; (8004bcc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004a9a:	f004 feb1 	bl	8009800 <HAL_GPIO_ReadPin>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004aae:	4b48      	ldr	r3, [pc, #288]	; (8004bd0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	4b46      	ldr	r3, [pc, #280]	; (8004bd0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	e002      	b.n	8004ac2 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004abc:	4b44      	ldr	r3, [pc, #272]	; (8004bd0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004ac2:	4b43      	ldr	r3, [pc, #268]	; (8004bd0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d913      	bls.n	8004af2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	f083 0301 	eor.w	r3, r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004ad8:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	889b      	ldrh	r3, [r3, #4]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	889a      	ldrh	r2, [r3, #4]
 8004aee:	4b39      	ldr	r3, [pc, #228]	; (8004bd4 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004af0:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004af2:	4b39      	ldr	r3, [pc, #228]	; (8004bd8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	f083 0301 	eor.w	r3, r3, #1
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d027      	beq.n	8004b50 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b04:	4835      	ldr	r0, [pc, #212]	; (8004bdc <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004b06:	f004 fe7b 	bl	8009800 <HAL_GPIO_ReadPin>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d006      	beq.n	8004b28 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004b1a:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	4b2f      	ldr	r3, [pc, #188]	; (8004be0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004b24:	801a      	strh	r2, [r3, #0]
 8004b26:	e002      	b.n	8004b2e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004b28:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004b2e:	4b2c      	ldr	r3, [pc, #176]	; (8004be0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d90c      	bls.n	8004b50 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	f043 0302 	orr.w	r3, r3, #2
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8004b44:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8004b4a:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004b50:	4b21      	ldr	r3, [pc, #132]	; (8004bd8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d02e      	beq.n	8004bb6 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b5c:	481f      	ldr	r0, [pc, #124]	; (8004bdc <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004b5e:	f004 fe4f 	bl	8009800 <HAL_GPIO_ReadPin>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d006      	beq.n	8004b80 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8004b72:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	e002      	b.n	8004b86 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004b86:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d913      	bls.n	8004bb6 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	f083 0302 	eor.w	r3, r3, #2
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	885b      	ldrh	r3, [r3, #2]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	885a      	ldrh	r2, [r3, #2]
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8004bb4:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	881a      	ldrh	r2, [r3, #0]
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 8004bbc:	801a      	strh	r2, [r3, #0]
	}

}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	200002aa 	.word	0x200002aa
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	200002ae 	.word	0x200002ae
 8004bd4:	200002a8 	.word	0x200002a8
 8004bd8:	200002ab 	.word	0x200002ab
 8004bdc:	40020c00 	.word	0x40020c00
 8004be0:	200002ac 	.word	0x200002ac
 8004be4:	200002a6 	.word	0x200002a6
 8004be8:	200002a4 	.word	0x200002a4

08004bec <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	return status_;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	881b      	ldrh	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	889b      	ldrh	r3, [r3, #4]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	809a      	strh	r2, [r3, #4]
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	719a      	strb	r2, [r3, #6]
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	719a      	strb	r2, [r3, #6]
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	799b      	ldrb	r3, [r3, #6]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8004c98:	3308      	adds	r3, #8
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f00f f8a5 	bl	8013df0 <memcpy>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	08018378 	.word	0x08018378

08004cdc <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d010      	beq.n	8004d14 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	ed97 0a00 	vldr	s0, [r7]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff f86c 	bl	8003dd8 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f7ff f89e 	bl	8003e50 <_ZN6Logger9storeLog2Ef>
	}

}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a07      	ldr	r2, [pc, #28]	; (8004d48 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8004d2a:	4908      	ldr	r1, [pc, #32]	; (8004d4c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff f976 	bl	800401e <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a06      	ldr	r2, [pc, #24]	; (8004d50 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8004d38:	4904      	ldr	r1, [pc, #16]	; (8004d4c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff f982 	bl	8004044 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	0801856c 	.word	0x0801856c
 8004d4c:	08018578 	.word	0x08018578
 8004d50:	08018584 	.word	0x08018584

08004d54 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8004d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d046      	beq.n	8004df4 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3204      	adds	r2, #4
 8004d78:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004d94:	3301      	adds	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004da4:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8004da6:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004dae:	2bf9      	cmp	r3, #249	; 0xf9
 8004db0:	d903      	bls.n	8004dba <_ZN20SystemIdentification10updateMsigEv+0x66>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	22fa      	movs	r2, #250	; 0xfa
 8004db6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685c      	ldr	r4, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fb fbd7 	bl	8000578 <__aeabi_f2d>
 8004dca:	4605      	mov	r5, r0
 8004dcc:	460e      	mov	r6, r1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004dd4:	eef1 7a67 	vneg.f32	s15, s15
 8004dd8:	ee17 3a90 	vmov	r3, s15
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fb fbcb 	bl	8000578 <__aeabi_f2d>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	ec43 2b11 	vmov	d1, r2, r3
 8004dea:	ec46 5b10 	vmov	d0, r5, r6
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff fa9a 	bl	8004328 <_ZN5Motor8setRatioEdd>

	}

}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfc:	200002b0 	.word	0x200002b0

08004e00 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff f9e6 	bl	80041fe <_ZN6Logger5startEv>
	processing_flag_ = true;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	0000      	movs	r0, r0
 8004e44:	0000      	movs	r0, r0
	...

08004e48 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff f9e3 	bl	8004220 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004e88 <_ZN20SystemIdentification4stopEv+0x40>
 8004e72:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004e88 <_ZN20SystemIdentification4stopEv+0x40>
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fa56 	bl	8004328 <_ZN5Motor8setRatioEdd>
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	f3af 8000 	nop.w
	...

08004e90 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	615a      	str	r2, [r3, #20]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	619a      	str	r2, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	61da      	str	r2, [r3, #28]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	621a      	str	r2, [r3, #32]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	f107 020c 	add.w	r2, r7, #12
 8004f38:	f107 0110 	add.w	r1, r7, #16
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fc fa63 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8004f42:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f56:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8004f5a:	6978      	ldr	r0, [r7, #20]
 8004f5c:	f7fb fb0c 	bl	8000578 <__aeabi_f2d>
 8004f60:	a30b      	add	r3, pc, #44	; (adr r3, 8004f90 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f7fb fb5f 	bl	8000628 <__aeabi_dmul>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	4618      	mov	r0, r3
 8004f70:	4621      	mov	r1, r4
 8004f72:	f7fb fe51 	bl	8000c18 <__aeabi_d2f>
 8004f76:	4602      	mov	r2, r0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	ee07 3a90 	vmov	s15, r3
}
 8004f84:	eeb0 0a67 	vmov.f32	s0, s15
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd90      	pop	{r4, r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	1ab1d998 	.word	0x1ab1d998
 8004f94:	3f7830b5 	.word	0x3f7830b5

08004f98 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8004f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	ed93 7a00 	vldr	s14, [r3]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8004fbe:	4b48      	ldr	r3, [pc, #288]	; (80050e0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8004fd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8004fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fdc:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8004fe0:	4b3f      	ldr	r3, [pc, #252]	; (80050e0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fb fac7 	bl	8000578 <__aeabi_f2d>
 8004fea:	4604      	mov	r4, r0
 8004fec:	460d      	mov	r5, r1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	ed93 7a06 	vldr	s14, [r3, #24]
 8004ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffc:	ee17 0a90 	vmov	r0, s15
 8005000:	f7fb faba 	bl	8000578 <__aeabi_f2d>
 8005004:	a334      	add	r3, pc, #208	; (adr r3, 80050d8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	f7fb fb0d 	bl	8000628 <__aeabi_dmul>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4620      	mov	r0, r4
 8005014:	4629      	mov	r1, r5
 8005016:	f7fb f951 	bl	80002bc <__adddf3>
 800501a:	4603      	mov	r3, r0
 800501c:	460c      	mov	r4, r1
 800501e:	4618      	mov	r0, r3
 8005020:	4621      	mov	r1, r4
 8005022:	f7fb fdf9 	bl	8000c18 <__aeabi_d2f>
 8005026:	4602      	mov	r2, r0
 8005028:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800502a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005032:	4b2c      	ldr	r3, [pc, #176]	; (80050e4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005034:	edd3 7a00 	vldr	s15, [r3]
 8005038:	edd7 6a05 	vldr	s13, [r7, #20]
 800503c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005044:	ee17 0a90 	vmov	r0, s15
 8005048:	f7fb fa96 	bl	8000578 <__aeabi_f2d>
 800504c:	a322      	add	r3, pc, #136	; (adr r3, 80050d8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f7fb fc13 	bl	800087c <__aeabi_ddiv>
 8005056:	4603      	mov	r3, r0
 8005058:	460c      	mov	r4, r1
 800505a:	4618      	mov	r0, r3
 800505c:	4621      	mov	r1, r4
 800505e:	f7fb fddb 	bl	8000c18 <__aeabi_d2f>
 8005062:	4603      	mov	r3, r0
 8005064:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005066:	ed97 7a04 	vldr	s14, [r7, #16]
 800506a:	edd7 7a03 	vldr	s15, [r7, #12]
 800506e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005074:	edd3 7a00 	vldr	s15, [r3]
 8005078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800507c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800508a:	edd7 7a02 	vldr	s15, [r7, #8]
 800508e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005092:	ee17 0a90 	vmov	r0, s15
 8005096:	f7fb fa6f 	bl	8000578 <__aeabi_f2d>
 800509a:	4605      	mov	r5, r0
 800509c:	460e      	mov	r6, r1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80050a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80050a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ac:	ee17 0a90 	vmov	r0, s15
 80050b0:	f7fb fa62 	bl	8000578 <__aeabi_f2d>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	ec43 2b11 	vmov	d1, r2, r3
 80050bc:	ec46 5b10 	vmov	d0, r5, r6
 80050c0:	4620      	mov	r0, r4
 80050c2:	f7ff f931 	bl	8004328 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80050c6:	4a07      	ldr	r2, [pc, #28]	; (80050e4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6013      	str	r3, [r2, #0]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d4:	f3af 8000 	nop.w
 80050d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80050dc:	3f50624d 	.word	0x3f50624d
 80050e0:	200002b8 	.word	0x200002b8
 80050e4:	200002b4 	.word	0x200002b4

080050e8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80050f4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	605a      	str	r2, [r3, #4]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	ed87 0a02 	vstr	s0, [r7, #8]
 800511c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	ed87 0a02 	vstr	s0, [r7, #8]
 8005144:	edc7 0a01 	vstr	s1, [r7, #4]
 8005148:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	615a      	str	r2, [r3, #20]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	ed87 0a02 	vstr	s0, [r7, #8]
 8005176:	edc7 0a01 	vstr	s1, [r7, #4]
 800517a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff febf 	bl	8004f28 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff feef 	bl	8004f98 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005218 <_ZN12VelocityCtrl4stopEv+0x30>
 8005200:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005218 <_ZN12VelocityCtrl4stopEv+0x30>
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff f88f 	bl	8004328 <_ZN5Motor8setRatioEdd>

}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	f3af 8000 	nop.w
	...

08005220 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005232:	f001 fe27 	bl	8006e84 <cppFlip100ns>

		tim7_timer++;
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800523e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d902      	bls.n	8005250 <HAL_TIM_PeriodElapsedCallback+0x30>
 800524a:	4b18      	ldr	r3, [pc, #96]	; (80052ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10e      	bne.n	8005278 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800525a:	f001 fdc9 	bl	8006df0 <cppFlip1ms>

		tim6_timer++;
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005266:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005268:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a10      	ldr	r2, [pc, #64]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d902      	bls.n	8005278 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005272:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a0f      	ldr	r2, [pc, #60]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10e      	bne.n	80052a0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005282:	f001 fe09 	bl	8006e98 <cppFlip10ms>

		tim13_timer++;
 8005286:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3301      	adds	r3, #1
 800528c:	4a0c      	ldr	r2, [pc, #48]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800528e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a06      	ldr	r2, [pc, #24]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d902      	bls.n	80052a0 <HAL_TIM_PeriodElapsedCallback+0x80>
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
	}

}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40001400 	.word	0x40001400
 80052ac:	2003ea58 	.word	0x2003ea58
 80052b0:	0001869f 	.word	0x0001869f
 80052b4:	40001000 	.word	0x40001000
 80052b8:	2003ea14 	.word	0x2003ea14
 80052bc:	40001c00 	.word	0x40001c00
 80052c0:	2003ea5c 	.word	0x2003ea5c

080052c4 <init>:

void init()
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80052c8:	2201      	movs	r2, #1
 80052ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052ce:	4808      	ldr	r0, [pc, #32]	; (80052f0 <init+0x2c>)
 80052d0:	f004 faae 	bl	8009830 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80052d4:	4807      	ldr	r0, [pc, #28]	; (80052f4 <init+0x30>)
 80052d6:	f008 f976 	bl	800d5c6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80052da:	4807      	ldr	r0, [pc, #28]	; (80052f8 <init+0x34>)
 80052dc:	f008 f973 	bl	800d5c6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80052e0:	4806      	ldr	r0, [pc, #24]	; (80052fc <init+0x38>)
 80052e2:	f008 f970 	bl	800d5c6 <HAL_TIM_Base_Start_IT>

	cppInit();
 80052e6:	f001 fce3 	bl	8006cb0 <cppInit>

	//path_following_initialize();

}
 80052ea:	bf00      	nop
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000
 80052f4:	2003eb40 	.word	0x2003eb40
 80052f8:	2003ece4 	.word	0x2003ece4
 80052fc:	2003ea60 	.word	0x2003ea60

08005300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005304:	f002 ff8c 	bl	8008220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005308:	f000 f82a 	bl	8005360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800530c:	f000 fdbc 	bl	8005e88 <MX_GPIO_Init>
  MX_DMA_Init();
 8005310:	f000 fd8a 	bl	8005e28 <MX_DMA_Init>
  MX_I2C2_Init();
 8005314:	f000 f9e8 	bl	80056e8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005318:	f000 fa14 	bl	8005744 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800531c:	f000 fa32 	bl	8005784 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005320:	f000 fa66 	bl	80057f0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005324:	f000 fb70 	bl	8005a08 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005328:	f000 fc3c 	bl	8005ba4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800532c:	f000 fd52 	bl	8005dd4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005330:	f00a f91c 	bl	800f56c <MX_FATFS_Init>
  MX_TIM6_Init();
 8005334:	f000 fbcc 	bl	8005ad0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005338:	f000 f9a8 	bl	800568c <MX_I2C1_Init>
  MX_TIM3_Init();
 800533c:	f000 fb00 	bl	8005940 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005340:	f000 fc88 	bl	8005c54 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005344:	f000 fcd4 	bl	8005cf0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005348:	f000 f898 	bl	800547c <MX_ADC2_Init>
  MX_TIM7_Init();
 800534c:	f000 fbf6 	bl	8005b3c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005350:	f000 fd1c 	bl	8005d8c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005354:	f7ff ffb6 	bl	80052c4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005358:	f001 fdbe 	bl	8006ed8 <cppLoop>
 800535c:	e7fc      	b.n	8005358 <main+0x58>
	...

08005360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b0a4      	sub	sp, #144	; 0x90
 8005364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005366:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800536a:	2234      	movs	r2, #52	; 0x34
 800536c:	2100      	movs	r1, #0
 800536e:	4618      	mov	r0, r3
 8005370:	f00e fd49 	bl	8013e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005374:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005384:	f107 030c 	add.w	r3, r7, #12
 8005388:	223c      	movs	r2, #60	; 0x3c
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f00e fd3a 	bl	8013e06 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	4b37      	ldr	r3, [pc, #220]	; (8005474 <SystemClock_Config+0x114>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	4a36      	ldr	r2, [pc, #216]	; (8005474 <SystemClock_Config+0x114>)
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	6413      	str	r3, [r2, #64]	; 0x40
 80053a2:	4b34      	ldr	r3, [pc, #208]	; (8005474 <SystemClock_Config+0x114>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	4b31      	ldr	r3, [pc, #196]	; (8005478 <SystemClock_Config+0x118>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a30      	ldr	r2, [pc, #192]	; (8005478 <SystemClock_Config+0x118>)
 80053b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	4b2e      	ldr	r3, [pc, #184]	; (8005478 <SystemClock_Config+0x118>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80053ca:	2301      	movs	r3, #1
 80053cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053d4:	2302      	movs	r3, #2
 80053d6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053dc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80053de:	2308      	movs	r3, #8
 80053e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80053e2:	23b4      	movs	r3, #180	; 0xb4
 80053e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053e8:	2302      	movs	r3, #2
 80053ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80053ee:	2308      	movs	r3, #8
 80053f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80053f4:	2302      	movs	r3, #2
 80053f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80053fe:	4618      	mov	r0, r3
 8005400:	f005 fe38 	bl	800b074 <HAL_RCC_OscConfig>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800540a:	f000 fe7f 	bl	800610c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800540e:	f005 f9b3 	bl	800a778 <HAL_PWREx_EnableOverDrive>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005418:	f000 fe78 	bl	800610c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800541c:	230f      	movs	r3, #15
 800541e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005420:	2302      	movs	r3, #2
 8005422:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005424:	2300      	movs	r3, #0
 8005426:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005428:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800542c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800542e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005432:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005434:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005438:	2105      	movs	r1, #5
 800543a:	4618      	mov	r0, r3
 800543c:	f005 f9ec 	bl	800a818 <HAL_RCC_ClockConfig>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005446:	f000 fe61 	bl	800610c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800544a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800544e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005450:	2300      	movs	r3, #0
 8005452:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005454:	2300      	movs	r3, #0
 8005456:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	4618      	mov	r0, r3
 800545e:	f005 fbcb 	bl	800abf8 <HAL_RCCEx_PeriphCLKConfig>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005468:	f000 fe50 	bl	800610c <Error_Handler>
  }
}
 800546c:	bf00      	nop
 800546e:	3790      	adds	r7, #144	; 0x90
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40023800 	.word	0x40023800
 8005478:	40007000 	.word	0x40007000

0800547c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005482:	463b      	mov	r3, r7
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800548e:	4b7c      	ldr	r3, [pc, #496]	; (8005680 <MX_ADC2_Init+0x204>)
 8005490:	4a7c      	ldr	r2, [pc, #496]	; (8005684 <MX_ADC2_Init+0x208>)
 8005492:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005494:	4b7a      	ldr	r3, [pc, #488]	; (8005680 <MX_ADC2_Init+0x204>)
 8005496:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800549a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800549c:	4b78      	ldr	r3, [pc, #480]	; (8005680 <MX_ADC2_Init+0x204>)
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80054a2:	4b77      	ldr	r3, [pc, #476]	; (8005680 <MX_ADC2_Init+0x204>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80054a8:	4b75      	ldr	r3, [pc, #468]	; (8005680 <MX_ADC2_Init+0x204>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80054ae:	4b74      	ldr	r3, [pc, #464]	; (8005680 <MX_ADC2_Init+0x204>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80054b6:	4b72      	ldr	r3, [pc, #456]	; (8005680 <MX_ADC2_Init+0x204>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80054bc:	4b70      	ldr	r3, [pc, #448]	; (8005680 <MX_ADC2_Init+0x204>)
 80054be:	4a72      	ldr	r2, [pc, #456]	; (8005688 <MX_ADC2_Init+0x20c>)
 80054c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80054c2:	4b6f      	ldr	r3, [pc, #444]	; (8005680 <MX_ADC2_Init+0x204>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80054c8:	4b6d      	ldr	r3, [pc, #436]	; (8005680 <MX_ADC2_Init+0x204>)
 80054ca:	220e      	movs	r2, #14
 80054cc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80054ce:	4b6c      	ldr	r3, [pc, #432]	; (8005680 <MX_ADC2_Init+0x204>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80054d6:	4b6a      	ldr	r3, [pc, #424]	; (8005680 <MX_ADC2_Init+0x204>)
 80054d8:	2201      	movs	r2, #1
 80054da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80054dc:	4868      	ldr	r0, [pc, #416]	; (8005680 <MX_ADC2_Init+0x204>)
 80054de:	f002 ff33 	bl	8008348 <HAL_ADC_Init>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80054e8:	f000 fe10 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80054ec:	230a      	movs	r3, #10
 80054ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80054f0:	2301      	movs	r3, #1
 80054f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80054f4:	2306      	movs	r3, #6
 80054f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80054f8:	463b      	mov	r3, r7
 80054fa:	4619      	mov	r1, r3
 80054fc:	4860      	ldr	r0, [pc, #384]	; (8005680 <MX_ADC2_Init+0x204>)
 80054fe:	f003 f877 	bl	80085f0 <HAL_ADC_ConfigChannel>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005508:	f000 fe00 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800550c:	230b      	movs	r3, #11
 800550e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005510:	2302      	movs	r3, #2
 8005512:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005514:	463b      	mov	r3, r7
 8005516:	4619      	mov	r1, r3
 8005518:	4859      	ldr	r0, [pc, #356]	; (8005680 <MX_ADC2_Init+0x204>)
 800551a:	f003 f869 	bl	80085f0 <HAL_ADC_ConfigChannel>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005524:	f000 fdf2 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005528:	230c      	movs	r3, #12
 800552a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800552c:	2303      	movs	r3, #3
 800552e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005530:	463b      	mov	r3, r7
 8005532:	4619      	mov	r1, r3
 8005534:	4852      	ldr	r0, [pc, #328]	; (8005680 <MX_ADC2_Init+0x204>)
 8005536:	f003 f85b 	bl	80085f0 <HAL_ADC_ConfigChannel>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005540:	f000 fde4 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005544:	230d      	movs	r3, #13
 8005546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005548:	2304      	movs	r3, #4
 800554a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800554c:	463b      	mov	r3, r7
 800554e:	4619      	mov	r1, r3
 8005550:	484b      	ldr	r0, [pc, #300]	; (8005680 <MX_ADC2_Init+0x204>)
 8005552:	f003 f84d 	bl	80085f0 <HAL_ADC_ConfigChannel>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800555c:	f000 fdd6 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005560:	2300      	movs	r3, #0
 8005562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005564:	2305      	movs	r3, #5
 8005566:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005568:	463b      	mov	r3, r7
 800556a:	4619      	mov	r1, r3
 800556c:	4844      	ldr	r0, [pc, #272]	; (8005680 <MX_ADC2_Init+0x204>)
 800556e:	f003 f83f 	bl	80085f0 <HAL_ADC_ConfigChannel>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005578:	f000 fdc8 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800557c:	2301      	movs	r3, #1
 800557e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005580:	2306      	movs	r3, #6
 8005582:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005584:	463b      	mov	r3, r7
 8005586:	4619      	mov	r1, r3
 8005588:	483d      	ldr	r0, [pc, #244]	; (8005680 <MX_ADC2_Init+0x204>)
 800558a:	f003 f831 	bl	80085f0 <HAL_ADC_ConfigChannel>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005594:	f000 fdba 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005598:	2302      	movs	r3, #2
 800559a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800559c:	2307      	movs	r3, #7
 800559e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80055a0:	463b      	mov	r3, r7
 80055a2:	4619      	mov	r1, r3
 80055a4:	4836      	ldr	r0, [pc, #216]	; (8005680 <MX_ADC2_Init+0x204>)
 80055a6:	f003 f823 	bl	80085f0 <HAL_ADC_ConfigChannel>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80055b0:	f000 fdac 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80055b4:	2303      	movs	r3, #3
 80055b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80055b8:	2308      	movs	r3, #8
 80055ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80055bc:	463b      	mov	r3, r7
 80055be:	4619      	mov	r1, r3
 80055c0:	482f      	ldr	r0, [pc, #188]	; (8005680 <MX_ADC2_Init+0x204>)
 80055c2:	f003 f815 	bl	80085f0 <HAL_ADC_ConfigChannel>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80055cc:	f000 fd9e 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80055d0:	2304      	movs	r3, #4
 80055d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80055d4:	2309      	movs	r3, #9
 80055d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80055d8:	463b      	mov	r3, r7
 80055da:	4619      	mov	r1, r3
 80055dc:	4828      	ldr	r0, [pc, #160]	; (8005680 <MX_ADC2_Init+0x204>)
 80055de:	f003 f807 	bl	80085f0 <HAL_ADC_ConfigChannel>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80055e8:	f000 fd90 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80055ec:	2305      	movs	r3, #5
 80055ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80055f0:	230a      	movs	r3, #10
 80055f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80055f4:	463b      	mov	r3, r7
 80055f6:	4619      	mov	r1, r3
 80055f8:	4821      	ldr	r0, [pc, #132]	; (8005680 <MX_ADC2_Init+0x204>)
 80055fa:	f002 fff9 	bl	80085f0 <HAL_ADC_ConfigChannel>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005604:	f000 fd82 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005608:	2306      	movs	r3, #6
 800560a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800560c:	230b      	movs	r3, #11
 800560e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005610:	463b      	mov	r3, r7
 8005612:	4619      	mov	r1, r3
 8005614:	481a      	ldr	r0, [pc, #104]	; (8005680 <MX_ADC2_Init+0x204>)
 8005616:	f002 ffeb 	bl	80085f0 <HAL_ADC_ConfigChannel>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005620:	f000 fd74 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005624:	2307      	movs	r3, #7
 8005626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005628:	230c      	movs	r3, #12
 800562a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800562c:	463b      	mov	r3, r7
 800562e:	4619      	mov	r1, r3
 8005630:	4813      	ldr	r0, [pc, #76]	; (8005680 <MX_ADC2_Init+0x204>)
 8005632:	f002 ffdd 	bl	80085f0 <HAL_ADC_ConfigChannel>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800563c:	f000 fd66 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005640:	2308      	movs	r3, #8
 8005642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005644:	230d      	movs	r3, #13
 8005646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005648:	463b      	mov	r3, r7
 800564a:	4619      	mov	r1, r3
 800564c:	480c      	ldr	r0, [pc, #48]	; (8005680 <MX_ADC2_Init+0x204>)
 800564e:	f002 ffcf 	bl	80085f0 <HAL_ADC_ConfigChannel>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005658:	f000 fd58 	bl	800610c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800565c:	2309      	movs	r3, #9
 800565e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005660:	230e      	movs	r3, #14
 8005662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005664:	463b      	mov	r3, r7
 8005666:	4619      	mov	r1, r3
 8005668:	4805      	ldr	r0, [pc, #20]	; (8005680 <MX_ADC2_Init+0x204>)
 800566a:	f002 ffc1 	bl	80085f0 <HAL_ADC_ConfigChannel>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005674:	f000 fd4a 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	2003e8e4 	.word	0x2003e8e4
 8005684:	40012100 	.word	0x40012100
 8005688:	0f000001 	.word	0x0f000001

0800568c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005690:	4b12      	ldr	r3, [pc, #72]	; (80056dc <MX_I2C1_Init+0x50>)
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <MX_I2C1_Init+0x54>)
 8005694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <MX_I2C1_Init+0x50>)
 8005698:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <MX_I2C1_Init+0x58>)
 800569a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <MX_I2C1_Init+0x50>)
 800569e:	2200      	movs	r2, #0
 80056a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <MX_I2C1_Init+0x50>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <MX_I2C1_Init+0x50>)
 80056aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <MX_I2C1_Init+0x50>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <MX_I2C1_Init+0x50>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <MX_I2C1_Init+0x50>)
 80056be:	2200      	movs	r2, #0
 80056c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <MX_I2C1_Init+0x50>)
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80056c8:	4804      	ldr	r0, [pc, #16]	; (80056dc <MX_I2C1_Init+0x50>)
 80056ca:	f004 f8cb 	bl	8009864 <HAL_I2C_Init>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80056d4:	f000 fd1a 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80056d8:	bf00      	nop
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	2003e92c 	.word	0x2003e92c
 80056e0:	40005400 	.word	0x40005400
 80056e4:	000186a0 	.word	0x000186a0

080056e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80056ec:	4b12      	ldr	r3, [pc, #72]	; (8005738 <MX_I2C2_Init+0x50>)
 80056ee:	4a13      	ldr	r2, [pc, #76]	; (800573c <MX_I2C2_Init+0x54>)
 80056f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <MX_I2C2_Init+0x50>)
 80056f4:	4a12      	ldr	r2, [pc, #72]	; (8005740 <MX_I2C2_Init+0x58>)
 80056f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <MX_I2C2_Init+0x50>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80056fe:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <MX_I2C2_Init+0x50>)
 8005700:	2200      	movs	r2, #0
 8005702:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <MX_I2C2_Init+0x50>)
 8005706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800570a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <MX_I2C2_Init+0x50>)
 800570e:	2200      	movs	r2, #0
 8005710:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005712:	4b09      	ldr	r3, [pc, #36]	; (8005738 <MX_I2C2_Init+0x50>)
 8005714:	2200      	movs	r2, #0
 8005716:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005718:	4b07      	ldr	r3, [pc, #28]	; (8005738 <MX_I2C2_Init+0x50>)
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <MX_I2C2_Init+0x50>)
 8005720:	2280      	movs	r2, #128	; 0x80
 8005722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005724:	4804      	ldr	r0, [pc, #16]	; (8005738 <MX_I2C2_Init+0x50>)
 8005726:	f004 f89d 	bl	8009864 <HAL_I2C_Init>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005730:	f000 fcec 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005734:	bf00      	nop
 8005736:	bd80      	pop	{r7, pc}
 8005738:	2003e9c0 	.word	0x2003e9c0
 800573c:	40005800 	.word	0x40005800
 8005740:	000186a0 	.word	0x000186a0

08005744 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <MX_SDIO_SD_Init+0x38>)
 800574a:	4a0d      	ldr	r2, [pc, #52]	; (8005780 <MX_SDIO_SD_Init+0x3c>)
 800574c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <MX_SDIO_SD_Init+0x38>)
 8005750:	2200      	movs	r2, #0
 8005752:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005754:	4b09      	ldr	r3, [pc, #36]	; (800577c <MX_SDIO_SD_Init+0x38>)
 8005756:	2200      	movs	r2, #0
 8005758:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800575a:	4b08      	ldr	r3, [pc, #32]	; (800577c <MX_SDIO_SD_Init+0x38>)
 800575c:	2200      	movs	r2, #0
 800575e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <MX_SDIO_SD_Init+0x38>)
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <MX_SDIO_SD_Init+0x38>)
 8005768:	2200      	movs	r2, #0
 800576a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <MX_SDIO_SD_Init+0x38>)
 800576e:	2202      	movs	r2, #2
 8005770:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	2003ebc0 	.word	0x2003ebc0
 8005780:	40012c00 	.word	0x40012c00

08005784 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <MX_SPI2_Init+0x64>)
 800578a:	4a18      	ldr	r2, [pc, #96]	; (80057ec <MX_SPI2_Init+0x68>)
 800578c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800578e:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <MX_SPI2_Init+0x64>)
 8005790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005794:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <MX_SPI2_Init+0x64>)
 8005798:	2200      	movs	r2, #0
 800579a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <MX_SPI2_Init+0x64>)
 800579e:	2200      	movs	r2, #0
 80057a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80057a2:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <MX_SPI2_Init+0x64>)
 80057a4:	2202      	movs	r2, #2
 80057a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <MX_SPI2_Init+0x64>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <MX_SPI2_Init+0x64>)
 80057b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <MX_SPI2_Init+0x64>)
 80057b8:	2228      	movs	r2, #40	; 0x28
 80057ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <MX_SPI2_Init+0x64>)
 80057be:	2200      	movs	r2, #0
 80057c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80057c2:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <MX_SPI2_Init+0x64>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c8:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <MX_SPI2_Init+0x64>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <MX_SPI2_Init+0x64>)
 80057d0:	220a      	movs	r2, #10
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80057d4:	4804      	ldr	r0, [pc, #16]	; (80057e8 <MX_SPI2_Init+0x64>)
 80057d6:	f007 f977 	bl	800cac8 <HAL_SPI_Init>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80057e0:	f000 fc94 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80057e4:	bf00      	nop
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	2003e80c 	.word	0x2003e80c
 80057ec:	40003800 	.word	0x40003800

080057f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b09a      	sub	sp, #104	; 0x68
 80057f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80057f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80057fa:	2224      	movs	r2, #36	; 0x24
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f00e fb01 	bl	8013e06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005804:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800580e:	f107 0320 	add.w	r3, r7, #32
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	60da      	str	r2, [r3, #12]
 800581c:	611a      	str	r2, [r3, #16]
 800581e:	615a      	str	r2, [r3, #20]
 8005820:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005822:	463b      	mov	r3, r7
 8005824:	2220      	movs	r2, #32
 8005826:	2100      	movs	r1, #0
 8005828:	4618      	mov	r0, r3
 800582a:	f00e faec 	bl	8013e06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800582e:	4b42      	ldr	r3, [pc, #264]	; (8005938 <MX_TIM1_Init+0x148>)
 8005830:	4a42      	ldr	r2, [pc, #264]	; (800593c <MX_TIM1_Init+0x14c>)
 8005832:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005834:	4b40      	ldr	r3, [pc, #256]	; (8005938 <MX_TIM1_Init+0x148>)
 8005836:	2200      	movs	r2, #0
 8005838:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800583a:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <MX_TIM1_Init+0x148>)
 800583c:	2200      	movs	r2, #0
 800583e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005840:	4b3d      	ldr	r3, [pc, #244]	; (8005938 <MX_TIM1_Init+0x148>)
 8005842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005846:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005848:	4b3b      	ldr	r3, [pc, #236]	; (8005938 <MX_TIM1_Init+0x148>)
 800584a:	2200      	movs	r2, #0
 800584c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800584e:	4b3a      	ldr	r3, [pc, #232]	; (8005938 <MX_TIM1_Init+0x148>)
 8005850:	2200      	movs	r2, #0
 8005852:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005854:	4b38      	ldr	r3, [pc, #224]	; (8005938 <MX_TIM1_Init+0x148>)
 8005856:	2200      	movs	r2, #0
 8005858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800585a:	4837      	ldr	r0, [pc, #220]	; (8005938 <MX_TIM1_Init+0x148>)
 800585c:	f007 fed7 	bl	800d60e <HAL_TIM_PWM_Init>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005866:	f000 fc51 	bl	800610c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800586a:	2303      	movs	r3, #3
 800586c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800586e:	2300      	movs	r3, #0
 8005870:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005872:	2301      	movs	r3, #1
 8005874:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005876:	2300      	movs	r3, #0
 8005878:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800587e:	2300      	movs	r3, #0
 8005880:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005882:	2301      	movs	r3, #1
 8005884:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005886:	2300      	movs	r3, #0
 8005888:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800588e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005892:	4619      	mov	r1, r3
 8005894:	4828      	ldr	r0, [pc, #160]	; (8005938 <MX_TIM1_Init+0x148>)
 8005896:	f007 ff23 	bl	800d6e0 <HAL_TIM_Encoder_Init>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80058a0:	f000 fc34 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058a4:	2300      	movs	r3, #0
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058b0:	4619      	mov	r1, r3
 80058b2:	4821      	ldr	r0, [pc, #132]	; (8005938 <MX_TIM1_Init+0x148>)
 80058b4:	f008 fc4a 	bl	800e14c <HAL_TIMEx_MasterConfigSynchronization>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80058be:	f000 fc25 	bl	800610c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058c2:	2360      	movs	r3, #96	; 0x60
 80058c4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058ca:	2300      	movs	r3, #0
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058ce:	2300      	movs	r3, #0
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058d6:	2300      	movs	r3, #0
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058da:	2300      	movs	r3, #0
 80058dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80058de:	f107 0320 	add.w	r3, r7, #32
 80058e2:	2208      	movs	r2, #8
 80058e4:	4619      	mov	r1, r3
 80058e6:	4814      	ldr	r0, [pc, #80]	; (8005938 <MX_TIM1_Init+0x148>)
 80058e8:	f008 f8cc 	bl	800da84 <HAL_TIM_PWM_ConfigChannel>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80058f2:	f000 fc0b 	bl	800610c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005906:	2300      	movs	r3, #0
 8005908:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800590a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800590e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005914:	463b      	mov	r3, r7
 8005916:	4619      	mov	r1, r3
 8005918:	4807      	ldr	r0, [pc, #28]	; (8005938 <MX_TIM1_Init+0x148>)
 800591a:	f008 fc93 	bl	800e244 <HAL_TIMEx_ConfigBreakDeadTime>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005924:	f000 fbf2 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005928:	4803      	ldr	r0, [pc, #12]	; (8005938 <MX_TIM1_Init+0x148>)
 800592a:	f000 ffdf 	bl	80068ec <HAL_TIM_MspPostInit>

}
 800592e:	bf00      	nop
 8005930:	3768      	adds	r7, #104	; 0x68
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	2003eb80 	.word	0x2003eb80
 800593c:	40010000 	.word	0x40010000

08005940 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005946:	f107 0320 	add.w	r3, r7, #32
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005950:	1d3b      	adds	r3, r7, #4
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	609a      	str	r2, [r3, #8]
 800595a:	60da      	str	r2, [r3, #12]
 800595c:	611a      	str	r2, [r3, #16]
 800595e:	615a      	str	r2, [r3, #20]
 8005960:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005962:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <MX_TIM3_Init+0xc0>)
 8005964:	4a27      	ldr	r2, [pc, #156]	; (8005a04 <MX_TIM3_Init+0xc4>)
 8005966:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005968:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <MX_TIM3_Init+0xc0>)
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <MX_TIM3_Init+0xc0>)
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005974:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <MX_TIM3_Init+0xc0>)
 8005976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800597a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800597c:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <MX_TIM3_Init+0xc0>)
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005982:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <MX_TIM3_Init+0xc0>)
 8005984:	2200      	movs	r2, #0
 8005986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005988:	481d      	ldr	r0, [pc, #116]	; (8005a00 <MX_TIM3_Init+0xc0>)
 800598a:	f007 fe40 	bl	800d60e <HAL_TIM_PWM_Init>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005994:	f000 fbba 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005998:	2300      	movs	r3, #0
 800599a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800599c:	2300      	movs	r3, #0
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80059a0:	f107 0320 	add.w	r3, r7, #32
 80059a4:	4619      	mov	r1, r3
 80059a6:	4816      	ldr	r0, [pc, #88]	; (8005a00 <MX_TIM3_Init+0xc0>)
 80059a8:	f008 fbd0 	bl	800e14c <HAL_TIMEx_MasterConfigSynchronization>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80059b2:	f000 fbab 	bl	800610c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059b6:	2360      	movs	r3, #96	; 0x60
 80059b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	2200      	movs	r2, #0
 80059ca:	4619      	mov	r1, r3
 80059cc:	480c      	ldr	r0, [pc, #48]	; (8005a00 <MX_TIM3_Init+0xc0>)
 80059ce:	f008 f859 	bl	800da84 <HAL_TIM_PWM_ConfigChannel>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80059d8:	f000 fb98 	bl	800610c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	2204      	movs	r2, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4807      	ldr	r0, [pc, #28]	; (8005a00 <MX_TIM3_Init+0xc0>)
 80059e4:	f008 f84e 	bl	800da84 <HAL_TIM_PWM_ConfigChannel>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80059ee:	f000 fb8d 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80059f2:	4803      	ldr	r0, [pc, #12]	; (8005a00 <MX_TIM3_Init+0xc0>)
 80059f4:	f000 ff7a 	bl	80068ec <HAL_TIM_MspPostInit>

}
 80059f8:	bf00      	nop
 80059fa:	3728      	adds	r7, #40	; 0x28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	2003ea18 	.word	0x2003ea18
 8005a04:	40000400 	.word	0x40000400

08005a08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a0e:	f107 0320 	add.w	r3, r7, #32
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	605a      	str	r2, [r3, #4]
 8005a20:	609a      	str	r2, [r3, #8]
 8005a22:	60da      	str	r2, [r3, #12]
 8005a24:	611a      	str	r2, [r3, #16]
 8005a26:	615a      	str	r2, [r3, #20]
 8005a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005a2a:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005a2c:	4a27      	ldr	r2, [pc, #156]	; (8005acc <MX_TIM4_Init+0xc4>)
 8005a2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a36:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005a3c:	4b22      	ldr	r3, [pc, #136]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005a3e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005a42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a44:	4b20      	ldr	r3, [pc, #128]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a4a:	4b1f      	ldr	r3, [pc, #124]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005a50:	481d      	ldr	r0, [pc, #116]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005a52:	f007 fddc 	bl	800d60e <HAL_TIM_PWM_Init>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005a5c:	f000 fb56 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a60:	2300      	movs	r3, #0
 8005a62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005a68:	f107 0320 	add.w	r3, r7, #32
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4816      	ldr	r0, [pc, #88]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005a70:	f008 fb6c 	bl	800e14c <HAL_TIMEx_MasterConfigSynchronization>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005a7a:	f000 fb47 	bl	800610c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a7e:	2360      	movs	r3, #96	; 0x60
 8005a80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a8e:	1d3b      	adds	r3, r7, #4
 8005a90:	2208      	movs	r2, #8
 8005a92:	4619      	mov	r1, r3
 8005a94:	480c      	ldr	r0, [pc, #48]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005a96:	f007 fff5 	bl	800da84 <HAL_TIM_PWM_ConfigChannel>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005aa0:	f000 fb34 	bl	800610c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005aa4:	1d3b      	adds	r3, r7, #4
 8005aa6:	220c      	movs	r2, #12
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4807      	ldr	r0, [pc, #28]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005aac:	f007 ffea 	bl	800da84 <HAL_TIM_PWM_ConfigChannel>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005ab6:	f000 fb29 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005aba:	4803      	ldr	r0, [pc, #12]	; (8005ac8 <MX_TIM4_Init+0xc0>)
 8005abc:	f000 ff16 	bl	80068ec <HAL_TIM_MspPostInit>

}
 8005ac0:	bf00      	nop
 8005ac2:	3728      	adds	r7, #40	; 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	2003e8a4 	.word	0x2003e8a4
 8005acc:	40000800 	.word	0x40000800

08005ad0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005ade:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <MX_TIM6_Init+0x64>)
 8005ae0:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <MX_TIM6_Init+0x68>)
 8005ae2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005ae4:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <MX_TIM6_Init+0x64>)
 8005ae6:	2259      	movs	r2, #89	; 0x59
 8005ae8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aea:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <MX_TIM6_Init+0x64>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <MX_TIM6_Init+0x64>)
 8005af2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005af6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005af8:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <MX_TIM6_Init+0x64>)
 8005afa:	2280      	movs	r2, #128	; 0x80
 8005afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005afe:	480d      	ldr	r0, [pc, #52]	; (8005b34 <MX_TIM6_Init+0x64>)
 8005b00:	f007 fd36 	bl	800d570 <HAL_TIM_Base_Init>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005b0a:	f000 faff 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005b16:	463b      	mov	r3, r7
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4806      	ldr	r0, [pc, #24]	; (8005b34 <MX_TIM6_Init+0x64>)
 8005b1c:	f008 fb16 	bl	800e14c <HAL_TIMEx_MasterConfigSynchronization>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005b26:	f000 faf1 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2003eb40 	.word	0x2003eb40
 8005b38:	40001000 	.word	0x40001000

08005b3c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b42:	463b      	mov	r3, r7
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005b4a:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <MX_TIM7_Init+0x60>)
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <MX_TIM7_Init+0x64>)
 8005b4e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005b50:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <MX_TIM7_Init+0x60>)
 8005b52:	22b3      	movs	r2, #179	; 0xb3
 8005b54:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b56:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <MX_TIM7_Init+0x60>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <MX_TIM7_Init+0x60>)
 8005b5e:	2231      	movs	r2, #49	; 0x31
 8005b60:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b62:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <MX_TIM7_Init+0x60>)
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005b68:	480c      	ldr	r0, [pc, #48]	; (8005b9c <MX_TIM7_Init+0x60>)
 8005b6a:	f007 fd01 	bl	800d570 <HAL_TIM_Base_Init>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005b74:	f000 faca 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005b80:	463b      	mov	r3, r7
 8005b82:	4619      	mov	r1, r3
 8005b84:	4805      	ldr	r0, [pc, #20]	; (8005b9c <MX_TIM7_Init+0x60>)
 8005b86:	f008 fae1 	bl	800e14c <HAL_TIMEx_MasterConfigSynchronization>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005b90:	f000 fabc 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	2003ece4 	.word	0x2003ece4
 8005ba0:	40001400 	.word	0x40001400

08005ba4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08c      	sub	sp, #48	; 0x30
 8005ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005baa:	f107 030c 	add.w	r3, r7, #12
 8005bae:	2224      	movs	r2, #36	; 0x24
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f00e f927 	bl	8013e06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005bc0:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <MX_TIM8_Init+0xa8>)
 8005bc2:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <MX_TIM8_Init+0xac>)
 8005bc4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005bc6:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <MX_TIM8_Init+0xa8>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005bcc:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <MX_TIM8_Init+0xa8>)
 8005bce:	2210      	movs	r2, #16
 8005bd0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <MX_TIM8_Init+0xa8>)
 8005bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bd8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bda:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <MX_TIM8_Init+0xa8>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <MX_TIM8_Init+0xa8>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005be6:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <MX_TIM8_Init+0xa8>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005bec:	2303      	movs	r3, #3
 8005bee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005c00:	2300      	movs	r3, #0
 8005c02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005c04:	2301      	movs	r3, #1
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005c10:	f107 030c 	add.w	r3, r7, #12
 8005c14:	4619      	mov	r1, r3
 8005c16:	480d      	ldr	r0, [pc, #52]	; (8005c4c <MX_TIM8_Init+0xa8>)
 8005c18:	f007 fd62 	bl	800d6e0 <HAL_TIM_Encoder_Init>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005c22:	f000 fa73 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c26:	2300      	movs	r3, #0
 8005c28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005c2e:	1d3b      	adds	r3, r7, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4806      	ldr	r0, [pc, #24]	; (8005c4c <MX_TIM8_Init+0xa8>)
 8005c34:	f008 fa8a 	bl	800e14c <HAL_TIMEx_MasterConfigSynchronization>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8005c3e:	f000 fa65 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005c42:	bf00      	nop
 8005c44:	3730      	adds	r7, #48	; 0x30
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	2003e864 	.word	0x2003e864
 8005c50:	40010400 	.word	0x40010400

08005c54 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c5a:	1d3b      	adds	r3, r7, #4
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	609a      	str	r2, [r3, #8]
 8005c64:	60da      	str	r2, [r3, #12]
 8005c66:	611a      	str	r2, [r3, #16]
 8005c68:	615a      	str	r2, [r3, #20]
 8005c6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005c6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005c6e:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <MX_TIM10_Init+0x98>)
 8005c70:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8005c72:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c78:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c84:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c86:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c8c:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005c92:	4815      	ldr	r0, [pc, #84]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005c94:	f007 fc6c 	bl	800d570 <HAL_TIM_Base_Init>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005c9e:	f000 fa35 	bl	800610c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005ca2:	4811      	ldr	r0, [pc, #68]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005ca4:	f007 fcb3 	bl	800d60e <HAL_TIM_PWM_Init>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005cae:	f000 fa2d 	bl	800610c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cb2:	2360      	movs	r3, #96	; 0x60
 8005cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4807      	ldr	r0, [pc, #28]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005cca:	f007 fedb 	bl	800da84 <HAL_TIM_PWM_ConfigChannel>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005cd4:	f000 fa1a 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005cd8:	4803      	ldr	r0, [pc, #12]	; (8005ce8 <MX_TIM10_Init+0x94>)
 8005cda:	f000 fe07 	bl	80068ec <HAL_TIM_MspPostInit>

}
 8005cde:	bf00      	nop
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	2003e980 	.word	0x2003e980
 8005cec:	40014400 	.word	0x40014400

08005cf0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	609a      	str	r2, [r3, #8]
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	611a      	str	r2, [r3, #16]
 8005d04:	615a      	str	r2, [r3, #20]
 8005d06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005d08:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d0a:	4a1f      	ldr	r2, [pc, #124]	; (8005d88 <MX_TIM11_Init+0x98>)
 8005d0c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8005d0e:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d14:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d20:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d22:	4b18      	ldr	r3, [pc, #96]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d28:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005d2e:	4815      	ldr	r0, [pc, #84]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d30:	f007 fc1e 	bl	800d570 <HAL_TIM_Base_Init>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8005d3a:	f000 f9e7 	bl	800610c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8005d3e:	4811      	ldr	r0, [pc, #68]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d40:	f007 fc65 	bl	800d60e <HAL_TIM_PWM_Init>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8005d4a:	f000 f9df 	bl	800610c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d4e:	2360      	movs	r3, #96	; 0x60
 8005d50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	2200      	movs	r2, #0
 8005d62:	4619      	mov	r1, r3
 8005d64:	4807      	ldr	r0, [pc, #28]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d66:	f007 fe8d 	bl	800da84 <HAL_TIM_PWM_ConfigChannel>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8005d70:	f000 f9cc 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8005d74:	4803      	ldr	r0, [pc, #12]	; (8005d84 <MX_TIM11_Init+0x94>)
 8005d76:	f000 fdb9 	bl	80068ec <HAL_TIM_MspPostInit>

}
 8005d7a:	bf00      	nop
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	2003eaa0 	.word	0x2003eaa0
 8005d88:	40014800 	.word	0x40014800

08005d8c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005d90:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <MX_TIM13_Init+0x40>)
 8005d92:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <MX_TIM13_Init+0x44>)
 8005d94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <MX_TIM13_Init+0x40>)
 8005d98:	2259      	movs	r2, #89	; 0x59
 8005d9a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <MX_TIM13_Init+0x40>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <MX_TIM13_Init+0x40>)
 8005da4:	f242 720f 	movw	r2, #9999	; 0x270f
 8005da8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005daa:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <MX_TIM13_Init+0x40>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005db0:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <MX_TIM13_Init+0x40>)
 8005db2:	2280      	movs	r2, #128	; 0x80
 8005db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005db6:	4805      	ldr	r0, [pc, #20]	; (8005dcc <MX_TIM13_Init+0x40>)
 8005db8:	f007 fbda 	bl	800d570 <HAL_TIM_Base_Init>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005dc2:	f000 f9a3 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005dc6:	bf00      	nop
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	2003ea60 	.word	0x2003ea60
 8005dd0:	40001c00 	.word	0x40001c00

08005dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005dd8:	4b11      	ldr	r3, [pc, #68]	; (8005e20 <MX_USART2_UART_Init+0x4c>)
 8005dda:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <MX_USART2_UART_Init+0x50>)
 8005ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005dde:	4b10      	ldr	r3, [pc, #64]	; (8005e20 <MX_USART2_UART_Init+0x4c>)
 8005de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005de6:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <MX_USART2_UART_Init+0x4c>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005dec:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <MX_USART2_UART_Init+0x4c>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <MX_USART2_UART_Init+0x4c>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005df8:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <MX_USART2_UART_Init+0x4c>)
 8005dfa:	220c      	movs	r2, #12
 8005dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dfe:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <MX_USART2_UART_Init+0x4c>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e04:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <MX_USART2_UART_Init+0x4c>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e0a:	4805      	ldr	r0, [pc, #20]	; (8005e20 <MX_USART2_UART_Init+0x4c>)
 8005e0c:	f008 fa80 	bl	800e310 <HAL_UART_Init>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005e16:	f000 f979 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005e1a:	bf00      	nop
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	2003ec44 	.word	0x2003ec44
 8005e24:	40004400 	.word	0x40004400

08005e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
 8005e32:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <MX_DMA_Init+0x5c>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <MX_DMA_Init+0x5c>)
 8005e38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e3e:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <MX_DMA_Init+0x5c>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	203a      	movs	r0, #58	; 0x3a
 8005e50:	f002 ff59 	bl	8008d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005e54:	203a      	movs	r0, #58	; 0x3a
 8005e56:	f002 ff72 	bl	8008d3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	203b      	movs	r0, #59	; 0x3b
 8005e60:	f002 ff51 	bl	8008d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005e64:	203b      	movs	r0, #59	; 0x3b
 8005e66:	f002 ff6a 	bl	8008d3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	2045      	movs	r0, #69	; 0x45
 8005e70:	f002 ff49 	bl	8008d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005e74:	2045      	movs	r0, #69	; 0x45
 8005e76:	f002 ff62 	bl	8008d3e <HAL_NVIC_EnableIRQ>

}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40023800 	.word	0x40023800

08005e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08c      	sub	sp, #48	; 0x30
 8005e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e8e:	f107 031c 	add.w	r3, r7, #28
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	605a      	str	r2, [r3, #4]
 8005e98:	609a      	str	r2, [r3, #8]
 8005e9a:	60da      	str	r2, [r3, #12]
 8005e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	4b94      	ldr	r3, [pc, #592]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	4a93      	ldr	r2, [pc, #588]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005ea8:	f043 0310 	orr.w	r3, r3, #16
 8005eac:	6313      	str	r3, [r2, #48]	; 0x30
 8005eae:	4b91      	ldr	r3, [pc, #580]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	4b8d      	ldr	r3, [pc, #564]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	4a8c      	ldr	r2, [pc, #560]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eca:	4b8a      	ldr	r3, [pc, #552]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	4b86      	ldr	r3, [pc, #536]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	4a85      	ldr	r2, [pc, #532]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005ee0:	f043 0304 	orr.w	r3, r3, #4
 8005ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee6:	4b83      	ldr	r3, [pc, #524]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	4b7f      	ldr	r3, [pc, #508]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	4a7e      	ldr	r2, [pc, #504]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	6313      	str	r3, [r2, #48]	; 0x30
 8005f02:	4b7c      	ldr	r3, [pc, #496]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	4b78      	ldr	r3, [pc, #480]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	4a77      	ldr	r2, [pc, #476]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005f18:	f043 0302 	orr.w	r3, r3, #2
 8005f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f1e:	4b75      	ldr	r3, [pc, #468]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	60bb      	str	r3, [r7, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	4b71      	ldr	r3, [pc, #452]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	4a70      	ldr	r2, [pc, #448]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005f34:	f043 0308 	orr.w	r3, r3, #8
 8005f38:	6313      	str	r3, [r2, #48]	; 0x30
 8005f3a:	4b6e      	ldr	r3, [pc, #440]	; (80060f4 <MX_GPIO_Init+0x26c>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8005f46:	2200      	movs	r2, #0
 8005f48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f4c:	486a      	ldr	r0, [pc, #424]	; (80060f8 <MX_GPIO_Init+0x270>)
 8005f4e:	f003 fc6f 	bl	8009830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005f52:	2200      	movs	r2, #0
 8005f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f58:	4868      	ldr	r0, [pc, #416]	; (80060fc <MX_GPIO_Init+0x274>)
 8005f5a:	f003 fc69 	bl	8009830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f64:	4866      	ldr	r0, [pc, #408]	; (8006100 <MX_GPIO_Init+0x278>)
 8005f66:	f003 fc63 	bl	8009830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8005f70:	4864      	ldr	r0, [pc, #400]	; (8006104 <MX_GPIO_Init+0x27c>)
 8005f72:	f003 fc5d 	bl	8009830 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005f76:	2304      	movs	r3, #4
 8005f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f82:	f107 031c 	add.w	r3, r7, #28
 8005f86:	4619      	mov	r1, r3
 8005f88:	485b      	ldr	r0, [pc, #364]	; (80060f8 <MX_GPIO_Init+0x270>)
 8005f8a:	f003 fa8f 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005f8e:	230f      	movs	r3, #15
 8005f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f92:	2303      	movs	r3, #3
 8005f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f9a:	f107 031c 	add.w	r3, r7, #28
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4859      	ldr	r0, [pc, #356]	; (8006108 <MX_GPIO_Init+0x280>)
 8005fa2:	f003 fa83 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005fa6:	23e1      	movs	r3, #225	; 0xe1
 8005fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005faa:	2303      	movs	r3, #3
 8005fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb2:	f107 031c 	add.w	r3, r7, #28
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4852      	ldr	r0, [pc, #328]	; (8006104 <MX_GPIO_Init+0x27c>)
 8005fba:	f003 fa77 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fca:	f107 031c 	add.w	r3, r7, #28
 8005fce:	4619      	mov	r1, r3
 8005fd0:	484a      	ldr	r0, [pc, #296]	; (80060fc <MX_GPIO_Init+0x274>)
 8005fd2:	f003 fa6b 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005fd6:	2304      	movs	r3, #4
 8005fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fe2:	f107 031c 	add.w	r3, r7, #28
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4844      	ldr	r0, [pc, #272]	; (80060fc <MX_GPIO_Init+0x274>)
 8005fea:	f003 fa5f 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8005fee:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8005ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ffc:	f107 031c 	add.w	r3, r7, #28
 8006000:	4619      	mov	r1, r3
 8006002:	483d      	ldr	r0, [pc, #244]	; (80060f8 <MX_GPIO_Init+0x270>)
 8006004:	f003 fa52 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800600c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800600e:	2301      	movs	r3, #1
 8006010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006012:	2300      	movs	r3, #0
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006016:	2300      	movs	r3, #0
 8006018:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800601a:	f107 031c 	add.w	r3, r7, #28
 800601e:	4619      	mov	r1, r3
 8006020:	4835      	ldr	r0, [pc, #212]	; (80060f8 <MX_GPIO_Init+0x270>)
 8006022:	f003 fa43 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800602a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800602c:	2301      	movs	r3, #1
 800602e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006030:	2300      	movs	r3, #0
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006034:	2300      	movs	r3, #0
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006038:	f107 031c 	add.w	r3, r7, #28
 800603c:	4619      	mov	r1, r3
 800603e:	482f      	ldr	r0, [pc, #188]	; (80060fc <MX_GPIO_Init+0x274>)
 8006040:	f003 fa34 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800604a:	2300      	movs	r3, #0
 800604c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006052:	f107 031c 	add.w	r3, r7, #28
 8006056:	4619      	mov	r1, r3
 8006058:	4829      	ldr	r0, [pc, #164]	; (8006100 <MX_GPIO_Init+0x278>)
 800605a:	f003 fa27 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800605e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006064:	2301      	movs	r3, #1
 8006066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006068:	2300      	movs	r3, #0
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800606c:	2300      	movs	r3, #0
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006070:	f107 031c 	add.w	r3, r7, #28
 8006074:	4619      	mov	r1, r3
 8006076:	4822      	ldr	r0, [pc, #136]	; (8006100 <MX_GPIO_Init+0x278>)
 8006078:	f003 fa18 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800607c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006082:	2301      	movs	r3, #1
 8006084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006086:	2301      	movs	r3, #1
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800608a:	2300      	movs	r3, #0
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800608e:	f107 031c 	add.w	r3, r7, #28
 8006092:	4619      	mov	r1, r3
 8006094:	481a      	ldr	r0, [pc, #104]	; (8006100 <MX_GPIO_Init+0x278>)
 8006096:	f003 fa09 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800609a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800609e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060a0:	2301      	movs	r3, #1
 80060a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060a8:	2300      	movs	r3, #0
 80060aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ac:	f107 031c 	add.w	r3, r7, #28
 80060b0:	4619      	mov	r1, r3
 80060b2:	4814      	ldr	r0, [pc, #80]	; (8006104 <MX_GPIO_Init+0x27c>)
 80060b4:	f003 f9fa 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80060b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060be:	2300      	movs	r3, #0
 80060c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060c6:	f107 031c 	add.w	r3, r7, #28
 80060ca:	4619      	mov	r1, r3
 80060cc:	480d      	ldr	r0, [pc, #52]	; (8006104 <MX_GPIO_Init+0x27c>)
 80060ce:	f003 f9ed 	bl	80094ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80060d2:	239b      	movs	r3, #155	; 0x9b
 80060d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060d6:	2300      	movs	r3, #0
 80060d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060da:	2301      	movs	r3, #1
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060de:	f107 031c 	add.w	r3, r7, #28
 80060e2:	4619      	mov	r1, r3
 80060e4:	4806      	ldr	r0, [pc, #24]	; (8006100 <MX_GPIO_Init+0x278>)
 80060e6:	f003 f9e1 	bl	80094ac <HAL_GPIO_Init>

}
 80060ea:	bf00      	nop
 80060ec:	3730      	adds	r7, #48	; 0x30
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40023800 	.word	0x40023800
 80060f8:	40021000 	.word	0x40021000
 80060fc:	40020400 	.word	0x40020400
 8006100:	40020c00 	.word	0x40020c00
 8006104:	40020000 	.word	0x40020000
 8006108:	40020800 	.word	0x40020800

0800610c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006110:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006112:	e7fe      	b.n	8006112 <Error_Handler+0x6>

08006114 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006118:	bf00      	nop
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800612a:	2300      	movs	r3, #0
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	4b10      	ldr	r3, [pc, #64]	; (8006170 <HAL_MspInit+0x4c>)
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	4a0f      	ldr	r2, [pc, #60]	; (8006170 <HAL_MspInit+0x4c>)
 8006134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006138:	6453      	str	r3, [r2, #68]	; 0x44
 800613a:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <HAL_MspInit+0x4c>)
 800613c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006146:	2300      	movs	r3, #0
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <HAL_MspInit+0x4c>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	4a08      	ldr	r2, [pc, #32]	; (8006170 <HAL_MspInit+0x4c>)
 8006150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006154:	6413      	str	r3, [r2, #64]	; 0x40
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <HAL_MspInit+0x4c>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40023800 	.word	0x40023800

08006174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	; 0x30
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800617c:	f107 031c 	add.w	r3, r7, #28
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a4a      	ldr	r2, [pc, #296]	; (80062bc <HAL_ADC_MspInit+0x148>)
 8006192:	4293      	cmp	r3, r2
 8006194:	f040 808e 	bne.w	80062b4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006198:	2300      	movs	r3, #0
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	4b48      	ldr	r3, [pc, #288]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 800619e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a0:	4a47      	ldr	r2, [pc, #284]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a6:	6453      	str	r3, [r2, #68]	; 0x44
 80061a8:	4b45      	ldr	r3, [pc, #276]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	4b41      	ldr	r3, [pc, #260]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	4a40      	ldr	r2, [pc, #256]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061be:	f043 0304 	orr.w	r3, r3, #4
 80061c2:	6313      	str	r3, [r2, #48]	; 0x30
 80061c4:	4b3e      	ldr	r3, [pc, #248]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	4b3a      	ldr	r3, [pc, #232]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	4a39      	ldr	r2, [pc, #228]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	6313      	str	r3, [r2, #48]	; 0x30
 80061e0:	4b37      	ldr	r3, [pc, #220]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	4b33      	ldr	r3, [pc, #204]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	4a32      	ldr	r2, [pc, #200]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061f6:	f043 0302 	orr.w	r3, r3, #2
 80061fa:	6313      	str	r3, [r2, #48]	; 0x30
 80061fc:	4b30      	ldr	r3, [pc, #192]	; (80062c0 <HAL_ADC_MspInit+0x14c>)
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006208:	230f      	movs	r3, #15
 800620a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800620c:	2303      	movs	r3, #3
 800620e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006210:	2300      	movs	r3, #0
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006214:	f107 031c 	add.w	r3, r7, #28
 8006218:	4619      	mov	r1, r3
 800621a:	482a      	ldr	r0, [pc, #168]	; (80062c4 <HAL_ADC_MspInit+0x150>)
 800621c:	f003 f946 	bl	80094ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006220:	23ff      	movs	r3, #255	; 0xff
 8006222:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006224:	2303      	movs	r3, #3
 8006226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006228:	2300      	movs	r3, #0
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800622c:	f107 031c 	add.w	r3, r7, #28
 8006230:	4619      	mov	r1, r3
 8006232:	4825      	ldr	r0, [pc, #148]	; (80062c8 <HAL_ADC_MspInit+0x154>)
 8006234:	f003 f93a 	bl	80094ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006238:	2303      	movs	r3, #3
 800623a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800623c:	2303      	movs	r3, #3
 800623e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006240:	2300      	movs	r3, #0
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006244:	f107 031c 	add.w	r3, r7, #28
 8006248:	4619      	mov	r1, r3
 800624a:	4820      	ldr	r0, [pc, #128]	; (80062cc <HAL_ADC_MspInit+0x158>)
 800624c:	f003 f92e 	bl	80094ac <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006250:	4b1f      	ldr	r3, [pc, #124]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 8006252:	4a20      	ldr	r2, [pc, #128]	; (80062d4 <HAL_ADC_MspInit+0x160>)
 8006254:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006256:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 8006258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800625c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800625e:	4b1c      	ldr	r3, [pc, #112]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 8006260:	2200      	movs	r2, #0
 8006262:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006264:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 8006266:	2200      	movs	r2, #0
 8006268:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800626a:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 800626c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006270:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 8006274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006278:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 800627c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006280:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006282:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 8006284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006288:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800628a:	4b11      	ldr	r3, [pc, #68]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 800628c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006290:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 8006294:	2200      	movs	r2, #0
 8006296:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006298:	480d      	ldr	r0, [pc, #52]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 800629a:	f002 fd6b 	bl	8008d74 <HAL_DMA_Init>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80062a4:	f7ff ff32 	bl	800610c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38
 80062ae:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <HAL_ADC_MspInit+0x15c>)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80062b4:	bf00      	nop
 80062b6:	3730      	adds	r7, #48	; 0x30
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40012100 	.word	0x40012100
 80062c0:	40023800 	.word	0x40023800
 80062c4:	40020800 	.word	0x40020800
 80062c8:	40020000 	.word	0x40020000
 80062cc:	40020400 	.word	0x40020400
 80062d0:	2003ec84 	.word	0x2003ec84
 80062d4:	40026440 	.word	0x40026440

080062d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	; 0x30
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e0:	f107 031c 	add.w	r3, r7, #28
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	605a      	str	r2, [r3, #4]
 80062ea:	609a      	str	r2, [r3, #8]
 80062ec:	60da      	str	r2, [r3, #12]
 80062ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a32      	ldr	r2, [pc, #200]	; (80063c0 <HAL_I2C_MspInit+0xe8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d12c      	bne.n	8006354 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062fa:	2300      	movs	r3, #0
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	4a30      	ldr	r2, [pc, #192]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 8006304:	f043 0302 	orr.w	r3, r3, #2
 8006308:	6313      	str	r3, [r2, #48]	; 0x30
 800630a:	4b2e      	ldr	r3, [pc, #184]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006316:	23c0      	movs	r3, #192	; 0xc0
 8006318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800631a:	2312      	movs	r3, #18
 800631c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800631e:	2301      	movs	r3, #1
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006322:	2303      	movs	r3, #3
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006326:	2304      	movs	r3, #4
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800632a:	f107 031c 	add.w	r3, r7, #28
 800632e:	4619      	mov	r1, r3
 8006330:	4825      	ldr	r0, [pc, #148]	; (80063c8 <HAL_I2C_MspInit+0xf0>)
 8006332:	f003 f8bb 	bl	80094ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	4b22      	ldr	r3, [pc, #136]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 8006340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006344:	6413      	str	r3, [r2, #64]	; 0x40
 8006346:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006352:	e031      	b.n	80063b8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1c      	ldr	r2, [pc, #112]	; (80063cc <HAL_I2C_MspInit+0xf4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d12c      	bne.n	80063b8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 8006368:	f043 0302 	orr.w	r3, r3, #2
 800636c:	6313      	str	r3, [r2, #48]	; 0x30
 800636e:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800637a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800637e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006380:	2312      	movs	r3, #18
 8006382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006384:	2301      	movs	r3, #1
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006388:	2303      	movs	r3, #3
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800638c:	2304      	movs	r3, #4
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006390:	f107 031c 	add.w	r3, r7, #28
 8006394:	4619      	mov	r1, r3
 8006396:	480c      	ldr	r0, [pc, #48]	; (80063c8 <HAL_I2C_MspInit+0xf0>)
 8006398:	f003 f888 	bl	80094ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	4a07      	ldr	r2, [pc, #28]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 80063a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063aa:	6413      	str	r3, [r2, #64]	; 0x40
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <HAL_I2C_MspInit+0xec>)
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
}
 80063b8:	bf00      	nop
 80063ba:	3730      	adds	r7, #48	; 0x30
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40005400 	.word	0x40005400
 80063c4:	40023800 	.word	0x40023800
 80063c8:	40020400 	.word	0x40020400
 80063cc:	40005800 	.word	0x40005800

080063d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d8:	f107 0314 	add.w	r3, r7, #20
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	609a      	str	r2, [r3, #8]
 80063e4:	60da      	str	r2, [r3, #12]
 80063e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a69      	ldr	r2, [pc, #420]	; (8006594 <HAL_SD_MspInit+0x1c4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	f040 80cb 	bne.w	800658a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	4b67      	ldr	r3, [pc, #412]	; (8006598 <HAL_SD_MspInit+0x1c8>)
 80063fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fc:	4a66      	ldr	r2, [pc, #408]	; (8006598 <HAL_SD_MspInit+0x1c8>)
 80063fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006402:	6453      	str	r3, [r2, #68]	; 0x44
 8006404:	4b64      	ldr	r3, [pc, #400]	; (8006598 <HAL_SD_MspInit+0x1c8>)
 8006406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	4b60      	ldr	r3, [pc, #384]	; (8006598 <HAL_SD_MspInit+0x1c8>)
 8006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006418:	4a5f      	ldr	r2, [pc, #380]	; (8006598 <HAL_SD_MspInit+0x1c8>)
 800641a:	f043 0304 	orr.w	r3, r3, #4
 800641e:	6313      	str	r3, [r2, #48]	; 0x30
 8006420:	4b5d      	ldr	r3, [pc, #372]	; (8006598 <HAL_SD_MspInit+0x1c8>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800642c:	2300      	movs	r3, #0
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	4b59      	ldr	r3, [pc, #356]	; (8006598 <HAL_SD_MspInit+0x1c8>)
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	4a58      	ldr	r2, [pc, #352]	; (8006598 <HAL_SD_MspInit+0x1c8>)
 8006436:	f043 0308 	orr.w	r3, r3, #8
 800643a:	6313      	str	r3, [r2, #48]	; 0x30
 800643c:	4b56      	ldr	r3, [pc, #344]	; (8006598 <HAL_SD_MspInit+0x1c8>)
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	60bb      	str	r3, [r7, #8]
 8006446:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006448:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800644c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800644e:	2302      	movs	r3, #2
 8006450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006456:	2303      	movs	r3, #3
 8006458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800645a:	230c      	movs	r3, #12
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800645e:	f107 0314 	add.w	r3, r7, #20
 8006462:	4619      	mov	r1, r3
 8006464:	484d      	ldr	r0, [pc, #308]	; (800659c <HAL_SD_MspInit+0x1cc>)
 8006466:	f003 f821 	bl	80094ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800646a:	2304      	movs	r3, #4
 800646c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800646e:	2302      	movs	r3, #2
 8006470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006476:	2303      	movs	r3, #3
 8006478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800647a:	230c      	movs	r3, #12
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800647e:	f107 0314 	add.w	r3, r7, #20
 8006482:	4619      	mov	r1, r3
 8006484:	4846      	ldr	r0, [pc, #280]	; (80065a0 <HAL_SD_MspInit+0x1d0>)
 8006486:	f003 f811 	bl	80094ac <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800648a:	4b46      	ldr	r3, [pc, #280]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 800648c:	4a46      	ldr	r2, [pc, #280]	; (80065a8 <HAL_SD_MspInit+0x1d8>)
 800648e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006490:	4b44      	ldr	r3, [pc, #272]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 8006492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006496:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006498:	4b42      	ldr	r3, [pc, #264]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 800649a:	2200      	movs	r2, #0
 800649c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800649e:	4b41      	ldr	r3, [pc, #260]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064a4:	4b3f      	ldr	r3, [pc, #252]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064aa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064ac:	4b3d      	ldr	r3, [pc, #244]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064b2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064b4:	4b3b      	ldr	r3, [pc, #236]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064ba:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80064bc:	4b39      	ldr	r3, [pc, #228]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064be:	2220      	movs	r2, #32
 80064c0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80064c2:	4b38      	ldr	r3, [pc, #224]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80064c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80064ca:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064cc:	2204      	movs	r2, #4
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80064d0:	4b34      	ldr	r3, [pc, #208]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064d2:	2203      	movs	r2, #3
 80064d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80064d6:	4b33      	ldr	r3, [pc, #204]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80064dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80064e6:	482f      	ldr	r0, [pc, #188]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064e8:	f002 fc44 	bl	8008d74 <HAL_DMA_Init>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80064f2:	f7ff fe0b 	bl	800610c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2a      	ldr	r2, [pc, #168]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40
 80064fc:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <HAL_SD_MspInit+0x1d4>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006502:	4b2a      	ldr	r3, [pc, #168]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006504:	4a2a      	ldr	r2, [pc, #168]	; (80065b0 <HAL_SD_MspInit+0x1e0>)
 8006506:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006508:	4b28      	ldr	r3, [pc, #160]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 800650a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800650e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006510:	4b26      	ldr	r3, [pc, #152]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006512:	2240      	movs	r2, #64	; 0x40
 8006514:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006516:	4b25      	ldr	r3, [pc, #148]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006518:	2200      	movs	r2, #0
 800651a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800651c:	4b23      	ldr	r3, [pc, #140]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 800651e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006522:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006524:	4b21      	ldr	r3, [pc, #132]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800652a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800652c:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 800652e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006532:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006536:	2220      	movs	r2, #32
 8006538:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800653a:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 800653c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006540:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006542:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006544:	2204      	movs	r2, #4
 8006546:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006548:	4b18      	ldr	r3, [pc, #96]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 800654a:	2203      	movs	r2, #3
 800654c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800654e:	4b17      	ldr	r3, [pc, #92]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006550:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006554:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006556:	4b15      	ldr	r3, [pc, #84]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800655c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800655e:	4813      	ldr	r0, [pc, #76]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006560:	f002 fc08 	bl	8008d74 <HAL_DMA_Init>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800656a:	f7ff fdcf 	bl	800610c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a0e      	ldr	r2, [pc, #56]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006572:	63da      	str	r2, [r3, #60]	; 0x3c
 8006574:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <HAL_SD_MspInit+0x1dc>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800657a:	2200      	movs	r2, #0
 800657c:	2100      	movs	r1, #0
 800657e:	2031      	movs	r0, #49	; 0x31
 8006580:	f002 fbc1 	bl	8008d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006584:	2031      	movs	r0, #49	; 0x31
 8006586:	f002 fbda 	bl	8008d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800658a:	bf00      	nop
 800658c:	3728      	adds	r7, #40	; 0x28
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40023800 	.word	0x40023800
 800659c:	40020800 	.word	0x40020800
 80065a0:	40020c00 	.word	0x40020c00
 80065a4:	2003e7ac 	.word	0x2003e7ac
 80065a8:	40026458 	.word	0x40026458
 80065ac:	2003eae0 	.word	0x2003eae0
 80065b0:	400264a0 	.word	0x400264a0

080065b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	; 0x28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065bc:	f107 0314 	add.w	r3, r7, #20
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	605a      	str	r2, [r3, #4]
 80065c6:	609a      	str	r2, [r3, #8]
 80065c8:	60da      	str	r2, [r3, #12]
 80065ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a19      	ldr	r2, [pc, #100]	; (8006638 <HAL_SPI_MspInit+0x84>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d12c      	bne.n	8006630 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	4b18      	ldr	r3, [pc, #96]	; (800663c <HAL_SPI_MspInit+0x88>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <HAL_SPI_MspInit+0x88>)
 80065e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065e4:	6413      	str	r3, [r2, #64]	; 0x40
 80065e6:	4b15      	ldr	r3, [pc, #84]	; (800663c <HAL_SPI_MspInit+0x88>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	4b11      	ldr	r3, [pc, #68]	; (800663c <HAL_SPI_MspInit+0x88>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	4a10      	ldr	r2, [pc, #64]	; (800663c <HAL_SPI_MspInit+0x88>)
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	6313      	str	r3, [r2, #48]	; 0x30
 8006602:	4b0e      	ldr	r3, [pc, #56]	; (800663c <HAL_SPI_MspInit+0x88>)
 8006604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800660e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006614:	2302      	movs	r3, #2
 8006616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800661c:	2303      	movs	r3, #3
 800661e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006620:	2305      	movs	r3, #5
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	4619      	mov	r1, r3
 800662a:	4805      	ldr	r0, [pc, #20]	; (8006640 <HAL_SPI_MspInit+0x8c>)
 800662c:	f002 ff3e 	bl	80094ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006630:	bf00      	nop
 8006632:	3728      	adds	r7, #40	; 0x28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40003800 	.word	0x40003800
 800663c:	40023800 	.word	0x40023800
 8006640:	40020400 	.word	0x40020400

08006644 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	; 0x30
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800664c:	f107 031c 	add.w	r3, r7, #28
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	609a      	str	r2, [r3, #8]
 8006658:	60da      	str	r2, [r3, #12]
 800665a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a2d      	ldr	r2, [pc, #180]	; (8006718 <HAL_TIM_PWM_MspInit+0xd4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d12d      	bne.n	80066c2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	4b2c      	ldr	r3, [pc, #176]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	4a2b      	ldr	r2, [pc, #172]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 8006670:	f043 0301 	orr.w	r3, r3, #1
 8006674:	6453      	str	r3, [r2, #68]	; 0x44
 8006676:	4b29      	ldr	r3, [pc, #164]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	4b25      	ldr	r3, [pc, #148]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	4a24      	ldr	r2, [pc, #144]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 800668c:	f043 0310 	orr.w	r3, r3, #16
 8006690:	6313      	str	r3, [r2, #48]	; 0x30
 8006692:	4b22      	ldr	r3, [pc, #136]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800669e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80066a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a4:	2302      	movs	r3, #2
 80066a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ac:	2300      	movs	r3, #0
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80066b0:	2301      	movs	r3, #1
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066b4:	f107 031c 	add.w	r3, r7, #28
 80066b8:	4619      	mov	r1, r3
 80066ba:	4819      	ldr	r0, [pc, #100]	; (8006720 <HAL_TIM_PWM_MspInit+0xdc>)
 80066bc:	f002 fef6 	bl	80094ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80066c0:	e026      	b.n	8006710 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a17      	ldr	r2, [pc, #92]	; (8006724 <HAL_TIM_PWM_MspInit+0xe0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d10e      	bne.n	80066ea <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	4b12      	ldr	r3, [pc, #72]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	4a11      	ldr	r2, [pc, #68]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 80066d6:	f043 0302 	orr.w	r3, r3, #2
 80066da:	6413      	str	r3, [r2, #64]	; 0x40
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	693b      	ldr	r3, [r7, #16]
}
 80066e8:	e012      	b.n	8006710 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a0e      	ldr	r2, [pc, #56]	; (8006728 <HAL_TIM_PWM_MspInit+0xe4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d10d      	bne.n	8006710 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	4b08      	ldr	r3, [pc, #32]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	4a07      	ldr	r2, [pc, #28]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 80066fe:	f043 0304 	orr.w	r3, r3, #4
 8006702:	6413      	str	r3, [r2, #64]	; 0x40
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <HAL_TIM_PWM_MspInit+0xd8>)
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	68fb      	ldr	r3, [r7, #12]
}
 8006710:	bf00      	nop
 8006712:	3730      	adds	r7, #48	; 0x30
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40010000 	.word	0x40010000
 800671c:	40023800 	.word	0x40023800
 8006720:	40021000 	.word	0x40021000
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800

0800672c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a3e      	ldr	r2, [pc, #248]	; (8006834 <HAL_TIM_Base_MspInit+0x108>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d116      	bne.n	800676c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	4b3d      	ldr	r3, [pc, #244]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	4a3c      	ldr	r2, [pc, #240]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 8006748:	f043 0310 	orr.w	r3, r3, #16
 800674c:	6413      	str	r3, [r2, #64]	; 0x40
 800674e:	4b3a      	ldr	r3, [pc, #232]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800675a:	2200      	movs	r2, #0
 800675c:	2101      	movs	r1, #1
 800675e:	2036      	movs	r0, #54	; 0x36
 8006760:	f002 fad1 	bl	8008d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006764:	2036      	movs	r0, #54	; 0x36
 8006766:	f002 faea 	bl	8008d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800676a:	e05e      	b.n	800682a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a32      	ldr	r2, [pc, #200]	; (800683c <HAL_TIM_Base_MspInit+0x110>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d116      	bne.n	80067a4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	4a2e      	ldr	r2, [pc, #184]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 8006780:	f043 0320 	orr.w	r3, r3, #32
 8006784:	6413      	str	r3, [r2, #64]	; 0x40
 8006786:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006792:	2200      	movs	r2, #0
 8006794:	2100      	movs	r1, #0
 8006796:	2037      	movs	r0, #55	; 0x37
 8006798:	f002 fab5 	bl	8008d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800679c:	2037      	movs	r0, #55	; 0x37
 800679e:	f002 face 	bl	8008d3e <HAL_NVIC_EnableIRQ>
}
 80067a2:	e042      	b.n	800682a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a25      	ldr	r2, [pc, #148]	; (8006840 <HAL_TIM_Base_MspInit+0x114>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10e      	bne.n	80067cc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	4b21      	ldr	r3, [pc, #132]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	4a20      	ldr	r2, [pc, #128]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 80067b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067bc:	6453      	str	r3, [r2, #68]	; 0x44
 80067be:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	697b      	ldr	r3, [r7, #20]
}
 80067ca:	e02e      	b.n	800682a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <HAL_TIM_Base_MspInit+0x118>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d10e      	bne.n	80067f4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80067d6:	2300      	movs	r3, #0
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	4b17      	ldr	r3, [pc, #92]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	4a16      	ldr	r2, [pc, #88]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 80067e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067e4:	6453      	str	r3, [r2, #68]	; 0x44
 80067e6:	4b14      	ldr	r3, [pc, #80]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	693b      	ldr	r3, [r7, #16]
}
 80067f2:	e01a      	b.n	800682a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a13      	ldr	r2, [pc, #76]	; (8006848 <HAL_TIM_Base_MspInit+0x11c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d115      	bne.n	800682a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	4a0c      	ldr	r2, [pc, #48]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 8006808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680c:	6413      	str	r3, [r2, #64]	; 0x40
 800680e:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <HAL_TIM_Base_MspInit+0x10c>)
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800681a:	2200      	movs	r2, #0
 800681c:	2100      	movs	r1, #0
 800681e:	202c      	movs	r0, #44	; 0x2c
 8006820:	f002 fa71 	bl	8008d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006824:	202c      	movs	r0, #44	; 0x2c
 8006826:	f002 fa8a 	bl	8008d3e <HAL_NVIC_EnableIRQ>
}
 800682a:	bf00      	nop
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	40001000 	.word	0x40001000
 8006838:	40023800 	.word	0x40023800
 800683c:	40001400 	.word	0x40001400
 8006840:	40014400 	.word	0x40014400
 8006844:	40014800 	.word	0x40014800
 8006848:	40001c00 	.word	0x40001c00

0800684c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006854:	f107 0314 	add.w	r3, r7, #20
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	605a      	str	r2, [r3, #4]
 800685e:	609a      	str	r2, [r3, #8]
 8006860:	60da      	str	r2, [r3, #12]
 8006862:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1d      	ldr	r2, [pc, #116]	; (80068e0 <HAL_TIM_Encoder_MspInit+0x94>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d133      	bne.n	80068d6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	4a1b      	ldr	r2, [pc, #108]	; (80068e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	6453      	str	r3, [r2, #68]	; 0x44
 800687e:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	4b15      	ldr	r3, [pc, #84]	; (80068e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	4a14      	ldr	r2, [pc, #80]	; (80068e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006894:	f043 0304 	orr.w	r3, r3, #4
 8006898:	6313      	str	r3, [r2, #48]	; 0x30
 800689a:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <HAL_TIM_Encoder_MspInit+0x98>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80068a6:	23c0      	movs	r3, #192	; 0xc0
 80068a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068aa:	2302      	movs	r3, #2
 80068ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068b2:	2300      	movs	r3, #0
 80068b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80068b6:	2303      	movs	r3, #3
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068ba:	f107 0314 	add.w	r3, r7, #20
 80068be:	4619      	mov	r1, r3
 80068c0:	4809      	ldr	r0, [pc, #36]	; (80068e8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80068c2:	f002 fdf3 	bl	80094ac <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80068c6:	2200      	movs	r2, #0
 80068c8:	2100      	movs	r1, #0
 80068ca:	202c      	movs	r0, #44	; 0x2c
 80068cc:	f002 fa1b 	bl	8008d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80068d0:	202c      	movs	r0, #44	; 0x2c
 80068d2:	f002 fa34 	bl	8008d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80068d6:	bf00      	nop
 80068d8:	3728      	adds	r7, #40	; 0x28
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40010400 	.word	0x40010400
 80068e4:	40023800 	.word	0x40023800
 80068e8:	40020800 	.word	0x40020800

080068ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08c      	sub	sp, #48	; 0x30
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f4:	f107 031c 	add.w	r3, r7, #28
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	609a      	str	r2, [r3, #8]
 8006900:	60da      	str	r2, [r3, #12]
 8006902:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a5c      	ldr	r2, [pc, #368]	; (8006a7c <HAL_TIM_MspPostInit+0x190>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d11f      	bne.n	800694e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800690e:	2300      	movs	r3, #0
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	4b5b      	ldr	r3, [pc, #364]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	4a5a      	ldr	r2, [pc, #360]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 8006918:	f043 0310 	orr.w	r3, r3, #16
 800691c:	6313      	str	r3, [r2, #48]	; 0x30
 800691e:	4b58      	ldr	r3, [pc, #352]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800692a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800692e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006930:	2302      	movs	r3, #2
 8006932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006934:	2300      	movs	r3, #0
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006938:	2300      	movs	r3, #0
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800693c:	2301      	movs	r3, #1
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006940:	f107 031c 	add.w	r3, r7, #28
 8006944:	4619      	mov	r1, r3
 8006946:	484f      	ldr	r0, [pc, #316]	; (8006a84 <HAL_TIM_MspPostInit+0x198>)
 8006948:	f002 fdb0 	bl	80094ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800694c:	e091      	b.n	8006a72 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a4d      	ldr	r2, [pc, #308]	; (8006a88 <HAL_TIM_MspPostInit+0x19c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d11e      	bne.n	8006996 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	4b48      	ldr	r3, [pc, #288]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	4a47      	ldr	r2, [pc, #284]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 8006962:	f043 0302 	orr.w	r3, r3, #2
 8006966:	6313      	str	r3, [r2, #48]	; 0x30
 8006968:	4b45      	ldr	r3, [pc, #276]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006974:	2330      	movs	r3, #48	; 0x30
 8006976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006978:	2302      	movs	r3, #2
 800697a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800697c:	2300      	movs	r3, #0
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006980:	2300      	movs	r3, #0
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006984:	2302      	movs	r3, #2
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006988:	f107 031c 	add.w	r3, r7, #28
 800698c:	4619      	mov	r1, r3
 800698e:	483f      	ldr	r0, [pc, #252]	; (8006a8c <HAL_TIM_MspPostInit+0x1a0>)
 8006990:	f002 fd8c 	bl	80094ac <HAL_GPIO_Init>
}
 8006994:	e06d      	b.n	8006a72 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a3d      	ldr	r2, [pc, #244]	; (8006a90 <HAL_TIM_MspPostInit+0x1a4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d11f      	bne.n	80069e0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069a0:	2300      	movs	r3, #0
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	4b36      	ldr	r3, [pc, #216]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 80069a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a8:	4a35      	ldr	r2, [pc, #212]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 80069aa:	f043 0308 	orr.w	r3, r3, #8
 80069ae:	6313      	str	r3, [r2, #48]	; 0x30
 80069b0:	4b33      	ldr	r3, [pc, #204]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80069bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80069c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069c2:	2302      	movs	r3, #2
 80069c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ca:	2300      	movs	r3, #0
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80069ce:	2302      	movs	r3, #2
 80069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069d2:	f107 031c 	add.w	r3, r7, #28
 80069d6:	4619      	mov	r1, r3
 80069d8:	482e      	ldr	r0, [pc, #184]	; (8006a94 <HAL_TIM_MspPostInit+0x1a8>)
 80069da:	f002 fd67 	bl	80094ac <HAL_GPIO_Init>
}
 80069de:	e048      	b.n	8006a72 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a2c      	ldr	r2, [pc, #176]	; (8006a98 <HAL_TIM_MspPostInit+0x1ac>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d11f      	bne.n	8006a2a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	4b24      	ldr	r3, [pc, #144]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	4a23      	ldr	r2, [pc, #140]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 80069f4:	f043 0302 	orr.w	r3, r3, #2
 80069f8:	6313      	str	r3, [r2, #48]	; 0x30
 80069fa:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a10:	2300      	movs	r3, #0
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a14:	2300      	movs	r3, #0
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a1c:	f107 031c 	add.w	r3, r7, #28
 8006a20:	4619      	mov	r1, r3
 8006a22:	481a      	ldr	r0, [pc, #104]	; (8006a8c <HAL_TIM_MspPostInit+0x1a0>)
 8006a24:	f002 fd42 	bl	80094ac <HAL_GPIO_Init>
}
 8006a28:	e023      	b.n	8006a72 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <HAL_TIM_MspPostInit+0x1b0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d11e      	bne.n	8006a72 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a34:	2300      	movs	r3, #0
 8006a36:	60bb      	str	r3, [r7, #8]
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	4a10      	ldr	r2, [pc, #64]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 8006a3e:	f043 0302 	orr.w	r3, r3, #2
 8006a42:	6313      	str	r3, [r2, #48]	; 0x30
 8006a44:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <HAL_TIM_MspPostInit+0x194>)
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	60bb      	str	r3, [r7, #8]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a56:	2302      	movs	r3, #2
 8006a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006a62:	2303      	movs	r3, #3
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a66:	f107 031c 	add.w	r3, r7, #28
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4807      	ldr	r0, [pc, #28]	; (8006a8c <HAL_TIM_MspPostInit+0x1a0>)
 8006a6e:	f002 fd1d 	bl	80094ac <HAL_GPIO_Init>
}
 8006a72:	bf00      	nop
 8006a74:	3730      	adds	r7, #48	; 0x30
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40023800 	.word	0x40023800
 8006a84:	40021000 	.word	0x40021000
 8006a88:	40000400 	.word	0x40000400
 8006a8c:	40020400 	.word	0x40020400
 8006a90:	40000800 	.word	0x40000800
 8006a94:	40020c00 	.word	0x40020c00
 8006a98:	40014400 	.word	0x40014400
 8006a9c:	40014800 	.word	0x40014800

08006aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aa8:	f107 0314 	add.w	r3, r7, #20
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	605a      	str	r2, [r3, #4]
 8006ab2:	609a      	str	r2, [r3, #8]
 8006ab4:	60da      	str	r2, [r3, #12]
 8006ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <HAL_UART_MspInit+0x84>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d12b      	bne.n	8006b1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	4b18      	ldr	r3, [pc, #96]	; (8006b28 <HAL_UART_MspInit+0x88>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	4a17      	ldr	r2, [pc, #92]	; (8006b28 <HAL_UART_MspInit+0x88>)
 8006acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <HAL_UART_MspInit+0x88>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <HAL_UART_MspInit+0x88>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	4a10      	ldr	r2, [pc, #64]	; (8006b28 <HAL_UART_MspInit+0x88>)
 8006ae8:	f043 0308 	orr.w	r3, r3, #8
 8006aec:	6313      	str	r3, [r2, #48]	; 0x30
 8006aee:	4b0e      	ldr	r3, [pc, #56]	; (8006b28 <HAL_UART_MspInit+0x88>)
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006afa:	2360      	movs	r3, #96	; 0x60
 8006afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006afe:	2302      	movs	r3, #2
 8006b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b06:	2303      	movs	r3, #3
 8006b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b0a:	2307      	movs	r3, #7
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b0e:	f107 0314 	add.w	r3, r7, #20
 8006b12:	4619      	mov	r1, r3
 8006b14:	4805      	ldr	r0, [pc, #20]	; (8006b2c <HAL_UART_MspInit+0x8c>)
 8006b16:	f002 fcc9 	bl	80094ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006b1a:	bf00      	nop
 8006b1c:	3728      	adds	r7, #40	; 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40004400 	.word	0x40004400
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	40020c00 	.word	0x40020c00

08006b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b34:	e7fe      	b.n	8006b34 <NMI_Handler+0x4>

08006b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b36:	b480      	push	{r7}
 8006b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b3a:	e7fe      	b.n	8006b3a <HardFault_Handler+0x4>

08006b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b40:	e7fe      	b.n	8006b40 <MemManage_Handler+0x4>

08006b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b42:	b480      	push	{r7}
 8006b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b46:	e7fe      	b.n	8006b46 <BusFault_Handler+0x4>

08006b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b4c:	e7fe      	b.n	8006b4c <UsageFault_Handler+0x4>

08006b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b52:	bf00      	nop
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b6e:	bf00      	nop
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b7c:	f001 fba2 	bl	80082c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b80:	bf00      	nop
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006b88:	4803      	ldr	r0, [pc, #12]	; (8006b98 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006b8a:	f006 fe72 	bl	800d872 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006b8e:	4803      	ldr	r0, [pc, #12]	; (8006b9c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006b90:	f006 fe6f 	bl	800d872 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	2003e864 	.word	0x2003e864
 8006b9c:	2003ea60 	.word	0x2003ea60

08006ba0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006ba4:	4802      	ldr	r0, [pc, #8]	; (8006bb0 <SDIO_IRQHandler+0x10>)
 8006ba6:	f004 ff0b 	bl	800b9c0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006baa:	bf00      	nop
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	2003ebc0 	.word	0x2003ebc0

08006bb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006bb8:	4802      	ldr	r0, [pc, #8]	; (8006bc4 <TIM6_DAC_IRQHandler+0x10>)
 8006bba:	f006 fe5a 	bl	800d872 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006bbe:	bf00      	nop
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	2003eb40 	.word	0x2003eb40

08006bc8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006bcc:	4802      	ldr	r0, [pc, #8]	; (8006bd8 <TIM7_IRQHandler+0x10>)
 8006bce:	f006 fe50 	bl	800d872 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006bd2:	bf00      	nop
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	2003ece4 	.word	0x2003ece4

08006bdc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006be0:	4802      	ldr	r0, [pc, #8]	; (8006bec <DMA2_Stream2_IRQHandler+0x10>)
 8006be2:	f002 f9ef 	bl	8008fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006be6:	bf00      	nop
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	2003ec84 	.word	0x2003ec84

08006bf0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006bf4:	4802      	ldr	r0, [pc, #8]	; (8006c00 <DMA2_Stream3_IRQHandler+0x10>)
 8006bf6:	f002 f9e5 	bl	8008fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006bfa:	bf00      	nop
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	2003e7ac 	.word	0x2003e7ac

08006c04 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006c08:	4802      	ldr	r0, [pc, #8]	; (8006c14 <DMA2_Stream6_IRQHandler+0x10>)
 8006c0a:	f002 f9db 	bl	8008fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006c0e:	bf00      	nop
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	2003eae0 	.word	0x2003eae0

08006c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c20:	4a14      	ldr	r2, [pc, #80]	; (8006c74 <_sbrk+0x5c>)
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <_sbrk+0x60>)
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c2c:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <_sbrk+0x64>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d102      	bne.n	8006c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c34:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <_sbrk+0x64>)
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <_sbrk+0x68>)
 8006c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c3a:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <_sbrk+0x64>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4413      	add	r3, r2
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d207      	bcs.n	8006c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c48:	f00d f8a8 	bl	8013d9c <__errno>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	230c      	movs	r3, #12
 8006c50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006c52:	f04f 33ff 	mov.w	r3, #4294967295
 8006c56:	e009      	b.n	8006c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c58:	4b08      	ldr	r3, [pc, #32]	; (8006c7c <_sbrk+0x64>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c5e:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <_sbrk+0x64>)
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	4a05      	ldr	r2, [pc, #20]	; (8006c7c <_sbrk+0x64>)
 8006c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20050000 	.word	0x20050000
 8006c78:	00000800 	.word	0x00000800
 8006c7c:	200002bc 	.word	0x200002bc
 8006c80:	20040e38 	.word	0x20040e38

08006c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <SystemInit+0x28>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8e:	4a07      	ldr	r2, [pc, #28]	; (8006cac <SystemInit+0x28>)
 8006c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006c98:	4b04      	ldr	r3, [pc, #16]	; (8006cac <SystemInit+0x28>)
 8006c9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c9e:	609a      	str	r2, [r3, #8]
#endif
}
 8006ca0:	bf00      	nop
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	e000ed00 	.word	0xe000ed00

08006cb0 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8006cb0:	b598      	push	{r3, r4, r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
	lcd_init();
 8006cb4:	f7fa f9b0 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8006cb8:	483a      	ldr	r0, [pc, #232]	; (8006da4 <cppInit+0xf4>)
 8006cba:	f7fd fdff 	bl	80048bc <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8006cbe:	2064      	movs	r0, #100	; 0x64
 8006cc0:	f001 fb20 	bl	8008304 <HAL_Delay>
	power_sensor.updateValues();
 8006cc4:	4837      	ldr	r0, [pc, #220]	; (8006da4 <cppInit+0xf4>)
 8006cc6:	f7fd fe07 	bl	80048d8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8006cca:	f7fa f9e9 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8006cce:	2100      	movs	r1, #0
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	f7fa f9f5 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8006cd6:	4834      	ldr	r0, [pc, #208]	; (8006da8 <cppInit+0xf8>)
 8006cd8:	f7fa fa1c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006cdc:	2101      	movs	r1, #1
 8006cde:	2000      	movs	r0, #0
 8006ce0:	f7fa f9ee 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8006ce4:	482f      	ldr	r0, [pc, #188]	; (8006da4 <cppInit+0xf4>)
 8006ce6:	f7fd fe21 	bl	800492c <_ZN11PowerSensor17getButteryVoltageEv>
 8006cea:	ee10 3a10 	vmov	r3, s0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7f9 fc42 	bl	8000578 <__aeabi_f2d>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4623      	mov	r3, r4
 8006cfc:	482b      	ldr	r0, [pc, #172]	; (8006dac <cppInit+0xfc>)
 8006cfe:	f7fa fa09 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8006d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d06:	f001 fafd 	bl	8008304 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8006d0a:	4829      	ldr	r0, [pc, #164]	; (8006db0 <cppInit+0x100>)
 8006d0c:	f7fd f81c 	bl	8003d48 <_ZN6Logger10sdCardInitEv>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d007      	beq.n	8006d26 <cppInit+0x76>
		led.fullColor('G');
 8006d16:	2147      	movs	r1, #71	; 0x47
 8006d18:	4826      	ldr	r0, [pc, #152]	; (8006db4 <cppInit+0x104>)
 8006d1a:	f7fb f8ef 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006d1e:	2064      	movs	r0, #100	; 0x64
 8006d20:	f001 faf0 	bl	8008304 <HAL_Delay>
 8006d24:	e006      	b.n	8006d34 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8006d26:	2152      	movs	r1, #82	; 0x52
 8006d28:	4822      	ldr	r0, [pc, #136]	; (8006db4 <cppInit+0x104>)
 8006d2a:	f7fb f8e7 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006d2e:	2064      	movs	r0, #100	; 0x64
 8006d30:	f001 fae8 	bl	8008304 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006d34:	4820      	ldr	r0, [pc, #128]	; (8006db8 <cppInit+0x108>)
 8006d36:	f7fb fa3d 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8006d3a:	4820      	ldr	r0, [pc, #128]	; (8006dbc <cppInit+0x10c>)
 8006d3c:	f7fd fa92 	bl	8004264 <_ZN5Motor4initEv>
	encoder.init();
 8006d40:	481f      	ldr	r0, [pc, #124]	; (8006dc0 <cppInit+0x110>)
 8006d42:	f7fa fa33 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8006d46:	481f      	ldr	r0, [pc, #124]	; (8006dc4 <cppInit+0x114>)
 8006d48:	f7fa fe96 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 8006d4c:	481e      	ldr	r0, [pc, #120]	; (8006dc8 <cppInit+0x118>)
 8006d4e:	f7fc fb29 	bl	80033a4 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8006d52:	4819      	ldr	r0, [pc, #100]	; (8006db8 <cppInit+0x108>)
 8006d54:	f7fb fb6e 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8006d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d5c:	f001 fad2 	bl	8008304 <HAL_Delay>

	led.fullColor('M');
 8006d60:	214d      	movs	r1, #77	; 0x4d
 8006d62:	4814      	ldr	r0, [pc, #80]	; (8006db4 <cppInit+0x104>)
 8006d64:	f7fb f8ca 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 8006d68:	4816      	ldr	r0, [pc, #88]	; (8006dc4 <cppInit+0x114>)
 8006d6a:	f7fa ff4f 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8006d6e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8006dcc <cppInit+0x11c>
 8006d72:	eddf 0a17 	vldr	s1, [pc, #92]	; 8006dd0 <cppInit+0x120>
 8006d76:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8006dd4 <cppInit+0x124>
 8006d7a:	4817      	ldr	r0, [pc, #92]	; (8006dd8 <cppInit+0x128>)
 8006d7c:	f7fe f9dc 	bl	8005138 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8006d80:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8006ddc <cppInit+0x12c>
 8006d84:	eddf 0a16 	vldr	s1, [pc, #88]	; 8006de0 <cppInit+0x130>
 8006d88:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8006de4 <cppInit+0x134>
 8006d8c:	4812      	ldr	r0, [pc, #72]	; (8006dd8 <cppInit+0x128>)
 8006d8e:	f7fe f9ec 	bl	800516a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8006d92:	4815      	ldr	r0, [pc, #84]	; (8006de8 <cppInit+0x138>)
 8006d94:	f7fd fc9c 	bl	80046d0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8006d98:	4814      	ldr	r0, [pc, #80]	; (8006dec <cppInit+0x13c>)
 8006d9a:	f7fd fd33 	bl	8004804 <_ZN13PathFollowing4initEv>

}
 8006d9e:	bf00      	nop
 8006da0:	bd98      	pop	{r3, r4, r7, pc}
 8006da2:	bf00      	nop
 8006da4:	200005d0 	.word	0x200005d0
 8006da8:	0801859c 	.word	0x0801859c
 8006dac:	080185a4 	.word	0x080185a4
 8006db0:	200005f0 	.word	0x200005f0
 8006db4:	200005cc 	.word	0x200005cc
 8006db8:	200002c0 	.word	0x200002c0
 8006dbc:	200005c8 	.word	0x200005c8
 8006dc0:	20017d00 	.word	0x20017d00
 8006dc4:	200005dc 	.word	0x200005dc
 8006dc8:	20017da0 	.word	0x20017da0
 8006dcc:	3cceca68 	.word	0x3cceca68
 8006dd0:	4180f06f 	.word	0x4180f06f
 8006dd4:	3fea2d0e 	.word	0x3fea2d0e
 8006dd8:	20017d20 	.word	0x20017d20
 8006ddc:	3ab7dacd 	.word	0x3ab7dacd
 8006de0:	3f5e3fbc 	.word	0x3f5e3fbc
 8006de4:	3d8eefa2 	.word	0x3d8eefa2
 8006de8:	20017d60 	.word	0x20017d60
 8006dec:	20024cf8 	.word	0x20024cf8

08006df0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8006df4:	4819      	ldr	r0, [pc, #100]	; (8006e5c <cppFlip1ms+0x6c>)
 8006df6:	f7fb fa3b 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8006dfa:	4819      	ldr	r0, [pc, #100]	; (8006e60 <cppFlip1ms+0x70>)
 8006dfc:	f7fa fe64 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8006e00:	4818      	ldr	r0, [pc, #96]	; (8006e64 <cppFlip1ms+0x74>)
 8006e02:	f7fa f9f5 	bl	80011f0 <_ZN7Encoder6updateEv>

	line_trace.flip();
 8006e06:	4818      	ldr	r0, [pc, #96]	; (8006e68 <cppFlip1ms+0x78>)
 8006e08:	f7fc fbe2 	bl	80035d0 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8006e0c:	4817      	ldr	r0, [pc, #92]	; (8006e6c <cppFlip1ms+0x7c>)
 8006e0e:	f7fe f9c5 	bl	800519c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8006e12:	4817      	ldr	r0, [pc, #92]	; (8006e70 <cppFlip1ms+0x80>)
 8006e14:	f7fd fc40 	bl	8004698 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8006e18:	4816      	ldr	r0, [pc, #88]	; (8006e74 <cppFlip1ms+0x84>)
 8006e1a:	f7fd fdfd 	bl	8004a18 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8006e1e:	4816      	ldr	r0, [pc, #88]	; (8006e78 <cppFlip1ms+0x88>)
 8006e20:	f7fd fa32 	bl	8004288 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8006e24:	4b15      	ldr	r3, [pc, #84]	; (8006e7c <cppFlip1ms+0x8c>)
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	4b13      	ldr	r3, [pc, #76]	; (8006e7c <cppFlip1ms+0x8c>)
 8006e2e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <cppFlip1ms+0x8c>)
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d90c      	bls.n	8006e52 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8006e38:	4809      	ldr	r0, [pc, #36]	; (8006e60 <cppFlip1ms+0x70>)
 8006e3a:	f7fa fe9d 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 8006e3e:	eef0 7a40 	vmov.f32	s15, s0
 8006e42:	eeb0 0a67 	vmov.f32	s0, s15
 8006e46:	480e      	ldr	r0, [pc, #56]	; (8006e80 <cppFlip1ms+0x90>)
 8006e48:	f7fd ff48 	bl	8004cdc <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <cppFlip1ms+0x8c>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8006e52:	4804      	ldr	r0, [pc, #16]	; (8006e64 <cppFlip1ms+0x74>)
 8006e54:	f7fa fab6 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006e58:	bf00      	nop
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	200002c0 	.word	0x200002c0
 8006e60:	200005dc 	.word	0x200005dc
 8006e64:	20017d00 	.word	0x20017d00
 8006e68:	20017da0 	.word	0x20017da0
 8006e6c:	20017d20 	.word	0x20017d20
 8006e70:	20017d60 	.word	0x20017d60
 8006e74:	200005b8 	.word	0x200005b8
 8006e78:	200005c8 	.word	0x200005c8
 8006e7c:	2003c422 	.word	0x2003c422
 8006e80:	20024aec 	.word	0x20024aec

08006e84 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8006e88:	4802      	ldr	r0, [pc, #8]	; (8006e94 <cppFlip100ns+0x10>)
 8006e8a:	f7fb f9a3 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200002c0 	.word	0x200002c0

08006e98 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8006e9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <cppFlip10ms+0x30>)
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	4b08      	ldr	r3, [pc, #32]	; (8006ec8 <cppFlip10ms+0x30>)
 8006ea6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8006ea8:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <cppFlip10ms+0x30>)
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	2b06      	cmp	r3, #6
 8006eae:	d905      	bls.n	8006ebc <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8006eb0:	4806      	ldr	r0, [pc, #24]	; (8006ecc <cppFlip10ms+0x34>)
 8006eb2:	f7fd ff4f 	bl	8004d54 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8006eb6:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <cppFlip10ms+0x30>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8006ebc:	4b02      	ldr	r3, [pc, #8]	; (8006ec8 <cppFlip10ms+0x30>)
 8006ebe:	881a      	ldrh	r2, [r3, #0]
 8006ec0:	4b03      	ldr	r3, [pc, #12]	; (8006ed0 <cppFlip10ms+0x38>)
 8006ec2:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8006ec4:	bf00      	nop
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	2003c424 	.word	0x2003c424
 8006ecc:	20024aec 	.word	0x20024aec
 8006ed0:	2003c420 	.word	0x2003c420
 8006ed4:	00000000 	.word	0x00000000

08006ed8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8006ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af02      	add	r7, sp, #8
	static int16_t selector;

	static float adj_kp = line_trace.getKp();
 8006ede:	4bbc      	ldr	r3, [pc, #752]	; (80071d0 <cppLoop+0x2f8>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	f3bf 8f5b 	dmb	ish
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d015      	beq.n	8006f26 <cppLoop+0x4e>
 8006efa:	48b5      	ldr	r0, [pc, #724]	; (80071d0 <cppLoop+0x2f8>)
 8006efc:	f00b fee7 	bl	8012cce <__cxa_guard_acquire>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf14      	ite	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	2300      	moveq	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <cppLoop+0x4e>
 8006f10:	48b0      	ldr	r0, [pc, #704]	; (80071d4 <cppLoop+0x2fc>)
 8006f12:	f7fc fac4 	bl	800349e <_ZN9LineTrace5getKpEv>
 8006f16:	eef0 7a40 	vmov.f32	s15, s0
 8006f1a:	4baf      	ldr	r3, [pc, #700]	; (80071d8 <cppLoop+0x300>)
 8006f1c:	edc3 7a00 	vstr	s15, [r3]
 8006f20:	48ab      	ldr	r0, [pc, #684]	; (80071d0 <cppLoop+0x2f8>)
 8006f22:	f00b fee0 	bl	8012ce6 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8006f26:	4bad      	ldr	r3, [pc, #692]	; (80071dc <cppLoop+0x304>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f3bf 8f5b 	dmb	ish
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf0c      	ite	eq
 8006f38:	2301      	moveq	r3, #1
 8006f3a:	2300      	movne	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d015      	beq.n	8006f6e <cppLoop+0x96>
 8006f42:	48a6      	ldr	r0, [pc, #664]	; (80071dc <cppLoop+0x304>)
 8006f44:	f00b fec3 	bl	8012cce <__cxa_guard_acquire>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <cppLoop+0x96>
 8006f58:	489e      	ldr	r0, [pc, #632]	; (80071d4 <cppLoop+0x2fc>)
 8006f5a:	f7fc faaf 	bl	80034bc <_ZN9LineTrace5getKiEv>
 8006f5e:	eef0 7a40 	vmov.f32	s15, s0
 8006f62:	4b9f      	ldr	r3, [pc, #636]	; (80071e0 <cppLoop+0x308>)
 8006f64:	edc3 7a00 	vstr	s15, [r3]
 8006f68:	489c      	ldr	r0, [pc, #624]	; (80071dc <cppLoop+0x304>)
 8006f6a:	f00b febc 	bl	8012ce6 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8006f6e:	4b9d      	ldr	r3, [pc, #628]	; (80071e4 <cppLoop+0x30c>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	f3bf 8f5b 	dmb	ish
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bf0c      	ite	eq
 8006f80:	2301      	moveq	r3, #1
 8006f82:	2300      	movne	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d015      	beq.n	8006fb6 <cppLoop+0xde>
 8006f8a:	4896      	ldr	r0, [pc, #600]	; (80071e4 <cppLoop+0x30c>)
 8006f8c:	f00b fe9f 	bl	8012cce <__cxa_guard_acquire>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bf14      	ite	ne
 8006f96:	2301      	movne	r3, #1
 8006f98:	2300      	moveq	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <cppLoop+0xde>
 8006fa0:	488c      	ldr	r0, [pc, #560]	; (80071d4 <cppLoop+0x2fc>)
 8006fa2:	f7fc fa9a 	bl	80034da <_ZN9LineTrace5getKdEv>
 8006fa6:	eef0 7a40 	vmov.f32	s15, s0
 8006faa:	4b8f      	ldr	r3, [pc, #572]	; (80071e8 <cppLoop+0x310>)
 8006fac:	edc3 7a00 	vstr	s15, [r3]
 8006fb0:	488c      	ldr	r0, [pc, #560]	; (80071e4 <cppLoop+0x30c>)
 8006fb2:	f00b fe98 	bl	8012ce6 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8006fb6:	4b8d      	ldr	r3, [pc, #564]	; (80071ec <cppLoop+0x314>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f3bf 8f5b 	dmb	ish
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf0c      	ite	eq
 8006fc8:	2301      	moveq	r3, #1
 8006fca:	2300      	movne	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d015      	beq.n	8006ffe <cppLoop+0x126>
 8006fd2:	4886      	ldr	r0, [pc, #536]	; (80071ec <cppLoop+0x314>)
 8006fd4:	f00b fe7b 	bl	8012cce <__cxa_guard_acquire>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bf14      	ite	ne
 8006fde:	2301      	movne	r3, #1
 8006fe0:	2300      	moveq	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <cppLoop+0x126>
 8006fe8:	487a      	ldr	r0, [pc, #488]	; (80071d4 <cppLoop+0x2fc>)
 8006fea:	f7fc fac2 	bl	8003572 <_ZN9LineTrace17getTargetVelocityEv>
 8006fee:	eef0 7a40 	vmov.f32	s15, s0
 8006ff2:	4b7f      	ldr	r3, [pc, #508]	; (80071f0 <cppLoop+0x318>)
 8006ff4:	edc3 7a00 	vstr	s15, [r3]
 8006ff8:	487c      	ldr	r0, [pc, #496]	; (80071ec <cppLoop+0x314>)
 8006ffa:	f00b fe74 	bl	8012ce6 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8006ffe:	4b7d      	ldr	r3, [pc, #500]	; (80071f4 <cppLoop+0x31c>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	f3bf 8f5b 	dmb	ish
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	bf0c      	ite	eq
 8007010:	2301      	moveq	r3, #1
 8007012:	2300      	movne	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d015      	beq.n	8007046 <cppLoop+0x16e>
 800701a:	4876      	ldr	r0, [pc, #472]	; (80071f4 <cppLoop+0x31c>)
 800701c:	f00b fe57 	bl	8012cce <__cxa_guard_acquire>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	bf14      	ite	ne
 8007026:	2301      	movne	r3, #1
 8007028:	2300      	moveq	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <cppLoop+0x16e>
 8007030:	4868      	ldr	r0, [pc, #416]	; (80071d4 <cppLoop+0x2fc>)
 8007032:	f7fc faad 	bl	8003590 <_ZN9LineTrace14getMaxVelocityEv>
 8007036:	eef0 7a40 	vmov.f32	s15, s0
 800703a:	4b6f      	ldr	r3, [pc, #444]	; (80071f8 <cppLoop+0x320>)
 800703c:	edc3 7a00 	vstr	s15, [r3]
 8007040:	486c      	ldr	r0, [pc, #432]	; (80071f4 <cppLoop+0x31c>)
 8007042:	f00b fe50 	bl	8012ce6 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007046:	4b6d      	ldr	r3, [pc, #436]	; (80071fc <cppLoop+0x324>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	f3bf 8f5b 	dmb	ish
 800704e:	b2db      	uxtb	r3, r3
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	bf0c      	ite	eq
 8007058:	2301      	moveq	r3, #1
 800705a:	2300      	movne	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d015      	beq.n	800708e <cppLoop+0x1b6>
 8007062:	4866      	ldr	r0, [pc, #408]	; (80071fc <cppLoop+0x324>)
 8007064:	f00b fe33 	bl	8012cce <__cxa_guard_acquire>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	bf14      	ite	ne
 800706e:	2301      	movne	r3, #1
 8007070:	2300      	moveq	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <cppLoop+0x1b6>
 8007078:	4856      	ldr	r0, [pc, #344]	; (80071d4 <cppLoop+0x2fc>)
 800707a:	f7fc fa98 	bl	80035ae <_ZN9LineTrace15getMaxVelocity2Ev>
 800707e:	eef0 7a40 	vmov.f32	s15, s0
 8007082:	4b5f      	ldr	r3, [pc, #380]	; (8007200 <cppLoop+0x328>)
 8007084:	edc3 7a00 	vstr	s15, [r3]
 8007088:	485c      	ldr	r0, [pc, #368]	; (80071fc <cppLoop+0x324>)
 800708a:	f00b fe2c 	bl	8012ce6 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800708e:	485d      	ldr	r0, [pc, #372]	; (8007204 <cppLoop+0x32c>)
 8007090:	f7fd fc5c 	bl	800494c <_ZN12RotarySwitch8getValueEv>
 8007094:	4603      	mov	r3, r0
 8007096:	2b0f      	cmp	r3, #15
 8007098:	f200 87f2 	bhi.w	8008080 <cppLoop+0x11a8>
 800709c:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <cppLoop+0x1cc>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070e5 	.word	0x080070e5
 80070a8:	08007525 	.word	0x08007525
 80070ac:	080075b9 	.word	0x080075b9
 80070b0:	0800770b 	.word	0x0800770b
 80070b4:	080077ed 	.word	0x080077ed
 80070b8:	08007941 	.word	0x08007941
 80070bc:	080079e9 	.word	0x080079e9
 80070c0:	08007b6f 	.word	0x08007b6f
 80070c4:	08007b99 	.word	0x08007b99
 80070c8:	08007bc3 	.word	0x08007bc3
 80070cc:	08007c7f 	.word	0x08007c7f
 80070d0:	08007cef 	.word	0x08007cef
 80070d4:	08007d8b 	.word	0x08007d8b
 80070d8:	08007ead 	.word	0x08007ead
 80070dc:	08007f33 	.word	0x08007f33
 80070e0:	08007fdb 	.word	0x08007fdb
	case 0:
		led.fullColor('W');
 80070e4:	2157      	movs	r1, #87	; 0x57
 80070e6:	4848      	ldr	r0, [pc, #288]	; (8007208 <cppLoop+0x330>)
 80070e8:	f7fa ff08 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80070ec:	f7f9 ffd8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80070f0:	2100      	movs	r1, #0
 80070f2:	2000      	movs	r0, #0
 80070f4:	f7f9 ffe4 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 80070f8:	4836      	ldr	r0, [pc, #216]	; (80071d4 <cppLoop+0x2fc>)
 80070fa:	f7fc f9d0 	bl	800349e <_ZN9LineTrace5getKpEv>
 80070fe:	eeb0 7a40 	vmov.f32	s14, s0
 8007102:	eddf 7a42 	vldr	s15, [pc, #264]	; 800720c <cppLoop+0x334>
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	ee17 0a90 	vmov	r0, s15
 800710e:	f7f9 fa33 	bl	8000578 <__aeabi_f2d>
 8007112:	4603      	mov	r3, r0
 8007114:	460c      	mov	r4, r1
 8007116:	461a      	mov	r2, r3
 8007118:	4623      	mov	r3, r4
 800711a:	483d      	ldr	r0, [pc, #244]	; (8007210 <cppLoop+0x338>)
 800711c:	f7f9 fffa 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007120:	2101      	movs	r1, #1
 8007122:	2000      	movs	r0, #0
 8007124:	f7f9 ffcc 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007128:	482a      	ldr	r0, [pc, #168]	; (80071d4 <cppLoop+0x2fc>)
 800712a:	f7fc f9c7 	bl	80034bc <_ZN9LineTrace5getKiEv>
 800712e:	eeb0 7a40 	vmov.f32	s14, s0
 8007132:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007214 <cppLoop+0x33c>
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	ee17 0a90 	vmov	r0, s15
 800713e:	f7f9 fa1b 	bl	8000578 <__aeabi_f2d>
 8007142:	4605      	mov	r5, r0
 8007144:	460e      	mov	r6, r1
 8007146:	4823      	ldr	r0, [pc, #140]	; (80071d4 <cppLoop+0x2fc>)
 8007148:	f7fc f9c7 	bl	80034da <_ZN9LineTrace5getKdEv>
 800714c:	eeb0 7a40 	vmov.f32	s14, s0
 8007150:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007218 <cppLoop+0x340>
 8007154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007158:	ee17 0a90 	vmov	r0, s15
 800715c:	f7f9 fa0c 	bl	8000578 <__aeabi_f2d>
 8007160:	4603      	mov	r3, r0
 8007162:	460c      	mov	r4, r1
 8007164:	e9cd 3400 	strd	r3, r4, [sp]
 8007168:	462a      	mov	r2, r5
 800716a:	4633      	mov	r3, r6
 800716c:	482b      	ldr	r0, [pc, #172]	; (800721c <cppLoop+0x344>)
 800716e:	f7f9 ffd1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007172:	482b      	ldr	r0, [pc, #172]	; (8007220 <cppLoop+0x348>)
 8007174:	f7fa fe5e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007178:	4603      	mov	r3, r0
 800717a:	2b08      	cmp	r3, #8
 800717c:	bf0c      	ite	eq
 800717e:	2301      	moveq	r3, #1
 8007180:	2300      	movne	r3, #0
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d04f      	beq.n	8007228 <cppLoop+0x350>
			led.LR(-1, 1);
 8007188:	2201      	movs	r2, #1
 800718a:	f04f 31ff 	mov.w	r1, #4294967295
 800718e:	481e      	ldr	r0, [pc, #120]	; (8007208 <cppLoop+0x330>)
 8007190:	f7fa ff70 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007194:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007198:	f001 f8b4 	bl	8008304 <HAL_Delay>

			selector++;
 800719c:	4b21      	ldr	r3, [pc, #132]	; (8007224 <cppLoop+0x34c>)
 800719e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3301      	adds	r3, #1
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	b21a      	sxth	r2, r3
 80071aa:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <cppLoop+0x34c>)
 80071ac:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80071ae:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <cppLoop+0x34c>)
 80071b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	dd02      	ble.n	80071be <cppLoop+0x2e6>
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <cppLoop+0x34c>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80071be:	2200      	movs	r2, #0
 80071c0:	f04f 31ff 	mov.w	r1, #4294967295
 80071c4:	4810      	ldr	r0, [pc, #64]	; (8007208 <cppLoop+0x330>)
 80071c6:	f7fa ff55 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80071ca:	f000 bf5b 	b.w	8008084 <cppLoop+0x11ac>
 80071ce:	bf00      	nop
 80071d0:	2003c42c 	.word	0x2003c42c
 80071d4:	20017da0 	.word	0x20017da0
 80071d8:	2003c428 	.word	0x2003c428
 80071dc:	2003c434 	.word	0x2003c434
 80071e0:	2003c430 	.word	0x2003c430
 80071e4:	2003c43c 	.word	0x2003c43c
 80071e8:	2003c438 	.word	0x2003c438
 80071ec:	2003c444 	.word	0x2003c444
 80071f0:	2003c440 	.word	0x2003c440
 80071f4:	2003c44c 	.word	0x2003c44c
 80071f8:	2003c448 	.word	0x2003c448
 80071fc:	2003c454 	.word	0x2003c454
 8007200:	2003c450 	.word	0x2003c450
 8007204:	200005c4 	.word	0x200005c4
 8007208:	200005cc 	.word	0x200005cc
 800720c:	447a0000 	.word	0x447a0000
 8007210:	080185a8 	.word	0x080185a8
 8007214:	42c80000 	.word	0x42c80000
 8007218:	461c4000 	.word	0x461c4000
 800721c:	080185b4 	.word	0x080185b4
 8007220:	200005c0 	.word	0x200005c0
 8007224:	2003c426 	.word	0x2003c426
		else if(joy_stick.getValue() == JOY_R){
 8007228:	48b3      	ldr	r0, [pc, #716]	; (80074f8 <cppLoop+0x620>)
 800722a:	f7fa fe03 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800722e:	4603      	mov	r3, r0
 8007230:	2b10      	cmp	r3, #16
 8007232:	bf0c      	ite	eq
 8007234:	2301      	moveq	r3, #1
 8007236:	2300      	movne	r3, #0
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d059      	beq.n	80072f2 <cppLoop+0x41a>
			led.LR(-1, 1);
 800723e:	2201      	movs	r2, #1
 8007240:	f04f 31ff 	mov.w	r1, #4294967295
 8007244:	48ad      	ldr	r0, [pc, #692]	; (80074fc <cppLoop+0x624>)
 8007246:	f7fa ff15 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800724a:	2064      	movs	r0, #100	; 0x64
 800724c:	f001 f85a 	bl	8008304 <HAL_Delay>
			if(selector == 0){
 8007250:	4bab      	ldr	r3, [pc, #684]	; (8007500 <cppLoop+0x628>)
 8007252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d113      	bne.n	8007282 <cppLoop+0x3aa>
				adj_kp = adj_kp + 0.00001;
 800725a:	4baa      	ldr	r3, [pc, #680]	; (8007504 <cppLoop+0x62c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f7f9 f98a 	bl	8000578 <__aeabi_f2d>
 8007264:	a39e      	add	r3, pc, #632	; (adr r3, 80074e0 <cppLoop+0x608>)
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f9 f827 	bl	80002bc <__adddf3>
 800726e:	4603      	mov	r3, r0
 8007270:	460c      	mov	r4, r1
 8007272:	4618      	mov	r0, r3
 8007274:	4621      	mov	r1, r4
 8007276:	f7f9 fccf 	bl	8000c18 <__aeabi_d2f>
 800727a:	4602      	mov	r2, r0
 800727c:	4ba1      	ldr	r3, [pc, #644]	; (8007504 <cppLoop+0x62c>)
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	e02b      	b.n	80072da <cppLoop+0x402>
			else if(selector == 1){
 8007282:	4b9f      	ldr	r3, [pc, #636]	; (8007500 <cppLoop+0x628>)
 8007284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d113      	bne.n	80072b4 <cppLoop+0x3dc>
				adj_ki = adj_ki + 0.0001;
 800728c:	4b9e      	ldr	r3, [pc, #632]	; (8007508 <cppLoop+0x630>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f7f9 f971 	bl	8000578 <__aeabi_f2d>
 8007296:	a394      	add	r3, pc, #592	; (adr r3, 80074e8 <cppLoop+0x610>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f7f9 f80e 	bl	80002bc <__adddf3>
 80072a0:	4603      	mov	r3, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	4618      	mov	r0, r3
 80072a6:	4621      	mov	r1, r4
 80072a8:	f7f9 fcb6 	bl	8000c18 <__aeabi_d2f>
 80072ac:	4602      	mov	r2, r0
 80072ae:	4b96      	ldr	r3, [pc, #600]	; (8007508 <cppLoop+0x630>)
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	e012      	b.n	80072da <cppLoop+0x402>
				adj_kd = adj_kd + 0.000001;
 80072b4:	4b95      	ldr	r3, [pc, #596]	; (800750c <cppLoop+0x634>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7f9 f95d 	bl	8000578 <__aeabi_f2d>
 80072be:	a38c      	add	r3, pc, #560	; (adr r3, 80074f0 <cppLoop+0x618>)
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	f7f8 fffa 	bl	80002bc <__adddf3>
 80072c8:	4603      	mov	r3, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	4618      	mov	r0, r3
 80072ce:	4621      	mov	r1, r4
 80072d0:	f7f9 fca2 	bl	8000c18 <__aeabi_d2f>
 80072d4:	4602      	mov	r2, r0
 80072d6:	4b8d      	ldr	r3, [pc, #564]	; (800750c <cppLoop+0x634>)
 80072d8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80072da:	2152      	movs	r1, #82	; 0x52
 80072dc:	4887      	ldr	r0, [pc, #540]	; (80074fc <cppLoop+0x624>)
 80072de:	f7fa fe0d 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80072e2:	2200      	movs	r2, #0
 80072e4:	f04f 31ff 	mov.w	r1, #4294967295
 80072e8:	4884      	ldr	r0, [pc, #528]	; (80074fc <cppLoop+0x624>)
 80072ea:	f7fa fec3 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80072ee:	f000 bec9 	b.w	8008084 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_L){
 80072f2:	4881      	ldr	r0, [pc, #516]	; (80074f8 <cppLoop+0x620>)
 80072f4:	f7fa fd9e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	bf0c      	ite	eq
 80072fe:	2301      	moveq	r3, #1
 8007300:	2300      	movne	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d059      	beq.n	80073bc <cppLoop+0x4e4>
			led.LR(-1, 1);
 8007308:	2201      	movs	r2, #1
 800730a:	f04f 31ff 	mov.w	r1, #4294967295
 800730e:	487b      	ldr	r0, [pc, #492]	; (80074fc <cppLoop+0x624>)
 8007310:	f7fa feb0 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007314:	2064      	movs	r0, #100	; 0x64
 8007316:	f000 fff5 	bl	8008304 <HAL_Delay>
			if(selector == 0){
 800731a:	4b79      	ldr	r3, [pc, #484]	; (8007500 <cppLoop+0x628>)
 800731c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d113      	bne.n	800734c <cppLoop+0x474>
				adj_kp = adj_kp - 0.00001;
 8007324:	4b77      	ldr	r3, [pc, #476]	; (8007504 <cppLoop+0x62c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f7f9 f925 	bl	8000578 <__aeabi_f2d>
 800732e:	a36c      	add	r3, pc, #432	; (adr r3, 80074e0 <cppLoop+0x608>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f7f8 ffc0 	bl	80002b8 <__aeabi_dsub>
 8007338:	4603      	mov	r3, r0
 800733a:	460c      	mov	r4, r1
 800733c:	4618      	mov	r0, r3
 800733e:	4621      	mov	r1, r4
 8007340:	f7f9 fc6a 	bl	8000c18 <__aeabi_d2f>
 8007344:	4602      	mov	r2, r0
 8007346:	4b6f      	ldr	r3, [pc, #444]	; (8007504 <cppLoop+0x62c>)
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	e02b      	b.n	80073a4 <cppLoop+0x4cc>
			else if(selector == 1){
 800734c:	4b6c      	ldr	r3, [pc, #432]	; (8007500 <cppLoop+0x628>)
 800734e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d113      	bne.n	800737e <cppLoop+0x4a6>
				adj_ki = adj_ki - 0.0001;
 8007356:	4b6c      	ldr	r3, [pc, #432]	; (8007508 <cppLoop+0x630>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f7f9 f90c 	bl	8000578 <__aeabi_f2d>
 8007360:	a361      	add	r3, pc, #388	; (adr r3, 80074e8 <cppLoop+0x610>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f7f8 ffa7 	bl	80002b8 <__aeabi_dsub>
 800736a:	4603      	mov	r3, r0
 800736c:	460c      	mov	r4, r1
 800736e:	4618      	mov	r0, r3
 8007370:	4621      	mov	r1, r4
 8007372:	f7f9 fc51 	bl	8000c18 <__aeabi_d2f>
 8007376:	4602      	mov	r2, r0
 8007378:	4b63      	ldr	r3, [pc, #396]	; (8007508 <cppLoop+0x630>)
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e012      	b.n	80073a4 <cppLoop+0x4cc>
				adj_kd = adj_kd - 0.000001;
 800737e:	4b63      	ldr	r3, [pc, #396]	; (800750c <cppLoop+0x634>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f7f9 f8f8 	bl	8000578 <__aeabi_f2d>
 8007388:	a359      	add	r3, pc, #356	; (adr r3, 80074f0 <cppLoop+0x618>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f8 ff93 	bl	80002b8 <__aeabi_dsub>
 8007392:	4603      	mov	r3, r0
 8007394:	460c      	mov	r4, r1
 8007396:	4618      	mov	r0, r3
 8007398:	4621      	mov	r1, r4
 800739a:	f7f9 fc3d 	bl	8000c18 <__aeabi_d2f>
 800739e:	4602      	mov	r2, r0
 80073a0:	4b5a      	ldr	r3, [pc, #360]	; (800750c <cppLoop+0x634>)
 80073a2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80073a4:	2152      	movs	r1, #82	; 0x52
 80073a6:	4855      	ldr	r0, [pc, #340]	; (80074fc <cppLoop+0x624>)
 80073a8:	f7fa fda8 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80073ac:	2200      	movs	r2, #0
 80073ae:	f04f 31ff 	mov.w	r1, #4294967295
 80073b2:	4852      	ldr	r0, [pc, #328]	; (80074fc <cppLoop+0x624>)
 80073b4:	f7fa fe5e 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80073b8:	f000 be64 	b.w	8008084 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_D){
 80073bc:	484e      	ldr	r0, [pc, #312]	; (80074f8 <cppLoop+0x620>)
 80073be:	f7fa fd39 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	bf0c      	ite	eq
 80073c8:	2301      	moveq	r3, #1
 80073ca:	2300      	movne	r3, #0
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d03d      	beq.n	800744e <cppLoop+0x576>
			led.LR(-1, 1);
 80073d2:	2201      	movs	r2, #1
 80073d4:	f04f 31ff 	mov.w	r1, #4294967295
 80073d8:	4848      	ldr	r0, [pc, #288]	; (80074fc <cppLoop+0x624>)
 80073da:	f7fa fe4b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80073de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80073e2:	f000 ff8f 	bl	8008304 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80073e6:	f107 030c 	add.w	r3, r7, #12
 80073ea:	2201      	movs	r2, #1
 80073ec:	4948      	ldr	r1, [pc, #288]	; (8007510 <cppLoop+0x638>)
 80073ee:	4849      	ldr	r0, [pc, #292]	; (8007514 <cppLoop+0x63c>)
 80073f0:	f7fa f96e 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80073f4:	f107 0308 	add.w	r3, r7, #8
 80073f8:	2201      	movs	r2, #1
 80073fa:	4947      	ldr	r1, [pc, #284]	; (8007518 <cppLoop+0x640>)
 80073fc:	4845      	ldr	r0, [pc, #276]	; (8007514 <cppLoop+0x63c>)
 80073fe:	f7fa f967 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8007402:	1d3b      	adds	r3, r7, #4
 8007404:	2201      	movs	r2, #1
 8007406:	4945      	ldr	r1, [pc, #276]	; (800751c <cppLoop+0x644>)
 8007408:	4842      	ldr	r0, [pc, #264]	; (8007514 <cppLoop+0x63c>)
 800740a:	f7fa f961 	bl	80016d0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800740e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007412:	ed97 7a02 	vldr	s14, [r7, #8]
 8007416:	edd7 6a01 	vldr	s13, [r7, #4]
 800741a:	eeb0 1a66 	vmov.f32	s2, s13
 800741e:	eef0 0a47 	vmov.f32	s1, s14
 8007422:	eeb0 0a67 	vmov.f32	s0, s15
 8007426:	483e      	ldr	r0, [pc, #248]	; (8007520 <cppLoop+0x648>)
 8007428:	f7fc f820 	bl	800346c <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a35      	ldr	r2, [pc, #212]	; (8007504 <cppLoop+0x62c>)
 8007430:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a34      	ldr	r2, [pc, #208]	; (8007508 <cppLoop+0x630>)
 8007436:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a34      	ldr	r2, [pc, #208]	; (800750c <cppLoop+0x634>)
 800743c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800743e:	2200      	movs	r2, #0
 8007440:	f04f 31ff 	mov.w	r1, #4294967295
 8007444:	482d      	ldr	r0, [pc, #180]	; (80074fc <cppLoop+0x624>)
 8007446:	f7fa fe15 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800744a:	f000 be1b 	b.w	8008084 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_C){
 800744e:	482a      	ldr	r0, [pc, #168]	; (80074f8 <cppLoop+0x620>)
 8007450:	f7fa fcf0 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007454:	4603      	mov	r3, r0
 8007456:	2b02      	cmp	r3, #2
 8007458:	bf0c      	ite	eq
 800745a:	2301      	moveq	r3, #1
 800745c:	2300      	movne	r3, #0
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 860f 	beq.w	8008084 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8007466:	2201      	movs	r2, #1
 8007468:	f04f 31ff 	mov.w	r1, #4294967295
 800746c:	4823      	ldr	r0, [pc, #140]	; (80074fc <cppLoop+0x624>)
 800746e:	f7fa fe01 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007472:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007476:	f000 ff45 	bl	8008304 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800747a:	2300      	movs	r3, #0
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	4b21      	ldr	r3, [pc, #132]	; (8007504 <cppLoop+0x62c>)
 8007480:	2201      	movs	r2, #1
 8007482:	4923      	ldr	r1, [pc, #140]	; (8007510 <cppLoop+0x638>)
 8007484:	4823      	ldr	r0, [pc, #140]	; (8007514 <cppLoop+0x63c>)
 8007486:	f7fa f8bd 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800748a:	2300      	movs	r3, #0
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <cppLoop+0x630>)
 8007490:	2201      	movs	r2, #1
 8007492:	4921      	ldr	r1, [pc, #132]	; (8007518 <cppLoop+0x640>)
 8007494:	481f      	ldr	r0, [pc, #124]	; (8007514 <cppLoop+0x63c>)
 8007496:	f7fa f8b5 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800749a:	2300      	movs	r3, #0
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	4b1b      	ldr	r3, [pc, #108]	; (800750c <cppLoop+0x634>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	491e      	ldr	r1, [pc, #120]	; (800751c <cppLoop+0x644>)
 80074a4:	481b      	ldr	r0, [pc, #108]	; (8007514 <cppLoop+0x63c>)
 80074a6:	f7fa f8ad 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80074aa:	4b16      	ldr	r3, [pc, #88]	; (8007504 <cppLoop+0x62c>)
 80074ac:	edd3 7a00 	vldr	s15, [r3]
 80074b0:	4b15      	ldr	r3, [pc, #84]	; (8007508 <cppLoop+0x630>)
 80074b2:	ed93 7a00 	vldr	s14, [r3]
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <cppLoop+0x634>)
 80074b8:	edd3 6a00 	vldr	s13, [r3]
 80074bc:	eeb0 1a66 	vmov.f32	s2, s13
 80074c0:	eef0 0a47 	vmov.f32	s1, s14
 80074c4:	eeb0 0a67 	vmov.f32	s0, s15
 80074c8:	4815      	ldr	r0, [pc, #84]	; (8007520 <cppLoop+0x648>)
 80074ca:	f7fb ffcf 	bl	800346c <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80074ce:	2200      	movs	r2, #0
 80074d0:	f04f 31ff 	mov.w	r1, #4294967295
 80074d4:	4809      	ldr	r0, [pc, #36]	; (80074fc <cppLoop+0x624>)
 80074d6:	f7fa fdcd 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80074da:	f000 bdd3 	b.w	8008084 <cppLoop+0x11ac>
 80074de:	bf00      	nop
 80074e0:	88e368f1 	.word	0x88e368f1
 80074e4:	3ee4f8b5 	.word	0x3ee4f8b5
 80074e8:	eb1c432d 	.word	0xeb1c432d
 80074ec:	3f1a36e2 	.word	0x3f1a36e2
 80074f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80074f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80074f8:	200005c0 	.word	0x200005c0
 80074fc:	200005cc 	.word	0x200005cc
 8007500:	2003c426 	.word	0x2003c426
 8007504:	2003c428 	.word	0x2003c428
 8007508:	2003c430 	.word	0x2003c430
 800750c:	2003c438 	.word	0x2003c438
 8007510:	080185c4 	.word	0x080185c4
 8007514:	080185cc 	.word	0x080185cc
 8007518:	080185d4 	.word	0x080185d4
 800751c:	080185dc 	.word	0x080185dc
 8007520:	20017da0 	.word	0x20017da0

	case 1:
		led.fullColor('C');
 8007524:	2143      	movs	r1, #67	; 0x43
 8007526:	48a6      	ldr	r0, [pc, #664]	; (80077c0 <cppLoop+0x8e8>)
 8007528:	f7fa fce8 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800752c:	f7f9 fdb8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007530:	2100      	movs	r1, #0
 8007532:	2000      	movs	r0, #0
 8007534:	f7f9 fdc4 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007538:	48a2      	ldr	r0, [pc, #648]	; (80077c4 <cppLoop+0x8ec>)
 800753a:	f7f9 fdeb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800753e:	2101      	movs	r1, #1
 8007540:	2000      	movs	r0, #0
 8007542:	f7f9 fdbd 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007546:	4ba0      	ldr	r3, [pc, #640]	; (80077c8 <cppLoop+0x8f0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4618      	mov	r0, r3
 800754c:	f7f9 f814 	bl	8000578 <__aeabi_f2d>
 8007550:	4603      	mov	r3, r0
 8007552:	460c      	mov	r4, r1
 8007554:	461a      	mov	r2, r3
 8007556:	4623      	mov	r3, r4
 8007558:	489c      	ldr	r0, [pc, #624]	; (80077cc <cppLoop+0x8f4>)
 800755a:	f7f9 fddb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800755e:	489c      	ldr	r0, [pc, #624]	; (80077d0 <cppLoop+0x8f8>)
 8007560:	f7fa fc68 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007564:	4603      	mov	r3, r0
 8007566:	2b02      	cmp	r3, #2
 8007568:	bf0c      	ite	eq
 800756a:	2301      	moveq	r3, #1
 800756c:	2300      	movne	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8589 	beq.w	8008088 <cppLoop+0x11b0>
			HAL_Delay(500);
 8007576:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800757a:	f000 fec3 	bl	8008304 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800757e:	4b92      	ldr	r3, [pc, #584]	; (80077c8 <cppLoop+0x8f0>)
 8007580:	edd3 7a00 	vldr	s15, [r3]
 8007584:	eeb0 0a67 	vmov.f32	s0, s15
 8007588:	4892      	ldr	r0, [pc, #584]	; (80077d4 <cppLoop+0x8fc>)
 800758a:	f7fb ffc4 	bl	8003516 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	2101      	movs	r1, #1
 8007594:	488a      	ldr	r0, [pc, #552]	; (80077c0 <cppLoop+0x8e8>)
 8007596:	f7fa fd6d 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 800759a:	2100      	movs	r1, #0
 800759c:	488d      	ldr	r0, [pc, #564]	; (80077d4 <cppLoop+0x8fc>)
 800759e:	f7fc fa77 	bl	8003a90 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 80075a2:	488c      	ldr	r0, [pc, #560]	; (80077d4 <cppLoop+0x8fc>)
 80075a4:	f7fc f976 	bl	8003894 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80075a8:	f04f 32ff 	mov.w	r2, #4294967295
 80075ac:	2100      	movs	r1, #0
 80075ae:	4884      	ldr	r0, [pc, #528]	; (80077c0 <cppLoop+0x8e8>)
 80075b0:	f7fa fd60 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 80075b4:	f000 bd68 	b.w	8008088 <cppLoop+0x11b0>

	case 2:
		led.fullColor('B');
 80075b8:	2142      	movs	r1, #66	; 0x42
 80075ba:	4881      	ldr	r0, [pc, #516]	; (80077c0 <cppLoop+0x8e8>)
 80075bc:	f7fa fc9e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80075c0:	f7f9 fd6e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80075c4:	2100      	movs	r1, #0
 80075c6:	2000      	movs	r0, #0
 80075c8:	f7f9 fd7a 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80075cc:	487d      	ldr	r0, [pc, #500]	; (80077c4 <cppLoop+0x8ec>)
 80075ce:	f7f9 fda1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80075d2:	2101      	movs	r1, #1
 80075d4:	2000      	movs	r0, #0
 80075d6:	f7f9 fd73 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80075da:	4b7b      	ldr	r3, [pc, #492]	; (80077c8 <cppLoop+0x8f0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7f8 ffca 	bl	8000578 <__aeabi_f2d>
 80075e4:	4603      	mov	r3, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	461a      	mov	r2, r3
 80075ea:	4623      	mov	r3, r4
 80075ec:	487a      	ldr	r0, [pc, #488]	; (80077d8 <cppLoop+0x900>)
 80075ee:	f7f9 fd91 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80075f2:	4877      	ldr	r0, [pc, #476]	; (80077d0 <cppLoop+0x8f8>)
 80075f4:	f7fa fc1e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	bf0c      	ite	eq
 80075fe:	2301      	moveq	r3, #1
 8007600:	2300      	movne	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d023      	beq.n	8007650 <cppLoop+0x778>
			led.LR(-1, 1);
 8007608:	2201      	movs	r2, #1
 800760a:	f04f 31ff 	mov.w	r1, #4294967295
 800760e:	486c      	ldr	r0, [pc, #432]	; (80077c0 <cppLoop+0x8e8>)
 8007610:	f7fa fd30 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007614:	2064      	movs	r0, #100	; 0x64
 8007616:	f000 fe75 	bl	8008304 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 800761a:	4b6b      	ldr	r3, [pc, #428]	; (80077c8 <cppLoop+0x8f0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7f8 ffaa 	bl	8000578 <__aeabi_f2d>
 8007624:	a364      	add	r3, pc, #400	; (adr r3, 80077b8 <cppLoop+0x8e0>)
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 fe47 	bl	80002bc <__adddf3>
 800762e:	4603      	mov	r3, r0
 8007630:	460c      	mov	r4, r1
 8007632:	4618      	mov	r0, r3
 8007634:	4621      	mov	r1, r4
 8007636:	f7f9 faef 	bl	8000c18 <__aeabi_d2f>
 800763a:	4602      	mov	r2, r0
 800763c:	4b62      	ldr	r3, [pc, #392]	; (80077c8 <cppLoop+0x8f0>)
 800763e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007640:	2200      	movs	r2, #0
 8007642:	f04f 31ff 	mov.w	r1, #4294967295
 8007646:	485e      	ldr	r0, [pc, #376]	; (80077c0 <cppLoop+0x8e8>)
 8007648:	f7fa fd14 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800764c:	f000 bd1e 	b.w	800808c <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_L){
 8007650:	485f      	ldr	r0, [pc, #380]	; (80077d0 <cppLoop+0x8f8>)
 8007652:	f7fa fbef 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007656:	4603      	mov	r3, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	bf0c      	ite	eq
 800765c:	2301      	moveq	r3, #1
 800765e:	2300      	movne	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d023      	beq.n	80076ae <cppLoop+0x7d6>
			led.LR(-1, 1);
 8007666:	2201      	movs	r2, #1
 8007668:	f04f 31ff 	mov.w	r1, #4294967295
 800766c:	4854      	ldr	r0, [pc, #336]	; (80077c0 <cppLoop+0x8e8>)
 800766e:	f7fa fd01 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007672:	2064      	movs	r0, #100	; 0x64
 8007674:	f000 fe46 	bl	8008304 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007678:	4b53      	ldr	r3, [pc, #332]	; (80077c8 <cppLoop+0x8f0>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f7f8 ff7b 	bl	8000578 <__aeabi_f2d>
 8007682:	a34d      	add	r3, pc, #308	; (adr r3, 80077b8 <cppLoop+0x8e0>)
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f7f8 fe16 	bl	80002b8 <__aeabi_dsub>
 800768c:	4603      	mov	r3, r0
 800768e:	460c      	mov	r4, r1
 8007690:	4618      	mov	r0, r3
 8007692:	4621      	mov	r1, r4
 8007694:	f7f9 fac0 	bl	8000c18 <__aeabi_d2f>
 8007698:	4602      	mov	r2, r0
 800769a:	4b4b      	ldr	r3, [pc, #300]	; (80077c8 <cppLoop+0x8f0>)
 800769c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800769e:	2200      	movs	r2, #0
 80076a0:	f04f 31ff 	mov.w	r1, #4294967295
 80076a4:	4846      	ldr	r0, [pc, #280]	; (80077c0 <cppLoop+0x8e8>)
 80076a6:	f7fa fce5 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80076aa:	f000 bcef 	b.w	800808c <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_C){
 80076ae:	4848      	ldr	r0, [pc, #288]	; (80077d0 <cppLoop+0x8f8>)
 80076b0:	f7fa fbc0 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	bf0c      	ite	eq
 80076ba:	2301      	moveq	r3, #1
 80076bc:	2300      	movne	r3, #0
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 84e3 	beq.w	800808c <cppLoop+0x11b4>
			led.LR(-1, 1);
 80076c6:	2201      	movs	r2, #1
 80076c8:	f04f 31ff 	mov.w	r1, #4294967295
 80076cc:	483c      	ldr	r0, [pc, #240]	; (80077c0 <cppLoop+0x8e8>)
 80076ce:	f7fa fcd1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80076d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80076d6:	f000 fe15 	bl	8008304 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80076da:	2300      	movs	r3, #0
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4b3a      	ldr	r3, [pc, #232]	; (80077c8 <cppLoop+0x8f0>)
 80076e0:	2201      	movs	r2, #1
 80076e2:	493e      	ldr	r1, [pc, #248]	; (80077dc <cppLoop+0x904>)
 80076e4:	483e      	ldr	r0, [pc, #248]	; (80077e0 <cppLoop+0x908>)
 80076e6:	f7f9 ff8d 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80076ea:	4b37      	ldr	r3, [pc, #220]	; (80077c8 <cppLoop+0x8f0>)
 80076ec:	edd3 7a00 	vldr	s15, [r3]
 80076f0:	eeb0 0a67 	vmov.f32	s0, s15
 80076f4:	4837      	ldr	r0, [pc, #220]	; (80077d4 <cppLoop+0x8fc>)
 80076f6:	f7fb ff0e 	bl	8003516 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80076fa:	2200      	movs	r2, #0
 80076fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007700:	482f      	ldr	r0, [pc, #188]	; (80077c0 <cppLoop+0x8e8>)
 8007702:	f7fa fcb7 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007706:	f000 bcc1 	b.w	800808c <cppLoop+0x11b4>

	case 3:
		led.fullColor('Y');
 800770a:	2159      	movs	r1, #89	; 0x59
 800770c:	482c      	ldr	r0, [pc, #176]	; (80077c0 <cppLoop+0x8e8>)
 800770e:	f7fa fbf5 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007712:	f7f9 fcc5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007716:	2100      	movs	r1, #0
 8007718:	2000      	movs	r0, #0
 800771a:	f7f9 fcd1 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 800771e:	4831      	ldr	r0, [pc, #196]	; (80077e4 <cppLoop+0x90c>)
 8007720:	f7f9 fcf8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007724:	2101      	movs	r1, #1
 8007726:	2000      	movs	r0, #0
 8007728:	f7f9 fcca 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800772c:	4b2e      	ldr	r3, [pc, #184]	; (80077e8 <cppLoop+0x910>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4618      	mov	r0, r3
 8007732:	f7f8 ff21 	bl	8000578 <__aeabi_f2d>
 8007736:	4603      	mov	r3, r0
 8007738:	460c      	mov	r4, r1
 800773a:	461a      	mov	r2, r3
 800773c:	4623      	mov	r3, r4
 800773e:	4823      	ldr	r0, [pc, #140]	; (80077cc <cppLoop+0x8f4>)
 8007740:	f7f9 fce8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007744:	4822      	ldr	r0, [pc, #136]	; (80077d0 <cppLoop+0x8f8>)
 8007746:	f7fa fb75 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800774a:	4603      	mov	r3, r0
 800774c:	2b02      	cmp	r3, #2
 800774e:	bf0c      	ite	eq
 8007750:	2301      	moveq	r3, #1
 8007752:	2300      	movne	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 849a 	beq.w	8008090 <cppLoop+0x11b8>
			HAL_Delay(500);
 800775c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007760:	f000 fdd0 	bl	8008304 <HAL_Delay>

			led.LR(1, -1);
 8007764:	f04f 32ff 	mov.w	r2, #4294967295
 8007768:	2101      	movs	r1, #1
 800776a:	4815      	ldr	r0, [pc, #84]	; (80077c0 <cppLoop+0x8e8>)
 800776c:	f7fa fc82 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007770:	2101      	movs	r1, #1
 8007772:	4818      	ldr	r0, [pc, #96]	; (80077d4 <cppLoop+0x8fc>)
 8007774:	f7fc f98c 	bl	8003a90 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8007778:	4b1b      	ldr	r3, [pc, #108]	; (80077e8 <cppLoop+0x910>)
 800777a:	edd3 7a00 	vldr	s15, [r3]
 800777e:	eeb0 0a67 	vmov.f32	s0, s15
 8007782:	4814      	ldr	r0, [pc, #80]	; (80077d4 <cppLoop+0x8fc>)
 8007784:	f7fb fec7 	bl	8003516 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007788:	4b17      	ldr	r3, [pc, #92]	; (80077e8 <cppLoop+0x910>)
 800778a:	edd3 7a00 	vldr	s15, [r3]
 800778e:	eeb0 0a67 	vmov.f32	s0, s15
 8007792:	4810      	ldr	r0, [pc, #64]	; (80077d4 <cppLoop+0x8fc>)
 8007794:	f7fb fece 	bl	8003534 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabele();
 8007798:	480e      	ldr	r0, [pc, #56]	; (80077d4 <cppLoop+0x8fc>)
 800779a:	f7fb fb1f 	bl	8002ddc <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800779e:	480d      	ldr	r0, [pc, #52]	; (80077d4 <cppLoop+0x8fc>)
 80077a0:	f7fc f878 	bl	8003894 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80077a4:	f04f 32ff 	mov.w	r2, #4294967295
 80077a8:	2100      	movs	r1, #0
 80077aa:	4805      	ldr	r0, [pc, #20]	; (80077c0 <cppLoop+0x8e8>)
 80077ac:	f7fa fc62 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 80077b0:	f000 bc6e 	b.w	8008090 <cppLoop+0x11b8>
 80077b4:	f3af 8000 	nop.w
 80077b8:	9999999a 	.word	0x9999999a
 80077bc:	3fb99999 	.word	0x3fb99999
 80077c0:	200005cc 	.word	0x200005cc
 80077c4:	080185e4 	.word	0x080185e4
 80077c8:	2003c440 	.word	0x2003c440
 80077cc:	080185f0 	.word	0x080185f0
 80077d0:	200005c0 	.word	0x200005c0
 80077d4:	20017da0 	.word	0x20017da0
 80077d8:	080185fc 	.word	0x080185fc
 80077dc:	08018608 	.word	0x08018608
 80077e0:	080185cc 	.word	0x080185cc
 80077e4:	08018614 	.word	0x08018614
 80077e8:	2003c448 	.word	0x2003c448

	case 4:
		led.fullColor('G');
 80077ec:	2147      	movs	r1, #71	; 0x47
 80077ee:	48be      	ldr	r0, [pc, #760]	; (8007ae8 <cppLoop+0xc10>)
 80077f0:	f7fa fb84 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80077f4:	f7f9 fc54 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80077f8:	2100      	movs	r1, #0
 80077fa:	2000      	movs	r0, #0
 80077fc:	f7f9 fc60 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 8007800:	48ba      	ldr	r0, [pc, #744]	; (8007aec <cppLoop+0xc14>)
 8007802:	f7f9 fc87 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007806:	2101      	movs	r1, #1
 8007808:	2000      	movs	r0, #0
 800780a:	f7f9 fc59 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity());
 800780e:	48b8      	ldr	r0, [pc, #736]	; (8007af0 <cppLoop+0xc18>)
 8007810:	f7fb febe 	bl	8003590 <_ZN9LineTrace14getMaxVelocityEv>
 8007814:	ee10 3a10 	vmov	r3, s0
 8007818:	4618      	mov	r0, r3
 800781a:	f7f8 fead 	bl	8000578 <__aeabi_f2d>
 800781e:	4603      	mov	r3, r0
 8007820:	460c      	mov	r4, r1
 8007822:	461a      	mov	r2, r3
 8007824:	4623      	mov	r3, r4
 8007826:	48b3      	ldr	r0, [pc, #716]	; (8007af4 <cppLoop+0xc1c>)
 8007828:	f7f9 fc74 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 800782c:	48b2      	ldr	r0, [pc, #712]	; (8007af8 <cppLoop+0xc20>)
 800782e:	f7fa fb01 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007832:	4603      	mov	r3, r0
 8007834:	2b10      	cmp	r3, #16
 8007836:	bf0c      	ite	eq
 8007838:	2301      	moveq	r3, #1
 800783a:	2300      	movne	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d023      	beq.n	800788a <cppLoop+0x9b2>
			led.LR(-1, 1);
 8007842:	2201      	movs	r2, #1
 8007844:	f04f 31ff 	mov.w	r1, #4294967295
 8007848:	48a7      	ldr	r0, [pc, #668]	; (8007ae8 <cppLoop+0xc10>)
 800784a:	f7fa fc13 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800784e:	2064      	movs	r0, #100	; 0x64
 8007850:	f000 fd58 	bl	8008304 <HAL_Delay>

			adj_max_velocity = adj_max_velocity + 0.1;
 8007854:	4ba9      	ldr	r3, [pc, #676]	; (8007afc <cppLoop+0xc24>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4618      	mov	r0, r3
 800785a:	f7f8 fe8d 	bl	8000578 <__aeabi_f2d>
 800785e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ae0 <cppLoop+0xc08>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f7f8 fd2a 	bl	80002bc <__adddf3>
 8007868:	4603      	mov	r3, r0
 800786a:	460c      	mov	r4, r1
 800786c:	4618      	mov	r0, r3
 800786e:	4621      	mov	r1, r4
 8007870:	f7f9 f9d2 	bl	8000c18 <__aeabi_d2f>
 8007874:	4602      	mov	r2, r0
 8007876:	4ba1      	ldr	r3, [pc, #644]	; (8007afc <cppLoop+0xc24>)
 8007878:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 800787a:	2200      	movs	r2, #0
 800787c:	f04f 31ff 	mov.w	r1, #4294967295
 8007880:	4899      	ldr	r0, [pc, #612]	; (8007ae8 <cppLoop+0xc10>)
 8007882:	f7fa fbf7 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
			line_trace.setMaxVelocity(adj_max_velocity);

			led.LR(-1, 0);
		}
		break;
 8007886:	f000 bc05 	b.w	8008094 <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_L){
 800788a:	489b      	ldr	r0, [pc, #620]	; (8007af8 <cppLoop+0xc20>)
 800788c:	f7fa fad2 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007890:	4603      	mov	r3, r0
 8007892:	2b01      	cmp	r3, #1
 8007894:	bf0c      	ite	eq
 8007896:	2301      	moveq	r3, #1
 8007898:	2300      	movne	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d022      	beq.n	80078e6 <cppLoop+0xa0e>
			led.LR(-1, 1);
 80078a0:	2201      	movs	r2, #1
 80078a2:	f04f 31ff 	mov.w	r1, #4294967295
 80078a6:	4890      	ldr	r0, [pc, #576]	; (8007ae8 <cppLoop+0xc10>)
 80078a8:	f7fa fbe4 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80078ac:	2064      	movs	r0, #100	; 0x64
 80078ae:	f000 fd29 	bl	8008304 <HAL_Delay>
			adj_max_velocity = adj_max_velocity - 0.1;
 80078b2:	4b92      	ldr	r3, [pc, #584]	; (8007afc <cppLoop+0xc24>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7f8 fe5e 	bl	8000578 <__aeabi_f2d>
 80078bc:	a388      	add	r3, pc, #544	; (adr r3, 8007ae0 <cppLoop+0xc08>)
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	f7f8 fcf9 	bl	80002b8 <__aeabi_dsub>
 80078c6:	4603      	mov	r3, r0
 80078c8:	460c      	mov	r4, r1
 80078ca:	4618      	mov	r0, r3
 80078cc:	4621      	mov	r1, r4
 80078ce:	f7f9 f9a3 	bl	8000c18 <__aeabi_d2f>
 80078d2:	4602      	mov	r2, r0
 80078d4:	4b89      	ldr	r3, [pc, #548]	; (8007afc <cppLoop+0xc24>)
 80078d6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80078d8:	2200      	movs	r2, #0
 80078da:	f04f 31ff 	mov.w	r1, #4294967295
 80078de:	4882      	ldr	r0, [pc, #520]	; (8007ae8 <cppLoop+0xc10>)
 80078e0:	f7fa fbc8 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80078e4:	e3d6      	b.n	8008094 <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_C){
 80078e6:	4884      	ldr	r0, [pc, #528]	; (8007af8 <cppLoop+0xc20>)
 80078e8:	f7fa faa4 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	bf0c      	ite	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	2300      	movne	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 83cb 	beq.w	8008094 <cppLoop+0x11bc>
			led.LR(-1, 1);
 80078fe:	2201      	movs	r2, #1
 8007900:	f04f 31ff 	mov.w	r1, #4294967295
 8007904:	4878      	ldr	r0, [pc, #480]	; (8007ae8 <cppLoop+0xc10>)
 8007906:	f7fa fbb5 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800790a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800790e:	f000 fcf9 	bl	8008304 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8007912:	2300      	movs	r3, #0
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	4b79      	ldr	r3, [pc, #484]	; (8007afc <cppLoop+0xc24>)
 8007918:	2201      	movs	r2, #1
 800791a:	4979      	ldr	r1, [pc, #484]	; (8007b00 <cppLoop+0xc28>)
 800791c:	4879      	ldr	r0, [pc, #484]	; (8007b04 <cppLoop+0xc2c>)
 800791e:	f7f9 fe71 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007922:	4b76      	ldr	r3, [pc, #472]	; (8007afc <cppLoop+0xc24>)
 8007924:	edd3 7a00 	vldr	s15, [r3]
 8007928:	eeb0 0a67 	vmov.f32	s0, s15
 800792c:	4870      	ldr	r0, [pc, #448]	; (8007af0 <cppLoop+0xc18>)
 800792e:	f7fb fe01 	bl	8003534 <_ZN9LineTrace14setMaxVelocityEf>
			led.LR(-1, 0);
 8007932:	2200      	movs	r2, #0
 8007934:	f04f 31ff 	mov.w	r1, #4294967295
 8007938:	486b      	ldr	r0, [pc, #428]	; (8007ae8 <cppLoop+0xc10>)
 800793a:	f7fa fb9b 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800793e:	e3a9      	b.n	8008094 <cppLoop+0x11bc>

	case 5:
		led.fullColor('M');
 8007940:	214d      	movs	r1, #77	; 0x4d
 8007942:	4869      	ldr	r0, [pc, #420]	; (8007ae8 <cppLoop+0xc10>)
 8007944:	f7fa fada 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007948:	f7f9 fbaa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800794c:	2100      	movs	r1, #0
 800794e:	2000      	movs	r0, #0
 8007950:	f7f9 fbb6 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 8007954:	486c      	ldr	r0, [pc, #432]	; (8007b08 <cppLoop+0xc30>)
 8007956:	f7f9 fbdd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800795a:	2101      	movs	r1, #1
 800795c:	2000      	movs	r0, #0
 800795e:	f7f9 fbaf 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8007962:	4b6a      	ldr	r3, [pc, #424]	; (8007b0c <cppLoop+0xc34>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f7f8 fe06 	bl	8000578 <__aeabi_f2d>
 800796c:	4603      	mov	r3, r0
 800796e:	460c      	mov	r4, r1
 8007970:	461a      	mov	r2, r3
 8007972:	4623      	mov	r3, r4
 8007974:	4866      	ldr	r0, [pc, #408]	; (8007b10 <cppLoop+0xc38>)
 8007976:	f7f9 fbcd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800797a:	485f      	ldr	r0, [pc, #380]	; (8007af8 <cppLoop+0xc20>)
 800797c:	f7fa fa5a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007980:	4603      	mov	r3, r0
 8007982:	2b02      	cmp	r3, #2
 8007984:	bf0c      	ite	eq
 8007986:	2301      	moveq	r3, #1
 8007988:	2300      	movne	r3, #0
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8383 	beq.w	8008098 <cppLoop+0x11c0>
			HAL_Delay(500);
 8007992:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007996:	f000 fcb5 	bl	8008304 <HAL_Delay>

			led.LR(1, -1);
 800799a:	f04f 32ff 	mov.w	r2, #4294967295
 800799e:	2101      	movs	r1, #1
 80079a0:	4851      	ldr	r0, [pc, #324]	; (8007ae8 <cppLoop+0xc10>)
 80079a2:	f7fa fb67 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80079a6:	2102      	movs	r1, #2
 80079a8:	4851      	ldr	r0, [pc, #324]	; (8007af0 <cppLoop+0xc18>)
 80079aa:	f7fc f871 	bl	8003a90 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80079ae:	4b57      	ldr	r3, [pc, #348]	; (8007b0c <cppLoop+0xc34>)
 80079b0:	edd3 7a00 	vldr	s15, [r3]
 80079b4:	eeb0 0a67 	vmov.f32	s0, s15
 80079b8:	484d      	ldr	r0, [pc, #308]	; (8007af0 <cppLoop+0xc18>)
 80079ba:	f7fb fdac 	bl	8003516 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80079be:	4b53      	ldr	r3, [pc, #332]	; (8007b0c <cppLoop+0xc34>)
 80079c0:	edd3 7a00 	vldr	s15, [r3]
 80079c4:	eeb0 0a67 	vmov.f32	s0, s15
 80079c8:	4849      	ldr	r0, [pc, #292]	; (8007af0 <cppLoop+0xc18>)
 80079ca:	f7fb fdc2 	bl	8003552 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.createVelocityTabele();
 80079ce:	4848      	ldr	r0, [pc, #288]	; (8007af0 <cppLoop+0xc18>)
 80079d0:	f7fb fa04 	bl	8002ddc <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80079d4:	4846      	ldr	r0, [pc, #280]	; (8007af0 <cppLoop+0xc18>)
 80079d6:	f7fb ff5d 	bl	8003894 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80079da:	f04f 32ff 	mov.w	r2, #4294967295
 80079de:	2100      	movs	r1, #0
 80079e0:	4841      	ldr	r0, [pc, #260]	; (8007ae8 <cppLoop+0xc10>)
 80079e2:	f7fa fb47 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 80079e6:	e357      	b.n	8008098 <cppLoop+0x11c0>

	case 6:
		led.fullColor('R');
 80079e8:	2152      	movs	r1, #82	; 0x52
 80079ea:	483f      	ldr	r0, [pc, #252]	; (8007ae8 <cppLoop+0xc10>)
 80079ec:	f7fa fa86 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80079f0:	f7f9 fb56 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80079f4:	2100      	movs	r1, #0
 80079f6:	2000      	movs	r0, #0
 80079f8:	f7f9 fb62 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 80079fc:	4842      	ldr	r0, [pc, #264]	; (8007b08 <cppLoop+0xc30>)
 80079fe:	f7f9 fb89 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007a02:	2101      	movs	r1, #1
 8007a04:	2000      	movs	r0, #0
 8007a06:	f7f9 fb5b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity2());
 8007a0a:	4839      	ldr	r0, [pc, #228]	; (8007af0 <cppLoop+0xc18>)
 8007a0c:	f7fb fdcf 	bl	80035ae <_ZN9LineTrace15getMaxVelocity2Ev>
 8007a10:	ee10 3a10 	vmov	r3, s0
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7f8 fdaf 	bl	8000578 <__aeabi_f2d>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	461a      	mov	r2, r3
 8007a20:	4623      	mov	r3, r4
 8007a22:	4834      	ldr	r0, [pc, #208]	; (8007af4 <cppLoop+0xc1c>)
 8007a24:	f7f9 fb76 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 8007a28:	4833      	ldr	r0, [pc, #204]	; (8007af8 <cppLoop+0xc20>)
 8007a2a:	f7fa fa03 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	bf0c      	ite	eq
 8007a34:	2301      	moveq	r3, #1
 8007a36:	2300      	movne	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d022      	beq.n	8007a84 <cppLoop+0xbac>
			led.LR(-1, 1);
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f04f 31ff 	mov.w	r1, #4294967295
 8007a44:	4828      	ldr	r0, [pc, #160]	; (8007ae8 <cppLoop+0xc10>)
 8007a46:	f7fa fb15 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007a4a:	2064      	movs	r0, #100	; 0x64
 8007a4c:	f000 fc5a 	bl	8008304 <HAL_Delay>

			adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8007a50:	4b2e      	ldr	r3, [pc, #184]	; (8007b0c <cppLoop+0xc34>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7f8 fd8f 	bl	8000578 <__aeabi_f2d>
 8007a5a:	a321      	add	r3, pc, #132	; (adr r3, 8007ae0 <cppLoop+0xc08>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	f7f8 fc2c 	bl	80002bc <__adddf3>
 8007a64:	4603      	mov	r3, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	4618      	mov	r0, r3
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f7f9 f8d4 	bl	8000c18 <__aeabi_d2f>
 8007a70:	4602      	mov	r2, r0
 8007a72:	4b26      	ldr	r3, [pc, #152]	; (8007b0c <cppLoop+0xc34>)
 8007a74:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007a76:	2200      	movs	r2, #0
 8007a78:	f04f 31ff 	mov.w	r1, #4294967295
 8007a7c:	481a      	ldr	r0, [pc, #104]	; (8007ae8 <cppLoop+0xc10>)
 8007a7e:	f7fa faf9 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity2(adj_max_velocity2);

			led.LR(-1, 0);
		}

		break;
 8007a82:	e30b      	b.n	800809c <cppLoop+0x11c4>
		else if(joy_stick.getValue() == JOY_L){
 8007a84:	481c      	ldr	r0, [pc, #112]	; (8007af8 <cppLoop+0xc20>)
 8007a86:	f7fa f9d5 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	bf0c      	ite	eq
 8007a90:	2301      	moveq	r3, #1
 8007a92:	2300      	movne	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d03c      	beq.n	8007b14 <cppLoop+0xc3c>
			led.LR(-1, 1);
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8007aa0:	4811      	ldr	r0, [pc, #68]	; (8007ae8 <cppLoop+0xc10>)
 8007aa2:	f7fa fae7 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007aa6:	2064      	movs	r0, #100	; 0x64
 8007aa8:	f000 fc2c 	bl	8008304 <HAL_Delay>
			adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8007aac:	4b17      	ldr	r3, [pc, #92]	; (8007b0c <cppLoop+0xc34>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7f8 fd61 	bl	8000578 <__aeabi_f2d>
 8007ab6:	a30a      	add	r3, pc, #40	; (adr r3, 8007ae0 <cppLoop+0xc08>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f7f8 fbfc 	bl	80002b8 <__aeabi_dsub>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	f7f9 f8a6 	bl	8000c18 <__aeabi_d2f>
 8007acc:	4602      	mov	r2, r0
 8007ace:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <cppLoop+0xc34>)
 8007ad0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8007ad8:	4803      	ldr	r0, [pc, #12]	; (8007ae8 <cppLoop+0xc10>)
 8007ada:	f7fa facb 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007ade:	e2dd      	b.n	800809c <cppLoop+0x11c4>
 8007ae0:	9999999a 	.word	0x9999999a
 8007ae4:	3fb99999 	.word	0x3fb99999
 8007ae8:	200005cc 	.word	0x200005cc
 8007aec:	08018614 	.word	0x08018614
 8007af0:	20017da0 	.word	0x20017da0
 8007af4:	080185fc 	.word	0x080185fc
 8007af8:	200005c0 	.word	0x200005c0
 8007afc:	2003c448 	.word	0x2003c448
 8007b00:	08018620 	.word	0x08018620
 8007b04:	080185cc 	.word	0x080185cc
 8007b08:	0801862c 	.word	0x0801862c
 8007b0c:	2003c450 	.word	0x2003c450
 8007b10:	080185f0 	.word	0x080185f0
		else if(joy_stick.getValue() == JOY_C){
 8007b14:	48ca      	ldr	r0, [pc, #808]	; (8007e40 <cppLoop+0xf68>)
 8007b16:	f7fa f98d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	bf0c      	ite	eq
 8007b20:	2301      	moveq	r3, #1
 8007b22:	2300      	movne	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 82b8 	beq.w	800809c <cppLoop+0x11c4>
			led.LR(-1, 1);
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8007b32:	48c4      	ldr	r0, [pc, #784]	; (8007e44 <cppLoop+0xf6c>)
 8007b34:	f7fa fa9e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007b38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007b3c:	f000 fbe2 	bl	8008304 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8007b40:	2300      	movs	r3, #0
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4bc0      	ldr	r3, [pc, #768]	; (8007e48 <cppLoop+0xf70>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	49c0      	ldr	r1, [pc, #768]	; (8007e4c <cppLoop+0xf74>)
 8007b4a:	48c1      	ldr	r0, [pc, #772]	; (8007e50 <cppLoop+0xf78>)
 8007b4c:	f7f9 fd5a 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8007b50:	4bbd      	ldr	r3, [pc, #756]	; (8007e48 <cppLoop+0xf70>)
 8007b52:	edd3 7a00 	vldr	s15, [r3]
 8007b56:	eeb0 0a67 	vmov.f32	s0, s15
 8007b5a:	48be      	ldr	r0, [pc, #760]	; (8007e54 <cppLoop+0xf7c>)
 8007b5c:	f7fb fcf9 	bl	8003552 <_ZN9LineTrace15setMaxVelocity2Ef>
			led.LR(-1, 0);
 8007b60:	2200      	movs	r2, #0
 8007b62:	f04f 31ff 	mov.w	r1, #4294967295
 8007b66:	48b7      	ldr	r0, [pc, #732]	; (8007e44 <cppLoop+0xf6c>)
 8007b68:	f7fa fa84 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007b6c:	e296      	b.n	800809c <cppLoop+0x11c4>

	case 7:
		led.fullColor('~');
 8007b6e:	217e      	movs	r1, #126	; 0x7e
 8007b70:	48b4      	ldr	r0, [pc, #720]	; (8007e44 <cppLoop+0xf6c>)
 8007b72:	f7fa f9c3 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b76:	f7f9 fa93 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	f7f9 fa9f 	bl	80010c0 <lcd_locate>
		lcd_printf("07      ");
 8007b82:	48b5      	ldr	r0, [pc, #724]	; (8007e58 <cppLoop+0xf80>)
 8007b84:	f7f9 fac6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007b88:	2101      	movs	r1, #1
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	f7f9 fa98 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007b90:	48b2      	ldr	r0, [pc, #712]	; (8007e5c <cppLoop+0xf84>)
 8007b92:	f7f9 fabf 	bl	8001114 <lcd_printf>
		break;
 8007b96:	e290      	b.n	80080ba <cppLoop+0x11e2>

	case 8:
		led.fullColor('~');
 8007b98:	217e      	movs	r1, #126	; 0x7e
 8007b9a:	48aa      	ldr	r0, [pc, #680]	; (8007e44 <cppLoop+0xf6c>)
 8007b9c:	f7fa f9ae 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007ba0:	f7f9 fa7e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	f7f9 fa8a 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 8007bac:	48ac      	ldr	r0, [pc, #688]	; (8007e60 <cppLoop+0xf88>)
 8007bae:	f7f9 fab1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f7f9 fa83 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007bba:	48a8      	ldr	r0, [pc, #672]	; (8007e5c <cppLoop+0xf84>)
 8007bbc:	f7f9 faaa 	bl	8001114 <lcd_printf>

		break;
 8007bc0:	e27b      	b.n	80080ba <cppLoop+0x11e2>

	case 9:
		led.fullColor('~');
 8007bc2:	217e      	movs	r1, #126	; 0x7e
 8007bc4:	489f      	ldr	r0, [pc, #636]	; (8007e44 <cppLoop+0xf6c>)
 8007bc6:	f7fa f999 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007bca:	f7f9 fa69 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007bce:	2100      	movs	r1, #0
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	f7f9 fa75 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8007bd6:	48a3      	ldr	r0, [pc, #652]	; (8007e64 <cppLoop+0xf8c>)
 8007bd8:	f7f9 fa9c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007bdc:	2101      	movs	r1, #1
 8007bde:	2000      	movs	r0, #0
 8007be0:	f7f9 fa6e 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8007be4:	48a0      	ldr	r0, [pc, #640]	; (8007e68 <cppLoop+0xf90>)
 8007be6:	f7f9 fa95 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007bea:	4895      	ldr	r0, [pc, #596]	; (8007e40 <cppLoop+0xf68>)
 8007bec:	f7fa f922 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	bf0c      	ite	eq
 8007bf6:	2301      	moveq	r3, #1
 8007bf8:	2300      	movne	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 824f 	beq.w	80080a0 <cppLoop+0x11c8>
			led.LR(-1, 1);
 8007c02:	2201      	movs	r2, #1
 8007c04:	f04f 31ff 	mov.w	r1, #4294967295
 8007c08:	488e      	ldr	r0, [pc, #568]	; (8007e44 <cppLoop+0xf6c>)
 8007c0a:	f7fa fa33 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8007c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c12:	f000 fb77 	bl	8008304 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8007c16:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8007e6c <cppLoop+0xf94>
 8007c1a:	488e      	ldr	r0, [pc, #568]	; (8007e54 <cppLoop+0xf7c>)
 8007c1c:	f7fb fc6c 	bl	80034f8 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8007c20:	488c      	ldr	r0, [pc, #560]	; (8007e54 <cppLoop+0xf7c>)
 8007c22:	f7fb fda9 	bl	8003778 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8007c26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c2a:	f000 fb6b 	bl	8008304 <HAL_Delay>

			led.fullColor('R');
 8007c2e:	2152      	movs	r1, #82	; 0x52
 8007c30:	4884      	ldr	r0, [pc, #528]	; (8007e44 <cppLoop+0xf6c>)
 8007c32:	f7fa f963 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8007c36:	488e      	ldr	r0, [pc, #568]	; (8007e70 <cppLoop+0xf98>)
 8007c38:	f7f9 fc36 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8007c3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c40:	f000 fb60 	bl	8008304 <HAL_Delay>

			line_trace.stop();
 8007c44:	4883      	ldr	r0, [pc, #524]	; (8007e54 <cppLoop+0xf7c>)
 8007c46:	f7fb fdbd 	bl	80037c4 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8007c4a:	498a      	ldr	r1, [pc, #552]	; (8007e74 <cppLoop+0xf9c>)
 8007c4c:	488a      	ldr	r0, [pc, #552]	; (8007e78 <cppLoop+0xfa0>)
 8007c4e:	f7f9 fc64 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 8007c52:	4887      	ldr	r0, [pc, #540]	; (8007e70 <cppLoop+0xf98>)
 8007c54:	f7f9 fbec 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8007c58:	eef0 7a40 	vmov.f32	s15, s0
 8007c5c:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 8007c60:	463b      	mov	r3, r7
 8007c62:	2201      	movs	r2, #1
 8007c64:	4619      	mov	r1, r3
 8007c66:	2001      	movs	r0, #1
 8007c68:	f7f9 fc7a 	bl	8001560 <sd_write_float>
			user_fclose();
 8007c6c:	f7f9 fc68 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 8007c70:	2200      	movs	r2, #0
 8007c72:	f04f 31ff 	mov.w	r1, #4294967295
 8007c76:	4873      	ldr	r0, [pc, #460]	; (8007e44 <cppLoop+0xf6c>)
 8007c78:	f7fa f9fc 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007c7c:	e210      	b.n	80080a0 <cppLoop+0x11c8>

	case 10:
		led.fullColor('~');
 8007c7e:	217e      	movs	r1, #126	; 0x7e
 8007c80:	4870      	ldr	r0, [pc, #448]	; (8007e44 <cppLoop+0xf6c>)
 8007c82:	f7fa f93b 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c86:	f7f9 fa0b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	f7f9 fa17 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8007c92:	487a      	ldr	r0, [pc, #488]	; (8007e7c <cppLoop+0xfa4>)
 8007c94:	f7f9 fa3e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c98:	2101      	movs	r1, #1
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f7f9 fa10 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8007ca0:	4877      	ldr	r0, [pc, #476]	; (8007e80 <cppLoop+0xfa8>)
 8007ca2:	f7f9 fa37 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8007ca6:	4866      	ldr	r0, [pc, #408]	; (8007e40 <cppLoop+0xf68>)
 8007ca8:	f7fa f8c4 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	bf0c      	ite	eq
 8007cb2:	2301      	moveq	r3, #1
 8007cb4:	2300      	movne	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 81f3 	beq.w	80080a4 <cppLoop+0x11cc>
			HAL_Delay(500);
 8007cbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007cc2:	f000 fb1f 	bl	8008304 <HAL_Delay>
			led.LR(-1, 1);
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8007ccc:	485d      	ldr	r0, [pc, #372]	; (8007e44 <cppLoop+0xf6c>)
 8007cce:	f7fa f9d1 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	485f      	ldr	r0, [pc, #380]	; (8007e54 <cppLoop+0xf7c>)
 8007cd6:	f7fb fedb 	bl	8003a90 <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 8007cda:	485e      	ldr	r0, [pc, #376]	; (8007e54 <cppLoop+0xf7c>)
 8007cdc:	f7fb f902 	bl	8002ee4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8007ce6:	4857      	ldr	r0, [pc, #348]	; (8007e44 <cppLoop+0xf6c>)
 8007ce8:	f7fa f9c4 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007cec:	e1da      	b.n	80080a4 <cppLoop+0x11cc>

	case 11:
		led.fullColor('~');
 8007cee:	217e      	movs	r1, #126	; 0x7e
 8007cf0:	4854      	ldr	r0, [pc, #336]	; (8007e44 <cppLoop+0xf6c>)
 8007cf2:	f7fa f903 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007cf6:	f7f9 f9d3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	f7f9 f9df 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8007d02:	4860      	ldr	r0, [pc, #384]	; (8007e84 <cppLoop+0xfac>)
 8007d04:	f7f9 fa06 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d08:	2101      	movs	r1, #1
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f7f9 f9d8 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007d10:	485d      	ldr	r0, [pc, #372]	; (8007e88 <cppLoop+0xfb0>)
 8007d12:	f7f9 f9ff 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007d16:	484a      	ldr	r0, [pc, #296]	; (8007e40 <cppLoop+0xf68>)
 8007d18:	f7fa f88c 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	bf0c      	ite	eq
 8007d22:	2301      	moveq	r3, #1
 8007d24:	2300      	movne	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 81bd 	beq.w	80080a8 <cppLoop+0x11d0>
			HAL_Delay(1500);
 8007d2e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007d32:	f000 fae7 	bl	8008304 <HAL_Delay>
			led.LR(-1, 1);
 8007d36:	2201      	movs	r2, #1
 8007d38:	f04f 31ff 	mov.w	r1, #4294967295
 8007d3c:	4841      	ldr	r0, [pc, #260]	; (8007e44 <cppLoop+0xf6c>)
 8007d3e:	f7fa f999 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8007d42:	4852      	ldr	r0, [pc, #328]	; (8007e8c <cppLoop+0xfb4>)
 8007d44:	f7fc fa5b 	bl	80041fe <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8007d48:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8007e28 <cppLoop+0xf50>
 8007d4c:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8007e30 <cppLoop+0xf58>
 8007d50:	484f      	ldr	r0, [pc, #316]	; (8007e90 <cppLoop+0xfb8>)
 8007d52:	f7fc fae9 	bl	8004328 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8007d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d5a:	f000 fad3 	bl	8008304 <HAL_Delay>

			logger.stop();
 8007d5e:	484b      	ldr	r0, [pc, #300]	; (8007e8c <cppLoop+0xfb4>)
 8007d60:	f7fc fa5e 	bl	8004220 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8007d64:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8007e38 <cppLoop+0xf60>
 8007d68:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8007e38 <cppLoop+0xf60>
 8007d6c:	4848      	ldr	r0, [pc, #288]	; (8007e90 <cppLoop+0xfb8>)
 8007d6e:	f7fc fadb 	bl	8004328 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8007d72:	4a48      	ldr	r2, [pc, #288]	; (8007e94 <cppLoop+0xfbc>)
 8007d74:	4948      	ldr	r1, [pc, #288]	; (8007e98 <cppLoop+0xfc0>)
 8007d76:	4845      	ldr	r0, [pc, #276]	; (8007e8c <cppLoop+0xfb4>)
 8007d78:	f7fc f951 	bl	800401e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8007d82:	4830      	ldr	r0, [pc, #192]	; (8007e44 <cppLoop+0xf6c>)
 8007d84:	f7fa f976 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007d88:	e18e      	b.n	80080a8 <cppLoop+0x11d0>

	case 12:
		led.fullColor('~');
 8007d8a:	217e      	movs	r1, #126	; 0x7e
 8007d8c:	482d      	ldr	r0, [pc, #180]	; (8007e44 <cppLoop+0xf6c>)
 8007d8e:	f7fa f8b5 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d92:	f7f9 f985 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d96:	2100      	movs	r1, #0
 8007d98:	2000      	movs	r0, #0
 8007d9a:	f7f9 f991 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8007d9e:	483f      	ldr	r0, [pc, #252]	; (8007e9c <cppLoop+0xfc4>)
 8007da0:	f7f9 f9b8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007da4:	2101      	movs	r1, #1
 8007da6:	2000      	movs	r0, #0
 8007da8:	f7f9 f98a 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8007dac:	483c      	ldr	r0, [pc, #240]	; (8007ea0 <cppLoop+0xfc8>)
 8007dae:	f7f9 f9b1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007db2:	4823      	ldr	r0, [pc, #140]	; (8007e40 <cppLoop+0xf68>)
 8007db4:	f7fa f83e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	bf0c      	ite	eq
 8007dbe:	2301      	moveq	r3, #1
 8007dc0:	2300      	movne	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 8171 	beq.w	80080ac <cppLoop+0x11d4>
			HAL_Delay(1500);
 8007dca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007dce:	f000 fa99 	bl	8008304 <HAL_Delay>
			led.LR(-1, 1);
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8007dd8:	481a      	ldr	r0, [pc, #104]	; (8007e44 <cppLoop+0xf6c>)
 8007dda:	f7fa f94b 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8007dde:	482b      	ldr	r0, [pc, #172]	; (8007e8c <cppLoop+0xfb4>)
 8007de0:	f7fc fa0d 	bl	80041fe <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8007de4:	482f      	ldr	r0, [pc, #188]	; (8007ea4 <cppLoop+0xfcc>)
 8007de6:	f7fd f9ec 	bl	80051c2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007dea:	eddf 0a20 	vldr	s1, [pc, #128]	; 8007e6c <cppLoop+0xf94>
 8007dee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007df2:	482c      	ldr	r0, [pc, #176]	; (8007ea4 <cppLoop+0xfcc>)
 8007df4:	f7fd f978 	bl	80050e8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8007df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007dfc:	f000 fa82 	bl	8008304 <HAL_Delay>

			logger.stop();
 8007e00:	4822      	ldr	r0, [pc, #136]	; (8007e8c <cppLoop+0xfb4>)
 8007e02:	f7fc fa0d 	bl	8004220 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8007e06:	4827      	ldr	r0, [pc, #156]	; (8007ea4 <cppLoop+0xfcc>)
 8007e08:	f7fd f9ee 	bl	80051e8 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8007e0c:	4a26      	ldr	r2, [pc, #152]	; (8007ea8 <cppLoop+0xfd0>)
 8007e0e:	4922      	ldr	r1, [pc, #136]	; (8007e98 <cppLoop+0xfc0>)
 8007e10:	481e      	ldr	r0, [pc, #120]	; (8007e8c <cppLoop+0xfb4>)
 8007e12:	f7fc f904 	bl	800401e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8007e16:	2200      	movs	r2, #0
 8007e18:	f04f 31ff 	mov.w	r1, #4294967295
 8007e1c:	4809      	ldr	r0, [pc, #36]	; (8007e44 <cppLoop+0xf6c>)
 8007e1e:	f7fa f929 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007e22:	e143      	b.n	80080ac <cppLoop+0x11d4>
 8007e24:	f3af 8000 	nop.w
 8007e28:	33333333 	.word	0x33333333
 8007e2c:	bfd33333 	.word	0xbfd33333
 8007e30:	33333333 	.word	0x33333333
 8007e34:	3fd33333 	.word	0x3fd33333
	...
 8007e40:	200005c0 	.word	0x200005c0
 8007e44:	200005cc 	.word	0x200005cc
 8007e48:	2003c450 	.word	0x2003c450
 8007e4c:	08018638 	.word	0x08018638
 8007e50:	080185cc 	.word	0x080185cc
 8007e54:	20017da0 	.word	0x20017da0
 8007e58:	08018644 	.word	0x08018644
 8007e5c:	08018650 	.word	0x08018650
 8007e60:	0801865c 	.word	0x0801865c
 8007e64:	08018668 	.word	0x08018668
 8007e68:	08018670 	.word	0x08018670
 8007e6c:	00000000 	.word	0x00000000
 8007e70:	20017d00 	.word	0x20017d00
 8007e74:	0801867c 	.word	0x0801867c
 8007e78:	08018684 	.word	0x08018684
 8007e7c:	08018690 	.word	0x08018690
 8007e80:	0801869c 	.word	0x0801869c
 8007e84:	080186a8 	.word	0x080186a8
 8007e88:	080186b0 	.word	0x080186b0
 8007e8c:	200005f0 	.word	0x200005f0
 8007e90:	200005c8 	.word	0x200005c8
 8007e94:	080186b8 	.word	0x080186b8
 8007e98:	080186c4 	.word	0x080186c4
 8007e9c:	080186d0 	.word	0x080186d0
 8007ea0:	080186d4 	.word	0x080186d4
 8007ea4:	20017d20 	.word	0x20017d20
 8007ea8:	080186e0 	.word	0x080186e0

	case 13:
		led.fullColor('~');
 8007eac:	217e      	movs	r1, #126	; 0x7e
 8007eae:	4886      	ldr	r0, [pc, #536]	; (80080c8 <cppLoop+0x11f0>)
 8007eb0:	f7fa f824 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007eb4:	f7f9 f8f4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007eb8:	2100      	movs	r1, #0
 8007eba:	2000      	movs	r0, #0
 8007ebc:	f7f9 f900 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8007ec0:	4882      	ldr	r0, [pc, #520]	; (80080cc <cppLoop+0x11f4>)
 8007ec2:	f7f9 f927 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	2000      	movs	r0, #0
 8007eca:	f7f9 f8f9 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007ece:	4880      	ldr	r0, [pc, #512]	; (80080d0 <cppLoop+0x11f8>)
 8007ed0:	f7f9 f920 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007ed4:	487f      	ldr	r0, [pc, #508]	; (80080d4 <cppLoop+0x11fc>)
 8007ed6:	f7f9 ffad 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	bf0c      	ite	eq
 8007ee0:	2301      	moveq	r3, #1
 8007ee2:	2300      	movne	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 80e2 	beq.w	80080b0 <cppLoop+0x11d8>
			led.LR(-1, 1);
 8007eec:	2201      	movs	r2, #1
 8007eee:	f04f 31ff 	mov.w	r1, #4294967295
 8007ef2:	4875      	ldr	r0, [pc, #468]	; (80080c8 <cppLoop+0x11f0>)
 8007ef4:	f7fa f8be 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8007ef8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007efc:	f000 fa02 	bl	8008304 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8007f00:	ed9f 0a75 	vldr	s0, [pc, #468]	; 80080d8 <cppLoop+0x1200>
 8007f04:	4875      	ldr	r0, [pc, #468]	; (80080dc <cppLoop+0x1204>)
 8007f06:	f7fc ff7b 	bl	8004e00 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8007f0a:	4874      	ldr	r0, [pc, #464]	; (80080dc <cppLoop+0x1204>)
 8007f0c:	f7fc ff88 	bl	8004e20 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8007f10:	f244 405c 	movw	r0, #17500	; 0x445c
 8007f14:	f000 f9f6 	bl	8008304 <HAL_Delay>
			sys_ident.stop();
 8007f18:	4870      	ldr	r0, [pc, #448]	; (80080dc <cppLoop+0x1204>)
 8007f1a:	f7fc ff95 	bl	8004e48 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8007f1e:	486f      	ldr	r0, [pc, #444]	; (80080dc <cppLoop+0x1204>)
 8007f20:	f7fc fefc 	bl	8004d1c <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8007f24:	2200      	movs	r2, #0
 8007f26:	f04f 31ff 	mov.w	r1, #4294967295
 8007f2a:	4867      	ldr	r0, [pc, #412]	; (80080c8 <cppLoop+0x11f0>)
 8007f2c:	f7fa f8a2 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007f30:	e0be      	b.n	80080b0 <cppLoop+0x11d8>

	case 14:
		led.fullColor('W');
 8007f32:	2157      	movs	r1, #87	; 0x57
 8007f34:	4864      	ldr	r0, [pc, #400]	; (80080c8 <cppLoop+0x11f0>)
 8007f36:	f7f9 ffe1 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007f3a:	f7f9 f8b1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007f3e:	2100      	movs	r1, #0
 8007f40:	2000      	movs	r0, #0
 8007f42:	f7f9 f8bd 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8007f46:	4866      	ldr	r0, [pc, #408]	; (80080e0 <cppLoop+0x1208>)
 8007f48:	f7f9 f8e4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f7f9 f8b6 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8007f54:	4b63      	ldr	r3, [pc, #396]	; (80080e4 <cppLoop+0x120c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7f8 fb0d 	bl	8000578 <__aeabi_f2d>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	460c      	mov	r4, r1
 8007f62:	461a      	mov	r2, r3
 8007f64:	4623      	mov	r3, r4
 8007f66:	4860      	ldr	r0, [pc, #384]	; (80080e8 <cppLoop+0x1210>)
 8007f68:	f7f9 f8d4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007f6c:	4859      	ldr	r0, [pc, #356]	; (80080d4 <cppLoop+0x11fc>)
 8007f6e:	f7f9 ff61 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	bf0c      	ite	eq
 8007f78:	2301      	moveq	r3, #1
 8007f7a:	2300      	movne	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8098 	beq.w	80080b4 <cppLoop+0x11dc>
			HAL_Delay(500);
 8007f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f88:	f000 f9bc 	bl	8008304 <HAL_Delay>

			led.LR(1, -1);
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	2101      	movs	r1, #1
 8007f92:	484d      	ldr	r0, [pc, #308]	; (80080c8 <cppLoop+0x11f0>)
 8007f94:	f7fa f86e 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8007f98:	2102      	movs	r1, #2
 8007f9a:	4854      	ldr	r0, [pc, #336]	; (80080ec <cppLoop+0x1214>)
 8007f9c:	f7fb fd78 	bl	8003a90 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8007fa0:	4b50      	ldr	r3, [pc, #320]	; (80080e4 <cppLoop+0x120c>)
 8007fa2:	edd3 7a00 	vldr	s15, [r3]
 8007fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8007faa:	4850      	ldr	r0, [pc, #320]	; (80080ec <cppLoop+0x1214>)
 8007fac:	f7fb fab3 	bl	8003516 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8007fb0:	4b4c      	ldr	r3, [pc, #304]	; (80080e4 <cppLoop+0x120c>)
 8007fb2:	edd3 7a00 	vldr	s15, [r3]
 8007fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8007fba:	484c      	ldr	r0, [pc, #304]	; (80080ec <cppLoop+0x1214>)
 8007fbc:	f7fb faba 	bl	8003534 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8007fc0:	484a      	ldr	r0, [pc, #296]	; (80080ec <cppLoop+0x1214>)
 8007fc2:	f7fa ff8f 	bl	8002ee4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8007fc6:	4849      	ldr	r0, [pc, #292]	; (80080ec <cppLoop+0x1214>)
 8007fc8:	f7fb fc64 	bl	8003894 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	483d      	ldr	r0, [pc, #244]	; (80080c8 <cppLoop+0x11f0>)
 8007fd4:	f7fa f84e 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007fd8:	e06c      	b.n	80080b4 <cppLoop+0x11dc>

	case 15:
		led.fullColor('W');
 8007fda:	2157      	movs	r1, #87	; 0x57
 8007fdc:	483a      	ldr	r0, [pc, #232]	; (80080c8 <cppLoop+0x11f0>)
 8007fde:	f7f9 ff8d 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fe2:	f7f9 f85d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f7f9 f869 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8007fee:	4840      	ldr	r0, [pc, #256]	; (80080f0 <cppLoop+0x1218>)
 8007ff0:	f7f9 f890 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	f7f9 f862 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8007ffc:	4b3d      	ldr	r3, [pc, #244]	; (80080f4 <cppLoop+0x121c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	f7f8 fab9 	bl	8000578 <__aeabi_f2d>
 8008006:	4603      	mov	r3, r0
 8008008:	460c      	mov	r4, r1
 800800a:	461a      	mov	r2, r3
 800800c:	4623      	mov	r3, r4
 800800e:	4836      	ldr	r0, [pc, #216]	; (80080e8 <cppLoop+0x1210>)
 8008010:	f7f9 f880 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008014:	482f      	ldr	r0, [pc, #188]	; (80080d4 <cppLoop+0x11fc>)
 8008016:	f7f9 ff0d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800801a:	4603      	mov	r3, r0
 800801c:	2b02      	cmp	r3, #2
 800801e:	bf0c      	ite	eq
 8008020:	2301      	moveq	r3, #1
 8008022:	2300      	movne	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d046      	beq.n	80080b8 <cppLoop+0x11e0>
			HAL_Delay(500);
 800802a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800802e:	f000 f969 	bl	8008304 <HAL_Delay>

			led.LR(1, -1);
 8008032:	f04f 32ff 	mov.w	r2, #4294967295
 8008036:	2101      	movs	r1, #1
 8008038:	4823      	ldr	r0, [pc, #140]	; (80080c8 <cppLoop+0x11f0>)
 800803a:	f7fa f81b 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800803e:	2101      	movs	r1, #1
 8008040:	482a      	ldr	r0, [pc, #168]	; (80080ec <cppLoop+0x1214>)
 8008042:	f7fb fd25 	bl	8003a90 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8008046:	4b2b      	ldr	r3, [pc, #172]	; (80080f4 <cppLoop+0x121c>)
 8008048:	edd3 7a00 	vldr	s15, [r3]
 800804c:	eeb0 0a67 	vmov.f32	s0, s15
 8008050:	4826      	ldr	r0, [pc, #152]	; (80080ec <cppLoop+0x1214>)
 8008052:	f7fb fa60 	bl	8003516 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008056:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <cppLoop+0x121c>)
 8008058:	edd3 7a00 	vldr	s15, [r3]
 800805c:	eeb0 0a67 	vmov.f32	s0, s15
 8008060:	4822      	ldr	r0, [pc, #136]	; (80080ec <cppLoop+0x1214>)
 8008062:	f7fb fa67 	bl	8003534 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008066:	4821      	ldr	r0, [pc, #132]	; (80080ec <cppLoop+0x1214>)
 8008068:	f7fa ff3c 	bl	8002ee4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800806c:	481f      	ldr	r0, [pc, #124]	; (80080ec <cppLoop+0x1214>)
 800806e:	f7fb fc11 	bl	8003894 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008072:	f04f 32ff 	mov.w	r2, #4294967295
 8008076:	2100      	movs	r1, #0
 8008078:	4813      	ldr	r0, [pc, #76]	; (80080c8 <cppLoop+0x11f0>)
 800807a:	f7f9 fffb 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 800807e:	e01b      	b.n	80080b8 <cppLoop+0x11e0>

	default:
		break;
 8008080:	bf00      	nop
 8008082:	e01a      	b.n	80080ba <cppLoop+0x11e2>
		break;
 8008084:	bf00      	nop
 8008086:	e018      	b.n	80080ba <cppLoop+0x11e2>
		break;
 8008088:	bf00      	nop
 800808a:	e016      	b.n	80080ba <cppLoop+0x11e2>
		break;
 800808c:	bf00      	nop
 800808e:	e014      	b.n	80080ba <cppLoop+0x11e2>
		break;
 8008090:	bf00      	nop
 8008092:	e012      	b.n	80080ba <cppLoop+0x11e2>
		break;
 8008094:	bf00      	nop
 8008096:	e010      	b.n	80080ba <cppLoop+0x11e2>
		break;
 8008098:	bf00      	nop
 800809a:	e00e      	b.n	80080ba <cppLoop+0x11e2>
		break;
 800809c:	bf00      	nop
 800809e:	e00c      	b.n	80080ba <cppLoop+0x11e2>
		break;
 80080a0:	bf00      	nop
 80080a2:	e00a      	b.n	80080ba <cppLoop+0x11e2>
		break;
 80080a4:	bf00      	nop
 80080a6:	e008      	b.n	80080ba <cppLoop+0x11e2>
		break;
 80080a8:	bf00      	nop
 80080aa:	e006      	b.n	80080ba <cppLoop+0x11e2>
		break;
 80080ac:	bf00      	nop
 80080ae:	e004      	b.n	80080ba <cppLoop+0x11e2>
		break;
 80080b0:	bf00      	nop
 80080b2:	e002      	b.n	80080ba <cppLoop+0x11e2>
		break;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <cppLoop+0x11e2>
		break;
 80080b8:	bf00      	nop

	}

	HAL_Delay(30);
 80080ba:	201e      	movs	r0, #30
 80080bc:	f000 f922 	bl	8008304 <HAL_Delay>

}
 80080c0:	bf00      	nop
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c8:	200005cc 	.word	0x200005cc
 80080cc:	080186ec 	.word	0x080186ec
 80080d0:	080186b0 	.word	0x080186b0
 80080d4:	200005c0 	.word	0x200005c0
 80080d8:	3e99999a 	.word	0x3e99999a
 80080dc:	20024aec 	.word	0x20024aec
 80080e0:	080186f4 	.word	0x080186f4
 80080e4:	2003c450 	.word	0x2003c450
 80080e8:	080185f0 	.word	0x080185f0
 80080ec:	20017da0 	.word	0x20017da0
 80080f0:	08018700 	.word	0x08018700
 80080f4:	2003c448 	.word	0x2003c448

080080f8 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af06      	add	r7, sp, #24
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d13d      	bne.n	8008184 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800810e:	4293      	cmp	r3, r2
 8008110:	d138      	bne.n	8008184 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8008112:	481e      	ldr	r0, [pc, #120]	; (800818c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008114:	f7f9 ffe6 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8008118:	481d      	ldr	r0, [pc, #116]	; (8008190 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800811a:	f7fc fc65 	bl	80049e8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800811e:	481d      	ldr	r0, [pc, #116]	; (8008194 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008120:	f7f9 fe7c 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 8008124:	481c      	ldr	r0, [pc, #112]	; (8008198 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008126:	f7fc f88c 	bl	8004242 <_ZN5MotorC1Ev>
IMU imu;
 800812a:	481c      	ldr	r0, [pc, #112]	; (800819c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800812c:	f7f9 fc82 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 8008130:	481b      	ldr	r0, [pc, #108]	; (80081a0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008132:	f7fb fde1 	bl	8003cf8 <_ZN6LoggerC1Ev>
Encoder encoder;
 8008136:	481b      	ldr	r0, [pc, #108]	; (80081a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008138:	f7f9 f80c 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 800813c:	4b17      	ldr	r3, [pc, #92]	; (800819c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800813e:	4a19      	ldr	r2, [pc, #100]	; (80081a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008140:	4915      	ldr	r1, [pc, #84]	; (8008198 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008142:	4819      	ldr	r0, [pc, #100]	; (80081a8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008144:	f7fc fea4 	bl	8004e90 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8008148:	4b17      	ldr	r3, [pc, #92]	; (80081a8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800814a:	4a14      	ldr	r2, [pc, #80]	; (800819c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800814c:	4915      	ldr	r1, [pc, #84]	; (80081a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800814e:	4817      	ldr	r0, [pc, #92]	; (80081ac <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008150:	f7fc f95c 	bl	800440c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8008154:	4b11      	ldr	r3, [pc, #68]	; (800819c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008156:	9304      	str	r3, [sp, #16]
 8008158:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	4b13      	ldr	r3, [pc, #76]	; (80081ac <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800815e:	9302      	str	r3, [sp, #8]
 8008160:	4b10      	ldr	r3, [pc, #64]	; (80081a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800816a:	4a08      	ldr	r2, [pc, #32]	; (800818c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800816c:	490a      	ldr	r1, [pc, #40]	; (8008198 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800816e:	4810      	ldr	r0, [pc, #64]	; (80081b0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8008170:	f7fa fae6 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8008174:	4a08      	ldr	r2, [pc, #32]	; (8008198 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008176:	490a      	ldr	r1, [pc, #40]	; (80081a0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008178:	480e      	ldr	r0, [pc, #56]	; (80081b4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800817a:	f7fc fd85 	bl	8004c88 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800817e:	480e      	ldr	r0, [pc, #56]	; (80081b8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008180:	f7fc fac4 	bl	800470c <_ZN13PathFollowingC1Ev>
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	200002c0 	.word	0x200002c0
 8008190:	200005b8 	.word	0x200005b8
 8008194:	200005c0 	.word	0x200005c0
 8008198:	200005c8 	.word	0x200005c8
 800819c:	200005dc 	.word	0x200005dc
 80081a0:	200005f0 	.word	0x200005f0
 80081a4:	20017d00 	.word	0x20017d00
 80081a8:	20017d20 	.word	0x20017d20
 80081ac:	20017d60 	.word	0x20017d60
 80081b0:	20017da0 	.word	0x20017da0
 80081b4:	20024aec 	.word	0x20024aec
 80081b8:	20024cf8 	.word	0x20024cf8

080081bc <_GLOBAL__sub_I_line_sensor>:
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
 80081c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80081c4:	2001      	movs	r0, #1
 80081c6:	f7ff ff97 	bl	80080f8 <_Z41__static_initialization_and_destruction_0ii>
 80081ca:	bd80      	pop	{r7, pc}

080081cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80081cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008204 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80081d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80081d2:	e003      	b.n	80081dc <LoopCopyDataInit>

080081d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80081d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80081d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80081da:	3104      	adds	r1, #4

080081dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80081dc:	480b      	ldr	r0, [pc, #44]	; (800820c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80081de:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80081e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80081e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80081e4:	d3f6      	bcc.n	80081d4 <CopyDataInit>
  ldr  r2, =_sbss
 80081e6:	4a0b      	ldr	r2, [pc, #44]	; (8008214 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80081e8:	e002      	b.n	80081f0 <LoopFillZerobss>

080081ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80081ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80081ec:	f842 3b04 	str.w	r3, [r2], #4

080081f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80081f0:	4b09      	ldr	r3, [pc, #36]	; (8008218 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80081f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80081f4:	d3f9      	bcc.n	80081ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80081f6:	f7fe fd45 	bl	8006c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081fa:	f00b fdd5 	bl	8013da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80081fe:	f7fd f87f 	bl	8005300 <main>
  bx  lr    
 8008202:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008204:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008208:	08018d00 	.word	0x08018d00
  ldr  r0, =_sdata
 800820c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008210:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008214:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008218:	20040e38 	.word	0x20040e38

0800821c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800821c:	e7fe      	b.n	800821c <ADC_IRQHandler>
	...

08008220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008224:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <HAL_Init+0x40>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a0d      	ldr	r2, [pc, #52]	; (8008260 <HAL_Init+0x40>)
 800822a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800822e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008230:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <HAL_Init+0x40>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a0a      	ldr	r2, [pc, #40]	; (8008260 <HAL_Init+0x40>)
 8008236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800823a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800823c:	4b08      	ldr	r3, [pc, #32]	; (8008260 <HAL_Init+0x40>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a07      	ldr	r2, [pc, #28]	; (8008260 <HAL_Init+0x40>)
 8008242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008248:	2003      	movs	r0, #3
 800824a:	f000 fd51 	bl	8008cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800824e:	2000      	movs	r0, #0
 8008250:	f000 f808 	bl	8008264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008254:	f7fd ff66 	bl	8006124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40023c00 	.word	0x40023c00

08008264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800826c:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <HAL_InitTick+0x54>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	4b12      	ldr	r3, [pc, #72]	; (80082bc <HAL_InitTick+0x58>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	4619      	mov	r1, r3
 8008276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800827a:	fbb3 f3f1 	udiv	r3, r3, r1
 800827e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fd69 	bl	8008d5a <HAL_SYSTICK_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e00e      	b.n	80082b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b0f      	cmp	r3, #15
 8008296:	d80a      	bhi.n	80082ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008298:	2200      	movs	r2, #0
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	f000 fd31 	bl	8008d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80082a4:	4a06      	ldr	r2, [pc, #24]	; (80082c0 <HAL_InitTick+0x5c>)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e000      	b.n	80082b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000000 	.word	0x20000000
 80082bc:	20000008 	.word	0x20000008
 80082c0:	20000004 	.word	0x20000004

080082c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80082c8:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <HAL_IncTick+0x20>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <HAL_IncTick+0x24>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4413      	add	r3, r2
 80082d4:	4a04      	ldr	r2, [pc, #16]	; (80082e8 <HAL_IncTick+0x24>)
 80082d6:	6013      	str	r3, [r2, #0]
}
 80082d8:	bf00      	nop
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20000008 	.word	0x20000008
 80082e8:	2003edc0 	.word	0x2003edc0

080082ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  return uwTick;
 80082f0:	4b03      	ldr	r3, [pc, #12]	; (8008300 <HAL_GetTick+0x14>)
 80082f2:	681b      	ldr	r3, [r3, #0]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	2003edc0 	.word	0x2003edc0

08008304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800830c:	f7ff ffee 	bl	80082ec <HAL_GetTick>
 8008310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831c:	d005      	beq.n	800832a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800831e:	4b09      	ldr	r3, [pc, #36]	; (8008344 <HAL_Delay+0x40>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4413      	add	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800832a:	bf00      	nop
 800832c:	f7ff ffde 	bl	80082ec <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	429a      	cmp	r2, r3
 800833a:	d8f7      	bhi.n	800832c <HAL_Delay+0x28>
  {
  }
}
 800833c:	bf00      	nop
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000008 	.word	0x20000008

08008348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e033      	b.n	80083c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d109      	bne.n	800837a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7fd ff04 	bl	8006174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	f003 0310 	and.w	r3, r3, #16
 8008382:	2b00      	cmp	r3, #0
 8008384:	d118      	bne.n	80083b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800838e:	f023 0302 	bic.w	r3, r3, #2
 8008392:	f043 0202 	orr.w	r2, r3, #2
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa5a 	bl	8008854 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	f023 0303 	bic.w	r3, r3, #3
 80083ae:	f043 0201 	orr.w	r2, r3, #1
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	641a      	str	r2, [r3, #64]	; 0x40
 80083b6:	e001      	b.n	80083bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <HAL_ADC_Start_DMA+0x1e>
 80083ea:	2302      	movs	r3, #2
 80083ec:	e0cc      	b.n	8008588 <HAL_ADC_Start_DMA+0x1b8>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b01      	cmp	r3, #1
 8008402:	d018      	beq.n	8008436 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689a      	ldr	r2, [r3, #8]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0201 	orr.w	r2, r2, #1
 8008412:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008414:	4b5e      	ldr	r3, [pc, #376]	; (8008590 <HAL_ADC_Start_DMA+0x1c0>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a5e      	ldr	r2, [pc, #376]	; (8008594 <HAL_ADC_Start_DMA+0x1c4>)
 800841a:	fba2 2303 	umull	r2, r3, r2, r3
 800841e:	0c9a      	lsrs	r2, r3, #18
 8008420:	4613      	mov	r3, r2
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	4413      	add	r3, r2
 8008426:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008428:	e002      	b.n	8008430 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	3b01      	subs	r3, #1
 800842e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1f9      	bne.n	800842a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b01      	cmp	r3, #1
 8008442:	f040 80a0 	bne.w	8008586 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800844e:	f023 0301 	bic.w	r3, r3, #1
 8008452:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008464:	2b00      	cmp	r3, #0
 8008466:	d007      	beq.n	8008478 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008470:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008484:	d106      	bne.n	8008494 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848a:	f023 0206 	bic.w	r2, r3, #6
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	645a      	str	r2, [r3, #68]	; 0x44
 8008492:	e002      	b.n	800849a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80084a2:	4b3d      	ldr	r3, [pc, #244]	; (8008598 <HAL_ADC_Start_DMA+0x1c8>)
 80084a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	4a3c      	ldr	r2, [pc, #240]	; (800859c <HAL_ADC_Start_DMA+0x1cc>)
 80084ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	4a3b      	ldr	r2, [pc, #236]	; (80085a0 <HAL_ADC_Start_DMA+0x1d0>)
 80084b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	4a3a      	ldr	r2, [pc, #232]	; (80085a4 <HAL_ADC_Start_DMA+0x1d4>)
 80084bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80084c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80084d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	334c      	adds	r3, #76	; 0x4c
 80084f2:	4619      	mov	r1, r3
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f000 fcea 	bl	8008ed0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	2b00      	cmp	r3, #0
 8008506:	d12a      	bne.n	800855e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a26      	ldr	r2, [pc, #152]	; (80085a8 <HAL_ADC_Start_DMA+0x1d8>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d015      	beq.n	800853e <HAL_ADC_Start_DMA+0x16e>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a25      	ldr	r2, [pc, #148]	; (80085ac <HAL_ADC_Start_DMA+0x1dc>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d105      	bne.n	8008528 <HAL_ADC_Start_DMA+0x158>
 800851c:	4b1e      	ldr	r3, [pc, #120]	; (8008598 <HAL_ADC_Start_DMA+0x1c8>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f003 031f 	and.w	r3, r3, #31
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a20      	ldr	r2, [pc, #128]	; (80085b0 <HAL_ADC_Start_DMA+0x1e0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d129      	bne.n	8008586 <HAL_ADC_Start_DMA+0x1b6>
 8008532:	4b19      	ldr	r3, [pc, #100]	; (8008598 <HAL_ADC_Start_DMA+0x1c8>)
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f003 031f 	and.w	r3, r3, #31
 800853a:	2b0f      	cmp	r3, #15
 800853c:	d823      	bhi.n	8008586 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d11c      	bne.n	8008586 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800855a:	609a      	str	r2, [r3, #8]
 800855c:	e013      	b.n	8008586 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a11      	ldr	r2, [pc, #68]	; (80085a8 <HAL_ADC_Start_DMA+0x1d8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d10e      	bne.n	8008586 <HAL_ADC_Start_DMA+0x1b6>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d107      	bne.n	8008586 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008584:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000000 	.word	0x20000000
 8008594:	431bde83 	.word	0x431bde83
 8008598:	40012300 	.word	0x40012300
 800859c:	08008a4d 	.word	0x08008a4d
 80085a0:	08008b07 	.word	0x08008b07
 80085a4:	08008b23 	.word	0x08008b23
 80085a8:	40012000 	.word	0x40012000
 80085ac:	40012100 	.word	0x40012100
 80085b0:	40012200 	.word	0x40012200

080085b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_ADC_ConfigChannel+0x1c>
 8008608:	2302      	movs	r3, #2
 800860a:	e113      	b.n	8008834 <HAL_ADC_ConfigChannel+0x244>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b09      	cmp	r3, #9
 800861a:	d925      	bls.n	8008668 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68d9      	ldr	r1, [r3, #12]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	461a      	mov	r2, r3
 800862a:	4613      	mov	r3, r2
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	4413      	add	r3, r2
 8008630:	3b1e      	subs	r3, #30
 8008632:	2207      	movs	r2, #7
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	43da      	mvns	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	400a      	ands	r2, r1
 8008640:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68d9      	ldr	r1, [r3, #12]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	4618      	mov	r0, r3
 8008654:	4603      	mov	r3, r0
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	4403      	add	r3, r0
 800865a:	3b1e      	subs	r3, #30
 800865c:	409a      	lsls	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	60da      	str	r2, [r3, #12]
 8008666:	e022      	b.n	80086ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6919      	ldr	r1, [r3, #16]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	b29b      	uxth	r3, r3
 8008674:	461a      	mov	r2, r3
 8008676:	4613      	mov	r3, r2
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	4413      	add	r3, r2
 800867c:	2207      	movs	r2, #7
 800867e:	fa02 f303 	lsl.w	r3, r2, r3
 8008682:	43da      	mvns	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	400a      	ands	r2, r1
 800868a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6919      	ldr	r1, [r3, #16]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	4618      	mov	r0, r3
 800869e:	4603      	mov	r3, r0
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	4403      	add	r3, r0
 80086a4:	409a      	lsls	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2b06      	cmp	r3, #6
 80086b4:	d824      	bhi.n	8008700 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	3b05      	subs	r3, #5
 80086c8:	221f      	movs	r2, #31
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	43da      	mvns	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	400a      	ands	r2, r1
 80086d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	4618      	mov	r0, r3
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	3b05      	subs	r3, #5
 80086f2:	fa00 f203 	lsl.w	r2, r0, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	635a      	str	r2, [r3, #52]	; 0x34
 80086fe:	e04c      	b.n	800879a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	2b0c      	cmp	r3, #12
 8008706:	d824      	bhi.n	8008752 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	3b23      	subs	r3, #35	; 0x23
 800871a:	221f      	movs	r2, #31
 800871c:	fa02 f303 	lsl.w	r3, r2, r3
 8008720:	43da      	mvns	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	400a      	ands	r2, r1
 8008728:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	b29b      	uxth	r3, r3
 8008736:	4618      	mov	r0, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	3b23      	subs	r3, #35	; 0x23
 8008744:	fa00 f203 	lsl.w	r2, r0, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	631a      	str	r2, [r3, #48]	; 0x30
 8008750:	e023      	b.n	800879a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	3b41      	subs	r3, #65	; 0x41
 8008764:	221f      	movs	r2, #31
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	43da      	mvns	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	400a      	ands	r2, r1
 8008772:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	4618      	mov	r0, r3
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	3b41      	subs	r3, #65	; 0x41
 800878e:	fa00 f203 	lsl.w	r2, r0, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800879a:	4b29      	ldr	r3, [pc, #164]	; (8008840 <HAL_ADC_ConfigChannel+0x250>)
 800879c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a28      	ldr	r2, [pc, #160]	; (8008844 <HAL_ADC_ConfigChannel+0x254>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d10f      	bne.n	80087c8 <HAL_ADC_ConfigChannel+0x1d8>
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b12      	cmp	r3, #18
 80087ae:	d10b      	bne.n	80087c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1d      	ldr	r2, [pc, #116]	; (8008844 <HAL_ADC_ConfigChannel+0x254>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d12b      	bne.n	800882a <HAL_ADC_ConfigChannel+0x23a>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1c      	ldr	r2, [pc, #112]	; (8008848 <HAL_ADC_ConfigChannel+0x258>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d003      	beq.n	80087e4 <HAL_ADC_ConfigChannel+0x1f4>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b11      	cmp	r3, #17
 80087e2:	d122      	bne.n	800882a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a11      	ldr	r2, [pc, #68]	; (8008848 <HAL_ADC_ConfigChannel+0x258>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d111      	bne.n	800882a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <HAL_ADC_ConfigChannel+0x25c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a11      	ldr	r2, [pc, #68]	; (8008850 <HAL_ADC_ConfigChannel+0x260>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	0c9a      	lsrs	r2, r3, #18
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800881c:	e002      	b.n	8008824 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	3b01      	subs	r3, #1
 8008822:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f9      	bne.n	800881e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	40012300 	.word	0x40012300
 8008844:	40012000 	.word	0x40012000
 8008848:	10000012 	.word	0x10000012
 800884c:	20000000 	.word	0x20000000
 8008850:	431bde83 	.word	0x431bde83

08008854 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800885c:	4b79      	ldr	r3, [pc, #484]	; (8008a44 <ADC_Init+0x1f0>)
 800885e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	431a      	orrs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6859      	ldr	r1, [r3, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	021a      	lsls	r2, r3, #8
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	430a      	orrs	r2, r1
 800889c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80088ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6859      	ldr	r1, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6899      	ldr	r1, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e6:	4a58      	ldr	r2, [pc, #352]	; (8008a48 <ADC_Init+0x1f4>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d022      	beq.n	8008932 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6899      	ldr	r1, [r3, #8]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800891c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6899      	ldr	r1, [r3, #8]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	609a      	str	r2, [r3, #8]
 8008930:	e00f      	b.n	8008952 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008950:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0202 	bic.w	r2, r2, #2
 8008960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6899      	ldr	r1, [r3, #8]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	7e1b      	ldrb	r3, [r3, #24]
 800896c:	005a      	lsls	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01b      	beq.n	80089b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800898e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800899e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6859      	ldr	r1, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	3b01      	subs	r3, #1
 80089ac:	035a      	lsls	r2, r3, #13
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
 80089b6:	e007      	b.n	80089c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80089d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	051a      	lsls	r2, r3, #20
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80089fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6899      	ldr	r1, [r3, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a0a:	025a      	lsls	r2, r3, #9
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6899      	ldr	r1, [r3, #8]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	029a      	lsls	r2, r3, #10
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	609a      	str	r2, [r3, #8]
}
 8008a38:	bf00      	nop
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	40012300 	.word	0x40012300
 8008a48:	0f000001 	.word	0x0f000001

08008a4c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d13c      	bne.n	8008ae0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d12b      	bne.n	8008ad8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d127      	bne.n	8008ad8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d006      	beq.n	8008aa4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d119      	bne.n	8008ad8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0220 	bic.w	r2, r2, #32
 8008ab2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d105      	bne.n	8008ad8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad0:	f043 0201 	orr.w	r2, r3, #1
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f7ff fd6b 	bl	80085b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008ade:	e00e      	b.n	8008afe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7ff fd75 	bl	80085dc <HAL_ADC_ErrorCallback>
}
 8008af2:	e004      	b.n	8008afe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7ff fd57 	bl	80085c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008b1a:	bf00      	nop
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2240      	movs	r2, #64	; 0x40
 8008b34:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3a:	f043 0204 	orr.w	r2, r3, #4
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff fd4a 	bl	80085dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b60:	4b0c      	ldr	r3, [pc, #48]	; (8008b94 <__NVIC_SetPriorityGrouping+0x44>)
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b82:	4a04      	ldr	r2, [pc, #16]	; (8008b94 <__NVIC_SetPriorityGrouping+0x44>)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	60d3      	str	r3, [r2, #12]
}
 8008b88:	bf00      	nop
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	e000ed00 	.word	0xe000ed00

08008b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b9c:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	0a1b      	lsrs	r3, r3, #8
 8008ba2:	f003 0307 	and.w	r3, r3, #7
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	e000ed00 	.word	0xe000ed00

08008bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	db0b      	blt.n	8008bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008bc6:	79fb      	ldrb	r3, [r7, #7]
 8008bc8:	f003 021f 	and.w	r2, r3, #31
 8008bcc:	4907      	ldr	r1, [pc, #28]	; (8008bec <__NVIC_EnableIRQ+0x38>)
 8008bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8008bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	e000e100 	.word	0xe000e100

08008bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	db0a      	blt.n	8008c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	490c      	ldr	r1, [pc, #48]	; (8008c3c <__NVIC_SetPriority+0x4c>)
 8008c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c0e:	0112      	lsls	r2, r2, #4
 8008c10:	b2d2      	uxtb	r2, r2
 8008c12:	440b      	add	r3, r1
 8008c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c18:	e00a      	b.n	8008c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	4908      	ldr	r1, [pc, #32]	; (8008c40 <__NVIC_SetPriority+0x50>)
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	f003 030f 	and.w	r3, r3, #15
 8008c26:	3b04      	subs	r3, #4
 8008c28:	0112      	lsls	r2, r2, #4
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	440b      	add	r3, r1
 8008c2e:	761a      	strb	r2, [r3, #24]
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	e000e100 	.word	0xe000e100
 8008c40:	e000ed00 	.word	0xe000ed00

08008c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b089      	sub	sp, #36	; 0x24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	f1c3 0307 	rsb	r3, r3, #7
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	bf28      	it	cs
 8008c62:	2304      	movcs	r3, #4
 8008c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	2b06      	cmp	r3, #6
 8008c6c:	d902      	bls.n	8008c74 <NVIC_EncodePriority+0x30>
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	3b03      	subs	r3, #3
 8008c72:	e000      	b.n	8008c76 <NVIC_EncodePriority+0x32>
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c78:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	43da      	mvns	r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	401a      	ands	r2, r3
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	fa01 f303 	lsl.w	r3, r1, r3
 8008c96:	43d9      	mvns	r1, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c9c:	4313      	orrs	r3, r2
         );
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3724      	adds	r7, #36	; 0x24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
	...

08008cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cbc:	d301      	bcc.n	8008cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e00f      	b.n	8008ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008cc2:	4a0a      	ldr	r2, [pc, #40]	; (8008cec <SysTick_Config+0x40>)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008cca:	210f      	movs	r1, #15
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd0:	f7ff ff8e 	bl	8008bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008cd4:	4b05      	ldr	r3, [pc, #20]	; (8008cec <SysTick_Config+0x40>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008cda:	4b04      	ldr	r3, [pc, #16]	; (8008cec <SysTick_Config+0x40>)
 8008cdc:	2207      	movs	r2, #7
 8008cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	e000e010 	.word	0xe000e010

08008cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7ff ff29 	bl	8008b50 <__NVIC_SetPriorityGrouping>
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b086      	sub	sp, #24
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
 8008d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008d18:	f7ff ff3e 	bl	8008b98 <__NVIC_GetPriorityGrouping>
 8008d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	6978      	ldr	r0, [r7, #20]
 8008d24:	f7ff ff8e 	bl	8008c44 <NVIC_EncodePriority>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff ff5d 	bl	8008bf0 <__NVIC_SetPriority>
}
 8008d36:	bf00      	nop
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	4603      	mov	r3, r0
 8008d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff ff31 	bl	8008bb4 <__NVIC_EnableIRQ>
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ffa2 	bl	8008cac <SysTick_Config>
 8008d68:	4603      	mov	r3, r0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008d80:	f7ff fab4 	bl	80082ec <HAL_GetTick>
 8008d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e099      	b.n	8008ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008db0:	e00f      	b.n	8008dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008db2:	f7ff fa9b 	bl	80082ec <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	2b05      	cmp	r3, #5
 8008dbe:	d908      	bls.n	8008dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2203      	movs	r2, #3
 8008dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e078      	b.n	8008ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1e8      	bne.n	8008db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	4b38      	ldr	r3, [pc, #224]	; (8008ecc <HAL_DMA_Init+0x158>)
 8008dec:	4013      	ands	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d107      	bne.n	8008e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	4313      	orrs	r3, r2
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f023 0307 	bic.w	r3, r3, #7
 8008e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	d117      	bne.n	8008e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00e      	beq.n	8008e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fa9d 	bl	80093b8 <DMA_CheckFifoParam>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2240      	movs	r2, #64	; 0x40
 8008e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008e92:	2301      	movs	r3, #1
 8008e94:	e016      	b.n	8008ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa54 	bl	800934c <DMA_CalcBaseAndBitshift>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eac:	223f      	movs	r2, #63	; 0x3f
 8008eae:	409a      	lsls	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3718      	adds	r7, #24
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	f010803f 	.word	0xf010803f

08008ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
 8008edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d101      	bne.n	8008ef6 <HAL_DMA_Start_IT+0x26>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e040      	b.n	8008f78 <HAL_DMA_Start_IT+0xa8>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d12f      	bne.n	8008f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 f9e6 	bl	80092f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f28:	223f      	movs	r2, #63	; 0x3f
 8008f2a:	409a      	lsls	r2, r3
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0216 	orr.w	r2, r2, #22
 8008f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d007      	beq.n	8008f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0208 	orr.w	r2, r2, #8
 8008f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	e005      	b.n	8008f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008f72:	2302      	movs	r3, #2
 8008f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d004      	beq.n	8008f9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2280      	movs	r2, #128	; 0x80
 8008f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e00c      	b.n	8008fb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2205      	movs	r2, #5
 8008fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 0201 	bic.w	r2, r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008fd0:	4b92      	ldr	r3, [pc, #584]	; (800921c <HAL_DMA_IRQHandler+0x258>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a92      	ldr	r2, [pc, #584]	; (8009220 <HAL_DMA_IRQHandler+0x25c>)
 8008fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fda:	0a9b      	lsrs	r3, r3, #10
 8008fdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fee:	2208      	movs	r2, #8
 8008ff0:	409a      	lsls	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d01a      	beq.n	8009030 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0304 	and.w	r3, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d013      	beq.n	8009030 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0204 	bic.w	r2, r2, #4
 8009016:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800901c:	2208      	movs	r2, #8
 800901e:	409a      	lsls	r2, r3
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009028:	f043 0201 	orr.w	r2, r3, #1
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009034:	2201      	movs	r2, #1
 8009036:	409a      	lsls	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4013      	ands	r3, r2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d012      	beq.n	8009066 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00b      	beq.n	8009066 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009052:	2201      	movs	r2, #1
 8009054:	409a      	lsls	r2, r3
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905e:	f043 0202 	orr.w	r2, r3, #2
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800906a:	2204      	movs	r2, #4
 800906c:	409a      	lsls	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4013      	ands	r3, r2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d012      	beq.n	800909c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009088:	2204      	movs	r2, #4
 800908a:	409a      	lsls	r2, r3
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009094:	f043 0204 	orr.w	r2, r3, #4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090a0:	2210      	movs	r2, #16
 80090a2:	409a      	lsls	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4013      	ands	r3, r2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d043      	beq.n	8009134 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d03c      	beq.n	8009134 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090be:	2210      	movs	r2, #16
 80090c0:	409a      	lsls	r2, r3
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d018      	beq.n	8009106 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d108      	bne.n	80090f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d024      	beq.n	8009134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	4798      	blx	r3
 80090f2:	e01f      	b.n	8009134 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01b      	beq.n	8009134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
 8009104:	e016      	b.n	8009134 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009110:	2b00      	cmp	r3, #0
 8009112:	d107      	bne.n	8009124 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0208 	bic.w	r2, r2, #8
 8009122:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009138:	2220      	movs	r2, #32
 800913a:	409a      	lsls	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4013      	ands	r3, r2
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 808e 	beq.w	8009262 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0310 	and.w	r3, r3, #16
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 8086 	beq.w	8009262 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800915a:	2220      	movs	r2, #32
 800915c:	409a      	lsls	r2, r3
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b05      	cmp	r3, #5
 800916c:	d136      	bne.n	80091dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0216 	bic.w	r2, r2, #22
 800917c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	695a      	ldr	r2, [r3, #20]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800918c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	2b00      	cmp	r3, #0
 8009194:	d103      	bne.n	800919e <HAL_DMA_IRQHandler+0x1da>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919a:	2b00      	cmp	r3, #0
 800919c:	d007      	beq.n	80091ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0208 	bic.w	r2, r2, #8
 80091ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b2:	223f      	movs	r2, #63	; 0x3f
 80091b4:	409a      	lsls	r2, r3
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d07d      	beq.n	80092ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	4798      	blx	r3
        }
        return;
 80091da:	e078      	b.n	80092ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d01c      	beq.n	8009224 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d030      	beq.n	8009262 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	4798      	blx	r3
 8009208:	e02b      	b.n	8009262 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920e:	2b00      	cmp	r3, #0
 8009210:	d027      	beq.n	8009262 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	4798      	blx	r3
 800921a:	e022      	b.n	8009262 <HAL_DMA_IRQHandler+0x29e>
 800921c:	20000000 	.word	0x20000000
 8009220:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10f      	bne.n	8009252 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0210 	bic.w	r2, r2, #16
 8009240:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009266:	2b00      	cmp	r3, #0
 8009268:	d032      	beq.n	80092d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d022      	beq.n	80092bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2205      	movs	r2, #5
 800927a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f022 0201 	bic.w	r2, r2, #1
 800928c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	3301      	adds	r3, #1
 8009292:	60bb      	str	r3, [r7, #8]
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	429a      	cmp	r2, r3
 8009298:	d307      	bcc.n	80092aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1f2      	bne.n	800928e <HAL_DMA_IRQHandler+0x2ca>
 80092a8:	e000      	b.n	80092ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80092aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d005      	beq.n	80092d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	4798      	blx	r3
 80092cc:	e000      	b.n	80092d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80092ce:	bf00      	nop
    }
  }
}
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop

080092d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800930c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	2b40      	cmp	r3, #64	; 0x40
 800931c:	d108      	bne.n	8009330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800932e:	e007      	b.n	8009340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	60da      	str	r2, [r3, #12]
}
 8009340:	bf00      	nop
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	3b10      	subs	r3, #16
 800935c:	4a14      	ldr	r2, [pc, #80]	; (80093b0 <DMA_CalcBaseAndBitshift+0x64>)
 800935e:	fba2 2303 	umull	r2, r3, r2, r3
 8009362:	091b      	lsrs	r3, r3, #4
 8009364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009366:	4a13      	ldr	r2, [pc, #76]	; (80093b4 <DMA_CalcBaseAndBitshift+0x68>)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4413      	add	r3, r2
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b03      	cmp	r3, #3
 8009378:	d909      	bls.n	800938e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	1d1a      	adds	r2, r3, #4
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	659a      	str	r2, [r3, #88]	; 0x58
 800938c:	e007      	b.n	800939e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009396:	f023 0303 	bic.w	r3, r3, #3
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	aaaaaaab 	.word	0xaaaaaaab
 80093b4:	08018740 	.word	0x08018740

080093b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d11f      	bne.n	8009412 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d855      	bhi.n	8009484 <DMA_CheckFifoParam+0xcc>
 80093d8:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <DMA_CheckFifoParam+0x28>)
 80093da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093de:	bf00      	nop
 80093e0:	080093f1 	.word	0x080093f1
 80093e4:	08009403 	.word	0x08009403
 80093e8:	080093f1 	.word	0x080093f1
 80093ec:	08009485 	.word	0x08009485
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d045      	beq.n	8009488 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009400:	e042      	b.n	8009488 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800940a:	d13f      	bne.n	800948c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009410:	e03c      	b.n	800948c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800941a:	d121      	bne.n	8009460 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2b03      	cmp	r3, #3
 8009420:	d836      	bhi.n	8009490 <DMA_CheckFifoParam+0xd8>
 8009422:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <DMA_CheckFifoParam+0x70>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	08009439 	.word	0x08009439
 800942c:	0800943f 	.word	0x0800943f
 8009430:	08009439 	.word	0x08009439
 8009434:	08009451 	.word	0x08009451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	73fb      	strb	r3, [r7, #15]
      break;
 800943c:	e02f      	b.n	800949e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d024      	beq.n	8009494 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800944e:	e021      	b.n	8009494 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009454:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009458:	d11e      	bne.n	8009498 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800945e:	e01b      	b.n	8009498 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d902      	bls.n	800946c <DMA_CheckFifoParam+0xb4>
 8009466:	2b03      	cmp	r3, #3
 8009468:	d003      	beq.n	8009472 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800946a:	e018      	b.n	800949e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	73fb      	strb	r3, [r7, #15]
      break;
 8009470:	e015      	b.n	800949e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00e      	beq.n	800949c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	73fb      	strb	r3, [r7, #15]
      break;
 8009482:	e00b      	b.n	800949c <DMA_CheckFifoParam+0xe4>
      break;
 8009484:	bf00      	nop
 8009486:	e00a      	b.n	800949e <DMA_CheckFifoParam+0xe6>
      break;
 8009488:	bf00      	nop
 800948a:	e008      	b.n	800949e <DMA_CheckFifoParam+0xe6>
      break;
 800948c:	bf00      	nop
 800948e:	e006      	b.n	800949e <DMA_CheckFifoParam+0xe6>
      break;
 8009490:	bf00      	nop
 8009492:	e004      	b.n	800949e <DMA_CheckFifoParam+0xe6>
      break;
 8009494:	bf00      	nop
 8009496:	e002      	b.n	800949e <DMA_CheckFifoParam+0xe6>
      break;   
 8009498:	bf00      	nop
 800949a:	e000      	b.n	800949e <DMA_CheckFifoParam+0xe6>
      break;
 800949c:	bf00      	nop
    }
  } 
  
  return status; 
 800949e:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b089      	sub	sp, #36	; 0x24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80094b6:	2300      	movs	r3, #0
 80094b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80094be:	2300      	movs	r3, #0
 80094c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094c2:	2300      	movs	r3, #0
 80094c4:	61fb      	str	r3, [r7, #28]
 80094c6:	e177      	b.n	80097b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80094c8:	2201      	movs	r2, #1
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	fa02 f303 	lsl.w	r3, r2, r3
 80094d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	4013      	ands	r3, r2
 80094da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	f040 8166 	bne.w	80097b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d00b      	beq.n	8009506 <HAL_GPIO_Init+0x5a>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d007      	beq.n	8009506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80094fa:	2b11      	cmp	r3, #17
 80094fc:	d003      	beq.n	8009506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	2b12      	cmp	r3, #18
 8009504:	d130      	bne.n	8009568 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	2203      	movs	r2, #3
 8009512:	fa02 f303 	lsl.w	r3, r2, r3
 8009516:	43db      	mvns	r3, r3
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	4013      	ands	r3, r2
 800951c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	69ba      	ldr	r2, [r7, #24]
 800952c:	4313      	orrs	r3, r2
 800952e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800953c:	2201      	movs	r2, #1
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	43db      	mvns	r3, r3
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	4013      	ands	r3, r2
 800954a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	091b      	lsrs	r3, r3, #4
 8009552:	f003 0201 	and.w	r2, r3, #1
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	fa02 f303 	lsl.w	r3, r2, r3
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	4313      	orrs	r3, r2
 8009560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	005b      	lsls	r3, r3, #1
 8009572:	2203      	movs	r2, #3
 8009574:	fa02 f303 	lsl.w	r3, r2, r3
 8009578:	43db      	mvns	r3, r3
 800957a:	69ba      	ldr	r2, [r7, #24]
 800957c:	4013      	ands	r3, r2
 800957e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	689a      	ldr	r2, [r3, #8]
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	fa02 f303 	lsl.w	r3, r2, r3
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	4313      	orrs	r3, r2
 8009590:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d003      	beq.n	80095a8 <HAL_GPIO_Init+0xfc>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	2b12      	cmp	r3, #18
 80095a6:	d123      	bne.n	80095f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	08da      	lsrs	r2, r3, #3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3208      	adds	r2, #8
 80095b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	220f      	movs	r2, #15
 80095c0:	fa02 f303 	lsl.w	r3, r2, r3
 80095c4:	43db      	mvns	r3, r3
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	4013      	ands	r3, r2
 80095ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	691a      	ldr	r2, [r3, #16]
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	f003 0307 	and.w	r3, r3, #7
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	fa02 f303 	lsl.w	r3, r2, r3
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	4313      	orrs	r3, r2
 80095e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	08da      	lsrs	r2, r3, #3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3208      	adds	r2, #8
 80095ea:	69b9      	ldr	r1, [r7, #24]
 80095ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	2203      	movs	r2, #3
 80095fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009600:	43db      	mvns	r3, r3
 8009602:	69ba      	ldr	r2, [r7, #24]
 8009604:	4013      	ands	r3, r2
 8009606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f003 0203 	and.w	r2, r3, #3
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	005b      	lsls	r3, r3, #1
 8009614:	fa02 f303 	lsl.w	r3, r2, r3
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	4313      	orrs	r3, r2
 800961c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	69ba      	ldr	r2, [r7, #24]
 8009622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80c0 	beq.w	80097b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	4b65      	ldr	r3, [pc, #404]	; (80097cc <HAL_GPIO_Init+0x320>)
 8009638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963a:	4a64      	ldr	r2, [pc, #400]	; (80097cc <HAL_GPIO_Init+0x320>)
 800963c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009640:	6453      	str	r3, [r2, #68]	; 0x44
 8009642:	4b62      	ldr	r3, [pc, #392]	; (80097cc <HAL_GPIO_Init+0x320>)
 8009644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800964e:	4a60      	ldr	r2, [pc, #384]	; (80097d0 <HAL_GPIO_Init+0x324>)
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	089b      	lsrs	r3, r3, #2
 8009654:	3302      	adds	r3, #2
 8009656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800965a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	220f      	movs	r2, #15
 8009666:	fa02 f303 	lsl.w	r3, r2, r3
 800966a:	43db      	mvns	r3, r3
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	4013      	ands	r3, r2
 8009670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a57      	ldr	r2, [pc, #348]	; (80097d4 <HAL_GPIO_Init+0x328>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d037      	beq.n	80096ea <HAL_GPIO_Init+0x23e>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a56      	ldr	r2, [pc, #344]	; (80097d8 <HAL_GPIO_Init+0x32c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d031      	beq.n	80096e6 <HAL_GPIO_Init+0x23a>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a55      	ldr	r2, [pc, #340]	; (80097dc <HAL_GPIO_Init+0x330>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d02b      	beq.n	80096e2 <HAL_GPIO_Init+0x236>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a54      	ldr	r2, [pc, #336]	; (80097e0 <HAL_GPIO_Init+0x334>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d025      	beq.n	80096de <HAL_GPIO_Init+0x232>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a53      	ldr	r2, [pc, #332]	; (80097e4 <HAL_GPIO_Init+0x338>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d01f      	beq.n	80096da <HAL_GPIO_Init+0x22e>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a52      	ldr	r2, [pc, #328]	; (80097e8 <HAL_GPIO_Init+0x33c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d019      	beq.n	80096d6 <HAL_GPIO_Init+0x22a>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a51      	ldr	r2, [pc, #324]	; (80097ec <HAL_GPIO_Init+0x340>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d013      	beq.n	80096d2 <HAL_GPIO_Init+0x226>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a50      	ldr	r2, [pc, #320]	; (80097f0 <HAL_GPIO_Init+0x344>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00d      	beq.n	80096ce <HAL_GPIO_Init+0x222>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a4f      	ldr	r2, [pc, #316]	; (80097f4 <HAL_GPIO_Init+0x348>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d007      	beq.n	80096ca <HAL_GPIO_Init+0x21e>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a4e      	ldr	r2, [pc, #312]	; (80097f8 <HAL_GPIO_Init+0x34c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d101      	bne.n	80096c6 <HAL_GPIO_Init+0x21a>
 80096c2:	2309      	movs	r3, #9
 80096c4:	e012      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096c6:	230a      	movs	r3, #10
 80096c8:	e010      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096ca:	2308      	movs	r3, #8
 80096cc:	e00e      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096ce:	2307      	movs	r3, #7
 80096d0:	e00c      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096d2:	2306      	movs	r3, #6
 80096d4:	e00a      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096d6:	2305      	movs	r3, #5
 80096d8:	e008      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096da:	2304      	movs	r3, #4
 80096dc:	e006      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096de:	2303      	movs	r3, #3
 80096e0:	e004      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e002      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e000      	b.n	80096ec <HAL_GPIO_Init+0x240>
 80096ea:	2300      	movs	r3, #0
 80096ec:	69fa      	ldr	r2, [r7, #28]
 80096ee:	f002 0203 	and.w	r2, r2, #3
 80096f2:	0092      	lsls	r2, r2, #2
 80096f4:	4093      	lsls	r3, r2
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096fc:	4934      	ldr	r1, [pc, #208]	; (80097d0 <HAL_GPIO_Init+0x324>)
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	089b      	lsrs	r3, r3, #2
 8009702:	3302      	adds	r3, #2
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800970a:	4b3c      	ldr	r3, [pc, #240]	; (80097fc <HAL_GPIO_Init+0x350>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	43db      	mvns	r3, r3
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	4013      	ands	r3, r2
 8009718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	4313      	orrs	r3, r2
 800972c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800972e:	4a33      	ldr	r2, [pc, #204]	; (80097fc <HAL_GPIO_Init+0x350>)
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009734:	4b31      	ldr	r3, [pc, #196]	; (80097fc <HAL_GPIO_Init+0x350>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	43db      	mvns	r3, r3
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	4013      	ands	r3, r2
 8009742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009750:	69ba      	ldr	r2, [r7, #24]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	4313      	orrs	r3, r2
 8009756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009758:	4a28      	ldr	r2, [pc, #160]	; (80097fc <HAL_GPIO_Init+0x350>)
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800975e:	4b27      	ldr	r3, [pc, #156]	; (80097fc <HAL_GPIO_Init+0x350>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	43db      	mvns	r3, r3
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	4013      	ands	r3, r2
 800976c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	4313      	orrs	r3, r2
 8009780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009782:	4a1e      	ldr	r2, [pc, #120]	; (80097fc <HAL_GPIO_Init+0x350>)
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009788:	4b1c      	ldr	r3, [pc, #112]	; (80097fc <HAL_GPIO_Init+0x350>)
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	43db      	mvns	r3, r3
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	4013      	ands	r3, r2
 8009796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d003      	beq.n	80097ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80097ac:	4a13      	ldr	r2, [pc, #76]	; (80097fc <HAL_GPIO_Init+0x350>)
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	3301      	adds	r3, #1
 80097b6:	61fb      	str	r3, [r7, #28]
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	2b0f      	cmp	r3, #15
 80097bc:	f67f ae84 	bls.w	80094c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80097c0:	bf00      	nop
 80097c2:	3724      	adds	r7, #36	; 0x24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	40023800 	.word	0x40023800
 80097d0:	40013800 	.word	0x40013800
 80097d4:	40020000 	.word	0x40020000
 80097d8:	40020400 	.word	0x40020400
 80097dc:	40020800 	.word	0x40020800
 80097e0:	40020c00 	.word	0x40020c00
 80097e4:	40021000 	.word	0x40021000
 80097e8:	40021400 	.word	0x40021400
 80097ec:	40021800 	.word	0x40021800
 80097f0:	40021c00 	.word	0x40021c00
 80097f4:	40022000 	.word	0x40022000
 80097f8:	40022400 	.word	0x40022400
 80097fc:	40013c00 	.word	0x40013c00

08009800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	691a      	ldr	r2, [r3, #16]
 8009810:	887b      	ldrh	r3, [r7, #2]
 8009812:	4013      	ands	r3, r2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
 800981c:	e001      	b.n	8009822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009822:	7bfb      	ldrb	r3, [r7, #15]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	807b      	strh	r3, [r7, #2]
 800983c:	4613      	mov	r3, r2
 800983e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009840:	787b      	ldrb	r3, [r7, #1]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009846:	887a      	ldrh	r2, [r7, #2]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800984c:	e003      	b.n	8009856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800984e:	887b      	ldrh	r3, [r7, #2]
 8009850:	041a      	lsls	r2, r3, #16
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	619a      	str	r2, [r3, #24]
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
	...

08009864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e11f      	b.n	8009ab6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d106      	bne.n	8009890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7fc fd24 	bl	80062d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2224      	movs	r2, #36	; 0x24
 8009894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 0201 	bic.w	r2, r2, #1
 80098a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80098c8:	f001 f96e 	bl	800aba8 <HAL_RCC_GetPCLK1Freq>
 80098cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	4a7b      	ldr	r2, [pc, #492]	; (8009ac0 <HAL_I2C_Init+0x25c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d807      	bhi.n	80098e8 <HAL_I2C_Init+0x84>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a7a      	ldr	r2, [pc, #488]	; (8009ac4 <HAL_I2C_Init+0x260>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	bf94      	ite	ls
 80098e0:	2301      	movls	r3, #1
 80098e2:	2300      	movhi	r3, #0
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	e006      	b.n	80098f6 <HAL_I2C_Init+0x92>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a77      	ldr	r2, [pc, #476]	; (8009ac8 <HAL_I2C_Init+0x264>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	bf94      	ite	ls
 80098f0:	2301      	movls	r3, #1
 80098f2:	2300      	movhi	r3, #0
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e0db      	b.n	8009ab6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4a72      	ldr	r2, [pc, #456]	; (8009acc <HAL_I2C_Init+0x268>)
 8009902:	fba2 2303 	umull	r2, r3, r2, r3
 8009906:	0c9b      	lsrs	r3, r3, #18
 8009908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	430a      	orrs	r2, r1
 800991c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	4a64      	ldr	r2, [pc, #400]	; (8009ac0 <HAL_I2C_Init+0x25c>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d802      	bhi.n	8009938 <HAL_I2C_Init+0xd4>
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	3301      	adds	r3, #1
 8009936:	e009      	b.n	800994c <HAL_I2C_Init+0xe8>
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800993e:	fb02 f303 	mul.w	r3, r2, r3
 8009942:	4a63      	ldr	r2, [pc, #396]	; (8009ad0 <HAL_I2C_Init+0x26c>)
 8009944:	fba2 2303 	umull	r2, r3, r2, r3
 8009948:	099b      	lsrs	r3, r3, #6
 800994a:	3301      	adds	r3, #1
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	430b      	orrs	r3, r1
 8009952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800995e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	4956      	ldr	r1, [pc, #344]	; (8009ac0 <HAL_I2C_Init+0x25c>)
 8009968:	428b      	cmp	r3, r1
 800996a:	d80d      	bhi.n	8009988 <HAL_I2C_Init+0x124>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	1e59      	subs	r1, r3, #1
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	fbb1 f3f3 	udiv	r3, r1, r3
 800997a:	3301      	adds	r3, #1
 800997c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009980:	2b04      	cmp	r3, #4
 8009982:	bf38      	it	cc
 8009984:	2304      	movcc	r3, #4
 8009986:	e04f      	b.n	8009a28 <HAL_I2C_Init+0x1c4>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d111      	bne.n	80099b4 <HAL_I2C_Init+0x150>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	1e58      	subs	r0, r3, #1
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6859      	ldr	r1, [r3, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	440b      	add	r3, r1
 800999e:	fbb0 f3f3 	udiv	r3, r0, r3
 80099a2:	3301      	adds	r3, #1
 80099a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bf0c      	ite	eq
 80099ac:	2301      	moveq	r3, #1
 80099ae:	2300      	movne	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	e012      	b.n	80099da <HAL_I2C_Init+0x176>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	1e58      	subs	r0, r3, #1
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6859      	ldr	r1, [r3, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	440b      	add	r3, r1
 80099c2:	0099      	lsls	r1, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80099ca:	3301      	adds	r3, #1
 80099cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bf0c      	ite	eq
 80099d4:	2301      	moveq	r3, #1
 80099d6:	2300      	movne	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <HAL_I2C_Init+0x17e>
 80099de:	2301      	movs	r3, #1
 80099e0:	e022      	b.n	8009a28 <HAL_I2C_Init+0x1c4>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10e      	bne.n	8009a08 <HAL_I2C_Init+0x1a4>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	1e58      	subs	r0, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6859      	ldr	r1, [r3, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	440b      	add	r3, r1
 80099f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80099fc:	3301      	adds	r3, #1
 80099fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a06:	e00f      	b.n	8009a28 <HAL_I2C_Init+0x1c4>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	1e58      	subs	r0, r3, #1
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6859      	ldr	r1, [r3, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	440b      	add	r3, r1
 8009a16:	0099      	lsls	r1, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a1e:	3301      	adds	r3, #1
 8009a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	6809      	ldr	r1, [r1, #0]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	69da      	ldr	r2, [r3, #28]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	431a      	orrs	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6911      	ldr	r1, [r2, #16]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68d2      	ldr	r2, [r2, #12]
 8009a62:	4311      	orrs	r1, r2
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6812      	ldr	r2, [r2, #0]
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	695a      	ldr	r2, [r3, #20]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f042 0201 	orr.w	r2, r2, #1
 8009a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	000186a0 	.word	0x000186a0
 8009ac4:	001e847f 	.word	0x001e847f
 8009ac8:	003d08ff 	.word	0x003d08ff
 8009acc:	431bde83 	.word	0x431bde83
 8009ad0:	10624dd3 	.word	0x10624dd3

08009ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af02      	add	r7, sp, #8
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	607a      	str	r2, [r7, #4]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	817b      	strh	r3, [r7, #10]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ae8:	f7fe fc00 	bl	80082ec <HAL_GetTick>
 8009aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	f040 80e0 	bne.w	8009cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	2319      	movs	r3, #25
 8009b02:	2201      	movs	r2, #1
 8009b04:	4970      	ldr	r1, [pc, #448]	; (8009cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 fc58 	bl	800a3bc <I2C_WaitOnFlagUntilTimeout>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009b12:	2302      	movs	r3, #2
 8009b14:	e0d3      	b.n	8009cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d101      	bne.n	8009b24 <HAL_I2C_Master_Transmit+0x50>
 8009b20:	2302      	movs	r3, #2
 8009b22:	e0cc      	b.n	8009cbe <HAL_I2C_Master_Transmit+0x1ea>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d007      	beq.n	8009b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f042 0201 	orr.w	r2, r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2221      	movs	r2, #33	; 0x21
 8009b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2210      	movs	r2, #16
 8009b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	893a      	ldrh	r2, [r7, #8]
 8009b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4a50      	ldr	r2, [pc, #320]	; (8009ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8009b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009b8c:	8979      	ldrh	r1, [r7, #10]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	6a3a      	ldr	r2, [r7, #32]
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 fac2 	bl	800a11c <I2C_MasterRequestWrite>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e08d      	b.n	8009cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	613b      	str	r3, [r7, #16]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	613b      	str	r3, [r7, #16]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	613b      	str	r3, [r7, #16]
 8009bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009bb8:	e066      	b.n	8009c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	6a39      	ldr	r1, [r7, #32]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 fcd2 	bl	800a568 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00d      	beq.n	8009be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bce:	2b04      	cmp	r3, #4
 8009bd0:	d107      	bne.n	8009be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e06b      	b.n	8009cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	781a      	ldrb	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	3b01      	subs	r3, #1
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d11b      	bne.n	8009c5c <HAL_I2C_Master_Transmit+0x188>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d017      	beq.n	8009c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	6a39      	ldr	r1, [r7, #32]
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 fcc2 	bl	800a5ea <I2C_WaitOnBTFFlagUntilTimeout>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00d      	beq.n	8009c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d107      	bne.n	8009c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e01a      	b.n	8009cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d194      	bne.n	8009bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e000      	b.n	8009cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009cbc:	2302      	movs	r3, #2
  }
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	00100002 	.word	0x00100002
 8009ccc:	ffff0000 	.word	0xffff0000

08009cd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08c      	sub	sp, #48	; 0x30
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	607a      	str	r2, [r7, #4]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	460b      	mov	r3, r1
 8009cde:	817b      	strh	r3, [r7, #10]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ce4:	f7fe fb02 	bl	80082ec <HAL_GetTick>
 8009ce8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b20      	cmp	r3, #32
 8009cf4:	f040 820b 	bne.w	800a10e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	2319      	movs	r3, #25
 8009cfe:	2201      	movs	r2, #1
 8009d00:	497c      	ldr	r1, [pc, #496]	; (8009ef4 <HAL_I2C_Master_Receive+0x224>)
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 fb5a 	bl	800a3bc <I2C_WaitOnFlagUntilTimeout>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009d0e:	2302      	movs	r3, #2
 8009d10:	e1fe      	b.n	800a110 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_I2C_Master_Receive+0x50>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e1f7      	b.n	800a110 <HAL_I2C_Master_Receive+0x440>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d007      	beq.n	8009d46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f042 0201 	orr.w	r2, r2, #1
 8009d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2222      	movs	r2, #34	; 0x22
 8009d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2210      	movs	r2, #16
 8009d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	893a      	ldrh	r2, [r7, #8]
 8009d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4a5c      	ldr	r2, [pc, #368]	; (8009ef8 <HAL_I2C_Master_Receive+0x228>)
 8009d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009d88:	8979      	ldrh	r1, [r7, #10]
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fa46 	bl	800a220 <I2C_MasterRequestRead>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e1b8      	b.n	800a110 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d113      	bne.n	8009dce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009da6:	2300      	movs	r3, #0
 8009da8:	623b      	str	r3, [r7, #32]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	623b      	str	r3, [r7, #32]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	623b      	str	r3, [r7, #32]
 8009dba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	e18c      	b.n	800a0e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d11b      	bne.n	8009e0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009de6:	2300      	movs	r3, #0
 8009de8:	61fb      	str	r3, [r7, #28]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	61fb      	str	r3, [r7, #28]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	61fb      	str	r3, [r7, #28]
 8009dfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	e16c      	b.n	800a0e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d11b      	bne.n	8009e4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e36:	2300      	movs	r3, #0
 8009e38:	61bb      	str	r3, [r7, #24]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	61bb      	str	r3, [r7, #24]
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	e14c      	b.n	800a0e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e5e:	2300      	movs	r3, #0
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	617b      	str	r3, [r7, #20]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009e74:	e138      	b.n	800a0e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	f200 80f1 	bhi.w	800a062 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d123      	bne.n	8009ed0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 fbed 	bl	800a66c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e139      	b.n	800a110 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	691a      	ldr	r2, [r3, #16]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	b2d2      	uxtb	r2, r2
 8009ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ece:	e10b      	b.n	800a0e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d14e      	bne.n	8009f76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	2200      	movs	r2, #0
 8009ee0:	4906      	ldr	r1, [pc, #24]	; (8009efc <HAL_I2C_Master_Receive+0x22c>)
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 fa6a 	bl	800a3bc <I2C_WaitOnFlagUntilTimeout>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d008      	beq.n	8009f00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e10e      	b.n	800a110 <HAL_I2C_Master_Receive+0x440>
 8009ef2:	bf00      	nop
 8009ef4:	00100002 	.word	0x00100002
 8009ef8:	ffff0000 	.word	0xffff0000
 8009efc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	691a      	ldr	r2, [r3, #16]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	691a      	ldr	r2, [r3, #16]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	b2d2      	uxtb	r2, r2
 8009f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f74:	e0b8      	b.n	800a0e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4966      	ldr	r1, [pc, #408]	; (800a118 <HAL_I2C_Master_Receive+0x448>)
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 fa1b 	bl	800a3bc <I2C_WaitOnFlagUntilTimeout>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e0bf      	b.n	800a110 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	691a      	ldr	r2, [r3, #16]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	2200      	movs	r2, #0
 8009fda:	494f      	ldr	r1, [pc, #316]	; (800a118 <HAL_I2C_Master_Receive+0x448>)
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 f9ed 	bl	800a3bc <I2C_WaitOnFlagUntilTimeout>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e091      	b.n	800a110 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	691a      	ldr	r2, [r3, #16]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	b2d2      	uxtb	r2, r2
 800a008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a018:	3b01      	subs	r3, #1
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a024:	b29b      	uxth	r3, r3
 800a026:	3b01      	subs	r3, #1
 800a028:	b29a      	uxth	r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	691a      	ldr	r2, [r3, #16]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	b2d2      	uxtb	r2, r2
 800a03a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a04a:	3b01      	subs	r3, #1
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a056:	b29b      	uxth	r3, r3
 800a058:	3b01      	subs	r3, #1
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a060:	e042      	b.n	800a0e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f000 fb00 	bl	800a66c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e04c      	b.n	800a110 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	691a      	ldr	r2, [r3, #16]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	b2d2      	uxtb	r2, r2
 800a082:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	1c5a      	adds	r2, r3, #1
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a092:	3b01      	subs	r3, #1
 800a094:	b29a      	uxth	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	f003 0304 	and.w	r3, r3, #4
 800a0b2:	2b04      	cmp	r3, #4
 800a0b4:	d118      	bne.n	800a0e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	b2d2      	uxtb	r2, r2
 800a0c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f47f aec2 	bne.w	8009e76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	e000      	b.n	800a110 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a10e:	2302      	movs	r3, #2
  }
}
 800a110:	4618      	mov	r0, r3
 800a112:	3728      	adds	r7, #40	; 0x28
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	00010004 	.word	0x00010004

0800a11c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af02      	add	r7, sp, #8
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	607a      	str	r2, [r7, #4]
 800a126:	603b      	str	r3, [r7, #0]
 800a128:	460b      	mov	r3, r1
 800a12a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2b08      	cmp	r3, #8
 800a136:	d006      	beq.n	800a146 <I2C_MasterRequestWrite+0x2a>
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d003      	beq.n	800a146 <I2C_MasterRequestWrite+0x2a>
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a144:	d108      	bne.n	800a158 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a154:	601a      	str	r2, [r3, #0]
 800a156:	e00b      	b.n	800a170 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15c:	2b12      	cmp	r3, #18
 800a15e:	d107      	bne.n	800a170 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a16e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 f91d 	bl	800a3bc <I2C_WaitOnFlagUntilTimeout>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00d      	beq.n	800a1a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a196:	d103      	bne.n	800a1a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a19e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e035      	b.n	800a210 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1ac:	d108      	bne.n	800a1c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1ae:	897b      	ldrh	r3, [r7, #10]
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1bc:	611a      	str	r2, [r3, #16]
 800a1be:	e01b      	b.n	800a1f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a1c0:	897b      	ldrh	r3, [r7, #10]
 800a1c2:	11db      	asrs	r3, r3, #7
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	f003 0306 	and.w	r3, r3, #6
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	f063 030f 	orn	r3, r3, #15
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	490e      	ldr	r1, [pc, #56]	; (800a218 <I2C_MasterRequestWrite+0xfc>)
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 f943 	bl	800a46a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e010      	b.n	800a210 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a1ee:	897b      	ldrh	r3, [r7, #10]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	4907      	ldr	r1, [pc, #28]	; (800a21c <I2C_MasterRequestWrite+0x100>)
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 f933 	bl	800a46a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e000      	b.n	800a210 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	00010008 	.word	0x00010008
 800a21c:	00010002 	.word	0x00010002

0800a220 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b088      	sub	sp, #32
 800a224:	af02      	add	r7, sp, #8
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	607a      	str	r2, [r7, #4]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	460b      	mov	r3, r1
 800a22e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a244:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	2b08      	cmp	r3, #8
 800a24a:	d006      	beq.n	800a25a <I2C_MasterRequestRead+0x3a>
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d003      	beq.n	800a25a <I2C_MasterRequestRead+0x3a>
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a258:	d108      	bne.n	800a26c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	e00b      	b.n	800a284 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a270:	2b11      	cmp	r3, #17
 800a272:	d107      	bne.n	800a284 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a282:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f000 f893 	bl	800a3bc <I2C_WaitOnFlagUntilTimeout>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00d      	beq.n	800a2b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2aa:	d103      	bne.n	800a2b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e079      	b.n	800a3ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2c0:	d108      	bne.n	800a2d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a2c2:	897b      	ldrh	r3, [r7, #10]
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	f043 0301 	orr.w	r3, r3, #1
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	611a      	str	r2, [r3, #16]
 800a2d2:	e05f      	b.n	800a394 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a2d4:	897b      	ldrh	r3, [r7, #10]
 800a2d6:	11db      	asrs	r3, r3, #7
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	f003 0306 	and.w	r3, r3, #6
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f063 030f 	orn	r3, r3, #15
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	4930      	ldr	r1, [pc, #192]	; (800a3b4 <I2C_MasterRequestRead+0x194>)
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f8b9 	bl	800a46a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e054      	b.n	800a3ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a302:	897b      	ldrh	r3, [r7, #10]
 800a304:	b2da      	uxtb	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	4929      	ldr	r1, [pc, #164]	; (800a3b8 <I2C_MasterRequestRead+0x198>)
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 f8a9 	bl	800a46a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e044      	b.n	800a3ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	613b      	str	r3, [r7, #16]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a346:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 f831 	bl	800a3bc <I2C_WaitOnFlagUntilTimeout>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00d      	beq.n	800a37c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a36e:	d103      	bne.n	800a378 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a376:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e017      	b.n	800a3ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a37c:	897b      	ldrh	r3, [r7, #10]
 800a37e:	11db      	asrs	r3, r3, #7
 800a380:	b2db      	uxtb	r3, r3
 800a382:	f003 0306 	and.w	r3, r3, #6
 800a386:	b2db      	uxtb	r3, r3
 800a388:	f063 030e 	orn	r3, r3, #14
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	4907      	ldr	r1, [pc, #28]	; (800a3b8 <I2C_MasterRequestRead+0x198>)
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 f865 	bl	800a46a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e000      	b.n	800a3ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	00010008 	.word	0x00010008
 800a3b8:	00010002 	.word	0x00010002

0800a3bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	603b      	str	r3, [r7, #0]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3cc:	e025      	b.n	800a41a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d4:	d021      	beq.n	800a41a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3d6:	f7fd ff89 	bl	80082ec <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d302      	bcc.n	800a3ec <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d116      	bne.n	800a41a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a406:	f043 0220 	orr.w	r2, r3, #32
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e023      	b.n	800a462 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	0c1b      	lsrs	r3, r3, #16
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b01      	cmp	r3, #1
 800a422:	d10d      	bne.n	800a440 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	43da      	mvns	r2, r3
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4013      	ands	r3, r2
 800a430:	b29b      	uxth	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	bf0c      	ite	eq
 800a436:	2301      	moveq	r3, #1
 800a438:	2300      	movne	r3, #0
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	461a      	mov	r2, r3
 800a43e:	e00c      	b.n	800a45a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	43da      	mvns	r2, r3
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4013      	ands	r3, r2
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	bf0c      	ite	eq
 800a452:	2301      	moveq	r3, #1
 800a454:	2300      	movne	r3, #0
 800a456:	b2db      	uxtb	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	79fb      	ldrb	r3, [r7, #7]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d0b6      	beq.n	800a3ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	60f8      	str	r0, [r7, #12]
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	607a      	str	r2, [r7, #4]
 800a476:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a478:	e051      	b.n	800a51e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a488:	d123      	bne.n	800a4d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a498:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4be:	f043 0204 	orr.w	r2, r3, #4
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e046      	b.n	800a560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d021      	beq.n	800a51e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4da:	f7fd ff07 	bl	80082ec <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d302      	bcc.n	800a4f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d116      	bne.n	800a51e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	f043 0220 	orr.w	r2, r3, #32
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e020      	b.n	800a560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	0c1b      	lsrs	r3, r3, #16
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b01      	cmp	r3, #1
 800a526:	d10c      	bne.n	800a542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	43da      	mvns	r2, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	4013      	ands	r3, r2
 800a534:	b29b      	uxth	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	bf14      	ite	ne
 800a53a:	2301      	movne	r3, #1
 800a53c:	2300      	moveq	r3, #0
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	e00b      	b.n	800a55a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	43da      	mvns	r2, r3
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	4013      	ands	r3, r2
 800a54e:	b29b      	uxth	r3, r3
 800a550:	2b00      	cmp	r3, #0
 800a552:	bf14      	ite	ne
 800a554:	2301      	movne	r3, #1
 800a556:	2300      	moveq	r3, #0
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d18d      	bne.n	800a47a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a574:	e02d      	b.n	800a5d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 f8ce 	bl	800a718 <I2C_IsAcknowledgeFailed>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e02d      	b.n	800a5e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58c:	d021      	beq.n	800a5d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a58e:	f7fd fead 	bl	80082ec <HAL_GetTick>
 800a592:	4602      	mov	r2, r0
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d302      	bcc.n	800a5a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d116      	bne.n	800a5d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5be:	f043 0220 	orr.w	r2, r3, #32
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e007      	b.n	800a5e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5dc:	2b80      	cmp	r3, #128	; 0x80
 800a5de:	d1ca      	bne.n	800a576 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5f6:	e02d      	b.n	800a654 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 f88d 	bl	800a718 <I2C_IsAcknowledgeFailed>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e02d      	b.n	800a664 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60e:	d021      	beq.n	800a654 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a610:	f7fd fe6c 	bl	80082ec <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d302      	bcc.n	800a626 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d116      	bne.n	800a654 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2220      	movs	r2, #32
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a640:	f043 0220 	orr.w	r2, r3, #32
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e007      	b.n	800a664 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	f003 0304 	and.w	r3, r3, #4
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d1ca      	bne.n	800a5f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a678:	e042      	b.n	800a700 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	f003 0310 	and.w	r3, r3, #16
 800a684:	2b10      	cmp	r3, #16
 800a686:	d119      	bne.n	800a6bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f06f 0210 	mvn.w	r2, #16
 800a690:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e029      	b.n	800a710 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6bc:	f7fd fe16 	bl	80082ec <HAL_GetTick>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d302      	bcc.n	800a6d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d116      	bne.n	800a700 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ec:	f043 0220 	orr.w	r2, r3, #32
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e007      	b.n	800a710 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70a:	2b40      	cmp	r3, #64	; 0x40
 800a70c:	d1b5      	bne.n	800a67a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a72a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a72e:	d11b      	bne.n	800a768 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a738:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2220      	movs	r2, #32
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a754:	f043 0204 	orr.w	r2, r3, #4
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e000      	b.n	800a76a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a782:	2300      	movs	r3, #0
 800a784:	603b      	str	r3, [r7, #0]
 800a786:	4b20      	ldr	r3, [pc, #128]	; (800a808 <HAL_PWREx_EnableOverDrive+0x90>)
 800a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78a:	4a1f      	ldr	r2, [pc, #124]	; (800a808 <HAL_PWREx_EnableOverDrive+0x90>)
 800a78c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a790:	6413      	str	r3, [r2, #64]	; 0x40
 800a792:	4b1d      	ldr	r3, [pc, #116]	; (800a808 <HAL_PWREx_EnableOverDrive+0x90>)
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a79e:	4b1b      	ldr	r3, [pc, #108]	; (800a80c <HAL_PWREx_EnableOverDrive+0x94>)
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a7a4:	f7fd fda2 	bl	80082ec <HAL_GetTick>
 800a7a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a7aa:	e009      	b.n	800a7c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a7ac:	f7fd fd9e 	bl	80082ec <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7ba:	d901      	bls.n	800a7c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e01f      	b.n	800a800 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a7c0:	4b13      	ldr	r3, [pc, #76]	; (800a810 <HAL_PWREx_EnableOverDrive+0x98>)
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7cc:	d1ee      	bne.n	800a7ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a7ce:	4b11      	ldr	r3, [pc, #68]	; (800a814 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a7d4:	f7fd fd8a 	bl	80082ec <HAL_GetTick>
 800a7d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a7da:	e009      	b.n	800a7f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a7dc:	f7fd fd86 	bl	80082ec <HAL_GetTick>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7ea:	d901      	bls.n	800a7f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e007      	b.n	800a800 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <HAL_PWREx_EnableOverDrive+0x98>)
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7fc:	d1ee      	bne.n	800a7dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	40023800 	.word	0x40023800
 800a80c:	420e0040 	.word	0x420e0040
 800a810:	40007000 	.word	0x40007000
 800a814:	420e0044 	.word	0x420e0044

0800a818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e0cc      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a82c:	4b68      	ldr	r3, [pc, #416]	; (800a9d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 030f 	and.w	r3, r3, #15
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	429a      	cmp	r2, r3
 800a838:	d90c      	bls.n	800a854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a83a:	4b65      	ldr	r3, [pc, #404]	; (800a9d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	b2d2      	uxtb	r2, r2
 800a840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a842:	4b63      	ldr	r3, [pc, #396]	; (800a9d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 030f 	and.w	r3, r3, #15
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d001      	beq.n	800a854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e0b8      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d020      	beq.n	800a8a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a86c:	4b59      	ldr	r3, [pc, #356]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	4a58      	ldr	r2, [pc, #352]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0308 	and.w	r3, r3, #8
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a884:	4b53      	ldr	r3, [pc, #332]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	4a52      	ldr	r2, [pc, #328]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a88a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a88e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a890:	4b50      	ldr	r3, [pc, #320]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	494d      	ldr	r1, [pc, #308]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d044      	beq.n	800a938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d107      	bne.n	800a8c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8b6:	4b47      	ldr	r3, [pc, #284]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d119      	bne.n	800a8f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e07f      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d003      	beq.n	800a8d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d107      	bne.n	800a8e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8d6:	4b3f      	ldr	r3, [pc, #252]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d109      	bne.n	800a8f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e06f      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8e6:	4b3b      	ldr	r3, [pc, #236]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e067      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a8f6:	4b37      	ldr	r3, [pc, #220]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	f023 0203 	bic.w	r2, r3, #3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	4934      	ldr	r1, [pc, #208]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a904:	4313      	orrs	r3, r2
 800a906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a908:	f7fd fcf0 	bl	80082ec <HAL_GetTick>
 800a90c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a90e:	e00a      	b.n	800a926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a910:	f7fd fcec 	bl	80082ec <HAL_GetTick>
 800a914:	4602      	mov	r2, r0
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a91e:	4293      	cmp	r3, r2
 800a920:	d901      	bls.n	800a926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e04f      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a926:	4b2b      	ldr	r3, [pc, #172]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f003 020c 	and.w	r2, r3, #12
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	429a      	cmp	r2, r3
 800a936:	d1eb      	bne.n	800a910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a938:	4b25      	ldr	r3, [pc, #148]	; (800a9d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 030f 	and.w	r3, r3, #15
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	429a      	cmp	r2, r3
 800a944:	d20c      	bcs.n	800a960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a946:	4b22      	ldr	r3, [pc, #136]	; (800a9d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a94e:	4b20      	ldr	r3, [pc, #128]	; (800a9d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 030f 	and.w	r3, r3, #15
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d001      	beq.n	800a960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e032      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d008      	beq.n	800a97e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a96c:	4b19      	ldr	r3, [pc, #100]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	4916      	ldr	r1, [pc, #88]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0308 	and.w	r3, r3, #8
 800a986:	2b00      	cmp	r3, #0
 800a988:	d009      	beq.n	800a99e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a98a:	4b12      	ldr	r3, [pc, #72]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	490e      	ldr	r1, [pc, #56]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a99a:	4313      	orrs	r3, r2
 800a99c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a99e:	f000 f821 	bl	800a9e4 <HAL_RCC_GetSysClockFreq>
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	091b      	lsrs	r3, r3, #4
 800a9aa:	f003 030f 	and.w	r3, r3, #15
 800a9ae:	4a0a      	ldr	r2, [pc, #40]	; (800a9d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a9b0:	5cd3      	ldrb	r3, [r2, r3]
 800a9b2:	fa21 f303 	lsr.w	r3, r1, r3
 800a9b6:	4a09      	ldr	r2, [pc, #36]	; (800a9dc <HAL_RCC_ClockConfig+0x1c4>)
 800a9b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fd fc50 	bl	8008264 <HAL_InitTick>

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	40023c00 	.word	0x40023c00
 800a9d4:	40023800 	.word	0x40023800
 800a9d8:	08018728 	.word	0x08018728
 800a9dc:	20000000 	.word	0x20000000
 800a9e0:	20000004 	.word	0x20000004

0800a9e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	607b      	str	r3, [r7, #4]
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60fb      	str	r3, [r7, #12]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a9fa:	4b63      	ldr	r3, [pc, #396]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f003 030c 	and.w	r3, r3, #12
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d007      	beq.n	800aa16 <HAL_RCC_GetSysClockFreq+0x32>
 800aa06:	2b08      	cmp	r3, #8
 800aa08:	d008      	beq.n	800aa1c <HAL_RCC_GetSysClockFreq+0x38>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f040 80b4 	bne.w	800ab78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aa10:	4b5e      	ldr	r3, [pc, #376]	; (800ab8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800aa12:	60bb      	str	r3, [r7, #8]
       break;
 800aa14:	e0b3      	b.n	800ab7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aa16:	4b5d      	ldr	r3, [pc, #372]	; (800ab8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800aa18:	60bb      	str	r3, [r7, #8]
      break;
 800aa1a:	e0b0      	b.n	800ab7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa1c:	4b5a      	ldr	r3, [pc, #360]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aa26:	4b58      	ldr	r3, [pc, #352]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d04a      	beq.n	800aac8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa32:	4b55      	ldr	r3, [pc, #340]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	099b      	lsrs	r3, r3, #6
 800aa38:	f04f 0400 	mov.w	r4, #0
 800aa3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800aa40:	f04f 0200 	mov.w	r2, #0
 800aa44:	ea03 0501 	and.w	r5, r3, r1
 800aa48:	ea04 0602 	and.w	r6, r4, r2
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	4632      	mov	r2, r6
 800aa50:	f04f 0300 	mov.w	r3, #0
 800aa54:	f04f 0400 	mov.w	r4, #0
 800aa58:	0154      	lsls	r4, r2, #5
 800aa5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800aa5e:	014b      	lsls	r3, r1, #5
 800aa60:	4619      	mov	r1, r3
 800aa62:	4622      	mov	r2, r4
 800aa64:	1b49      	subs	r1, r1, r5
 800aa66:	eb62 0206 	sbc.w	r2, r2, r6
 800aa6a:	f04f 0300 	mov.w	r3, #0
 800aa6e:	f04f 0400 	mov.w	r4, #0
 800aa72:	0194      	lsls	r4, r2, #6
 800aa74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800aa78:	018b      	lsls	r3, r1, #6
 800aa7a:	1a5b      	subs	r3, r3, r1
 800aa7c:	eb64 0402 	sbc.w	r4, r4, r2
 800aa80:	f04f 0100 	mov.w	r1, #0
 800aa84:	f04f 0200 	mov.w	r2, #0
 800aa88:	00e2      	lsls	r2, r4, #3
 800aa8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800aa8e:	00d9      	lsls	r1, r3, #3
 800aa90:	460b      	mov	r3, r1
 800aa92:	4614      	mov	r4, r2
 800aa94:	195b      	adds	r3, r3, r5
 800aa96:	eb44 0406 	adc.w	r4, r4, r6
 800aa9a:	f04f 0100 	mov.w	r1, #0
 800aa9e:	f04f 0200 	mov.w	r2, #0
 800aaa2:	02a2      	lsls	r2, r4, #10
 800aaa4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800aaa8:	0299      	lsls	r1, r3, #10
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4614      	mov	r4, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	4621      	mov	r1, r4
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f04f 0400 	mov.w	r4, #0
 800aab8:	461a      	mov	r2, r3
 800aaba:	4623      	mov	r3, r4
 800aabc:	f7f6 f8fc 	bl	8000cb8 <__aeabi_uldivmod>
 800aac0:	4603      	mov	r3, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	60fb      	str	r3, [r7, #12]
 800aac6:	e049      	b.n	800ab5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aac8:	4b2f      	ldr	r3, [pc, #188]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	099b      	lsrs	r3, r3, #6
 800aace:	f04f 0400 	mov.w	r4, #0
 800aad2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	ea03 0501 	and.w	r5, r3, r1
 800aade:	ea04 0602 	and.w	r6, r4, r2
 800aae2:	4629      	mov	r1, r5
 800aae4:	4632      	mov	r2, r6
 800aae6:	f04f 0300 	mov.w	r3, #0
 800aaea:	f04f 0400 	mov.w	r4, #0
 800aaee:	0154      	lsls	r4, r2, #5
 800aaf0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800aaf4:	014b      	lsls	r3, r1, #5
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	4622      	mov	r2, r4
 800aafa:	1b49      	subs	r1, r1, r5
 800aafc:	eb62 0206 	sbc.w	r2, r2, r6
 800ab00:	f04f 0300 	mov.w	r3, #0
 800ab04:	f04f 0400 	mov.w	r4, #0
 800ab08:	0194      	lsls	r4, r2, #6
 800ab0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ab0e:	018b      	lsls	r3, r1, #6
 800ab10:	1a5b      	subs	r3, r3, r1
 800ab12:	eb64 0402 	sbc.w	r4, r4, r2
 800ab16:	f04f 0100 	mov.w	r1, #0
 800ab1a:	f04f 0200 	mov.w	r2, #0
 800ab1e:	00e2      	lsls	r2, r4, #3
 800ab20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ab24:	00d9      	lsls	r1, r3, #3
 800ab26:	460b      	mov	r3, r1
 800ab28:	4614      	mov	r4, r2
 800ab2a:	195b      	adds	r3, r3, r5
 800ab2c:	eb44 0406 	adc.w	r4, r4, r6
 800ab30:	f04f 0100 	mov.w	r1, #0
 800ab34:	f04f 0200 	mov.w	r2, #0
 800ab38:	02a2      	lsls	r2, r4, #10
 800ab3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ab3e:	0299      	lsls	r1, r3, #10
 800ab40:	460b      	mov	r3, r1
 800ab42:	4614      	mov	r4, r2
 800ab44:	4618      	mov	r0, r3
 800ab46:	4621      	mov	r1, r4
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f04f 0400 	mov.w	r4, #0
 800ab4e:	461a      	mov	r2, r3
 800ab50:	4623      	mov	r3, r4
 800ab52:	f7f6 f8b1 	bl	8000cb8 <__aeabi_uldivmod>
 800ab56:	4603      	mov	r3, r0
 800ab58:	460c      	mov	r4, r1
 800ab5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	0c1b      	lsrs	r3, r3, #16
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	3301      	adds	r3, #1
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab74:	60bb      	str	r3, [r7, #8]
      break;
 800ab76:	e002      	b.n	800ab7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ab7a:	60bb      	str	r3, [r7, #8]
      break;
 800ab7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab88:	40023800 	.word	0x40023800
 800ab8c:	00f42400 	.word	0x00f42400

0800ab90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab94:	4b03      	ldr	r3, [pc, #12]	; (800aba4 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab96:	681b      	ldr	r3, [r3, #0]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20000000 	.word	0x20000000

0800aba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800abac:	f7ff fff0 	bl	800ab90 <HAL_RCC_GetHCLKFreq>
 800abb0:	4601      	mov	r1, r0
 800abb2:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	0a9b      	lsrs	r3, r3, #10
 800abb8:	f003 0307 	and.w	r3, r3, #7
 800abbc:	4a03      	ldr	r2, [pc, #12]	; (800abcc <HAL_RCC_GetPCLK1Freq+0x24>)
 800abbe:	5cd3      	ldrb	r3, [r2, r3]
 800abc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	40023800 	.word	0x40023800
 800abcc:	08018738 	.word	0x08018738

0800abd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800abd4:	f7ff ffdc 	bl	800ab90 <HAL_RCC_GetHCLKFreq>
 800abd8:	4601      	mov	r1, r0
 800abda:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	0b5b      	lsrs	r3, r3, #13
 800abe0:	f003 0307 	and.w	r3, r3, #7
 800abe4:	4a03      	ldr	r2, [pc, #12]	; (800abf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800abe6:	5cd3      	ldrb	r3, [r2, r3]
 800abe8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800abec:	4618      	mov	r0, r3
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	40023800 	.word	0x40023800
 800abf4:	08018738 	.word	0x08018738

0800abf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b088      	sub	sp, #32
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00a      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ac20:	4b66      	ldr	r3, [pc, #408]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ac22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac26:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac2e:	4963      	ldr	r1, [pc, #396]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00a      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800ac42:	4b5e      	ldr	r3, [pc, #376]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ac44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac48:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac50:	495a      	ldr	r1, [pc, #360]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10b      	bne.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d105      	bne.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d075      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ac7c:	4b50      	ldr	r3, [pc, #320]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ac82:	f7fd fb33 	bl	80082ec <HAL_GetTick>
 800ac86:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ac88:	e008      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ac8a:	f7fd fb2f 	bl	80082ec <HAL_GetTick>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d901      	bls.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e1dc      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ac9c:	4b47      	ldr	r3, [pc, #284]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1f0      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d009      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	019a      	lsls	r2, r3, #6
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	071b      	lsls	r3, r3, #28
 800acc0:	493e      	ldr	r1, [pc, #248]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800acc2:	4313      	orrs	r3, r2
 800acc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d01f      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800acd4:	4b39      	ldr	r3, [pc, #228]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800acd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acda:	0f1b      	lsrs	r3, r3, #28
 800acdc:	f003 0307 	and.w	r3, r3, #7
 800ace0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	019a      	lsls	r2, r3, #6
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	061b      	lsls	r3, r3, #24
 800acee:	431a      	orrs	r2, r3
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	071b      	lsls	r3, r3, #28
 800acf4:	4931      	ldr	r1, [pc, #196]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800acfc:	4b2f      	ldr	r3, [pc, #188]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800acfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad02:	f023 021f 	bic.w	r2, r3, #31
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	492b      	ldr	r1, [pc, #172]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00d      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	019a      	lsls	r2, r3, #6
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	061b      	lsls	r3, r3, #24
 800ad2c:	431a      	orrs	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	071b      	lsls	r3, r3, #28
 800ad34:	4921      	ldr	r1, [pc, #132]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ad3c:	4b20      	ldr	r3, [pc, #128]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800ad3e:	2201      	movs	r2, #1
 800ad40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ad42:	f7fd fad3 	bl	80082ec <HAL_GetTick>
 800ad46:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ad48:	e008      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ad4a:	f7fd facf 	bl	80082ec <HAL_GetTick>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d901      	bls.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e17c      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ad5c:	4b17      	ldr	r3, [pc, #92]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d0f0      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 0304 	and.w	r3, r3, #4
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d112      	bne.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10c      	bne.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 80ce 	beq.w	800af2a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ad92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad96:	f040 80c8 	bne.w	800af2a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ad9a:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ada0:	f7fd faa4 	bl	80082ec <HAL_GetTick>
 800ada4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ada6:	e00f      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ada8:	f7fd faa0 	bl	80082ec <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d908      	bls.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e14d      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800adba:	bf00      	nop
 800adbc:	40023800 	.word	0x40023800
 800adc0:	42470068 	.word	0x42470068
 800adc4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800adc8:	4ba5      	ldr	r3, [pc, #660]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800add0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800add4:	d0e8      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0304 	and.w	r3, r3, #4
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d02e      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ade2:	4b9f      	ldr	r3, [pc, #636]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ade4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade8:	0c1b      	lsrs	r3, r3, #16
 800adea:	f003 0303 	and.w	r3, r3, #3
 800adee:	3301      	adds	r3, #1
 800adf0:	005b      	lsls	r3, r3, #1
 800adf2:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800adf4:	4b9a      	ldr	r3, [pc, #616]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800adf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adfa:	0f1b      	lsrs	r3, r3, #28
 800adfc:	f003 0307 	and.w	r3, r3, #7
 800ae00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	019a      	lsls	r2, r3, #6
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	085b      	lsrs	r3, r3, #1
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	041b      	lsls	r3, r3, #16
 800ae10:	431a      	orrs	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	061b      	lsls	r3, r3, #24
 800ae18:	431a      	orrs	r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	071b      	lsls	r3, r3, #28
 800ae1e:	4990      	ldr	r1, [pc, #576]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae20:	4313      	orrs	r3, r2
 800ae22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ae26:	4b8e      	ldr	r3, [pc, #568]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae34:	3b01      	subs	r3, #1
 800ae36:	021b      	lsls	r3, r3, #8
 800ae38:	4989      	ldr	r1, [pc, #548]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0308 	and.w	r3, r3, #8
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d02c      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ae4c:	4b84      	ldr	r3, [pc, #528]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae52:	0c1b      	lsrs	r3, r3, #16
 800ae54:	f003 0303 	and.w	r3, r3, #3
 800ae58:	3301      	adds	r3, #1
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ae5e:	4b80      	ldr	r3, [pc, #512]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae64:	0e1b      	lsrs	r3, r3, #24
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	019a      	lsls	r2, r3, #6
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	085b      	lsrs	r3, r3, #1
 800ae76:	3b01      	subs	r3, #1
 800ae78:	041b      	lsls	r3, r3, #16
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	061b      	lsls	r3, r3, #24
 800ae80:	431a      	orrs	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	071b      	lsls	r3, r3, #28
 800ae88:	4975      	ldr	r1, [pc, #468]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ae90:	4b73      	ldr	r3, [pc, #460]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9e:	4970      	ldr	r1, [pc, #448]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d024      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800aeb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aeba:	d11f      	bne.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aebc:	4b68      	ldr	r3, [pc, #416]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec2:	0e1b      	lsrs	r3, r3, #24
 800aec4:	f003 030f 	and.w	r3, r3, #15
 800aec8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aeca:	4b65      	ldr	r3, [pc, #404]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed0:	0f1b      	lsrs	r3, r3, #28
 800aed2:	f003 0307 	and.w	r3, r3, #7
 800aed6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	019a      	lsls	r2, r3, #6
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	085b      	lsrs	r3, r3, #1
 800aee4:	3b01      	subs	r3, #1
 800aee6:	041b      	lsls	r3, r3, #16
 800aee8:	431a      	orrs	r2, r3
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	061b      	lsls	r3, r3, #24
 800aeee:	431a      	orrs	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	071b      	lsls	r3, r3, #28
 800aef4:	495a      	ldr	r1, [pc, #360]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800aefc:	4b59      	ldr	r3, [pc, #356]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800aefe:	2201      	movs	r2, #1
 800af00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800af02:	f7fd f9f3 	bl	80082ec <HAL_GetTick>
 800af06:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800af08:	e008      	b.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800af0a:	f7fd f9ef 	bl	80082ec <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	2b02      	cmp	r3, #2
 800af16:	d901      	bls.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e09c      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800af1c:	4b50      	ldr	r3, [pc, #320]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af28:	d1ef      	bne.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0320 	and.w	r3, r3, #32
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 8083 	beq.w	800b03e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800af38:	2300      	movs	r3, #0
 800af3a:	60bb      	str	r3, [r7, #8]
 800af3c:	4b48      	ldr	r3, [pc, #288]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af40:	4a47      	ldr	r2, [pc, #284]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af46:	6413      	str	r3, [r2, #64]	; 0x40
 800af48:	4b45      	ldr	r3, [pc, #276]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af50:	60bb      	str	r3, [r7, #8]
 800af52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800af54:	4b44      	ldr	r3, [pc, #272]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a43      	ldr	r2, [pc, #268]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800af5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af5e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af60:	f7fd f9c4 	bl	80082ec <HAL_GetTick>
 800af64:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800af66:	e008      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800af68:	f7fd f9c0 	bl	80082ec <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d901      	bls.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e06d      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800af7a:	4b3b      	ldr	r3, [pc, #236]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0f0      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800af86:	4b36      	ldr	r3, [pc, #216]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af8e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d02f      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d028      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afa4:	4b2e      	ldr	r3, [pc, #184]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800afa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afac:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800afae:	4b2f      	ldr	r3, [pc, #188]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800afb0:	2201      	movs	r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800afb4:	4b2d      	ldr	r3, [pc, #180]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800afba:	4a29      	ldr	r2, [pc, #164]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800afc0:	4b27      	ldr	r3, [pc, #156]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800afc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d114      	bne.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800afcc:	f7fd f98e 	bl	80082ec <HAL_GetTick>
 800afd0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd2:	e00a      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afd4:	f7fd f98a 	bl	80082ec <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d901      	bls.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e035      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afea:	4b1d      	ldr	r3, [pc, #116]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800afec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afee:	f003 0302 	and.w	r3, r3, #2
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0ee      	beq.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800affe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b002:	d10d      	bne.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b004:	4b16      	ldr	r3, [pc, #88]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b010:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b018:	4911      	ldr	r1, [pc, #68]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	608b      	str	r3, [r1, #8]
 800b01e:	e005      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800b020:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	4a0e      	ldr	r2, [pc, #56]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b026:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b02a:	6093      	str	r3, [r2, #8]
 800b02c:	4b0c      	ldr	r3, [pc, #48]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b02e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b038:	4909      	ldr	r1, [pc, #36]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0310 	and.w	r3, r3, #16
 800b046:	2b00      	cmp	r3, #0
 800b048:	d004      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b050:	4b07      	ldr	r3, [pc, #28]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800b052:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3720      	adds	r7, #32
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	40023800 	.word	0x40023800
 800b064:	42470070 	.word	0x42470070
 800b068:	40007000 	.word	0x40007000
 800b06c:	42470e40 	.word	0x42470e40
 800b070:	424711e0 	.word	0x424711e0

0800b074 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b07c:	2300      	movs	r3, #0
 800b07e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0301 	and.w	r3, r3, #1
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d075      	beq.n	800b178 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b08c:	4ba2      	ldr	r3, [pc, #648]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f003 030c 	and.w	r3, r3, #12
 800b094:	2b04      	cmp	r3, #4
 800b096:	d00c      	beq.n	800b0b2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b098:	4b9f      	ldr	r3, [pc, #636]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b0a0:	2b08      	cmp	r3, #8
 800b0a2:	d112      	bne.n	800b0ca <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b0a4:	4b9c      	ldr	r3, [pc, #624]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0b0:	d10b      	bne.n	800b0ca <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0b2:	4b99      	ldr	r3, [pc, #612]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d05b      	beq.n	800b176 <HAL_RCC_OscConfig+0x102>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d157      	bne.n	800b176 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e20b      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0d2:	d106      	bne.n	800b0e2 <HAL_RCC_OscConfig+0x6e>
 800b0d4:	4b90      	ldr	r3, [pc, #576]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a8f      	ldr	r2, [pc, #572]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b0da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	e01d      	b.n	800b11e <HAL_RCC_OscConfig+0xaa>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0ea:	d10c      	bne.n	800b106 <HAL_RCC_OscConfig+0x92>
 800b0ec:	4b8a      	ldr	r3, [pc, #552]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a89      	ldr	r2, [pc, #548]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b0f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	4b87      	ldr	r3, [pc, #540]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a86      	ldr	r2, [pc, #536]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b0fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	e00b      	b.n	800b11e <HAL_RCC_OscConfig+0xaa>
 800b106:	4b84      	ldr	r3, [pc, #528]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a83      	ldr	r2, [pc, #524]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b10c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	4b81      	ldr	r3, [pc, #516]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a80      	ldr	r2, [pc, #512]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b11c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d013      	beq.n	800b14e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b126:	f7fd f8e1 	bl	80082ec <HAL_GetTick>
 800b12a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b12c:	e008      	b.n	800b140 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b12e:	f7fd f8dd 	bl	80082ec <HAL_GetTick>
 800b132:	4602      	mov	r2, r0
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	2b64      	cmp	r3, #100	; 0x64
 800b13a:	d901      	bls.n	800b140 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e1d0      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b140:	4b75      	ldr	r3, [pc, #468]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0f0      	beq.n	800b12e <HAL_RCC_OscConfig+0xba>
 800b14c:	e014      	b.n	800b178 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b14e:	f7fd f8cd 	bl	80082ec <HAL_GetTick>
 800b152:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b154:	e008      	b.n	800b168 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b156:	f7fd f8c9 	bl	80082ec <HAL_GetTick>
 800b15a:	4602      	mov	r2, r0
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	2b64      	cmp	r3, #100	; 0x64
 800b162:	d901      	bls.n	800b168 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800b164:	2303      	movs	r3, #3
 800b166:	e1bc      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b168:	4b6b      	ldr	r3, [pc, #428]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1f0      	bne.n	800b156 <HAL_RCC_OscConfig+0xe2>
 800b174:	e000      	b.n	800b178 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b176:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0302 	and.w	r3, r3, #2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d063      	beq.n	800b24c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b184:	4b64      	ldr	r3, [pc, #400]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f003 030c 	and.w	r3, r3, #12
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00b      	beq.n	800b1a8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b190:	4b61      	ldr	r3, [pc, #388]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b198:	2b08      	cmp	r3, #8
 800b19a:	d11c      	bne.n	800b1d6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b19c:	4b5e      	ldr	r3, [pc, #376]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d116      	bne.n	800b1d6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b1a8:	4b5b      	ldr	r3, [pc, #364]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0302 	and.w	r3, r3, #2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d005      	beq.n	800b1c0 <HAL_RCC_OscConfig+0x14c>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d001      	beq.n	800b1c0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e190      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1c0:	4b55      	ldr	r3, [pc, #340]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	00db      	lsls	r3, r3, #3
 800b1ce:	4952      	ldr	r1, [pc, #328]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b1d4:	e03a      	b.n	800b24c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d020      	beq.n	800b220 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b1de:	4b4f      	ldr	r3, [pc, #316]	; (800b31c <HAL_RCC_OscConfig+0x2a8>)
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1e4:	f7fd f882 	bl	80082ec <HAL_GetTick>
 800b1e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1ea:	e008      	b.n	800b1fe <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b1ec:	f7fd f87e 	bl	80082ec <HAL_GetTick>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d901      	bls.n	800b1fe <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e171      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1fe:	4b46      	ldr	r3, [pc, #280]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f003 0302 	and.w	r3, r3, #2
 800b206:	2b00      	cmp	r3, #0
 800b208:	d0f0      	beq.n	800b1ec <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b20a:	4b43      	ldr	r3, [pc, #268]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	00db      	lsls	r3, r3, #3
 800b218:	493f      	ldr	r1, [pc, #252]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b21a:	4313      	orrs	r3, r2
 800b21c:	600b      	str	r3, [r1, #0]
 800b21e:	e015      	b.n	800b24c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b220:	4b3e      	ldr	r3, [pc, #248]	; (800b31c <HAL_RCC_OscConfig+0x2a8>)
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b226:	f7fd f861 	bl	80082ec <HAL_GetTick>
 800b22a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b22c:	e008      	b.n	800b240 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b22e:	f7fd f85d 	bl	80082ec <HAL_GetTick>
 800b232:	4602      	mov	r2, r0
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d901      	bls.n	800b240 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e150      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b240:	4b35      	ldr	r3, [pc, #212]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0302 	and.w	r3, r3, #2
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1f0      	bne.n	800b22e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0308 	and.w	r3, r3, #8
 800b254:	2b00      	cmp	r3, #0
 800b256:	d030      	beq.n	800b2ba <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	695b      	ldr	r3, [r3, #20]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d016      	beq.n	800b28e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b260:	4b2f      	ldr	r3, [pc, #188]	; (800b320 <HAL_RCC_OscConfig+0x2ac>)
 800b262:	2201      	movs	r2, #1
 800b264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b266:	f7fd f841 	bl	80082ec <HAL_GetTick>
 800b26a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b26c:	e008      	b.n	800b280 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b26e:	f7fd f83d 	bl	80082ec <HAL_GetTick>
 800b272:	4602      	mov	r2, r0
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	1ad3      	subs	r3, r2, r3
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d901      	bls.n	800b280 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800b27c:	2303      	movs	r3, #3
 800b27e:	e130      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b280:	4b25      	ldr	r3, [pc, #148]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d0f0      	beq.n	800b26e <HAL_RCC_OscConfig+0x1fa>
 800b28c:	e015      	b.n	800b2ba <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b28e:	4b24      	ldr	r3, [pc, #144]	; (800b320 <HAL_RCC_OscConfig+0x2ac>)
 800b290:	2200      	movs	r2, #0
 800b292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b294:	f7fd f82a 	bl	80082ec <HAL_GetTick>
 800b298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b29a:	e008      	b.n	800b2ae <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b29c:	f7fd f826 	bl	80082ec <HAL_GetTick>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d901      	bls.n	800b2ae <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e119      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b2ae:	4b1a      	ldr	r3, [pc, #104]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b2b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1f0      	bne.n	800b29c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 0304 	and.w	r3, r3, #4
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f000 809f 	beq.w	800b406 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b2cc:	4b12      	ldr	r3, [pc, #72]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10f      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	4b0e      	ldr	r3, [pc, #56]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e0:	4a0d      	ldr	r2, [pc, #52]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b2e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2e6:	6413      	str	r3, [r2, #64]	; 0x40
 800b2e8:	4b0b      	ldr	r3, [pc, #44]	; (800b318 <HAL_RCC_OscConfig+0x2a4>)
 800b2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b2f8:	4b0a      	ldr	r3, [pc, #40]	; (800b324 <HAL_RCC_OscConfig+0x2b0>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b300:	2b00      	cmp	r3, #0
 800b302:	d120      	bne.n	800b346 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b304:	4b07      	ldr	r3, [pc, #28]	; (800b324 <HAL_RCC_OscConfig+0x2b0>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a06      	ldr	r2, [pc, #24]	; (800b324 <HAL_RCC_OscConfig+0x2b0>)
 800b30a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b30e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b310:	f7fc ffec 	bl	80082ec <HAL_GetTick>
 800b314:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b316:	e010      	b.n	800b33a <HAL_RCC_OscConfig+0x2c6>
 800b318:	40023800 	.word	0x40023800
 800b31c:	42470000 	.word	0x42470000
 800b320:	42470e80 	.word	0x42470e80
 800b324:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b328:	f7fc ffe0 	bl	80082ec <HAL_GetTick>
 800b32c:	4602      	mov	r2, r0
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	2b02      	cmp	r3, #2
 800b334:	d901      	bls.n	800b33a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	e0d3      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b33a:	4b6c      	ldr	r3, [pc, #432]	; (800b4ec <HAL_RCC_OscConfig+0x478>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0f0      	beq.n	800b328 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d106      	bne.n	800b35c <HAL_RCC_OscConfig+0x2e8>
 800b34e:	4b68      	ldr	r3, [pc, #416]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b352:	4a67      	ldr	r2, [pc, #412]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b354:	f043 0301 	orr.w	r3, r3, #1
 800b358:	6713      	str	r3, [r2, #112]	; 0x70
 800b35a:	e01c      	b.n	800b396 <HAL_RCC_OscConfig+0x322>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	2b05      	cmp	r3, #5
 800b362:	d10c      	bne.n	800b37e <HAL_RCC_OscConfig+0x30a>
 800b364:	4b62      	ldr	r3, [pc, #392]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b368:	4a61      	ldr	r2, [pc, #388]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b36a:	f043 0304 	orr.w	r3, r3, #4
 800b36e:	6713      	str	r3, [r2, #112]	; 0x70
 800b370:	4b5f      	ldr	r3, [pc, #380]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b374:	4a5e      	ldr	r2, [pc, #376]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b376:	f043 0301 	orr.w	r3, r3, #1
 800b37a:	6713      	str	r3, [r2, #112]	; 0x70
 800b37c:	e00b      	b.n	800b396 <HAL_RCC_OscConfig+0x322>
 800b37e:	4b5c      	ldr	r3, [pc, #368]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b382:	4a5b      	ldr	r2, [pc, #364]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b384:	f023 0301 	bic.w	r3, r3, #1
 800b388:	6713      	str	r3, [r2, #112]	; 0x70
 800b38a:	4b59      	ldr	r3, [pc, #356]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b38e:	4a58      	ldr	r2, [pc, #352]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b390:	f023 0304 	bic.w	r3, r3, #4
 800b394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d015      	beq.n	800b3ca <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b39e:	f7fc ffa5 	bl	80082ec <HAL_GetTick>
 800b3a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b3a4:	e00a      	b.n	800b3bc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b3a6:	f7fc ffa1 	bl	80082ec <HAL_GetTick>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d901      	bls.n	800b3bc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	e092      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b3bc:	4b4c      	ldr	r3, [pc, #304]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3c0:	f003 0302 	and.w	r3, r3, #2
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d0ee      	beq.n	800b3a6 <HAL_RCC_OscConfig+0x332>
 800b3c8:	e014      	b.n	800b3f4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3ca:	f7fc ff8f 	bl	80082ec <HAL_GetTick>
 800b3ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b3d0:	e00a      	b.n	800b3e8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b3d2:	f7fc ff8b 	bl	80082ec <HAL_GetTick>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d901      	bls.n	800b3e8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e07c      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b3e8:	4b41      	ldr	r3, [pc, #260]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b3ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ec:	f003 0302 	and.w	r3, r3, #2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1ee      	bne.n	800b3d2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d105      	bne.n	800b406 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3fa:	4b3d      	ldr	r3, [pc, #244]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fe:	4a3c      	ldr	r2, [pc, #240]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b404:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d068      	beq.n	800b4e0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b40e:	4b38      	ldr	r3, [pc, #224]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f003 030c 	and.w	r3, r3, #12
 800b416:	2b08      	cmp	r3, #8
 800b418:	d060      	beq.n	800b4dc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d145      	bne.n	800b4ae <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b422:	4b34      	ldr	r3, [pc, #208]	; (800b4f4 <HAL_RCC_OscConfig+0x480>)
 800b424:	2200      	movs	r2, #0
 800b426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b428:	f7fc ff60 	bl	80082ec <HAL_GetTick>
 800b42c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b42e:	e008      	b.n	800b442 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b430:	f7fc ff5c 	bl	80082ec <HAL_GetTick>
 800b434:	4602      	mov	r2, r0
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d901      	bls.n	800b442 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e04f      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b442:	4b2b      	ldr	r3, [pc, #172]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1f0      	bne.n	800b430 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	69da      	ldr	r2, [r3, #28]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	431a      	orrs	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45c:	019b      	lsls	r3, r3, #6
 800b45e:	431a      	orrs	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b464:	085b      	lsrs	r3, r3, #1
 800b466:	3b01      	subs	r3, #1
 800b468:	041b      	lsls	r3, r3, #16
 800b46a:	431a      	orrs	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	061b      	lsls	r3, r3, #24
 800b472:	431a      	orrs	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b478:	071b      	lsls	r3, r3, #28
 800b47a:	491d      	ldr	r1, [pc, #116]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b47c:	4313      	orrs	r3, r2
 800b47e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b480:	4b1c      	ldr	r3, [pc, #112]	; (800b4f4 <HAL_RCC_OscConfig+0x480>)
 800b482:	2201      	movs	r2, #1
 800b484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b486:	f7fc ff31 	bl	80082ec <HAL_GetTick>
 800b48a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b48c:	e008      	b.n	800b4a0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b48e:	f7fc ff2d 	bl	80082ec <HAL_GetTick>
 800b492:	4602      	mov	r2, r0
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d901      	bls.n	800b4a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e020      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4a0:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d0f0      	beq.n	800b48e <HAL_RCC_OscConfig+0x41a>
 800b4ac:	e018      	b.n	800b4e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4ae:	4b11      	ldr	r3, [pc, #68]	; (800b4f4 <HAL_RCC_OscConfig+0x480>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4b4:	f7fc ff1a 	bl	80082ec <HAL_GetTick>
 800b4b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4ba:	e008      	b.n	800b4ce <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b4bc:	f7fc ff16 	bl	80082ec <HAL_GetTick>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d901      	bls.n	800b4ce <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	e009      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4ce:	4b08      	ldr	r3, [pc, #32]	; (800b4f0 <HAL_RCC_OscConfig+0x47c>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1f0      	bne.n	800b4bc <HAL_RCC_OscConfig+0x448>
 800b4da:	e001      	b.n	800b4e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e000      	b.n	800b4e2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	40007000 	.word	0x40007000
 800b4f0:	40023800 	.word	0x40023800
 800b4f4:	42470060 	.word	0x42470060

0800b4f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e022      	b.n	800b550 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d105      	bne.n	800b522 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7fa ff57 	bl	80063d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2203      	movs	r2, #3
 800b526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f814 	bl	800b558 <HAL_SD_InitCard>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e00a      	b.n	800b550 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b558:	b5b0      	push	{r4, r5, r7, lr}
 800b55a:	b08e      	sub	sp, #56	; 0x38
 800b55c:	af04      	add	r7, sp, #16
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b560:	2300      	movs	r3, #0
 800b562:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b564:	2300      	movs	r3, #0
 800b566:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b568:	2300      	movs	r3, #0
 800b56a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b56c:	2300      	movs	r3, #0
 800b56e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b570:	2300      	movs	r3, #0
 800b572:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b574:	2376      	movs	r3, #118	; 0x76
 800b576:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681d      	ldr	r5, [r3, #0]
 800b57c:	466c      	mov	r4, sp
 800b57e:	f107 0314 	add.w	r3, r7, #20
 800b582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b58a:	f107 0308 	add.w	r3, r7, #8
 800b58e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b590:	4628      	mov	r0, r5
 800b592:	f003 fa87 	bl	800eaa4 <SDIO_Init>
 800b596:	4603      	mov	r3, r0
 800b598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e031      	b.n	800b60c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b5a8:	4b1a      	ldr	r3, [pc, #104]	; (800b614 <HAL_SD_InitCard+0xbc>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f003 fabf 	bl	800eb36 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b5b8:	4b16      	ldr	r3, [pc, #88]	; (800b614 <HAL_SD_InitCard+0xbc>)
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 ffc6 	bl	800c550 <SD_PowerON>
 800b5c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00b      	beq.n	800b5e4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	431a      	orrs	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e013      	b.n	800b60c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fee5 	bl	800c3b4 <SD_InitCard>
 800b5ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5ec:	6a3b      	ldr	r3, [r7, #32]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00b      	beq.n	800b60a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e000      	b.n	800b60c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3728      	adds	r7, #40	; 0x28
 800b610:	46bd      	mov	sp, r7
 800b612:	bdb0      	pop	{r4, r5, r7, pc}
 800b614:	422580a0 	.word	0x422580a0

0800b618 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08c      	sub	sp, #48	; 0x30
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d107      	bne.n	800b640 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e0c7      	b.n	800b7d0 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b646:	b2db      	uxtb	r3, r3
 800b648:	2b01      	cmp	r3, #1
 800b64a:	f040 80c0 	bne.w	800b7ce <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	441a      	add	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b65e:	429a      	cmp	r2, r3
 800b660:	d907      	bls.n	800b672 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b666:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e0ae      	b.n	800b7d0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2203      	movs	r2, #3
 800b676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2200      	movs	r2, #0
 800b680:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b690:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b696:	4a50      	ldr	r2, [pc, #320]	; (800b7d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b698:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69e:	4a4f      	ldr	r2, [pc, #316]	; (800b7dc <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800b6a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3380      	adds	r3, #128	; 0x80
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	025b      	lsls	r3, r3, #9
 800b6bc:	089b      	lsrs	r3, r3, #2
 800b6be:	f7fd fc07 	bl	8008ed0 <HAL_DMA_Start_IT>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d017      	beq.n	800b6f8 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b6d6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a40      	ldr	r2, [pc, #256]	; (800b7e0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b6de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e06b      	b.n	800b7d0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b6f8:	4b3a      	ldr	r3, [pc, #232]	; (800b7e4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b702:	2b01      	cmp	r3, #1
 800b704:	d002      	beq.n	800b70c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800b706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b708:	025b      	lsls	r3, r3, #9
 800b70a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b714:	4618      	mov	r0, r3
 800b716:	f003 faa1 	bl	800ec5c <SDMMC_CmdBlockLength>
 800b71a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800b71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00f      	beq.n	800b742 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a2e      	ldr	r2, [pc, #184]	; (800b7e0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b728:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	431a      	orrs	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e046      	b.n	800b7d0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b742:	f04f 33ff 	mov.w	r3, #4294967295
 800b746:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	025b      	lsls	r3, r3, #9
 800b74c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b74e:	2390      	movs	r3, #144	; 0x90
 800b750:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b752:	2302      	movs	r3, #2
 800b754:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b756:	2300      	movs	r3, #0
 800b758:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b75a:	2301      	movs	r3, #1
 800b75c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f107 0210 	add.w	r2, r7, #16
 800b766:	4611      	mov	r1, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f003 fa4b 	bl	800ec04 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d90a      	bls.n	800b78a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2282      	movs	r2, #130	; 0x82
 800b778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b780:	4618      	mov	r0, r3
 800b782:	f003 faaf 	bl	800ece4 <SDMMC_CmdReadMultiBlock>
 800b786:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b788:	e009      	b.n	800b79e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2281      	movs	r2, #129	; 0x81
 800b78e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b796:	4618      	mov	r0, r3
 800b798:	f003 fa82 	bl	800eca0 <SDMMC_CmdReadSingleBlock>
 800b79c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d012      	beq.n	800b7ca <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a0d      	ldr	r2, [pc, #52]	; (800b7e0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b7aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e002      	b.n	800b7d0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	e000      	b.n	800b7d0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800b7ce:	2302      	movs	r3, #2
  }
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3730      	adds	r7, #48	; 0x30
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	0800c1c3 	.word	0x0800c1c3
 800b7dc:	0800c235 	.word	0x0800c235
 800b7e0:	004005ff 	.word	0x004005ff
 800b7e4:	4225858c 	.word	0x4225858c

0800b7e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08c      	sub	sp, #48	; 0x30
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d107      	bne.n	800b810 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b804:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e0ca      	b.n	800b9a6 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b01      	cmp	r3, #1
 800b81a:	f040 80c3 	bne.w	800b9a4 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	441a      	add	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b82e:	429a      	cmp	r2, r3
 800b830:	d907      	bls.n	800b842 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b836:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e0b1      	b.n	800b9a6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2203      	movs	r2, #3
 800b846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2200      	movs	r2, #0
 800b850:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f042 021a 	orr.w	r2, r2, #26
 800b860:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b866:	4a52      	ldr	r2, [pc, #328]	; (800b9b0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b868:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86e:	4a51      	ldr	r2, [pc, #324]	; (800b9b4 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800b870:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b876:	2200      	movs	r2, #0
 800b878:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d002      	beq.n	800b888 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b884:	025b      	lsls	r3, r3, #9
 800b886:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b890:	4618      	mov	r0, r3
 800b892:	f003 f9e3 	bl	800ec5c <SDMMC_CmdBlockLength>
 800b896:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00f      	beq.n	800b8be <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a45      	ldr	r2, [pc, #276]	; (800b9b8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b8a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ac:	431a      	orrs	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e073      	b.n	800b9a6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d90a      	bls.n	800b8da <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	22a0      	movs	r2, #160	; 0xa0
 800b8c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f003 fa4b 	bl	800ed6c <SDMMC_CmdWriteMultiBlock>
 800b8d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b8d8:	e009      	b.n	800b8ee <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2290      	movs	r2, #144	; 0x90
 800b8de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f003 fa1e 	bl	800ed28 <SDMMC_CmdWriteSingleBlock>
 800b8ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d012      	beq.n	800b91a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a2f      	ldr	r2, [pc, #188]	; (800b9b8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b8fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b902:	431a      	orrs	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e045      	b.n	800b9a6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b91a:	4b28      	ldr	r3, [pc, #160]	; (800b9bc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b91c:	2201      	movs	r2, #1
 800b91e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b924:	68b9      	ldr	r1, [r7, #8]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	3380      	adds	r3, #128	; 0x80
 800b92c:	461a      	mov	r2, r3
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	025b      	lsls	r3, r3, #9
 800b932:	089b      	lsrs	r3, r3, #2
 800b934:	f7fd facc 	bl	8008ed0 <HAL_DMA_Start_IT>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d01a      	beq.n	800b974 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f022 021a 	bic.w	r2, r2, #26
 800b94c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a19      	ldr	r2, [pc, #100]	; (800b9b8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b954:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	e018      	b.n	800b9a6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b974:	f04f 33ff 	mov.w	r3, #4294967295
 800b978:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	025b      	lsls	r3, r3, #9
 800b97e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b980:	2390      	movs	r3, #144	; 0x90
 800b982:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b984:	2300      	movs	r3, #0
 800b986:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b988:	2300      	movs	r3, #0
 800b98a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b98c:	2301      	movs	r3, #1
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f107 0210 	add.w	r2, r7, #16
 800b998:	4611      	mov	r1, r2
 800b99a:	4618      	mov	r0, r3
 800b99c:	f003 f932 	bl	800ec04 <SDIO_ConfigData>

      return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	e000      	b.n	800b9a6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800b9a4:	2302      	movs	r3, #2
  }
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3730      	adds	r7, #48	; 0x30
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	0800c199 	.word	0x0800c199
 800b9b4:	0800c235 	.word	0x0800c235
 800b9b8:	004005ff 	.word	0x004005ff
 800b9bc:	4225858c 	.word	0x4225858c

0800b9c0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9cc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d008      	beq.n	800b9ee <HAL_SD_IRQHandler+0x2e>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f003 0308 	and.w	r3, r3, #8
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 ffc8 	bl	800c97c <SD_Read_IT>
 800b9ec:	e155      	b.n	800bc9a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 808f 	beq.w	800bb1c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba06:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	6812      	ldr	r2, [r2, #0]
 800ba12:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ba16:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ba1a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f022 0201 	bic.w	r2, r2, #1
 800ba2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f003 0308 	and.w	r3, r3, #8
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d039      	beq.n	800baaa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f003 0302 	and.w	r3, r3, #2
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d104      	bne.n	800ba4a <HAL_SD_IRQHandler+0x8a>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f003 0320 	and.w	r3, r3, #32
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d011      	beq.n	800ba6e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f003 f9ae 	bl	800edb0 <SDMMC_CmdStopTransfer>
 800ba54:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d008      	beq.n	800ba6e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	431a      	orrs	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f91f 	bl	800bcac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d104      	bne.n	800ba9a <HAL_SD_IRQHandler+0xda>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f003 fe04 	bl	800f6a8 <HAL_SD_RxCpltCallback>
 800baa0:	e0fb      	b.n	800bc9a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f003 fdf6 	bl	800f694 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800baa8:	e0f7      	b.n	800bc9a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 80f2 	beq.w	800bc9a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f003 0320 	and.w	r3, r3, #32
 800babc:	2b00      	cmp	r3, #0
 800babe:	d011      	beq.n	800bae4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4618      	mov	r0, r3
 800bac6:	f003 f973 	bl	800edb0 <SDMMC_CmdStopTransfer>
 800baca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d008      	beq.n	800bae4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	431a      	orrs	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f8e4 	bl	800bcac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	f040 80d5 	bne.w	800bc9a <HAL_SD_IRQHandler+0x2da>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f003 0302 	and.w	r3, r3, #2
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f040 80cf 	bne.w	800bc9a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f022 0208 	bic.w	r2, r2, #8
 800bb0a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f003 fdbd 	bl	800f694 <HAL_SD_TxCpltCallback>
}
 800bb1a:	e0be      	b.n	800bc9a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d008      	beq.n	800bb3c <HAL_SD_IRQHandler+0x17c>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f003 0308 	and.w	r3, r3, #8
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 ff72 	bl	800ca1e <SD_Write_IT>
 800bb3a:	e0ae      	b.n	800bc9a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb42:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 80a7 	beq.w	800bc9a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb52:	f003 0302 	and.w	r3, r3, #2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d005      	beq.n	800bb66 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5e:	f043 0202 	orr.w	r2, r3, #2
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb6c:	f003 0308 	and.w	r3, r3, #8
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d005      	beq.n	800bb80 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb78:	f043 0208 	orr.w	r2, r3, #8
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb86:	f003 0320 	and.w	r3, r3, #32
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d005      	beq.n	800bb9a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb92:	f043 0220 	orr.w	r2, r3, #32
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba0:	f003 0310 	and.w	r3, r3, #16
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d005      	beq.n	800bbb4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbac:	f043 0210 	orr.w	r2, r3, #16
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f240 523a 	movw	r2, #1338	; 0x53a
 800bbbc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bbcc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f003 f8ec 	bl	800edb0 <SDMMC_CmdStopTransfer>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbde:	431a      	orrs	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f003 0308 	and.w	r3, r3, #8
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00a      	beq.n	800bc04 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 f855 	bl	800bcac <HAL_SD_ErrorCallback>
}
 800bc02:	e04a      	b.n	800bc9a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d045      	beq.n	800bc9a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f003 0310 	and.w	r3, r3, #16
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d104      	bne.n	800bc22 <HAL_SD_IRQHandler+0x262>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f003 0320 	and.w	r3, r3, #32
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d011      	beq.n	800bc46 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc26:	4a1f      	ldr	r2, [pc, #124]	; (800bca4 <HAL_SD_IRQHandler+0x2e4>)
 800bc28:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fd f9a6 	bl	8008f80 <HAL_DMA_Abort_IT>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d02f      	beq.n	800bc9a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f000 fb4a 	bl	800c2d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bc44:	e029      	b.n	800bc9a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f003 0301 	and.w	r3, r3, #1
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d104      	bne.n	800bc5a <HAL_SD_IRQHandler+0x29a>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f003 0302 	and.w	r3, r3, #2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d011      	beq.n	800bc7e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	4a12      	ldr	r2, [pc, #72]	; (800bca8 <HAL_SD_IRQHandler+0x2e8>)
 800bc60:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fd f98a 	bl	8008f80 <HAL_DMA_Abort_IT>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d013      	beq.n	800bc9a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 fb65 	bl	800c346 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bc7c:	e00d      	b.n	800bc9a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f003 fcf4 	bl	800f680 <HAL_SD_AbortCallback>
}
 800bc98:	e7ff      	b.n	800bc9a <HAL_SD_IRQHandler+0x2da>
 800bc9a:	bf00      	nop
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	0800c2d9 	.word	0x0800c2d9
 800bca8:	0800c347 	.word	0x0800c347

0800bcac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcce:	0f9b      	lsrs	r3, r3, #30
 800bcd0:	b2da      	uxtb	r2, r3
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcda:	0e9b      	lsrs	r3, r3, #26
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	f003 030f 	and.w	r3, r3, #15
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcec:	0e1b      	lsrs	r3, r3, #24
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	f003 0303 	and.w	r3, r3, #3
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcfe:	0c1b      	lsrs	r3, r3, #16
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd0a:	0a1b      	lsrs	r3, r3, #8
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd20:	0d1b      	lsrs	r3, r3, #20
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd2c:	0c1b      	lsrs	r3, r3, #16
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	f003 030f 	and.w	r3, r3, #15
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd3e:	0bdb      	lsrs	r3, r3, #15
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	b2da      	uxtb	r2, r3
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd50:	0b9b      	lsrs	r3, r3, #14
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd62:	0b5b      	lsrs	r3, r3, #13
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd74:	0b1b      	lsrs	r3, r3, #12
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	f003 0301 	and.w	r3, r3, #1
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2200      	movs	r2, #0
 800bd86:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d163      	bne.n	800be58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd94:	009a      	lsls	r2, r3, #2
 800bd96:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bda0:	0f92      	lsrs	r2, r2, #30
 800bda2:	431a      	orrs	r2, r3
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdac:	0edb      	lsrs	r3, r3, #27
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	f003 0307 	and.w	r3, r3, #7
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdbe:	0e1b      	lsrs	r3, r3, #24
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	f003 0307 	and.w	r3, r3, #7
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd0:	0d5b      	lsrs	r3, r3, #21
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	f003 0307 	and.w	r3, r3, #7
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde2:	0c9b      	lsrs	r3, r3, #18
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	f003 0307 	and.w	r3, r3, #7
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdf4:	0bdb      	lsrs	r3, r3, #15
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	f003 0307 	and.w	r3, r3, #7
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	7e1b      	ldrb	r3, [r3, #24]
 800be10:	b2db      	uxtb	r3, r3
 800be12:	f003 0307 	and.w	r3, r3, #7
 800be16:	3302      	adds	r3, #2
 800be18:	2201      	movs	r2, #1
 800be1a:	fa02 f303 	lsl.w	r3, r2, r3
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800be22:	fb02 f203 	mul.w	r2, r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	7a1b      	ldrb	r3, [r3, #8]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	f003 030f 	and.w	r3, r3, #15
 800be34:	2201      	movs	r2, #1
 800be36:	409a      	lsls	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800be44:	0a52      	lsrs	r2, r2, #9
 800be46:	fb02 f203 	mul.w	r2, r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be54:	661a      	str	r2, [r3, #96]	; 0x60
 800be56:	e031      	b.n	800bebc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d11d      	bne.n	800be9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be64:	041b      	lsls	r3, r3, #16
 800be66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be6e:	0c1b      	lsrs	r3, r3, #16
 800be70:	431a      	orrs	r2, r3
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	3301      	adds	r3, #1
 800be7c:	029a      	lsls	r2, r3, #10
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be90:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	661a      	str	r2, [r3, #96]	; 0x60
 800be9a:	e00f      	b.n	800bebc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a58      	ldr	r2, [pc, #352]	; (800c004 <HAL_SD_GetCardCSD+0x344>)
 800bea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e09d      	b.n	800bff8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bec0:	0b9b      	lsrs	r3, r3, #14
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bed2:	09db      	lsrs	r3, r3, #7
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beea:	b2da      	uxtb	r2, r3
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bef4:	0fdb      	lsrs	r3, r3, #31
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf00:	0f5b      	lsrs	r3, r3, #29
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	f003 0303 	and.w	r3, r3, #3
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf12:	0e9b      	lsrs	r3, r3, #26
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	f003 0307 	and.w	r3, r3, #7
 800bf1a:	b2da      	uxtb	r2, r3
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf24:	0d9b      	lsrs	r3, r3, #22
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	f003 030f 	and.w	r3, r3, #15
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf36:	0d5b      	lsrs	r3, r3, #21
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf52:	0c1b      	lsrs	r3, r3, #16
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf66:	0bdb      	lsrs	r3, r3, #15
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf7a:	0b9b      	lsrs	r3, r3, #14
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf8e:	0b5b      	lsrs	r3, r3, #13
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa2:	0b1b      	lsrs	r3, r3, #12
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb6:	0a9b      	lsrs	r3, r3, #10
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	f003 0303 	and.w	r3, r3, #3
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfca:	0a1b      	lsrs	r3, r3, #8
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	f003 0303 	and.w	r3, r3, #3
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfde:	085b      	lsrs	r3, r3, #1
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	004005ff 	.word	0x004005ff

0800c008 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c060:	b5b0      	push	{r4, r5, r7, lr}
 800c062:	b08e      	sub	sp, #56	; 0x38
 800c064:	af04      	add	r7, sp, #16
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2203      	movs	r2, #3
 800c06e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c076:	2b03      	cmp	r3, #3
 800c078:	d02e      	beq.n	800c0d8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c080:	d106      	bne.n	800c090 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c086:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	639a      	str	r2, [r3, #56]	; 0x38
 800c08e:	e029      	b.n	800c0e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c096:	d10a      	bne.n	800c0ae <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fb0f 	bl	800c6bc <SD_WideBus_Enable>
 800c09e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	431a      	orrs	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	639a      	str	r2, [r3, #56]	; 0x38
 800c0ac:	e01a      	b.n	800c0e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10a      	bne.n	800c0ca <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fb4c 	bl	800c752 <SD_WideBus_Disable>
 800c0ba:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	639a      	str	r2, [r3, #56]	; 0x38
 800c0c8:	e00c      	b.n	800c0e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	639a      	str	r2, [r3, #56]	; 0x38
 800c0d6:	e005      	b.n	800c0e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d009      	beq.n	800c100 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a18      	ldr	r2, [pc, #96]	; (800c154 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800c0f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e024      	b.n	800c14a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681d      	ldr	r5, [r3, #0]
 800c126:	466c      	mov	r4, sp
 800c128:	f107 0318 	add.w	r3, r7, #24
 800c12c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c130:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c134:	f107 030c 	add.w	r3, r7, #12
 800c138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c13a:	4628      	mov	r0, r5
 800c13c:	f002 fcb2 	bl	800eaa4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3728      	adds	r7, #40	; 0x28
 800c14e:	46bd      	mov	sp, r7
 800c150:	bdb0      	pop	{r4, r5, r7, pc}
 800c152:	bf00      	nop
 800c154:	004005ff 	.word	0x004005ff

0800c158 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	4619      	mov	r1, r3
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa7e 	bl	800c66c <SD_SendStatus>
 800c170:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d005      	beq.n	800c184 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	431a      	orrs	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	0a5b      	lsrs	r3, r3, #9
 800c188:	f003 030f 	and.w	r3, r3, #15
 800c18c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c18e:	693b      	ldr	r3, [r7, #16]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c1b6:	bf00      	nop
 800c1b8:	3714      	adds	r7, #20
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d4:	2b82      	cmp	r3, #130	; 0x82
 800c1d6:	d111      	bne.n	800c1fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f002 fde7 	bl	800edb0 <SDMMC_CmdStopTransfer>
 800c1e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d008      	beq.n	800c1fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	431a      	orrs	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f7ff fd58 	bl	800bcac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f022 0208 	bic.w	r2, r2, #8
 800c20a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f240 523a 	movw	r2, #1338	; 0x53a
 800c214:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f003 fa3f 	bl	800f6a8 <HAL_SD_RxCpltCallback>
#endif
}
 800c22a:	bf00      	nop
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c240:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7fd f848 	bl	80092d8 <HAL_DMA_GetError>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d03e      	beq.n	800c2cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c254:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c25c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d002      	beq.n	800c26a <SD_DMAError+0x36>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d12d      	bne.n	800c2c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a19      	ldr	r2, [pc, #100]	; (800c2d4 <SD_DMAError+0xa0>)
 800c270:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c280:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c286:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c28e:	6978      	ldr	r0, [r7, #20]
 800c290:	f7ff ff62 	bl	800c158 <HAL_SD_GetCardState>
 800c294:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2b06      	cmp	r3, #6
 800c29a:	d002      	beq.n	800c2a2 <SD_DMAError+0x6e>
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2b05      	cmp	r3, #5
 800c2a0:	d10a      	bne.n	800c2b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f002 fd82 	bl	800edb0 <SDMMC_CmdStopTransfer>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b2:	431a      	orrs	r2, r3
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c2c6:	6978      	ldr	r0, [r7, #20]
 800c2c8:	f7ff fcf0 	bl	800bcac <HAL_SD_ErrorCallback>
#endif
  }
}
 800c2cc:	bf00      	nop
 800c2ce:	3718      	adds	r7, #24
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	004005ff 	.word	0x004005ff

0800c2d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f240 523a 	movw	r2, #1338	; 0x53a
 800c2ee:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f7ff ff31 	bl	800c158 <HAL_SD_GetCardState>
 800c2f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	2b06      	cmp	r3, #6
 800c30a:	d002      	beq.n	800c312 <SD_DMATxAbort+0x3a>
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2b05      	cmp	r3, #5
 800c310:	d10a      	bne.n	800c328 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4618      	mov	r0, r3
 800c318:	f002 fd4a 	bl	800edb0 <SDMMC_CmdStopTransfer>
 800c31c:	4602      	mov	r2, r0
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c322:	431a      	orrs	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d103      	bne.n	800c338 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f003 f9a5 	bl	800f680 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c336:	e002      	b.n	800c33e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f7ff fcb7 	bl	800bcac <HAL_SD_ErrorCallback>
}
 800c33e:	bf00      	nop
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c352:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f240 523a 	movw	r2, #1338	; 0x53a
 800c35c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f7ff fefa 	bl	800c158 <HAL_SD_GetCardState>
 800c364:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2b06      	cmp	r3, #6
 800c378:	d002      	beq.n	800c380 <SD_DMARxAbort+0x3a>
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	2b05      	cmp	r3, #5
 800c37e:	d10a      	bne.n	800c396 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4618      	mov	r0, r3
 800c386:	f002 fd13 	bl	800edb0 <SDMMC_CmdStopTransfer>
 800c38a:	4602      	mov	r2, r0
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c390:	431a      	orrs	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d103      	bne.n	800c3a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f003 f96e 	bl	800f680 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c3a4:	e002      	b.n	800c3ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f7ff fc80 	bl	800bcac <HAL_SD_ErrorCallback>
}
 800c3ac:	bf00      	nop
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c3b4:	b5b0      	push	{r4, r5, r7, lr}
 800c3b6:	b094      	sub	sp, #80	; 0x50
 800c3b8:	af04      	add	r7, sp, #16
 800c3ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f002 fbc5 	bl	800eb54 <SDIO_GetPowerState>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d102      	bne.n	800c3d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c3d4:	e0b7      	b.n	800c546 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d02f      	beq.n	800c43e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f002 fdee 	bl	800efc4 <SDMMC_CmdSendCID>
 800c3e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <SD_InitCard+0x40>
    {
      return errorstate;
 800c3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f2:	e0a8      	b.n	800c546 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f002 fbef 	bl	800ebde <SDIO_GetResponse>
 800c400:	4602      	mov	r2, r0
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2104      	movs	r1, #4
 800c40c:	4618      	mov	r0, r3
 800c40e:	f002 fbe6 	bl	800ebde <SDIO_GetResponse>
 800c412:	4602      	mov	r2, r0
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2108      	movs	r1, #8
 800c41e:	4618      	mov	r0, r3
 800c420:	f002 fbdd 	bl	800ebde <SDIO_GetResponse>
 800c424:	4602      	mov	r2, r0
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	210c      	movs	r1, #12
 800c430:	4618      	mov	r0, r3
 800c432:	f002 fbd4 	bl	800ebde <SDIO_GetResponse>
 800c436:	4602      	mov	r2, r0
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c442:	2b03      	cmp	r3, #3
 800c444:	d00d      	beq.n	800c462 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f107 020e 	add.w	r2, r7, #14
 800c44e:	4611      	mov	r1, r2
 800c450:	4618      	mov	r0, r3
 800c452:	f002 fdf4 	bl	800f03e <SDMMC_CmdSetRelAdd>
 800c456:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <SD_InitCard+0xae>
    {
      return errorstate;
 800c45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c460:	e071      	b.n	800c546 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c466:	2b03      	cmp	r3, #3
 800c468:	d036      	beq.n	800c4d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c46a:	89fb      	ldrh	r3, [r7, #14]
 800c46c:	461a      	mov	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c47a:	041b      	lsls	r3, r3, #16
 800c47c:	4619      	mov	r1, r3
 800c47e:	4610      	mov	r0, r2
 800c480:	f002 fdbe 	bl	800f000 <SDMMC_CmdSendCSD>
 800c484:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d001      	beq.n	800c490 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c48e:	e05a      	b.n	800c546 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2100      	movs	r1, #0
 800c496:	4618      	mov	r0, r3
 800c498:	f002 fba1 	bl	800ebde <SDIO_GetResponse>
 800c49c:	4602      	mov	r2, r0
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2104      	movs	r1, #4
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f002 fb98 	bl	800ebde <SDIO_GetResponse>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2108      	movs	r1, #8
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f002 fb8f 	bl	800ebde <SDIO_GetResponse>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	210c      	movs	r1, #12
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f002 fb86 	bl	800ebde <SDIO_GetResponse>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2104      	movs	r1, #4
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f002 fb7d 	bl	800ebde <SDIO_GetResponse>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	0d1a      	lsrs	r2, r3, #20
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c4ec:	f107 0310 	add.w	r3, r7, #16
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff fbe4 	bl	800bcc0 <HAL_SD_GetCardCSD>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d002      	beq.n	800c504 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c4fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c502:	e020      	b.n	800c546 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6819      	ldr	r1, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c50c:	041b      	lsls	r3, r3, #16
 800c50e:	f04f 0400 	mov.w	r4, #0
 800c512:	461a      	mov	r2, r3
 800c514:	4623      	mov	r3, r4
 800c516:	4608      	mov	r0, r1
 800c518:	f002 fc6c 	bl	800edf4 <SDMMC_CmdSelDesel>
 800c51c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c520:	2b00      	cmp	r3, #0
 800c522:	d001      	beq.n	800c528 <SD_InitCard+0x174>
  {
    return errorstate;
 800c524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c526:	e00e      	b.n	800c546 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681d      	ldr	r5, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	466c      	mov	r4, sp
 800c530:	f103 0210 	add.w	r2, r3, #16
 800c534:	ca07      	ldmia	r2, {r0, r1, r2}
 800c536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c53a:	3304      	adds	r3, #4
 800c53c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c53e:	4628      	mov	r0, r5
 800c540:	f002 fab0 	bl	800eaa4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3740      	adds	r7, #64	; 0x40
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c550 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c558:	2300      	movs	r3, #0
 800c55a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c55c:	2300      	movs	r3, #0
 800c55e:	617b      	str	r3, [r7, #20]
 800c560:	2300      	movs	r3, #0
 800c562:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4618      	mov	r0, r3
 800c56a:	f002 fc66 	bl	800ee3a <SDMMC_CmdGoIdleState>
 800c56e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <SD_PowerON+0x2a>
  {
    return errorstate;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	e072      	b.n	800c660 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4618      	mov	r0, r3
 800c580:	f002 fc79 	bl	800ee76 <SDMMC_CmdOperCond>
 800c584:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00d      	beq.n	800c5a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4618      	mov	r0, r3
 800c598:	f002 fc4f 	bl	800ee3a <SDMMC_CmdGoIdleState>
 800c59c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d004      	beq.n	800c5ae <SD_PowerON+0x5e>
    {
      return errorstate;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	e05b      	b.n	800c660 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d137      	bne.n	800c626 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f002 fc79 	bl	800eeb4 <SDMMC_CmdAppCommand>
 800c5c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d02d      	beq.n	800c626 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c5ce:	e047      	b.n	800c660 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f002 fc6c 	bl	800eeb4 <SDMMC_CmdAppCommand>
 800c5dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <SD_PowerON+0x98>
    {
      return errorstate;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	e03b      	b.n	800c660 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	491e      	ldr	r1, [pc, #120]	; (800c668 <SD_PowerON+0x118>)
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f002 fc82 	bl	800eef8 <SDMMC_CmdAppOperCommand>
 800c5f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d002      	beq.n	800c602 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c600:	e02e      	b.n	800c660 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2100      	movs	r1, #0
 800c608:	4618      	mov	r0, r3
 800c60a:	f002 fae8 	bl	800ebde <SDIO_GetResponse>
 800c60e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	0fdb      	lsrs	r3, r3, #31
 800c614:	2b01      	cmp	r3, #1
 800c616:	d101      	bne.n	800c61c <SD_PowerON+0xcc>
 800c618:	2301      	movs	r3, #1
 800c61a:	e000      	b.n	800c61e <SD_PowerON+0xce>
 800c61c:	2300      	movs	r3, #0
 800c61e:	613b      	str	r3, [r7, #16]

    count++;
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	3301      	adds	r3, #1
 800c624:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d802      	bhi.n	800c636 <SD_PowerON+0xe6>
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0cc      	beq.n	800c5d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d902      	bls.n	800c646 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c644:	e00c      	b.n	800c660 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d003      	beq.n	800c658 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	645a      	str	r2, [r3, #68]	; 0x44
 800c656:	e002      	b.n	800c65e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3718      	adds	r7, #24
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	c1100000 	.word	0xc1100000

0800c66c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d102      	bne.n	800c682 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c67c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c680:	e018      	b.n	800c6b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c68a:	041b      	lsls	r3, r3, #16
 800c68c:	4619      	mov	r1, r3
 800c68e:	4610      	mov	r0, r2
 800c690:	f002 fcf6 	bl	800f080 <SDMMC_CmdSendStatus>
 800c694:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	e009      	b.n	800c6b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f002 fa99 	bl	800ebde <SDIO_GetResponse>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	60fb      	str	r3, [r7, #12]
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f002 fa83 	bl	800ebde <SDIO_GetResponse>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6e2:	d102      	bne.n	800c6ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c6e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6e8:	e02f      	b.n	800c74a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c6ea:	f107 030c 	add.w	r3, r7, #12
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f879 	bl	800c7e8 <SD_FindSCR>
 800c6f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	e023      	b.n	800c74a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d01c      	beq.n	800c746 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c714:	041b      	lsls	r3, r3, #16
 800c716:	4619      	mov	r1, r3
 800c718:	4610      	mov	r0, r2
 800c71a:	f002 fbcb 	bl	800eeb4 <SDMMC_CmdAppCommand>
 800c71e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	e00f      	b.n	800c74a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2102      	movs	r1, #2
 800c730:	4618      	mov	r0, r3
 800c732:	f002 fc04 	bl	800ef3e <SDMMC_CmdBusWidth>
 800c736:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d001      	beq.n	800c742 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	e003      	b.n	800c74a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c742:	2300      	movs	r3, #0
 800c744:	e001      	b.n	800c74a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c746:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b086      	sub	sp, #24
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c75a:	2300      	movs	r3, #0
 800c75c:	60fb      	str	r3, [r7, #12]
 800c75e:	2300      	movs	r3, #0
 800c760:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2100      	movs	r1, #0
 800c768:	4618      	mov	r0, r3
 800c76a:	f002 fa38 	bl	800ebde <SDIO_GetResponse>
 800c76e:	4603      	mov	r3, r0
 800c770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c778:	d102      	bne.n	800c780 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c77a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c77e:	e02f      	b.n	800c7e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c780:	f107 030c 	add.w	r3, r7, #12
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f82e 	bl	800c7e8 <SD_FindSCR>
 800c78c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	e023      	b.n	800c7e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d01c      	beq.n	800c7dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7aa:	041b      	lsls	r3, r3, #16
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	4610      	mov	r0, r2
 800c7b0:	f002 fb80 	bl	800eeb4 <SDMMC_CmdAppCommand>
 800c7b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	e00f      	b.n	800c7e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f002 fbb9 	bl	800ef3e <SDMMC_CmdBusWidth>
 800c7cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	e003      	b.n	800c7e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e001      	b.n	800c7e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c7dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c7e8:	b590      	push	{r4, r7, lr}
 800c7ea:	b08f      	sub	sp, #60	; 0x3c
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c7f2:	f7fb fd7b 	bl	80082ec <HAL_GetTick>
 800c7f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	60bb      	str	r3, [r7, #8]
 800c800:	2300      	movs	r3, #0
 800c802:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2108      	movs	r1, #8
 800c80e:	4618      	mov	r0, r3
 800c810:	f002 fa24 	bl	800ec5c <SDMMC_CmdBlockLength>
 800c814:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	e0a9      	b.n	800c974 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c828:	041b      	lsls	r3, r3, #16
 800c82a:	4619      	mov	r1, r3
 800c82c:	4610      	mov	r0, r2
 800c82e:	f002 fb41 	bl	800eeb4 <SDMMC_CmdAppCommand>
 800c832:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	2b00      	cmp	r3, #0
 800c838:	d001      	beq.n	800c83e <SD_FindSCR+0x56>
  {
    return errorstate;
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	e09a      	b.n	800c974 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c83e:	f04f 33ff 	mov.w	r3, #4294967295
 800c842:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c844:	2308      	movs	r3, #8
 800c846:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800c848:	2330      	movs	r3, #48	; 0x30
 800c84a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c84c:	2302      	movs	r3, #2
 800c84e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c850:	2300      	movs	r3, #0
 800c852:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800c854:	2301      	movs	r3, #1
 800c856:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f107 0210 	add.w	r2, r7, #16
 800c860:	4611      	mov	r1, r2
 800c862:	4618      	mov	r0, r3
 800c864:	f002 f9ce 	bl	800ec04 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f002 fb88 	bl	800ef82 <SDMMC_CmdSendSCR>
 800c872:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	2b00      	cmp	r3, #0
 800c878:	d022      	beq.n	800c8c0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87c:	e07a      	b.n	800c974 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00e      	beq.n	800c8aa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6819      	ldr	r1, [r3, #0]
 800c890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	f107 0208 	add.w	r2, r7, #8
 800c898:	18d4      	adds	r4, r2, r3
 800c89a:	4608      	mov	r0, r1
 800c89c:	f002 f92d 	bl	800eafa <SDIO_ReadFIFO>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	6023      	str	r3, [r4, #0]
      index++;
 800c8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c8aa:	f7fb fd1f 	bl	80082ec <HAL_GetTick>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b8:	d102      	bne.n	800c8c0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c8ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8be:	e059      	b.n	800c974 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8c6:	f240 432a 	movw	r3, #1066	; 0x42a
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d0d6      	beq.n	800c87e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d6:	f003 0308 	and.w	r3, r3, #8
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d005      	beq.n	800c8ea <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2208      	movs	r2, #8
 800c8e4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c8e6:	2308      	movs	r3, #8
 800c8e8:	e044      	b.n	800c974 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f0:	f003 0302 	and.w	r3, r3, #2
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2202      	movs	r2, #2
 800c8fe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c900:	2302      	movs	r3, #2
 800c902:	e037      	b.n	800c974 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c90a:	f003 0320 	and.w	r3, r3, #32
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d005      	beq.n	800c91e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2220      	movs	r2, #32
 800c918:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c91a:	2320      	movs	r3, #32
 800c91c:	e02a      	b.n	800c974 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f240 523a 	movw	r2, #1338	; 0x53a
 800c926:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	061a      	lsls	r2, r3, #24
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	021b      	lsls	r3, r3, #8
 800c930:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c934:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	0a1b      	lsrs	r3, r3, #8
 800c93a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c93e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	0e1b      	lsrs	r3, r3, #24
 800c944:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c948:	601a      	str	r2, [r3, #0]
    scr++;
 800c94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94c:	3304      	adds	r3, #4
 800c94e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	061a      	lsls	r2, r3, #24
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	021b      	lsls	r3, r3, #8
 800c958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c95c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	0a1b      	lsrs	r3, r3, #8
 800c962:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c966:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	0e1b      	lsrs	r3, r3, #24
 800c96c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	373c      	adds	r7, #60	; 0x3c
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd90      	pop	{r4, r7, pc}

0800c97c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c988:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c98e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d03f      	beq.n	800ca16 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]
 800c99a:	e033      	b.n	800ca04 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f002 f8aa 	bl	800eafa <SDIO_ReadFIFO>
 800c9a6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	b2da      	uxtb	r2, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	0a1b      	lsrs	r3, r3, #8
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	0c1b      	lsrs	r3, r3, #16
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	0e1b      	lsrs	r3, r3, #24
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	3301      	adds	r3, #1
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	2b07      	cmp	r3, #7
 800ca08:	d9c8      	bls.n	800c99c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	693a      	ldr	r2, [r7, #16]
 800ca14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ca16:	bf00      	nop
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b086      	sub	sp, #24
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca30:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d043      	beq.n	800cac0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ca38:	2300      	movs	r3, #0
 800ca3a:	617b      	str	r3, [r7, #20]
 800ca3c:	e037      	b.n	800caae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	3301      	adds	r3, #1
 800ca48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	021a      	lsls	r2, r3, #8
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	041a      	lsls	r2, r3, #16
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	4313      	orrs	r3, r2
 800ca72:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3301      	adds	r3, #1
 800ca78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	061a      	lsls	r2, r3, #24
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f107 0208 	add.w	r2, r7, #8
 800caa0:	4611      	mov	r1, r2
 800caa2:	4618      	mov	r0, r3
 800caa4:	f002 f836 	bl	800eb14 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	3301      	adds	r3, #1
 800caac:	617b      	str	r3, [r7, #20]
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b07      	cmp	r3, #7
 800cab2:	d9c4      	bls.n	800ca3e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68fa      	ldr	r2, [r7, #12]
 800cab8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800cac0:	bf00      	nop
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d101      	bne.n	800cada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e056      	b.n	800cb88 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d106      	bne.n	800cafa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7f9 fd5d 	bl	80065b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2202      	movs	r2, #2
 800cafe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	685a      	ldr	r2, [r3, #4]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	431a      	orrs	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	691b      	ldr	r3, [r3, #16]
 800cb26:	431a      	orrs	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	431a      	orrs	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb36:	431a      	orrs	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	69db      	ldr	r3, [r3, #28]
 800cb3c:	431a      	orrs	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	ea42 0103 	orr.w	r1, r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	699b      	ldr	r3, [r3, #24]
 800cb56:	0c1b      	lsrs	r3, r3, #16
 800cb58:	f003 0104 	and.w	r1, r3, #4
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	430a      	orrs	r2, r1
 800cb66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	69da      	ldr	r2, [r3, #28]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b088      	sub	sp, #32
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d101      	bne.n	800cbb2 <HAL_SPI_Transmit+0x22>
 800cbae:	2302      	movs	r3, #2
 800cbb0:	e11e      	b.n	800cdf0 <HAL_SPI_Transmit+0x260>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cbba:	f7fb fb97 	bl	80082ec <HAL_GetTick>
 800cbbe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cbc0:	88fb      	ldrh	r3, [r7, #6]
 800cbc2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d002      	beq.n	800cbd6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cbd4:	e103      	b.n	800cdde <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <HAL_SPI_Transmit+0x52>
 800cbdc:	88fb      	ldrh	r3, [r7, #6]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d102      	bne.n	800cbe8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cbe6:	e0fa      	b.n	800cdde <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2203      	movs	r2, #3
 800cbec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	68ba      	ldr	r2, [r7, #8]
 800cbfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	88fa      	ldrh	r2, [r7, #6]
 800cc00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	88fa      	ldrh	r2, [r7, #6]
 800cc06:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc2e:	d107      	bne.n	800cc40 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc4a:	2b40      	cmp	r3, #64	; 0x40
 800cc4c:	d007      	beq.n	800cc5e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc66:	d14b      	bne.n	800cd00 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <HAL_SPI_Transmit+0xe6>
 800cc70:	8afb      	ldrh	r3, [r7, #22]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d13e      	bne.n	800ccf4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc7a:	881a      	ldrh	r2, [r3, #0]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc86:	1c9a      	adds	r2, r3, #2
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	3b01      	subs	r3, #1
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cc9a:	e02b      	b.n	800ccf4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f003 0302 	and.w	r3, r3, #2
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d112      	bne.n	800ccd0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccae:	881a      	ldrh	r2, [r3, #0]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccba:	1c9a      	adds	r2, r3, #2
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	86da      	strh	r2, [r3, #54]	; 0x36
 800ccce:	e011      	b.n	800ccf4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ccd0:	f7fb fb0c 	bl	80082ec <HAL_GetTick>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	683a      	ldr	r2, [r7, #0]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d803      	bhi.n	800cce8 <HAL_SPI_Transmit+0x158>
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce6:	d102      	bne.n	800ccee <HAL_SPI_Transmit+0x15e>
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d102      	bne.n	800ccf4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ccf2:	e074      	b.n	800cdde <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1ce      	bne.n	800cc9c <HAL_SPI_Transmit+0x10c>
 800ccfe:	e04c      	b.n	800cd9a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d002      	beq.n	800cd0e <HAL_SPI_Transmit+0x17e>
 800cd08:	8afb      	ldrh	r3, [r7, #22]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d140      	bne.n	800cd90 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	330c      	adds	r3, #12
 800cd18:	7812      	ldrb	r2, [r2, #0]
 800cd1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cd34:	e02c      	b.n	800cd90 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	f003 0302 	and.w	r3, r3, #2
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d113      	bne.n	800cd6c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	330c      	adds	r3, #12
 800cd4e:	7812      	ldrb	r2, [r2, #0]
 800cd50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	3b01      	subs	r3, #1
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	86da      	strh	r2, [r3, #54]	; 0x36
 800cd6a:	e011      	b.n	800cd90 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd6c:	f7fb fabe 	bl	80082ec <HAL_GetTick>
 800cd70:	4602      	mov	r2, r0
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d803      	bhi.n	800cd84 <HAL_SPI_Transmit+0x1f4>
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd82:	d102      	bne.n	800cd8a <HAL_SPI_Transmit+0x1fa>
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d102      	bne.n	800cd90 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800cd8a:	2303      	movs	r3, #3
 800cd8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cd8e:	e026      	b.n	800cdde <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1cd      	bne.n	800cd36 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cd9a:	69ba      	ldr	r2, [r7, #24]
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	f000 fba4 	bl	800d4ec <SPI_EndRxTxTransaction>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d002      	beq.n	800cdb0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2220      	movs	r2, #32
 800cdae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10a      	bne.n	800cdce <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cdb8:	2300      	movs	r3, #0
 800cdba:	613b      	str	r3, [r7, #16]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	613b      	str	r3, [r7, #16]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	613b      	str	r3, [r7, #16]
 800cdcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d002      	beq.n	800cddc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	77fb      	strb	r3, [r7, #31]
 800cdda:	e000      	b.n	800cdde <HAL_SPI_Transmit+0x24e>
  }

error:
 800cddc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cdee:	7ffb      	ldrb	r3, [r7, #31]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3720      	adds	r7, #32
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af02      	add	r7, sp, #8
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	603b      	str	r3, [r7, #0]
 800ce04:	4613      	mov	r3, r2
 800ce06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce14:	d112      	bne.n	800ce3c <HAL_SPI_Receive+0x44>
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10e      	bne.n	800ce3c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2204      	movs	r2, #4
 800ce22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ce26:	88fa      	ldrh	r2, [r7, #6]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	68b9      	ldr	r1, [r7, #8]
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f000 f8e9 	bl	800d00a <HAL_SPI_TransmitReceive>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	e0e2      	b.n	800d002 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d101      	bne.n	800ce4a <HAL_SPI_Receive+0x52>
 800ce46:	2302      	movs	r3, #2
 800ce48:	e0db      	b.n	800d002 <HAL_SPI_Receive+0x20a>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce52:	f7fb fa4b 	bl	80082ec <HAL_GetTick>
 800ce56:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d002      	beq.n	800ce6a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ce64:	2302      	movs	r3, #2
 800ce66:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce68:	e0c2      	b.n	800cff0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <HAL_SPI_Receive+0x7e>
 800ce70:	88fb      	ldrh	r3, [r7, #6]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d102      	bne.n	800ce7c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce7a:	e0b9      	b.n	800cff0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2204      	movs	r2, #4
 800ce80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2200      	movs	r2, #0
 800ce88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	88fa      	ldrh	r2, [r7, #6]
 800ce94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	88fa      	ldrh	r2, [r7, #6]
 800ce9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cec2:	d107      	bne.n	800ced4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ced2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cede:	2b40      	cmp	r3, #64	; 0x40
 800cee0:	d007      	beq.n	800cef2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cef0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d162      	bne.n	800cfc0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cefa:	e02e      	b.n	800cf5a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d115      	bne.n	800cf36 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f103 020c 	add.w	r2, r3, #12
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf16:	7812      	ldrb	r2, [r2, #0]
 800cf18:	b2d2      	uxtb	r2, r2
 800cf1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf20:	1c5a      	adds	r2, r3, #1
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cf34:	e011      	b.n	800cf5a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf36:	f7fb f9d9 	bl	80082ec <HAL_GetTick>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d803      	bhi.n	800cf4e <HAL_SPI_Receive+0x156>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf4c:	d102      	bne.n	800cf54 <HAL_SPI_Receive+0x15c>
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d102      	bne.n	800cf5a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800cf54:	2303      	movs	r3, #3
 800cf56:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cf58:	e04a      	b.n	800cff0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1cb      	bne.n	800cefc <HAL_SPI_Receive+0x104>
 800cf64:	e031      	b.n	800cfca <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	f003 0301 	and.w	r3, r3, #1
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d113      	bne.n	800cf9c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	68da      	ldr	r2, [r3, #12]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7e:	b292      	uxth	r2, r2
 800cf80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf86:	1c9a      	adds	r2, r3, #2
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	3b01      	subs	r3, #1
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cf9a:	e011      	b.n	800cfc0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf9c:	f7fb f9a6 	bl	80082ec <HAL_GetTick>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d803      	bhi.n	800cfb4 <HAL_SPI_Receive+0x1bc>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb2:	d102      	bne.n	800cfba <HAL_SPI_Receive+0x1c2>
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d102      	bne.n	800cfc0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cfbe:	e017      	b.n	800cff0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1cd      	bne.n	800cf66 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cfca:	693a      	ldr	r2, [r7, #16]
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f000 fa27 	bl	800d422 <SPI_EndRxTransaction>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d002      	beq.n	800cfe0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2220      	movs	r2, #32
 800cfde:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	75fb      	strb	r3, [r7, #23]
 800cfec:	e000      	b.n	800cff0 <HAL_SPI_Receive+0x1f8>
  }

error :
 800cfee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d000:	7dfb      	ldrb	r3, [r7, #23]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b08c      	sub	sp, #48	; 0x30
 800d00e:	af00      	add	r7, sp, #0
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	607a      	str	r2, [r7, #4]
 800d016:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d018:	2301      	movs	r3, #1
 800d01a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d101      	bne.n	800d030 <HAL_SPI_TransmitReceive+0x26>
 800d02c:	2302      	movs	r3, #2
 800d02e:	e18a      	b.n	800d346 <HAL_SPI_TransmitReceive+0x33c>
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d038:	f7fb f958 	bl	80082ec <HAL_GetTick>
 800d03c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d04e:	887b      	ldrh	r3, [r7, #2]
 800d050:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d056:	2b01      	cmp	r3, #1
 800d058:	d00f      	beq.n	800d07a <HAL_SPI_TransmitReceive+0x70>
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d060:	d107      	bne.n	800d072 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d103      	bne.n	800d072 <HAL_SPI_TransmitReceive+0x68>
 800d06a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d06e:	2b04      	cmp	r3, #4
 800d070:	d003      	beq.n	800d07a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d072:	2302      	movs	r3, #2
 800d074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d078:	e15b      	b.n	800d332 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d005      	beq.n	800d08c <HAL_SPI_TransmitReceive+0x82>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d002      	beq.n	800d08c <HAL_SPI_TransmitReceive+0x82>
 800d086:	887b      	ldrh	r3, [r7, #2]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d103      	bne.n	800d094 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d092:	e14e      	b.n	800d332 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b04      	cmp	r3, #4
 800d09e:	d003      	beq.n	800d0a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2205      	movs	r2, #5
 800d0a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	887a      	ldrh	r2, [r7, #2]
 800d0b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	887a      	ldrh	r2, [r7, #2]
 800d0be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	68ba      	ldr	r2, [r7, #8]
 800d0c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	887a      	ldrh	r2, [r7, #2]
 800d0ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	887a      	ldrh	r2, [r7, #2]
 800d0d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0e8:	2b40      	cmp	r3, #64	; 0x40
 800d0ea:	d007      	beq.n	800d0fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d104:	d178      	bne.n	800d1f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d002      	beq.n	800d114 <HAL_SPI_TransmitReceive+0x10a>
 800d10e:	8b7b      	ldrh	r3, [r7, #26]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d166      	bne.n	800d1e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d118:	881a      	ldrh	r2, [r3, #0]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d124:	1c9a      	adds	r2, r3, #2
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d12e:	b29b      	uxth	r3, r3
 800d130:	3b01      	subs	r3, #1
 800d132:	b29a      	uxth	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d138:	e053      	b.n	800d1e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	f003 0302 	and.w	r3, r3, #2
 800d144:	2b02      	cmp	r3, #2
 800d146:	d11b      	bne.n	800d180 <HAL_SPI_TransmitReceive+0x176>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d016      	beq.n	800d180 <HAL_SPI_TransmitReceive+0x176>
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	2b01      	cmp	r3, #1
 800d156:	d113      	bne.n	800d180 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d15c:	881a      	ldrh	r2, [r3, #0]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d168:	1c9a      	adds	r2, r3, #2
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d172:	b29b      	uxth	r3, r3
 800d174:	3b01      	subs	r3, #1
 800d176:	b29a      	uxth	r2, r3
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d17c:	2300      	movs	r3, #0
 800d17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	f003 0301 	and.w	r3, r3, #1
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d119      	bne.n	800d1c2 <HAL_SPI_TransmitReceive+0x1b8>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d192:	b29b      	uxth	r3, r3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d014      	beq.n	800d1c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68da      	ldr	r2, [r3, #12]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a2:	b292      	uxth	r2, r2
 800d1a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1aa:	1c9a      	adds	r2, r3, #2
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d1c2:	f7fb f893 	bl	80082ec <HAL_GetTick>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	1ad3      	subs	r3, r2, r3
 800d1cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d807      	bhi.n	800d1e2 <HAL_SPI_TransmitReceive+0x1d8>
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d8:	d003      	beq.n	800d1e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d1e0:	e0a7      	b.n	800d332 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1a6      	bne.n	800d13a <HAL_SPI_TransmitReceive+0x130>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1a1      	bne.n	800d13a <HAL_SPI_TransmitReceive+0x130>
 800d1f6:	e07c      	b.n	800d2f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d002      	beq.n	800d206 <HAL_SPI_TransmitReceive+0x1fc>
 800d200:	8b7b      	ldrh	r3, [r7, #26]
 800d202:	2b01      	cmp	r3, #1
 800d204:	d16b      	bne.n	800d2de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	330c      	adds	r3, #12
 800d210:	7812      	ldrb	r2, [r2, #0]
 800d212:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d218:	1c5a      	adds	r2, r3, #1
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d222:	b29b      	uxth	r3, r3
 800d224:	3b01      	subs	r3, #1
 800d226:	b29a      	uxth	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d22c:	e057      	b.n	800d2de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	f003 0302 	and.w	r3, r3, #2
 800d238:	2b02      	cmp	r3, #2
 800d23a:	d11c      	bne.n	800d276 <HAL_SPI_TransmitReceive+0x26c>
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d240:	b29b      	uxth	r3, r3
 800d242:	2b00      	cmp	r3, #0
 800d244:	d017      	beq.n	800d276 <HAL_SPI_TransmitReceive+0x26c>
 800d246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d114      	bne.n	800d276 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	330c      	adds	r3, #12
 800d256:	7812      	ldrb	r2, [r2, #0]
 800d258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d268:	b29b      	uxth	r3, r3
 800d26a:	3b01      	subs	r3, #1
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d272:	2300      	movs	r3, #0
 800d274:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	f003 0301 	and.w	r3, r3, #1
 800d280:	2b01      	cmp	r3, #1
 800d282:	d119      	bne.n	800d2b8 <HAL_SPI_TransmitReceive+0x2ae>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d288:	b29b      	uxth	r3, r3
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d014      	beq.n	800d2b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	68da      	ldr	r2, [r3, #12]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d298:	b2d2      	uxtb	r2, r2
 800d29a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d2b8:	f7fb f818 	bl	80082ec <HAL_GetTick>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d803      	bhi.n	800d2d0 <HAL_SPI_TransmitReceive+0x2c6>
 800d2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ce:	d102      	bne.n	800d2d6 <HAL_SPI_TransmitReceive+0x2cc>
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d103      	bne.n	800d2de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d2dc:	e029      	b.n	800d332 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1a2      	bne.n	800d22e <HAL_SPI_TransmitReceive+0x224>
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d19d      	bne.n	800d22e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f000 f8f8 	bl	800d4ec <SPI_EndRxTxTransaction>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d006      	beq.n	800d310 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2220      	movs	r2, #32
 800d30c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d30e:	e010      	b.n	800d332 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10b      	bne.n	800d330 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d318:	2300      	movs	r3, #0
 800d31a:	617b      	str	r3, [r7, #20]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	617b      	str	r3, [r7, #20]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	617b      	str	r3, [r7, #20]
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	e000      	b.n	800d332 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d330:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2201      	movs	r2, #1
 800d336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2200      	movs	r2, #0
 800d33e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d342:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d346:	4618      	mov	r0, r3
 800d348:	3730      	adds	r7, #48	; 0x30
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	60f8      	str	r0, [r7, #12]
 800d356:	60b9      	str	r1, [r7, #8]
 800d358:	603b      	str	r3, [r7, #0]
 800d35a:	4613      	mov	r3, r2
 800d35c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d35e:	e04c      	b.n	800d3fa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d366:	d048      	beq.n	800d3fa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d368:	f7fa ffc0 	bl	80082ec <HAL_GetTick>
 800d36c:	4602      	mov	r2, r0
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d902      	bls.n	800d37e <SPI_WaitFlagStateUntilTimeout+0x30>
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d13d      	bne.n	800d3fa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d38c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d396:	d111      	bne.n	800d3bc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3a0:	d004      	beq.n	800d3ac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3aa:	d107      	bne.n	800d3bc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3c4:	d10f      	bne.n	800d3e6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3d4:	601a      	str	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d3f6:	2303      	movs	r3, #3
 800d3f8:	e00f      	b.n	800d41a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	689a      	ldr	r2, [r3, #8]
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	4013      	ands	r3, r2
 800d404:	68ba      	ldr	r2, [r7, #8]
 800d406:	429a      	cmp	r2, r3
 800d408:	bf0c      	ite	eq
 800d40a:	2301      	moveq	r3, #1
 800d40c:	2300      	movne	r3, #0
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	461a      	mov	r2, r3
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	429a      	cmp	r2, r3
 800d416:	d1a3      	bne.n	800d360 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b086      	sub	sp, #24
 800d426:	af02      	add	r7, sp, #8
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d436:	d111      	bne.n	800d45c <SPI_EndRxTransaction+0x3a>
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d440:	d004      	beq.n	800d44c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d44a:	d107      	bne.n	800d45c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d45a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d464:	d12a      	bne.n	800d4bc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d46e:	d012      	beq.n	800d496 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2200      	movs	r2, #0
 800d478:	2180      	movs	r1, #128	; 0x80
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f7ff ff67 	bl	800d34e <SPI_WaitFlagStateUntilTimeout>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d02d      	beq.n	800d4e2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d48a:	f043 0220 	orr.w	r2, r3, #32
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d492:	2303      	movs	r3, #3
 800d494:	e026      	b.n	800d4e4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2200      	movs	r2, #0
 800d49e:	2101      	movs	r1, #1
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f7ff ff54 	bl	800d34e <SPI_WaitFlagStateUntilTimeout>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d01a      	beq.n	800d4e2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4b0:	f043 0220 	orr.w	r2, r3, #32
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d4b8:	2303      	movs	r3, #3
 800d4ba:	e013      	b.n	800d4e4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f7ff ff41 	bl	800d34e <SPI_WaitFlagStateUntilTimeout>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d007      	beq.n	800d4e2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4d6:	f043 0220 	orr.w	r2, r3, #32
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d4de:	2303      	movs	r3, #3
 800d4e0:	e000      	b.n	800d4e4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3710      	adds	r7, #16
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b088      	sub	sp, #32
 800d4f0:	af02      	add	r7, sp, #8
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d4f8:	4b1b      	ldr	r3, [pc, #108]	; (800d568 <SPI_EndRxTxTransaction+0x7c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a1b      	ldr	r2, [pc, #108]	; (800d56c <SPI_EndRxTxTransaction+0x80>)
 800d4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d502:	0d5b      	lsrs	r3, r3, #21
 800d504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d508:	fb02 f303 	mul.w	r3, r2, r3
 800d50c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d516:	d112      	bne.n	800d53e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2200      	movs	r2, #0
 800d520:	2180      	movs	r1, #128	; 0x80
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f7ff ff13 	bl	800d34e <SPI_WaitFlagStateUntilTimeout>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d016      	beq.n	800d55c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d532:	f043 0220 	orr.w	r2, r3, #32
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d53a:	2303      	movs	r3, #3
 800d53c:	e00f      	b.n	800d55e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00a      	beq.n	800d55a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	3b01      	subs	r3, #1
 800d548:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d554:	2b80      	cmp	r3, #128	; 0x80
 800d556:	d0f2      	beq.n	800d53e <SPI_EndRxTxTransaction+0x52>
 800d558:	e000      	b.n	800d55c <SPI_EndRxTxTransaction+0x70>
        break;
 800d55a:	bf00      	nop
  }

  return HAL_OK;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3718      	adds	r7, #24
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	20000000 	.word	0x20000000
 800d56c:	165e9f81 	.word	0x165e9f81

0800d570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d101      	bne.n	800d582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d57e:	2301      	movs	r3, #1
 800d580:	e01d      	b.n	800d5be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d106      	bne.n	800d59c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7f9 f8c8 	bl	800672c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2202      	movs	r2, #2
 800d5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3304      	adds	r3, #4
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	f000 fb56 	bl	800dc60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d5c6:	b480      	push	{r7}
 800d5c8:	b085      	sub	sp, #20
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68da      	ldr	r2, [r3, #12]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f042 0201 	orr.w	r2, r2, #1
 800d5dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	f003 0307 	and.w	r3, r3, #7
 800d5e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2b06      	cmp	r3, #6
 800d5ee:	d007      	beq.n	800d600 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f042 0201 	orr.w	r2, r2, #1
 800d5fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b082      	sub	sp, #8
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d101      	bne.n	800d620 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	e01d      	b.n	800d65c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d106      	bne.n	800d63a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7f9 f805 	bl	8006644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2202      	movs	r2, #2
 800d63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	3304      	adds	r3, #4
 800d64a:	4619      	mov	r1, r3
 800d64c:	4610      	mov	r0, r2
 800d64e:	f000 fb07 	bl	800dc60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	2201      	movs	r2, #1
 800d674:	6839      	ldr	r1, [r7, #0]
 800d676:	4618      	mov	r0, r3
 800d678:	f000 fd42 	bl	800e100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a15      	ldr	r2, [pc, #84]	; (800d6d8 <HAL_TIM_PWM_Start+0x74>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d004      	beq.n	800d690 <HAL_TIM_PWM_Start+0x2c>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a14      	ldr	r2, [pc, #80]	; (800d6dc <HAL_TIM_PWM_Start+0x78>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d101      	bne.n	800d694 <HAL_TIM_PWM_Start+0x30>
 800d690:	2301      	movs	r3, #1
 800d692:	e000      	b.n	800d696 <HAL_TIM_PWM_Start+0x32>
 800d694:	2300      	movs	r3, #0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d007      	beq.n	800d6aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d6a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	f003 0307 	and.w	r3, r3, #7
 800d6b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2b06      	cmp	r3, #6
 800d6ba:	d007      	beq.n	800d6cc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f042 0201 	orr.w	r2, r2, #1
 800d6ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	40010000 	.word	0x40010000
 800d6dc:	40010400 	.word	0x40010400

0800d6e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e083      	b.n	800d7fc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d106      	bne.n	800d70e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7f9 f89f 	bl	800684c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2202      	movs	r2, #2
 800d712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	6812      	ldr	r2, [r2, #0]
 800d720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d724:	f023 0307 	bic.w	r3, r3, #7
 800d728:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	3304      	adds	r3, #4
 800d732:	4619      	mov	r1, r3
 800d734:	4610      	mov	r0, r2
 800d736:	f000 fa93 	bl	800dc60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	699b      	ldr	r3, [r3, #24]
 800d748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6a1b      	ldr	r3, [r3, #32]
 800d750:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	697a      	ldr	r2, [r7, #20]
 800d758:	4313      	orrs	r3, r2
 800d75a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d762:	f023 0303 	bic.w	r3, r3, #3
 800d766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	689a      	ldr	r2, [r3, #8]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	699b      	ldr	r3, [r3, #24]
 800d770:	021b      	lsls	r3, r3, #8
 800d772:	4313      	orrs	r3, r2
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	4313      	orrs	r3, r2
 800d778:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d780:	f023 030c 	bic.w	r3, r3, #12
 800d784:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d78c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	68da      	ldr	r2, [r3, #12]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	021b      	lsls	r3, r3, #8
 800d79c:	4313      	orrs	r3, r2
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	011a      	lsls	r2, r3, #4
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	031b      	lsls	r3, r3, #12
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	693a      	ldr	r2, [r7, #16]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d7be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d7c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	695b      	ldr	r3, [r3, #20]
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	693a      	ldr	r2, [r7, #16]
 800d7e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d7fa:	2300      	movs	r3, #0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3718      	adds	r7, #24
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <HAL_TIM_Encoder_Start+0x16>
 800d814:	2b04      	cmp	r3, #4
 800d816:	d008      	beq.n	800d82a <HAL_TIM_Encoder_Start+0x26>
 800d818:	e00f      	b.n	800d83a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2201      	movs	r2, #1
 800d820:	2100      	movs	r1, #0
 800d822:	4618      	mov	r0, r3
 800d824:	f000 fc6c 	bl	800e100 <TIM_CCxChannelCmd>
      break;
 800d828:	e016      	b.n	800d858 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2201      	movs	r2, #1
 800d830:	2104      	movs	r1, #4
 800d832:	4618      	mov	r0, r3
 800d834:	f000 fc64 	bl	800e100 <TIM_CCxChannelCmd>
      break;
 800d838:	e00e      	b.n	800d858 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2201      	movs	r2, #1
 800d840:	2100      	movs	r1, #0
 800d842:	4618      	mov	r0, r3
 800d844:	f000 fc5c 	bl	800e100 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2201      	movs	r2, #1
 800d84e:	2104      	movs	r1, #4
 800d850:	4618      	mov	r0, r3
 800d852:	f000 fc55 	bl	800e100 <TIM_CCxChannelCmd>
      break;
 800d856:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f042 0201 	orr.w	r2, r2, #1
 800d866:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b082      	sub	sp, #8
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	f003 0302 	and.w	r3, r3, #2
 800d884:	2b02      	cmp	r3, #2
 800d886:	d122      	bne.n	800d8ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	f003 0302 	and.w	r3, r3, #2
 800d892:	2b02      	cmp	r3, #2
 800d894:	d11b      	bne.n	800d8ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f06f 0202 	mvn.w	r2, #2
 800d89e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	699b      	ldr	r3, [r3, #24]
 800d8ac:	f003 0303 	and.w	r3, r3, #3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d003      	beq.n	800d8bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 f9b5 	bl	800dc24 <HAL_TIM_IC_CaptureCallback>
 800d8ba:	e005      	b.n	800d8c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f9a7 	bl	800dc10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f9b8 	bl	800dc38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	f003 0304 	and.w	r3, r3, #4
 800d8d8:	2b04      	cmp	r3, #4
 800d8da:	d122      	bne.n	800d922 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	f003 0304 	and.w	r3, r3, #4
 800d8e6:	2b04      	cmp	r3, #4
 800d8e8:	d11b      	bne.n	800d922 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f06f 0204 	mvn.w	r2, #4
 800d8f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2202      	movs	r2, #2
 800d8f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d904:	2b00      	cmp	r3, #0
 800d906:	d003      	beq.n	800d910 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 f98b 	bl	800dc24 <HAL_TIM_IC_CaptureCallback>
 800d90e:	e005      	b.n	800d91c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 f97d 	bl	800dc10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 f98e 	bl	800dc38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	691b      	ldr	r3, [r3, #16]
 800d928:	f003 0308 	and.w	r3, r3, #8
 800d92c:	2b08      	cmp	r3, #8
 800d92e:	d122      	bne.n	800d976 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	f003 0308 	and.w	r3, r3, #8
 800d93a:	2b08      	cmp	r3, #8
 800d93c:	d11b      	bne.n	800d976 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f06f 0208 	mvn.w	r2, #8
 800d946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2204      	movs	r2, #4
 800d94c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	69db      	ldr	r3, [r3, #28]
 800d954:	f003 0303 	and.w	r3, r3, #3
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d003      	beq.n	800d964 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 f961 	bl	800dc24 <HAL_TIM_IC_CaptureCallback>
 800d962:	e005      	b.n	800d970 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 f953 	bl	800dc10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f964 	bl	800dc38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	691b      	ldr	r3, [r3, #16]
 800d97c:	f003 0310 	and.w	r3, r3, #16
 800d980:	2b10      	cmp	r3, #16
 800d982:	d122      	bne.n	800d9ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	f003 0310 	and.w	r3, r3, #16
 800d98e:	2b10      	cmp	r3, #16
 800d990:	d11b      	bne.n	800d9ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f06f 0210 	mvn.w	r2, #16
 800d99a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2208      	movs	r2, #8
 800d9a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	69db      	ldr	r3, [r3, #28]
 800d9a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d003      	beq.n	800d9b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f937 	bl	800dc24 <HAL_TIM_IC_CaptureCallback>
 800d9b6:	e005      	b.n	800d9c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 f929 	bl	800dc10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 f93a 	bl	800dc38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	f003 0301 	and.w	r3, r3, #1
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d10e      	bne.n	800d9f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d107      	bne.n	800d9f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f06f 0201 	mvn.w	r2, #1
 800d9ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7f7 fc15 	bl	8005220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da00:	2b80      	cmp	r3, #128	; 0x80
 800da02:	d10e      	bne.n	800da22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da0e:	2b80      	cmp	r3, #128	; 0x80
 800da10:	d107      	bne.n	800da22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 fc6d 	bl	800e2fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da2c:	2b40      	cmp	r3, #64	; 0x40
 800da2e:	d10e      	bne.n	800da4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da3a:	2b40      	cmp	r3, #64	; 0x40
 800da3c:	d107      	bne.n	800da4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f8ff 	bl	800dc4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	f003 0320 	and.w	r3, r3, #32
 800da58:	2b20      	cmp	r3, #32
 800da5a:	d10e      	bne.n	800da7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	f003 0320 	and.w	r3, r3, #32
 800da66:	2b20      	cmp	r3, #32
 800da68:	d107      	bne.n	800da7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f06f 0220 	mvn.w	r2, #32
 800da72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 fc37 	bl	800e2e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800da7a:	bf00      	nop
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
	...

0800da84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da96:	2b01      	cmp	r3, #1
 800da98:	d101      	bne.n	800da9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800da9a:	2302      	movs	r3, #2
 800da9c:	e0b4      	b.n	800dc08 <HAL_TIM_PWM_ConfigChannel+0x184>
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2202      	movs	r2, #2
 800daaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b0c      	cmp	r3, #12
 800dab2:	f200 809f 	bhi.w	800dbf4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800dab6:	a201      	add	r2, pc, #4	; (adr r2, 800dabc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800dab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dabc:	0800daf1 	.word	0x0800daf1
 800dac0:	0800dbf5 	.word	0x0800dbf5
 800dac4:	0800dbf5 	.word	0x0800dbf5
 800dac8:	0800dbf5 	.word	0x0800dbf5
 800dacc:	0800db31 	.word	0x0800db31
 800dad0:	0800dbf5 	.word	0x0800dbf5
 800dad4:	0800dbf5 	.word	0x0800dbf5
 800dad8:	0800dbf5 	.word	0x0800dbf5
 800dadc:	0800db73 	.word	0x0800db73
 800dae0:	0800dbf5 	.word	0x0800dbf5
 800dae4:	0800dbf5 	.word	0x0800dbf5
 800dae8:	0800dbf5 	.word	0x0800dbf5
 800daec:	0800dbb3 	.word	0x0800dbb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	68b9      	ldr	r1, [r7, #8]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f000 f952 	bl	800dda0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	699a      	ldr	r2, [r3, #24]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f042 0208 	orr.w	r2, r2, #8
 800db0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	699a      	ldr	r2, [r3, #24]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f022 0204 	bic.w	r2, r2, #4
 800db1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6999      	ldr	r1, [r3, #24]
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	691a      	ldr	r2, [r3, #16]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	430a      	orrs	r2, r1
 800db2c:	619a      	str	r2, [r3, #24]
      break;
 800db2e:	e062      	b.n	800dbf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68b9      	ldr	r1, [r7, #8]
 800db36:	4618      	mov	r0, r3
 800db38:	f000 f9a2 	bl	800de80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	699a      	ldr	r2, [r3, #24]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	699a      	ldr	r2, [r3, #24]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	6999      	ldr	r1, [r3, #24]
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	021a      	lsls	r2, r3, #8
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	430a      	orrs	r2, r1
 800db6e:	619a      	str	r2, [r3, #24]
      break;
 800db70:	e041      	b.n	800dbf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	68b9      	ldr	r1, [r7, #8]
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 f9f7 	bl	800df6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	69da      	ldr	r2, [r3, #28]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f042 0208 	orr.w	r2, r2, #8
 800db8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	69da      	ldr	r2, [r3, #28]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f022 0204 	bic.w	r2, r2, #4
 800db9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	69d9      	ldr	r1, [r3, #28]
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	691a      	ldr	r2, [r3, #16]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	430a      	orrs	r2, r1
 800dbae:	61da      	str	r2, [r3, #28]
      break;
 800dbb0:	e021      	b.n	800dbf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	68b9      	ldr	r1, [r7, #8]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f000 fa4b 	bl	800e054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	69da      	ldr	r2, [r3, #28]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	69da      	ldr	r2, [r3, #28]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	69d9      	ldr	r1, [r3, #28]
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	021a      	lsls	r2, r3, #8
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	61da      	str	r2, [r3, #28]
      break;
 800dbf2:	e000      	b.n	800dbf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800dbf4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc2c:	bf00      	nop
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc40:	bf00      	nop
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4a40      	ldr	r2, [pc, #256]	; (800dd74 <TIM_Base_SetConfig+0x114>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d013      	beq.n	800dca0 <TIM_Base_SetConfig+0x40>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc7e:	d00f      	beq.n	800dca0 <TIM_Base_SetConfig+0x40>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	4a3d      	ldr	r2, [pc, #244]	; (800dd78 <TIM_Base_SetConfig+0x118>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d00b      	beq.n	800dca0 <TIM_Base_SetConfig+0x40>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4a3c      	ldr	r2, [pc, #240]	; (800dd7c <TIM_Base_SetConfig+0x11c>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d007      	beq.n	800dca0 <TIM_Base_SetConfig+0x40>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4a3b      	ldr	r2, [pc, #236]	; (800dd80 <TIM_Base_SetConfig+0x120>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d003      	beq.n	800dca0 <TIM_Base_SetConfig+0x40>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	4a3a      	ldr	r2, [pc, #232]	; (800dd84 <TIM_Base_SetConfig+0x124>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d108      	bne.n	800dcb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4a2f      	ldr	r2, [pc, #188]	; (800dd74 <TIM_Base_SetConfig+0x114>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d02b      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcc0:	d027      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4a2c      	ldr	r2, [pc, #176]	; (800dd78 <TIM_Base_SetConfig+0x118>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d023      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4a2b      	ldr	r2, [pc, #172]	; (800dd7c <TIM_Base_SetConfig+0x11c>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d01f      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4a2a      	ldr	r2, [pc, #168]	; (800dd80 <TIM_Base_SetConfig+0x120>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d01b      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4a29      	ldr	r2, [pc, #164]	; (800dd84 <TIM_Base_SetConfig+0x124>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d017      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a28      	ldr	r2, [pc, #160]	; (800dd88 <TIM_Base_SetConfig+0x128>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d013      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a27      	ldr	r2, [pc, #156]	; (800dd8c <TIM_Base_SetConfig+0x12c>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d00f      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a26      	ldr	r2, [pc, #152]	; (800dd90 <TIM_Base_SetConfig+0x130>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d00b      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a25      	ldr	r2, [pc, #148]	; (800dd94 <TIM_Base_SetConfig+0x134>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d007      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a24      	ldr	r2, [pc, #144]	; (800dd98 <TIM_Base_SetConfig+0x138>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d003      	beq.n	800dd12 <TIM_Base_SetConfig+0xb2>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a23      	ldr	r2, [pc, #140]	; (800dd9c <TIM_Base_SetConfig+0x13c>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d108      	bne.n	800dd24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	4313      	orrs	r3, r2
 800dd22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	689a      	ldr	r2, [r3, #8]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4a0a      	ldr	r2, [pc, #40]	; (800dd74 <TIM_Base_SetConfig+0x114>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d003      	beq.n	800dd58 <TIM_Base_SetConfig+0xf8>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a0c      	ldr	r2, [pc, #48]	; (800dd84 <TIM_Base_SetConfig+0x124>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d103      	bne.n	800dd60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	691a      	ldr	r2, [r3, #16]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2201      	movs	r2, #1
 800dd64:	615a      	str	r2, [r3, #20]
}
 800dd66:	bf00      	nop
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	40010000 	.word	0x40010000
 800dd78:	40000400 	.word	0x40000400
 800dd7c:	40000800 	.word	0x40000800
 800dd80:	40000c00 	.word	0x40000c00
 800dd84:	40010400 	.word	0x40010400
 800dd88:	40014000 	.word	0x40014000
 800dd8c:	40014400 	.word	0x40014400
 800dd90:	40014800 	.word	0x40014800
 800dd94:	40001800 	.word	0x40001800
 800dd98:	40001c00 	.word	0x40001c00
 800dd9c:	40002000 	.word	0x40002000

0800dda0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b087      	sub	sp, #28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	f023 0201 	bic.w	r2, r3, #1
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a1b      	ldr	r3, [r3, #32]
 800ddba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	685b      	ldr	r3, [r3, #4]
 800ddc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f023 0303 	bic.w	r3, r3, #3
 800ddd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68fa      	ldr	r2, [r7, #12]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f023 0302 	bic.w	r3, r3, #2
 800dde8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	697a      	ldr	r2, [r7, #20]
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a20      	ldr	r2, [pc, #128]	; (800de78 <TIM_OC1_SetConfig+0xd8>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d003      	beq.n	800de04 <TIM_OC1_SetConfig+0x64>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a1f      	ldr	r2, [pc, #124]	; (800de7c <TIM_OC1_SetConfig+0xdc>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d10c      	bne.n	800de1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	f023 0308 	bic.w	r3, r3, #8
 800de0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	697a      	ldr	r2, [r7, #20]
 800de12:	4313      	orrs	r3, r2
 800de14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f023 0304 	bic.w	r3, r3, #4
 800de1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4a15      	ldr	r2, [pc, #84]	; (800de78 <TIM_OC1_SetConfig+0xd8>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d003      	beq.n	800de2e <TIM_OC1_SetConfig+0x8e>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a14      	ldr	r2, [pc, #80]	; (800de7c <TIM_OC1_SetConfig+0xdc>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d111      	bne.n	800de52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	695b      	ldr	r3, [r3, #20]
 800de42:	693a      	ldr	r2, [r7, #16]
 800de44:	4313      	orrs	r3, r2
 800de46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	693a      	ldr	r2, [r7, #16]
 800de4e:	4313      	orrs	r3, r2
 800de50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	685a      	ldr	r2, [r3, #4]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	697a      	ldr	r2, [r7, #20]
 800de6a:	621a      	str	r2, [r3, #32]
}
 800de6c:	bf00      	nop
 800de6e:	371c      	adds	r7, #28
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr
 800de78:	40010000 	.word	0x40010000
 800de7c:	40010400 	.word	0x40010400

0800de80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de80:	b480      	push	{r7}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6a1b      	ldr	r3, [r3, #32]
 800de8e:	f023 0210 	bic.w	r2, r3, #16
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800deae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800deb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	021b      	lsls	r3, r3, #8
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	4313      	orrs	r3, r2
 800dec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	f023 0320 	bic.w	r3, r3, #32
 800deca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	011b      	lsls	r3, r3, #4
 800ded2:	697a      	ldr	r2, [r7, #20]
 800ded4:	4313      	orrs	r3, r2
 800ded6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a22      	ldr	r2, [pc, #136]	; (800df64 <TIM_OC2_SetConfig+0xe4>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d003      	beq.n	800dee8 <TIM_OC2_SetConfig+0x68>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	4a21      	ldr	r2, [pc, #132]	; (800df68 <TIM_OC2_SetConfig+0xe8>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d10d      	bne.n	800df04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800deee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	011b      	lsls	r3, r3, #4
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	4313      	orrs	r3, r2
 800defa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4a17      	ldr	r2, [pc, #92]	; (800df64 <TIM_OC2_SetConfig+0xe4>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d003      	beq.n	800df14 <TIM_OC2_SetConfig+0x94>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	4a16      	ldr	r2, [pc, #88]	; (800df68 <TIM_OC2_SetConfig+0xe8>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d113      	bne.n	800df3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	695b      	ldr	r3, [r3, #20]
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	693a      	ldr	r2, [r7, #16]
 800df2c:	4313      	orrs	r3, r2
 800df2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	699b      	ldr	r3, [r3, #24]
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	693a      	ldr	r2, [r7, #16]
 800df38:	4313      	orrs	r3, r2
 800df3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	621a      	str	r2, [r3, #32]
}
 800df56:	bf00      	nop
 800df58:	371c      	adds	r7, #28
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	40010000 	.word	0x40010000
 800df68:	40010400 	.word	0x40010400

0800df6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b087      	sub	sp, #28
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a1b      	ldr	r3, [r3, #32]
 800df7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a1b      	ldr	r3, [r3, #32]
 800df86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	69db      	ldr	r3, [r3, #28]
 800df92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f023 0303 	bic.w	r3, r3, #3
 800dfa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dfb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	021b      	lsls	r3, r3, #8
 800dfbc:	697a      	ldr	r2, [r7, #20]
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	4a21      	ldr	r2, [pc, #132]	; (800e04c <TIM_OC3_SetConfig+0xe0>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d003      	beq.n	800dfd2 <TIM_OC3_SetConfig+0x66>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	4a20      	ldr	r2, [pc, #128]	; (800e050 <TIM_OC3_SetConfig+0xe4>)
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d10d      	bne.n	800dfee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	021b      	lsls	r3, r3, #8
 800dfe0:	697a      	ldr	r2, [r7, #20]
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dfec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a16      	ldr	r2, [pc, #88]	; (800e04c <TIM_OC3_SetConfig+0xe0>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d003      	beq.n	800dffe <TIM_OC3_SetConfig+0x92>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a15      	ldr	r2, [pc, #84]	; (800e050 <TIM_OC3_SetConfig+0xe4>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d113      	bne.n	800e026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	011b      	lsls	r3, r3, #4
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	4313      	orrs	r3, r2
 800e018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	4313      	orrs	r3, r2
 800e024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	693a      	ldr	r2, [r7, #16]
 800e02a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	685a      	ldr	r2, [r3, #4]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	697a      	ldr	r2, [r7, #20]
 800e03e:	621a      	str	r2, [r3, #32]
}
 800e040:	bf00      	nop
 800e042:	371c      	adds	r7, #28
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr
 800e04c:	40010000 	.word	0x40010000
 800e050:	40010400 	.word	0x40010400

0800e054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e054:	b480      	push	{r7}
 800e056:	b087      	sub	sp, #28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a1b      	ldr	r3, [r3, #32]
 800e062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a1b      	ldr	r3, [r3, #32]
 800e06e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	69db      	ldr	r3, [r3, #28]
 800e07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e08a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	021b      	lsls	r3, r3, #8
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	4313      	orrs	r3, r2
 800e096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e09e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	031b      	lsls	r3, r3, #12
 800e0a6:	693a      	ldr	r2, [r7, #16]
 800e0a8:	4313      	orrs	r3, r2
 800e0aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4a12      	ldr	r2, [pc, #72]	; (800e0f8 <TIM_OC4_SetConfig+0xa4>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d003      	beq.n	800e0bc <TIM_OC4_SetConfig+0x68>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4a11      	ldr	r2, [pc, #68]	; (800e0fc <TIM_OC4_SetConfig+0xa8>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d109      	bne.n	800e0d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	695b      	ldr	r3, [r3, #20]
 800e0c8:	019b      	lsls	r3, r3, #6
 800e0ca:	697a      	ldr	r2, [r7, #20]
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	685a      	ldr	r2, [r3, #4]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	693a      	ldr	r2, [r7, #16]
 800e0e8:	621a      	str	r2, [r3, #32]
}
 800e0ea:	bf00      	nop
 800e0ec:	371c      	adds	r7, #28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	40010000 	.word	0x40010000
 800e0fc:	40010400 	.word	0x40010400

0800e100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e100:	b480      	push	{r7}
 800e102:	b087      	sub	sp, #28
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	f003 031f 	and.w	r3, r3, #31
 800e112:	2201      	movs	r2, #1
 800e114:	fa02 f303 	lsl.w	r3, r2, r3
 800e118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6a1a      	ldr	r2, [r3, #32]
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	43db      	mvns	r3, r3
 800e122:	401a      	ands	r2, r3
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6a1a      	ldr	r2, [r3, #32]
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	f003 031f 	and.w	r3, r3, #31
 800e132:	6879      	ldr	r1, [r7, #4]
 800e134:	fa01 f303 	lsl.w	r3, r1, r3
 800e138:	431a      	orrs	r2, r3
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	621a      	str	r2, [r3, #32]
}
 800e13e:	bf00      	nop
 800e140:	371c      	adds	r7, #28
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
	...

0800e14c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d101      	bne.n	800e164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e160:	2302      	movs	r3, #2
 800e162:	e05a      	b.n	800e21a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2202      	movs	r2, #2
 800e170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e18a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	4313      	orrs	r3, r2
 800e194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4a21      	ldr	r2, [pc, #132]	; (800e228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d022      	beq.n	800e1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1b0:	d01d      	beq.n	800e1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4a1d      	ldr	r2, [pc, #116]	; (800e22c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d018      	beq.n	800e1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a1b      	ldr	r2, [pc, #108]	; (800e230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d013      	beq.n	800e1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a1a      	ldr	r2, [pc, #104]	; (800e234 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d00e      	beq.n	800e1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a18      	ldr	r2, [pc, #96]	; (800e238 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d009      	beq.n	800e1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	4a17      	ldr	r2, [pc, #92]	; (800e23c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d004      	beq.n	800e1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a15      	ldr	r2, [pc, #84]	; (800e240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d10c      	bne.n	800e208 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	68ba      	ldr	r2, [r7, #8]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68ba      	ldr	r2, [r7, #8]
 800e206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e218:	2300      	movs	r3, #0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3714      	adds	r7, #20
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop
 800e228:	40010000 	.word	0x40010000
 800e22c:	40000400 	.word	0x40000400
 800e230:	40000800 	.word	0x40000800
 800e234:	40000c00 	.word	0x40000c00
 800e238:	40010400 	.word	0x40010400
 800e23c:	40014000 	.word	0x40014000
 800e240:	40001800 	.word	0x40001800

0800e244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e244:	b480      	push	{r7}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e24e:	2300      	movs	r3, #0
 800e250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d101      	bne.n	800e260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e25c:	2302      	movs	r3, #2
 800e25e:	e03d      	b.n	800e2dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	4313      	orrs	r3, r2
 800e274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	4313      	orrs	r3, r2
 800e282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	4313      	orrs	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4313      	orrs	r3, r2
 800e29e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	691b      	ldr	r3, [r3, #16]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	695b      	ldr	r3, [r3, #20]
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	69db      	ldr	r3, [r3, #28]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2da:	2300      	movs	r3, #0
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d101      	bne.n	800e322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	e03f      	b.n	800e3a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d106      	bne.n	800e33c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2200      	movs	r2, #0
 800e332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7f8 fbb2 	bl	8006aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2224      	movs	r2, #36	; 0x24
 800e340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	68da      	ldr	r2, [r3, #12]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 f829 	bl	800e3ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	691a      	ldr	r2, [r3, #16]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	695a      	ldr	r2, [r3, #20]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	68da      	ldr	r2, [r3, #12]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2220      	movs	r2, #32
 800e394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2220      	movs	r2, #32
 800e39c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e3a0:	2300      	movs	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
	...

0800e3ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b0:	b085      	sub	sp, #20
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	691b      	ldr	r3, [r3, #16]
 800e3bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	68da      	ldr	r2, [r3, #12]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	689a      	ldr	r2, [r3, #8]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	431a      	orrs	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	695b      	ldr	r3, [r3, #20]
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	69db      	ldr	r3, [r3, #28]
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e3ee:	f023 030c 	bic.w	r3, r3, #12
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	6812      	ldr	r2, [r2, #0]
 800e3f6:	68f9      	ldr	r1, [r7, #12]
 800e3f8:	430b      	orrs	r3, r1
 800e3fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	695b      	ldr	r3, [r3, #20]
 800e402:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	699a      	ldr	r2, [r3, #24]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	430a      	orrs	r2, r1
 800e410:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	69db      	ldr	r3, [r3, #28]
 800e416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e41a:	f040 818b 	bne.w	800e734 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4ac1      	ldr	r2, [pc, #772]	; (800e728 <UART_SetConfig+0x37c>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d005      	beq.n	800e434 <UART_SetConfig+0x88>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4abf      	ldr	r2, [pc, #764]	; (800e72c <UART_SetConfig+0x380>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	f040 80bd 	bne.w	800e5ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e434:	f7fc fbcc 	bl	800abd0 <HAL_RCC_GetPCLK2Freq>
 800e438:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	461d      	mov	r5, r3
 800e43e:	f04f 0600 	mov.w	r6, #0
 800e442:	46a8      	mov	r8, r5
 800e444:	46b1      	mov	r9, r6
 800e446:	eb18 0308 	adds.w	r3, r8, r8
 800e44a:	eb49 0409 	adc.w	r4, r9, r9
 800e44e:	4698      	mov	r8, r3
 800e450:	46a1      	mov	r9, r4
 800e452:	eb18 0805 	adds.w	r8, r8, r5
 800e456:	eb49 0906 	adc.w	r9, r9, r6
 800e45a:	f04f 0100 	mov.w	r1, #0
 800e45e:	f04f 0200 	mov.w	r2, #0
 800e462:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e466:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e46a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e46e:	4688      	mov	r8, r1
 800e470:	4691      	mov	r9, r2
 800e472:	eb18 0005 	adds.w	r0, r8, r5
 800e476:	eb49 0106 	adc.w	r1, r9, r6
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	461d      	mov	r5, r3
 800e480:	f04f 0600 	mov.w	r6, #0
 800e484:	196b      	adds	r3, r5, r5
 800e486:	eb46 0406 	adc.w	r4, r6, r6
 800e48a:	461a      	mov	r2, r3
 800e48c:	4623      	mov	r3, r4
 800e48e:	f7f2 fc13 	bl	8000cb8 <__aeabi_uldivmod>
 800e492:	4603      	mov	r3, r0
 800e494:	460c      	mov	r4, r1
 800e496:	461a      	mov	r2, r3
 800e498:	4ba5      	ldr	r3, [pc, #660]	; (800e730 <UART_SetConfig+0x384>)
 800e49a:	fba3 2302 	umull	r2, r3, r3, r2
 800e49e:	095b      	lsrs	r3, r3, #5
 800e4a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	461d      	mov	r5, r3
 800e4a8:	f04f 0600 	mov.w	r6, #0
 800e4ac:	46a9      	mov	r9, r5
 800e4ae:	46b2      	mov	sl, r6
 800e4b0:	eb19 0309 	adds.w	r3, r9, r9
 800e4b4:	eb4a 040a 	adc.w	r4, sl, sl
 800e4b8:	4699      	mov	r9, r3
 800e4ba:	46a2      	mov	sl, r4
 800e4bc:	eb19 0905 	adds.w	r9, r9, r5
 800e4c0:	eb4a 0a06 	adc.w	sl, sl, r6
 800e4c4:	f04f 0100 	mov.w	r1, #0
 800e4c8:	f04f 0200 	mov.w	r2, #0
 800e4cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e4d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e4d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e4d8:	4689      	mov	r9, r1
 800e4da:	4692      	mov	sl, r2
 800e4dc:	eb19 0005 	adds.w	r0, r9, r5
 800e4e0:	eb4a 0106 	adc.w	r1, sl, r6
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	461d      	mov	r5, r3
 800e4ea:	f04f 0600 	mov.w	r6, #0
 800e4ee:	196b      	adds	r3, r5, r5
 800e4f0:	eb46 0406 	adc.w	r4, r6, r6
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	4623      	mov	r3, r4
 800e4f8:	f7f2 fbde 	bl	8000cb8 <__aeabi_uldivmod>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	460c      	mov	r4, r1
 800e500:	461a      	mov	r2, r3
 800e502:	4b8b      	ldr	r3, [pc, #556]	; (800e730 <UART_SetConfig+0x384>)
 800e504:	fba3 1302 	umull	r1, r3, r3, r2
 800e508:	095b      	lsrs	r3, r3, #5
 800e50a:	2164      	movs	r1, #100	; 0x64
 800e50c:	fb01 f303 	mul.w	r3, r1, r3
 800e510:	1ad3      	subs	r3, r2, r3
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	3332      	adds	r3, #50	; 0x32
 800e516:	4a86      	ldr	r2, [pc, #536]	; (800e730 <UART_SetConfig+0x384>)
 800e518:	fba2 2303 	umull	r2, r3, r2, r3
 800e51c:	095b      	lsrs	r3, r3, #5
 800e51e:	005b      	lsls	r3, r3, #1
 800e520:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e524:	4498      	add	r8, r3
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	461d      	mov	r5, r3
 800e52a:	f04f 0600 	mov.w	r6, #0
 800e52e:	46a9      	mov	r9, r5
 800e530:	46b2      	mov	sl, r6
 800e532:	eb19 0309 	adds.w	r3, r9, r9
 800e536:	eb4a 040a 	adc.w	r4, sl, sl
 800e53a:	4699      	mov	r9, r3
 800e53c:	46a2      	mov	sl, r4
 800e53e:	eb19 0905 	adds.w	r9, r9, r5
 800e542:	eb4a 0a06 	adc.w	sl, sl, r6
 800e546:	f04f 0100 	mov.w	r1, #0
 800e54a:	f04f 0200 	mov.w	r2, #0
 800e54e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e552:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e556:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e55a:	4689      	mov	r9, r1
 800e55c:	4692      	mov	sl, r2
 800e55e:	eb19 0005 	adds.w	r0, r9, r5
 800e562:	eb4a 0106 	adc.w	r1, sl, r6
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	461d      	mov	r5, r3
 800e56c:	f04f 0600 	mov.w	r6, #0
 800e570:	196b      	adds	r3, r5, r5
 800e572:	eb46 0406 	adc.w	r4, r6, r6
 800e576:	461a      	mov	r2, r3
 800e578:	4623      	mov	r3, r4
 800e57a:	f7f2 fb9d 	bl	8000cb8 <__aeabi_uldivmod>
 800e57e:	4603      	mov	r3, r0
 800e580:	460c      	mov	r4, r1
 800e582:	461a      	mov	r2, r3
 800e584:	4b6a      	ldr	r3, [pc, #424]	; (800e730 <UART_SetConfig+0x384>)
 800e586:	fba3 1302 	umull	r1, r3, r3, r2
 800e58a:	095b      	lsrs	r3, r3, #5
 800e58c:	2164      	movs	r1, #100	; 0x64
 800e58e:	fb01 f303 	mul.w	r3, r1, r3
 800e592:	1ad3      	subs	r3, r2, r3
 800e594:	00db      	lsls	r3, r3, #3
 800e596:	3332      	adds	r3, #50	; 0x32
 800e598:	4a65      	ldr	r2, [pc, #404]	; (800e730 <UART_SetConfig+0x384>)
 800e59a:	fba2 2303 	umull	r2, r3, r2, r3
 800e59e:	095b      	lsrs	r3, r3, #5
 800e5a0:	f003 0207 	and.w	r2, r3, #7
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4442      	add	r2, r8
 800e5aa:	609a      	str	r2, [r3, #8]
 800e5ac:	e26f      	b.n	800ea8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e5ae:	f7fc fafb 	bl	800aba8 <HAL_RCC_GetPCLK1Freq>
 800e5b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	461d      	mov	r5, r3
 800e5b8:	f04f 0600 	mov.w	r6, #0
 800e5bc:	46a8      	mov	r8, r5
 800e5be:	46b1      	mov	r9, r6
 800e5c0:	eb18 0308 	adds.w	r3, r8, r8
 800e5c4:	eb49 0409 	adc.w	r4, r9, r9
 800e5c8:	4698      	mov	r8, r3
 800e5ca:	46a1      	mov	r9, r4
 800e5cc:	eb18 0805 	adds.w	r8, r8, r5
 800e5d0:	eb49 0906 	adc.w	r9, r9, r6
 800e5d4:	f04f 0100 	mov.w	r1, #0
 800e5d8:	f04f 0200 	mov.w	r2, #0
 800e5dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e5e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e5e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e5e8:	4688      	mov	r8, r1
 800e5ea:	4691      	mov	r9, r2
 800e5ec:	eb18 0005 	adds.w	r0, r8, r5
 800e5f0:	eb49 0106 	adc.w	r1, r9, r6
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	461d      	mov	r5, r3
 800e5fa:	f04f 0600 	mov.w	r6, #0
 800e5fe:	196b      	adds	r3, r5, r5
 800e600:	eb46 0406 	adc.w	r4, r6, r6
 800e604:	461a      	mov	r2, r3
 800e606:	4623      	mov	r3, r4
 800e608:	f7f2 fb56 	bl	8000cb8 <__aeabi_uldivmod>
 800e60c:	4603      	mov	r3, r0
 800e60e:	460c      	mov	r4, r1
 800e610:	461a      	mov	r2, r3
 800e612:	4b47      	ldr	r3, [pc, #284]	; (800e730 <UART_SetConfig+0x384>)
 800e614:	fba3 2302 	umull	r2, r3, r3, r2
 800e618:	095b      	lsrs	r3, r3, #5
 800e61a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	461d      	mov	r5, r3
 800e622:	f04f 0600 	mov.w	r6, #0
 800e626:	46a9      	mov	r9, r5
 800e628:	46b2      	mov	sl, r6
 800e62a:	eb19 0309 	adds.w	r3, r9, r9
 800e62e:	eb4a 040a 	adc.w	r4, sl, sl
 800e632:	4699      	mov	r9, r3
 800e634:	46a2      	mov	sl, r4
 800e636:	eb19 0905 	adds.w	r9, r9, r5
 800e63a:	eb4a 0a06 	adc.w	sl, sl, r6
 800e63e:	f04f 0100 	mov.w	r1, #0
 800e642:	f04f 0200 	mov.w	r2, #0
 800e646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e64a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e64e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e652:	4689      	mov	r9, r1
 800e654:	4692      	mov	sl, r2
 800e656:	eb19 0005 	adds.w	r0, r9, r5
 800e65a:	eb4a 0106 	adc.w	r1, sl, r6
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	461d      	mov	r5, r3
 800e664:	f04f 0600 	mov.w	r6, #0
 800e668:	196b      	adds	r3, r5, r5
 800e66a:	eb46 0406 	adc.w	r4, r6, r6
 800e66e:	461a      	mov	r2, r3
 800e670:	4623      	mov	r3, r4
 800e672:	f7f2 fb21 	bl	8000cb8 <__aeabi_uldivmod>
 800e676:	4603      	mov	r3, r0
 800e678:	460c      	mov	r4, r1
 800e67a:	461a      	mov	r2, r3
 800e67c:	4b2c      	ldr	r3, [pc, #176]	; (800e730 <UART_SetConfig+0x384>)
 800e67e:	fba3 1302 	umull	r1, r3, r3, r2
 800e682:	095b      	lsrs	r3, r3, #5
 800e684:	2164      	movs	r1, #100	; 0x64
 800e686:	fb01 f303 	mul.w	r3, r1, r3
 800e68a:	1ad3      	subs	r3, r2, r3
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	3332      	adds	r3, #50	; 0x32
 800e690:	4a27      	ldr	r2, [pc, #156]	; (800e730 <UART_SetConfig+0x384>)
 800e692:	fba2 2303 	umull	r2, r3, r2, r3
 800e696:	095b      	lsrs	r3, r3, #5
 800e698:	005b      	lsls	r3, r3, #1
 800e69a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e69e:	4498      	add	r8, r3
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	461d      	mov	r5, r3
 800e6a4:	f04f 0600 	mov.w	r6, #0
 800e6a8:	46a9      	mov	r9, r5
 800e6aa:	46b2      	mov	sl, r6
 800e6ac:	eb19 0309 	adds.w	r3, r9, r9
 800e6b0:	eb4a 040a 	adc.w	r4, sl, sl
 800e6b4:	4699      	mov	r9, r3
 800e6b6:	46a2      	mov	sl, r4
 800e6b8:	eb19 0905 	adds.w	r9, r9, r5
 800e6bc:	eb4a 0a06 	adc.w	sl, sl, r6
 800e6c0:	f04f 0100 	mov.w	r1, #0
 800e6c4:	f04f 0200 	mov.w	r2, #0
 800e6c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e6cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e6d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e6d4:	4689      	mov	r9, r1
 800e6d6:	4692      	mov	sl, r2
 800e6d8:	eb19 0005 	adds.w	r0, r9, r5
 800e6dc:	eb4a 0106 	adc.w	r1, sl, r6
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	461d      	mov	r5, r3
 800e6e6:	f04f 0600 	mov.w	r6, #0
 800e6ea:	196b      	adds	r3, r5, r5
 800e6ec:	eb46 0406 	adc.w	r4, r6, r6
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	4623      	mov	r3, r4
 800e6f4:	f7f2 fae0 	bl	8000cb8 <__aeabi_uldivmod>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	4b0c      	ldr	r3, [pc, #48]	; (800e730 <UART_SetConfig+0x384>)
 800e700:	fba3 1302 	umull	r1, r3, r3, r2
 800e704:	095b      	lsrs	r3, r3, #5
 800e706:	2164      	movs	r1, #100	; 0x64
 800e708:	fb01 f303 	mul.w	r3, r1, r3
 800e70c:	1ad3      	subs	r3, r2, r3
 800e70e:	00db      	lsls	r3, r3, #3
 800e710:	3332      	adds	r3, #50	; 0x32
 800e712:	4a07      	ldr	r2, [pc, #28]	; (800e730 <UART_SetConfig+0x384>)
 800e714:	fba2 2303 	umull	r2, r3, r2, r3
 800e718:	095b      	lsrs	r3, r3, #5
 800e71a:	f003 0207 	and.w	r2, r3, #7
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4442      	add	r2, r8
 800e724:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e726:	e1b2      	b.n	800ea8e <UART_SetConfig+0x6e2>
 800e728:	40011000 	.word	0x40011000
 800e72c:	40011400 	.word	0x40011400
 800e730:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4ad7      	ldr	r2, [pc, #860]	; (800ea98 <UART_SetConfig+0x6ec>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d005      	beq.n	800e74a <UART_SetConfig+0x39e>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4ad6      	ldr	r2, [pc, #856]	; (800ea9c <UART_SetConfig+0x6f0>)
 800e744:	4293      	cmp	r3, r2
 800e746:	f040 80d1 	bne.w	800e8ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e74a:	f7fc fa41 	bl	800abd0 <HAL_RCC_GetPCLK2Freq>
 800e74e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	469a      	mov	sl, r3
 800e754:	f04f 0b00 	mov.w	fp, #0
 800e758:	46d0      	mov	r8, sl
 800e75a:	46d9      	mov	r9, fp
 800e75c:	eb18 0308 	adds.w	r3, r8, r8
 800e760:	eb49 0409 	adc.w	r4, r9, r9
 800e764:	4698      	mov	r8, r3
 800e766:	46a1      	mov	r9, r4
 800e768:	eb18 080a 	adds.w	r8, r8, sl
 800e76c:	eb49 090b 	adc.w	r9, r9, fp
 800e770:	f04f 0100 	mov.w	r1, #0
 800e774:	f04f 0200 	mov.w	r2, #0
 800e778:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e77c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e780:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e784:	4688      	mov	r8, r1
 800e786:	4691      	mov	r9, r2
 800e788:	eb1a 0508 	adds.w	r5, sl, r8
 800e78c:	eb4b 0609 	adc.w	r6, fp, r9
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	4619      	mov	r1, r3
 800e796:	f04f 0200 	mov.w	r2, #0
 800e79a:	f04f 0300 	mov.w	r3, #0
 800e79e:	f04f 0400 	mov.w	r4, #0
 800e7a2:	0094      	lsls	r4, r2, #2
 800e7a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e7a8:	008b      	lsls	r3, r1, #2
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	4623      	mov	r3, r4
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	4631      	mov	r1, r6
 800e7b2:	f7f2 fa81 	bl	8000cb8 <__aeabi_uldivmod>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	4bb8      	ldr	r3, [pc, #736]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800e7be:	fba3 2302 	umull	r2, r3, r3, r2
 800e7c2:	095b      	lsrs	r3, r3, #5
 800e7c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	469b      	mov	fp, r3
 800e7cc:	f04f 0c00 	mov.w	ip, #0
 800e7d0:	46d9      	mov	r9, fp
 800e7d2:	46e2      	mov	sl, ip
 800e7d4:	eb19 0309 	adds.w	r3, r9, r9
 800e7d8:	eb4a 040a 	adc.w	r4, sl, sl
 800e7dc:	4699      	mov	r9, r3
 800e7de:	46a2      	mov	sl, r4
 800e7e0:	eb19 090b 	adds.w	r9, r9, fp
 800e7e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e7e8:	f04f 0100 	mov.w	r1, #0
 800e7ec:	f04f 0200 	mov.w	r2, #0
 800e7f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e7f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e7f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e7fc:	4689      	mov	r9, r1
 800e7fe:	4692      	mov	sl, r2
 800e800:	eb1b 0509 	adds.w	r5, fp, r9
 800e804:	eb4c 060a 	adc.w	r6, ip, sl
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	4619      	mov	r1, r3
 800e80e:	f04f 0200 	mov.w	r2, #0
 800e812:	f04f 0300 	mov.w	r3, #0
 800e816:	f04f 0400 	mov.w	r4, #0
 800e81a:	0094      	lsls	r4, r2, #2
 800e81c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e820:	008b      	lsls	r3, r1, #2
 800e822:	461a      	mov	r2, r3
 800e824:	4623      	mov	r3, r4
 800e826:	4628      	mov	r0, r5
 800e828:	4631      	mov	r1, r6
 800e82a:	f7f2 fa45 	bl	8000cb8 <__aeabi_uldivmod>
 800e82e:	4603      	mov	r3, r0
 800e830:	460c      	mov	r4, r1
 800e832:	461a      	mov	r2, r3
 800e834:	4b9a      	ldr	r3, [pc, #616]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800e836:	fba3 1302 	umull	r1, r3, r3, r2
 800e83a:	095b      	lsrs	r3, r3, #5
 800e83c:	2164      	movs	r1, #100	; 0x64
 800e83e:	fb01 f303 	mul.w	r3, r1, r3
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	011b      	lsls	r3, r3, #4
 800e846:	3332      	adds	r3, #50	; 0x32
 800e848:	4a95      	ldr	r2, [pc, #596]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800e84a:	fba2 2303 	umull	r2, r3, r2, r3
 800e84e:	095b      	lsrs	r3, r3, #5
 800e850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e854:	4498      	add	r8, r3
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	469b      	mov	fp, r3
 800e85a:	f04f 0c00 	mov.w	ip, #0
 800e85e:	46d9      	mov	r9, fp
 800e860:	46e2      	mov	sl, ip
 800e862:	eb19 0309 	adds.w	r3, r9, r9
 800e866:	eb4a 040a 	adc.w	r4, sl, sl
 800e86a:	4699      	mov	r9, r3
 800e86c:	46a2      	mov	sl, r4
 800e86e:	eb19 090b 	adds.w	r9, r9, fp
 800e872:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e876:	f04f 0100 	mov.w	r1, #0
 800e87a:	f04f 0200 	mov.w	r2, #0
 800e87e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e882:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e886:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e88a:	4689      	mov	r9, r1
 800e88c:	4692      	mov	sl, r2
 800e88e:	eb1b 0509 	adds.w	r5, fp, r9
 800e892:	eb4c 060a 	adc.w	r6, ip, sl
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	4619      	mov	r1, r3
 800e89c:	f04f 0200 	mov.w	r2, #0
 800e8a0:	f04f 0300 	mov.w	r3, #0
 800e8a4:	f04f 0400 	mov.w	r4, #0
 800e8a8:	0094      	lsls	r4, r2, #2
 800e8aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e8ae:	008b      	lsls	r3, r1, #2
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	4623      	mov	r3, r4
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	4631      	mov	r1, r6
 800e8b8:	f7f2 f9fe 	bl	8000cb8 <__aeabi_uldivmod>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	460c      	mov	r4, r1
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	4b77      	ldr	r3, [pc, #476]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800e8c4:	fba3 1302 	umull	r1, r3, r3, r2
 800e8c8:	095b      	lsrs	r3, r3, #5
 800e8ca:	2164      	movs	r1, #100	; 0x64
 800e8cc:	fb01 f303 	mul.w	r3, r1, r3
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	011b      	lsls	r3, r3, #4
 800e8d4:	3332      	adds	r3, #50	; 0x32
 800e8d6:	4a72      	ldr	r2, [pc, #456]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800e8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e8dc:	095b      	lsrs	r3, r3, #5
 800e8de:	f003 020f 	and.w	r2, r3, #15
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4442      	add	r2, r8
 800e8e8:	609a      	str	r2, [r3, #8]
 800e8ea:	e0d0      	b.n	800ea8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e8ec:	f7fc f95c 	bl	800aba8 <HAL_RCC_GetPCLK1Freq>
 800e8f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	469a      	mov	sl, r3
 800e8f6:	f04f 0b00 	mov.w	fp, #0
 800e8fa:	46d0      	mov	r8, sl
 800e8fc:	46d9      	mov	r9, fp
 800e8fe:	eb18 0308 	adds.w	r3, r8, r8
 800e902:	eb49 0409 	adc.w	r4, r9, r9
 800e906:	4698      	mov	r8, r3
 800e908:	46a1      	mov	r9, r4
 800e90a:	eb18 080a 	adds.w	r8, r8, sl
 800e90e:	eb49 090b 	adc.w	r9, r9, fp
 800e912:	f04f 0100 	mov.w	r1, #0
 800e916:	f04f 0200 	mov.w	r2, #0
 800e91a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e91e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e922:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e926:	4688      	mov	r8, r1
 800e928:	4691      	mov	r9, r2
 800e92a:	eb1a 0508 	adds.w	r5, sl, r8
 800e92e:	eb4b 0609 	adc.w	r6, fp, r9
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	4619      	mov	r1, r3
 800e938:	f04f 0200 	mov.w	r2, #0
 800e93c:	f04f 0300 	mov.w	r3, #0
 800e940:	f04f 0400 	mov.w	r4, #0
 800e944:	0094      	lsls	r4, r2, #2
 800e946:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e94a:	008b      	lsls	r3, r1, #2
 800e94c:	461a      	mov	r2, r3
 800e94e:	4623      	mov	r3, r4
 800e950:	4628      	mov	r0, r5
 800e952:	4631      	mov	r1, r6
 800e954:	f7f2 f9b0 	bl	8000cb8 <__aeabi_uldivmod>
 800e958:	4603      	mov	r3, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	461a      	mov	r2, r3
 800e95e:	4b50      	ldr	r3, [pc, #320]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800e960:	fba3 2302 	umull	r2, r3, r3, r2
 800e964:	095b      	lsrs	r3, r3, #5
 800e966:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	469b      	mov	fp, r3
 800e96e:	f04f 0c00 	mov.w	ip, #0
 800e972:	46d9      	mov	r9, fp
 800e974:	46e2      	mov	sl, ip
 800e976:	eb19 0309 	adds.w	r3, r9, r9
 800e97a:	eb4a 040a 	adc.w	r4, sl, sl
 800e97e:	4699      	mov	r9, r3
 800e980:	46a2      	mov	sl, r4
 800e982:	eb19 090b 	adds.w	r9, r9, fp
 800e986:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e98a:	f04f 0100 	mov.w	r1, #0
 800e98e:	f04f 0200 	mov.w	r2, #0
 800e992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e996:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e99a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e99e:	4689      	mov	r9, r1
 800e9a0:	4692      	mov	sl, r2
 800e9a2:	eb1b 0509 	adds.w	r5, fp, r9
 800e9a6:	eb4c 060a 	adc.w	r6, ip, sl
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	f04f 0200 	mov.w	r2, #0
 800e9b4:	f04f 0300 	mov.w	r3, #0
 800e9b8:	f04f 0400 	mov.w	r4, #0
 800e9bc:	0094      	lsls	r4, r2, #2
 800e9be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e9c2:	008b      	lsls	r3, r1, #2
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	4623      	mov	r3, r4
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	4631      	mov	r1, r6
 800e9cc:	f7f2 f974 	bl	8000cb8 <__aeabi_uldivmod>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	460c      	mov	r4, r1
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	4b32      	ldr	r3, [pc, #200]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800e9d8:	fba3 1302 	umull	r1, r3, r3, r2
 800e9dc:	095b      	lsrs	r3, r3, #5
 800e9de:	2164      	movs	r1, #100	; 0x64
 800e9e0:	fb01 f303 	mul.w	r3, r1, r3
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	011b      	lsls	r3, r3, #4
 800e9e8:	3332      	adds	r3, #50	; 0x32
 800e9ea:	4a2d      	ldr	r2, [pc, #180]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800e9ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e9f0:	095b      	lsrs	r3, r3, #5
 800e9f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9f6:	4498      	add	r8, r3
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	469b      	mov	fp, r3
 800e9fc:	f04f 0c00 	mov.w	ip, #0
 800ea00:	46d9      	mov	r9, fp
 800ea02:	46e2      	mov	sl, ip
 800ea04:	eb19 0309 	adds.w	r3, r9, r9
 800ea08:	eb4a 040a 	adc.w	r4, sl, sl
 800ea0c:	4699      	mov	r9, r3
 800ea0e:	46a2      	mov	sl, r4
 800ea10:	eb19 090b 	adds.w	r9, r9, fp
 800ea14:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ea18:	f04f 0100 	mov.w	r1, #0
 800ea1c:	f04f 0200 	mov.w	r2, #0
 800ea20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea2c:	4689      	mov	r9, r1
 800ea2e:	4692      	mov	sl, r2
 800ea30:	eb1b 0509 	adds.w	r5, fp, r9
 800ea34:	eb4c 060a 	adc.w	r6, ip, sl
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	f04f 0200 	mov.w	r2, #0
 800ea42:	f04f 0300 	mov.w	r3, #0
 800ea46:	f04f 0400 	mov.w	r4, #0
 800ea4a:	0094      	lsls	r4, r2, #2
 800ea4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ea50:	008b      	lsls	r3, r1, #2
 800ea52:	461a      	mov	r2, r3
 800ea54:	4623      	mov	r3, r4
 800ea56:	4628      	mov	r0, r5
 800ea58:	4631      	mov	r1, r6
 800ea5a:	f7f2 f92d 	bl	8000cb8 <__aeabi_uldivmod>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	460c      	mov	r4, r1
 800ea62:	461a      	mov	r2, r3
 800ea64:	4b0e      	ldr	r3, [pc, #56]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800ea66:	fba3 1302 	umull	r1, r3, r3, r2
 800ea6a:	095b      	lsrs	r3, r3, #5
 800ea6c:	2164      	movs	r1, #100	; 0x64
 800ea6e:	fb01 f303 	mul.w	r3, r1, r3
 800ea72:	1ad3      	subs	r3, r2, r3
 800ea74:	011b      	lsls	r3, r3, #4
 800ea76:	3332      	adds	r3, #50	; 0x32
 800ea78:	4a09      	ldr	r2, [pc, #36]	; (800eaa0 <UART_SetConfig+0x6f4>)
 800ea7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ea7e:	095b      	lsrs	r3, r3, #5
 800ea80:	f003 020f 	and.w	r2, r3, #15
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4442      	add	r2, r8
 800ea8a:	609a      	str	r2, [r3, #8]
}
 800ea8c:	e7ff      	b.n	800ea8e <UART_SetConfig+0x6e2>
 800ea8e:	bf00      	nop
 800ea90:	3714      	adds	r7, #20
 800ea92:	46bd      	mov	sp, r7
 800ea94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea98:	40011000 	.word	0x40011000
 800ea9c:	40011400 	.word	0x40011400
 800eaa0:	51eb851f 	.word	0x51eb851f

0800eaa4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800eaa4:	b084      	sub	sp, #16
 800eaa6:	b480      	push	{r7}
 800eaa8:	b085      	sub	sp, #20
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	f107 001c 	add.w	r0, r7, #28
 800eab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800eaba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800eabc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800eabe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800eac2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800eac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800eac6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800eac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800eaca:	431a      	orrs	r2, r3
             Init.ClockDiv
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800eace:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	4313      	orrs	r3, r2
 800ead4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800eade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	431a      	orrs	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3714      	adds	r7, #20
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	b004      	add	sp, #16
 800eaf8:	4770      	bx	lr

0800eafa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800eafa:	b480      	push	{r7}
 800eafc:	b083      	sub	sp, #12
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b082      	sub	sp, #8
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2203      	movs	r2, #3
 800eb42:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800eb44:	2002      	movs	r0, #2
 800eb46:	f7f9 fbdd 	bl	8008304 <HAL_Delay>
  
  return HAL_OK;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f003 0303 	and.w	r3, r3, #3
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb8e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800eb94:	431a      	orrs	r2, r3
                       Command->CPSM);
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800eb9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb9c:	68fa      	ldr	r2, [r7, #12]
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ebaa:	f023 030f 	bic.w	r3, r3, #15
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	431a      	orrs	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3714      	adds	r7, #20
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	691b      	ldr	r3, [r3, #16]
 800ebd0:	b2db      	uxtb	r3, r3
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	370c      	adds	r7, #12
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr

0800ebde <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ebde:	b480      	push	{r7}
 800ebe0:	b085      	sub	sp, #20
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
 800ebe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	3314      	adds	r3, #20
 800ebec:	461a      	mov	r2, r3
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
}  
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3714      	adds	r7, #20
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b085      	sub	sp, #20
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	685a      	ldr	r2, [r3, #4]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ec2a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ec30:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ec36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ec38:	68fa      	ldr	r2, [r7, #12]
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec42:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	431a      	orrs	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ec4e:	2300      	movs	r3, #0

}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b088      	sub	sp, #32
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ec6a:	2310      	movs	r3, #16
 800ec6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec6e:	2340      	movs	r3, #64	; 0x40
 800ec70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec72:	2300      	movs	r3, #0
 800ec74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec7c:	f107 0308 	add.w	r3, r7, #8
 800ec80:	4619      	mov	r1, r3
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f7ff ff74 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ec88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec8c:	2110      	movs	r1, #16
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 fa40 	bl	800f114 <SDMMC_GetCmdResp1>
 800ec94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec96:	69fb      	ldr	r3, [r7, #28]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3720      	adds	r7, #32
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b088      	sub	sp, #32
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ecae:	2311      	movs	r3, #17
 800ecb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecb2:	2340      	movs	r3, #64	; 0x40
 800ecb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ecc0:	f107 0308 	add.w	r3, r7, #8
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7ff ff52 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800eccc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecd0:	2111      	movs	r1, #17
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 fa1e 	bl	800f114 <SDMMC_GetCmdResp1>
 800ecd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecda:	69fb      	ldr	r3, [r7, #28]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3720      	adds	r7, #32
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ecf2:	2312      	movs	r3, #18
 800ecf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecf6:	2340      	movs	r3, #64	; 0x40
 800ecf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed04:	f107 0308 	add.w	r3, r7, #8
 800ed08:	4619      	mov	r1, r3
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f7ff ff30 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ed10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed14:	2112      	movs	r1, #18
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 f9fc 	bl	800f114 <SDMMC_GetCmdResp1>
 800ed1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed1e:	69fb      	ldr	r3, [r7, #28]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3720      	adds	r7, #32
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b088      	sub	sp, #32
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ed36:	2318      	movs	r3, #24
 800ed38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed3a:	2340      	movs	r3, #64	; 0x40
 800ed3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed48:	f107 0308 	add.w	r3, r7, #8
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7ff ff0e 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ed54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed58:	2118      	movs	r1, #24
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 f9da 	bl	800f114 <SDMMC_GetCmdResp1>
 800ed60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed62:	69fb      	ldr	r3, [r7, #28]
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3720      	adds	r7, #32
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b088      	sub	sp, #32
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ed7a:	2319      	movs	r3, #25
 800ed7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed7e:	2340      	movs	r3, #64	; 0x40
 800ed80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed82:	2300      	movs	r3, #0
 800ed84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed8c:	f107 0308 	add.w	r3, r7, #8
 800ed90:	4619      	mov	r1, r3
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f7ff feec 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ed98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed9c:	2119      	movs	r1, #25
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f9b8 	bl	800f114 <SDMMC_GetCmdResp1>
 800eda4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eda6:	69fb      	ldr	r3, [r7, #28]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3720      	adds	r7, #32
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b088      	sub	sp, #32
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800edb8:	2300      	movs	r3, #0
 800edba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800edbc:	230c      	movs	r3, #12
 800edbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800edc0:	2340      	movs	r3, #64	; 0x40
 800edc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edc4:	2300      	movs	r3, #0
 800edc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800edc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800edce:	f107 0308 	add.w	r3, r7, #8
 800edd2:	4619      	mov	r1, r3
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f7ff fecb 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800edda:	4a05      	ldr	r2, [pc, #20]	; (800edf0 <SDMMC_CmdStopTransfer+0x40>)
 800eddc:	210c      	movs	r1, #12
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f998 	bl	800f114 <SDMMC_GetCmdResp1>
 800ede4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ede6:	69fb      	ldr	r3, [r7, #28]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3720      	adds	r7, #32
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	05f5e100 	.word	0x05f5e100

0800edf4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b08a      	sub	sp, #40	; 0x28
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ee04:	2307      	movs	r3, #7
 800ee06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee08:	2340      	movs	r3, #64	; 0x40
 800ee0a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee14:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee16:	f107 0310 	add.w	r3, r7, #16
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f7ff fea7 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ee22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee26:	2107      	movs	r1, #7
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f000 f973 	bl	800f114 <SDMMC_GetCmdResp1>
 800ee2e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ee30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3728      	adds	r7, #40	; 0x28
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b088      	sub	sp, #32
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ee42:	2300      	movs	r3, #0
 800ee44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ee46:	2300      	movs	r3, #0
 800ee48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee58:	f107 0308 	add.w	r3, r7, #8
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff fe86 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 f92d 	bl	800f0c4 <SDMMC_GetCmdError>
 800ee6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee6c:	69fb      	ldr	r3, [r7, #28]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3720      	adds	r7, #32
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b088      	sub	sp, #32
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ee7e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ee82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ee84:	2308      	movs	r3, #8
 800ee86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee88:	2340      	movs	r3, #64	; 0x40
 800ee8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee96:	f107 0308 	add.w	r3, r7, #8
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f7ff fe67 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 fb16 	bl	800f4d4 <SDMMC_GetCmdResp7>
 800eea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eeaa:	69fb      	ldr	r3, [r7, #28]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3720      	adds	r7, #32
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800eec2:	2337      	movs	r3, #55	; 0x37
 800eec4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eec6:	2340      	movs	r3, #64	; 0x40
 800eec8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eeca:	2300      	movs	r3, #0
 800eecc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eed2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eed4:	f107 0308 	add.w	r3, r7, #8
 800eed8:	4619      	mov	r1, r3
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f7ff fe48 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800eee0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eee4:	2137      	movs	r1, #55	; 0x37
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f914 	bl	800f114 <SDMMC_GetCmdResp1>
 800eeec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eeee:	69fb      	ldr	r3, [r7, #28]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3720      	adds	r7, #32
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b088      	sub	sp, #32
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ef08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ef0e:	2329      	movs	r3, #41	; 0x29
 800ef10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef12:	2340      	movs	r3, #64	; 0x40
 800ef14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef16:	2300      	movs	r3, #0
 800ef18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef20:	f107 0308 	add.w	r3, r7, #8
 800ef24:	4619      	mov	r1, r3
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f7ff fe22 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 fa23 	bl	800f378 <SDMMC_GetCmdResp3>
 800ef32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef34:	69fb      	ldr	r3, [r7, #28]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3720      	adds	r7, #32
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b088      	sub	sp, #32
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ef4c:	2306      	movs	r3, #6
 800ef4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef50:	2340      	movs	r3, #64	; 0x40
 800ef52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef54:	2300      	movs	r3, #0
 800ef56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef5e:	f107 0308 	add.w	r3, r7, #8
 800ef62:	4619      	mov	r1, r3
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7ff fe03 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ef6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef6e:	2106      	movs	r1, #6
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 f8cf 	bl	800f114 <SDMMC_GetCmdResp1>
 800ef76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef78:	69fb      	ldr	r3, [r7, #28]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3720      	adds	r7, #32
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ef82:	b580      	push	{r7, lr}
 800ef84:	b088      	sub	sp, #32
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ef8e:	2333      	movs	r3, #51	; 0x33
 800ef90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef92:	2340      	movs	r3, #64	; 0x40
 800ef94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef96:	2300      	movs	r3, #0
 800ef98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800efa0:	f107 0308 	add.w	r3, r7, #8
 800efa4:	4619      	mov	r1, r3
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff fde2 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800efac:	f241 3288 	movw	r2, #5000	; 0x1388
 800efb0:	2133      	movs	r1, #51	; 0x33
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 f8ae 	bl	800f114 <SDMMC_GetCmdResp1>
 800efb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efba:	69fb      	ldr	r3, [r7, #28]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3720      	adds	r7, #32
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b088      	sub	sp, #32
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800efcc:	2300      	movs	r3, #0
 800efce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800efd0:	2302      	movs	r3, #2
 800efd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800efd4:	23c0      	movs	r3, #192	; 0xc0
 800efd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800efd8:	2300      	movs	r3, #0
 800efda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800efdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800efe2:	f107 0308 	add.w	r3, r7, #8
 800efe6:	4619      	mov	r1, r3
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7ff fdc1 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 f97c 	bl	800f2ec <SDMMC_GetCmdResp2>
 800eff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eff6:	69fb      	ldr	r3, [r7, #28]
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3720      	adds	r7, #32
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b088      	sub	sp, #32
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f00e:	2309      	movs	r3, #9
 800f010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f012:	23c0      	movs	r3, #192	; 0xc0
 800f014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f016:	2300      	movs	r3, #0
 800f018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f01a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f01e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f020:	f107 0308 	add.w	r3, r7, #8
 800f024:	4619      	mov	r1, r3
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7ff fda2 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 f95d 	bl	800f2ec <SDMMC_GetCmdResp2>
 800f032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f034:	69fb      	ldr	r3, [r7, #28]
}
 800f036:	4618      	mov	r0, r3
 800f038:	3720      	adds	r7, #32
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f03e:	b580      	push	{r7, lr}
 800f040:	b088      	sub	sp, #32
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
 800f046:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f048:	2300      	movs	r3, #0
 800f04a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f04c:	2303      	movs	r3, #3
 800f04e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f050:	2340      	movs	r3, #64	; 0x40
 800f052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f054:	2300      	movs	r3, #0
 800f056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f05c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f05e:	f107 0308 	add.w	r3, r7, #8
 800f062:	4619      	mov	r1, r3
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7ff fd83 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f06a:	683a      	ldr	r2, [r7, #0]
 800f06c:	2103      	movs	r1, #3
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 f9bc 	bl	800f3ec <SDMMC_GetCmdResp6>
 800f074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f076:	69fb      	ldr	r3, [r7, #28]
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3720      	adds	r7, #32
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b088      	sub	sp, #32
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f08e:	230d      	movs	r3, #13
 800f090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f092:	2340      	movs	r3, #64	; 0x40
 800f094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f096:	2300      	movs	r3, #0
 800f098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f09a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f09e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f0a0:	f107 0308 	add.w	r3, r7, #8
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f7ff fd62 	bl	800eb70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f0ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0b0:	210d      	movs	r1, #13
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 f82e 	bl	800f114 <SDMMC_GetCmdResp1>
 800f0b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0ba:	69fb      	ldr	r3, [r7, #28]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3720      	adds	r7, #32
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f0c4:	b490      	push	{r4, r7}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f0cc:	4b0f      	ldr	r3, [pc, #60]	; (800f10c <SDMMC_GetCmdError+0x48>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4a0f      	ldr	r2, [pc, #60]	; (800f110 <SDMMC_GetCmdError+0x4c>)
 800f0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0d6:	0a5b      	lsrs	r3, r3, #9
 800f0d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f0e0:	4623      	mov	r3, r4
 800f0e2:	1e5c      	subs	r4, r3, #1
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d102      	bne.n	800f0ee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0ec:	e009      	b.n	800f102 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d0f2      	beq.n	800f0e0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	22c5      	movs	r2, #197	; 0xc5
 800f0fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3708      	adds	r7, #8
 800f106:	46bd      	mov	sp, r7
 800f108:	bc90      	pop	{r4, r7}
 800f10a:	4770      	bx	lr
 800f10c:	20000000 	.word	0x20000000
 800f110:	10624dd3 	.word	0x10624dd3

0800f114 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b087      	sub	sp, #28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	460b      	mov	r3, r1
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f122:	4b6f      	ldr	r3, [pc, #444]	; (800f2e0 <SDMMC_GetCmdResp1+0x1cc>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4a6f      	ldr	r2, [pc, #444]	; (800f2e4 <SDMMC_GetCmdResp1+0x1d0>)
 800f128:	fba2 2303 	umull	r2, r3, r2, r3
 800f12c:	0a5b      	lsrs	r3, r3, #9
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f134:	4623      	mov	r3, r4
 800f136:	1e5c      	subs	r4, r3, #1
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d102      	bne.n	800f142 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f13c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f140:	e0c9      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f146:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d0f0      	beq.n	800f134 <SDMMC_GetCmdResp1+0x20>
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1eb      	bne.n	800f134 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f160:	f003 0304 	and.w	r3, r3, #4
 800f164:	2b00      	cmp	r3, #0
 800f166:	d004      	beq.n	800f172 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2204      	movs	r2, #4
 800f16c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f16e:	2304      	movs	r3, #4
 800f170:	e0b1      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f176:	f003 0301 	and.w	r3, r3, #1
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d004      	beq.n	800f188 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2201      	movs	r2, #1
 800f182:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f184:	2301      	movs	r3, #1
 800f186:	e0a6      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	22c5      	movs	r2, #197	; 0xc5
 800f18c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f18e:	68f8      	ldr	r0, [r7, #12]
 800f190:	f7ff fd18 	bl	800ebc4 <SDIO_GetCommandResponse>
 800f194:	4603      	mov	r3, r0
 800f196:	461a      	mov	r2, r3
 800f198:	7afb      	ldrb	r3, [r7, #11]
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d001      	beq.n	800f1a2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e099      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f7ff fd1a 	bl	800ebde <SDIO_GetResponse>
 800f1aa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f1ac:	693a      	ldr	r2, [r7, #16]
 800f1ae:	4b4e      	ldr	r3, [pc, #312]	; (800f2e8 <SDMMC_GetCmdResp1+0x1d4>)
 800f1b0:	4013      	ands	r3, r2
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e08d      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	da02      	bge.n	800f1c6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f1c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f1c4:	e087      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d001      	beq.n	800f1d4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f1d0:	2340      	movs	r3, #64	; 0x40
 800f1d2:	e080      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d001      	beq.n	800f1e2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f1de:	2380      	movs	r3, #128	; 0x80
 800f1e0:	e079      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d002      	beq.n	800f1f2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f1ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1f0:	e071      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d002      	beq.n	800f202 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f1fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f200:	e069      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f20c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f210:	e061      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d002      	beq.n	800f222 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f21c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f220:	e059      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f22c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f230:	e051      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f23c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f240:	e049      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f24c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f250:	e041      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f25c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f260:	e039      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f26c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f270:	e031      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d002      	beq.n	800f282 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f27c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f280:	e029      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f28c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f290:	e021      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d002      	beq.n	800f2a2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f29c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f2a0:	e019      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d002      	beq.n	800f2b2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f2ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f2b0:	e011      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d002      	beq.n	800f2c2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f2bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f2c0:	e009      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	f003 0308 	and.w	r3, r3, #8
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d002      	beq.n	800f2d2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f2cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f2d0:	e001      	b.n	800f2d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f2d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	371c      	adds	r7, #28
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd90      	pop	{r4, r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	20000000 	.word	0x20000000
 800f2e4:	10624dd3 	.word	0x10624dd3
 800f2e8:	fdffe008 	.word	0xfdffe008

0800f2ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f2ec:	b490      	push	{r4, r7}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f2f4:	4b1e      	ldr	r3, [pc, #120]	; (800f370 <SDMMC_GetCmdResp2+0x84>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a1e      	ldr	r2, [pc, #120]	; (800f374 <SDMMC_GetCmdResp2+0x88>)
 800f2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f2fe:	0a5b      	lsrs	r3, r3, #9
 800f300:	f241 3288 	movw	r2, #5000	; 0x1388
 800f304:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f308:	4623      	mov	r3, r4
 800f30a:	1e5c      	subs	r4, r3, #1
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d102      	bne.n	800f316 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f314:	e026      	b.n	800f364 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f31a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f322:	2b00      	cmp	r3, #0
 800f324:	d0f0      	beq.n	800f308 <SDMMC_GetCmdResp2+0x1c>
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d1eb      	bne.n	800f308 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f334:	f003 0304 	and.w	r3, r3, #4
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d004      	beq.n	800f346 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2204      	movs	r2, #4
 800f340:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f342:	2304      	movs	r3, #4
 800f344:	e00e      	b.n	800f364 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f34a:	f003 0301 	and.w	r3, r3, #1
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d004      	beq.n	800f35c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2201      	movs	r2, #1
 800f356:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f358:	2301      	movs	r3, #1
 800f35a:	e003      	b.n	800f364 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	22c5      	movs	r2, #197	; 0xc5
 800f360:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f362:	2300      	movs	r3, #0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bc90      	pop	{r4, r7}
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	20000000 	.word	0x20000000
 800f374:	10624dd3 	.word	0x10624dd3

0800f378 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f378:	b490      	push	{r4, r7}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f380:	4b18      	ldr	r3, [pc, #96]	; (800f3e4 <SDMMC_GetCmdResp3+0x6c>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a18      	ldr	r2, [pc, #96]	; (800f3e8 <SDMMC_GetCmdResp3+0x70>)
 800f386:	fba2 2303 	umull	r2, r3, r2, r3
 800f38a:	0a5b      	lsrs	r3, r3, #9
 800f38c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f390:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f394:	4623      	mov	r3, r4
 800f396:	1e5c      	subs	r4, r3, #1
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d102      	bne.n	800f3a2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f39c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f3a0:	e01b      	b.n	800f3da <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d0f0      	beq.n	800f394 <SDMMC_GetCmdResp3+0x1c>
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d1eb      	bne.n	800f394 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c0:	f003 0304 	and.w	r3, r3, #4
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d004      	beq.n	800f3d2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2204      	movs	r2, #4
 800f3cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3ce:	2304      	movs	r3, #4
 800f3d0:	e003      	b.n	800f3da <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	22c5      	movs	r2, #197	; 0xc5
 800f3d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bc90      	pop	{r4, r7}
 800f3e2:	4770      	bx	lr
 800f3e4:	20000000 	.word	0x20000000
 800f3e8:	10624dd3 	.word	0x10624dd3

0800f3ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f3ec:	b590      	push	{r4, r7, lr}
 800f3ee:	b087      	sub	sp, #28
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	607a      	str	r2, [r7, #4]
 800f3f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f3fa:	4b34      	ldr	r3, [pc, #208]	; (800f4cc <SDMMC_GetCmdResp6+0xe0>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4a34      	ldr	r2, [pc, #208]	; (800f4d0 <SDMMC_GetCmdResp6+0xe4>)
 800f400:	fba2 2303 	umull	r2, r3, r2, r3
 800f404:	0a5b      	lsrs	r3, r3, #9
 800f406:	f241 3288 	movw	r2, #5000	; 0x1388
 800f40a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f40e:	4623      	mov	r3, r4
 800f410:	1e5c      	subs	r4, r3, #1
 800f412:	2b00      	cmp	r3, #0
 800f414:	d102      	bne.n	800f41c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f416:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f41a:	e052      	b.n	800f4c2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f420:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d0f0      	beq.n	800f40e <SDMMC_GetCmdResp6+0x22>
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f432:	2b00      	cmp	r3, #0
 800f434:	d1eb      	bne.n	800f40e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f43a:	f003 0304 	and.w	r3, r3, #4
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d004      	beq.n	800f44c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2204      	movs	r2, #4
 800f446:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f448:	2304      	movs	r3, #4
 800f44a:	e03a      	b.n	800f4c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f450:	f003 0301 	and.w	r3, r3, #1
 800f454:	2b00      	cmp	r3, #0
 800f456:	d004      	beq.n	800f462 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2201      	movs	r2, #1
 800f45c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f45e:	2301      	movs	r3, #1
 800f460:	e02f      	b.n	800f4c2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f462:	68f8      	ldr	r0, [r7, #12]
 800f464:	f7ff fbae 	bl	800ebc4 <SDIO_GetCommandResponse>
 800f468:	4603      	mov	r3, r0
 800f46a:	461a      	mov	r2, r3
 800f46c:	7afb      	ldrb	r3, [r7, #11]
 800f46e:	4293      	cmp	r3, r2
 800f470:	d001      	beq.n	800f476 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f472:	2301      	movs	r3, #1
 800f474:	e025      	b.n	800f4c2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	22c5      	movs	r2, #197	; 0xc5
 800f47a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f47c:	2100      	movs	r1, #0
 800f47e:	68f8      	ldr	r0, [r7, #12]
 800f480:	f7ff fbad 	bl	800ebde <SDIO_GetResponse>
 800f484:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d106      	bne.n	800f49e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	0c1b      	lsrs	r3, r3, #16
 800f494:	b29a      	uxth	r2, r3
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f49a:	2300      	movs	r3, #0
 800f49c:	e011      	b.n	800f4c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d002      	beq.n	800f4ae <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f4a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4ac:	e009      	b.n	800f4c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d002      	beq.n	800f4be <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f4b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4bc:	e001      	b.n	800f4c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f4be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	371c      	adds	r7, #28
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd90      	pop	{r4, r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	20000000 	.word	0x20000000
 800f4d0:	10624dd3 	.word	0x10624dd3

0800f4d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f4d4:	b490      	push	{r4, r7}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f4dc:	4b21      	ldr	r3, [pc, #132]	; (800f564 <SDMMC_GetCmdResp7+0x90>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	4a21      	ldr	r2, [pc, #132]	; (800f568 <SDMMC_GetCmdResp7+0x94>)
 800f4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f4e6:	0a5b      	lsrs	r3, r3, #9
 800f4e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f4f0:	4623      	mov	r3, r4
 800f4f2:	1e5c      	subs	r4, r3, #1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d102      	bne.n	800f4fe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4fc:	e02c      	b.n	800f558 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f502:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d0f0      	beq.n	800f4f0 <SDMMC_GetCmdResp7+0x1c>
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1eb      	bne.n	800f4f0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f51c:	f003 0304 	and.w	r3, r3, #4
 800f520:	2b00      	cmp	r3, #0
 800f522:	d004      	beq.n	800f52e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2204      	movs	r2, #4
 800f528:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f52a:	2304      	movs	r3, #4
 800f52c:	e014      	b.n	800f558 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f532:	f003 0301 	and.w	r3, r3, #1
 800f536:	2b00      	cmp	r3, #0
 800f538:	d004      	beq.n	800f544 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2201      	movs	r2, #1
 800f53e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f540:	2301      	movs	r3, #1
 800f542:	e009      	b.n	800f558 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d002      	beq.n	800f556 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2240      	movs	r2, #64	; 0x40
 800f554:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f556:	2300      	movs	r3, #0
  
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3710      	adds	r7, #16
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bc90      	pop	{r4, r7}
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	20000000 	.word	0x20000000
 800f568:	10624dd3 	.word	0x10624dd3

0800f56c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f570:	4904      	ldr	r1, [pc, #16]	; (800f584 <MX_FATFS_Init+0x18>)
 800f572:	4805      	ldr	r0, [pc, #20]	; (800f588 <MX_FATFS_Init+0x1c>)
 800f574:	f003 fb9c 	bl	8012cb0 <FATFS_LinkDriver>
 800f578:	4603      	mov	r3, r0
 800f57a:	461a      	mov	r2, r3
 800f57c:	4b03      	ldr	r3, [pc, #12]	; (800f58c <MX_FATFS_Init+0x20>)
 800f57e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f580:	bf00      	nop
 800f582:	bd80      	pop	{r7, pc}
 800f584:	2003edc8 	.word	0x2003edc8
 800f588:	08018748 	.word	0x08018748
 800f58c:	2003edc4 	.word	0x2003edc4

0800f590 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f596:	2300      	movs	r3, #0
 800f598:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f59a:	f000 f896 	bl	800f6ca <BSP_SD_IsDetected>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d001      	beq.n	800f5a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	e012      	b.n	800f5ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f5a8:	480b      	ldr	r0, [pc, #44]	; (800f5d8 <BSP_SD_Init+0x48>)
 800f5aa:	f7fb ffa5 	bl	800b4f8 <HAL_SD_Init>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f5b2:	79fb      	ldrb	r3, [r7, #7]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d109      	bne.n	800f5cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800f5b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f5bc:	4806      	ldr	r0, [pc, #24]	; (800f5d8 <BSP_SD_Init+0x48>)
 800f5be:	f7fc fd4f 	bl	800c060 <HAL_SD_ConfigWideBusOperation>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d001      	beq.n	800f5cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f5cc:	79fb      	ldrb	r3, [r7, #7]
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	2003ebc0 	.word	0x2003ebc0

0800f5dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b086      	sub	sp, #24
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	68f9      	ldr	r1, [r7, #12]
 800f5f2:	4806      	ldr	r0, [pc, #24]	; (800f60c <BSP_SD_ReadBlocks_DMA+0x30>)
 800f5f4:	f7fc f810 	bl	800b618 <HAL_SD_ReadBlocks_DMA>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d001      	beq.n	800f602 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f5fe:	2301      	movs	r3, #1
 800f600:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f602:	7dfb      	ldrb	r3, [r7, #23]
}
 800f604:	4618      	mov	r0, r3
 800f606:	3718      	adds	r7, #24
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	2003ebc0 	.word	0x2003ebc0

0800f610 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b086      	sub	sp, #24
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f61c:	2300      	movs	r3, #0
 800f61e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	68ba      	ldr	r2, [r7, #8]
 800f624:	68f9      	ldr	r1, [r7, #12]
 800f626:	4806      	ldr	r0, [pc, #24]	; (800f640 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f628:	f7fc f8de 	bl	800b7e8 <HAL_SD_WriteBlocks_DMA>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f632:	2301      	movs	r3, #1
 800f634:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f636:	7dfb      	ldrb	r3, [r7, #23]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3718      	adds	r7, #24
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	2003ebc0 	.word	0x2003ebc0

0800f644 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f648:	4805      	ldr	r0, [pc, #20]	; (800f660 <BSP_SD_GetCardState+0x1c>)
 800f64a:	f7fc fd85 	bl	800c158 <HAL_SD_GetCardState>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b04      	cmp	r3, #4
 800f652:	bf14      	ite	ne
 800f654:	2301      	movne	r3, #1
 800f656:	2300      	moveq	r3, #0
 800f658:	b2db      	uxtb	r3, r3
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	2003ebc0 	.word	0x2003ebc0

0800f664 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f66c:	6879      	ldr	r1, [r7, #4]
 800f66e:	4803      	ldr	r0, [pc, #12]	; (800f67c <BSP_SD_GetCardInfo+0x18>)
 800f670:	f7fc fcca 	bl	800c008 <HAL_SD_GetCardInfo>
}
 800f674:	bf00      	nop
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	2003ebc0 	.word	0x2003ebc0

0800f680 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800f688:	f000 f818 	bl	800f6bc <BSP_SD_AbortCallback>
}
 800f68c:	bf00      	nop
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f69c:	f000 f9a8 	bl	800f9f0 <BSP_SD_WriteCpltCallback>
}
 800f6a0:	bf00      	nop
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f6b0:	f000 f9aa 	bl	800fa08 <BSP_SD_ReadCpltCallback>
}
 800f6b4:	bf00      	nop
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	af00      	add	r7, sp, #0

}
 800f6c0:	bf00      	nop
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b082      	sub	sp, #8
 800f6ce:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f6d4:	f000 f80c 	bl	800f6f0 <BSP_PlatformIsDetected>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d101      	bne.n	800f6e2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f6e2:	79fb      	ldrb	r3, [r7, #7]
 800f6e4:	b2db      	uxtb	r3, r3
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3708      	adds	r7, #8
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
	...

0800f6f0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f6fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f6fe:	4806      	ldr	r0, [pc, #24]	; (800f718 <BSP_PlatformIsDetected+0x28>)
 800f700:	f7fa f87e 	bl	8009800 <HAL_GPIO_ReadPin>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	d001      	beq.n	800f70e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f70a:	2300      	movs	r3, #0
 800f70c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f70e:	79fb      	ldrb	r3, [r7, #7]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	40020000 	.word	0x40020000

0800f71c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800f724:	f7f8 fde2 	bl	80082ec <HAL_GetTick>
 800f728:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800f72a:	e006      	b.n	800f73a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f72c:	f7ff ff8a 	bl	800f644 <BSP_SD_GetCardState>
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d101      	bne.n	800f73a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f736:	2300      	movs	r3, #0
 800f738:	e009      	b.n	800f74e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800f73a:	f7f8 fdd7 	bl	80082ec <HAL_GetTick>
 800f73e:	4602      	mov	r2, r0
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	429a      	cmp	r2, r3
 800f748:	d8f0      	bhi.n	800f72c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f74a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
	...

0800f758 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	4603      	mov	r3, r0
 800f760:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f762:	4b0b      	ldr	r3, [pc, #44]	; (800f790 <SD_CheckStatus+0x38>)
 800f764:	2201      	movs	r2, #1
 800f766:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f768:	f7ff ff6c 	bl	800f644 <BSP_SD_GetCardState>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d107      	bne.n	800f782 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f772:	4b07      	ldr	r3, [pc, #28]	; (800f790 <SD_CheckStatus+0x38>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	b2db      	uxtb	r3, r3
 800f778:	f023 0301 	bic.w	r3, r3, #1
 800f77c:	b2da      	uxtb	r2, r3
 800f77e:	4b04      	ldr	r3, [pc, #16]	; (800f790 <SD_CheckStatus+0x38>)
 800f780:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f782:	4b03      	ldr	r3, [pc, #12]	; (800f790 <SD_CheckStatus+0x38>)
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	b2db      	uxtb	r3, r3
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	20000009 	.word	0x20000009

0800f794 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	4603      	mov	r3, r0
 800f79c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f79e:	f7ff fef7 	bl	800f590 <BSP_SD_Init>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d107      	bne.n	800f7b8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800f7a8:	79fb      	ldrb	r3, [r7, #7]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7ff ffd4 	bl	800f758 <SD_CheckStatus>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	4b04      	ldr	r3, [pc, #16]	; (800f7c8 <SD_initialize+0x34>)
 800f7b6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f7b8:	4b03      	ldr	r3, [pc, #12]	; (800f7c8 <SD_initialize+0x34>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	b2db      	uxtb	r3, r3
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	20000009 	.word	0x20000009

0800f7cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f7d6:	79fb      	ldrb	r3, [r7, #7]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7ff ffbd 	bl	800f758 <SD_CheckStatus>
 800f7de:	4603      	mov	r3, r0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b086      	sub	sp, #24
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60b9      	str	r1, [r7, #8]
 800f7f0:	607a      	str	r2, [r7, #4]
 800f7f2:	603b      	str	r3, [r7, #0]
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f7fc:	f247 5030 	movw	r0, #30000	; 0x7530
 800f800:	f7ff ff8c 	bl	800f71c <SD_CheckStatusWithTimeout>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	da01      	bge.n	800f80e <SD_read+0x26>
  {
    return res;
 800f80a:	7dfb      	ldrb	r3, [r7, #23]
 800f80c:	e03b      	b.n	800f886 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800f80e:	683a      	ldr	r2, [r7, #0]
 800f810:	6879      	ldr	r1, [r7, #4]
 800f812:	68b8      	ldr	r0, [r7, #8]
 800f814:	f7ff fee2 	bl	800f5dc <BSP_SD_ReadBlocks_DMA>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d132      	bne.n	800f884 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800f81e:	4b1c      	ldr	r3, [pc, #112]	; (800f890 <SD_read+0xa8>)
 800f820:	2200      	movs	r2, #0
 800f822:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800f824:	f7f8 fd62 	bl	80082ec <HAL_GetTick>
 800f828:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f82a:	bf00      	nop
 800f82c:	4b18      	ldr	r3, [pc, #96]	; (800f890 <SD_read+0xa8>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d108      	bne.n	800f846 <SD_read+0x5e>
 800f834:	f7f8 fd5a 	bl	80082ec <HAL_GetTick>
 800f838:	4602      	mov	r2, r0
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	f247 522f 	movw	r2, #29999	; 0x752f
 800f842:	4293      	cmp	r3, r2
 800f844:	d9f2      	bls.n	800f82c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800f846:	4b12      	ldr	r3, [pc, #72]	; (800f890 <SD_read+0xa8>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d102      	bne.n	800f854 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800f84e:	2301      	movs	r3, #1
 800f850:	75fb      	strb	r3, [r7, #23]
 800f852:	e017      	b.n	800f884 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800f854:	4b0e      	ldr	r3, [pc, #56]	; (800f890 <SD_read+0xa8>)
 800f856:	2200      	movs	r2, #0
 800f858:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f85a:	f7f8 fd47 	bl	80082ec <HAL_GetTick>
 800f85e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f860:	e007      	b.n	800f872 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f862:	f7ff feef 	bl	800f644 <BSP_SD_GetCardState>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d102      	bne.n	800f872 <SD_read+0x8a>
          {
            res = RES_OK;
 800f86c:	2300      	movs	r3, #0
 800f86e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f870:	e008      	b.n	800f884 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f872:	f7f8 fd3b 	bl	80082ec <HAL_GetTick>
 800f876:	4602      	mov	r2, r0
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	1ad3      	subs	r3, r2, r3
 800f87c:	f247 522f 	movw	r2, #29999	; 0x752f
 800f880:	4293      	cmp	r3, r2
 800f882:	d9ee      	bls.n	800f862 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f884:	7dfb      	ldrb	r3, [r7, #23]
}
 800f886:	4618      	mov	r0, r3
 800f888:	3718      	adds	r7, #24
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	2003c45c 	.word	0x2003c45c

0800f894 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b086      	sub	sp, #24
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60b9      	str	r1, [r7, #8]
 800f89c:	607a      	str	r2, [r7, #4]
 800f89e:	603b      	str	r3, [r7, #0]
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f8a8:	4b24      	ldr	r3, [pc, #144]	; (800f93c <SD_write+0xa8>)
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f8ae:	f247 5030 	movw	r0, #30000	; 0x7530
 800f8b2:	f7ff ff33 	bl	800f71c <SD_CheckStatusWithTimeout>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	da01      	bge.n	800f8c0 <SD_write+0x2c>
  {
    return res;
 800f8bc:	7dfb      	ldrb	r3, [r7, #23]
 800f8be:	e038      	b.n	800f932 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f8c0:	683a      	ldr	r2, [r7, #0]
 800f8c2:	6879      	ldr	r1, [r7, #4]
 800f8c4:	68b8      	ldr	r0, [r7, #8]
 800f8c6:	f7ff fea3 	bl	800f610 <BSP_SD_WriteBlocks_DMA>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d12f      	bne.n	800f930 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f8d0:	f7f8 fd0c 	bl	80082ec <HAL_GetTick>
 800f8d4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f8d6:	bf00      	nop
 800f8d8:	4b18      	ldr	r3, [pc, #96]	; (800f93c <SD_write+0xa8>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d108      	bne.n	800f8f2 <SD_write+0x5e>
 800f8e0:	f7f8 fd04 	bl	80082ec <HAL_GetTick>
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	1ad3      	subs	r3, r2, r3
 800f8ea:	f247 522f 	movw	r2, #29999	; 0x752f
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d9f2      	bls.n	800f8d8 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800f8f2:	4b12      	ldr	r3, [pc, #72]	; (800f93c <SD_write+0xa8>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d102      	bne.n	800f900 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	75fb      	strb	r3, [r7, #23]
 800f8fe:	e017      	b.n	800f930 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f900:	4b0e      	ldr	r3, [pc, #56]	; (800f93c <SD_write+0xa8>)
 800f902:	2200      	movs	r2, #0
 800f904:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f906:	f7f8 fcf1 	bl	80082ec <HAL_GetTick>
 800f90a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f90c:	e007      	b.n	800f91e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f90e:	f7ff fe99 	bl	800f644 <BSP_SD_GetCardState>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d102      	bne.n	800f91e <SD_write+0x8a>
          {
            res = RES_OK;
 800f918:	2300      	movs	r3, #0
 800f91a:	75fb      	strb	r3, [r7, #23]
            break;
 800f91c:	e008      	b.n	800f930 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f91e:	f7f8 fce5 	bl	80082ec <HAL_GetTick>
 800f922:	4602      	mov	r2, r0
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	1ad3      	subs	r3, r2, r3
 800f928:	f247 522f 	movw	r2, #29999	; 0x752f
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d9ee      	bls.n	800f90e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f930:	7dfb      	ldrb	r3, [r7, #23]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3718      	adds	r7, #24
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	2003c458 	.word	0x2003c458

0800f940 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b08c      	sub	sp, #48	; 0x30
 800f944:	af00      	add	r7, sp, #0
 800f946:	4603      	mov	r3, r0
 800f948:	603a      	str	r2, [r7, #0]
 800f94a:	71fb      	strb	r3, [r7, #7]
 800f94c:	460b      	mov	r3, r1
 800f94e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f950:	2301      	movs	r3, #1
 800f952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f956:	4b25      	ldr	r3, [pc, #148]	; (800f9ec <SD_ioctl+0xac>)
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	f003 0301 	and.w	r3, r3, #1
 800f960:	2b00      	cmp	r3, #0
 800f962:	d001      	beq.n	800f968 <SD_ioctl+0x28>
 800f964:	2303      	movs	r3, #3
 800f966:	e03c      	b.n	800f9e2 <SD_ioctl+0xa2>

  switch (cmd)
 800f968:	79bb      	ldrb	r3, [r7, #6]
 800f96a:	2b03      	cmp	r3, #3
 800f96c:	d834      	bhi.n	800f9d8 <SD_ioctl+0x98>
 800f96e:	a201      	add	r2, pc, #4	; (adr r2, 800f974 <SD_ioctl+0x34>)
 800f970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f974:	0800f985 	.word	0x0800f985
 800f978:	0800f98d 	.word	0x0800f98d
 800f97c:	0800f9a5 	.word	0x0800f9a5
 800f980:	0800f9bf 	.word	0x0800f9bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f984:	2300      	movs	r3, #0
 800f986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f98a:	e028      	b.n	800f9de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f98c:	f107 030c 	add.w	r3, r7, #12
 800f990:	4618      	mov	r0, r3
 800f992:	f7ff fe67 	bl	800f664 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f99c:	2300      	movs	r3, #0
 800f99e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f9a2:	e01c      	b.n	800f9de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f9a4:	f107 030c 	add.w	r3, r7, #12
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7ff fe5b 	bl	800f664 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b0:	b29a      	uxth	r2, r3
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f9bc:	e00f      	b.n	800f9de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f9be:	f107 030c 	add.w	r3, r7, #12
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7ff fe4e 	bl	800f664 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ca:	0a5a      	lsrs	r2, r3, #9
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f9d6:	e002      	b.n	800f9de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f9d8:	2304      	movs	r3, #4
 800f9da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f9de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3730      	adds	r7, #48	; 0x30
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	20000009 	.word	0x20000009

0800f9f0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f9f4:	4b03      	ldr	r3, [pc, #12]	; (800fa04 <BSP_SD_WriteCpltCallback+0x14>)
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	601a      	str	r2, [r3, #0]
}
 800f9fa:	bf00      	nop
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr
 800fa04:	2003c458 	.word	0x2003c458

0800fa08 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800fa0c:	4b03      	ldr	r3, [pc, #12]	; (800fa1c <BSP_SD_ReadCpltCallback+0x14>)
 800fa0e:	2201      	movs	r2, #1
 800fa10:	601a      	str	r2, [r3, #0]
}
 800fa12:	bf00      	nop
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr
 800fa1c:	2003c45c 	.word	0x2003c45c

0800fa20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	4603      	mov	r3, r0
 800fa28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fa2a:	79fb      	ldrb	r3, [r7, #7]
 800fa2c:	4a08      	ldr	r2, [pc, #32]	; (800fa50 <disk_status+0x30>)
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	4413      	add	r3, r2
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	79fa      	ldrb	r2, [r7, #7]
 800fa38:	4905      	ldr	r1, [pc, #20]	; (800fa50 <disk_status+0x30>)
 800fa3a:	440a      	add	r2, r1
 800fa3c:	7a12      	ldrb	r2, [r2, #8]
 800fa3e:	4610      	mov	r0, r2
 800fa40:	4798      	blx	r3
 800fa42:	4603      	mov	r3, r0
 800fa44:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fa46:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3710      	adds	r7, #16
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	2003c488 	.word	0x2003c488

0800fa54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fa62:	79fb      	ldrb	r3, [r7, #7]
 800fa64:	4a0d      	ldr	r2, [pc, #52]	; (800fa9c <disk_initialize+0x48>)
 800fa66:	5cd3      	ldrb	r3, [r2, r3]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d111      	bne.n	800fa90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fa6c:	79fb      	ldrb	r3, [r7, #7]
 800fa6e:	4a0b      	ldr	r2, [pc, #44]	; (800fa9c <disk_initialize+0x48>)
 800fa70:	2101      	movs	r1, #1
 800fa72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fa74:	79fb      	ldrb	r3, [r7, #7]
 800fa76:	4a09      	ldr	r2, [pc, #36]	; (800fa9c <disk_initialize+0x48>)
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	4413      	add	r3, r2
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	79fa      	ldrb	r2, [r7, #7]
 800fa82:	4906      	ldr	r1, [pc, #24]	; (800fa9c <disk_initialize+0x48>)
 800fa84:	440a      	add	r2, r1
 800fa86:	7a12      	ldrb	r2, [r2, #8]
 800fa88:	4610      	mov	r0, r2
 800fa8a:	4798      	blx	r3
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fa90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3710      	adds	r7, #16
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	2003c488 	.word	0x2003c488

0800faa0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800faa0:	b590      	push	{r4, r7, lr}
 800faa2:	b087      	sub	sp, #28
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60b9      	str	r1, [r7, #8]
 800faa8:	607a      	str	r2, [r7, #4]
 800faaa:	603b      	str	r3, [r7, #0]
 800faac:	4603      	mov	r3, r0
 800faae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
 800fab2:	4a0a      	ldr	r2, [pc, #40]	; (800fadc <disk_read+0x3c>)
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	4413      	add	r3, r2
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	689c      	ldr	r4, [r3, #8]
 800fabc:	7bfb      	ldrb	r3, [r7, #15]
 800fabe:	4a07      	ldr	r2, [pc, #28]	; (800fadc <disk_read+0x3c>)
 800fac0:	4413      	add	r3, r2
 800fac2:	7a18      	ldrb	r0, [r3, #8]
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	68b9      	ldr	r1, [r7, #8]
 800faca:	47a0      	blx	r4
 800facc:	4603      	mov	r3, r0
 800face:	75fb      	strb	r3, [r7, #23]
  return res;
 800fad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	371c      	adds	r7, #28
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd90      	pop	{r4, r7, pc}
 800fada:	bf00      	nop
 800fadc:	2003c488 	.word	0x2003c488

0800fae0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fae0:	b590      	push	{r4, r7, lr}
 800fae2:	b087      	sub	sp, #28
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60b9      	str	r1, [r7, #8]
 800fae8:	607a      	str	r2, [r7, #4]
 800faea:	603b      	str	r3, [r7, #0]
 800faec:	4603      	mov	r3, r0
 800faee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800faf0:	7bfb      	ldrb	r3, [r7, #15]
 800faf2:	4a0a      	ldr	r2, [pc, #40]	; (800fb1c <disk_write+0x3c>)
 800faf4:	009b      	lsls	r3, r3, #2
 800faf6:	4413      	add	r3, r2
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	68dc      	ldr	r4, [r3, #12]
 800fafc:	7bfb      	ldrb	r3, [r7, #15]
 800fafe:	4a07      	ldr	r2, [pc, #28]	; (800fb1c <disk_write+0x3c>)
 800fb00:	4413      	add	r3, r2
 800fb02:	7a18      	ldrb	r0, [r3, #8]
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	68b9      	ldr	r1, [r7, #8]
 800fb0a:	47a0      	blx	r4
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	75fb      	strb	r3, [r7, #23]
  return res;
 800fb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	371c      	adds	r7, #28
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd90      	pop	{r4, r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	2003c488 	.word	0x2003c488

0800fb20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	4603      	mov	r3, r0
 800fb28:	603a      	str	r2, [r7, #0]
 800fb2a:	71fb      	strb	r3, [r7, #7]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fb30:	79fb      	ldrb	r3, [r7, #7]
 800fb32:	4a09      	ldr	r2, [pc, #36]	; (800fb58 <disk_ioctl+0x38>)
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	4413      	add	r3, r2
 800fb38:	685b      	ldr	r3, [r3, #4]
 800fb3a:	691b      	ldr	r3, [r3, #16]
 800fb3c:	79fa      	ldrb	r2, [r7, #7]
 800fb3e:	4906      	ldr	r1, [pc, #24]	; (800fb58 <disk_ioctl+0x38>)
 800fb40:	440a      	add	r2, r1
 800fb42:	7a10      	ldrb	r0, [r2, #8]
 800fb44:	79b9      	ldrb	r1, [r7, #6]
 800fb46:	683a      	ldr	r2, [r7, #0]
 800fb48:	4798      	blx	r3
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	73fb      	strb	r3, [r7, #15]
  return res;
 800fb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	2003c488 	.word	0x2003c488

0800fb5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b085      	sub	sp, #20
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	3301      	adds	r3, #1
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fb6c:	89fb      	ldrh	r3, [r7, #14]
 800fb6e:	021b      	lsls	r3, r3, #8
 800fb70:	b21a      	sxth	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	b21b      	sxth	r3, r3
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	b21b      	sxth	r3, r3
 800fb7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fb7e:	89fb      	ldrh	r3, [r7, #14]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3714      	adds	r7, #20
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b085      	sub	sp, #20
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	3303      	adds	r3, #3
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	021b      	lsls	r3, r3, #8
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	3202      	adds	r2, #2
 800fba4:	7812      	ldrb	r2, [r2, #0]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	021b      	lsls	r3, r3, #8
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	3201      	adds	r2, #1
 800fbb2:	7812      	ldrb	r2, [r2, #0]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	021b      	lsls	r3, r3, #8
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	7812      	ldrb	r2, [r2, #0]
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	60fb      	str	r3, [r7, #12]
	return rv;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3714      	adds	r7, #20
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr

0800fbd2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fbd2:	b480      	push	{r7}
 800fbd4:	b083      	sub	sp, #12
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	460b      	mov	r3, r1
 800fbdc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	1c5a      	adds	r2, r3, #1
 800fbe2:	607a      	str	r2, [r7, #4]
 800fbe4:	887a      	ldrh	r2, [r7, #2]
 800fbe6:	b2d2      	uxtb	r2, r2
 800fbe8:	701a      	strb	r2, [r3, #0]
 800fbea:	887b      	ldrh	r3, [r7, #2]
 800fbec:	0a1b      	lsrs	r3, r3, #8
 800fbee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	1c5a      	adds	r2, r3, #1
 800fbf4:	607a      	str	r2, [r7, #4]
 800fbf6:	887a      	ldrh	r2, [r7, #2]
 800fbf8:	b2d2      	uxtb	r2, r2
 800fbfa:	701a      	strb	r2, [r3, #0]
}
 800fbfc:	bf00      	nop
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr

0800fc08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	1c5a      	adds	r2, r3, #1
 800fc16:	607a      	str	r2, [r7, #4]
 800fc18:	683a      	ldr	r2, [r7, #0]
 800fc1a:	b2d2      	uxtb	r2, r2
 800fc1c:	701a      	strb	r2, [r3, #0]
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	0a1b      	lsrs	r3, r3, #8
 800fc22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	1c5a      	adds	r2, r3, #1
 800fc28:	607a      	str	r2, [r7, #4]
 800fc2a:	683a      	ldr	r2, [r7, #0]
 800fc2c:	b2d2      	uxtb	r2, r2
 800fc2e:	701a      	strb	r2, [r3, #0]
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	0a1b      	lsrs	r3, r3, #8
 800fc34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	1c5a      	adds	r2, r3, #1
 800fc3a:	607a      	str	r2, [r7, #4]
 800fc3c:	683a      	ldr	r2, [r7, #0]
 800fc3e:	b2d2      	uxtb	r2, r2
 800fc40:	701a      	strb	r2, [r3, #0]
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	0a1b      	lsrs	r3, r3, #8
 800fc46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	1c5a      	adds	r2, r3, #1
 800fc4c:	607a      	str	r2, [r7, #4]
 800fc4e:	683a      	ldr	r2, [r7, #0]
 800fc50:	b2d2      	uxtb	r2, r2
 800fc52:	701a      	strb	r2, [r3, #0]
}
 800fc54:	bf00      	nop
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fc60:	b480      	push	{r7}
 800fc62:	b087      	sub	sp, #28
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00d      	beq.n	800fc96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fc7a:	693a      	ldr	r2, [r7, #16]
 800fc7c:	1c53      	adds	r3, r2, #1
 800fc7e:	613b      	str	r3, [r7, #16]
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	1c59      	adds	r1, r3, #1
 800fc84:	6179      	str	r1, [r7, #20]
 800fc86:	7812      	ldrb	r2, [r2, #0]
 800fc88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	607b      	str	r3, [r7, #4]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1f1      	bne.n	800fc7a <mem_cpy+0x1a>
	}
}
 800fc96:	bf00      	nop
 800fc98:	371c      	adds	r7, #28
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr

0800fca2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fca2:	b480      	push	{r7}
 800fca4:	b087      	sub	sp, #28
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	60f8      	str	r0, [r7, #12]
 800fcaa:	60b9      	str	r1, [r7, #8]
 800fcac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	1c5a      	adds	r2, r3, #1
 800fcb6:	617a      	str	r2, [r7, #20]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	b2d2      	uxtb	r2, r2
 800fcbc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	3b01      	subs	r3, #1
 800fcc2:	607b      	str	r3, [r7, #4]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1f3      	bne.n	800fcb2 <mem_set+0x10>
}
 800fcca:	bf00      	nop
 800fccc:	371c      	adds	r7, #28
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr

0800fcd6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fcd6:	b480      	push	{r7}
 800fcd8:	b089      	sub	sp, #36	; 0x24
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	60f8      	str	r0, [r7, #12]
 800fcde:	60b9      	str	r1, [r7, #8]
 800fce0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	61fb      	str	r3, [r7, #28]
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	1c5a      	adds	r2, r3, #1
 800fcf2:	61fa      	str	r2, [r7, #28]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	1c5a      	adds	r2, r3, #1
 800fcfc:	61ba      	str	r2, [r7, #24]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	1acb      	subs	r3, r1, r3
 800fd02:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	3b01      	subs	r3, #1
 800fd08:	607b      	str	r3, [r7, #4]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d002      	beq.n	800fd16 <mem_cmp+0x40>
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d0eb      	beq.n	800fcee <mem_cmp+0x18>

	return r;
 800fd16:	697b      	ldr	r3, [r7, #20]
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3724      	adds	r7, #36	; 0x24
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fd24:	b480      	push	{r7}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fd2e:	e002      	b.n	800fd36 <chk_chr+0x12>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3301      	adds	r3, #1
 800fd34:	607b      	str	r3, [r7, #4]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d005      	beq.n	800fd4a <chk_chr+0x26>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	461a      	mov	r2, r3
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d1f2      	bne.n	800fd30 <chk_chr+0xc>
	return *str;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	781b      	ldrb	r3, [r3, #0]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	370c      	adds	r7, #12
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
	...

0800fd5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fd66:	2300      	movs	r3, #0
 800fd68:	60bb      	str	r3, [r7, #8]
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	60fb      	str	r3, [r7, #12]
 800fd6e:	e029      	b.n	800fdc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fd70:	4a27      	ldr	r2, [pc, #156]	; (800fe10 <chk_lock+0xb4>)
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	011b      	lsls	r3, r3, #4
 800fd76:	4413      	add	r3, r2
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d01d      	beq.n	800fdba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fd7e:	4a24      	ldr	r2, [pc, #144]	; (800fe10 <chk_lock+0xb4>)
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	011b      	lsls	r3, r3, #4
 800fd84:	4413      	add	r3, r2
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d116      	bne.n	800fdbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fd90:	4a1f      	ldr	r2, [pc, #124]	; (800fe10 <chk_lock+0xb4>)
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	011b      	lsls	r3, r3, #4
 800fd96:	4413      	add	r3, r2
 800fd98:	3304      	adds	r3, #4
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d10c      	bne.n	800fdbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fda4:	4a1a      	ldr	r2, [pc, #104]	; (800fe10 <chk_lock+0xb4>)
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	011b      	lsls	r3, r3, #4
 800fdaa:	4413      	add	r3, r2
 800fdac:	3308      	adds	r3, #8
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d102      	bne.n	800fdbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fdb8:	e007      	b.n	800fdca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	60fb      	str	r3, [r7, #12]
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d9d2      	bls.n	800fd70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d109      	bne.n	800fde4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d102      	bne.n	800fddc <chk_lock+0x80>
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	2b02      	cmp	r3, #2
 800fdda:	d101      	bne.n	800fde0 <chk_lock+0x84>
 800fddc:	2300      	movs	r3, #0
 800fdde:	e010      	b.n	800fe02 <chk_lock+0xa6>
 800fde0:	2312      	movs	r3, #18
 800fde2:	e00e      	b.n	800fe02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d108      	bne.n	800fdfc <chk_lock+0xa0>
 800fdea:	4a09      	ldr	r2, [pc, #36]	; (800fe10 <chk_lock+0xb4>)
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	011b      	lsls	r3, r3, #4
 800fdf0:	4413      	add	r3, r2
 800fdf2:	330c      	adds	r3, #12
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdfa:	d101      	bne.n	800fe00 <chk_lock+0xa4>
 800fdfc:	2310      	movs	r3, #16
 800fdfe:	e000      	b.n	800fe02 <chk_lock+0xa6>
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3714      	adds	r7, #20
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	2003c468 	.word	0x2003c468

0800fe14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	607b      	str	r3, [r7, #4]
 800fe1e:	e002      	b.n	800fe26 <enq_lock+0x12>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	3301      	adds	r3, #1
 800fe24:	607b      	str	r3, [r7, #4]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	d806      	bhi.n	800fe3a <enq_lock+0x26>
 800fe2c:	4a09      	ldr	r2, [pc, #36]	; (800fe54 <enq_lock+0x40>)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	011b      	lsls	r3, r3, #4
 800fe32:	4413      	add	r3, r2
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d1f2      	bne.n	800fe20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2b02      	cmp	r3, #2
 800fe3e:	bf14      	ite	ne
 800fe40:	2301      	movne	r3, #1
 800fe42:	2300      	moveq	r3, #0
 800fe44:	b2db      	uxtb	r3, r3
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	370c      	adds	r7, #12
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop
 800fe54:	2003c468 	.word	0x2003c468

0800fe58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b085      	sub	sp, #20
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fe62:	2300      	movs	r3, #0
 800fe64:	60fb      	str	r3, [r7, #12]
 800fe66:	e01f      	b.n	800fea8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fe68:	4a41      	ldr	r2, [pc, #260]	; (800ff70 <inc_lock+0x118>)
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	011b      	lsls	r3, r3, #4
 800fe6e:	4413      	add	r3, r2
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d113      	bne.n	800fea2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fe7a:	4a3d      	ldr	r2, [pc, #244]	; (800ff70 <inc_lock+0x118>)
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	011b      	lsls	r3, r3, #4
 800fe80:	4413      	add	r3, r2
 800fe82:	3304      	adds	r3, #4
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d109      	bne.n	800fea2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fe8e:	4a38      	ldr	r2, [pc, #224]	; (800ff70 <inc_lock+0x118>)
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	011b      	lsls	r3, r3, #4
 800fe94:	4413      	add	r3, r2
 800fe96:	3308      	adds	r3, #8
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d006      	beq.n	800feb0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	3301      	adds	r3, #1
 800fea6:	60fb      	str	r3, [r7, #12]
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d9dc      	bls.n	800fe68 <inc_lock+0x10>
 800feae:	e000      	b.n	800feb2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800feb0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2b02      	cmp	r3, #2
 800feb6:	d132      	bne.n	800ff1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800feb8:	2300      	movs	r3, #0
 800feba:	60fb      	str	r3, [r7, #12]
 800febc:	e002      	b.n	800fec4 <inc_lock+0x6c>
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	3301      	adds	r3, #1
 800fec2:	60fb      	str	r3, [r7, #12]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2b01      	cmp	r3, #1
 800fec8:	d806      	bhi.n	800fed8 <inc_lock+0x80>
 800feca:	4a29      	ldr	r2, [pc, #164]	; (800ff70 <inc_lock+0x118>)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	011b      	lsls	r3, r3, #4
 800fed0:	4413      	add	r3, r2
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d1f2      	bne.n	800febe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2b02      	cmp	r3, #2
 800fedc:	d101      	bne.n	800fee2 <inc_lock+0x8a>
 800fede:	2300      	movs	r3, #0
 800fee0:	e040      	b.n	800ff64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	4922      	ldr	r1, [pc, #136]	; (800ff70 <inc_lock+0x118>)
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	011b      	lsls	r3, r3, #4
 800feec:	440b      	add	r3, r1
 800feee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	689a      	ldr	r2, [r3, #8]
 800fef4:	491e      	ldr	r1, [pc, #120]	; (800ff70 <inc_lock+0x118>)
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	011b      	lsls	r3, r3, #4
 800fefa:	440b      	add	r3, r1
 800fefc:	3304      	adds	r3, #4
 800fefe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	695a      	ldr	r2, [r3, #20]
 800ff04:	491a      	ldr	r1, [pc, #104]	; (800ff70 <inc_lock+0x118>)
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	011b      	lsls	r3, r3, #4
 800ff0a:	440b      	add	r3, r1
 800ff0c:	3308      	adds	r3, #8
 800ff0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ff10:	4a17      	ldr	r2, [pc, #92]	; (800ff70 <inc_lock+0x118>)
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	011b      	lsls	r3, r3, #4
 800ff16:	4413      	add	r3, r2
 800ff18:	330c      	adds	r3, #12
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d009      	beq.n	800ff38 <inc_lock+0xe0>
 800ff24:	4a12      	ldr	r2, [pc, #72]	; (800ff70 <inc_lock+0x118>)
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	011b      	lsls	r3, r3, #4
 800ff2a:	4413      	add	r3, r2
 800ff2c:	330c      	adds	r3, #12
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d001      	beq.n	800ff38 <inc_lock+0xe0>
 800ff34:	2300      	movs	r3, #0
 800ff36:	e015      	b.n	800ff64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d108      	bne.n	800ff50 <inc_lock+0xf8>
 800ff3e:	4a0c      	ldr	r2, [pc, #48]	; (800ff70 <inc_lock+0x118>)
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	011b      	lsls	r3, r3, #4
 800ff44:	4413      	add	r3, r2
 800ff46:	330c      	adds	r3, #12
 800ff48:	881b      	ldrh	r3, [r3, #0]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	b29a      	uxth	r2, r3
 800ff4e:	e001      	b.n	800ff54 <inc_lock+0xfc>
 800ff50:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff54:	4906      	ldr	r1, [pc, #24]	; (800ff70 <inc_lock+0x118>)
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	011b      	lsls	r3, r3, #4
 800ff5a:	440b      	add	r3, r1
 800ff5c:	330c      	adds	r3, #12
 800ff5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	3301      	adds	r3, #1
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3714      	adds	r7, #20
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr
 800ff70:	2003c468 	.word	0x2003c468

0800ff74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b085      	sub	sp, #20
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	607b      	str	r3, [r7, #4]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d825      	bhi.n	800ffd4 <dec_lock+0x60>
		n = Files[i].ctr;
 800ff88:	4a17      	ldr	r2, [pc, #92]	; (800ffe8 <dec_lock+0x74>)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	011b      	lsls	r3, r3, #4
 800ff8e:	4413      	add	r3, r2
 800ff90:	330c      	adds	r3, #12
 800ff92:	881b      	ldrh	r3, [r3, #0]
 800ff94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ff96:	89fb      	ldrh	r3, [r7, #14]
 800ff98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff9c:	d101      	bne.n	800ffa2 <dec_lock+0x2e>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ffa2:	89fb      	ldrh	r3, [r7, #14]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d002      	beq.n	800ffae <dec_lock+0x3a>
 800ffa8:	89fb      	ldrh	r3, [r7, #14]
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ffae:	4a0e      	ldr	r2, [pc, #56]	; (800ffe8 <dec_lock+0x74>)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	011b      	lsls	r3, r3, #4
 800ffb4:	4413      	add	r3, r2
 800ffb6:	330c      	adds	r3, #12
 800ffb8:	89fa      	ldrh	r2, [r7, #14]
 800ffba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ffbc:	89fb      	ldrh	r3, [r7, #14]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d105      	bne.n	800ffce <dec_lock+0x5a>
 800ffc2:	4a09      	ldr	r2, [pc, #36]	; (800ffe8 <dec_lock+0x74>)
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	011b      	lsls	r3, r3, #4
 800ffc8:	4413      	add	r3, r2
 800ffca:	2200      	movs	r2, #0
 800ffcc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	737b      	strb	r3, [r7, #13]
 800ffd2:	e001      	b.n	800ffd8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ffd8:	7b7b      	ldrb	r3, [r7, #13]
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3714      	adds	r7, #20
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	2003c468 	.word	0x2003c468

0800ffec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b085      	sub	sp, #20
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fff4:	2300      	movs	r3, #0
 800fff6:	60fb      	str	r3, [r7, #12]
 800fff8:	e010      	b.n	801001c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fffa:	4a0d      	ldr	r2, [pc, #52]	; (8010030 <clear_lock+0x44>)
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	011b      	lsls	r3, r3, #4
 8010000:	4413      	add	r3, r2
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	429a      	cmp	r2, r3
 8010008:	d105      	bne.n	8010016 <clear_lock+0x2a>
 801000a:	4a09      	ldr	r2, [pc, #36]	; (8010030 <clear_lock+0x44>)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	011b      	lsls	r3, r3, #4
 8010010:	4413      	add	r3, r2
 8010012:	2200      	movs	r2, #0
 8010014:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	3301      	adds	r3, #1
 801001a:	60fb      	str	r3, [r7, #12]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d9eb      	bls.n	800fffa <clear_lock+0xe>
	}
}
 8010022:	bf00      	nop
 8010024:	3714      	adds	r7, #20
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop
 8010030:	2003c468 	.word	0x2003c468

08010034 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b086      	sub	sp, #24
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801003c:	2300      	movs	r3, #0
 801003e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	78db      	ldrb	r3, [r3, #3]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d034      	beq.n	80100b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801004c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	7858      	ldrb	r0, [r3, #1]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010058:	2301      	movs	r3, #1
 801005a:	697a      	ldr	r2, [r7, #20]
 801005c:	f7ff fd40 	bl	800fae0 <disk_write>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d002      	beq.n	801006c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010066:	2301      	movs	r3, #1
 8010068:	73fb      	strb	r3, [r7, #15]
 801006a:	e022      	b.n	80100b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010076:	697a      	ldr	r2, [r7, #20]
 8010078:	1ad2      	subs	r2, r2, r3
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6a1b      	ldr	r3, [r3, #32]
 801007e:	429a      	cmp	r2, r3
 8010080:	d217      	bcs.n	80100b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	789b      	ldrb	r3, [r3, #2]
 8010086:	613b      	str	r3, [r7, #16]
 8010088:	e010      	b.n	80100ac <sync_window+0x78>
					wsect += fs->fsize;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a1b      	ldr	r3, [r3, #32]
 801008e:	697a      	ldr	r2, [r7, #20]
 8010090:	4413      	add	r3, r2
 8010092:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	7858      	ldrb	r0, [r3, #1]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801009e:	2301      	movs	r3, #1
 80100a0:	697a      	ldr	r2, [r7, #20]
 80100a2:	f7ff fd1d 	bl	800fae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	613b      	str	r3, [r7, #16]
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d8eb      	bhi.n	801008a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80100b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3718      	adds	r7, #24
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80100c6:	2300      	movs	r3, #0
 80100c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100ce:	683a      	ldr	r2, [r7, #0]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d01b      	beq.n	801010c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7ff ffad 	bl	8010034 <sync_window>
 80100da:	4603      	mov	r3, r0
 80100dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80100de:	7bfb      	ldrb	r3, [r7, #15]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d113      	bne.n	801010c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	7858      	ldrb	r0, [r3, #1]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80100ee:	2301      	movs	r3, #1
 80100f0:	683a      	ldr	r2, [r7, #0]
 80100f2:	f7ff fcd5 	bl	800faa0 <disk_read>
 80100f6:	4603      	mov	r3, r0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d004      	beq.n	8010106 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80100fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010100:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010102:	2301      	movs	r3, #1
 8010104:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	683a      	ldr	r2, [r7, #0]
 801010a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801010c:	7bfb      	ldrb	r3, [r7, #15]
}
 801010e:	4618      	mov	r0, r3
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
	...

08010118 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f7ff ff87 	bl	8010034 <sync_window>
 8010126:	4603      	mov	r3, r0
 8010128:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801012a:	7bfb      	ldrb	r3, [r7, #15]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d159      	bne.n	80101e4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	2b03      	cmp	r3, #3
 8010136:	d149      	bne.n	80101cc <sync_fs+0xb4>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	791b      	ldrb	r3, [r3, #4]
 801013c:	2b01      	cmp	r3, #1
 801013e:	d145      	bne.n	80101cc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	899b      	ldrh	r3, [r3, #12]
 801014a:	461a      	mov	r2, r3
 801014c:	2100      	movs	r1, #0
 801014e:	f7ff fda8 	bl	800fca2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	3338      	adds	r3, #56	; 0x38
 8010156:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801015a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801015e:	4618      	mov	r0, r3
 8010160:	f7ff fd37 	bl	800fbd2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	3338      	adds	r3, #56	; 0x38
 8010168:	4921      	ldr	r1, [pc, #132]	; (80101f0 <sync_fs+0xd8>)
 801016a:	4618      	mov	r0, r3
 801016c:	f7ff fd4c 	bl	800fc08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	3338      	adds	r3, #56	; 0x38
 8010174:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010178:	491e      	ldr	r1, [pc, #120]	; (80101f4 <sync_fs+0xdc>)
 801017a:	4618      	mov	r0, r3
 801017c:	f7ff fd44 	bl	800fc08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	3338      	adds	r3, #56	; 0x38
 8010184:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	695b      	ldr	r3, [r3, #20]
 801018c:	4619      	mov	r1, r3
 801018e:	4610      	mov	r0, r2
 8010190:	f7ff fd3a 	bl	800fc08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	3338      	adds	r3, #56	; 0x38
 8010198:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	691b      	ldr	r3, [r3, #16]
 80101a0:	4619      	mov	r1, r3
 80101a2:	4610      	mov	r0, r2
 80101a4:	f7ff fd30 	bl	800fc08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ac:	1c5a      	adds	r2, r3, #1
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	7858      	ldrb	r0, [r3, #1]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101c0:	2301      	movs	r3, #1
 80101c2:	f7ff fc8d 	bl	800fae0 <disk_write>
			fs->fsi_flag = 0;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2200      	movs	r2, #0
 80101ca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	785b      	ldrb	r3, [r3, #1]
 80101d0:	2200      	movs	r2, #0
 80101d2:	2100      	movs	r1, #0
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7ff fca3 	bl	800fb20 <disk_ioctl>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <sync_fs+0xcc>
 80101e0:	2301      	movs	r3, #1
 80101e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80101e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	41615252 	.word	0x41615252
 80101f4:	61417272 	.word	0x61417272

080101f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	3b02      	subs	r3, #2
 8010206:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	69db      	ldr	r3, [r3, #28]
 801020c:	3b02      	subs	r3, #2
 801020e:	683a      	ldr	r2, [r7, #0]
 8010210:	429a      	cmp	r2, r3
 8010212:	d301      	bcc.n	8010218 <clust2sect+0x20>
 8010214:	2300      	movs	r3, #0
 8010216:	e008      	b.n	801022a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	895b      	ldrh	r3, [r3, #10]
 801021c:	461a      	mov	r2, r3
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	fb03 f202 	mul.w	r2, r3, r2
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010228:	4413      	add	r3, r2
}
 801022a:	4618      	mov	r0, r3
 801022c:	370c      	adds	r7, #12
 801022e:	46bd      	mov	sp, r7
 8010230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010234:	4770      	bx	lr

08010236 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b086      	sub	sp, #24
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
 801023e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d904      	bls.n	8010256 <get_fat+0x20>
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	69db      	ldr	r3, [r3, #28]
 8010250:	683a      	ldr	r2, [r7, #0]
 8010252:	429a      	cmp	r2, r3
 8010254:	d302      	bcc.n	801025c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010256:	2301      	movs	r3, #1
 8010258:	617b      	str	r3, [r7, #20]
 801025a:	e0b7      	b.n	80103cc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801025c:	f04f 33ff 	mov.w	r3, #4294967295
 8010260:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	2b02      	cmp	r3, #2
 8010268:	d05a      	beq.n	8010320 <get_fat+0xea>
 801026a:	2b03      	cmp	r3, #3
 801026c:	d07d      	beq.n	801036a <get_fat+0x134>
 801026e:	2b01      	cmp	r3, #1
 8010270:	f040 80a2 	bne.w	80103b8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	60fb      	str	r3, [r7, #12]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	085b      	lsrs	r3, r3, #1
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	4413      	add	r3, r2
 8010280:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	899b      	ldrh	r3, [r3, #12]
 801028a:	4619      	mov	r1, r3
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010292:	4413      	add	r3, r2
 8010294:	4619      	mov	r1, r3
 8010296:	6938      	ldr	r0, [r7, #16]
 8010298:	f7ff ff10 	bl	80100bc <move_window>
 801029c:	4603      	mov	r3, r0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f040 808d 	bne.w	80103be <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	60fa      	str	r2, [r7, #12]
 80102aa:	693a      	ldr	r2, [r7, #16]
 80102ac:	8992      	ldrh	r2, [r2, #12]
 80102ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80102b2:	fb02 f201 	mul.w	r2, r2, r1
 80102b6:	1a9b      	subs	r3, r3, r2
 80102b8:	693a      	ldr	r2, [r7, #16]
 80102ba:	4413      	add	r3, r2
 80102bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80102c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	899b      	ldrh	r3, [r3, #12]
 80102ca:	4619      	mov	r1, r3
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80102d2:	4413      	add	r3, r2
 80102d4:	4619      	mov	r1, r3
 80102d6:	6938      	ldr	r0, [r7, #16]
 80102d8:	f7ff fef0 	bl	80100bc <move_window>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d16f      	bne.n	80103c2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	899b      	ldrh	r3, [r3, #12]
 80102e6:	461a      	mov	r2, r3
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80102ee:	fb02 f201 	mul.w	r2, r2, r1
 80102f2:	1a9b      	subs	r3, r3, r2
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	4413      	add	r3, r2
 80102f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80102fc:	021b      	lsls	r3, r3, #8
 80102fe:	461a      	mov	r2, r3
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	4313      	orrs	r3, r2
 8010304:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	f003 0301 	and.w	r3, r3, #1
 801030c:	2b00      	cmp	r3, #0
 801030e:	d002      	beq.n	8010316 <get_fat+0xe0>
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	091b      	lsrs	r3, r3, #4
 8010314:	e002      	b.n	801031c <get_fat+0xe6>
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801031c:	617b      	str	r3, [r7, #20]
			break;
 801031e:	e055      	b.n	80103cc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	899b      	ldrh	r3, [r3, #12]
 8010328:	085b      	lsrs	r3, r3, #1
 801032a:	b29b      	uxth	r3, r3
 801032c:	4619      	mov	r1, r3
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	fbb3 f3f1 	udiv	r3, r3, r1
 8010334:	4413      	add	r3, r2
 8010336:	4619      	mov	r1, r3
 8010338:	6938      	ldr	r0, [r7, #16]
 801033a:	f7ff febf 	bl	80100bc <move_window>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d140      	bne.n	80103c6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	005b      	lsls	r3, r3, #1
 801034e:	693a      	ldr	r2, [r7, #16]
 8010350:	8992      	ldrh	r2, [r2, #12]
 8010352:	fbb3 f0f2 	udiv	r0, r3, r2
 8010356:	fb02 f200 	mul.w	r2, r2, r0
 801035a:	1a9b      	subs	r3, r3, r2
 801035c:	440b      	add	r3, r1
 801035e:	4618      	mov	r0, r3
 8010360:	f7ff fbfc 	bl	800fb5c <ld_word>
 8010364:	4603      	mov	r3, r0
 8010366:	617b      	str	r3, [r7, #20]
			break;
 8010368:	e030      	b.n	80103cc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	899b      	ldrh	r3, [r3, #12]
 8010372:	089b      	lsrs	r3, r3, #2
 8010374:	b29b      	uxth	r3, r3
 8010376:	4619      	mov	r1, r3
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	fbb3 f3f1 	udiv	r3, r3, r1
 801037e:	4413      	add	r3, r2
 8010380:	4619      	mov	r1, r3
 8010382:	6938      	ldr	r0, [r7, #16]
 8010384:	f7ff fe9a 	bl	80100bc <move_window>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d11d      	bne.n	80103ca <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	009b      	lsls	r3, r3, #2
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	8992      	ldrh	r2, [r2, #12]
 801039c:	fbb3 f0f2 	udiv	r0, r3, r2
 80103a0:	fb02 f200 	mul.w	r2, r2, r0
 80103a4:	1a9b      	subs	r3, r3, r2
 80103a6:	440b      	add	r3, r1
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff fbef 	bl	800fb8c <ld_dword>
 80103ae:	4603      	mov	r3, r0
 80103b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80103b4:	617b      	str	r3, [r7, #20]
			break;
 80103b6:	e009      	b.n	80103cc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80103b8:	2301      	movs	r3, #1
 80103ba:	617b      	str	r3, [r7, #20]
 80103bc:	e006      	b.n	80103cc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80103be:	bf00      	nop
 80103c0:	e004      	b.n	80103cc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80103c2:	bf00      	nop
 80103c4:	e002      	b.n	80103cc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80103c6:	bf00      	nop
 80103c8:	e000      	b.n	80103cc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80103ca:	bf00      	nop
		}
	}

	return val;
 80103cc:	697b      	ldr	r3, [r7, #20]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3718      	adds	r7, #24
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}

080103d6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80103d6:	b590      	push	{r4, r7, lr}
 80103d8:	b089      	sub	sp, #36	; 0x24
 80103da:	af00      	add	r7, sp, #0
 80103dc:	60f8      	str	r0, [r7, #12]
 80103de:	60b9      	str	r1, [r7, #8]
 80103e0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80103e2:	2302      	movs	r3, #2
 80103e4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	f240 8106 	bls.w	80105fa <put_fat+0x224>
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	69db      	ldr	r3, [r3, #28]
 80103f2:	68ba      	ldr	r2, [r7, #8]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	f080 8100 	bcs.w	80105fa <put_fat+0x224>
		switch (fs->fs_type) {
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	2b02      	cmp	r3, #2
 8010400:	f000 8088 	beq.w	8010514 <put_fat+0x13e>
 8010404:	2b03      	cmp	r3, #3
 8010406:	f000 80b0 	beq.w	801056a <put_fat+0x194>
 801040a:	2b01      	cmp	r3, #1
 801040c:	f040 80f5 	bne.w	80105fa <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	61bb      	str	r3, [r7, #24]
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	085b      	lsrs	r3, r3, #1
 8010418:	69ba      	ldr	r2, [r7, #24]
 801041a:	4413      	add	r3, r2
 801041c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	899b      	ldrh	r3, [r3, #12]
 8010426:	4619      	mov	r1, r3
 8010428:	69bb      	ldr	r3, [r7, #24]
 801042a:	fbb3 f3f1 	udiv	r3, r3, r1
 801042e:	4413      	add	r3, r2
 8010430:	4619      	mov	r1, r3
 8010432:	68f8      	ldr	r0, [r7, #12]
 8010434:	f7ff fe42 	bl	80100bc <move_window>
 8010438:	4603      	mov	r3, r0
 801043a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801043c:	7ffb      	ldrb	r3, [r7, #31]
 801043e:	2b00      	cmp	r3, #0
 8010440:	f040 80d4 	bne.w	80105ec <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	1c5a      	adds	r2, r3, #1
 801044e:	61ba      	str	r2, [r7, #24]
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	8992      	ldrh	r2, [r2, #12]
 8010454:	fbb3 f0f2 	udiv	r0, r3, r2
 8010458:	fb02 f200 	mul.w	r2, r2, r0
 801045c:	1a9b      	subs	r3, r3, r2
 801045e:	440b      	add	r3, r1
 8010460:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	f003 0301 	and.w	r3, r3, #1
 8010468:	2b00      	cmp	r3, #0
 801046a:	d00d      	beq.n	8010488 <put_fat+0xb2>
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	b25b      	sxtb	r3, r3
 8010472:	f003 030f 	and.w	r3, r3, #15
 8010476:	b25a      	sxtb	r2, r3
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	b2db      	uxtb	r3, r3
 801047c:	011b      	lsls	r3, r3, #4
 801047e:	b25b      	sxtb	r3, r3
 8010480:	4313      	orrs	r3, r2
 8010482:	b25b      	sxtb	r3, r3
 8010484:	b2db      	uxtb	r3, r3
 8010486:	e001      	b.n	801048c <put_fat+0xb6>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	b2db      	uxtb	r3, r3
 801048c:	697a      	ldr	r2, [r7, #20]
 801048e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2201      	movs	r2, #1
 8010494:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	899b      	ldrh	r3, [r3, #12]
 801049e:	4619      	mov	r1, r3
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80104a6:	4413      	add	r3, r2
 80104a8:	4619      	mov	r1, r3
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	f7ff fe06 	bl	80100bc <move_window>
 80104b0:	4603      	mov	r3, r0
 80104b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80104b4:	7ffb      	ldrb	r3, [r7, #31]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f040 809a 	bne.w	80105f0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	899b      	ldrh	r3, [r3, #12]
 80104c6:	461a      	mov	r2, r3
 80104c8:	69bb      	ldr	r3, [r7, #24]
 80104ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80104ce:	fb02 f200 	mul.w	r2, r2, r0
 80104d2:	1a9b      	subs	r3, r3, r2
 80104d4:	440b      	add	r3, r1
 80104d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	f003 0301 	and.w	r3, r3, #1
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d003      	beq.n	80104ea <put_fat+0x114>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	091b      	lsrs	r3, r3, #4
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	e00e      	b.n	8010508 <put_fat+0x132>
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	b25b      	sxtb	r3, r3
 80104f0:	f023 030f 	bic.w	r3, r3, #15
 80104f4:	b25a      	sxtb	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	0a1b      	lsrs	r3, r3, #8
 80104fa:	b25b      	sxtb	r3, r3
 80104fc:	f003 030f 	and.w	r3, r3, #15
 8010500:	b25b      	sxtb	r3, r3
 8010502:	4313      	orrs	r3, r2
 8010504:	b25b      	sxtb	r3, r3
 8010506:	b2db      	uxtb	r3, r3
 8010508:	697a      	ldr	r2, [r7, #20]
 801050a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2201      	movs	r2, #1
 8010510:	70da      	strb	r2, [r3, #3]
			break;
 8010512:	e072      	b.n	80105fa <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	899b      	ldrh	r3, [r3, #12]
 801051c:	085b      	lsrs	r3, r3, #1
 801051e:	b29b      	uxth	r3, r3
 8010520:	4619      	mov	r1, r3
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	fbb3 f3f1 	udiv	r3, r3, r1
 8010528:	4413      	add	r3, r2
 801052a:	4619      	mov	r1, r3
 801052c:	68f8      	ldr	r0, [r7, #12]
 801052e:	f7ff fdc5 	bl	80100bc <move_window>
 8010532:	4603      	mov	r3, r0
 8010534:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010536:	7ffb      	ldrb	r3, [r7, #31]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d15b      	bne.n	80105f4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	005b      	lsls	r3, r3, #1
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	8992      	ldrh	r2, [r2, #12]
 801054a:	fbb3 f0f2 	udiv	r0, r3, r2
 801054e:	fb02 f200 	mul.w	r2, r2, r0
 8010552:	1a9b      	subs	r3, r3, r2
 8010554:	440b      	add	r3, r1
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	b292      	uxth	r2, r2
 801055a:	4611      	mov	r1, r2
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fb38 	bl	800fbd2 <st_word>
			fs->wflag = 1;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2201      	movs	r2, #1
 8010566:	70da      	strb	r2, [r3, #3]
			break;
 8010568:	e047      	b.n	80105fa <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	899b      	ldrh	r3, [r3, #12]
 8010572:	089b      	lsrs	r3, r3, #2
 8010574:	b29b      	uxth	r3, r3
 8010576:	4619      	mov	r1, r3
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	fbb3 f3f1 	udiv	r3, r3, r1
 801057e:	4413      	add	r3, r2
 8010580:	4619      	mov	r1, r3
 8010582:	68f8      	ldr	r0, [r7, #12]
 8010584:	f7ff fd9a 	bl	80100bc <move_window>
 8010588:	4603      	mov	r3, r0
 801058a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801058c:	7ffb      	ldrb	r3, [r7, #31]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d132      	bne.n	80105f8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	68fa      	ldr	r2, [r7, #12]
 80105a4:	8992      	ldrh	r2, [r2, #12]
 80105a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80105aa:	fb02 f200 	mul.w	r2, r2, r0
 80105ae:	1a9b      	subs	r3, r3, r2
 80105b0:	440b      	add	r3, r1
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7ff faea 	bl	800fb8c <ld_dword>
 80105b8:	4603      	mov	r3, r0
 80105ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80105be:	4323      	orrs	r3, r4
 80105c0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	8992      	ldrh	r2, [r2, #12]
 80105d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80105d4:	fb02 f200 	mul.w	r2, r2, r0
 80105d8:	1a9b      	subs	r3, r3, r2
 80105da:	440b      	add	r3, r1
 80105dc:	6879      	ldr	r1, [r7, #4]
 80105de:	4618      	mov	r0, r3
 80105e0:	f7ff fb12 	bl	800fc08 <st_dword>
			fs->wflag = 1;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2201      	movs	r2, #1
 80105e8:	70da      	strb	r2, [r3, #3]
			break;
 80105ea:	e006      	b.n	80105fa <put_fat+0x224>
			if (res != FR_OK) break;
 80105ec:	bf00      	nop
 80105ee:	e004      	b.n	80105fa <put_fat+0x224>
			if (res != FR_OK) break;
 80105f0:	bf00      	nop
 80105f2:	e002      	b.n	80105fa <put_fat+0x224>
			if (res != FR_OK) break;
 80105f4:	bf00      	nop
 80105f6:	e000      	b.n	80105fa <put_fat+0x224>
			if (res != FR_OK) break;
 80105f8:	bf00      	nop
		}
	}
	return res;
 80105fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3724      	adds	r7, #36	; 0x24
 8010600:	46bd      	mov	sp, r7
 8010602:	bd90      	pop	{r4, r7, pc}

08010604 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b088      	sub	sp, #32
 8010608:	af00      	add	r7, sp, #0
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010610:	2300      	movs	r3, #0
 8010612:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	2b01      	cmp	r3, #1
 801061e:	d904      	bls.n	801062a <remove_chain+0x26>
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	69db      	ldr	r3, [r3, #28]
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	429a      	cmp	r2, r3
 8010628:	d301      	bcc.n	801062e <remove_chain+0x2a>
 801062a:	2302      	movs	r3, #2
 801062c:	e04b      	b.n	80106c6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d00c      	beq.n	801064e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010634:	f04f 32ff 	mov.w	r2, #4294967295
 8010638:	6879      	ldr	r1, [r7, #4]
 801063a:	69b8      	ldr	r0, [r7, #24]
 801063c:	f7ff fecb 	bl	80103d6 <put_fat>
 8010640:	4603      	mov	r3, r0
 8010642:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010644:	7ffb      	ldrb	r3, [r7, #31]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <remove_chain+0x4a>
 801064a:	7ffb      	ldrb	r3, [r7, #31]
 801064c:	e03b      	b.n	80106c6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801064e:	68b9      	ldr	r1, [r7, #8]
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f7ff fdf0 	bl	8010236 <get_fat>
 8010656:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d031      	beq.n	80106c2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d101      	bne.n	8010668 <remove_chain+0x64>
 8010664:	2302      	movs	r3, #2
 8010666:	e02e      	b.n	80106c6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801066e:	d101      	bne.n	8010674 <remove_chain+0x70>
 8010670:	2301      	movs	r3, #1
 8010672:	e028      	b.n	80106c6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010674:	2200      	movs	r2, #0
 8010676:	68b9      	ldr	r1, [r7, #8]
 8010678:	69b8      	ldr	r0, [r7, #24]
 801067a:	f7ff feac 	bl	80103d6 <put_fat>
 801067e:	4603      	mov	r3, r0
 8010680:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010682:	7ffb      	ldrb	r3, [r7, #31]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d001      	beq.n	801068c <remove_chain+0x88>
 8010688:	7ffb      	ldrb	r3, [r7, #31]
 801068a:	e01c      	b.n	80106c6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	695a      	ldr	r2, [r3, #20]
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	69db      	ldr	r3, [r3, #28]
 8010694:	3b02      	subs	r3, #2
 8010696:	429a      	cmp	r2, r3
 8010698:	d20b      	bcs.n	80106b2 <remove_chain+0xae>
			fs->free_clst++;
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	695b      	ldr	r3, [r3, #20]
 801069e:	1c5a      	adds	r2, r3, #1
 80106a0:	69bb      	ldr	r3, [r7, #24]
 80106a2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	791b      	ldrb	r3, [r3, #4]
 80106a8:	f043 0301 	orr.w	r3, r3, #1
 80106ac:	b2da      	uxtb	r2, r3
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	69db      	ldr	r3, [r3, #28]
 80106ba:	68ba      	ldr	r2, [r7, #8]
 80106bc:	429a      	cmp	r2, r3
 80106be:	d3c6      	bcc.n	801064e <remove_chain+0x4a>
 80106c0:	e000      	b.n	80106c4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80106c2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80106c4:	2300      	movs	r3, #0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3720      	adds	r7, #32
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b088      	sub	sp, #32
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
 80106d6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d10d      	bne.n	8010700 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	691b      	ldr	r3, [r3, #16]
 80106e8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80106ea:	69bb      	ldr	r3, [r7, #24]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d004      	beq.n	80106fa <create_chain+0x2c>
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	69db      	ldr	r3, [r3, #28]
 80106f4:	69ba      	ldr	r2, [r7, #24]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d31b      	bcc.n	8010732 <create_chain+0x64>
 80106fa:	2301      	movs	r3, #1
 80106fc:	61bb      	str	r3, [r7, #24]
 80106fe:	e018      	b.n	8010732 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010700:	6839      	ldr	r1, [r7, #0]
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7ff fd97 	bl	8010236 <get_fat>
 8010708:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d801      	bhi.n	8010714 <create_chain+0x46>
 8010710:	2301      	movs	r3, #1
 8010712:	e070      	b.n	80107f6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801071a:	d101      	bne.n	8010720 <create_chain+0x52>
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	e06a      	b.n	80107f6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	69db      	ldr	r3, [r3, #28]
 8010724:	68fa      	ldr	r2, [r7, #12]
 8010726:	429a      	cmp	r2, r3
 8010728:	d201      	bcs.n	801072e <create_chain+0x60>
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	e063      	b.n	80107f6 <create_chain+0x128>
		scl = clst;
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	3301      	adds	r3, #1
 801073a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	69db      	ldr	r3, [r3, #28]
 8010740:	69fa      	ldr	r2, [r7, #28]
 8010742:	429a      	cmp	r2, r3
 8010744:	d307      	bcc.n	8010756 <create_chain+0x88>
				ncl = 2;
 8010746:	2302      	movs	r3, #2
 8010748:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801074a:	69fa      	ldr	r2, [r7, #28]
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	429a      	cmp	r2, r3
 8010750:	d901      	bls.n	8010756 <create_chain+0x88>
 8010752:	2300      	movs	r3, #0
 8010754:	e04f      	b.n	80107f6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010756:	69f9      	ldr	r1, [r7, #28]
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f7ff fd6c 	bl	8010236 <get_fat>
 801075e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00e      	beq.n	8010784 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d003      	beq.n	8010774 <create_chain+0xa6>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010772:	d101      	bne.n	8010778 <create_chain+0xaa>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	e03e      	b.n	80107f6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010778:	69fa      	ldr	r2, [r7, #28]
 801077a:	69bb      	ldr	r3, [r7, #24]
 801077c:	429a      	cmp	r2, r3
 801077e:	d1da      	bne.n	8010736 <create_chain+0x68>
 8010780:	2300      	movs	r3, #0
 8010782:	e038      	b.n	80107f6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010784:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010786:	f04f 32ff 	mov.w	r2, #4294967295
 801078a:	69f9      	ldr	r1, [r7, #28]
 801078c:	6938      	ldr	r0, [r7, #16]
 801078e:	f7ff fe22 	bl	80103d6 <put_fat>
 8010792:	4603      	mov	r3, r0
 8010794:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010796:	7dfb      	ldrb	r3, [r7, #23]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d109      	bne.n	80107b0 <create_chain+0xe2>
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d006      	beq.n	80107b0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80107a2:	69fa      	ldr	r2, [r7, #28]
 80107a4:	6839      	ldr	r1, [r7, #0]
 80107a6:	6938      	ldr	r0, [r7, #16]
 80107a8:	f7ff fe15 	bl	80103d6 <put_fat>
 80107ac:	4603      	mov	r3, r0
 80107ae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80107b0:	7dfb      	ldrb	r3, [r7, #23]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d116      	bne.n	80107e4 <create_chain+0x116>
		fs->last_clst = ncl;
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	69fa      	ldr	r2, [r7, #28]
 80107ba:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	695a      	ldr	r2, [r3, #20]
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	69db      	ldr	r3, [r3, #28]
 80107c4:	3b02      	subs	r3, #2
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d804      	bhi.n	80107d4 <create_chain+0x106>
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	695b      	ldr	r3, [r3, #20]
 80107ce:	1e5a      	subs	r2, r3, #1
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	791b      	ldrb	r3, [r3, #4]
 80107d8:	f043 0301 	orr.w	r3, r3, #1
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	711a      	strb	r2, [r3, #4]
 80107e2:	e007      	b.n	80107f4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80107e4:	7dfb      	ldrb	r3, [r7, #23]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d102      	bne.n	80107f0 <create_chain+0x122>
 80107ea:	f04f 33ff 	mov.w	r3, #4294967295
 80107ee:	e000      	b.n	80107f2 <create_chain+0x124>
 80107f0:	2301      	movs	r3, #1
 80107f2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80107f4:	69fb      	ldr	r3, [r7, #28]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3720      	adds	r7, #32
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80107fe:	b480      	push	{r7}
 8010800:	b087      	sub	sp, #28
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
 8010806:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010812:	3304      	adds	r3, #4
 8010814:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	899b      	ldrh	r3, [r3, #12]
 801081a:	461a      	mov	r2, r3
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010822:	68fa      	ldr	r2, [r7, #12]
 8010824:	8952      	ldrh	r2, [r2, #10]
 8010826:	fbb3 f3f2 	udiv	r3, r3, r2
 801082a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	1d1a      	adds	r2, r3, #4
 8010830:	613a      	str	r2, [r7, #16]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d101      	bne.n	8010840 <clmt_clust+0x42>
 801083c:	2300      	movs	r3, #0
 801083e:	e010      	b.n	8010862 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010840:	697a      	ldr	r2, [r7, #20]
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	429a      	cmp	r2, r3
 8010846:	d307      	bcc.n	8010858 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010848:	697a      	ldr	r2, [r7, #20]
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	1ad3      	subs	r3, r2, r3
 801084e:	617b      	str	r3, [r7, #20]
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	3304      	adds	r3, #4
 8010854:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010856:	e7e9      	b.n	801082c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010858:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	4413      	add	r3, r2
}
 8010862:	4618      	mov	r0, r3
 8010864:	371c      	adds	r7, #28
 8010866:	46bd      	mov	sp, r7
 8010868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086c:	4770      	bx	lr

0801086e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801086e:	b580      	push	{r7, lr}
 8010870:	b086      	sub	sp, #24
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]
 8010876:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010884:	d204      	bcs.n	8010890 <dir_sdi+0x22>
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	f003 031f 	and.w	r3, r3, #31
 801088c:	2b00      	cmp	r3, #0
 801088e:	d001      	beq.n	8010894 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010890:	2302      	movs	r3, #2
 8010892:	e071      	b.n	8010978 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	683a      	ldr	r2, [r7, #0]
 8010898:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	689b      	ldr	r3, [r3, #8]
 801089e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d106      	bne.n	80108b4 <dir_sdi+0x46>
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	2b02      	cmp	r3, #2
 80108ac:	d902      	bls.n	80108b4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d10c      	bne.n	80108d4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	095b      	lsrs	r3, r3, #5
 80108be:	693a      	ldr	r2, [r7, #16]
 80108c0:	8912      	ldrh	r2, [r2, #8]
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d301      	bcc.n	80108ca <dir_sdi+0x5c>
 80108c6:	2302      	movs	r3, #2
 80108c8:	e056      	b.n	8010978 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	61da      	str	r2, [r3, #28]
 80108d2:	e02d      	b.n	8010930 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	895b      	ldrh	r3, [r3, #10]
 80108d8:	461a      	mov	r2, r3
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	899b      	ldrh	r3, [r3, #12]
 80108de:	fb03 f302 	mul.w	r3, r3, r2
 80108e2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80108e4:	e019      	b.n	801091a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6979      	ldr	r1, [r7, #20]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7ff fca3 	bl	8010236 <get_fat>
 80108f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f8:	d101      	bne.n	80108fe <dir_sdi+0x90>
 80108fa:	2301      	movs	r3, #1
 80108fc:	e03c      	b.n	8010978 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	2b01      	cmp	r3, #1
 8010902:	d904      	bls.n	801090e <dir_sdi+0xa0>
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	69db      	ldr	r3, [r3, #28]
 8010908:	697a      	ldr	r2, [r7, #20]
 801090a:	429a      	cmp	r2, r3
 801090c:	d301      	bcc.n	8010912 <dir_sdi+0xa4>
 801090e:	2302      	movs	r3, #2
 8010910:	e032      	b.n	8010978 <dir_sdi+0x10a>
			ofs -= csz;
 8010912:	683a      	ldr	r2, [r7, #0]
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	1ad3      	subs	r3, r2, r3
 8010918:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801091a:	683a      	ldr	r2, [r7, #0]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	429a      	cmp	r2, r3
 8010920:	d2e1      	bcs.n	80108e6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010922:	6979      	ldr	r1, [r7, #20]
 8010924:	6938      	ldr	r0, [r7, #16]
 8010926:	f7ff fc67 	bl	80101f8 <clust2sect>
 801092a:	4602      	mov	r2, r0
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	697a      	ldr	r2, [r7, #20]
 8010934:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	69db      	ldr	r3, [r3, #28]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d101      	bne.n	8010942 <dir_sdi+0xd4>
 801093e:	2302      	movs	r3, #2
 8010940:	e01a      	b.n	8010978 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	69da      	ldr	r2, [r3, #28]
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	899b      	ldrh	r3, [r3, #12]
 801094a:	4619      	mov	r1, r3
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010952:	441a      	add	r2, r3
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	899b      	ldrh	r3, [r3, #12]
 8010962:	461a      	mov	r2, r3
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	fbb3 f0f2 	udiv	r0, r3, r2
 801096a:	fb02 f200 	mul.w	r2, r2, r0
 801096e:	1a9b      	subs	r3, r3, r2
 8010970:	18ca      	adds	r2, r1, r3
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010976:	2300      	movs	r3, #0
}
 8010978:	4618      	mov	r0, r3
 801097a:	3718      	adds	r7, #24
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	695b      	ldr	r3, [r3, #20]
 8010994:	3320      	adds	r3, #32
 8010996:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	69db      	ldr	r3, [r3, #28]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d003      	beq.n	80109a8 <dir_next+0x28>
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80109a6:	d301      	bcc.n	80109ac <dir_next+0x2c>
 80109a8:	2304      	movs	r3, #4
 80109aa:	e0bb      	b.n	8010b24 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	899b      	ldrh	r3, [r3, #12]
 80109b0:	461a      	mov	r2, r3
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80109b8:	fb02 f201 	mul.w	r2, r2, r1
 80109bc:	1a9b      	subs	r3, r3, r2
 80109be:	2b00      	cmp	r3, #0
 80109c0:	f040 809d 	bne.w	8010afe <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	69db      	ldr	r3, [r3, #28]
 80109c8:	1c5a      	adds	r2, r3, #1
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	699b      	ldr	r3, [r3, #24]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d10b      	bne.n	80109ee <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	095b      	lsrs	r3, r3, #5
 80109da:	68fa      	ldr	r2, [r7, #12]
 80109dc:	8912      	ldrh	r2, [r2, #8]
 80109de:	4293      	cmp	r3, r2
 80109e0:	f0c0 808d 	bcc.w	8010afe <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	61da      	str	r2, [r3, #28]
 80109ea:	2304      	movs	r3, #4
 80109ec:	e09a      	b.n	8010b24 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	899b      	ldrh	r3, [r3, #12]
 80109f2:	461a      	mov	r2, r3
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80109fa:	68fa      	ldr	r2, [r7, #12]
 80109fc:	8952      	ldrh	r2, [r2, #10]
 80109fe:	3a01      	subs	r2, #1
 8010a00:	4013      	ands	r3, r2
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d17b      	bne.n	8010afe <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	699b      	ldr	r3, [r3, #24]
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	4610      	mov	r0, r2
 8010a10:	f7ff fc11 	bl	8010236 <get_fat>
 8010a14:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d801      	bhi.n	8010a20 <dir_next+0xa0>
 8010a1c:	2302      	movs	r3, #2
 8010a1e:	e081      	b.n	8010b24 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a26:	d101      	bne.n	8010a2c <dir_next+0xac>
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e07b      	b.n	8010b24 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	69db      	ldr	r3, [r3, #28]
 8010a30:	697a      	ldr	r2, [r7, #20]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d359      	bcc.n	8010aea <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d104      	bne.n	8010a46 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	61da      	str	r2, [r3, #28]
 8010a42:	2304      	movs	r3, #4
 8010a44:	e06e      	b.n	8010b24 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	699b      	ldr	r3, [r3, #24]
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	4610      	mov	r0, r2
 8010a50:	f7ff fe3d 	bl	80106ce <create_chain>
 8010a54:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d101      	bne.n	8010a60 <dir_next+0xe0>
 8010a5c:	2307      	movs	r3, #7
 8010a5e:	e061      	b.n	8010b24 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d101      	bne.n	8010a6a <dir_next+0xea>
 8010a66:	2302      	movs	r3, #2
 8010a68:	e05c      	b.n	8010b24 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a70:	d101      	bne.n	8010a76 <dir_next+0xf6>
 8010a72:	2301      	movs	r3, #1
 8010a74:	e056      	b.n	8010b24 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010a76:	68f8      	ldr	r0, [r7, #12]
 8010a78:	f7ff fadc 	bl	8010034 <sync_window>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d001      	beq.n	8010a86 <dir_next+0x106>
 8010a82:	2301      	movs	r3, #1
 8010a84:	e04e      	b.n	8010b24 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	899b      	ldrh	r3, [r3, #12]
 8010a90:	461a      	mov	r2, r3
 8010a92:	2100      	movs	r1, #0
 8010a94:	f7ff f905 	bl	800fca2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010a98:	2300      	movs	r3, #0
 8010a9a:	613b      	str	r3, [r7, #16]
 8010a9c:	6979      	ldr	r1, [r7, #20]
 8010a9e:	68f8      	ldr	r0, [r7, #12]
 8010aa0:	f7ff fbaa 	bl	80101f8 <clust2sect>
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8010aaa:	e012      	b.n	8010ad2 <dir_next+0x152>
						fs->wflag = 1;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	2201      	movs	r2, #1
 8010ab0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f7ff fabe 	bl	8010034 <sync_window>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d001      	beq.n	8010ac2 <dir_next+0x142>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	e030      	b.n	8010b24 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	613b      	str	r3, [r7, #16]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010acc:	1c5a      	adds	r2, r3, #1
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	895b      	ldrh	r3, [r3, #10]
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d3e6      	bcc.n	8010aac <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	1ad2      	subs	r2, r2, r3
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	697a      	ldr	r2, [r7, #20]
 8010aee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010af0:	6979      	ldr	r1, [r7, #20]
 8010af2:	68f8      	ldr	r0, [r7, #12]
 8010af4:	f7ff fb80 	bl	80101f8 <clust2sect>
 8010af8:	4602      	mov	r2, r0
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	68ba      	ldr	r2, [r7, #8]
 8010b02:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	899b      	ldrh	r3, [r3, #12]
 8010b0e:	461a      	mov	r2, r3
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b16:	fb02 f200 	mul.w	r2, r2, r0
 8010b1a:	1a9b      	subs	r3, r3, r2
 8010b1c:	18ca      	adds	r2, r1, r3
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010b22:	2300      	movs	r3, #0
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3718      	adds	r7, #24
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b086      	sub	sp, #24
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010b3c:	2100      	movs	r1, #0
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f7ff fe95 	bl	801086e <dir_sdi>
 8010b44:	4603      	mov	r3, r0
 8010b46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010b48:	7dfb      	ldrb	r3, [r7, #23]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d12b      	bne.n	8010ba6 <dir_alloc+0x7a>
		n = 0;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	69db      	ldr	r3, [r3, #28]
 8010b56:	4619      	mov	r1, r3
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f7ff faaf 	bl	80100bc <move_window>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010b62:	7dfb      	ldrb	r3, [r7, #23]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d11d      	bne.n	8010ba4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6a1b      	ldr	r3, [r3, #32]
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	2be5      	cmp	r3, #229	; 0xe5
 8010b70:	d004      	beq.n	8010b7c <dir_alloc+0x50>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6a1b      	ldr	r3, [r3, #32]
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d107      	bne.n	8010b8c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	613b      	str	r3, [r7, #16]
 8010b82:	693a      	ldr	r2, [r7, #16]
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d102      	bne.n	8010b90 <dir_alloc+0x64>
 8010b8a:	e00c      	b.n	8010ba6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010b90:	2101      	movs	r1, #1
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f7ff fef4 	bl	8010980 <dir_next>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010b9c:	7dfb      	ldrb	r3, [r7, #23]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d0d7      	beq.n	8010b52 <dir_alloc+0x26>
 8010ba2:	e000      	b.n	8010ba6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010ba4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
 8010ba8:	2b04      	cmp	r3, #4
 8010baa:	d101      	bne.n	8010bb0 <dir_alloc+0x84>
 8010bac:	2307      	movs	r3, #7
 8010bae:	75fb      	strb	r3, [r7, #23]
	return res;
 8010bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3718      	adds	r7, #24
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}

08010bba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010bba:	b580      	push	{r7, lr}
 8010bbc:	b084      	sub	sp, #16
 8010bbe:	af00      	add	r7, sp, #0
 8010bc0:	6078      	str	r0, [r7, #4]
 8010bc2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	331a      	adds	r3, #26
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7fe ffc7 	bl	800fb5c <ld_word>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	2b03      	cmp	r3, #3
 8010bd8:	d109      	bne.n	8010bee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	3314      	adds	r3, #20
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7fe ffbc 	bl	800fb5c <ld_word>
 8010be4:	4603      	mov	r3, r0
 8010be6:	041b      	lsls	r3, r3, #16
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	4313      	orrs	r3, r2
 8010bec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010bee:	68fb      	ldr	r3, [r7, #12]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3710      	adds	r7, #16
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	331a      	adds	r3, #26
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	b292      	uxth	r2, r2
 8010c0c:	4611      	mov	r1, r2
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fe ffdf 	bl	800fbd2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	2b03      	cmp	r3, #3
 8010c1a:	d109      	bne.n	8010c30 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	f103 0214 	add.w	r2, r3, #20
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	0c1b      	lsrs	r3, r3, #16
 8010c26:	b29b      	uxth	r3, r3
 8010c28:	4619      	mov	r1, r3
 8010c2a:	4610      	mov	r0, r2
 8010c2c:	f7fe ffd1 	bl	800fbd2 <st_word>
	}
}
 8010c30:	bf00      	nop
 8010c32:	3710      	adds	r7, #16
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010c42:	2304      	movs	r3, #4
 8010c44:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010c4c:	e03c      	b.n	8010cc8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	69db      	ldr	r3, [r3, #28]
 8010c52:	4619      	mov	r1, r3
 8010c54:	6938      	ldr	r0, [r7, #16]
 8010c56:	f7ff fa31 	bl	80100bc <move_window>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010c5e:	7dfb      	ldrb	r3, [r7, #23]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d136      	bne.n	8010cd2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6a1b      	ldr	r3, [r3, #32]
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8010c6c:	7bfb      	ldrb	r3, [r7, #15]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d102      	bne.n	8010c78 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010c72:	2304      	movs	r3, #4
 8010c74:	75fb      	strb	r3, [r7, #23]
 8010c76:	e031      	b.n	8010cdc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6a1b      	ldr	r3, [r3, #32]
 8010c7c:	330b      	adds	r3, #11
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c84:	73bb      	strb	r3, [r7, #14]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	7bba      	ldrb	r2, [r7, #14]
 8010c8a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
 8010c8e:	2be5      	cmp	r3, #229	; 0xe5
 8010c90:	d011      	beq.n	8010cb6 <dir_read+0x7e>
 8010c92:	7bfb      	ldrb	r3, [r7, #15]
 8010c94:	2b2e      	cmp	r3, #46	; 0x2e
 8010c96:	d00e      	beq.n	8010cb6 <dir_read+0x7e>
 8010c98:	7bbb      	ldrb	r3, [r7, #14]
 8010c9a:	2b0f      	cmp	r3, #15
 8010c9c:	d00b      	beq.n	8010cb6 <dir_read+0x7e>
 8010c9e:	7bbb      	ldrb	r3, [r7, #14]
 8010ca0:	f023 0320 	bic.w	r3, r3, #32
 8010ca4:	2b08      	cmp	r3, #8
 8010ca6:	bf0c      	ite	eq
 8010ca8:	2301      	moveq	r3, #1
 8010caa:	2300      	movne	r3, #0
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	461a      	mov	r2, r3
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d00f      	beq.n	8010cd6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7ff fe61 	bl	8010980 <dir_next>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d108      	bne.n	8010cda <dir_read+0xa2>
	while (dp->sect) {
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	69db      	ldr	r3, [r3, #28]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d1be      	bne.n	8010c4e <dir_read+0x16>
 8010cd0:	e004      	b.n	8010cdc <dir_read+0xa4>
		if (res != FR_OK) break;
 8010cd2:	bf00      	nop
 8010cd4:	e002      	b.n	8010cdc <dir_read+0xa4>
				break;
 8010cd6:	bf00      	nop
 8010cd8:	e000      	b.n	8010cdc <dir_read+0xa4>
		if (res != FR_OK) break;
 8010cda:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010cdc:	7dfb      	ldrb	r3, [r7, #23]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d002      	beq.n	8010ce8 <dir_read+0xb0>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	61da      	str	r2, [r3, #28]
	return res;
 8010ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3718      	adds	r7, #24
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b086      	sub	sp, #24
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010d00:	2100      	movs	r1, #0
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f7ff fdb3 	bl	801086e <dir_sdi>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010d0c:	7dfb      	ldrb	r3, [r7, #23]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <dir_find+0x24>
 8010d12:	7dfb      	ldrb	r3, [r7, #23]
 8010d14:	e03e      	b.n	8010d94 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	69db      	ldr	r3, [r3, #28]
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	6938      	ldr	r0, [r7, #16]
 8010d1e:	f7ff f9cd 	bl	80100bc <move_window>
 8010d22:	4603      	mov	r3, r0
 8010d24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010d26:	7dfb      	ldrb	r3, [r7, #23]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d12f      	bne.n	8010d8c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6a1b      	ldr	r3, [r3, #32]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d102      	bne.n	8010d40 <dir_find+0x4e>
 8010d3a:	2304      	movs	r3, #4
 8010d3c:	75fb      	strb	r3, [r7, #23]
 8010d3e:	e028      	b.n	8010d92 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6a1b      	ldr	r3, [r3, #32]
 8010d44:	330b      	adds	r3, #11
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6a1b      	ldr	r3, [r3, #32]
 8010d56:	330b      	adds	r3, #11
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	f003 0308 	and.w	r3, r3, #8
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d10a      	bne.n	8010d78 <dir_find+0x86>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6a18      	ldr	r0, [r3, #32]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	3324      	adds	r3, #36	; 0x24
 8010d6a:	220b      	movs	r2, #11
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	f7fe ffb2 	bl	800fcd6 <mem_cmp>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d00b      	beq.n	8010d90 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010d78:	2100      	movs	r1, #0
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f7ff fe00 	bl	8010980 <dir_next>
 8010d80:	4603      	mov	r3, r0
 8010d82:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010d84:	7dfb      	ldrb	r3, [r7, #23]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d0c5      	beq.n	8010d16 <dir_find+0x24>
 8010d8a:	e002      	b.n	8010d92 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010d8c:	bf00      	nop
 8010d8e:	e000      	b.n	8010d92 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010d90:	bf00      	nop

	return res;
 8010d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3718      	adds	r7, #24
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010daa:	2101      	movs	r1, #1
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f7ff febd 	bl	8010b2c <dir_alloc>
 8010db2:	4603      	mov	r3, r0
 8010db4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010db6:	7bfb      	ldrb	r3, [r7, #15]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d11c      	bne.n	8010df6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	69db      	ldr	r3, [r3, #28]
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	68b8      	ldr	r0, [r7, #8]
 8010dc4:	f7ff f97a 	bl	80100bc <move_window>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010dcc:	7bfb      	ldrb	r3, [r7, #15]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d111      	bne.n	8010df6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6a1b      	ldr	r3, [r3, #32]
 8010dd6:	2220      	movs	r2, #32
 8010dd8:	2100      	movs	r1, #0
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fe ff61 	bl	800fca2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6a18      	ldr	r0, [r3, #32]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	3324      	adds	r3, #36	; 0x24
 8010de8:	220b      	movs	r2, #11
 8010dea:	4619      	mov	r1, r3
 8010dec:	f7fe ff38 	bl	800fc60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	2201      	movs	r2, #1
 8010df4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3710      	adds	r7, #16
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b084      	sub	sp, #16
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	69db      	ldr	r3, [r3, #28]
 8010e12:	4619      	mov	r1, r3
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f7ff f951 	bl	80100bc <move_window>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8010e1e:	7afb      	ldrb	r3, [r7, #11]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d106      	bne.n	8010e32 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6a1b      	ldr	r3, [r3, #32]
 8010e28:	22e5      	movs	r2, #229	; 0xe5
 8010e2a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2201      	movs	r2, #1
 8010e30:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8010e32:	7afb      	ldrb	r3, [r7, #11]
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3710      	adds	r7, #16
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b088      	sub	sp, #32
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	60fb      	str	r3, [r7, #12]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	3324      	adds	r3, #36	; 0x24
 8010e50:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010e52:	220b      	movs	r2, #11
 8010e54:	2120      	movs	r1, #32
 8010e56:	68b8      	ldr	r0, [r7, #8]
 8010e58:	f7fe ff23 	bl	800fca2 <mem_set>
	si = i = 0; ni = 8;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	613b      	str	r3, [r7, #16]
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	617b      	str	r3, [r7, #20]
 8010e64:	2308      	movs	r3, #8
 8010e66:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8010e68:	68fa      	ldr	r2, [r7, #12]
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	2b2e      	cmp	r3, #46	; 0x2e
 8010e72:	d12f      	bne.n	8010ed4 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	1c5a      	adds	r2, r3, #1
 8010e78:	617a      	str	r2, [r7, #20]
 8010e7a:	68fa      	ldr	r2, [r7, #12]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8010e82:	7ffb      	ldrb	r3, [r7, #31]
 8010e84:	2b2e      	cmp	r3, #46	; 0x2e
 8010e86:	d10a      	bne.n	8010e9e <create_name+0x62>
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d807      	bhi.n	8010e9e <create_name+0x62>
			sfn[i++] = c;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	1c5a      	adds	r2, r3, #1
 8010e92:	613a      	str	r2, [r7, #16]
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	4413      	add	r3, r2
 8010e98:	7ffa      	ldrb	r2, [r7, #31]
 8010e9a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8010e9c:	e7ea      	b.n	8010e74 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8010e9e:	7ffb      	ldrb	r3, [r7, #31]
 8010ea0:	2b2f      	cmp	r3, #47	; 0x2f
 8010ea2:	d007      	beq.n	8010eb4 <create_name+0x78>
 8010ea4:	7ffb      	ldrb	r3, [r7, #31]
 8010ea6:	2b5c      	cmp	r3, #92	; 0x5c
 8010ea8:	d004      	beq.n	8010eb4 <create_name+0x78>
 8010eaa:	7ffb      	ldrb	r3, [r7, #31]
 8010eac:	2b20      	cmp	r3, #32
 8010eae:	d901      	bls.n	8010eb4 <create_name+0x78>
 8010eb0:	2306      	movs	r3, #6
 8010eb2:	e084      	b.n	8010fbe <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8010eb4:	68fa      	ldr	r2, [r7, #12]
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	441a      	add	r2, r3
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8010ebe:	7ffb      	ldrb	r3, [r7, #31]
 8010ec0:	2b20      	cmp	r3, #32
 8010ec2:	d801      	bhi.n	8010ec8 <create_name+0x8c>
 8010ec4:	2224      	movs	r2, #36	; 0x24
 8010ec6:	e000      	b.n	8010eca <create_name+0x8e>
 8010ec8:	2220      	movs	r2, #32
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	330b      	adds	r3, #11
 8010ece:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	e074      	b.n	8010fbe <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	1c5a      	adds	r2, r3, #1
 8010ed8:	617a      	str	r2, [r7, #20]
 8010eda:	68fa      	ldr	r2, [r7, #12]
 8010edc:	4413      	add	r3, r2
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010ee2:	7ffb      	ldrb	r3, [r7, #31]
 8010ee4:	2b20      	cmp	r3, #32
 8010ee6:	d94e      	bls.n	8010f86 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010ee8:	7ffb      	ldrb	r3, [r7, #31]
 8010eea:	2b2f      	cmp	r3, #47	; 0x2f
 8010eec:	d006      	beq.n	8010efc <create_name+0xc0>
 8010eee:	7ffb      	ldrb	r3, [r7, #31]
 8010ef0:	2b5c      	cmp	r3, #92	; 0x5c
 8010ef2:	d110      	bne.n	8010f16 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010ef4:	e002      	b.n	8010efc <create_name+0xc0>
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	3301      	adds	r3, #1
 8010efa:	617b      	str	r3, [r7, #20]
 8010efc:	68fa      	ldr	r2, [r7, #12]
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	4413      	add	r3, r2
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2b2f      	cmp	r3, #47	; 0x2f
 8010f06:	d0f6      	beq.n	8010ef6 <create_name+0xba>
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	4413      	add	r3, r2
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	2b5c      	cmp	r3, #92	; 0x5c
 8010f12:	d0f0      	beq.n	8010ef6 <create_name+0xba>
			break;
 8010f14:	e038      	b.n	8010f88 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010f16:	7ffb      	ldrb	r3, [r7, #31]
 8010f18:	2b2e      	cmp	r3, #46	; 0x2e
 8010f1a:	d003      	beq.n	8010f24 <create_name+0xe8>
 8010f1c:	693a      	ldr	r2, [r7, #16]
 8010f1e:	69bb      	ldr	r3, [r7, #24]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d30c      	bcc.n	8010f3e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	2b0b      	cmp	r3, #11
 8010f28:	d002      	beq.n	8010f30 <create_name+0xf4>
 8010f2a:	7ffb      	ldrb	r3, [r7, #31]
 8010f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8010f2e:	d001      	beq.n	8010f34 <create_name+0xf8>
 8010f30:	2306      	movs	r3, #6
 8010f32:	e044      	b.n	8010fbe <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8010f34:	2308      	movs	r3, #8
 8010f36:	613b      	str	r3, [r7, #16]
 8010f38:	230b      	movs	r3, #11
 8010f3a:	61bb      	str	r3, [r7, #24]
			continue;
 8010f3c:	e022      	b.n	8010f84 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010f3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	da04      	bge.n	8010f50 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010f46:	7ffb      	ldrb	r3, [r7, #31]
 8010f48:	3b80      	subs	r3, #128	; 0x80
 8010f4a:	4a1f      	ldr	r2, [pc, #124]	; (8010fc8 <create_name+0x18c>)
 8010f4c:	5cd3      	ldrb	r3, [r2, r3]
 8010f4e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010f50:	7ffb      	ldrb	r3, [r7, #31]
 8010f52:	4619      	mov	r1, r3
 8010f54:	481d      	ldr	r0, [pc, #116]	; (8010fcc <create_name+0x190>)
 8010f56:	f7fe fee5 	bl	800fd24 <chk_chr>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d001      	beq.n	8010f64 <create_name+0x128>
 8010f60:	2306      	movs	r3, #6
 8010f62:	e02c      	b.n	8010fbe <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010f64:	7ffb      	ldrb	r3, [r7, #31]
 8010f66:	2b60      	cmp	r3, #96	; 0x60
 8010f68:	d905      	bls.n	8010f76 <create_name+0x13a>
 8010f6a:	7ffb      	ldrb	r3, [r7, #31]
 8010f6c:	2b7a      	cmp	r3, #122	; 0x7a
 8010f6e:	d802      	bhi.n	8010f76 <create_name+0x13a>
 8010f70:	7ffb      	ldrb	r3, [r7, #31]
 8010f72:	3b20      	subs	r3, #32
 8010f74:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	1c5a      	adds	r2, r3, #1
 8010f7a:	613a      	str	r2, [r7, #16]
 8010f7c:	68ba      	ldr	r2, [r7, #8]
 8010f7e:	4413      	add	r3, r2
 8010f80:	7ffa      	ldrb	r2, [r7, #31]
 8010f82:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010f84:	e7a6      	b.n	8010ed4 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010f86:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	441a      	add	r2, r3
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d101      	bne.n	8010f9c <create_name+0x160>
 8010f98:	2306      	movs	r3, #6
 8010f9a:	e010      	b.n	8010fbe <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	2be5      	cmp	r3, #229	; 0xe5
 8010fa2:	d102      	bne.n	8010faa <create_name+0x16e>
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	2205      	movs	r2, #5
 8010fa8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010faa:	7ffb      	ldrb	r3, [r7, #31]
 8010fac:	2b20      	cmp	r3, #32
 8010fae:	d801      	bhi.n	8010fb4 <create_name+0x178>
 8010fb0:	2204      	movs	r2, #4
 8010fb2:	e000      	b.n	8010fb6 <create_name+0x17a>
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	330b      	adds	r3, #11
 8010fba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010fbc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3720      	adds	r7, #32
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	0801875c 	.word	0x0801875c
 8010fcc:	0801870c 	.word	0x0801870c

08010fd0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b086      	sub	sp, #24
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	2b2f      	cmp	r3, #47	; 0x2f
 8010fea:	d00b      	beq.n	8011004 <follow_path+0x34>
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	2b5c      	cmp	r3, #92	; 0x5c
 8010ff2:	d007      	beq.n	8011004 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	699a      	ldr	r2, [r3, #24]
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	609a      	str	r2, [r3, #8]
 8010ffc:	e00d      	b.n	801101a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	3301      	adds	r3, #1
 8011002:	603b      	str	r3, [r7, #0]
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	2b2f      	cmp	r3, #47	; 0x2f
 801100a:	d0f8      	beq.n	8010ffe <follow_path+0x2e>
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	2b5c      	cmp	r3, #92	; 0x5c
 8011012:	d0f4      	beq.n	8010ffe <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	2200      	movs	r2, #0
 8011018:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	2b1f      	cmp	r3, #31
 8011020:	d80a      	bhi.n	8011038 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2280      	movs	r2, #128	; 0x80
 8011026:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801102a:	2100      	movs	r1, #0
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7ff fc1e 	bl	801086e <dir_sdi>
 8011032:	4603      	mov	r3, r0
 8011034:	75fb      	strb	r3, [r7, #23]
 8011036:	e05b      	b.n	80110f0 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011038:	463b      	mov	r3, r7
 801103a:	4619      	mov	r1, r3
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f7ff fefd 	bl	8010e3c <create_name>
 8011042:	4603      	mov	r3, r0
 8011044:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011046:	7dfb      	ldrb	r3, [r7, #23]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d14c      	bne.n	80110e6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f7ff fe50 	bl	8010cf2 <dir_find>
 8011052:	4603      	mov	r3, r0
 8011054:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801105c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801105e:	7dfb      	ldrb	r3, [r7, #23]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d01b      	beq.n	801109c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011064:	7dfb      	ldrb	r3, [r7, #23]
 8011066:	2b04      	cmp	r3, #4
 8011068:	d13f      	bne.n	80110ea <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801106a:	7afb      	ldrb	r3, [r7, #11]
 801106c:	f003 0320 	and.w	r3, r3, #32
 8011070:	2b00      	cmp	r3, #0
 8011072:	d00b      	beq.n	801108c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011074:	7afb      	ldrb	r3, [r7, #11]
 8011076:	f003 0304 	and.w	r3, r3, #4
 801107a:	2b00      	cmp	r3, #0
 801107c:	d031      	beq.n	80110e2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2280      	movs	r2, #128	; 0x80
 8011082:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8011086:	2300      	movs	r3, #0
 8011088:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801108a:	e02e      	b.n	80110ea <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801108c:	7afb      	ldrb	r3, [r7, #11]
 801108e:	f003 0304 	and.w	r3, r3, #4
 8011092:	2b00      	cmp	r3, #0
 8011094:	d129      	bne.n	80110ea <follow_path+0x11a>
 8011096:	2305      	movs	r3, #5
 8011098:	75fb      	strb	r3, [r7, #23]
				break;
 801109a:	e026      	b.n	80110ea <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801109c:	7afb      	ldrb	r3, [r7, #11]
 801109e:	f003 0304 	and.w	r3, r3, #4
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d123      	bne.n	80110ee <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	799b      	ldrb	r3, [r3, #6]
 80110aa:	f003 0310 	and.w	r3, r3, #16
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d102      	bne.n	80110b8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80110b2:	2305      	movs	r3, #5
 80110b4:	75fb      	strb	r3, [r7, #23]
 80110b6:	e01b      	b.n	80110f0 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	695b      	ldr	r3, [r3, #20]
 80110c2:	68fa      	ldr	r2, [r7, #12]
 80110c4:	8992      	ldrh	r2, [r2, #12]
 80110c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80110ca:	fb02 f200 	mul.w	r2, r2, r0
 80110ce:	1a9b      	subs	r3, r3, r2
 80110d0:	440b      	add	r3, r1
 80110d2:	4619      	mov	r1, r3
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f7ff fd70 	bl	8010bba <ld_clust>
 80110da:	4602      	mov	r2, r0
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	609a      	str	r2, [r3, #8]
 80110e0:	e7aa      	b.n	8011038 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80110e2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80110e4:	e7a8      	b.n	8011038 <follow_path+0x68>
			if (res != FR_OK) break;
 80110e6:	bf00      	nop
 80110e8:	e002      	b.n	80110f0 <follow_path+0x120>
				break;
 80110ea:	bf00      	nop
 80110ec:	e000      	b.n	80110f0 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80110ee:	bf00      	nop
			}
		}
	}

	return res;
 80110f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3718      	adds	r7, #24
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80110fa:	b480      	push	{r7}
 80110fc:	b087      	sub	sp, #28
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011102:	f04f 33ff 	mov.w	r3, #4294967295
 8011106:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d031      	beq.n	8011174 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	617b      	str	r3, [r7, #20]
 8011116:	e002      	b.n	801111e <get_ldnumber+0x24>
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	3301      	adds	r3, #1
 801111c:	617b      	str	r3, [r7, #20]
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	2b20      	cmp	r3, #32
 8011124:	d903      	bls.n	801112e <get_ldnumber+0x34>
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	2b3a      	cmp	r3, #58	; 0x3a
 801112c:	d1f4      	bne.n	8011118 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	2b3a      	cmp	r3, #58	; 0x3a
 8011134:	d11c      	bne.n	8011170 <get_ldnumber+0x76>
			tp = *path;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	1c5a      	adds	r2, r3, #1
 8011140:	60fa      	str	r2, [r7, #12]
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	3b30      	subs	r3, #48	; 0x30
 8011146:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	2b09      	cmp	r3, #9
 801114c:	d80e      	bhi.n	801116c <get_ldnumber+0x72>
 801114e:	68fa      	ldr	r2, [r7, #12]
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	429a      	cmp	r2, r3
 8011154:	d10a      	bne.n	801116c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d107      	bne.n	801116c <get_ldnumber+0x72>
					vol = (int)i;
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	3301      	adds	r3, #1
 8011164:	617b      	str	r3, [r7, #20]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	697a      	ldr	r2, [r7, #20]
 801116a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	e002      	b.n	8011176 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011170:	2300      	movs	r3, #0
 8011172:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011174:	693b      	ldr	r3, [r7, #16]
}
 8011176:	4618      	mov	r0, r3
 8011178:	371c      	adds	r7, #28
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr
	...

08011184 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2200      	movs	r2, #0
 8011192:	70da      	strb	r2, [r3, #3]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f04f 32ff 	mov.w	r2, #4294967295
 801119a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801119c:	6839      	ldr	r1, [r7, #0]
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7fe ff8c 	bl	80100bc <move_window>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d001      	beq.n	80111ae <check_fs+0x2a>
 80111aa:	2304      	movs	r3, #4
 80111ac:	e038      	b.n	8011220 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	3338      	adds	r3, #56	; 0x38
 80111b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fe fcd0 	bl	800fb5c <ld_word>
 80111bc:	4603      	mov	r3, r0
 80111be:	461a      	mov	r2, r3
 80111c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d001      	beq.n	80111cc <check_fs+0x48>
 80111c8:	2303      	movs	r3, #3
 80111ca:	e029      	b.n	8011220 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80111d2:	2be9      	cmp	r3, #233	; 0xe9
 80111d4:	d009      	beq.n	80111ea <check_fs+0x66>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80111dc:	2beb      	cmp	r3, #235	; 0xeb
 80111de:	d11e      	bne.n	801121e <check_fs+0x9a>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80111e6:	2b90      	cmp	r3, #144	; 0x90
 80111e8:	d119      	bne.n	801121e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	3338      	adds	r3, #56	; 0x38
 80111ee:	3336      	adds	r3, #54	; 0x36
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7fe fccb 	bl	800fb8c <ld_dword>
 80111f6:	4603      	mov	r3, r0
 80111f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80111fc:	4a0a      	ldr	r2, [pc, #40]	; (8011228 <check_fs+0xa4>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d101      	bne.n	8011206 <check_fs+0x82>
 8011202:	2300      	movs	r3, #0
 8011204:	e00c      	b.n	8011220 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	3338      	adds	r3, #56	; 0x38
 801120a:	3352      	adds	r3, #82	; 0x52
 801120c:	4618      	mov	r0, r3
 801120e:	f7fe fcbd 	bl	800fb8c <ld_dword>
 8011212:	4602      	mov	r2, r0
 8011214:	4b05      	ldr	r3, [pc, #20]	; (801122c <check_fs+0xa8>)
 8011216:	429a      	cmp	r2, r3
 8011218:	d101      	bne.n	801121e <check_fs+0x9a>
 801121a:	2300      	movs	r3, #0
 801121c:	e000      	b.n	8011220 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801121e:	2302      	movs	r3, #2
}
 8011220:	4618      	mov	r0, r3
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	00544146 	.word	0x00544146
 801122c:	33544146 	.word	0x33544146

08011230 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b096      	sub	sp, #88	; 0x58
 8011234:	af00      	add	r7, sp, #0
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	4613      	mov	r3, r2
 801123c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	2200      	movs	r2, #0
 8011242:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f7ff ff58 	bl	80110fa <get_ldnumber>
 801124a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801124c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801124e:	2b00      	cmp	r3, #0
 8011250:	da01      	bge.n	8011256 <find_volume+0x26>
 8011252:	230b      	movs	r3, #11
 8011254:	e268      	b.n	8011728 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011256:	4ab0      	ldr	r2, [pc, #704]	; (8011518 <find_volume+0x2e8>)
 8011258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801125e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011262:	2b00      	cmp	r3, #0
 8011264:	d101      	bne.n	801126a <find_volume+0x3a>
 8011266:	230c      	movs	r3, #12
 8011268:	e25e      	b.n	8011728 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801126e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011270:	79fb      	ldrb	r3, [r7, #7]
 8011272:	f023 0301 	bic.w	r3, r3, #1
 8011276:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d01a      	beq.n	80112b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011282:	785b      	ldrb	r3, [r3, #1]
 8011284:	4618      	mov	r0, r3
 8011286:	f7fe fbcb 	bl	800fa20 <disk_status>
 801128a:	4603      	mov	r3, r0
 801128c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011290:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011294:	f003 0301 	and.w	r3, r3, #1
 8011298:	2b00      	cmp	r3, #0
 801129a:	d10c      	bne.n	80112b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801129c:	79fb      	ldrb	r3, [r7, #7]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d007      	beq.n	80112b2 <find_volume+0x82>
 80112a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112a6:	f003 0304 	and.w	r3, r3, #4
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d001      	beq.n	80112b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80112ae:	230a      	movs	r3, #10
 80112b0:	e23a      	b.n	8011728 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80112b2:	2300      	movs	r3, #0
 80112b4:	e238      	b.n	8011728 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80112b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b8:	2200      	movs	r2, #0
 80112ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80112bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80112c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c6:	785b      	ldrb	r3, [r3, #1]
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7fe fbc3 	bl	800fa54 <disk_initialize>
 80112ce:	4603      	mov	r3, r0
 80112d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80112d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112d8:	f003 0301 	and.w	r3, r3, #1
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d001      	beq.n	80112e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80112e0:	2303      	movs	r3, #3
 80112e2:	e221      	b.n	8011728 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80112e4:	79fb      	ldrb	r3, [r7, #7]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d007      	beq.n	80112fa <find_volume+0xca>
 80112ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112ee:	f003 0304 	and.w	r3, r3, #4
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d001      	beq.n	80112fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80112f6:	230a      	movs	r3, #10
 80112f8:	e216      	b.n	8011728 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80112fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fc:	7858      	ldrb	r0, [r3, #1]
 80112fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011300:	330c      	adds	r3, #12
 8011302:	461a      	mov	r2, r3
 8011304:	2102      	movs	r1, #2
 8011306:	f7fe fc0b 	bl	800fb20 <disk_ioctl>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d001      	beq.n	8011314 <find_volume+0xe4>
 8011310:	2301      	movs	r3, #1
 8011312:	e209      	b.n	8011728 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011316:	899b      	ldrh	r3, [r3, #12]
 8011318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801131c:	d80d      	bhi.n	801133a <find_volume+0x10a>
 801131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011320:	899b      	ldrh	r3, [r3, #12]
 8011322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011326:	d308      	bcc.n	801133a <find_volume+0x10a>
 8011328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132a:	899b      	ldrh	r3, [r3, #12]
 801132c:	461a      	mov	r2, r3
 801132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011330:	899b      	ldrh	r3, [r3, #12]
 8011332:	3b01      	subs	r3, #1
 8011334:	4013      	ands	r3, r2
 8011336:	2b00      	cmp	r3, #0
 8011338:	d001      	beq.n	801133e <find_volume+0x10e>
 801133a:	2301      	movs	r3, #1
 801133c:	e1f4      	b.n	8011728 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801133e:	2300      	movs	r3, #0
 8011340:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011342:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011346:	f7ff ff1d 	bl	8011184 <check_fs>
 801134a:	4603      	mov	r3, r0
 801134c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011354:	2b02      	cmp	r3, #2
 8011356:	d14b      	bne.n	80113f0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011358:	2300      	movs	r3, #0
 801135a:	643b      	str	r3, [r7, #64]	; 0x40
 801135c:	e01f      	b.n	801139e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011360:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011366:	011b      	lsls	r3, r3, #4
 8011368:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801136c:	4413      	add	r3, r2
 801136e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011372:	3304      	adds	r3, #4
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d006      	beq.n	8011388 <find_volume+0x158>
 801137a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137c:	3308      	adds	r3, #8
 801137e:	4618      	mov	r0, r3
 8011380:	f7fe fc04 	bl	800fb8c <ld_dword>
 8011384:	4602      	mov	r2, r0
 8011386:	e000      	b.n	801138a <find_volume+0x15a>
 8011388:	2200      	movs	r2, #0
 801138a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801138c:	009b      	lsls	r3, r3, #2
 801138e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011392:	440b      	add	r3, r1
 8011394:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801139a:	3301      	adds	r3, #1
 801139c:	643b      	str	r3, [r7, #64]	; 0x40
 801139e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113a0:	2b03      	cmp	r3, #3
 80113a2:	d9dc      	bls.n	801135e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80113a4:	2300      	movs	r3, #0
 80113a6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80113a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d002      	beq.n	80113b4 <find_volume+0x184>
 80113ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113b0:	3b01      	subs	r3, #1
 80113b2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80113b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80113bc:	4413      	add	r3, r2
 80113be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80113c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80113c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d005      	beq.n	80113d6 <find_volume+0x1a6>
 80113ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113ce:	f7ff fed9 	bl	8011184 <check_fs>
 80113d2:	4603      	mov	r3, r0
 80113d4:	e000      	b.n	80113d8 <find_volume+0x1a8>
 80113d6:	2303      	movs	r3, #3
 80113d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80113dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113e0:	2b01      	cmp	r3, #1
 80113e2:	d905      	bls.n	80113f0 <find_volume+0x1c0>
 80113e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113e6:	3301      	adds	r3, #1
 80113e8:	643b      	str	r3, [r7, #64]	; 0x40
 80113ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ec:	2b03      	cmp	r3, #3
 80113ee:	d9e1      	bls.n	80113b4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80113f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113f4:	2b04      	cmp	r3, #4
 80113f6:	d101      	bne.n	80113fc <find_volume+0x1cc>
 80113f8:	2301      	movs	r3, #1
 80113fa:	e195      	b.n	8011728 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80113fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011400:	2b01      	cmp	r3, #1
 8011402:	d901      	bls.n	8011408 <find_volume+0x1d8>
 8011404:	230d      	movs	r3, #13
 8011406:	e18f      	b.n	8011728 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140a:	3338      	adds	r3, #56	; 0x38
 801140c:	330b      	adds	r3, #11
 801140e:	4618      	mov	r0, r3
 8011410:	f7fe fba4 	bl	800fb5c <ld_word>
 8011414:	4603      	mov	r3, r0
 8011416:	461a      	mov	r2, r3
 8011418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141a:	899b      	ldrh	r3, [r3, #12]
 801141c:	429a      	cmp	r2, r3
 801141e:	d001      	beq.n	8011424 <find_volume+0x1f4>
 8011420:	230d      	movs	r3, #13
 8011422:	e181      	b.n	8011728 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011426:	3338      	adds	r3, #56	; 0x38
 8011428:	3316      	adds	r3, #22
 801142a:	4618      	mov	r0, r3
 801142c:	f7fe fb96 	bl	800fb5c <ld_word>
 8011430:	4603      	mov	r3, r0
 8011432:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011436:	2b00      	cmp	r3, #0
 8011438:	d106      	bne.n	8011448 <find_volume+0x218>
 801143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143c:	3338      	adds	r3, #56	; 0x38
 801143e:	3324      	adds	r3, #36	; 0x24
 8011440:	4618      	mov	r0, r3
 8011442:	f7fe fba3 	bl	800fb8c <ld_dword>
 8011446:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801144a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801144c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011450:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011456:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145a:	789b      	ldrb	r3, [r3, #2]
 801145c:	2b01      	cmp	r3, #1
 801145e:	d005      	beq.n	801146c <find_volume+0x23c>
 8011460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011462:	789b      	ldrb	r3, [r3, #2]
 8011464:	2b02      	cmp	r3, #2
 8011466:	d001      	beq.n	801146c <find_volume+0x23c>
 8011468:	230d      	movs	r3, #13
 801146a:	e15d      	b.n	8011728 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801146c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146e:	789b      	ldrb	r3, [r3, #2]
 8011470:	461a      	mov	r2, r3
 8011472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011474:	fb02 f303 	mul.w	r3, r2, r3
 8011478:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011480:	b29a      	uxth	r2, r3
 8011482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011484:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011488:	895b      	ldrh	r3, [r3, #10]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d008      	beq.n	80114a0 <find_volume+0x270>
 801148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011490:	895b      	ldrh	r3, [r3, #10]
 8011492:	461a      	mov	r2, r3
 8011494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011496:	895b      	ldrh	r3, [r3, #10]
 8011498:	3b01      	subs	r3, #1
 801149a:	4013      	ands	r3, r2
 801149c:	2b00      	cmp	r3, #0
 801149e:	d001      	beq.n	80114a4 <find_volume+0x274>
 80114a0:	230d      	movs	r3, #13
 80114a2:	e141      	b.n	8011728 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80114a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a6:	3338      	adds	r3, #56	; 0x38
 80114a8:	3311      	adds	r3, #17
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fe fb56 	bl	800fb5c <ld_word>
 80114b0:	4603      	mov	r3, r0
 80114b2:	461a      	mov	r2, r3
 80114b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80114b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ba:	891b      	ldrh	r3, [r3, #8]
 80114bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114be:	8992      	ldrh	r2, [r2, #12]
 80114c0:	0952      	lsrs	r2, r2, #5
 80114c2:	b292      	uxth	r2, r2
 80114c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80114c8:	fb02 f201 	mul.w	r2, r2, r1
 80114cc:	1a9b      	subs	r3, r3, r2
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d001      	beq.n	80114d8 <find_volume+0x2a8>
 80114d4:	230d      	movs	r3, #13
 80114d6:	e127      	b.n	8011728 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80114d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114da:	3338      	adds	r3, #56	; 0x38
 80114dc:	3313      	adds	r3, #19
 80114de:	4618      	mov	r0, r3
 80114e0:	f7fe fb3c 	bl	800fb5c <ld_word>
 80114e4:	4603      	mov	r3, r0
 80114e6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80114e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d106      	bne.n	80114fc <find_volume+0x2cc>
 80114ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f0:	3338      	adds	r3, #56	; 0x38
 80114f2:	3320      	adds	r3, #32
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fe fb49 	bl	800fb8c <ld_dword>
 80114fa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80114fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fe:	3338      	adds	r3, #56	; 0x38
 8011500:	330e      	adds	r3, #14
 8011502:	4618      	mov	r0, r3
 8011504:	f7fe fb2a 	bl	800fb5c <ld_word>
 8011508:	4603      	mov	r3, r0
 801150a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801150c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801150e:	2b00      	cmp	r3, #0
 8011510:	d104      	bne.n	801151c <find_volume+0x2ec>
 8011512:	230d      	movs	r3, #13
 8011514:	e108      	b.n	8011728 <find_volume+0x4f8>
 8011516:	bf00      	nop
 8011518:	2003c460 	.word	0x2003c460

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801151c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801151e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011520:	4413      	add	r3, r2
 8011522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011524:	8911      	ldrh	r1, [r2, #8]
 8011526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011528:	8992      	ldrh	r2, [r2, #12]
 801152a:	0952      	lsrs	r2, r2, #5
 801152c:	b292      	uxth	r2, r2
 801152e:	fbb1 f2f2 	udiv	r2, r1, r2
 8011532:	b292      	uxth	r2, r2
 8011534:	4413      	add	r3, r2
 8011536:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153c:	429a      	cmp	r2, r3
 801153e:	d201      	bcs.n	8011544 <find_volume+0x314>
 8011540:	230d      	movs	r3, #13
 8011542:	e0f1      	b.n	8011728 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801154c:	8952      	ldrh	r2, [r2, #10]
 801154e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011552:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011556:	2b00      	cmp	r3, #0
 8011558:	d101      	bne.n	801155e <find_volume+0x32e>
 801155a:	230d      	movs	r3, #13
 801155c:	e0e4      	b.n	8011728 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801155e:	2303      	movs	r3, #3
 8011560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011566:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801156a:	4293      	cmp	r3, r2
 801156c:	d802      	bhi.n	8011574 <find_volume+0x344>
 801156e:	2302      	movs	r3, #2
 8011570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011576:	f640 72f5 	movw	r2, #4085	; 0xff5
 801157a:	4293      	cmp	r3, r2
 801157c:	d802      	bhi.n	8011584 <find_volume+0x354>
 801157e:	2301      	movs	r3, #1
 8011580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011586:	1c9a      	adds	r2, r3, #2
 8011588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011590:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011592:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011596:	441a      	add	r2, r3
 8011598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801159c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a0:	441a      	add	r2, r3
 80115a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80115a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80115aa:	2b03      	cmp	r3, #3
 80115ac:	d11e      	bne.n	80115ec <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80115ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b0:	3338      	adds	r3, #56	; 0x38
 80115b2:	332a      	adds	r3, #42	; 0x2a
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7fe fad1 	bl	800fb5c <ld_word>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d001      	beq.n	80115c4 <find_volume+0x394>
 80115c0:	230d      	movs	r3, #13
 80115c2:	e0b1      	b.n	8011728 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80115c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c6:	891b      	ldrh	r3, [r3, #8]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <find_volume+0x3a0>
 80115cc:	230d      	movs	r3, #13
 80115ce:	e0ab      	b.n	8011728 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80115d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d2:	3338      	adds	r3, #56	; 0x38
 80115d4:	332c      	adds	r3, #44	; 0x2c
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fe fad8 	bl	800fb8c <ld_dword>
 80115dc:	4602      	mov	r2, r0
 80115de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80115e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e4:	69db      	ldr	r3, [r3, #28]
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	647b      	str	r3, [r7, #68]	; 0x44
 80115ea:	e01f      	b.n	801162c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80115ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ee:	891b      	ldrh	r3, [r3, #8]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d101      	bne.n	80115f8 <find_volume+0x3c8>
 80115f4:	230d      	movs	r3, #13
 80115f6:	e097      	b.n	8011728 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80115f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80115fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115fe:	441a      	add	r2, r3
 8011600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011602:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011608:	2b02      	cmp	r3, #2
 801160a:	d103      	bne.n	8011614 <find_volume+0x3e4>
 801160c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160e:	69db      	ldr	r3, [r3, #28]
 8011610:	005b      	lsls	r3, r3, #1
 8011612:	e00a      	b.n	801162a <find_volume+0x3fa>
 8011614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011616:	69da      	ldr	r2, [r3, #28]
 8011618:	4613      	mov	r3, r2
 801161a:	005b      	lsls	r3, r3, #1
 801161c:	4413      	add	r3, r2
 801161e:	085a      	lsrs	r2, r3, #1
 8011620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011622:	69db      	ldr	r3, [r3, #28]
 8011624:	f003 0301 	and.w	r3, r3, #1
 8011628:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801162a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	6a1a      	ldr	r2, [r3, #32]
 8011630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011632:	899b      	ldrh	r3, [r3, #12]
 8011634:	4619      	mov	r1, r3
 8011636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011638:	440b      	add	r3, r1
 801163a:	3b01      	subs	r3, #1
 801163c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801163e:	8989      	ldrh	r1, [r1, #12]
 8011640:	fbb3 f3f1 	udiv	r3, r3, r1
 8011644:	429a      	cmp	r2, r3
 8011646:	d201      	bcs.n	801164c <find_volume+0x41c>
 8011648:	230d      	movs	r3, #13
 801164a:	e06d      	b.n	8011728 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801164c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801164e:	f04f 32ff 	mov.w	r2, #4294967295
 8011652:	615a      	str	r2, [r3, #20]
 8011654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011656:	695a      	ldr	r2, [r3, #20]
 8011658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165e:	2280      	movs	r2, #128	; 0x80
 8011660:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011666:	2b03      	cmp	r3, #3
 8011668:	d149      	bne.n	80116fe <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166c:	3338      	adds	r3, #56	; 0x38
 801166e:	3330      	adds	r3, #48	; 0x30
 8011670:	4618      	mov	r0, r3
 8011672:	f7fe fa73 	bl	800fb5c <ld_word>
 8011676:	4603      	mov	r3, r0
 8011678:	2b01      	cmp	r3, #1
 801167a:	d140      	bne.n	80116fe <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801167c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801167e:	3301      	adds	r3, #1
 8011680:	4619      	mov	r1, r3
 8011682:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011684:	f7fe fd1a 	bl	80100bc <move_window>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	d137      	bne.n	80116fe <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801168e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011690:	2200      	movs	r2, #0
 8011692:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011696:	3338      	adds	r3, #56	; 0x38
 8011698:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801169c:	4618      	mov	r0, r3
 801169e:	f7fe fa5d 	bl	800fb5c <ld_word>
 80116a2:	4603      	mov	r3, r0
 80116a4:	461a      	mov	r2, r3
 80116a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d127      	bne.n	80116fe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	3338      	adds	r3, #56	; 0x38
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fe fa6a 	bl	800fb8c <ld_dword>
 80116b8:	4602      	mov	r2, r0
 80116ba:	4b1d      	ldr	r3, [pc, #116]	; (8011730 <find_volume+0x500>)
 80116bc:	429a      	cmp	r2, r3
 80116be:	d11e      	bne.n	80116fe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80116c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c2:	3338      	adds	r3, #56	; 0x38
 80116c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fe fa5f 	bl	800fb8c <ld_dword>
 80116ce:	4602      	mov	r2, r0
 80116d0:	4b18      	ldr	r3, [pc, #96]	; (8011734 <find_volume+0x504>)
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d113      	bne.n	80116fe <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d8:	3338      	adds	r3, #56	; 0x38
 80116da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fe fa54 	bl	800fb8c <ld_dword>
 80116e4:	4602      	mov	r2, r0
 80116e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80116ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ec:	3338      	adds	r3, #56	; 0x38
 80116ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fe fa4a 	bl	800fb8c <ld_dword>
 80116f8:	4602      	mov	r2, r0
 80116fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80116fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011700:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011704:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011706:	4b0c      	ldr	r3, [pc, #48]	; (8011738 <find_volume+0x508>)
 8011708:	881b      	ldrh	r3, [r3, #0]
 801170a:	3301      	adds	r3, #1
 801170c:	b29a      	uxth	r2, r3
 801170e:	4b0a      	ldr	r3, [pc, #40]	; (8011738 <find_volume+0x508>)
 8011710:	801a      	strh	r2, [r3, #0]
 8011712:	4b09      	ldr	r3, [pc, #36]	; (8011738 <find_volume+0x508>)
 8011714:	881a      	ldrh	r2, [r3, #0]
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171c:	2200      	movs	r2, #0
 801171e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011722:	f7fe fc63 	bl	800ffec <clear_lock>
#endif
	return FR_OK;
 8011726:	2300      	movs	r3, #0
}
 8011728:	4618      	mov	r0, r3
 801172a:	3758      	adds	r7, #88	; 0x58
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}
 8011730:	41615252 	.word	0x41615252
 8011734:	61417272 	.word	0x61417272
 8011738:	2003c464 	.word	0x2003c464

0801173c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011746:	2309      	movs	r3, #9
 8011748:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d01c      	beq.n	801178a <validate+0x4e>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d018      	beq.n	801178a <validate+0x4e>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d013      	beq.n	801178a <validate+0x4e>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	889a      	ldrh	r2, [r3, #4]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	88db      	ldrh	r3, [r3, #6]
 801176c:	429a      	cmp	r2, r3
 801176e:	d10c      	bne.n	801178a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	785b      	ldrb	r3, [r3, #1]
 8011776:	4618      	mov	r0, r3
 8011778:	f7fe f952 	bl	800fa20 <disk_status>
 801177c:	4603      	mov	r3, r0
 801177e:	f003 0301 	and.w	r3, r3, #1
 8011782:	2b00      	cmp	r3, #0
 8011784:	d101      	bne.n	801178a <validate+0x4e>
			res = FR_OK;
 8011786:	2300      	movs	r3, #0
 8011788:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801178a:	7bfb      	ldrb	r3, [r7, #15]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d102      	bne.n	8011796 <validate+0x5a>
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	e000      	b.n	8011798 <validate+0x5c>
 8011796:	2300      	movs	r3, #0
 8011798:	683a      	ldr	r2, [r7, #0]
 801179a:	6013      	str	r3, [r2, #0]
	return res;
 801179c:	7bfb      	ldrb	r3, [r7, #15]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
	...

080117a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b088      	sub	sp, #32
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	60b9      	str	r1, [r7, #8]
 80117b2:	4613      	mov	r3, r2
 80117b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80117ba:	f107 0310 	add.w	r3, r7, #16
 80117be:	4618      	mov	r0, r3
 80117c0:	f7ff fc9b 	bl	80110fa <get_ldnumber>
 80117c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	da01      	bge.n	80117d0 <f_mount+0x28>
 80117cc:	230b      	movs	r3, #11
 80117ce:	e02b      	b.n	8011828 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80117d0:	4a17      	ldr	r2, [pc, #92]	; (8011830 <f_mount+0x88>)
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d005      	beq.n	80117ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80117e0:	69b8      	ldr	r0, [r7, #24]
 80117e2:	f7fe fc03 	bl	800ffec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	2200      	movs	r2, #0
 80117ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d002      	beq.n	80117f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2200      	movs	r2, #0
 80117f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	490d      	ldr	r1, [pc, #52]	; (8011830 <f_mount+0x88>)
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d002      	beq.n	801180e <f_mount+0x66>
 8011808:	79fb      	ldrb	r3, [r7, #7]
 801180a:	2b01      	cmp	r3, #1
 801180c:	d001      	beq.n	8011812 <f_mount+0x6a>
 801180e:	2300      	movs	r3, #0
 8011810:	e00a      	b.n	8011828 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011812:	f107 010c 	add.w	r1, r7, #12
 8011816:	f107 0308 	add.w	r3, r7, #8
 801181a:	2200      	movs	r2, #0
 801181c:	4618      	mov	r0, r3
 801181e:	f7ff fd07 	bl	8011230 <find_volume>
 8011822:	4603      	mov	r3, r0
 8011824:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011826:	7dfb      	ldrb	r3, [r7, #23]
}
 8011828:	4618      	mov	r0, r3
 801182a:	3720      	adds	r7, #32
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}
 8011830:	2003c460 	.word	0x2003c460

08011834 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b098      	sub	sp, #96	; 0x60
 8011838:	af00      	add	r7, sp, #0
 801183a:	60f8      	str	r0, [r7, #12]
 801183c:	60b9      	str	r1, [r7, #8]
 801183e:	4613      	mov	r3, r2
 8011840:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d101      	bne.n	801184c <f_open+0x18>
 8011848:	2309      	movs	r3, #9
 801184a:	e1ba      	b.n	8011bc2 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801184c:	79fb      	ldrb	r3, [r7, #7]
 801184e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011852:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011854:	79fa      	ldrb	r2, [r7, #7]
 8011856:	f107 0110 	add.w	r1, r7, #16
 801185a:	f107 0308 	add.w	r3, r7, #8
 801185e:	4618      	mov	r0, r3
 8011860:	f7ff fce6 	bl	8011230 <find_volume>
 8011864:	4603      	mov	r3, r0
 8011866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801186a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801186e:	2b00      	cmp	r3, #0
 8011870:	f040 819e 	bne.w	8011bb0 <f_open+0x37c>
		dj.obj.fs = fs;
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011878:	68ba      	ldr	r2, [r7, #8]
 801187a:	f107 0314 	add.w	r3, r7, #20
 801187e:	4611      	mov	r1, r2
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff fba5 	bl	8010fd0 <follow_path>
 8011886:	4603      	mov	r3, r0
 8011888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801188c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011890:	2b00      	cmp	r3, #0
 8011892:	d11a      	bne.n	80118ca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011894:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011898:	b25b      	sxtb	r3, r3
 801189a:	2b00      	cmp	r3, #0
 801189c:	da03      	bge.n	80118a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 801189e:	2306      	movs	r3, #6
 80118a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80118a4:	e011      	b.n	80118ca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80118a6:	79fb      	ldrb	r3, [r7, #7]
 80118a8:	f023 0301 	bic.w	r3, r3, #1
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bf14      	ite	ne
 80118b0:	2301      	movne	r3, #1
 80118b2:	2300      	moveq	r3, #0
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	461a      	mov	r2, r3
 80118b8:	f107 0314 	add.w	r3, r7, #20
 80118bc:	4611      	mov	r1, r2
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fe fa4c 	bl	800fd5c <chk_lock>
 80118c4:	4603      	mov	r3, r0
 80118c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80118ca:	79fb      	ldrb	r3, [r7, #7]
 80118cc:	f003 031c 	and.w	r3, r3, #28
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d07e      	beq.n	80119d2 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80118d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d017      	beq.n	801190c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80118dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118e0:	2b04      	cmp	r3, #4
 80118e2:	d10e      	bne.n	8011902 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80118e4:	f7fe fa96 	bl	800fe14 <enq_lock>
 80118e8:	4603      	mov	r3, r0
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d006      	beq.n	80118fc <f_open+0xc8>
 80118ee:	f107 0314 	add.w	r3, r7, #20
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7ff fa52 	bl	8010d9c <dir_register>
 80118f8:	4603      	mov	r3, r0
 80118fa:	e000      	b.n	80118fe <f_open+0xca>
 80118fc:	2312      	movs	r3, #18
 80118fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011902:	79fb      	ldrb	r3, [r7, #7]
 8011904:	f043 0308 	orr.w	r3, r3, #8
 8011908:	71fb      	strb	r3, [r7, #7]
 801190a:	e010      	b.n	801192e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801190c:	7ebb      	ldrb	r3, [r7, #26]
 801190e:	f003 0311 	and.w	r3, r3, #17
 8011912:	2b00      	cmp	r3, #0
 8011914:	d003      	beq.n	801191e <f_open+0xea>
					res = FR_DENIED;
 8011916:	2307      	movs	r3, #7
 8011918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801191c:	e007      	b.n	801192e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801191e:	79fb      	ldrb	r3, [r7, #7]
 8011920:	f003 0304 	and.w	r3, r3, #4
 8011924:	2b00      	cmp	r3, #0
 8011926:	d002      	beq.n	801192e <f_open+0xfa>
 8011928:	2308      	movs	r3, #8
 801192a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801192e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011932:	2b00      	cmp	r3, #0
 8011934:	d167      	bne.n	8011a06 <f_open+0x1d2>
 8011936:	79fb      	ldrb	r3, [r7, #7]
 8011938:	f003 0308 	and.w	r3, r3, #8
 801193c:	2b00      	cmp	r3, #0
 801193e:	d062      	beq.n	8011a06 <f_open+0x1d2>
				dw = GET_FATTIME();
 8011940:	4ba2      	ldr	r3, [pc, #648]	; (8011bcc <f_open+0x398>)
 8011942:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011946:	330e      	adds	r3, #14
 8011948:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801194a:	4618      	mov	r0, r3
 801194c:	f7fe f95c 	bl	800fc08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011952:	3316      	adds	r3, #22
 8011954:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011956:	4618      	mov	r0, r3
 8011958:	f7fe f956 	bl	800fc08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195e:	330b      	adds	r3, #11
 8011960:	2220      	movs	r2, #32
 8011962:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011968:	4611      	mov	r1, r2
 801196a:	4618      	mov	r0, r3
 801196c:	f7ff f925 	bl	8010bba <ld_clust>
 8011970:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011976:	2200      	movs	r2, #0
 8011978:	4618      	mov	r0, r3
 801197a:	f7ff f93d 	bl	8010bf8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801197e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011980:	331c      	adds	r3, #28
 8011982:	2100      	movs	r1, #0
 8011984:	4618      	mov	r0, r3
 8011986:	f7fe f93f 	bl	800fc08 <st_dword>
					fs->wflag = 1;
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	2201      	movs	r2, #1
 801198e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011992:	2b00      	cmp	r3, #0
 8011994:	d037      	beq.n	8011a06 <f_open+0x1d2>
						dw = fs->winsect;
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801199a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801199c:	f107 0314 	add.w	r3, r7, #20
 80119a0:	2200      	movs	r2, #0
 80119a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7fe fe2d 	bl	8010604 <remove_chain>
 80119aa:	4603      	mov	r3, r0
 80119ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80119b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d126      	bne.n	8011a06 <f_open+0x1d2>
							res = move_window(fs, dw);
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fe fb7d 	bl	80100bc <move_window>
 80119c2:	4603      	mov	r3, r0
 80119c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119cc:	3a01      	subs	r2, #1
 80119ce:	611a      	str	r2, [r3, #16]
 80119d0:	e019      	b.n	8011a06 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80119d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d115      	bne.n	8011a06 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80119da:	7ebb      	ldrb	r3, [r7, #26]
 80119dc:	f003 0310 	and.w	r3, r3, #16
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d003      	beq.n	80119ec <f_open+0x1b8>
					res = FR_NO_FILE;
 80119e4:	2304      	movs	r3, #4
 80119e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80119ea:	e00c      	b.n	8011a06 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80119ec:	79fb      	ldrb	r3, [r7, #7]
 80119ee:	f003 0302 	and.w	r3, r3, #2
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d007      	beq.n	8011a06 <f_open+0x1d2>
 80119f6:	7ebb      	ldrb	r3, [r7, #26]
 80119f8:	f003 0301 	and.w	r3, r3, #1
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d002      	beq.n	8011a06 <f_open+0x1d2>
						res = FR_DENIED;
 8011a00:	2307      	movs	r3, #7
 8011a02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011a06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d128      	bne.n	8011a60 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011a0e:	79fb      	ldrb	r3, [r7, #7]
 8011a10:	f003 0308 	and.w	r3, r3, #8
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d003      	beq.n	8011a20 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8011a18:	79fb      	ldrb	r3, [r7, #7]
 8011a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a1e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011a2e:	79fb      	ldrb	r3, [r7, #7]
 8011a30:	f023 0301 	bic.w	r3, r3, #1
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	bf14      	ite	ne
 8011a38:	2301      	movne	r3, #1
 8011a3a:	2300      	moveq	r3, #0
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	461a      	mov	r2, r3
 8011a40:	f107 0314 	add.w	r3, r7, #20
 8011a44:	4611      	mov	r1, r2
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fe fa06 	bl	800fe58 <inc_lock>
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	691b      	ldr	r3, [r3, #16]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d102      	bne.n	8011a60 <f_open+0x22c>
 8011a5a:	2302      	movs	r3, #2
 8011a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011a60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f040 80a3 	bne.w	8011bb0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a6e:	4611      	mov	r1, r2
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff f8a2 	bl	8010bba <ld_clust>
 8011a76:	4602      	mov	r2, r0
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a7e:	331c      	adds	r3, #28
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fe f883 	bl	800fb8c <ld_dword>
 8011a86:	4602      	mov	r2, r0
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011a92:	693a      	ldr	r2, [r7, #16]
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	88da      	ldrh	r2, [r3, #6]
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	79fa      	ldrb	r2, [r7, #7]
 8011aa4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	3330      	adds	r3, #48	; 0x30
 8011abc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011ac0:	2100      	movs	r1, #0
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fe f8ed 	bl	800fca2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011ac8:	79fb      	ldrb	r3, [r7, #7]
 8011aca:	f003 0320 	and.w	r3, r3, #32
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d06e      	beq.n	8011bb0 <f_open+0x37c>
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	68db      	ldr	r3, [r3, #12]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d06a      	beq.n	8011bb0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	68da      	ldr	r2, [r3, #12]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	895b      	ldrh	r3, [r3, #10]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	899b      	ldrh	r3, [r3, #12]
 8011aec:	fb03 f302 	mul.w	r3, r3, r2
 8011af0:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	689b      	ldr	r3, [r3, #8]
 8011af6:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	68db      	ldr	r3, [r3, #12]
 8011afc:	657b      	str	r3, [r7, #84]	; 0x54
 8011afe:	e016      	b.n	8011b2e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7fe fb96 	bl	8010236 <get_fat>
 8011b0a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d802      	bhi.n	8011b18 <f_open+0x2e4>
 8011b12:	2302      	movs	r3, #2
 8011b14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b1e:	d102      	bne.n	8011b26 <f_open+0x2f2>
 8011b20:	2301      	movs	r3, #1
 8011b22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8011b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d103      	bne.n	8011b3e <f_open+0x30a>
 8011b36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d8e0      	bhi.n	8011b00 <f_open+0x2cc>
				}
				fp->clust = clst;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b42:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011b44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d131      	bne.n	8011bb0 <f_open+0x37c>
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	899b      	ldrh	r3, [r3, #12]
 8011b50:	461a      	mov	r2, r3
 8011b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b54:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b58:	fb02 f201 	mul.w	r2, r2, r1
 8011b5c:	1a9b      	subs	r3, r3, r2
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d026      	beq.n	8011bb0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fe fb46 	bl	80101f8 <clust2sect>
 8011b6c:	6478      	str	r0, [r7, #68]	; 0x44
 8011b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d103      	bne.n	8011b7c <f_open+0x348>
						res = FR_INT_ERR;
 8011b74:	2302      	movs	r3, #2
 8011b76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011b7a:	e019      	b.n	8011bb0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	899b      	ldrh	r3, [r3, #12]
 8011b80:	461a      	mov	r2, r3
 8011b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b84:	fbb3 f2f2 	udiv	r2, r3, r2
 8011b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b8a:	441a      	add	r2, r3
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	7858      	ldrb	r0, [r3, #1]
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	6a1a      	ldr	r2, [r3, #32]
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	f7fd ff7e 	bl	800faa0 <disk_read>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d002      	beq.n	8011bb0 <f_open+0x37c>
 8011baa:	2301      	movs	r3, #1
 8011bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d002      	beq.n	8011bbe <f_open+0x38a>
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011bbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3760      	adds	r7, #96	; 0x60
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	274a0000 	.word	0x274a0000

08011bd0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b08e      	sub	sp, #56	; 0x38
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	607a      	str	r2, [r7, #4]
 8011bdc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	2200      	movs	r2, #0
 8011be6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f107 0214 	add.w	r2, r7, #20
 8011bee:	4611      	mov	r1, r2
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7ff fda3 	bl	801173c <validate>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011bfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d107      	bne.n	8011c14 <f_read+0x44>
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	7d5b      	ldrb	r3, [r3, #21]
 8011c08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d002      	beq.n	8011c1a <f_read+0x4a>
 8011c14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c18:	e135      	b.n	8011e86 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	7d1b      	ldrb	r3, [r3, #20]
 8011c1e:	f003 0301 	and.w	r3, r3, #1
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d101      	bne.n	8011c2a <f_read+0x5a>
 8011c26:	2307      	movs	r3, #7
 8011c28:	e12d      	b.n	8011e86 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	68da      	ldr	r2, [r3, #12]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	699b      	ldr	r3, [r3, #24]
 8011c32:	1ad3      	subs	r3, r2, r3
 8011c34:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011c36:	687a      	ldr	r2, [r7, #4]
 8011c38:	6a3b      	ldr	r3, [r7, #32]
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	f240 811e 	bls.w	8011e7c <f_read+0x2ac>
 8011c40:	6a3b      	ldr	r3, [r7, #32]
 8011c42:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011c44:	e11a      	b.n	8011e7c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	699b      	ldr	r3, [r3, #24]
 8011c4a:	697a      	ldr	r2, [r7, #20]
 8011c4c:	8992      	ldrh	r2, [r2, #12]
 8011c4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c52:	fb02 f201 	mul.w	r2, r2, r1
 8011c56:	1a9b      	subs	r3, r3, r2
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	f040 80d5 	bne.w	8011e08 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	699b      	ldr	r3, [r3, #24]
 8011c62:	697a      	ldr	r2, [r7, #20]
 8011c64:	8992      	ldrh	r2, [r2, #12]
 8011c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c6a:	697a      	ldr	r2, [r7, #20]
 8011c6c:	8952      	ldrh	r2, [r2, #10]
 8011c6e:	3a01      	subs	r2, #1
 8011c70:	4013      	ands	r3, r2
 8011c72:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011c74:	69fb      	ldr	r3, [r7, #28]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d12f      	bne.n	8011cda <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	699b      	ldr	r3, [r3, #24]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d103      	bne.n	8011c8a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	689b      	ldr	r3, [r3, #8]
 8011c86:	633b      	str	r3, [r7, #48]	; 0x30
 8011c88:	e013      	b.n	8011cb2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d007      	beq.n	8011ca2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	699b      	ldr	r3, [r3, #24]
 8011c96:	4619      	mov	r1, r3
 8011c98:	68f8      	ldr	r0, [r7, #12]
 8011c9a:	f7fe fdb0 	bl	80107fe <clmt_clust>
 8011c9e:	6338      	str	r0, [r7, #48]	; 0x30
 8011ca0:	e007      	b.n	8011cb2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011ca2:	68fa      	ldr	r2, [r7, #12]
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	69db      	ldr	r3, [r3, #28]
 8011ca8:	4619      	mov	r1, r3
 8011caa:	4610      	mov	r0, r2
 8011cac:	f7fe fac3 	bl	8010236 <get_fat>
 8011cb0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d804      	bhi.n	8011cc2 <f_read+0xf2>
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2202      	movs	r2, #2
 8011cbc:	755a      	strb	r2, [r3, #21]
 8011cbe:	2302      	movs	r3, #2
 8011cc0:	e0e1      	b.n	8011e86 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc8:	d104      	bne.n	8011cd4 <f_read+0x104>
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2201      	movs	r2, #1
 8011cce:	755a      	strb	r2, [r3, #21]
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	e0d8      	b.n	8011e86 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cd8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011cda:	697a      	ldr	r2, [r7, #20]
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	69db      	ldr	r3, [r3, #28]
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	4610      	mov	r0, r2
 8011ce4:	f7fe fa88 	bl	80101f8 <clust2sect>
 8011ce8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011cea:	69bb      	ldr	r3, [r7, #24]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d104      	bne.n	8011cfa <f_read+0x12a>
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2202      	movs	r2, #2
 8011cf4:	755a      	strb	r2, [r3, #21]
 8011cf6:	2302      	movs	r3, #2
 8011cf8:	e0c5      	b.n	8011e86 <f_read+0x2b6>
			sect += csect;
 8011cfa:	69ba      	ldr	r2, [r7, #24]
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	4413      	add	r3, r2
 8011d00:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	899b      	ldrh	r3, [r3, #12]
 8011d06:	461a      	mov	r2, r3
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d0e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d041      	beq.n	8011d9a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011d16:	69fa      	ldr	r2, [r7, #28]
 8011d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1a:	4413      	add	r3, r2
 8011d1c:	697a      	ldr	r2, [r7, #20]
 8011d1e:	8952      	ldrh	r2, [r2, #10]
 8011d20:	4293      	cmp	r3, r2
 8011d22:	d905      	bls.n	8011d30 <f_read+0x160>
					cc = fs->csize - csect;
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	895b      	ldrh	r3, [r3, #10]
 8011d28:	461a      	mov	r2, r3
 8011d2a:	69fb      	ldr	r3, [r7, #28]
 8011d2c:	1ad3      	subs	r3, r2, r3
 8011d2e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	7858      	ldrb	r0, [r3, #1]
 8011d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d36:	69ba      	ldr	r2, [r7, #24]
 8011d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d3a:	f7fd feb1 	bl	800faa0 <disk_read>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d004      	beq.n	8011d4e <f_read+0x17e>
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2201      	movs	r2, #1
 8011d48:	755a      	strb	r2, [r3, #21]
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	e09b      	b.n	8011e86 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	7d1b      	ldrb	r3, [r3, #20]
 8011d52:	b25b      	sxtb	r3, r3
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	da18      	bge.n	8011d8a <f_read+0x1ba>
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	6a1a      	ldr	r2, [r3, #32]
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	1ad3      	subs	r3, r2, r3
 8011d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d911      	bls.n	8011d8a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	6a1a      	ldr	r2, [r3, #32]
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	1ad3      	subs	r3, r2, r3
 8011d6e:	697a      	ldr	r2, [r7, #20]
 8011d70:	8992      	ldrh	r2, [r2, #12]
 8011d72:	fb02 f303 	mul.w	r3, r2, r3
 8011d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d78:	18d0      	adds	r0, r2, r3
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	899b      	ldrh	r3, [r3, #12]
 8011d84:	461a      	mov	r2, r3
 8011d86:	f7fd ff6b 	bl	800fc60 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	899b      	ldrh	r3, [r3, #12]
 8011d8e:	461a      	mov	r2, r3
 8011d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d92:	fb02 f303 	mul.w	r3, r2, r3
 8011d96:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011d98:	e05c      	b.n	8011e54 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	6a1b      	ldr	r3, [r3, #32]
 8011d9e:	69ba      	ldr	r2, [r7, #24]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d02e      	beq.n	8011e02 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	7d1b      	ldrb	r3, [r3, #20]
 8011da8:	b25b      	sxtb	r3, r3
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	da18      	bge.n	8011de0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	7858      	ldrb	r0, [r3, #1]
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	6a1a      	ldr	r2, [r3, #32]
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	f7fd fe8f 	bl	800fae0 <disk_write>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d004      	beq.n	8011dd2 <f_read+0x202>
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	755a      	strb	r2, [r3, #21]
 8011dce:	2301      	movs	r3, #1
 8011dd0:	e059      	b.n	8011e86 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	7d1b      	ldrb	r3, [r3, #20]
 8011dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dda:	b2da      	uxtb	r2, r3
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	7858      	ldrb	r0, [r3, #1]
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011dea:	2301      	movs	r3, #1
 8011dec:	69ba      	ldr	r2, [r7, #24]
 8011dee:	f7fd fe57 	bl	800faa0 <disk_read>
 8011df2:	4603      	mov	r3, r0
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d004      	beq.n	8011e02 <f_read+0x232>
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	755a      	strb	r2, [r3, #21]
 8011dfe:	2301      	movs	r3, #1
 8011e00:	e041      	b.n	8011e86 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	69ba      	ldr	r2, [r7, #24]
 8011e06:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	899b      	ldrh	r3, [r3, #12]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	699b      	ldr	r3, [r3, #24]
 8011e12:	697a      	ldr	r2, [r7, #20]
 8011e14:	8992      	ldrh	r2, [r2, #12]
 8011e16:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e1a:	fb02 f201 	mul.w	r2, r2, r1
 8011e1e:	1a9b      	subs	r3, r3, r2
 8011e20:	1ac3      	subs	r3, r0, r3
 8011e22:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d901      	bls.n	8011e30 <f_read+0x260>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	699b      	ldr	r3, [r3, #24]
 8011e3a:	697a      	ldr	r2, [r7, #20]
 8011e3c:	8992      	ldrh	r2, [r2, #12]
 8011e3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e42:	fb02 f200 	mul.w	r2, r2, r0
 8011e46:	1a9b      	subs	r3, r3, r2
 8011e48:	440b      	add	r3, r1
 8011e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e50:	f7fd ff06 	bl	800fc60 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e58:	4413      	add	r3, r2
 8011e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	699a      	ldr	r2, [r3, #24]
 8011e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e62:	441a      	add	r2, r3
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	619a      	str	r2, [r3, #24]
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	681a      	ldr	r2, [r3, #0]
 8011e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6e:	441a      	add	r2, r3
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	601a      	str	r2, [r3, #0]
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e78:	1ad3      	subs	r3, r2, r3
 8011e7a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	f47f aee1 	bne.w	8011c46 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011e84:	2300      	movs	r3, #0
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3738      	adds	r7, #56	; 0x38
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}

08011e8e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b08c      	sub	sp, #48	; 0x30
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	60f8      	str	r0, [r7, #12]
 8011e96:	60b9      	str	r1, [r7, #8]
 8011e98:	607a      	str	r2, [r7, #4]
 8011e9a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	f107 0210 	add.w	r2, r7, #16
 8011eac:	4611      	mov	r1, r2
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7ff fc44 	bl	801173c <validate>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d107      	bne.n	8011ed2 <f_write+0x44>
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	7d5b      	ldrb	r3, [r3, #21]
 8011ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d002      	beq.n	8011ed8 <f_write+0x4a>
 8011ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ed6:	e16a      	b.n	80121ae <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	7d1b      	ldrb	r3, [r3, #20]
 8011edc:	f003 0302 	and.w	r3, r3, #2
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d101      	bne.n	8011ee8 <f_write+0x5a>
 8011ee4:	2307      	movs	r3, #7
 8011ee6:	e162      	b.n	80121ae <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	699a      	ldr	r2, [r3, #24]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	441a      	add	r2, r3
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	699b      	ldr	r3, [r3, #24]
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	f080 814c 	bcs.w	8012192 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	699b      	ldr	r3, [r3, #24]
 8011efe:	43db      	mvns	r3, r3
 8011f00:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011f02:	e146      	b.n	8012192 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	699b      	ldr	r3, [r3, #24]
 8011f08:	693a      	ldr	r2, [r7, #16]
 8011f0a:	8992      	ldrh	r2, [r2, #12]
 8011f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f10:	fb02 f201 	mul.w	r2, r2, r1
 8011f14:	1a9b      	subs	r3, r3, r2
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f040 80f1 	bne.w	80120fe <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	699b      	ldr	r3, [r3, #24]
 8011f20:	693a      	ldr	r2, [r7, #16]
 8011f22:	8992      	ldrh	r2, [r2, #12]
 8011f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f28:	693a      	ldr	r2, [r7, #16]
 8011f2a:	8952      	ldrh	r2, [r2, #10]
 8011f2c:	3a01      	subs	r2, #1
 8011f2e:	4013      	ands	r3, r2
 8011f30:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011f32:	69bb      	ldr	r3, [r7, #24]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d143      	bne.n	8011fc0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	699b      	ldr	r3, [r3, #24]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d10c      	bne.n	8011f5a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	689b      	ldr	r3, [r3, #8]
 8011f44:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d11a      	bne.n	8011f82 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2100      	movs	r1, #0
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7fe fbbc 	bl	80106ce <create_chain>
 8011f56:	62b8      	str	r0, [r7, #40]	; 0x28
 8011f58:	e013      	b.n	8011f82 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d007      	beq.n	8011f72 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	699b      	ldr	r3, [r3, #24]
 8011f66:	4619      	mov	r1, r3
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f7fe fc48 	bl	80107fe <clmt_clust>
 8011f6e:	62b8      	str	r0, [r7, #40]	; 0x28
 8011f70:	e007      	b.n	8011f82 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	69db      	ldr	r3, [r3, #28]
 8011f78:	4619      	mov	r1, r3
 8011f7a:	4610      	mov	r0, r2
 8011f7c:	f7fe fba7 	bl	80106ce <create_chain>
 8011f80:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f000 8109 	beq.w	801219c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d104      	bne.n	8011f9a <f_write+0x10c>
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2202      	movs	r2, #2
 8011f94:	755a      	strb	r2, [r3, #21]
 8011f96:	2302      	movs	r3, #2
 8011f98:	e109      	b.n	80121ae <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa0:	d104      	bne.n	8011fac <f_write+0x11e>
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	755a      	strb	r2, [r3, #21]
 8011fa8:	2301      	movs	r3, #1
 8011faa:	e100      	b.n	80121ae <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fb0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	689b      	ldr	r3, [r3, #8]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d102      	bne.n	8011fc0 <f_write+0x132>
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fbe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	7d1b      	ldrb	r3, [r3, #20]
 8011fc4:	b25b      	sxtb	r3, r3
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	da18      	bge.n	8011ffc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	7858      	ldrb	r0, [r3, #1]
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	6a1a      	ldr	r2, [r3, #32]
 8011fd8:	2301      	movs	r3, #1
 8011fda:	f7fd fd81 	bl	800fae0 <disk_write>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d004      	beq.n	8011fee <f_write+0x160>
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	755a      	strb	r2, [r3, #21]
 8011fea:	2301      	movs	r3, #1
 8011fec:	e0df      	b.n	80121ae <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	7d1b      	ldrb	r3, [r3, #20]
 8011ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ff6:	b2da      	uxtb	r2, r3
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011ffc:	693a      	ldr	r2, [r7, #16]
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	69db      	ldr	r3, [r3, #28]
 8012002:	4619      	mov	r1, r3
 8012004:	4610      	mov	r0, r2
 8012006:	f7fe f8f7 	bl	80101f8 <clust2sect>
 801200a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d104      	bne.n	801201c <f_write+0x18e>
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2202      	movs	r2, #2
 8012016:	755a      	strb	r2, [r3, #21]
 8012018:	2302      	movs	r3, #2
 801201a:	e0c8      	b.n	80121ae <f_write+0x320>
			sect += csect;
 801201c:	697a      	ldr	r2, [r7, #20]
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	4413      	add	r3, r2
 8012022:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	899b      	ldrh	r3, [r3, #12]
 8012028:	461a      	mov	r2, r3
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012030:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012032:	6a3b      	ldr	r3, [r7, #32]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d043      	beq.n	80120c0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012038:	69ba      	ldr	r2, [r7, #24]
 801203a:	6a3b      	ldr	r3, [r7, #32]
 801203c:	4413      	add	r3, r2
 801203e:	693a      	ldr	r2, [r7, #16]
 8012040:	8952      	ldrh	r2, [r2, #10]
 8012042:	4293      	cmp	r3, r2
 8012044:	d905      	bls.n	8012052 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	895b      	ldrh	r3, [r3, #10]
 801204a:	461a      	mov	r2, r3
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	1ad3      	subs	r3, r2, r3
 8012050:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	7858      	ldrb	r0, [r3, #1]
 8012056:	6a3b      	ldr	r3, [r7, #32]
 8012058:	697a      	ldr	r2, [r7, #20]
 801205a:	69f9      	ldr	r1, [r7, #28]
 801205c:	f7fd fd40 	bl	800fae0 <disk_write>
 8012060:	4603      	mov	r3, r0
 8012062:	2b00      	cmp	r3, #0
 8012064:	d004      	beq.n	8012070 <f_write+0x1e2>
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2201      	movs	r2, #1
 801206a:	755a      	strb	r2, [r3, #21]
 801206c:	2301      	movs	r3, #1
 801206e:	e09e      	b.n	80121ae <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	6a1a      	ldr	r2, [r3, #32]
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	1ad3      	subs	r3, r2, r3
 8012078:	6a3a      	ldr	r2, [r7, #32]
 801207a:	429a      	cmp	r2, r3
 801207c:	d918      	bls.n	80120b0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	6a1a      	ldr	r2, [r3, #32]
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	1ad3      	subs	r3, r2, r3
 801208c:	693a      	ldr	r2, [r7, #16]
 801208e:	8992      	ldrh	r2, [r2, #12]
 8012090:	fb02 f303 	mul.w	r3, r2, r3
 8012094:	69fa      	ldr	r2, [r7, #28]
 8012096:	18d1      	adds	r1, r2, r3
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	899b      	ldrh	r3, [r3, #12]
 801209c:	461a      	mov	r2, r3
 801209e:	f7fd fddf 	bl	800fc60 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	7d1b      	ldrb	r3, [r3, #20]
 80120a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120aa:	b2da      	uxtb	r2, r3
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	899b      	ldrh	r3, [r3, #12]
 80120b4:	461a      	mov	r2, r3
 80120b6:	6a3b      	ldr	r3, [r7, #32]
 80120b8:	fb02 f303 	mul.w	r3, r2, r3
 80120bc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80120be:	e04b      	b.n	8012158 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	6a1b      	ldr	r3, [r3, #32]
 80120c4:	697a      	ldr	r2, [r7, #20]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d016      	beq.n	80120f8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	699a      	ldr	r2, [r3, #24]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d210      	bcs.n	80120f8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	7858      	ldrb	r0, [r3, #1]
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80120e0:	2301      	movs	r3, #1
 80120e2:	697a      	ldr	r2, [r7, #20]
 80120e4:	f7fd fcdc 	bl	800faa0 <disk_read>
 80120e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d004      	beq.n	80120f8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2201      	movs	r2, #1
 80120f2:	755a      	strb	r2, [r3, #21]
 80120f4:	2301      	movs	r3, #1
 80120f6:	e05a      	b.n	80121ae <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	697a      	ldr	r2, [r7, #20]
 80120fc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	899b      	ldrh	r3, [r3, #12]
 8012102:	4618      	mov	r0, r3
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	699b      	ldr	r3, [r3, #24]
 8012108:	693a      	ldr	r2, [r7, #16]
 801210a:	8992      	ldrh	r2, [r2, #12]
 801210c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012110:	fb02 f201 	mul.w	r2, r2, r1
 8012114:	1a9b      	subs	r3, r3, r2
 8012116:	1ac3      	subs	r3, r0, r3
 8012118:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	429a      	cmp	r2, r3
 8012120:	d901      	bls.n	8012126 <f_write+0x298>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	699b      	ldr	r3, [r3, #24]
 8012130:	693a      	ldr	r2, [r7, #16]
 8012132:	8992      	ldrh	r2, [r2, #12]
 8012134:	fbb3 f0f2 	udiv	r0, r3, r2
 8012138:	fb02 f200 	mul.w	r2, r2, r0
 801213c:	1a9b      	subs	r3, r3, r2
 801213e:	440b      	add	r3, r1
 8012140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012142:	69f9      	ldr	r1, [r7, #28]
 8012144:	4618      	mov	r0, r3
 8012146:	f7fd fd8b 	bl	800fc60 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	7d1b      	ldrb	r3, [r3, #20]
 801214e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012152:	b2da      	uxtb	r2, r3
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012158:	69fa      	ldr	r2, [r7, #28]
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215c:	4413      	add	r3, r2
 801215e:	61fb      	str	r3, [r7, #28]
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	699a      	ldr	r2, [r3, #24]
 8012164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012166:	441a      	add	r2, r3
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	619a      	str	r2, [r3, #24]
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	68da      	ldr	r2, [r3, #12]
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	699b      	ldr	r3, [r3, #24]
 8012174:	429a      	cmp	r2, r3
 8012176:	bf38      	it	cc
 8012178:	461a      	movcc	r2, r3
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	60da      	str	r2, [r3, #12]
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012184:	441a      	add	r2, r3
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	601a      	str	r2, [r3, #0]
 801218a:	687a      	ldr	r2, [r7, #4]
 801218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218e:	1ad3      	subs	r3, r2, r3
 8012190:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2b00      	cmp	r3, #0
 8012196:	f47f aeb5 	bne.w	8011f04 <f_write+0x76>
 801219a:	e000      	b.n	801219e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801219c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	7d1b      	ldrb	r3, [r3, #20]
 80121a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121a6:	b2da      	uxtb	r2, r3
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80121ac:	2300      	movs	r3, #0
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3730      	adds	r7, #48	; 0x30
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
	...

080121b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b086      	sub	sp, #24
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f107 0208 	add.w	r2, r7, #8
 80121c6:	4611      	mov	r1, r2
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7ff fab7 	bl	801173c <validate>
 80121ce:	4603      	mov	r3, r0
 80121d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80121d2:	7dfb      	ldrb	r3, [r7, #23]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d167      	bne.n	80122a8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	7d1b      	ldrb	r3, [r3, #20]
 80121dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d061      	beq.n	80122a8 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	7d1b      	ldrb	r3, [r3, #20]
 80121e8:	b25b      	sxtb	r3, r3
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	da15      	bge.n	801221a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	7858      	ldrb	r0, [r3, #1]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6a1a      	ldr	r2, [r3, #32]
 80121fc:	2301      	movs	r3, #1
 80121fe:	f7fd fc6f 	bl	800fae0 <disk_write>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d001      	beq.n	801220c <f_sync+0x54>
 8012208:	2301      	movs	r3, #1
 801220a:	e04e      	b.n	80122aa <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	7d1b      	ldrb	r3, [r3, #20]
 8012210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012214:	b2da      	uxtb	r2, r3
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801221a:	4b26      	ldr	r3, [pc, #152]	; (80122b4 <f_sync+0xfc>)
 801221c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012224:	4619      	mov	r1, r3
 8012226:	4610      	mov	r0, r2
 8012228:	f7fd ff48 	bl	80100bc <move_window>
 801222c:	4603      	mov	r3, r0
 801222e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012230:	7dfb      	ldrb	r3, [r7, #23]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d138      	bne.n	80122a8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801223a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	330b      	adds	r3, #11
 8012240:	781a      	ldrb	r2, [r3, #0]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	330b      	adds	r3, #11
 8012246:	f042 0220 	orr.w	r2, r2, #32
 801224a:	b2d2      	uxtb	r2, r2
 801224c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6818      	ldr	r0, [r3, #0]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	689b      	ldr	r3, [r3, #8]
 8012256:	461a      	mov	r2, r3
 8012258:	68f9      	ldr	r1, [r7, #12]
 801225a:	f7fe fccd 	bl	8010bf8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	f103 021c 	add.w	r2, r3, #28
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	4619      	mov	r1, r3
 801226a:	4610      	mov	r0, r2
 801226c:	f7fd fccc 	bl	800fc08 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	3316      	adds	r3, #22
 8012274:	6939      	ldr	r1, [r7, #16]
 8012276:	4618      	mov	r0, r3
 8012278:	f7fd fcc6 	bl	800fc08 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	3312      	adds	r3, #18
 8012280:	2100      	movs	r1, #0
 8012282:	4618      	mov	r0, r3
 8012284:	f7fd fca5 	bl	800fbd2 <st_word>
					fs->wflag = 1;
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	2201      	movs	r2, #1
 801228c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	4618      	mov	r0, r3
 8012292:	f7fd ff41 	bl	8010118 <sync_fs>
 8012296:	4603      	mov	r3, r0
 8012298:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	7d1b      	ldrb	r3, [r3, #20]
 801229e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80122a2:	b2da      	uxtb	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80122a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3718      	adds	r7, #24
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	274a0000 	.word	0x274a0000

080122b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b084      	sub	sp, #16
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f7ff ff79 	bl	80121b8 <f_sync>
 80122c6:	4603      	mov	r3, r0
 80122c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80122ca:	7bfb      	ldrb	r3, [r7, #15]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d118      	bne.n	8012302 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f107 0208 	add.w	r2, r7, #8
 80122d6:	4611      	mov	r1, r2
 80122d8:	4618      	mov	r0, r3
 80122da:	f7ff fa2f 	bl	801173c <validate>
 80122de:	4603      	mov	r3, r0
 80122e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80122e2:	7bfb      	ldrb	r3, [r7, #15]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d10c      	bne.n	8012302 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	691b      	ldr	r3, [r3, #16]
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7fd fe41 	bl	800ff74 <dec_lock>
 80122f2:	4603      	mov	r3, r0
 80122f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80122f6:	7bfb      	ldrb	r3, [r7, #15]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d102      	bne.n	8012302 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012302:	7bfb      	ldrb	r3, [r7, #15]
}
 8012304:	4618      	mov	r0, r3
 8012306:	3710      	adds	r7, #16
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801230c:	b590      	push	{r4, r7, lr}
 801230e:	b091      	sub	sp, #68	; 0x44
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012314:	f107 0108 	add.w	r1, r7, #8
 8012318:	1d3b      	adds	r3, r7, #4
 801231a:	2200      	movs	r2, #0
 801231c:	4618      	mov	r0, r3
 801231e:	f7fe ff87 	bl	8011230 <find_volume>
 8012322:	4603      	mov	r3, r0
 8012324:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012328:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801232c:	2b00      	cmp	r3, #0
 801232e:	d131      	bne.n	8012394 <f_chdir+0x88>
		dj.obj.fs = fs;
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	f107 030c 	add.w	r3, r7, #12
 801233a:	4611      	mov	r1, r2
 801233c:	4618      	mov	r0, r3
 801233e:	f7fe fe47 	bl	8010fd0 <follow_path>
 8012342:	4603      	mov	r3, r0
 8012344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8012348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801234c:	2b00      	cmp	r3, #0
 801234e:	d11a      	bne.n	8012386 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012350:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012354:	b25b      	sxtb	r3, r3
 8012356:	2b00      	cmp	r3, #0
 8012358:	da03      	bge.n	8012362 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	697a      	ldr	r2, [r7, #20]
 801235e:	619a      	str	r2, [r3, #24]
 8012360:	e011      	b.n	8012386 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8012362:	7cbb      	ldrb	r3, [r7, #18]
 8012364:	f003 0310 	and.w	r3, r3, #16
 8012368:	2b00      	cmp	r3, #0
 801236a:	d009      	beq.n	8012380 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012370:	68bc      	ldr	r4, [r7, #8]
 8012372:	4611      	mov	r1, r2
 8012374:	4618      	mov	r0, r3
 8012376:	f7fe fc20 	bl	8010bba <ld_clust>
 801237a:	4603      	mov	r3, r0
 801237c:	61a3      	str	r3, [r4, #24]
 801237e:	e002      	b.n	8012386 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012380:	2305      	movs	r3, #5
 8012382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012386:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801238a:	2b04      	cmp	r3, #4
 801238c:	d102      	bne.n	8012394 <f_chdir+0x88>
 801238e:	2305      	movs	r3, #5
 8012390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8012394:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012398:	4618      	mov	r0, r3
 801239a:	3744      	adds	r7, #68	; 0x44
 801239c:	46bd      	mov	sp, r7
 801239e:	bd90      	pop	{r4, r7, pc}

080123a0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b090      	sub	sp, #64	; 0x40
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f107 0208 	add.w	r2, r7, #8
 80123b0:	4611      	mov	r1, r2
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7ff f9c2 	bl	801173c <validate>
 80123b8:	4603      	mov	r3, r0
 80123ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80123be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d103      	bne.n	80123ce <f_lseek+0x2e>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	7d5b      	ldrb	r3, [r3, #21]
 80123ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80123ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d002      	beq.n	80123dc <f_lseek+0x3c>
 80123d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80123da:	e201      	b.n	80127e0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f000 80d9 	beq.w	8012598 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ec:	d15a      	bne.n	80124a4 <f_lseek+0x104>
			tbl = fp->cltbl;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123f2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	1d1a      	adds	r2, r3, #4
 80123f8:	627a      	str	r2, [r7, #36]	; 0x24
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	617b      	str	r3, [r7, #20]
 80123fe:	2302      	movs	r3, #2
 8012400:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	689b      	ldr	r3, [r3, #8]
 8012406:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240a:	2b00      	cmp	r3, #0
 801240c:	d03a      	beq.n	8012484 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	613b      	str	r3, [r7, #16]
 8012412:	2300      	movs	r3, #0
 8012414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012418:	3302      	adds	r3, #2
 801241a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241e:	60fb      	str	r3, [r7, #12]
 8012420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012422:	3301      	adds	r3, #1
 8012424:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801242a:	4618      	mov	r0, r3
 801242c:	f7fd ff03 	bl	8010236 <get_fat>
 8012430:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012434:	2b01      	cmp	r3, #1
 8012436:	d804      	bhi.n	8012442 <f_lseek+0xa2>
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2202      	movs	r2, #2
 801243c:	755a      	strb	r2, [r3, #21]
 801243e:	2302      	movs	r3, #2
 8012440:	e1ce      	b.n	80127e0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012448:	d104      	bne.n	8012454 <f_lseek+0xb4>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2201      	movs	r2, #1
 801244e:	755a      	strb	r2, [r3, #21]
 8012450:	2301      	movs	r3, #1
 8012452:	e1c5      	b.n	80127e0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	3301      	adds	r3, #1
 8012458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801245a:	429a      	cmp	r2, r3
 801245c:	d0de      	beq.n	801241c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801245e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	429a      	cmp	r2, r3
 8012464:	d809      	bhi.n	801247a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	1d1a      	adds	r2, r3, #4
 801246a:	627a      	str	r2, [r7, #36]	; 0x24
 801246c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801246e:	601a      	str	r2, [r3, #0]
 8012470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012472:	1d1a      	adds	r2, r3, #4
 8012474:	627a      	str	r2, [r7, #36]	; 0x24
 8012476:	693a      	ldr	r2, [r7, #16]
 8012478:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	69db      	ldr	r3, [r3, #28]
 801247e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012480:	429a      	cmp	r2, r3
 8012482:	d3c4      	bcc.n	801240e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801248a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801248c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	429a      	cmp	r2, r3
 8012492:	d803      	bhi.n	801249c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012496:	2200      	movs	r2, #0
 8012498:	601a      	str	r2, [r3, #0]
 801249a:	e19f      	b.n	80127dc <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801249c:	2311      	movs	r3, #17
 801249e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80124a2:	e19b      	b.n	80127dc <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d902      	bls.n	80124b4 <f_lseek+0x114>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	683a      	ldr	r2, [r7, #0]
 80124b8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	f000 818d 	beq.w	80127dc <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	3b01      	subs	r3, #1
 80124c6:	4619      	mov	r1, r3
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f7fe f998 	bl	80107fe <clmt_clust>
 80124ce:	4602      	mov	r2, r0
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80124d4:	68ba      	ldr	r2, [r7, #8]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	69db      	ldr	r3, [r3, #28]
 80124da:	4619      	mov	r1, r3
 80124dc:	4610      	mov	r0, r2
 80124de:	f7fd fe8b 	bl	80101f8 <clust2sect>
 80124e2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d104      	bne.n	80124f4 <f_lseek+0x154>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2202      	movs	r2, #2
 80124ee:	755a      	strb	r2, [r3, #21]
 80124f0:	2302      	movs	r3, #2
 80124f2:	e175      	b.n	80127e0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	3b01      	subs	r3, #1
 80124f8:	68ba      	ldr	r2, [r7, #8]
 80124fa:	8992      	ldrh	r2, [r2, #12]
 80124fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012500:	68ba      	ldr	r2, [r7, #8]
 8012502:	8952      	ldrh	r2, [r2, #10]
 8012504:	3a01      	subs	r2, #1
 8012506:	4013      	ands	r3, r2
 8012508:	69ba      	ldr	r2, [r7, #24]
 801250a:	4413      	add	r3, r2
 801250c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	699b      	ldr	r3, [r3, #24]
 8012512:	68ba      	ldr	r2, [r7, #8]
 8012514:	8992      	ldrh	r2, [r2, #12]
 8012516:	fbb3 f1f2 	udiv	r1, r3, r2
 801251a:	fb02 f201 	mul.w	r2, r2, r1
 801251e:	1a9b      	subs	r3, r3, r2
 8012520:	2b00      	cmp	r3, #0
 8012522:	f000 815b 	beq.w	80127dc <f_lseek+0x43c>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6a1b      	ldr	r3, [r3, #32]
 801252a:	69ba      	ldr	r2, [r7, #24]
 801252c:	429a      	cmp	r2, r3
 801252e:	f000 8155 	beq.w	80127dc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	7d1b      	ldrb	r3, [r3, #20]
 8012536:	b25b      	sxtb	r3, r3
 8012538:	2b00      	cmp	r3, #0
 801253a:	da18      	bge.n	801256e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	7858      	ldrb	r0, [r3, #1]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6a1a      	ldr	r2, [r3, #32]
 801254a:	2301      	movs	r3, #1
 801254c:	f7fd fac8 	bl	800fae0 <disk_write>
 8012550:	4603      	mov	r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	d004      	beq.n	8012560 <f_lseek+0x1c0>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2201      	movs	r2, #1
 801255a:	755a      	strb	r2, [r3, #21]
 801255c:	2301      	movs	r3, #1
 801255e:	e13f      	b.n	80127e0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	7d1b      	ldrb	r3, [r3, #20]
 8012564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012568:	b2da      	uxtb	r2, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	7858      	ldrb	r0, [r3, #1]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012578:	2301      	movs	r3, #1
 801257a:	69ba      	ldr	r2, [r7, #24]
 801257c:	f7fd fa90 	bl	800faa0 <disk_read>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d004      	beq.n	8012590 <f_lseek+0x1f0>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2201      	movs	r2, #1
 801258a:	755a      	strb	r2, [r3, #21]
 801258c:	2301      	movs	r3, #1
 801258e:	e127      	b.n	80127e0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	69ba      	ldr	r2, [r7, #24]
 8012594:	621a      	str	r2, [r3, #32]
 8012596:	e121      	b.n	80127dc <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	68db      	ldr	r3, [r3, #12]
 801259c:	683a      	ldr	r2, [r7, #0]
 801259e:	429a      	cmp	r2, r3
 80125a0:	d908      	bls.n	80125b4 <f_lseek+0x214>
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	7d1b      	ldrb	r3, [r3, #20]
 80125a6:	f003 0302 	and.w	r3, r3, #2
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d102      	bne.n	80125b4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	699b      	ldr	r3, [r3, #24]
 80125b8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	637b      	str	r3, [r7, #52]	; 0x34
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125c2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f000 80b5 	beq.w	8012736 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	895b      	ldrh	r3, [r3, #10]
 80125d0:	461a      	mov	r2, r3
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	899b      	ldrh	r3, [r3, #12]
 80125d6:	fb03 f302 	mul.w	r3, r3, r2
 80125da:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80125dc:	6a3b      	ldr	r3, [r7, #32]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d01b      	beq.n	801261a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	1e5a      	subs	r2, r3, #1
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80125ec:	6a3b      	ldr	r3, [r7, #32]
 80125ee:	1e59      	subs	r1, r3, #1
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d30f      	bcc.n	801261a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80125fa:	6a3b      	ldr	r3, [r7, #32]
 80125fc:	1e5a      	subs	r2, r3, #1
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	425b      	negs	r3, r3
 8012602:	401a      	ands	r2, r3
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	699b      	ldr	r3, [r3, #24]
 801260c:	683a      	ldr	r2, [r7, #0]
 801260e:	1ad3      	subs	r3, r2, r3
 8012610:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	69db      	ldr	r3, [r3, #28]
 8012616:	63bb      	str	r3, [r7, #56]	; 0x38
 8012618:	e022      	b.n	8012660 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012622:	2b00      	cmp	r3, #0
 8012624:	d119      	bne.n	801265a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2100      	movs	r1, #0
 801262a:	4618      	mov	r0, r3
 801262c:	f7fe f84f 	bl	80106ce <create_chain>
 8012630:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012634:	2b01      	cmp	r3, #1
 8012636:	d104      	bne.n	8012642 <f_lseek+0x2a2>
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2202      	movs	r2, #2
 801263c:	755a      	strb	r2, [r3, #21]
 801263e:	2302      	movs	r3, #2
 8012640:	e0ce      	b.n	80127e0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012648:	d104      	bne.n	8012654 <f_lseek+0x2b4>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2201      	movs	r2, #1
 801264e:	755a      	strb	r2, [r3, #21]
 8012650:	2301      	movs	r3, #1
 8012652:	e0c5      	b.n	80127e0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012658:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801265e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012662:	2b00      	cmp	r3, #0
 8012664:	d067      	beq.n	8012736 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8012666:	e03a      	b.n	80126de <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8012668:	683a      	ldr	r2, [r7, #0]
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	1ad3      	subs	r3, r2, r3
 801266e:	603b      	str	r3, [r7, #0]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	699a      	ldr	r2, [r3, #24]
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	441a      	add	r2, r3
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	7d1b      	ldrb	r3, [r3, #20]
 8012680:	f003 0302 	and.w	r3, r3, #2
 8012684:	2b00      	cmp	r3, #0
 8012686:	d00b      	beq.n	80126a0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801268c:	4618      	mov	r0, r3
 801268e:	f7fe f81e 	bl	80106ce <create_chain>
 8012692:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012696:	2b00      	cmp	r3, #0
 8012698:	d108      	bne.n	80126ac <f_lseek+0x30c>
							ofs = 0; break;
 801269a:	2300      	movs	r3, #0
 801269c:	603b      	str	r3, [r7, #0]
 801269e:	e022      	b.n	80126e6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fd fdc6 	bl	8010236 <get_fat>
 80126aa:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80126ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b2:	d104      	bne.n	80126be <f_lseek+0x31e>
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	755a      	strb	r2, [r3, #21]
 80126ba:	2301      	movs	r3, #1
 80126bc:	e090      	b.n	80127e0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80126be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c0:	2b01      	cmp	r3, #1
 80126c2:	d904      	bls.n	80126ce <f_lseek+0x32e>
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	69db      	ldr	r3, [r3, #28]
 80126c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d304      	bcc.n	80126d8 <f_lseek+0x338>
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2202      	movs	r2, #2
 80126d2:	755a      	strb	r2, [r3, #21]
 80126d4:	2302      	movs	r3, #2
 80126d6:	e083      	b.n	80127e0 <f_lseek+0x440>
					fp->clust = clst;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126dc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80126de:	683a      	ldr	r2, [r7, #0]
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d8c0      	bhi.n	8012668 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	699a      	ldr	r2, [r3, #24]
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	441a      	add	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	899b      	ldrh	r3, [r3, #12]
 80126f6:	461a      	mov	r2, r3
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80126fe:	fb02 f201 	mul.w	r2, r2, r1
 8012702:	1a9b      	subs	r3, r3, r2
 8012704:	2b00      	cmp	r3, #0
 8012706:	d016      	beq.n	8012736 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801270c:	4618      	mov	r0, r3
 801270e:	f7fd fd73 	bl	80101f8 <clust2sect>
 8012712:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012716:	2b00      	cmp	r3, #0
 8012718:	d104      	bne.n	8012724 <f_lseek+0x384>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2202      	movs	r2, #2
 801271e:	755a      	strb	r2, [r3, #21]
 8012720:	2302      	movs	r3, #2
 8012722:	e05d      	b.n	80127e0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	899b      	ldrh	r3, [r3, #12]
 8012728:	461a      	mov	r2, r3
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012732:	4413      	add	r3, r2
 8012734:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	699a      	ldr	r2, [r3, #24]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	68db      	ldr	r3, [r3, #12]
 801273e:	429a      	cmp	r2, r3
 8012740:	d90a      	bls.n	8012758 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	699a      	ldr	r2, [r3, #24]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	7d1b      	ldrb	r3, [r3, #20]
 801274e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012752:	b2da      	uxtb	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	699b      	ldr	r3, [r3, #24]
 801275c:	68ba      	ldr	r2, [r7, #8]
 801275e:	8992      	ldrh	r2, [r2, #12]
 8012760:	fbb3 f1f2 	udiv	r1, r3, r2
 8012764:	fb02 f201 	mul.w	r2, r2, r1
 8012768:	1a9b      	subs	r3, r3, r2
 801276a:	2b00      	cmp	r3, #0
 801276c:	d036      	beq.n	80127dc <f_lseek+0x43c>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6a1b      	ldr	r3, [r3, #32]
 8012772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012774:	429a      	cmp	r2, r3
 8012776:	d031      	beq.n	80127dc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	7d1b      	ldrb	r3, [r3, #20]
 801277c:	b25b      	sxtb	r3, r3
 801277e:	2b00      	cmp	r3, #0
 8012780:	da18      	bge.n	80127b4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	7858      	ldrb	r0, [r3, #1]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6a1a      	ldr	r2, [r3, #32]
 8012790:	2301      	movs	r3, #1
 8012792:	f7fd f9a5 	bl	800fae0 <disk_write>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d004      	beq.n	80127a6 <f_lseek+0x406>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2201      	movs	r2, #1
 80127a0:	755a      	strb	r2, [r3, #21]
 80127a2:	2301      	movs	r3, #1
 80127a4:	e01c      	b.n	80127e0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	7d1b      	ldrb	r3, [r3, #20]
 80127aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127ae:	b2da      	uxtb	r2, r3
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	7858      	ldrb	r0, [r3, #1]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127be:	2301      	movs	r3, #1
 80127c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127c2:	f7fd f96d 	bl	800faa0 <disk_read>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d004      	beq.n	80127d6 <f_lseek+0x436>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2201      	movs	r2, #1
 80127d0:	755a      	strb	r2, [r3, #21]
 80127d2:	2301      	movs	r3, #1
 80127d4:	e004      	b.n	80127e0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127da:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80127dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3740      	adds	r7, #64	; 0x40
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b09e      	sub	sp, #120	; 0x78
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80127f0:	2300      	movs	r3, #0
 80127f2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80127f4:	f107 010c 	add.w	r1, r7, #12
 80127f8:	1d3b      	adds	r3, r7, #4
 80127fa:	2202      	movs	r2, #2
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7fe fd17 	bl	8011230 <find_volume>
 8012802:	4603      	mov	r3, r0
 8012804:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 801280c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012810:	2b00      	cmp	r3, #0
 8012812:	f040 80a4 	bne.w	801295e <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801281c:	4611      	mov	r1, r2
 801281e:	4618      	mov	r0, r3
 8012820:	f7fe fbd6 	bl	8010fd0 <follow_path>
 8012824:	4603      	mov	r3, r0
 8012826:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801282a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801282e:	2b00      	cmp	r3, #0
 8012830:	d108      	bne.n	8012844 <f_unlink+0x5c>
 8012832:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8012836:	f003 0320 	and.w	r3, r3, #32
 801283a:	2b00      	cmp	r3, #0
 801283c:	d002      	beq.n	8012844 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801283e:	2306      	movs	r3, #6
 8012840:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8012844:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012848:	2b00      	cmp	r3, #0
 801284a:	d108      	bne.n	801285e <f_unlink+0x76>
 801284c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012850:	2102      	movs	r1, #2
 8012852:	4618      	mov	r0, r3
 8012854:	f7fd fa82 	bl	800fd5c <chk_lock>
 8012858:	4603      	mov	r3, r0
 801285a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801285e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012862:	2b00      	cmp	r3, #0
 8012864:	d17b      	bne.n	801295e <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012866:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801286a:	b25b      	sxtb	r3, r3
 801286c:	2b00      	cmp	r3, #0
 801286e:	da03      	bge.n	8012878 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8012870:	2306      	movs	r3, #6
 8012872:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012876:	e008      	b.n	801288a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8012878:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801287c:	f003 0301 	and.w	r3, r3, #1
 8012880:	2b00      	cmp	r3, #0
 8012882:	d002      	beq.n	801288a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8012884:	2307      	movs	r3, #7
 8012886:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801288a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801288e:	2b00      	cmp	r3, #0
 8012890:	d13d      	bne.n	801290e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012896:	4611      	mov	r1, r2
 8012898:	4618      	mov	r0, r3
 801289a:	f7fe f98e 	bl	8010bba <ld_clust>
 801289e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80128a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80128a4:	f003 0310 	and.w	r3, r3, #16
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d030      	beq.n	801290e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	699b      	ldr	r3, [r3, #24]
 80128b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d103      	bne.n	80128be <f_unlink+0xd6>
						res = FR_DENIED;
 80128b6:	2307      	movs	r3, #7
 80128b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80128bc:	e027      	b.n	801290e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80128c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128c4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80128c6:	f107 0310 	add.w	r3, r7, #16
 80128ca:	2100      	movs	r1, #0
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7fd ffce 	bl	801086e <dir_sdi>
 80128d2:	4603      	mov	r3, r0
 80128d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80128d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d116      	bne.n	801290e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80128e0:	f107 0310 	add.w	r3, r7, #16
 80128e4:	2100      	movs	r1, #0
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fe f9a6 	bl	8010c38 <dir_read>
 80128ec:	4603      	mov	r3, r0
 80128ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80128f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d102      	bne.n	8012900 <f_unlink+0x118>
 80128fa:	2307      	movs	r3, #7
 80128fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8012900:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012904:	2b04      	cmp	r3, #4
 8012906:	d102      	bne.n	801290e <f_unlink+0x126>
 8012908:	2300      	movs	r3, #0
 801290a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801290e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012912:	2b00      	cmp	r3, #0
 8012914:	d123      	bne.n	801295e <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8012916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801291a:	4618      	mov	r0, r3
 801291c:	f7fe fa70 	bl	8010e00 <dir_remove>
 8012920:	4603      	mov	r3, r0
 8012922:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8012926:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801292a:	2b00      	cmp	r3, #0
 801292c:	d10c      	bne.n	8012948 <f_unlink+0x160>
 801292e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012930:	2b00      	cmp	r3, #0
 8012932:	d009      	beq.n	8012948 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8012934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012938:	2200      	movs	r2, #0
 801293a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801293c:	4618      	mov	r0, r3
 801293e:	f7fd fe61 	bl	8010604 <remove_chain>
 8012942:	4603      	mov	r3, r0
 8012944:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8012948:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801294c:	2b00      	cmp	r3, #0
 801294e:	d106      	bne.n	801295e <f_unlink+0x176>
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	4618      	mov	r0, r3
 8012954:	f7fd fbe0 	bl	8010118 <sync_fs>
 8012958:	4603      	mov	r3, r0
 801295a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801295e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012962:	4618      	mov	r0, r3
 8012964:	3778      	adds	r7, #120	; 0x78
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
	...

0801296c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b096      	sub	sp, #88	; 0x58
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012974:	f107 0108 	add.w	r1, r7, #8
 8012978:	1d3b      	adds	r3, r7, #4
 801297a:	2202      	movs	r2, #2
 801297c:	4618      	mov	r0, r3
 801297e:	f7fe fc57 	bl	8011230 <find_volume>
 8012982:	4603      	mov	r3, r0
 8012984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801298c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012990:	2b00      	cmp	r3, #0
 8012992:	f040 80fe 	bne.w	8012b92 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012996:	687a      	ldr	r2, [r7, #4]
 8012998:	f107 030c 	add.w	r3, r7, #12
 801299c:	4611      	mov	r1, r2
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fe fb16 	bl	8010fd0 <follow_path>
 80129a4:	4603      	mov	r3, r0
 80129a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80129aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d102      	bne.n	80129b8 <f_mkdir+0x4c>
 80129b2:	2308      	movs	r3, #8
 80129b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80129b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129bc:	2b04      	cmp	r3, #4
 80129be:	d108      	bne.n	80129d2 <f_mkdir+0x66>
 80129c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80129c4:	f003 0320 	and.w	r3, r3, #32
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d002      	beq.n	80129d2 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80129cc:	2306      	movs	r3, #6
 80129ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80129d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129d6:	2b04      	cmp	r3, #4
 80129d8:	f040 80db 	bne.w	8012b92 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80129dc:	f107 030c 	add.w	r3, r7, #12
 80129e0:	2100      	movs	r1, #0
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7fd fe73 	bl	80106ce <create_chain>
 80129e8:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	895b      	ldrh	r3, [r3, #10]
 80129ee:	461a      	mov	r2, r3
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	899b      	ldrh	r3, [r3, #12]
 80129f4:	fb03 f302 	mul.w	r3, r3, r2
 80129f8:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80129fa:	2300      	movs	r3, #0
 80129fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d102      	bne.n	8012a0c <f_mkdir+0xa0>
 8012a06:	2307      	movs	r3, #7
 8012a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a0e:	2b01      	cmp	r3, #1
 8012a10:	d102      	bne.n	8012a18 <f_mkdir+0xac>
 8012a12:	2302      	movs	r3, #2
 8012a14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a1e:	d102      	bne.n	8012a26 <f_mkdir+0xba>
 8012a20:	2301      	movs	r3, #1
 8012a22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012a26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d106      	bne.n	8012a3c <f_mkdir+0xd0>
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7fd faff 	bl	8010034 <sync_window>
 8012a36:	4603      	mov	r3, r0
 8012a38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012a3c:	4b58      	ldr	r3, [pc, #352]	; (8012ba0 <f_mkdir+0x234>)
 8012a3e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d16c      	bne.n	8012b22 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7fd fbd3 	bl	80101f8 <clust2sect>
 8012a52:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	3338      	adds	r3, #56	; 0x38
 8012a58:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	899b      	ldrh	r3, [r3, #12]
 8012a5e:	461a      	mov	r2, r3
 8012a60:	2100      	movs	r1, #0
 8012a62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012a64:	f7fd f91d 	bl	800fca2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012a68:	220b      	movs	r2, #11
 8012a6a:	2120      	movs	r1, #32
 8012a6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012a6e:	f7fd f918 	bl	800fca2 <mem_set>
					dir[DIR_Name] = '.';
 8012a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a74:	222e      	movs	r2, #46	; 0x2e
 8012a76:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a7a:	330b      	adds	r3, #11
 8012a7c:	2210      	movs	r2, #16
 8012a7e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a82:	3316      	adds	r3, #22
 8012a84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fd f8be 	bl	800fc08 <st_dword>
					st_clust(fs, dir, dcl);
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7fe f8b0 	bl	8010bf8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a9a:	3320      	adds	r3, #32
 8012a9c:	2220      	movs	r2, #32
 8012a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7fd f8dd 	bl	800fc60 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aa8:	3321      	adds	r3, #33	; 0x21
 8012aaa:	222e      	movs	r2, #46	; 0x2e
 8012aac:	701a      	strb	r2, [r3, #0]
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	2b03      	cmp	r3, #3
 8012ab8:	d106      	bne.n	8012ac8 <f_mkdir+0x15c>
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d101      	bne.n	8012ac8 <f_mkdir+0x15c>
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012ac8:	68b8      	ldr	r0, [r7, #8]
 8012aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012acc:	3320      	adds	r3, #32
 8012ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	f7fe f891 	bl	8010bf8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	895b      	ldrh	r3, [r3, #10]
 8012ada:	653b      	str	r3, [r7, #80]	; 0x50
 8012adc:	e01c      	b.n	8012b18 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8012ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ae0:	1c5a      	adds	r2, r3, #1
 8012ae2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	2201      	movs	r2, #1
 8012aec:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7fd fa9f 	bl	8010034 <sync_window>
 8012af6:	4603      	mov	r3, r0
 8012af8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8012afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d10d      	bne.n	8012b20 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	899b      	ldrh	r3, [r3, #12]
 8012b08:	461a      	mov	r2, r3
 8012b0a:	2100      	movs	r1, #0
 8012b0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012b0e:	f7fd f8c8 	bl	800fca2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b14:	3b01      	subs	r3, #1
 8012b16:	653b      	str	r3, [r7, #80]	; 0x50
 8012b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d1df      	bne.n	8012ade <f_mkdir+0x172>
 8012b1e:	e000      	b.n	8012b22 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8012b20:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012b22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d107      	bne.n	8012b3a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8012b2a:	f107 030c 	add.w	r3, r7, #12
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7fe f934 	bl	8010d9c <dir_register>
 8012b34:	4603      	mov	r3, r0
 8012b36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8012b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d120      	bne.n	8012b84 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b44:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b48:	3316      	adds	r3, #22
 8012b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7fd f85b 	bl	800fc08 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7fe f84d 	bl	8010bf8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b60:	330b      	adds	r3, #11
 8012b62:	2210      	movs	r2, #16
 8012b64:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	2201      	movs	r2, #1
 8012b6a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d10e      	bne.n	8012b92 <f_mkdir+0x226>
					res = sync_fs(fs);
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7fd face 	bl	8010118 <sync_fs>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8012b82:	e006      	b.n	8012b92 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012b84:	f107 030c 	add.w	r3, r7, #12
 8012b88:	2200      	movs	r2, #0
 8012b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fd fd39 	bl	8010604 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012b92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3758      	adds	r7, #88	; 0x58
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	274a0000 	.word	0x274a0000

08012ba4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b088      	sub	sp, #32
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012bb8:	e017      	b.n	8012bea <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8012bba:	f107 0310 	add.w	r3, r7, #16
 8012bbe:	f107 0114 	add.w	r1, r7, #20
 8012bc2:	2201      	movs	r2, #1
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7ff f803 	bl	8011bd0 <f_read>
		if (rc != 1) break;
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d112      	bne.n	8012bf6 <f_gets+0x52>
		c = s[0];
 8012bd0:	7d3b      	ldrb	r3, [r7, #20]
 8012bd2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8012bd4:	69bb      	ldr	r3, [r7, #24]
 8012bd6:	1c5a      	adds	r2, r3, #1
 8012bd8:	61ba      	str	r2, [r7, #24]
 8012bda:	7dfa      	ldrb	r2, [r7, #23]
 8012bdc:	701a      	strb	r2, [r3, #0]
		n++;
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	3301      	adds	r3, #1
 8012be2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8012be4:	7dfb      	ldrb	r3, [r7, #23]
 8012be6:	2b0a      	cmp	r3, #10
 8012be8:	d007      	beq.n	8012bfa <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	3b01      	subs	r3, #1
 8012bee:	69fa      	ldr	r2, [r7, #28]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	dbe2      	blt.n	8012bba <f_gets+0x16>
 8012bf4:	e002      	b.n	8012bfc <f_gets+0x58>
		if (rc != 1) break;
 8012bf6:	bf00      	nop
 8012bf8:	e000      	b.n	8012bfc <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8012bfa:	bf00      	nop
	}
	*p = 0;
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8012c02:	69fb      	ldr	r3, [r7, #28]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d001      	beq.n	8012c0c <f_gets+0x68>
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	e000      	b.n	8012c0e <f_gets+0x6a>
 8012c0c:	2300      	movs	r3, #0
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	3720      	adds	r7, #32
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
	...

08012c18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b087      	sub	sp, #28
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	60b9      	str	r1, [r7, #8]
 8012c22:	4613      	mov	r3, r2
 8012c24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012c26:	2301      	movs	r3, #1
 8012c28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012c2e:	4b1f      	ldr	r3, [pc, #124]	; (8012cac <FATFS_LinkDriverEx+0x94>)
 8012c30:	7a5b      	ldrb	r3, [r3, #9]
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d131      	bne.n	8012c9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012c38:	4b1c      	ldr	r3, [pc, #112]	; (8012cac <FATFS_LinkDriverEx+0x94>)
 8012c3a:	7a5b      	ldrb	r3, [r3, #9]
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	461a      	mov	r2, r3
 8012c40:	4b1a      	ldr	r3, [pc, #104]	; (8012cac <FATFS_LinkDriverEx+0x94>)
 8012c42:	2100      	movs	r1, #0
 8012c44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012c46:	4b19      	ldr	r3, [pc, #100]	; (8012cac <FATFS_LinkDriverEx+0x94>)
 8012c48:	7a5b      	ldrb	r3, [r3, #9]
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	4a17      	ldr	r2, [pc, #92]	; (8012cac <FATFS_LinkDriverEx+0x94>)
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	4413      	add	r3, r2
 8012c52:	68fa      	ldr	r2, [r7, #12]
 8012c54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012c56:	4b15      	ldr	r3, [pc, #84]	; (8012cac <FATFS_LinkDriverEx+0x94>)
 8012c58:	7a5b      	ldrb	r3, [r3, #9]
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	4b13      	ldr	r3, [pc, #76]	; (8012cac <FATFS_LinkDriverEx+0x94>)
 8012c60:	4413      	add	r3, r2
 8012c62:	79fa      	ldrb	r2, [r7, #7]
 8012c64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012c66:	4b11      	ldr	r3, [pc, #68]	; (8012cac <FATFS_LinkDriverEx+0x94>)
 8012c68:	7a5b      	ldrb	r3, [r3, #9]
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	1c5a      	adds	r2, r3, #1
 8012c6e:	b2d1      	uxtb	r1, r2
 8012c70:	4a0e      	ldr	r2, [pc, #56]	; (8012cac <FATFS_LinkDriverEx+0x94>)
 8012c72:	7251      	strb	r1, [r2, #9]
 8012c74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012c76:	7dbb      	ldrb	r3, [r7, #22]
 8012c78:	3330      	adds	r3, #48	; 0x30
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	3301      	adds	r3, #1
 8012c84:	223a      	movs	r2, #58	; 0x3a
 8012c86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	3302      	adds	r3, #2
 8012c8c:	222f      	movs	r2, #47	; 0x2f
 8012c8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	3303      	adds	r3, #3
 8012c94:	2200      	movs	r2, #0
 8012c96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012c98:	2300      	movs	r3, #0
 8012c9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	371c      	adds	r7, #28
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr
 8012caa:	bf00      	nop
 8012cac:	2003c488 	.word	0x2003c488

08012cb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012cba:	2200      	movs	r2, #0
 8012cbc:	6839      	ldr	r1, [r7, #0]
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f7ff ffaa 	bl	8012c18 <FATFS_LinkDriverEx>
 8012cc4:	4603      	mov	r3, r0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3708      	adds	r7, #8
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}

08012cce <__cxa_guard_acquire>:
 8012cce:	6803      	ldr	r3, [r0, #0]
 8012cd0:	07db      	lsls	r3, r3, #31
 8012cd2:	d406      	bmi.n	8012ce2 <__cxa_guard_acquire+0x14>
 8012cd4:	7843      	ldrb	r3, [r0, #1]
 8012cd6:	b103      	cbz	r3, 8012cda <__cxa_guard_acquire+0xc>
 8012cd8:	deff      	udf	#255	; 0xff
 8012cda:	2301      	movs	r3, #1
 8012cdc:	7043      	strb	r3, [r0, #1]
 8012cde:	4618      	mov	r0, r3
 8012ce0:	4770      	bx	lr
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	4770      	bx	lr

08012ce6 <__cxa_guard_release>:
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	6003      	str	r3, [r0, #0]
 8012cea:	4770      	bx	lr
 8012cec:	0000      	movs	r0, r0
	...

08012cf0 <cos>:
 8012cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cf2:	ec51 0b10 	vmov	r0, r1, d0
 8012cf6:	4a1e      	ldr	r2, [pc, #120]	; (8012d70 <cos+0x80>)
 8012cf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012cfc:	4293      	cmp	r3, r2
 8012cfe:	dc06      	bgt.n	8012d0e <cos+0x1e>
 8012d00:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012d68 <cos+0x78>
 8012d04:	f000 fa74 	bl	80131f0 <__kernel_cos>
 8012d08:	ec51 0b10 	vmov	r0, r1, d0
 8012d0c:	e007      	b.n	8012d1e <cos+0x2e>
 8012d0e:	4a19      	ldr	r2, [pc, #100]	; (8012d74 <cos+0x84>)
 8012d10:	4293      	cmp	r3, r2
 8012d12:	dd09      	ble.n	8012d28 <cos+0x38>
 8012d14:	ee10 2a10 	vmov	r2, s0
 8012d18:	460b      	mov	r3, r1
 8012d1a:	f7ed facd 	bl	80002b8 <__aeabi_dsub>
 8012d1e:	ec41 0b10 	vmov	d0, r0, r1
 8012d22:	b005      	add	sp, #20
 8012d24:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d28:	4668      	mov	r0, sp
 8012d2a:	f000 f86d 	bl	8012e08 <__ieee754_rem_pio2>
 8012d2e:	f000 0003 	and.w	r0, r0, #3
 8012d32:	2801      	cmp	r0, #1
 8012d34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d38:	ed9d 0b00 	vldr	d0, [sp]
 8012d3c:	d007      	beq.n	8012d4e <cos+0x5e>
 8012d3e:	2802      	cmp	r0, #2
 8012d40:	d00e      	beq.n	8012d60 <cos+0x70>
 8012d42:	2800      	cmp	r0, #0
 8012d44:	d0de      	beq.n	8012d04 <cos+0x14>
 8012d46:	2001      	movs	r0, #1
 8012d48:	f000 fe5a 	bl	8013a00 <__kernel_sin>
 8012d4c:	e7dc      	b.n	8012d08 <cos+0x18>
 8012d4e:	f000 fe57 	bl	8013a00 <__kernel_sin>
 8012d52:	ec53 2b10 	vmov	r2, r3, d0
 8012d56:	ee10 0a10 	vmov	r0, s0
 8012d5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012d5e:	e7de      	b.n	8012d1e <cos+0x2e>
 8012d60:	f000 fa46 	bl	80131f0 <__kernel_cos>
 8012d64:	e7f5      	b.n	8012d52 <cos+0x62>
 8012d66:	bf00      	nop
	...
 8012d70:	3fe921fb 	.word	0x3fe921fb
 8012d74:	7fefffff 	.word	0x7fefffff

08012d78 <sin>:
 8012d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d7a:	ec51 0b10 	vmov	r0, r1, d0
 8012d7e:	4a20      	ldr	r2, [pc, #128]	; (8012e00 <sin+0x88>)
 8012d80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012d84:	4293      	cmp	r3, r2
 8012d86:	dc07      	bgt.n	8012d98 <sin+0x20>
 8012d88:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012df8 <sin+0x80>
 8012d8c:	2000      	movs	r0, #0
 8012d8e:	f000 fe37 	bl	8013a00 <__kernel_sin>
 8012d92:	ec51 0b10 	vmov	r0, r1, d0
 8012d96:	e007      	b.n	8012da8 <sin+0x30>
 8012d98:	4a1a      	ldr	r2, [pc, #104]	; (8012e04 <sin+0x8c>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	dd09      	ble.n	8012db2 <sin+0x3a>
 8012d9e:	ee10 2a10 	vmov	r2, s0
 8012da2:	460b      	mov	r3, r1
 8012da4:	f7ed fa88 	bl	80002b8 <__aeabi_dsub>
 8012da8:	ec41 0b10 	vmov	d0, r0, r1
 8012dac:	b005      	add	sp, #20
 8012dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8012db2:	4668      	mov	r0, sp
 8012db4:	f000 f828 	bl	8012e08 <__ieee754_rem_pio2>
 8012db8:	f000 0003 	and.w	r0, r0, #3
 8012dbc:	2801      	cmp	r0, #1
 8012dbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dc2:	ed9d 0b00 	vldr	d0, [sp]
 8012dc6:	d004      	beq.n	8012dd2 <sin+0x5a>
 8012dc8:	2802      	cmp	r0, #2
 8012dca:	d005      	beq.n	8012dd8 <sin+0x60>
 8012dcc:	b970      	cbnz	r0, 8012dec <sin+0x74>
 8012dce:	2001      	movs	r0, #1
 8012dd0:	e7dd      	b.n	8012d8e <sin+0x16>
 8012dd2:	f000 fa0d 	bl	80131f0 <__kernel_cos>
 8012dd6:	e7dc      	b.n	8012d92 <sin+0x1a>
 8012dd8:	2001      	movs	r0, #1
 8012dda:	f000 fe11 	bl	8013a00 <__kernel_sin>
 8012dde:	ec53 2b10 	vmov	r2, r3, d0
 8012de2:	ee10 0a10 	vmov	r0, s0
 8012de6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012dea:	e7dd      	b.n	8012da8 <sin+0x30>
 8012dec:	f000 fa00 	bl	80131f0 <__kernel_cos>
 8012df0:	e7f5      	b.n	8012dde <sin+0x66>
 8012df2:	bf00      	nop
 8012df4:	f3af 8000 	nop.w
	...
 8012e00:	3fe921fb 	.word	0x3fe921fb
 8012e04:	7fefffff 	.word	0x7fefffff

08012e08 <__ieee754_rem_pio2>:
 8012e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e0c:	ec57 6b10 	vmov	r6, r7, d0
 8012e10:	4bc3      	ldr	r3, [pc, #780]	; (8013120 <__ieee754_rem_pio2+0x318>)
 8012e12:	b08d      	sub	sp, #52	; 0x34
 8012e14:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012e18:	4598      	cmp	r8, r3
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	9704      	str	r7, [sp, #16]
 8012e1e:	dc07      	bgt.n	8012e30 <__ieee754_rem_pio2+0x28>
 8012e20:	2200      	movs	r2, #0
 8012e22:	2300      	movs	r3, #0
 8012e24:	ed84 0b00 	vstr	d0, [r4]
 8012e28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012e2c:	2500      	movs	r5, #0
 8012e2e:	e027      	b.n	8012e80 <__ieee754_rem_pio2+0x78>
 8012e30:	4bbc      	ldr	r3, [pc, #752]	; (8013124 <__ieee754_rem_pio2+0x31c>)
 8012e32:	4598      	cmp	r8, r3
 8012e34:	dc75      	bgt.n	8012f22 <__ieee754_rem_pio2+0x11a>
 8012e36:	9b04      	ldr	r3, [sp, #16]
 8012e38:	4dbb      	ldr	r5, [pc, #748]	; (8013128 <__ieee754_rem_pio2+0x320>)
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	ee10 0a10 	vmov	r0, s0
 8012e40:	a3a9      	add	r3, pc, #676	; (adr r3, 80130e8 <__ieee754_rem_pio2+0x2e0>)
 8012e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e46:	4639      	mov	r1, r7
 8012e48:	dd36      	ble.n	8012eb8 <__ieee754_rem_pio2+0xb0>
 8012e4a:	f7ed fa35 	bl	80002b8 <__aeabi_dsub>
 8012e4e:	45a8      	cmp	r8, r5
 8012e50:	4606      	mov	r6, r0
 8012e52:	460f      	mov	r7, r1
 8012e54:	d018      	beq.n	8012e88 <__ieee754_rem_pio2+0x80>
 8012e56:	a3a6      	add	r3, pc, #664	; (adr r3, 80130f0 <__ieee754_rem_pio2+0x2e8>)
 8012e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e5c:	f7ed fa2c 	bl	80002b8 <__aeabi_dsub>
 8012e60:	4602      	mov	r2, r0
 8012e62:	460b      	mov	r3, r1
 8012e64:	e9c4 2300 	strd	r2, r3, [r4]
 8012e68:	4630      	mov	r0, r6
 8012e6a:	4639      	mov	r1, r7
 8012e6c:	f7ed fa24 	bl	80002b8 <__aeabi_dsub>
 8012e70:	a39f      	add	r3, pc, #636	; (adr r3, 80130f0 <__ieee754_rem_pio2+0x2e8>)
 8012e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e76:	f7ed fa1f 	bl	80002b8 <__aeabi_dsub>
 8012e7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e7e:	2501      	movs	r5, #1
 8012e80:	4628      	mov	r0, r5
 8012e82:	b00d      	add	sp, #52	; 0x34
 8012e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e88:	a39b      	add	r3, pc, #620	; (adr r3, 80130f8 <__ieee754_rem_pio2+0x2f0>)
 8012e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8e:	f7ed fa13 	bl	80002b8 <__aeabi_dsub>
 8012e92:	a39b      	add	r3, pc, #620	; (adr r3, 8013100 <__ieee754_rem_pio2+0x2f8>)
 8012e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e98:	4606      	mov	r6, r0
 8012e9a:	460f      	mov	r7, r1
 8012e9c:	f7ed fa0c 	bl	80002b8 <__aeabi_dsub>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	e9c4 2300 	strd	r2, r3, [r4]
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	4639      	mov	r1, r7
 8012eac:	f7ed fa04 	bl	80002b8 <__aeabi_dsub>
 8012eb0:	a393      	add	r3, pc, #588	; (adr r3, 8013100 <__ieee754_rem_pio2+0x2f8>)
 8012eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb6:	e7de      	b.n	8012e76 <__ieee754_rem_pio2+0x6e>
 8012eb8:	f7ed fa00 	bl	80002bc <__adddf3>
 8012ebc:	45a8      	cmp	r8, r5
 8012ebe:	4606      	mov	r6, r0
 8012ec0:	460f      	mov	r7, r1
 8012ec2:	d016      	beq.n	8012ef2 <__ieee754_rem_pio2+0xea>
 8012ec4:	a38a      	add	r3, pc, #552	; (adr r3, 80130f0 <__ieee754_rem_pio2+0x2e8>)
 8012ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eca:	f7ed f9f7 	bl	80002bc <__adddf3>
 8012ece:	4602      	mov	r2, r0
 8012ed0:	460b      	mov	r3, r1
 8012ed2:	e9c4 2300 	strd	r2, r3, [r4]
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	4639      	mov	r1, r7
 8012eda:	f7ed f9ed 	bl	80002b8 <__aeabi_dsub>
 8012ede:	a384      	add	r3, pc, #528	; (adr r3, 80130f0 <__ieee754_rem_pio2+0x2e8>)
 8012ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee4:	f7ed f9ea 	bl	80002bc <__adddf3>
 8012ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8012eec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012ef0:	e7c6      	b.n	8012e80 <__ieee754_rem_pio2+0x78>
 8012ef2:	a381      	add	r3, pc, #516	; (adr r3, 80130f8 <__ieee754_rem_pio2+0x2f0>)
 8012ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef8:	f7ed f9e0 	bl	80002bc <__adddf3>
 8012efc:	a380      	add	r3, pc, #512	; (adr r3, 8013100 <__ieee754_rem_pio2+0x2f8>)
 8012efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f02:	4606      	mov	r6, r0
 8012f04:	460f      	mov	r7, r1
 8012f06:	f7ed f9d9 	bl	80002bc <__adddf3>
 8012f0a:	4602      	mov	r2, r0
 8012f0c:	460b      	mov	r3, r1
 8012f0e:	e9c4 2300 	strd	r2, r3, [r4]
 8012f12:	4630      	mov	r0, r6
 8012f14:	4639      	mov	r1, r7
 8012f16:	f7ed f9cf 	bl	80002b8 <__aeabi_dsub>
 8012f1a:	a379      	add	r3, pc, #484	; (adr r3, 8013100 <__ieee754_rem_pio2+0x2f8>)
 8012f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f20:	e7e0      	b.n	8012ee4 <__ieee754_rem_pio2+0xdc>
 8012f22:	4b82      	ldr	r3, [pc, #520]	; (801312c <__ieee754_rem_pio2+0x324>)
 8012f24:	4598      	cmp	r8, r3
 8012f26:	f300 80d0 	bgt.w	80130ca <__ieee754_rem_pio2+0x2c2>
 8012f2a:	f000 fe23 	bl	8013b74 <fabs>
 8012f2e:	ec57 6b10 	vmov	r6, r7, d0
 8012f32:	ee10 0a10 	vmov	r0, s0
 8012f36:	a374      	add	r3, pc, #464	; (adr r3, 8013108 <__ieee754_rem_pio2+0x300>)
 8012f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3c:	4639      	mov	r1, r7
 8012f3e:	f7ed fb73 	bl	8000628 <__aeabi_dmul>
 8012f42:	2200      	movs	r2, #0
 8012f44:	4b7a      	ldr	r3, [pc, #488]	; (8013130 <__ieee754_rem_pio2+0x328>)
 8012f46:	f7ed f9b9 	bl	80002bc <__adddf3>
 8012f4a:	f7ed fe1d 	bl	8000b88 <__aeabi_d2iz>
 8012f4e:	4605      	mov	r5, r0
 8012f50:	f7ed fb00 	bl	8000554 <__aeabi_i2d>
 8012f54:	a364      	add	r3, pc, #400	; (adr r3, 80130e8 <__ieee754_rem_pio2+0x2e0>)
 8012f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f5e:	f7ed fb63 	bl	8000628 <__aeabi_dmul>
 8012f62:	4602      	mov	r2, r0
 8012f64:	460b      	mov	r3, r1
 8012f66:	4630      	mov	r0, r6
 8012f68:	4639      	mov	r1, r7
 8012f6a:	f7ed f9a5 	bl	80002b8 <__aeabi_dsub>
 8012f6e:	a360      	add	r3, pc, #384	; (adr r3, 80130f0 <__ieee754_rem_pio2+0x2e8>)
 8012f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f74:	4682      	mov	sl, r0
 8012f76:	468b      	mov	fp, r1
 8012f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f7c:	f7ed fb54 	bl	8000628 <__aeabi_dmul>
 8012f80:	2d1f      	cmp	r5, #31
 8012f82:	4606      	mov	r6, r0
 8012f84:	460f      	mov	r7, r1
 8012f86:	dc0c      	bgt.n	8012fa2 <__ieee754_rem_pio2+0x19a>
 8012f88:	1e6a      	subs	r2, r5, #1
 8012f8a:	4b6a      	ldr	r3, [pc, #424]	; (8013134 <__ieee754_rem_pio2+0x32c>)
 8012f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f90:	4543      	cmp	r3, r8
 8012f92:	d006      	beq.n	8012fa2 <__ieee754_rem_pio2+0x19a>
 8012f94:	4632      	mov	r2, r6
 8012f96:	463b      	mov	r3, r7
 8012f98:	4650      	mov	r0, sl
 8012f9a:	4659      	mov	r1, fp
 8012f9c:	f7ed f98c 	bl	80002b8 <__aeabi_dsub>
 8012fa0:	e00e      	b.n	8012fc0 <__ieee754_rem_pio2+0x1b8>
 8012fa2:	4632      	mov	r2, r6
 8012fa4:	463b      	mov	r3, r7
 8012fa6:	4650      	mov	r0, sl
 8012fa8:	4659      	mov	r1, fp
 8012faa:	f7ed f985 	bl	80002b8 <__aeabi_dsub>
 8012fae:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012fb2:	9305      	str	r3, [sp, #20]
 8012fb4:	9a05      	ldr	r2, [sp, #20]
 8012fb6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012fba:	1ad3      	subs	r3, r2, r3
 8012fbc:	2b10      	cmp	r3, #16
 8012fbe:	dc02      	bgt.n	8012fc6 <__ieee754_rem_pio2+0x1be>
 8012fc0:	e9c4 0100 	strd	r0, r1, [r4]
 8012fc4:	e039      	b.n	801303a <__ieee754_rem_pio2+0x232>
 8012fc6:	a34c      	add	r3, pc, #304	; (adr r3, 80130f8 <__ieee754_rem_pio2+0x2f0>)
 8012fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fd0:	f7ed fb2a 	bl	8000628 <__aeabi_dmul>
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	460f      	mov	r7, r1
 8012fd8:	4602      	mov	r2, r0
 8012fda:	460b      	mov	r3, r1
 8012fdc:	4650      	mov	r0, sl
 8012fde:	4659      	mov	r1, fp
 8012fe0:	f7ed f96a 	bl	80002b8 <__aeabi_dsub>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	460b      	mov	r3, r1
 8012fe8:	4680      	mov	r8, r0
 8012fea:	4689      	mov	r9, r1
 8012fec:	4650      	mov	r0, sl
 8012fee:	4659      	mov	r1, fp
 8012ff0:	f7ed f962 	bl	80002b8 <__aeabi_dsub>
 8012ff4:	4632      	mov	r2, r6
 8012ff6:	463b      	mov	r3, r7
 8012ff8:	f7ed f95e 	bl	80002b8 <__aeabi_dsub>
 8012ffc:	a340      	add	r3, pc, #256	; (adr r3, 8013100 <__ieee754_rem_pio2+0x2f8>)
 8012ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013002:	4606      	mov	r6, r0
 8013004:	460f      	mov	r7, r1
 8013006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801300a:	f7ed fb0d 	bl	8000628 <__aeabi_dmul>
 801300e:	4632      	mov	r2, r6
 8013010:	463b      	mov	r3, r7
 8013012:	f7ed f951 	bl	80002b8 <__aeabi_dsub>
 8013016:	4602      	mov	r2, r0
 8013018:	460b      	mov	r3, r1
 801301a:	4606      	mov	r6, r0
 801301c:	460f      	mov	r7, r1
 801301e:	4640      	mov	r0, r8
 8013020:	4649      	mov	r1, r9
 8013022:	f7ed f949 	bl	80002b8 <__aeabi_dsub>
 8013026:	9a05      	ldr	r2, [sp, #20]
 8013028:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801302c:	1ad3      	subs	r3, r2, r3
 801302e:	2b31      	cmp	r3, #49	; 0x31
 8013030:	dc20      	bgt.n	8013074 <__ieee754_rem_pio2+0x26c>
 8013032:	e9c4 0100 	strd	r0, r1, [r4]
 8013036:	46c2      	mov	sl, r8
 8013038:	46cb      	mov	fp, r9
 801303a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801303e:	4650      	mov	r0, sl
 8013040:	4642      	mov	r2, r8
 8013042:	464b      	mov	r3, r9
 8013044:	4659      	mov	r1, fp
 8013046:	f7ed f937 	bl	80002b8 <__aeabi_dsub>
 801304a:	463b      	mov	r3, r7
 801304c:	4632      	mov	r2, r6
 801304e:	f7ed f933 	bl	80002b8 <__aeabi_dsub>
 8013052:	9b04      	ldr	r3, [sp, #16]
 8013054:	2b00      	cmp	r3, #0
 8013056:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801305a:	f6bf af11 	bge.w	8012e80 <__ieee754_rem_pio2+0x78>
 801305e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013062:	6063      	str	r3, [r4, #4]
 8013064:	f8c4 8000 	str.w	r8, [r4]
 8013068:	60a0      	str	r0, [r4, #8]
 801306a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801306e:	60e3      	str	r3, [r4, #12]
 8013070:	426d      	negs	r5, r5
 8013072:	e705      	b.n	8012e80 <__ieee754_rem_pio2+0x78>
 8013074:	a326      	add	r3, pc, #152	; (adr r3, 8013110 <__ieee754_rem_pio2+0x308>)
 8013076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801307e:	f7ed fad3 	bl	8000628 <__aeabi_dmul>
 8013082:	4606      	mov	r6, r0
 8013084:	460f      	mov	r7, r1
 8013086:	4602      	mov	r2, r0
 8013088:	460b      	mov	r3, r1
 801308a:	4640      	mov	r0, r8
 801308c:	4649      	mov	r1, r9
 801308e:	f7ed f913 	bl	80002b8 <__aeabi_dsub>
 8013092:	4602      	mov	r2, r0
 8013094:	460b      	mov	r3, r1
 8013096:	4682      	mov	sl, r0
 8013098:	468b      	mov	fp, r1
 801309a:	4640      	mov	r0, r8
 801309c:	4649      	mov	r1, r9
 801309e:	f7ed f90b 	bl	80002b8 <__aeabi_dsub>
 80130a2:	4632      	mov	r2, r6
 80130a4:	463b      	mov	r3, r7
 80130a6:	f7ed f907 	bl	80002b8 <__aeabi_dsub>
 80130aa:	a31b      	add	r3, pc, #108	; (adr r3, 8013118 <__ieee754_rem_pio2+0x310>)
 80130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b0:	4606      	mov	r6, r0
 80130b2:	460f      	mov	r7, r1
 80130b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130b8:	f7ed fab6 	bl	8000628 <__aeabi_dmul>
 80130bc:	4632      	mov	r2, r6
 80130be:	463b      	mov	r3, r7
 80130c0:	f7ed f8fa 	bl	80002b8 <__aeabi_dsub>
 80130c4:	4606      	mov	r6, r0
 80130c6:	460f      	mov	r7, r1
 80130c8:	e764      	b.n	8012f94 <__ieee754_rem_pio2+0x18c>
 80130ca:	4b1b      	ldr	r3, [pc, #108]	; (8013138 <__ieee754_rem_pio2+0x330>)
 80130cc:	4598      	cmp	r8, r3
 80130ce:	dd35      	ble.n	801313c <__ieee754_rem_pio2+0x334>
 80130d0:	ee10 2a10 	vmov	r2, s0
 80130d4:	463b      	mov	r3, r7
 80130d6:	4630      	mov	r0, r6
 80130d8:	4639      	mov	r1, r7
 80130da:	f7ed f8ed 	bl	80002b8 <__aeabi_dsub>
 80130de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80130e2:	e9c4 0100 	strd	r0, r1, [r4]
 80130e6:	e6a1      	b.n	8012e2c <__ieee754_rem_pio2+0x24>
 80130e8:	54400000 	.word	0x54400000
 80130ec:	3ff921fb 	.word	0x3ff921fb
 80130f0:	1a626331 	.word	0x1a626331
 80130f4:	3dd0b461 	.word	0x3dd0b461
 80130f8:	1a600000 	.word	0x1a600000
 80130fc:	3dd0b461 	.word	0x3dd0b461
 8013100:	2e037073 	.word	0x2e037073
 8013104:	3ba3198a 	.word	0x3ba3198a
 8013108:	6dc9c883 	.word	0x6dc9c883
 801310c:	3fe45f30 	.word	0x3fe45f30
 8013110:	2e000000 	.word	0x2e000000
 8013114:	3ba3198a 	.word	0x3ba3198a
 8013118:	252049c1 	.word	0x252049c1
 801311c:	397b839a 	.word	0x397b839a
 8013120:	3fe921fb 	.word	0x3fe921fb
 8013124:	4002d97b 	.word	0x4002d97b
 8013128:	3ff921fb 	.word	0x3ff921fb
 801312c:	413921fb 	.word	0x413921fb
 8013130:	3fe00000 	.word	0x3fe00000
 8013134:	080187dc 	.word	0x080187dc
 8013138:	7fefffff 	.word	0x7fefffff
 801313c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013140:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013144:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013148:	4630      	mov	r0, r6
 801314a:	460f      	mov	r7, r1
 801314c:	f7ed fd1c 	bl	8000b88 <__aeabi_d2iz>
 8013150:	f7ed fa00 	bl	8000554 <__aeabi_i2d>
 8013154:	4602      	mov	r2, r0
 8013156:	460b      	mov	r3, r1
 8013158:	4630      	mov	r0, r6
 801315a:	4639      	mov	r1, r7
 801315c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013160:	f7ed f8aa 	bl	80002b8 <__aeabi_dsub>
 8013164:	2200      	movs	r2, #0
 8013166:	4b1f      	ldr	r3, [pc, #124]	; (80131e4 <__ieee754_rem_pio2+0x3dc>)
 8013168:	f7ed fa5e 	bl	8000628 <__aeabi_dmul>
 801316c:	460f      	mov	r7, r1
 801316e:	4606      	mov	r6, r0
 8013170:	f7ed fd0a 	bl	8000b88 <__aeabi_d2iz>
 8013174:	f7ed f9ee 	bl	8000554 <__aeabi_i2d>
 8013178:	4602      	mov	r2, r0
 801317a:	460b      	mov	r3, r1
 801317c:	4630      	mov	r0, r6
 801317e:	4639      	mov	r1, r7
 8013180:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013184:	f7ed f898 	bl	80002b8 <__aeabi_dsub>
 8013188:	2200      	movs	r2, #0
 801318a:	4b16      	ldr	r3, [pc, #88]	; (80131e4 <__ieee754_rem_pio2+0x3dc>)
 801318c:	f7ed fa4c 	bl	8000628 <__aeabi_dmul>
 8013190:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013194:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013198:	f04f 0803 	mov.w	r8, #3
 801319c:	2600      	movs	r6, #0
 801319e:	2700      	movs	r7, #0
 80131a0:	4632      	mov	r2, r6
 80131a2:	463b      	mov	r3, r7
 80131a4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80131a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80131ac:	f7ed fca4 	bl	8000af8 <__aeabi_dcmpeq>
 80131b0:	b9b0      	cbnz	r0, 80131e0 <__ieee754_rem_pio2+0x3d8>
 80131b2:	4b0d      	ldr	r3, [pc, #52]	; (80131e8 <__ieee754_rem_pio2+0x3e0>)
 80131b4:	9301      	str	r3, [sp, #4]
 80131b6:	2302      	movs	r3, #2
 80131b8:	9300      	str	r3, [sp, #0]
 80131ba:	462a      	mov	r2, r5
 80131bc:	4643      	mov	r3, r8
 80131be:	4621      	mov	r1, r4
 80131c0:	a806      	add	r0, sp, #24
 80131c2:	f000 f8dd 	bl	8013380 <__kernel_rem_pio2>
 80131c6:	9b04      	ldr	r3, [sp, #16]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	4605      	mov	r5, r0
 80131cc:	f6bf ae58 	bge.w	8012e80 <__ieee754_rem_pio2+0x78>
 80131d0:	6863      	ldr	r3, [r4, #4]
 80131d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80131d6:	6063      	str	r3, [r4, #4]
 80131d8:	68e3      	ldr	r3, [r4, #12]
 80131da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80131de:	e746      	b.n	801306e <__ieee754_rem_pio2+0x266>
 80131e0:	46d0      	mov	r8, sl
 80131e2:	e7dd      	b.n	80131a0 <__ieee754_rem_pio2+0x398>
 80131e4:	41700000 	.word	0x41700000
 80131e8:	0801885c 	.word	0x0801885c
 80131ec:	00000000 	.word	0x00000000

080131f0 <__kernel_cos>:
 80131f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f4:	ec59 8b10 	vmov	r8, r9, d0
 80131f8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80131fc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013200:	ed2d 8b02 	vpush	{d8}
 8013204:	eeb0 8a41 	vmov.f32	s16, s2
 8013208:	eef0 8a61 	vmov.f32	s17, s3
 801320c:	da07      	bge.n	801321e <__kernel_cos+0x2e>
 801320e:	ee10 0a10 	vmov	r0, s0
 8013212:	4649      	mov	r1, r9
 8013214:	f7ed fcb8 	bl	8000b88 <__aeabi_d2iz>
 8013218:	2800      	cmp	r0, #0
 801321a:	f000 8089 	beq.w	8013330 <__kernel_cos+0x140>
 801321e:	4642      	mov	r2, r8
 8013220:	464b      	mov	r3, r9
 8013222:	4640      	mov	r0, r8
 8013224:	4649      	mov	r1, r9
 8013226:	f7ed f9ff 	bl	8000628 <__aeabi_dmul>
 801322a:	2200      	movs	r2, #0
 801322c:	4b4e      	ldr	r3, [pc, #312]	; (8013368 <__kernel_cos+0x178>)
 801322e:	4604      	mov	r4, r0
 8013230:	460d      	mov	r5, r1
 8013232:	f7ed f9f9 	bl	8000628 <__aeabi_dmul>
 8013236:	a340      	add	r3, pc, #256	; (adr r3, 8013338 <__kernel_cos+0x148>)
 8013238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323c:	4682      	mov	sl, r0
 801323e:	468b      	mov	fp, r1
 8013240:	4620      	mov	r0, r4
 8013242:	4629      	mov	r1, r5
 8013244:	f7ed f9f0 	bl	8000628 <__aeabi_dmul>
 8013248:	a33d      	add	r3, pc, #244	; (adr r3, 8013340 <__kernel_cos+0x150>)
 801324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801324e:	f7ed f835 	bl	80002bc <__adddf3>
 8013252:	4622      	mov	r2, r4
 8013254:	462b      	mov	r3, r5
 8013256:	f7ed f9e7 	bl	8000628 <__aeabi_dmul>
 801325a:	a33b      	add	r3, pc, #236	; (adr r3, 8013348 <__kernel_cos+0x158>)
 801325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013260:	f7ed f82a 	bl	80002b8 <__aeabi_dsub>
 8013264:	4622      	mov	r2, r4
 8013266:	462b      	mov	r3, r5
 8013268:	f7ed f9de 	bl	8000628 <__aeabi_dmul>
 801326c:	a338      	add	r3, pc, #224	; (adr r3, 8013350 <__kernel_cos+0x160>)
 801326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013272:	f7ed f823 	bl	80002bc <__adddf3>
 8013276:	4622      	mov	r2, r4
 8013278:	462b      	mov	r3, r5
 801327a:	f7ed f9d5 	bl	8000628 <__aeabi_dmul>
 801327e:	a336      	add	r3, pc, #216	; (adr r3, 8013358 <__kernel_cos+0x168>)
 8013280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013284:	f7ed f818 	bl	80002b8 <__aeabi_dsub>
 8013288:	4622      	mov	r2, r4
 801328a:	462b      	mov	r3, r5
 801328c:	f7ed f9cc 	bl	8000628 <__aeabi_dmul>
 8013290:	a333      	add	r3, pc, #204	; (adr r3, 8013360 <__kernel_cos+0x170>)
 8013292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013296:	f7ed f811 	bl	80002bc <__adddf3>
 801329a:	4622      	mov	r2, r4
 801329c:	462b      	mov	r3, r5
 801329e:	f7ed f9c3 	bl	8000628 <__aeabi_dmul>
 80132a2:	4622      	mov	r2, r4
 80132a4:	462b      	mov	r3, r5
 80132a6:	f7ed f9bf 	bl	8000628 <__aeabi_dmul>
 80132aa:	ec53 2b18 	vmov	r2, r3, d8
 80132ae:	4604      	mov	r4, r0
 80132b0:	460d      	mov	r5, r1
 80132b2:	4640      	mov	r0, r8
 80132b4:	4649      	mov	r1, r9
 80132b6:	f7ed f9b7 	bl	8000628 <__aeabi_dmul>
 80132ba:	460b      	mov	r3, r1
 80132bc:	4602      	mov	r2, r0
 80132be:	4629      	mov	r1, r5
 80132c0:	4620      	mov	r0, r4
 80132c2:	f7ec fff9 	bl	80002b8 <__aeabi_dsub>
 80132c6:	4b29      	ldr	r3, [pc, #164]	; (801336c <__kernel_cos+0x17c>)
 80132c8:	429e      	cmp	r6, r3
 80132ca:	4680      	mov	r8, r0
 80132cc:	4689      	mov	r9, r1
 80132ce:	dc11      	bgt.n	80132f4 <__kernel_cos+0x104>
 80132d0:	4602      	mov	r2, r0
 80132d2:	460b      	mov	r3, r1
 80132d4:	4650      	mov	r0, sl
 80132d6:	4659      	mov	r1, fp
 80132d8:	f7ec ffee 	bl	80002b8 <__aeabi_dsub>
 80132dc:	460b      	mov	r3, r1
 80132de:	4924      	ldr	r1, [pc, #144]	; (8013370 <__kernel_cos+0x180>)
 80132e0:	4602      	mov	r2, r0
 80132e2:	2000      	movs	r0, #0
 80132e4:	f7ec ffe8 	bl	80002b8 <__aeabi_dsub>
 80132e8:	ecbd 8b02 	vpop	{d8}
 80132ec:	ec41 0b10 	vmov	d0, r0, r1
 80132f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f4:	4b1f      	ldr	r3, [pc, #124]	; (8013374 <__kernel_cos+0x184>)
 80132f6:	491e      	ldr	r1, [pc, #120]	; (8013370 <__kernel_cos+0x180>)
 80132f8:	429e      	cmp	r6, r3
 80132fa:	bfcc      	ite	gt
 80132fc:	4d1e      	ldrgt	r5, [pc, #120]	; (8013378 <__kernel_cos+0x188>)
 80132fe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8013302:	2400      	movs	r4, #0
 8013304:	4622      	mov	r2, r4
 8013306:	462b      	mov	r3, r5
 8013308:	2000      	movs	r0, #0
 801330a:	f7ec ffd5 	bl	80002b8 <__aeabi_dsub>
 801330e:	4622      	mov	r2, r4
 8013310:	4606      	mov	r6, r0
 8013312:	460f      	mov	r7, r1
 8013314:	462b      	mov	r3, r5
 8013316:	4650      	mov	r0, sl
 8013318:	4659      	mov	r1, fp
 801331a:	f7ec ffcd 	bl	80002b8 <__aeabi_dsub>
 801331e:	4642      	mov	r2, r8
 8013320:	464b      	mov	r3, r9
 8013322:	f7ec ffc9 	bl	80002b8 <__aeabi_dsub>
 8013326:	4602      	mov	r2, r0
 8013328:	460b      	mov	r3, r1
 801332a:	4630      	mov	r0, r6
 801332c:	4639      	mov	r1, r7
 801332e:	e7d9      	b.n	80132e4 <__kernel_cos+0xf4>
 8013330:	2000      	movs	r0, #0
 8013332:	490f      	ldr	r1, [pc, #60]	; (8013370 <__kernel_cos+0x180>)
 8013334:	e7d8      	b.n	80132e8 <__kernel_cos+0xf8>
 8013336:	bf00      	nop
 8013338:	be8838d4 	.word	0xbe8838d4
 801333c:	bda8fae9 	.word	0xbda8fae9
 8013340:	bdb4b1c4 	.word	0xbdb4b1c4
 8013344:	3e21ee9e 	.word	0x3e21ee9e
 8013348:	809c52ad 	.word	0x809c52ad
 801334c:	3e927e4f 	.word	0x3e927e4f
 8013350:	19cb1590 	.word	0x19cb1590
 8013354:	3efa01a0 	.word	0x3efa01a0
 8013358:	16c15177 	.word	0x16c15177
 801335c:	3f56c16c 	.word	0x3f56c16c
 8013360:	5555554c 	.word	0x5555554c
 8013364:	3fa55555 	.word	0x3fa55555
 8013368:	3fe00000 	.word	0x3fe00000
 801336c:	3fd33332 	.word	0x3fd33332
 8013370:	3ff00000 	.word	0x3ff00000
 8013374:	3fe90000 	.word	0x3fe90000
 8013378:	3fd20000 	.word	0x3fd20000
 801337c:	00000000 	.word	0x00000000

08013380 <__kernel_rem_pio2>:
 8013380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013384:	ed2d 8b02 	vpush	{d8}
 8013388:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801338c:	1ed4      	subs	r4, r2, #3
 801338e:	9308      	str	r3, [sp, #32]
 8013390:	9101      	str	r1, [sp, #4]
 8013392:	4bc5      	ldr	r3, [pc, #788]	; (80136a8 <__kernel_rem_pio2+0x328>)
 8013394:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013396:	9009      	str	r0, [sp, #36]	; 0x24
 8013398:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801339c:	9304      	str	r3, [sp, #16]
 801339e:	9b08      	ldr	r3, [sp, #32]
 80133a0:	3b01      	subs	r3, #1
 80133a2:	9307      	str	r3, [sp, #28]
 80133a4:	2318      	movs	r3, #24
 80133a6:	fb94 f4f3 	sdiv	r4, r4, r3
 80133aa:	f06f 0317 	mvn.w	r3, #23
 80133ae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80133b2:	fb04 3303 	mla	r3, r4, r3, r3
 80133b6:	eb03 0a02 	add.w	sl, r3, r2
 80133ba:	9b04      	ldr	r3, [sp, #16]
 80133bc:	9a07      	ldr	r2, [sp, #28]
 80133be:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013698 <__kernel_rem_pio2+0x318>
 80133c2:	eb03 0802 	add.w	r8, r3, r2
 80133c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80133c8:	1aa7      	subs	r7, r4, r2
 80133ca:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80133ce:	ae22      	add	r6, sp, #136	; 0x88
 80133d0:	2500      	movs	r5, #0
 80133d2:	4545      	cmp	r5, r8
 80133d4:	dd13      	ble.n	80133fe <__kernel_rem_pio2+0x7e>
 80133d6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8013698 <__kernel_rem_pio2+0x318>
 80133da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80133de:	2600      	movs	r6, #0
 80133e0:	9b04      	ldr	r3, [sp, #16]
 80133e2:	429e      	cmp	r6, r3
 80133e4:	dc32      	bgt.n	801344c <__kernel_rem_pio2+0xcc>
 80133e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133e8:	9302      	str	r3, [sp, #8]
 80133ea:	9b08      	ldr	r3, [sp, #32]
 80133ec:	199d      	adds	r5, r3, r6
 80133ee:	ab22      	add	r3, sp, #136	; 0x88
 80133f0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80133f4:	9306      	str	r3, [sp, #24]
 80133f6:	ec59 8b18 	vmov	r8, r9, d8
 80133fa:	2700      	movs	r7, #0
 80133fc:	e01f      	b.n	801343e <__kernel_rem_pio2+0xbe>
 80133fe:	42ef      	cmn	r7, r5
 8013400:	d407      	bmi.n	8013412 <__kernel_rem_pio2+0x92>
 8013402:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013406:	f7ed f8a5 	bl	8000554 <__aeabi_i2d>
 801340a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801340e:	3501      	adds	r5, #1
 8013410:	e7df      	b.n	80133d2 <__kernel_rem_pio2+0x52>
 8013412:	ec51 0b18 	vmov	r0, r1, d8
 8013416:	e7f8      	b.n	801340a <__kernel_rem_pio2+0x8a>
 8013418:	9906      	ldr	r1, [sp, #24]
 801341a:	9d02      	ldr	r5, [sp, #8]
 801341c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8013420:	9106      	str	r1, [sp, #24]
 8013422:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013426:	9502      	str	r5, [sp, #8]
 8013428:	f7ed f8fe 	bl	8000628 <__aeabi_dmul>
 801342c:	4602      	mov	r2, r0
 801342e:	460b      	mov	r3, r1
 8013430:	4640      	mov	r0, r8
 8013432:	4649      	mov	r1, r9
 8013434:	f7ec ff42 	bl	80002bc <__adddf3>
 8013438:	3701      	adds	r7, #1
 801343a:	4680      	mov	r8, r0
 801343c:	4689      	mov	r9, r1
 801343e:	9b07      	ldr	r3, [sp, #28]
 8013440:	429f      	cmp	r7, r3
 8013442:	dde9      	ble.n	8013418 <__kernel_rem_pio2+0x98>
 8013444:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013448:	3601      	adds	r6, #1
 801344a:	e7c9      	b.n	80133e0 <__kernel_rem_pio2+0x60>
 801344c:	9b04      	ldr	r3, [sp, #16]
 801344e:	aa0e      	add	r2, sp, #56	; 0x38
 8013450:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013454:	930c      	str	r3, [sp, #48]	; 0x30
 8013456:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013458:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801345c:	9c04      	ldr	r4, [sp, #16]
 801345e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013460:	ab9a      	add	r3, sp, #616	; 0x268
 8013462:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8013466:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801346a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801346e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8013472:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013476:	ab9a      	add	r3, sp, #616	; 0x268
 8013478:	445b      	add	r3, fp
 801347a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801347e:	2500      	movs	r5, #0
 8013480:	1b63      	subs	r3, r4, r5
 8013482:	2b00      	cmp	r3, #0
 8013484:	dc78      	bgt.n	8013578 <__kernel_rem_pio2+0x1f8>
 8013486:	4650      	mov	r0, sl
 8013488:	ec49 8b10 	vmov	d0, r8, r9
 801348c:	f000 fc00 	bl	8013c90 <scalbn>
 8013490:	ec57 6b10 	vmov	r6, r7, d0
 8013494:	2200      	movs	r2, #0
 8013496:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801349a:	ee10 0a10 	vmov	r0, s0
 801349e:	4639      	mov	r1, r7
 80134a0:	f7ed f8c2 	bl	8000628 <__aeabi_dmul>
 80134a4:	ec41 0b10 	vmov	d0, r0, r1
 80134a8:	f000 fb6e 	bl	8013b88 <floor>
 80134ac:	2200      	movs	r2, #0
 80134ae:	ec51 0b10 	vmov	r0, r1, d0
 80134b2:	4b7e      	ldr	r3, [pc, #504]	; (80136ac <__kernel_rem_pio2+0x32c>)
 80134b4:	f7ed f8b8 	bl	8000628 <__aeabi_dmul>
 80134b8:	4602      	mov	r2, r0
 80134ba:	460b      	mov	r3, r1
 80134bc:	4630      	mov	r0, r6
 80134be:	4639      	mov	r1, r7
 80134c0:	f7ec fefa 	bl	80002b8 <__aeabi_dsub>
 80134c4:	460f      	mov	r7, r1
 80134c6:	4606      	mov	r6, r0
 80134c8:	f7ed fb5e 	bl	8000b88 <__aeabi_d2iz>
 80134cc:	9006      	str	r0, [sp, #24]
 80134ce:	f7ed f841 	bl	8000554 <__aeabi_i2d>
 80134d2:	4602      	mov	r2, r0
 80134d4:	460b      	mov	r3, r1
 80134d6:	4630      	mov	r0, r6
 80134d8:	4639      	mov	r1, r7
 80134da:	f7ec feed 	bl	80002b8 <__aeabi_dsub>
 80134de:	f1ba 0f00 	cmp.w	sl, #0
 80134e2:	4606      	mov	r6, r0
 80134e4:	460f      	mov	r7, r1
 80134e6:	dd6c      	ble.n	80135c2 <__kernel_rem_pio2+0x242>
 80134e8:	1e62      	subs	r2, r4, #1
 80134ea:	ab0e      	add	r3, sp, #56	; 0x38
 80134ec:	f1ca 0118 	rsb	r1, sl, #24
 80134f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80134f4:	9d06      	ldr	r5, [sp, #24]
 80134f6:	fa40 f301 	asr.w	r3, r0, r1
 80134fa:	441d      	add	r5, r3
 80134fc:	408b      	lsls	r3, r1
 80134fe:	1ac0      	subs	r0, r0, r3
 8013500:	ab0e      	add	r3, sp, #56	; 0x38
 8013502:	9506      	str	r5, [sp, #24]
 8013504:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013508:	f1ca 0317 	rsb	r3, sl, #23
 801350c:	fa40 f303 	asr.w	r3, r0, r3
 8013510:	9302      	str	r3, [sp, #8]
 8013512:	9b02      	ldr	r3, [sp, #8]
 8013514:	2b00      	cmp	r3, #0
 8013516:	dd62      	ble.n	80135de <__kernel_rem_pio2+0x25e>
 8013518:	9b06      	ldr	r3, [sp, #24]
 801351a:	2200      	movs	r2, #0
 801351c:	3301      	adds	r3, #1
 801351e:	9306      	str	r3, [sp, #24]
 8013520:	4615      	mov	r5, r2
 8013522:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013526:	4294      	cmp	r4, r2
 8013528:	f300 8095 	bgt.w	8013656 <__kernel_rem_pio2+0x2d6>
 801352c:	f1ba 0f00 	cmp.w	sl, #0
 8013530:	dd07      	ble.n	8013542 <__kernel_rem_pio2+0x1c2>
 8013532:	f1ba 0f01 	cmp.w	sl, #1
 8013536:	f000 80a2 	beq.w	801367e <__kernel_rem_pio2+0x2fe>
 801353a:	f1ba 0f02 	cmp.w	sl, #2
 801353e:	f000 80c1 	beq.w	80136c4 <__kernel_rem_pio2+0x344>
 8013542:	9b02      	ldr	r3, [sp, #8]
 8013544:	2b02      	cmp	r3, #2
 8013546:	d14a      	bne.n	80135de <__kernel_rem_pio2+0x25e>
 8013548:	4632      	mov	r2, r6
 801354a:	463b      	mov	r3, r7
 801354c:	2000      	movs	r0, #0
 801354e:	4958      	ldr	r1, [pc, #352]	; (80136b0 <__kernel_rem_pio2+0x330>)
 8013550:	f7ec feb2 	bl	80002b8 <__aeabi_dsub>
 8013554:	4606      	mov	r6, r0
 8013556:	460f      	mov	r7, r1
 8013558:	2d00      	cmp	r5, #0
 801355a:	d040      	beq.n	80135de <__kernel_rem_pio2+0x25e>
 801355c:	4650      	mov	r0, sl
 801355e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80136a0 <__kernel_rem_pio2+0x320>
 8013562:	f000 fb95 	bl	8013c90 <scalbn>
 8013566:	4630      	mov	r0, r6
 8013568:	4639      	mov	r1, r7
 801356a:	ec53 2b10 	vmov	r2, r3, d0
 801356e:	f7ec fea3 	bl	80002b8 <__aeabi_dsub>
 8013572:	4606      	mov	r6, r0
 8013574:	460f      	mov	r7, r1
 8013576:	e032      	b.n	80135de <__kernel_rem_pio2+0x25e>
 8013578:	2200      	movs	r2, #0
 801357a:	4b4e      	ldr	r3, [pc, #312]	; (80136b4 <__kernel_rem_pio2+0x334>)
 801357c:	4640      	mov	r0, r8
 801357e:	4649      	mov	r1, r9
 8013580:	f7ed f852 	bl	8000628 <__aeabi_dmul>
 8013584:	f7ed fb00 	bl	8000b88 <__aeabi_d2iz>
 8013588:	f7ec ffe4 	bl	8000554 <__aeabi_i2d>
 801358c:	2200      	movs	r2, #0
 801358e:	4b4a      	ldr	r3, [pc, #296]	; (80136b8 <__kernel_rem_pio2+0x338>)
 8013590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013594:	f7ed f848 	bl	8000628 <__aeabi_dmul>
 8013598:	4602      	mov	r2, r0
 801359a:	460b      	mov	r3, r1
 801359c:	4640      	mov	r0, r8
 801359e:	4649      	mov	r1, r9
 80135a0:	f7ec fe8a 	bl	80002b8 <__aeabi_dsub>
 80135a4:	f7ed faf0 	bl	8000b88 <__aeabi_d2iz>
 80135a8:	ab0e      	add	r3, sp, #56	; 0x38
 80135aa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80135ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80135b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135b6:	f7ec fe81 	bl	80002bc <__adddf3>
 80135ba:	3501      	adds	r5, #1
 80135bc:	4680      	mov	r8, r0
 80135be:	4689      	mov	r9, r1
 80135c0:	e75e      	b.n	8013480 <__kernel_rem_pio2+0x100>
 80135c2:	d105      	bne.n	80135d0 <__kernel_rem_pio2+0x250>
 80135c4:	1e63      	subs	r3, r4, #1
 80135c6:	aa0e      	add	r2, sp, #56	; 0x38
 80135c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80135cc:	15c3      	asrs	r3, r0, #23
 80135ce:	e79f      	b.n	8013510 <__kernel_rem_pio2+0x190>
 80135d0:	2200      	movs	r2, #0
 80135d2:	4b3a      	ldr	r3, [pc, #232]	; (80136bc <__kernel_rem_pio2+0x33c>)
 80135d4:	f7ed faae 	bl	8000b34 <__aeabi_dcmpge>
 80135d8:	2800      	cmp	r0, #0
 80135da:	d139      	bne.n	8013650 <__kernel_rem_pio2+0x2d0>
 80135dc:	9002      	str	r0, [sp, #8]
 80135de:	2200      	movs	r2, #0
 80135e0:	2300      	movs	r3, #0
 80135e2:	4630      	mov	r0, r6
 80135e4:	4639      	mov	r1, r7
 80135e6:	f7ed fa87 	bl	8000af8 <__aeabi_dcmpeq>
 80135ea:	2800      	cmp	r0, #0
 80135ec:	f000 80c7 	beq.w	801377e <__kernel_rem_pio2+0x3fe>
 80135f0:	1e65      	subs	r5, r4, #1
 80135f2:	462b      	mov	r3, r5
 80135f4:	2200      	movs	r2, #0
 80135f6:	9904      	ldr	r1, [sp, #16]
 80135f8:	428b      	cmp	r3, r1
 80135fa:	da6a      	bge.n	80136d2 <__kernel_rem_pio2+0x352>
 80135fc:	2a00      	cmp	r2, #0
 80135fe:	f000 8088 	beq.w	8013712 <__kernel_rem_pio2+0x392>
 8013602:	ab0e      	add	r3, sp, #56	; 0x38
 8013604:	f1aa 0a18 	sub.w	sl, sl, #24
 8013608:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801360c:	2b00      	cmp	r3, #0
 801360e:	f000 80b4 	beq.w	801377a <__kernel_rem_pio2+0x3fa>
 8013612:	4650      	mov	r0, sl
 8013614:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80136a0 <__kernel_rem_pio2+0x320>
 8013618:	f000 fb3a 	bl	8013c90 <scalbn>
 801361c:	00ec      	lsls	r4, r5, #3
 801361e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013620:	191e      	adds	r6, r3, r4
 8013622:	ec59 8b10 	vmov	r8, r9, d0
 8013626:	f106 0a08 	add.w	sl, r6, #8
 801362a:	462f      	mov	r7, r5
 801362c:	2f00      	cmp	r7, #0
 801362e:	f280 80df 	bge.w	80137f0 <__kernel_rem_pio2+0x470>
 8013632:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8013698 <__kernel_rem_pio2+0x318>
 8013636:	f04f 0a00 	mov.w	sl, #0
 801363a:	eba5 030a 	sub.w	r3, r5, sl
 801363e:	2b00      	cmp	r3, #0
 8013640:	f2c0 810a 	blt.w	8013858 <__kernel_rem_pio2+0x4d8>
 8013644:	f8df b078 	ldr.w	fp, [pc, #120]	; 80136c0 <__kernel_rem_pio2+0x340>
 8013648:	ec59 8b18 	vmov	r8, r9, d8
 801364c:	2700      	movs	r7, #0
 801364e:	e0f5      	b.n	801383c <__kernel_rem_pio2+0x4bc>
 8013650:	2302      	movs	r3, #2
 8013652:	9302      	str	r3, [sp, #8]
 8013654:	e760      	b.n	8013518 <__kernel_rem_pio2+0x198>
 8013656:	ab0e      	add	r3, sp, #56	; 0x38
 8013658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801365c:	b94d      	cbnz	r5, 8013672 <__kernel_rem_pio2+0x2f2>
 801365e:	b12b      	cbz	r3, 801366c <__kernel_rem_pio2+0x2ec>
 8013660:	a80e      	add	r0, sp, #56	; 0x38
 8013662:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013666:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801366a:	2301      	movs	r3, #1
 801366c:	3201      	adds	r2, #1
 801366e:	461d      	mov	r5, r3
 8013670:	e759      	b.n	8013526 <__kernel_rem_pio2+0x1a6>
 8013672:	a80e      	add	r0, sp, #56	; 0x38
 8013674:	1acb      	subs	r3, r1, r3
 8013676:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801367a:	462b      	mov	r3, r5
 801367c:	e7f6      	b.n	801366c <__kernel_rem_pio2+0x2ec>
 801367e:	1e62      	subs	r2, r4, #1
 8013680:	ab0e      	add	r3, sp, #56	; 0x38
 8013682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013686:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801368a:	a90e      	add	r1, sp, #56	; 0x38
 801368c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013690:	e757      	b.n	8013542 <__kernel_rem_pio2+0x1c2>
 8013692:	bf00      	nop
 8013694:	f3af 8000 	nop.w
	...
 80136a4:	3ff00000 	.word	0x3ff00000
 80136a8:	080189a8 	.word	0x080189a8
 80136ac:	40200000 	.word	0x40200000
 80136b0:	3ff00000 	.word	0x3ff00000
 80136b4:	3e700000 	.word	0x3e700000
 80136b8:	41700000 	.word	0x41700000
 80136bc:	3fe00000 	.word	0x3fe00000
 80136c0:	08018968 	.word	0x08018968
 80136c4:	1e62      	subs	r2, r4, #1
 80136c6:	ab0e      	add	r3, sp, #56	; 0x38
 80136c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80136d0:	e7db      	b.n	801368a <__kernel_rem_pio2+0x30a>
 80136d2:	a90e      	add	r1, sp, #56	; 0x38
 80136d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80136d8:	3b01      	subs	r3, #1
 80136da:	430a      	orrs	r2, r1
 80136dc:	e78b      	b.n	80135f6 <__kernel_rem_pio2+0x276>
 80136de:	3301      	adds	r3, #1
 80136e0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80136e4:	2900      	cmp	r1, #0
 80136e6:	d0fa      	beq.n	80136de <__kernel_rem_pio2+0x35e>
 80136e8:	9a08      	ldr	r2, [sp, #32]
 80136ea:	4422      	add	r2, r4
 80136ec:	00d2      	lsls	r2, r2, #3
 80136ee:	a922      	add	r1, sp, #136	; 0x88
 80136f0:	18e3      	adds	r3, r4, r3
 80136f2:	9206      	str	r2, [sp, #24]
 80136f4:	440a      	add	r2, r1
 80136f6:	9302      	str	r3, [sp, #8]
 80136f8:	f10b 0108 	add.w	r1, fp, #8
 80136fc:	f102 0308 	add.w	r3, r2, #8
 8013700:	1c66      	adds	r6, r4, #1
 8013702:	910a      	str	r1, [sp, #40]	; 0x28
 8013704:	2500      	movs	r5, #0
 8013706:	930d      	str	r3, [sp, #52]	; 0x34
 8013708:	9b02      	ldr	r3, [sp, #8]
 801370a:	42b3      	cmp	r3, r6
 801370c:	da04      	bge.n	8013718 <__kernel_rem_pio2+0x398>
 801370e:	461c      	mov	r4, r3
 8013710:	e6a6      	b.n	8013460 <__kernel_rem_pio2+0xe0>
 8013712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013714:	2301      	movs	r3, #1
 8013716:	e7e3      	b.n	80136e0 <__kernel_rem_pio2+0x360>
 8013718:	9b06      	ldr	r3, [sp, #24]
 801371a:	18ef      	adds	r7, r5, r3
 801371c:	ab22      	add	r3, sp, #136	; 0x88
 801371e:	441f      	add	r7, r3
 8013720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013722:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013726:	f7ec ff15 	bl	8000554 <__aeabi_i2d>
 801372a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801372c:	461c      	mov	r4, r3
 801372e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013730:	e9c7 0100 	strd	r0, r1, [r7]
 8013734:	eb03 0b05 	add.w	fp, r3, r5
 8013738:	2700      	movs	r7, #0
 801373a:	f04f 0800 	mov.w	r8, #0
 801373e:	f04f 0900 	mov.w	r9, #0
 8013742:	9b07      	ldr	r3, [sp, #28]
 8013744:	429f      	cmp	r7, r3
 8013746:	dd08      	ble.n	801375a <__kernel_rem_pio2+0x3da>
 8013748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801374a:	aa72      	add	r2, sp, #456	; 0x1c8
 801374c:	18eb      	adds	r3, r5, r3
 801374e:	4413      	add	r3, r2
 8013750:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8013754:	3601      	adds	r6, #1
 8013756:	3508      	adds	r5, #8
 8013758:	e7d6      	b.n	8013708 <__kernel_rem_pio2+0x388>
 801375a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801375e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013762:	f7ec ff61 	bl	8000628 <__aeabi_dmul>
 8013766:	4602      	mov	r2, r0
 8013768:	460b      	mov	r3, r1
 801376a:	4640      	mov	r0, r8
 801376c:	4649      	mov	r1, r9
 801376e:	f7ec fda5 	bl	80002bc <__adddf3>
 8013772:	3701      	adds	r7, #1
 8013774:	4680      	mov	r8, r0
 8013776:	4689      	mov	r9, r1
 8013778:	e7e3      	b.n	8013742 <__kernel_rem_pio2+0x3c2>
 801377a:	3d01      	subs	r5, #1
 801377c:	e741      	b.n	8013602 <__kernel_rem_pio2+0x282>
 801377e:	f1ca 0000 	rsb	r0, sl, #0
 8013782:	ec47 6b10 	vmov	d0, r6, r7
 8013786:	f000 fa83 	bl	8013c90 <scalbn>
 801378a:	ec57 6b10 	vmov	r6, r7, d0
 801378e:	2200      	movs	r2, #0
 8013790:	4b99      	ldr	r3, [pc, #612]	; (80139f8 <__kernel_rem_pio2+0x678>)
 8013792:	ee10 0a10 	vmov	r0, s0
 8013796:	4639      	mov	r1, r7
 8013798:	f7ed f9cc 	bl	8000b34 <__aeabi_dcmpge>
 801379c:	b1f8      	cbz	r0, 80137de <__kernel_rem_pio2+0x45e>
 801379e:	2200      	movs	r2, #0
 80137a0:	4b96      	ldr	r3, [pc, #600]	; (80139fc <__kernel_rem_pio2+0x67c>)
 80137a2:	4630      	mov	r0, r6
 80137a4:	4639      	mov	r1, r7
 80137a6:	f7ec ff3f 	bl	8000628 <__aeabi_dmul>
 80137aa:	f7ed f9ed 	bl	8000b88 <__aeabi_d2iz>
 80137ae:	4680      	mov	r8, r0
 80137b0:	f7ec fed0 	bl	8000554 <__aeabi_i2d>
 80137b4:	2200      	movs	r2, #0
 80137b6:	4b90      	ldr	r3, [pc, #576]	; (80139f8 <__kernel_rem_pio2+0x678>)
 80137b8:	f7ec ff36 	bl	8000628 <__aeabi_dmul>
 80137bc:	460b      	mov	r3, r1
 80137be:	4602      	mov	r2, r0
 80137c0:	4639      	mov	r1, r7
 80137c2:	4630      	mov	r0, r6
 80137c4:	f7ec fd78 	bl	80002b8 <__aeabi_dsub>
 80137c8:	f7ed f9de 	bl	8000b88 <__aeabi_d2iz>
 80137cc:	1c65      	adds	r5, r4, #1
 80137ce:	ab0e      	add	r3, sp, #56	; 0x38
 80137d0:	f10a 0a18 	add.w	sl, sl, #24
 80137d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80137d8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80137dc:	e719      	b.n	8013612 <__kernel_rem_pio2+0x292>
 80137de:	4630      	mov	r0, r6
 80137e0:	4639      	mov	r1, r7
 80137e2:	f7ed f9d1 	bl	8000b88 <__aeabi_d2iz>
 80137e6:	ab0e      	add	r3, sp, #56	; 0x38
 80137e8:	4625      	mov	r5, r4
 80137ea:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80137ee:	e710      	b.n	8013612 <__kernel_rem_pio2+0x292>
 80137f0:	ab0e      	add	r3, sp, #56	; 0x38
 80137f2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80137f6:	f7ec fead 	bl	8000554 <__aeabi_i2d>
 80137fa:	4642      	mov	r2, r8
 80137fc:	464b      	mov	r3, r9
 80137fe:	f7ec ff13 	bl	8000628 <__aeabi_dmul>
 8013802:	2200      	movs	r2, #0
 8013804:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013808:	4b7c      	ldr	r3, [pc, #496]	; (80139fc <__kernel_rem_pio2+0x67c>)
 801380a:	4640      	mov	r0, r8
 801380c:	4649      	mov	r1, r9
 801380e:	f7ec ff0b 	bl	8000628 <__aeabi_dmul>
 8013812:	3f01      	subs	r7, #1
 8013814:	4680      	mov	r8, r0
 8013816:	4689      	mov	r9, r1
 8013818:	e708      	b.n	801362c <__kernel_rem_pio2+0x2ac>
 801381a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013822:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8013826:	f7ec feff 	bl	8000628 <__aeabi_dmul>
 801382a:	4602      	mov	r2, r0
 801382c:	460b      	mov	r3, r1
 801382e:	4640      	mov	r0, r8
 8013830:	4649      	mov	r1, r9
 8013832:	f7ec fd43 	bl	80002bc <__adddf3>
 8013836:	3701      	adds	r7, #1
 8013838:	4680      	mov	r8, r0
 801383a:	4689      	mov	r9, r1
 801383c:	9b04      	ldr	r3, [sp, #16]
 801383e:	429f      	cmp	r7, r3
 8013840:	dc01      	bgt.n	8013846 <__kernel_rem_pio2+0x4c6>
 8013842:	45ba      	cmp	sl, r7
 8013844:	dae9      	bge.n	801381a <__kernel_rem_pio2+0x49a>
 8013846:	ab4a      	add	r3, sp, #296	; 0x128
 8013848:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801384c:	e9c3 8900 	strd	r8, r9, [r3]
 8013850:	f10a 0a01 	add.w	sl, sl, #1
 8013854:	3e08      	subs	r6, #8
 8013856:	e6f0      	b.n	801363a <__kernel_rem_pio2+0x2ba>
 8013858:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801385a:	2b03      	cmp	r3, #3
 801385c:	d85b      	bhi.n	8013916 <__kernel_rem_pio2+0x596>
 801385e:	e8df f003 	tbb	[pc, r3]
 8013862:	264a      	.short	0x264a
 8013864:	0226      	.short	0x0226
 8013866:	ab9a      	add	r3, sp, #616	; 0x268
 8013868:	441c      	add	r4, r3
 801386a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801386e:	46a2      	mov	sl, r4
 8013870:	46ab      	mov	fp, r5
 8013872:	f1bb 0f00 	cmp.w	fp, #0
 8013876:	dc6c      	bgt.n	8013952 <__kernel_rem_pio2+0x5d2>
 8013878:	46a2      	mov	sl, r4
 801387a:	46ab      	mov	fp, r5
 801387c:	f1bb 0f01 	cmp.w	fp, #1
 8013880:	f300 8086 	bgt.w	8013990 <__kernel_rem_pio2+0x610>
 8013884:	2000      	movs	r0, #0
 8013886:	2100      	movs	r1, #0
 8013888:	2d01      	cmp	r5, #1
 801388a:	f300 80a0 	bgt.w	80139ce <__kernel_rem_pio2+0x64e>
 801388e:	9b02      	ldr	r3, [sp, #8]
 8013890:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013894:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8013898:	2b00      	cmp	r3, #0
 801389a:	f040 809e 	bne.w	80139da <__kernel_rem_pio2+0x65a>
 801389e:	9b01      	ldr	r3, [sp, #4]
 80138a0:	e9c3 7800 	strd	r7, r8, [r3]
 80138a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80138a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80138ac:	e033      	b.n	8013916 <__kernel_rem_pio2+0x596>
 80138ae:	3408      	adds	r4, #8
 80138b0:	ab4a      	add	r3, sp, #296	; 0x128
 80138b2:	441c      	add	r4, r3
 80138b4:	462e      	mov	r6, r5
 80138b6:	2000      	movs	r0, #0
 80138b8:	2100      	movs	r1, #0
 80138ba:	2e00      	cmp	r6, #0
 80138bc:	da3a      	bge.n	8013934 <__kernel_rem_pio2+0x5b4>
 80138be:	9b02      	ldr	r3, [sp, #8]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d03d      	beq.n	8013940 <__kernel_rem_pio2+0x5c0>
 80138c4:	4602      	mov	r2, r0
 80138c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138ca:	9c01      	ldr	r4, [sp, #4]
 80138cc:	e9c4 2300 	strd	r2, r3, [r4]
 80138d0:	4602      	mov	r2, r0
 80138d2:	460b      	mov	r3, r1
 80138d4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80138d8:	f7ec fcee 	bl	80002b8 <__aeabi_dsub>
 80138dc:	ae4c      	add	r6, sp, #304	; 0x130
 80138de:	2401      	movs	r4, #1
 80138e0:	42a5      	cmp	r5, r4
 80138e2:	da30      	bge.n	8013946 <__kernel_rem_pio2+0x5c6>
 80138e4:	9b02      	ldr	r3, [sp, #8]
 80138e6:	b113      	cbz	r3, 80138ee <__kernel_rem_pio2+0x56e>
 80138e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138ec:	4619      	mov	r1, r3
 80138ee:	9b01      	ldr	r3, [sp, #4]
 80138f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80138f4:	e00f      	b.n	8013916 <__kernel_rem_pio2+0x596>
 80138f6:	ab9a      	add	r3, sp, #616	; 0x268
 80138f8:	441c      	add	r4, r3
 80138fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80138fe:	2000      	movs	r0, #0
 8013900:	2100      	movs	r1, #0
 8013902:	2d00      	cmp	r5, #0
 8013904:	da10      	bge.n	8013928 <__kernel_rem_pio2+0x5a8>
 8013906:	9b02      	ldr	r3, [sp, #8]
 8013908:	b113      	cbz	r3, 8013910 <__kernel_rem_pio2+0x590>
 801390a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801390e:	4619      	mov	r1, r3
 8013910:	9b01      	ldr	r3, [sp, #4]
 8013912:	e9c3 0100 	strd	r0, r1, [r3]
 8013916:	9b06      	ldr	r3, [sp, #24]
 8013918:	f003 0007 	and.w	r0, r3, #7
 801391c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013920:	ecbd 8b02 	vpop	{d8}
 8013924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013928:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801392c:	f7ec fcc6 	bl	80002bc <__adddf3>
 8013930:	3d01      	subs	r5, #1
 8013932:	e7e6      	b.n	8013902 <__kernel_rem_pio2+0x582>
 8013934:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013938:	f7ec fcc0 	bl	80002bc <__adddf3>
 801393c:	3e01      	subs	r6, #1
 801393e:	e7bc      	b.n	80138ba <__kernel_rem_pio2+0x53a>
 8013940:	4602      	mov	r2, r0
 8013942:	460b      	mov	r3, r1
 8013944:	e7c1      	b.n	80138ca <__kernel_rem_pio2+0x54a>
 8013946:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801394a:	f7ec fcb7 	bl	80002bc <__adddf3>
 801394e:	3401      	adds	r4, #1
 8013950:	e7c6      	b.n	80138e0 <__kernel_rem_pio2+0x560>
 8013952:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8013956:	ed3a 7b02 	vldmdb	sl!, {d7}
 801395a:	4640      	mov	r0, r8
 801395c:	ec53 2b17 	vmov	r2, r3, d7
 8013960:	4649      	mov	r1, r9
 8013962:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013966:	f7ec fca9 	bl	80002bc <__adddf3>
 801396a:	4602      	mov	r2, r0
 801396c:	460b      	mov	r3, r1
 801396e:	4606      	mov	r6, r0
 8013970:	460f      	mov	r7, r1
 8013972:	4640      	mov	r0, r8
 8013974:	4649      	mov	r1, r9
 8013976:	f7ec fc9f 	bl	80002b8 <__aeabi_dsub>
 801397a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801397e:	f7ec fc9d 	bl	80002bc <__adddf3>
 8013982:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013986:	e9ca 0100 	strd	r0, r1, [sl]
 801398a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801398e:	e770      	b.n	8013872 <__kernel_rem_pio2+0x4f2>
 8013990:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8013994:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013998:	4630      	mov	r0, r6
 801399a:	ec53 2b17 	vmov	r2, r3, d7
 801399e:	4639      	mov	r1, r7
 80139a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80139a4:	f7ec fc8a 	bl	80002bc <__adddf3>
 80139a8:	4602      	mov	r2, r0
 80139aa:	460b      	mov	r3, r1
 80139ac:	4680      	mov	r8, r0
 80139ae:	4689      	mov	r9, r1
 80139b0:	4630      	mov	r0, r6
 80139b2:	4639      	mov	r1, r7
 80139b4:	f7ec fc80 	bl	80002b8 <__aeabi_dsub>
 80139b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139bc:	f7ec fc7e 	bl	80002bc <__adddf3>
 80139c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80139c4:	e9ca 0100 	strd	r0, r1, [sl]
 80139c8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80139cc:	e756      	b.n	801387c <__kernel_rem_pio2+0x4fc>
 80139ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80139d2:	f7ec fc73 	bl	80002bc <__adddf3>
 80139d6:	3d01      	subs	r5, #1
 80139d8:	e756      	b.n	8013888 <__kernel_rem_pio2+0x508>
 80139da:	9b01      	ldr	r3, [sp, #4]
 80139dc:	9a01      	ldr	r2, [sp, #4]
 80139de:	601f      	str	r7, [r3, #0]
 80139e0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80139e4:	605c      	str	r4, [r3, #4]
 80139e6:	609d      	str	r5, [r3, #8]
 80139e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80139ec:	60d3      	str	r3, [r2, #12]
 80139ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139f2:	6110      	str	r0, [r2, #16]
 80139f4:	6153      	str	r3, [r2, #20]
 80139f6:	e78e      	b.n	8013916 <__kernel_rem_pio2+0x596>
 80139f8:	41700000 	.word	0x41700000
 80139fc:	3e700000 	.word	0x3e700000

08013a00 <__kernel_sin>:
 8013a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a04:	ec55 4b10 	vmov	r4, r5, d0
 8013a08:	b085      	sub	sp, #20
 8013a0a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013a0e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013a12:	ed8d 1b00 	vstr	d1, [sp]
 8013a16:	9002      	str	r0, [sp, #8]
 8013a18:	da06      	bge.n	8013a28 <__kernel_sin+0x28>
 8013a1a:	ee10 0a10 	vmov	r0, s0
 8013a1e:	4629      	mov	r1, r5
 8013a20:	f7ed f8b2 	bl	8000b88 <__aeabi_d2iz>
 8013a24:	2800      	cmp	r0, #0
 8013a26:	d051      	beq.n	8013acc <__kernel_sin+0xcc>
 8013a28:	4622      	mov	r2, r4
 8013a2a:	462b      	mov	r3, r5
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	4629      	mov	r1, r5
 8013a30:	f7ec fdfa 	bl	8000628 <__aeabi_dmul>
 8013a34:	4682      	mov	sl, r0
 8013a36:	468b      	mov	fp, r1
 8013a38:	4602      	mov	r2, r0
 8013a3a:	460b      	mov	r3, r1
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	4629      	mov	r1, r5
 8013a40:	f7ec fdf2 	bl	8000628 <__aeabi_dmul>
 8013a44:	a341      	add	r3, pc, #260	; (adr r3, 8013b4c <__kernel_sin+0x14c>)
 8013a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a4a:	4680      	mov	r8, r0
 8013a4c:	4689      	mov	r9, r1
 8013a4e:	4650      	mov	r0, sl
 8013a50:	4659      	mov	r1, fp
 8013a52:	f7ec fde9 	bl	8000628 <__aeabi_dmul>
 8013a56:	a33f      	add	r3, pc, #252	; (adr r3, 8013b54 <__kernel_sin+0x154>)
 8013a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5c:	f7ec fc2c 	bl	80002b8 <__aeabi_dsub>
 8013a60:	4652      	mov	r2, sl
 8013a62:	465b      	mov	r3, fp
 8013a64:	f7ec fde0 	bl	8000628 <__aeabi_dmul>
 8013a68:	a33c      	add	r3, pc, #240	; (adr r3, 8013b5c <__kernel_sin+0x15c>)
 8013a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a6e:	f7ec fc25 	bl	80002bc <__adddf3>
 8013a72:	4652      	mov	r2, sl
 8013a74:	465b      	mov	r3, fp
 8013a76:	f7ec fdd7 	bl	8000628 <__aeabi_dmul>
 8013a7a:	a33a      	add	r3, pc, #232	; (adr r3, 8013b64 <__kernel_sin+0x164>)
 8013a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a80:	f7ec fc1a 	bl	80002b8 <__aeabi_dsub>
 8013a84:	4652      	mov	r2, sl
 8013a86:	465b      	mov	r3, fp
 8013a88:	f7ec fdce 	bl	8000628 <__aeabi_dmul>
 8013a8c:	a337      	add	r3, pc, #220	; (adr r3, 8013b6c <__kernel_sin+0x16c>)
 8013a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a92:	f7ec fc13 	bl	80002bc <__adddf3>
 8013a96:	9b02      	ldr	r3, [sp, #8]
 8013a98:	4606      	mov	r6, r0
 8013a9a:	460f      	mov	r7, r1
 8013a9c:	b9db      	cbnz	r3, 8013ad6 <__kernel_sin+0xd6>
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	460b      	mov	r3, r1
 8013aa2:	4650      	mov	r0, sl
 8013aa4:	4659      	mov	r1, fp
 8013aa6:	f7ec fdbf 	bl	8000628 <__aeabi_dmul>
 8013aaa:	a325      	add	r3, pc, #148	; (adr r3, 8013b40 <__kernel_sin+0x140>)
 8013aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab0:	f7ec fc02 	bl	80002b8 <__aeabi_dsub>
 8013ab4:	4642      	mov	r2, r8
 8013ab6:	464b      	mov	r3, r9
 8013ab8:	f7ec fdb6 	bl	8000628 <__aeabi_dmul>
 8013abc:	4602      	mov	r2, r0
 8013abe:	460b      	mov	r3, r1
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	4629      	mov	r1, r5
 8013ac4:	f7ec fbfa 	bl	80002bc <__adddf3>
 8013ac8:	4604      	mov	r4, r0
 8013aca:	460d      	mov	r5, r1
 8013acc:	ec45 4b10 	vmov	d0, r4, r5
 8013ad0:	b005      	add	sp, #20
 8013ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	4b1b      	ldr	r3, [pc, #108]	; (8013b48 <__kernel_sin+0x148>)
 8013ada:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ade:	f7ec fda3 	bl	8000628 <__aeabi_dmul>
 8013ae2:	4632      	mov	r2, r6
 8013ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ae8:	463b      	mov	r3, r7
 8013aea:	4640      	mov	r0, r8
 8013aec:	4649      	mov	r1, r9
 8013aee:	f7ec fd9b 	bl	8000628 <__aeabi_dmul>
 8013af2:	4602      	mov	r2, r0
 8013af4:	460b      	mov	r3, r1
 8013af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013afa:	f7ec fbdd 	bl	80002b8 <__aeabi_dsub>
 8013afe:	4652      	mov	r2, sl
 8013b00:	465b      	mov	r3, fp
 8013b02:	f7ec fd91 	bl	8000628 <__aeabi_dmul>
 8013b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b0a:	f7ec fbd5 	bl	80002b8 <__aeabi_dsub>
 8013b0e:	a30c      	add	r3, pc, #48	; (adr r3, 8013b40 <__kernel_sin+0x140>)
 8013b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b14:	4606      	mov	r6, r0
 8013b16:	460f      	mov	r7, r1
 8013b18:	4640      	mov	r0, r8
 8013b1a:	4649      	mov	r1, r9
 8013b1c:	f7ec fd84 	bl	8000628 <__aeabi_dmul>
 8013b20:	4602      	mov	r2, r0
 8013b22:	460b      	mov	r3, r1
 8013b24:	4630      	mov	r0, r6
 8013b26:	4639      	mov	r1, r7
 8013b28:	f7ec fbc8 	bl	80002bc <__adddf3>
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	460b      	mov	r3, r1
 8013b30:	4620      	mov	r0, r4
 8013b32:	4629      	mov	r1, r5
 8013b34:	f7ec fbc0 	bl	80002b8 <__aeabi_dsub>
 8013b38:	e7c6      	b.n	8013ac8 <__kernel_sin+0xc8>
 8013b3a:	bf00      	nop
 8013b3c:	f3af 8000 	nop.w
 8013b40:	55555549 	.word	0x55555549
 8013b44:	3fc55555 	.word	0x3fc55555
 8013b48:	3fe00000 	.word	0x3fe00000
 8013b4c:	5acfd57c 	.word	0x5acfd57c
 8013b50:	3de5d93a 	.word	0x3de5d93a
 8013b54:	8a2b9ceb 	.word	0x8a2b9ceb
 8013b58:	3e5ae5e6 	.word	0x3e5ae5e6
 8013b5c:	57b1fe7d 	.word	0x57b1fe7d
 8013b60:	3ec71de3 	.word	0x3ec71de3
 8013b64:	19c161d5 	.word	0x19c161d5
 8013b68:	3f2a01a0 	.word	0x3f2a01a0
 8013b6c:	1110f8a6 	.word	0x1110f8a6
 8013b70:	3f811111 	.word	0x3f811111

08013b74 <fabs>:
 8013b74:	ec51 0b10 	vmov	r0, r1, d0
 8013b78:	ee10 2a10 	vmov	r2, s0
 8013b7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013b80:	ec43 2b10 	vmov	d0, r2, r3
 8013b84:	4770      	bx	lr
	...

08013b88 <floor>:
 8013b88:	ec51 0b10 	vmov	r0, r1, d0
 8013b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013b94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013b98:	2e13      	cmp	r6, #19
 8013b9a:	460c      	mov	r4, r1
 8013b9c:	ee10 5a10 	vmov	r5, s0
 8013ba0:	4680      	mov	r8, r0
 8013ba2:	dc34      	bgt.n	8013c0e <floor+0x86>
 8013ba4:	2e00      	cmp	r6, #0
 8013ba6:	da16      	bge.n	8013bd6 <floor+0x4e>
 8013ba8:	a335      	add	r3, pc, #212	; (adr r3, 8013c80 <floor+0xf8>)
 8013baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bae:	f7ec fb85 	bl	80002bc <__adddf3>
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	f7ec ffc7 	bl	8000b48 <__aeabi_dcmpgt>
 8013bba:	b148      	cbz	r0, 8013bd0 <floor+0x48>
 8013bbc:	2c00      	cmp	r4, #0
 8013bbe:	da59      	bge.n	8013c74 <floor+0xec>
 8013bc0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013bc4:	4a30      	ldr	r2, [pc, #192]	; (8013c88 <floor+0x100>)
 8013bc6:	432b      	orrs	r3, r5
 8013bc8:	2500      	movs	r5, #0
 8013bca:	42ab      	cmp	r3, r5
 8013bcc:	bf18      	it	ne
 8013bce:	4614      	movne	r4, r2
 8013bd0:	4621      	mov	r1, r4
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	e025      	b.n	8013c22 <floor+0x9a>
 8013bd6:	4f2d      	ldr	r7, [pc, #180]	; (8013c8c <floor+0x104>)
 8013bd8:	4137      	asrs	r7, r6
 8013bda:	ea01 0307 	and.w	r3, r1, r7
 8013bde:	4303      	orrs	r3, r0
 8013be0:	d01f      	beq.n	8013c22 <floor+0x9a>
 8013be2:	a327      	add	r3, pc, #156	; (adr r3, 8013c80 <floor+0xf8>)
 8013be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be8:	f7ec fb68 	bl	80002bc <__adddf3>
 8013bec:	2200      	movs	r2, #0
 8013bee:	2300      	movs	r3, #0
 8013bf0:	f7ec ffaa 	bl	8000b48 <__aeabi_dcmpgt>
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	d0eb      	beq.n	8013bd0 <floor+0x48>
 8013bf8:	2c00      	cmp	r4, #0
 8013bfa:	bfbe      	ittt	lt
 8013bfc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013c00:	fa43 f606 	asrlt.w	r6, r3, r6
 8013c04:	19a4      	addlt	r4, r4, r6
 8013c06:	ea24 0407 	bic.w	r4, r4, r7
 8013c0a:	2500      	movs	r5, #0
 8013c0c:	e7e0      	b.n	8013bd0 <floor+0x48>
 8013c0e:	2e33      	cmp	r6, #51	; 0x33
 8013c10:	dd0b      	ble.n	8013c2a <floor+0xa2>
 8013c12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013c16:	d104      	bne.n	8013c22 <floor+0x9a>
 8013c18:	ee10 2a10 	vmov	r2, s0
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	f7ec fb4d 	bl	80002bc <__adddf3>
 8013c22:	ec41 0b10 	vmov	d0, r0, r1
 8013c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c2a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c32:	fa23 f707 	lsr.w	r7, r3, r7
 8013c36:	4207      	tst	r7, r0
 8013c38:	d0f3      	beq.n	8013c22 <floor+0x9a>
 8013c3a:	a311      	add	r3, pc, #68	; (adr r3, 8013c80 <floor+0xf8>)
 8013c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c40:	f7ec fb3c 	bl	80002bc <__adddf3>
 8013c44:	2200      	movs	r2, #0
 8013c46:	2300      	movs	r3, #0
 8013c48:	f7ec ff7e 	bl	8000b48 <__aeabi_dcmpgt>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	d0bf      	beq.n	8013bd0 <floor+0x48>
 8013c50:	2c00      	cmp	r4, #0
 8013c52:	da02      	bge.n	8013c5a <floor+0xd2>
 8013c54:	2e14      	cmp	r6, #20
 8013c56:	d103      	bne.n	8013c60 <floor+0xd8>
 8013c58:	3401      	adds	r4, #1
 8013c5a:	ea25 0507 	bic.w	r5, r5, r7
 8013c5e:	e7b7      	b.n	8013bd0 <floor+0x48>
 8013c60:	2301      	movs	r3, #1
 8013c62:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013c66:	fa03 f606 	lsl.w	r6, r3, r6
 8013c6a:	4435      	add	r5, r6
 8013c6c:	4545      	cmp	r5, r8
 8013c6e:	bf38      	it	cc
 8013c70:	18e4      	addcc	r4, r4, r3
 8013c72:	e7f2      	b.n	8013c5a <floor+0xd2>
 8013c74:	2500      	movs	r5, #0
 8013c76:	462c      	mov	r4, r5
 8013c78:	e7aa      	b.n	8013bd0 <floor+0x48>
 8013c7a:	bf00      	nop
 8013c7c:	f3af 8000 	nop.w
 8013c80:	8800759c 	.word	0x8800759c
 8013c84:	7e37e43c 	.word	0x7e37e43c
 8013c88:	bff00000 	.word	0xbff00000
 8013c8c:	000fffff 	.word	0x000fffff

08013c90 <scalbn>:
 8013c90:	b570      	push	{r4, r5, r6, lr}
 8013c92:	ec55 4b10 	vmov	r4, r5, d0
 8013c96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013c9a:	4606      	mov	r6, r0
 8013c9c:	462b      	mov	r3, r5
 8013c9e:	b9aa      	cbnz	r2, 8013ccc <scalbn+0x3c>
 8013ca0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013ca4:	4323      	orrs	r3, r4
 8013ca6:	d03b      	beq.n	8013d20 <scalbn+0x90>
 8013ca8:	4b31      	ldr	r3, [pc, #196]	; (8013d70 <scalbn+0xe0>)
 8013caa:	4629      	mov	r1, r5
 8013cac:	2200      	movs	r2, #0
 8013cae:	ee10 0a10 	vmov	r0, s0
 8013cb2:	f7ec fcb9 	bl	8000628 <__aeabi_dmul>
 8013cb6:	4b2f      	ldr	r3, [pc, #188]	; (8013d74 <scalbn+0xe4>)
 8013cb8:	429e      	cmp	r6, r3
 8013cba:	4604      	mov	r4, r0
 8013cbc:	460d      	mov	r5, r1
 8013cbe:	da12      	bge.n	8013ce6 <scalbn+0x56>
 8013cc0:	a327      	add	r3, pc, #156	; (adr r3, 8013d60 <scalbn+0xd0>)
 8013cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cc6:	f7ec fcaf 	bl	8000628 <__aeabi_dmul>
 8013cca:	e009      	b.n	8013ce0 <scalbn+0x50>
 8013ccc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013cd0:	428a      	cmp	r2, r1
 8013cd2:	d10c      	bne.n	8013cee <scalbn+0x5e>
 8013cd4:	ee10 2a10 	vmov	r2, s0
 8013cd8:	4620      	mov	r0, r4
 8013cda:	4629      	mov	r1, r5
 8013cdc:	f7ec faee 	bl	80002bc <__adddf3>
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	460d      	mov	r5, r1
 8013ce4:	e01c      	b.n	8013d20 <scalbn+0x90>
 8013ce6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013cea:	460b      	mov	r3, r1
 8013cec:	3a36      	subs	r2, #54	; 0x36
 8013cee:	4432      	add	r2, r6
 8013cf0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013cf4:	428a      	cmp	r2, r1
 8013cf6:	dd0b      	ble.n	8013d10 <scalbn+0x80>
 8013cf8:	ec45 4b11 	vmov	d1, r4, r5
 8013cfc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013d68 <scalbn+0xd8>
 8013d00:	f000 f83c 	bl	8013d7c <copysign>
 8013d04:	a318      	add	r3, pc, #96	; (adr r3, 8013d68 <scalbn+0xd8>)
 8013d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0a:	ec51 0b10 	vmov	r0, r1, d0
 8013d0e:	e7da      	b.n	8013cc6 <scalbn+0x36>
 8013d10:	2a00      	cmp	r2, #0
 8013d12:	dd08      	ble.n	8013d26 <scalbn+0x96>
 8013d14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013d1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d20:	ec45 4b10 	vmov	d0, r4, r5
 8013d24:	bd70      	pop	{r4, r5, r6, pc}
 8013d26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013d2a:	da0d      	bge.n	8013d48 <scalbn+0xb8>
 8013d2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013d30:	429e      	cmp	r6, r3
 8013d32:	ec45 4b11 	vmov	d1, r4, r5
 8013d36:	dce1      	bgt.n	8013cfc <scalbn+0x6c>
 8013d38:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013d60 <scalbn+0xd0>
 8013d3c:	f000 f81e 	bl	8013d7c <copysign>
 8013d40:	a307      	add	r3, pc, #28	; (adr r3, 8013d60 <scalbn+0xd0>)
 8013d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d46:	e7e0      	b.n	8013d0a <scalbn+0x7a>
 8013d48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d4c:	3236      	adds	r2, #54	; 0x36
 8013d4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013d52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d56:	4620      	mov	r0, r4
 8013d58:	4629      	mov	r1, r5
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	4b06      	ldr	r3, [pc, #24]	; (8013d78 <scalbn+0xe8>)
 8013d5e:	e7b2      	b.n	8013cc6 <scalbn+0x36>
 8013d60:	c2f8f359 	.word	0xc2f8f359
 8013d64:	01a56e1f 	.word	0x01a56e1f
 8013d68:	8800759c 	.word	0x8800759c
 8013d6c:	7e37e43c 	.word	0x7e37e43c
 8013d70:	43500000 	.word	0x43500000
 8013d74:	ffff3cb0 	.word	0xffff3cb0
 8013d78:	3c900000 	.word	0x3c900000

08013d7c <copysign>:
 8013d7c:	ec51 0b10 	vmov	r0, r1, d0
 8013d80:	ee11 0a90 	vmov	r0, s3
 8013d84:	ee10 2a10 	vmov	r2, s0
 8013d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013d8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013d90:	ea41 0300 	orr.w	r3, r1, r0
 8013d94:	ec43 2b10 	vmov	d0, r2, r3
 8013d98:	4770      	bx	lr
	...

08013d9c <__errno>:
 8013d9c:	4b01      	ldr	r3, [pc, #4]	; (8013da4 <__errno+0x8>)
 8013d9e:	6818      	ldr	r0, [r3, #0]
 8013da0:	4770      	bx	lr
 8013da2:	bf00      	nop
 8013da4:	2000000c 	.word	0x2000000c

08013da8 <__libc_init_array>:
 8013da8:	b570      	push	{r4, r5, r6, lr}
 8013daa:	4e0d      	ldr	r6, [pc, #52]	; (8013de0 <__libc_init_array+0x38>)
 8013dac:	4c0d      	ldr	r4, [pc, #52]	; (8013de4 <__libc_init_array+0x3c>)
 8013dae:	1ba4      	subs	r4, r4, r6
 8013db0:	10a4      	asrs	r4, r4, #2
 8013db2:	2500      	movs	r5, #0
 8013db4:	42a5      	cmp	r5, r4
 8013db6:	d109      	bne.n	8013dcc <__libc_init_array+0x24>
 8013db8:	4e0b      	ldr	r6, [pc, #44]	; (8013de8 <__libc_init_array+0x40>)
 8013dba:	4c0c      	ldr	r4, [pc, #48]	; (8013dec <__libc_init_array+0x44>)
 8013dbc:	f004 f9e8 	bl	8018190 <_init>
 8013dc0:	1ba4      	subs	r4, r4, r6
 8013dc2:	10a4      	asrs	r4, r4, #2
 8013dc4:	2500      	movs	r5, #0
 8013dc6:	42a5      	cmp	r5, r4
 8013dc8:	d105      	bne.n	8013dd6 <__libc_init_array+0x2e>
 8013dca:	bd70      	pop	{r4, r5, r6, pc}
 8013dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013dd0:	4798      	blx	r3
 8013dd2:	3501      	adds	r5, #1
 8013dd4:	e7ee      	b.n	8013db4 <__libc_init_array+0xc>
 8013dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013dda:	4798      	blx	r3
 8013ddc:	3501      	adds	r5, #1
 8013dde:	e7f2      	b.n	8013dc6 <__libc_init_array+0x1e>
 8013de0:	08018cf4 	.word	0x08018cf4
 8013de4:	08018cf4 	.word	0x08018cf4
 8013de8:	08018cf4 	.word	0x08018cf4
 8013dec:	08018cfc 	.word	0x08018cfc

08013df0 <memcpy>:
 8013df0:	b510      	push	{r4, lr}
 8013df2:	1e43      	subs	r3, r0, #1
 8013df4:	440a      	add	r2, r1
 8013df6:	4291      	cmp	r1, r2
 8013df8:	d100      	bne.n	8013dfc <memcpy+0xc>
 8013dfa:	bd10      	pop	{r4, pc}
 8013dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e04:	e7f7      	b.n	8013df6 <memcpy+0x6>

08013e06 <memset>:
 8013e06:	4402      	add	r2, r0
 8013e08:	4603      	mov	r3, r0
 8013e0a:	4293      	cmp	r3, r2
 8013e0c:	d100      	bne.n	8013e10 <memset+0xa>
 8013e0e:	4770      	bx	lr
 8013e10:	f803 1b01 	strb.w	r1, [r3], #1
 8013e14:	e7f9      	b.n	8013e0a <memset+0x4>

08013e16 <__cvt>:
 8013e16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e1a:	ec55 4b10 	vmov	r4, r5, d0
 8013e1e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013e20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013e24:	2d00      	cmp	r5, #0
 8013e26:	460e      	mov	r6, r1
 8013e28:	4691      	mov	r9, r2
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	bfb8      	it	lt
 8013e2e:	4622      	movlt	r2, r4
 8013e30:	462b      	mov	r3, r5
 8013e32:	f027 0720 	bic.w	r7, r7, #32
 8013e36:	bfbb      	ittet	lt
 8013e38:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013e3c:	461d      	movlt	r5, r3
 8013e3e:	2300      	movge	r3, #0
 8013e40:	232d      	movlt	r3, #45	; 0x2d
 8013e42:	bfb8      	it	lt
 8013e44:	4614      	movlt	r4, r2
 8013e46:	2f46      	cmp	r7, #70	; 0x46
 8013e48:	700b      	strb	r3, [r1, #0]
 8013e4a:	d004      	beq.n	8013e56 <__cvt+0x40>
 8013e4c:	2f45      	cmp	r7, #69	; 0x45
 8013e4e:	d100      	bne.n	8013e52 <__cvt+0x3c>
 8013e50:	3601      	adds	r6, #1
 8013e52:	2102      	movs	r1, #2
 8013e54:	e000      	b.n	8013e58 <__cvt+0x42>
 8013e56:	2103      	movs	r1, #3
 8013e58:	ab03      	add	r3, sp, #12
 8013e5a:	9301      	str	r3, [sp, #4]
 8013e5c:	ab02      	add	r3, sp, #8
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	4632      	mov	r2, r6
 8013e62:	4653      	mov	r3, sl
 8013e64:	ec45 4b10 	vmov	d0, r4, r5
 8013e68:	f001 fdfe 	bl	8015a68 <_dtoa_r>
 8013e6c:	2f47      	cmp	r7, #71	; 0x47
 8013e6e:	4680      	mov	r8, r0
 8013e70:	d102      	bne.n	8013e78 <__cvt+0x62>
 8013e72:	f019 0f01 	tst.w	r9, #1
 8013e76:	d026      	beq.n	8013ec6 <__cvt+0xb0>
 8013e78:	2f46      	cmp	r7, #70	; 0x46
 8013e7a:	eb08 0906 	add.w	r9, r8, r6
 8013e7e:	d111      	bne.n	8013ea4 <__cvt+0x8e>
 8013e80:	f898 3000 	ldrb.w	r3, [r8]
 8013e84:	2b30      	cmp	r3, #48	; 0x30
 8013e86:	d10a      	bne.n	8013e9e <__cvt+0x88>
 8013e88:	2200      	movs	r2, #0
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	4629      	mov	r1, r5
 8013e90:	f7ec fe32 	bl	8000af8 <__aeabi_dcmpeq>
 8013e94:	b918      	cbnz	r0, 8013e9e <__cvt+0x88>
 8013e96:	f1c6 0601 	rsb	r6, r6, #1
 8013e9a:	f8ca 6000 	str.w	r6, [sl]
 8013e9e:	f8da 3000 	ldr.w	r3, [sl]
 8013ea2:	4499      	add	r9, r3
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	4629      	mov	r1, r5
 8013eac:	f7ec fe24 	bl	8000af8 <__aeabi_dcmpeq>
 8013eb0:	b938      	cbnz	r0, 8013ec2 <__cvt+0xac>
 8013eb2:	2230      	movs	r2, #48	; 0x30
 8013eb4:	9b03      	ldr	r3, [sp, #12]
 8013eb6:	454b      	cmp	r3, r9
 8013eb8:	d205      	bcs.n	8013ec6 <__cvt+0xb0>
 8013eba:	1c59      	adds	r1, r3, #1
 8013ebc:	9103      	str	r1, [sp, #12]
 8013ebe:	701a      	strb	r2, [r3, #0]
 8013ec0:	e7f8      	b.n	8013eb4 <__cvt+0x9e>
 8013ec2:	f8cd 900c 	str.w	r9, [sp, #12]
 8013ec6:	9b03      	ldr	r3, [sp, #12]
 8013ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013eca:	eba3 0308 	sub.w	r3, r3, r8
 8013ece:	4640      	mov	r0, r8
 8013ed0:	6013      	str	r3, [r2, #0]
 8013ed2:	b004      	add	sp, #16
 8013ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013ed8 <__exponent>:
 8013ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013eda:	2900      	cmp	r1, #0
 8013edc:	4604      	mov	r4, r0
 8013ede:	bfba      	itte	lt
 8013ee0:	4249      	neglt	r1, r1
 8013ee2:	232d      	movlt	r3, #45	; 0x2d
 8013ee4:	232b      	movge	r3, #43	; 0x2b
 8013ee6:	2909      	cmp	r1, #9
 8013ee8:	f804 2b02 	strb.w	r2, [r4], #2
 8013eec:	7043      	strb	r3, [r0, #1]
 8013eee:	dd20      	ble.n	8013f32 <__exponent+0x5a>
 8013ef0:	f10d 0307 	add.w	r3, sp, #7
 8013ef4:	461f      	mov	r7, r3
 8013ef6:	260a      	movs	r6, #10
 8013ef8:	fb91 f5f6 	sdiv	r5, r1, r6
 8013efc:	fb06 1115 	mls	r1, r6, r5, r1
 8013f00:	3130      	adds	r1, #48	; 0x30
 8013f02:	2d09      	cmp	r5, #9
 8013f04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013f08:	f103 32ff 	add.w	r2, r3, #4294967295
 8013f0c:	4629      	mov	r1, r5
 8013f0e:	dc09      	bgt.n	8013f24 <__exponent+0x4c>
 8013f10:	3130      	adds	r1, #48	; 0x30
 8013f12:	3b02      	subs	r3, #2
 8013f14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013f18:	42bb      	cmp	r3, r7
 8013f1a:	4622      	mov	r2, r4
 8013f1c:	d304      	bcc.n	8013f28 <__exponent+0x50>
 8013f1e:	1a10      	subs	r0, r2, r0
 8013f20:	b003      	add	sp, #12
 8013f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f24:	4613      	mov	r3, r2
 8013f26:	e7e7      	b.n	8013ef8 <__exponent+0x20>
 8013f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f2c:	f804 2b01 	strb.w	r2, [r4], #1
 8013f30:	e7f2      	b.n	8013f18 <__exponent+0x40>
 8013f32:	2330      	movs	r3, #48	; 0x30
 8013f34:	4419      	add	r1, r3
 8013f36:	7083      	strb	r3, [r0, #2]
 8013f38:	1d02      	adds	r2, r0, #4
 8013f3a:	70c1      	strb	r1, [r0, #3]
 8013f3c:	e7ef      	b.n	8013f1e <__exponent+0x46>
	...

08013f40 <_printf_float>:
 8013f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f44:	b08d      	sub	sp, #52	; 0x34
 8013f46:	460c      	mov	r4, r1
 8013f48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013f4c:	4616      	mov	r6, r2
 8013f4e:	461f      	mov	r7, r3
 8013f50:	4605      	mov	r5, r0
 8013f52:	f002 fe7b 	bl	8016c4c <_localeconv_r>
 8013f56:	6803      	ldr	r3, [r0, #0]
 8013f58:	9304      	str	r3, [sp, #16]
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7ec f950 	bl	8000200 <strlen>
 8013f60:	2300      	movs	r3, #0
 8013f62:	930a      	str	r3, [sp, #40]	; 0x28
 8013f64:	f8d8 3000 	ldr.w	r3, [r8]
 8013f68:	9005      	str	r0, [sp, #20]
 8013f6a:	3307      	adds	r3, #7
 8013f6c:	f023 0307 	bic.w	r3, r3, #7
 8013f70:	f103 0208 	add.w	r2, r3, #8
 8013f74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013f78:	f8d4 b000 	ldr.w	fp, [r4]
 8013f7c:	f8c8 2000 	str.w	r2, [r8]
 8013f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013f88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013f8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013f90:	9307      	str	r3, [sp, #28]
 8013f92:	f8cd 8018 	str.w	r8, [sp, #24]
 8013f96:	f04f 32ff 	mov.w	r2, #4294967295
 8013f9a:	4ba7      	ldr	r3, [pc, #668]	; (8014238 <_printf_float+0x2f8>)
 8013f9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fa0:	f7ec fddc 	bl	8000b5c <__aeabi_dcmpun>
 8013fa4:	bb70      	cbnz	r0, 8014004 <_printf_float+0xc4>
 8013fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8013faa:	4ba3      	ldr	r3, [pc, #652]	; (8014238 <_printf_float+0x2f8>)
 8013fac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fb0:	f7ec fdb6 	bl	8000b20 <__aeabi_dcmple>
 8013fb4:	bb30      	cbnz	r0, 8014004 <_printf_float+0xc4>
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	2300      	movs	r3, #0
 8013fba:	4640      	mov	r0, r8
 8013fbc:	4649      	mov	r1, r9
 8013fbe:	f7ec fda5 	bl	8000b0c <__aeabi_dcmplt>
 8013fc2:	b110      	cbz	r0, 8013fca <_printf_float+0x8a>
 8013fc4:	232d      	movs	r3, #45	; 0x2d
 8013fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fca:	4a9c      	ldr	r2, [pc, #624]	; (801423c <_printf_float+0x2fc>)
 8013fcc:	4b9c      	ldr	r3, [pc, #624]	; (8014240 <_printf_float+0x300>)
 8013fce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013fd2:	bf8c      	ite	hi
 8013fd4:	4690      	movhi	r8, r2
 8013fd6:	4698      	movls	r8, r3
 8013fd8:	2303      	movs	r3, #3
 8013fda:	f02b 0204 	bic.w	r2, fp, #4
 8013fde:	6123      	str	r3, [r4, #16]
 8013fe0:	6022      	str	r2, [r4, #0]
 8013fe2:	f04f 0900 	mov.w	r9, #0
 8013fe6:	9700      	str	r7, [sp, #0]
 8013fe8:	4633      	mov	r3, r6
 8013fea:	aa0b      	add	r2, sp, #44	; 0x2c
 8013fec:	4621      	mov	r1, r4
 8013fee:	4628      	mov	r0, r5
 8013ff0:	f000 f9e6 	bl	80143c0 <_printf_common>
 8013ff4:	3001      	adds	r0, #1
 8013ff6:	f040 808d 	bne.w	8014114 <_printf_float+0x1d4>
 8013ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8013ffe:	b00d      	add	sp, #52	; 0x34
 8014000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014004:	4642      	mov	r2, r8
 8014006:	464b      	mov	r3, r9
 8014008:	4640      	mov	r0, r8
 801400a:	4649      	mov	r1, r9
 801400c:	f7ec fda6 	bl	8000b5c <__aeabi_dcmpun>
 8014010:	b110      	cbz	r0, 8014018 <_printf_float+0xd8>
 8014012:	4a8c      	ldr	r2, [pc, #560]	; (8014244 <_printf_float+0x304>)
 8014014:	4b8c      	ldr	r3, [pc, #560]	; (8014248 <_printf_float+0x308>)
 8014016:	e7da      	b.n	8013fce <_printf_float+0x8e>
 8014018:	6861      	ldr	r1, [r4, #4]
 801401a:	1c4b      	adds	r3, r1, #1
 801401c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014020:	a80a      	add	r0, sp, #40	; 0x28
 8014022:	d13e      	bne.n	80140a2 <_printf_float+0x162>
 8014024:	2306      	movs	r3, #6
 8014026:	6063      	str	r3, [r4, #4]
 8014028:	2300      	movs	r3, #0
 801402a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801402e:	ab09      	add	r3, sp, #36	; 0x24
 8014030:	9300      	str	r3, [sp, #0]
 8014032:	ec49 8b10 	vmov	d0, r8, r9
 8014036:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801403a:	6022      	str	r2, [r4, #0]
 801403c:	f8cd a004 	str.w	sl, [sp, #4]
 8014040:	6861      	ldr	r1, [r4, #4]
 8014042:	4628      	mov	r0, r5
 8014044:	f7ff fee7 	bl	8013e16 <__cvt>
 8014048:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801404c:	2b47      	cmp	r3, #71	; 0x47
 801404e:	4680      	mov	r8, r0
 8014050:	d109      	bne.n	8014066 <_printf_float+0x126>
 8014052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014054:	1cd8      	adds	r0, r3, #3
 8014056:	db02      	blt.n	801405e <_printf_float+0x11e>
 8014058:	6862      	ldr	r2, [r4, #4]
 801405a:	4293      	cmp	r3, r2
 801405c:	dd47      	ble.n	80140ee <_printf_float+0x1ae>
 801405e:	f1aa 0a02 	sub.w	sl, sl, #2
 8014062:	fa5f fa8a 	uxtb.w	sl, sl
 8014066:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801406a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801406c:	d824      	bhi.n	80140b8 <_printf_float+0x178>
 801406e:	3901      	subs	r1, #1
 8014070:	4652      	mov	r2, sl
 8014072:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014076:	9109      	str	r1, [sp, #36]	; 0x24
 8014078:	f7ff ff2e 	bl	8013ed8 <__exponent>
 801407c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801407e:	1813      	adds	r3, r2, r0
 8014080:	2a01      	cmp	r2, #1
 8014082:	4681      	mov	r9, r0
 8014084:	6123      	str	r3, [r4, #16]
 8014086:	dc02      	bgt.n	801408e <_printf_float+0x14e>
 8014088:	6822      	ldr	r2, [r4, #0]
 801408a:	07d1      	lsls	r1, r2, #31
 801408c:	d501      	bpl.n	8014092 <_printf_float+0x152>
 801408e:	3301      	adds	r3, #1
 8014090:	6123      	str	r3, [r4, #16]
 8014092:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014096:	2b00      	cmp	r3, #0
 8014098:	d0a5      	beq.n	8013fe6 <_printf_float+0xa6>
 801409a:	232d      	movs	r3, #45	; 0x2d
 801409c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140a0:	e7a1      	b.n	8013fe6 <_printf_float+0xa6>
 80140a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80140a6:	f000 8177 	beq.w	8014398 <_printf_float+0x458>
 80140aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80140ae:	d1bb      	bne.n	8014028 <_printf_float+0xe8>
 80140b0:	2900      	cmp	r1, #0
 80140b2:	d1b9      	bne.n	8014028 <_printf_float+0xe8>
 80140b4:	2301      	movs	r3, #1
 80140b6:	e7b6      	b.n	8014026 <_printf_float+0xe6>
 80140b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80140bc:	d119      	bne.n	80140f2 <_printf_float+0x1b2>
 80140be:	2900      	cmp	r1, #0
 80140c0:	6863      	ldr	r3, [r4, #4]
 80140c2:	dd0c      	ble.n	80140de <_printf_float+0x19e>
 80140c4:	6121      	str	r1, [r4, #16]
 80140c6:	b913      	cbnz	r3, 80140ce <_printf_float+0x18e>
 80140c8:	6822      	ldr	r2, [r4, #0]
 80140ca:	07d2      	lsls	r2, r2, #31
 80140cc:	d502      	bpl.n	80140d4 <_printf_float+0x194>
 80140ce:	3301      	adds	r3, #1
 80140d0:	440b      	add	r3, r1
 80140d2:	6123      	str	r3, [r4, #16]
 80140d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80140d8:	f04f 0900 	mov.w	r9, #0
 80140dc:	e7d9      	b.n	8014092 <_printf_float+0x152>
 80140de:	b913      	cbnz	r3, 80140e6 <_printf_float+0x1a6>
 80140e0:	6822      	ldr	r2, [r4, #0]
 80140e2:	07d0      	lsls	r0, r2, #31
 80140e4:	d501      	bpl.n	80140ea <_printf_float+0x1aa>
 80140e6:	3302      	adds	r3, #2
 80140e8:	e7f3      	b.n	80140d2 <_printf_float+0x192>
 80140ea:	2301      	movs	r3, #1
 80140ec:	e7f1      	b.n	80140d2 <_printf_float+0x192>
 80140ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80140f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80140f6:	4293      	cmp	r3, r2
 80140f8:	db05      	blt.n	8014106 <_printf_float+0x1c6>
 80140fa:	6822      	ldr	r2, [r4, #0]
 80140fc:	6123      	str	r3, [r4, #16]
 80140fe:	07d1      	lsls	r1, r2, #31
 8014100:	d5e8      	bpl.n	80140d4 <_printf_float+0x194>
 8014102:	3301      	adds	r3, #1
 8014104:	e7e5      	b.n	80140d2 <_printf_float+0x192>
 8014106:	2b00      	cmp	r3, #0
 8014108:	bfd4      	ite	le
 801410a:	f1c3 0302 	rsble	r3, r3, #2
 801410e:	2301      	movgt	r3, #1
 8014110:	4413      	add	r3, r2
 8014112:	e7de      	b.n	80140d2 <_printf_float+0x192>
 8014114:	6823      	ldr	r3, [r4, #0]
 8014116:	055a      	lsls	r2, r3, #21
 8014118:	d407      	bmi.n	801412a <_printf_float+0x1ea>
 801411a:	6923      	ldr	r3, [r4, #16]
 801411c:	4642      	mov	r2, r8
 801411e:	4631      	mov	r1, r6
 8014120:	4628      	mov	r0, r5
 8014122:	47b8      	blx	r7
 8014124:	3001      	adds	r0, #1
 8014126:	d12b      	bne.n	8014180 <_printf_float+0x240>
 8014128:	e767      	b.n	8013ffa <_printf_float+0xba>
 801412a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801412e:	f240 80dc 	bls.w	80142ea <_printf_float+0x3aa>
 8014132:	2200      	movs	r2, #0
 8014134:	2300      	movs	r3, #0
 8014136:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801413a:	f7ec fcdd 	bl	8000af8 <__aeabi_dcmpeq>
 801413e:	2800      	cmp	r0, #0
 8014140:	d033      	beq.n	80141aa <_printf_float+0x26a>
 8014142:	2301      	movs	r3, #1
 8014144:	4a41      	ldr	r2, [pc, #260]	; (801424c <_printf_float+0x30c>)
 8014146:	4631      	mov	r1, r6
 8014148:	4628      	mov	r0, r5
 801414a:	47b8      	blx	r7
 801414c:	3001      	adds	r0, #1
 801414e:	f43f af54 	beq.w	8013ffa <_printf_float+0xba>
 8014152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014156:	429a      	cmp	r2, r3
 8014158:	db02      	blt.n	8014160 <_printf_float+0x220>
 801415a:	6823      	ldr	r3, [r4, #0]
 801415c:	07d8      	lsls	r0, r3, #31
 801415e:	d50f      	bpl.n	8014180 <_printf_float+0x240>
 8014160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014164:	4631      	mov	r1, r6
 8014166:	4628      	mov	r0, r5
 8014168:	47b8      	blx	r7
 801416a:	3001      	adds	r0, #1
 801416c:	f43f af45 	beq.w	8013ffa <_printf_float+0xba>
 8014170:	f04f 0800 	mov.w	r8, #0
 8014174:	f104 091a 	add.w	r9, r4, #26
 8014178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801417a:	3b01      	subs	r3, #1
 801417c:	4543      	cmp	r3, r8
 801417e:	dc09      	bgt.n	8014194 <_printf_float+0x254>
 8014180:	6823      	ldr	r3, [r4, #0]
 8014182:	079b      	lsls	r3, r3, #30
 8014184:	f100 8103 	bmi.w	801438e <_printf_float+0x44e>
 8014188:	68e0      	ldr	r0, [r4, #12]
 801418a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801418c:	4298      	cmp	r0, r3
 801418e:	bfb8      	it	lt
 8014190:	4618      	movlt	r0, r3
 8014192:	e734      	b.n	8013ffe <_printf_float+0xbe>
 8014194:	2301      	movs	r3, #1
 8014196:	464a      	mov	r2, r9
 8014198:	4631      	mov	r1, r6
 801419a:	4628      	mov	r0, r5
 801419c:	47b8      	blx	r7
 801419e:	3001      	adds	r0, #1
 80141a0:	f43f af2b 	beq.w	8013ffa <_printf_float+0xba>
 80141a4:	f108 0801 	add.w	r8, r8, #1
 80141a8:	e7e6      	b.n	8014178 <_printf_float+0x238>
 80141aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	dc2b      	bgt.n	8014208 <_printf_float+0x2c8>
 80141b0:	2301      	movs	r3, #1
 80141b2:	4a26      	ldr	r2, [pc, #152]	; (801424c <_printf_float+0x30c>)
 80141b4:	4631      	mov	r1, r6
 80141b6:	4628      	mov	r0, r5
 80141b8:	47b8      	blx	r7
 80141ba:	3001      	adds	r0, #1
 80141bc:	f43f af1d 	beq.w	8013ffa <_printf_float+0xba>
 80141c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c2:	b923      	cbnz	r3, 80141ce <_printf_float+0x28e>
 80141c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141c6:	b913      	cbnz	r3, 80141ce <_printf_float+0x28e>
 80141c8:	6823      	ldr	r3, [r4, #0]
 80141ca:	07d9      	lsls	r1, r3, #31
 80141cc:	d5d8      	bpl.n	8014180 <_printf_float+0x240>
 80141ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141d2:	4631      	mov	r1, r6
 80141d4:	4628      	mov	r0, r5
 80141d6:	47b8      	blx	r7
 80141d8:	3001      	adds	r0, #1
 80141da:	f43f af0e 	beq.w	8013ffa <_printf_float+0xba>
 80141de:	f04f 0900 	mov.w	r9, #0
 80141e2:	f104 0a1a 	add.w	sl, r4, #26
 80141e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141e8:	425b      	negs	r3, r3
 80141ea:	454b      	cmp	r3, r9
 80141ec:	dc01      	bgt.n	80141f2 <_printf_float+0x2b2>
 80141ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141f0:	e794      	b.n	801411c <_printf_float+0x1dc>
 80141f2:	2301      	movs	r3, #1
 80141f4:	4652      	mov	r2, sl
 80141f6:	4631      	mov	r1, r6
 80141f8:	4628      	mov	r0, r5
 80141fa:	47b8      	blx	r7
 80141fc:	3001      	adds	r0, #1
 80141fe:	f43f aefc 	beq.w	8013ffa <_printf_float+0xba>
 8014202:	f109 0901 	add.w	r9, r9, #1
 8014206:	e7ee      	b.n	80141e6 <_printf_float+0x2a6>
 8014208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801420a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801420c:	429a      	cmp	r2, r3
 801420e:	bfa8      	it	ge
 8014210:	461a      	movge	r2, r3
 8014212:	2a00      	cmp	r2, #0
 8014214:	4691      	mov	r9, r2
 8014216:	dd07      	ble.n	8014228 <_printf_float+0x2e8>
 8014218:	4613      	mov	r3, r2
 801421a:	4631      	mov	r1, r6
 801421c:	4642      	mov	r2, r8
 801421e:	4628      	mov	r0, r5
 8014220:	47b8      	blx	r7
 8014222:	3001      	adds	r0, #1
 8014224:	f43f aee9 	beq.w	8013ffa <_printf_float+0xba>
 8014228:	f104 031a 	add.w	r3, r4, #26
 801422c:	f04f 0b00 	mov.w	fp, #0
 8014230:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014234:	9306      	str	r3, [sp, #24]
 8014236:	e015      	b.n	8014264 <_printf_float+0x324>
 8014238:	7fefffff 	.word	0x7fefffff
 801423c:	080189bc 	.word	0x080189bc
 8014240:	080189b8 	.word	0x080189b8
 8014244:	080189c4 	.word	0x080189c4
 8014248:	080189c0 	.word	0x080189c0
 801424c:	08018be3 	.word	0x08018be3
 8014250:	2301      	movs	r3, #1
 8014252:	9a06      	ldr	r2, [sp, #24]
 8014254:	4631      	mov	r1, r6
 8014256:	4628      	mov	r0, r5
 8014258:	47b8      	blx	r7
 801425a:	3001      	adds	r0, #1
 801425c:	f43f aecd 	beq.w	8013ffa <_printf_float+0xba>
 8014260:	f10b 0b01 	add.w	fp, fp, #1
 8014264:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014268:	ebaa 0309 	sub.w	r3, sl, r9
 801426c:	455b      	cmp	r3, fp
 801426e:	dcef      	bgt.n	8014250 <_printf_float+0x310>
 8014270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014274:	429a      	cmp	r2, r3
 8014276:	44d0      	add	r8, sl
 8014278:	db15      	blt.n	80142a6 <_printf_float+0x366>
 801427a:	6823      	ldr	r3, [r4, #0]
 801427c:	07da      	lsls	r2, r3, #31
 801427e:	d412      	bmi.n	80142a6 <_printf_float+0x366>
 8014280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014282:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014284:	eba3 020a 	sub.w	r2, r3, sl
 8014288:	eba3 0a01 	sub.w	sl, r3, r1
 801428c:	4592      	cmp	sl, r2
 801428e:	bfa8      	it	ge
 8014290:	4692      	movge	sl, r2
 8014292:	f1ba 0f00 	cmp.w	sl, #0
 8014296:	dc0e      	bgt.n	80142b6 <_printf_float+0x376>
 8014298:	f04f 0800 	mov.w	r8, #0
 801429c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80142a0:	f104 091a 	add.w	r9, r4, #26
 80142a4:	e019      	b.n	80142da <_printf_float+0x39a>
 80142a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142aa:	4631      	mov	r1, r6
 80142ac:	4628      	mov	r0, r5
 80142ae:	47b8      	blx	r7
 80142b0:	3001      	adds	r0, #1
 80142b2:	d1e5      	bne.n	8014280 <_printf_float+0x340>
 80142b4:	e6a1      	b.n	8013ffa <_printf_float+0xba>
 80142b6:	4653      	mov	r3, sl
 80142b8:	4642      	mov	r2, r8
 80142ba:	4631      	mov	r1, r6
 80142bc:	4628      	mov	r0, r5
 80142be:	47b8      	blx	r7
 80142c0:	3001      	adds	r0, #1
 80142c2:	d1e9      	bne.n	8014298 <_printf_float+0x358>
 80142c4:	e699      	b.n	8013ffa <_printf_float+0xba>
 80142c6:	2301      	movs	r3, #1
 80142c8:	464a      	mov	r2, r9
 80142ca:	4631      	mov	r1, r6
 80142cc:	4628      	mov	r0, r5
 80142ce:	47b8      	blx	r7
 80142d0:	3001      	adds	r0, #1
 80142d2:	f43f ae92 	beq.w	8013ffa <_printf_float+0xba>
 80142d6:	f108 0801 	add.w	r8, r8, #1
 80142da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142de:	1a9b      	subs	r3, r3, r2
 80142e0:	eba3 030a 	sub.w	r3, r3, sl
 80142e4:	4543      	cmp	r3, r8
 80142e6:	dcee      	bgt.n	80142c6 <_printf_float+0x386>
 80142e8:	e74a      	b.n	8014180 <_printf_float+0x240>
 80142ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142ec:	2a01      	cmp	r2, #1
 80142ee:	dc01      	bgt.n	80142f4 <_printf_float+0x3b4>
 80142f0:	07db      	lsls	r3, r3, #31
 80142f2:	d53a      	bpl.n	801436a <_printf_float+0x42a>
 80142f4:	2301      	movs	r3, #1
 80142f6:	4642      	mov	r2, r8
 80142f8:	4631      	mov	r1, r6
 80142fa:	4628      	mov	r0, r5
 80142fc:	47b8      	blx	r7
 80142fe:	3001      	adds	r0, #1
 8014300:	f43f ae7b 	beq.w	8013ffa <_printf_float+0xba>
 8014304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014308:	4631      	mov	r1, r6
 801430a:	4628      	mov	r0, r5
 801430c:	47b8      	blx	r7
 801430e:	3001      	adds	r0, #1
 8014310:	f108 0801 	add.w	r8, r8, #1
 8014314:	f43f ae71 	beq.w	8013ffa <_printf_float+0xba>
 8014318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801431a:	2200      	movs	r2, #0
 801431c:	f103 3aff 	add.w	sl, r3, #4294967295
 8014320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014324:	2300      	movs	r3, #0
 8014326:	f7ec fbe7 	bl	8000af8 <__aeabi_dcmpeq>
 801432a:	b9c8      	cbnz	r0, 8014360 <_printf_float+0x420>
 801432c:	4653      	mov	r3, sl
 801432e:	4642      	mov	r2, r8
 8014330:	4631      	mov	r1, r6
 8014332:	4628      	mov	r0, r5
 8014334:	47b8      	blx	r7
 8014336:	3001      	adds	r0, #1
 8014338:	d10e      	bne.n	8014358 <_printf_float+0x418>
 801433a:	e65e      	b.n	8013ffa <_printf_float+0xba>
 801433c:	2301      	movs	r3, #1
 801433e:	4652      	mov	r2, sl
 8014340:	4631      	mov	r1, r6
 8014342:	4628      	mov	r0, r5
 8014344:	47b8      	blx	r7
 8014346:	3001      	adds	r0, #1
 8014348:	f43f ae57 	beq.w	8013ffa <_printf_float+0xba>
 801434c:	f108 0801 	add.w	r8, r8, #1
 8014350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014352:	3b01      	subs	r3, #1
 8014354:	4543      	cmp	r3, r8
 8014356:	dcf1      	bgt.n	801433c <_printf_float+0x3fc>
 8014358:	464b      	mov	r3, r9
 801435a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801435e:	e6de      	b.n	801411e <_printf_float+0x1de>
 8014360:	f04f 0800 	mov.w	r8, #0
 8014364:	f104 0a1a 	add.w	sl, r4, #26
 8014368:	e7f2      	b.n	8014350 <_printf_float+0x410>
 801436a:	2301      	movs	r3, #1
 801436c:	e7df      	b.n	801432e <_printf_float+0x3ee>
 801436e:	2301      	movs	r3, #1
 8014370:	464a      	mov	r2, r9
 8014372:	4631      	mov	r1, r6
 8014374:	4628      	mov	r0, r5
 8014376:	47b8      	blx	r7
 8014378:	3001      	adds	r0, #1
 801437a:	f43f ae3e 	beq.w	8013ffa <_printf_float+0xba>
 801437e:	f108 0801 	add.w	r8, r8, #1
 8014382:	68e3      	ldr	r3, [r4, #12]
 8014384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014386:	1a9b      	subs	r3, r3, r2
 8014388:	4543      	cmp	r3, r8
 801438a:	dcf0      	bgt.n	801436e <_printf_float+0x42e>
 801438c:	e6fc      	b.n	8014188 <_printf_float+0x248>
 801438e:	f04f 0800 	mov.w	r8, #0
 8014392:	f104 0919 	add.w	r9, r4, #25
 8014396:	e7f4      	b.n	8014382 <_printf_float+0x442>
 8014398:	2900      	cmp	r1, #0
 801439a:	f43f ae8b 	beq.w	80140b4 <_printf_float+0x174>
 801439e:	2300      	movs	r3, #0
 80143a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80143a4:	ab09      	add	r3, sp, #36	; 0x24
 80143a6:	9300      	str	r3, [sp, #0]
 80143a8:	ec49 8b10 	vmov	d0, r8, r9
 80143ac:	6022      	str	r2, [r4, #0]
 80143ae:	f8cd a004 	str.w	sl, [sp, #4]
 80143b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80143b6:	4628      	mov	r0, r5
 80143b8:	f7ff fd2d 	bl	8013e16 <__cvt>
 80143bc:	4680      	mov	r8, r0
 80143be:	e648      	b.n	8014052 <_printf_float+0x112>

080143c0 <_printf_common>:
 80143c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143c4:	4691      	mov	r9, r2
 80143c6:	461f      	mov	r7, r3
 80143c8:	688a      	ldr	r2, [r1, #8]
 80143ca:	690b      	ldr	r3, [r1, #16]
 80143cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143d0:	4293      	cmp	r3, r2
 80143d2:	bfb8      	it	lt
 80143d4:	4613      	movlt	r3, r2
 80143d6:	f8c9 3000 	str.w	r3, [r9]
 80143da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143de:	4606      	mov	r6, r0
 80143e0:	460c      	mov	r4, r1
 80143e2:	b112      	cbz	r2, 80143ea <_printf_common+0x2a>
 80143e4:	3301      	adds	r3, #1
 80143e6:	f8c9 3000 	str.w	r3, [r9]
 80143ea:	6823      	ldr	r3, [r4, #0]
 80143ec:	0699      	lsls	r1, r3, #26
 80143ee:	bf42      	ittt	mi
 80143f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80143f4:	3302      	addmi	r3, #2
 80143f6:	f8c9 3000 	strmi.w	r3, [r9]
 80143fa:	6825      	ldr	r5, [r4, #0]
 80143fc:	f015 0506 	ands.w	r5, r5, #6
 8014400:	d107      	bne.n	8014412 <_printf_common+0x52>
 8014402:	f104 0a19 	add.w	sl, r4, #25
 8014406:	68e3      	ldr	r3, [r4, #12]
 8014408:	f8d9 2000 	ldr.w	r2, [r9]
 801440c:	1a9b      	subs	r3, r3, r2
 801440e:	42ab      	cmp	r3, r5
 8014410:	dc28      	bgt.n	8014464 <_printf_common+0xa4>
 8014412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014416:	6822      	ldr	r2, [r4, #0]
 8014418:	3300      	adds	r3, #0
 801441a:	bf18      	it	ne
 801441c:	2301      	movne	r3, #1
 801441e:	0692      	lsls	r2, r2, #26
 8014420:	d42d      	bmi.n	801447e <_printf_common+0xbe>
 8014422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014426:	4639      	mov	r1, r7
 8014428:	4630      	mov	r0, r6
 801442a:	47c0      	blx	r8
 801442c:	3001      	adds	r0, #1
 801442e:	d020      	beq.n	8014472 <_printf_common+0xb2>
 8014430:	6823      	ldr	r3, [r4, #0]
 8014432:	68e5      	ldr	r5, [r4, #12]
 8014434:	f8d9 2000 	ldr.w	r2, [r9]
 8014438:	f003 0306 	and.w	r3, r3, #6
 801443c:	2b04      	cmp	r3, #4
 801443e:	bf08      	it	eq
 8014440:	1aad      	subeq	r5, r5, r2
 8014442:	68a3      	ldr	r3, [r4, #8]
 8014444:	6922      	ldr	r2, [r4, #16]
 8014446:	bf0c      	ite	eq
 8014448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801444c:	2500      	movne	r5, #0
 801444e:	4293      	cmp	r3, r2
 8014450:	bfc4      	itt	gt
 8014452:	1a9b      	subgt	r3, r3, r2
 8014454:	18ed      	addgt	r5, r5, r3
 8014456:	f04f 0900 	mov.w	r9, #0
 801445a:	341a      	adds	r4, #26
 801445c:	454d      	cmp	r5, r9
 801445e:	d11a      	bne.n	8014496 <_printf_common+0xd6>
 8014460:	2000      	movs	r0, #0
 8014462:	e008      	b.n	8014476 <_printf_common+0xb6>
 8014464:	2301      	movs	r3, #1
 8014466:	4652      	mov	r2, sl
 8014468:	4639      	mov	r1, r7
 801446a:	4630      	mov	r0, r6
 801446c:	47c0      	blx	r8
 801446e:	3001      	adds	r0, #1
 8014470:	d103      	bne.n	801447a <_printf_common+0xba>
 8014472:	f04f 30ff 	mov.w	r0, #4294967295
 8014476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801447a:	3501      	adds	r5, #1
 801447c:	e7c3      	b.n	8014406 <_printf_common+0x46>
 801447e:	18e1      	adds	r1, r4, r3
 8014480:	1c5a      	adds	r2, r3, #1
 8014482:	2030      	movs	r0, #48	; 0x30
 8014484:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014488:	4422      	add	r2, r4
 801448a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801448e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014492:	3302      	adds	r3, #2
 8014494:	e7c5      	b.n	8014422 <_printf_common+0x62>
 8014496:	2301      	movs	r3, #1
 8014498:	4622      	mov	r2, r4
 801449a:	4639      	mov	r1, r7
 801449c:	4630      	mov	r0, r6
 801449e:	47c0      	blx	r8
 80144a0:	3001      	adds	r0, #1
 80144a2:	d0e6      	beq.n	8014472 <_printf_common+0xb2>
 80144a4:	f109 0901 	add.w	r9, r9, #1
 80144a8:	e7d8      	b.n	801445c <_printf_common+0x9c>
	...

080144ac <_printf_i>:
 80144ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80144b4:	460c      	mov	r4, r1
 80144b6:	7e09      	ldrb	r1, [r1, #24]
 80144b8:	b085      	sub	sp, #20
 80144ba:	296e      	cmp	r1, #110	; 0x6e
 80144bc:	4617      	mov	r7, r2
 80144be:	4606      	mov	r6, r0
 80144c0:	4698      	mov	r8, r3
 80144c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144c4:	f000 80b3 	beq.w	801462e <_printf_i+0x182>
 80144c8:	d822      	bhi.n	8014510 <_printf_i+0x64>
 80144ca:	2963      	cmp	r1, #99	; 0x63
 80144cc:	d036      	beq.n	801453c <_printf_i+0x90>
 80144ce:	d80a      	bhi.n	80144e6 <_printf_i+0x3a>
 80144d0:	2900      	cmp	r1, #0
 80144d2:	f000 80b9 	beq.w	8014648 <_printf_i+0x19c>
 80144d6:	2958      	cmp	r1, #88	; 0x58
 80144d8:	f000 8083 	beq.w	80145e2 <_printf_i+0x136>
 80144dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80144e4:	e032      	b.n	801454c <_printf_i+0xa0>
 80144e6:	2964      	cmp	r1, #100	; 0x64
 80144e8:	d001      	beq.n	80144ee <_printf_i+0x42>
 80144ea:	2969      	cmp	r1, #105	; 0x69
 80144ec:	d1f6      	bne.n	80144dc <_printf_i+0x30>
 80144ee:	6820      	ldr	r0, [r4, #0]
 80144f0:	6813      	ldr	r3, [r2, #0]
 80144f2:	0605      	lsls	r5, r0, #24
 80144f4:	f103 0104 	add.w	r1, r3, #4
 80144f8:	d52a      	bpl.n	8014550 <_printf_i+0xa4>
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	6011      	str	r1, [r2, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	da03      	bge.n	801450a <_printf_i+0x5e>
 8014502:	222d      	movs	r2, #45	; 0x2d
 8014504:	425b      	negs	r3, r3
 8014506:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801450a:	486f      	ldr	r0, [pc, #444]	; (80146c8 <_printf_i+0x21c>)
 801450c:	220a      	movs	r2, #10
 801450e:	e039      	b.n	8014584 <_printf_i+0xd8>
 8014510:	2973      	cmp	r1, #115	; 0x73
 8014512:	f000 809d 	beq.w	8014650 <_printf_i+0x1a4>
 8014516:	d808      	bhi.n	801452a <_printf_i+0x7e>
 8014518:	296f      	cmp	r1, #111	; 0x6f
 801451a:	d020      	beq.n	801455e <_printf_i+0xb2>
 801451c:	2970      	cmp	r1, #112	; 0x70
 801451e:	d1dd      	bne.n	80144dc <_printf_i+0x30>
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	f043 0320 	orr.w	r3, r3, #32
 8014526:	6023      	str	r3, [r4, #0]
 8014528:	e003      	b.n	8014532 <_printf_i+0x86>
 801452a:	2975      	cmp	r1, #117	; 0x75
 801452c:	d017      	beq.n	801455e <_printf_i+0xb2>
 801452e:	2978      	cmp	r1, #120	; 0x78
 8014530:	d1d4      	bne.n	80144dc <_printf_i+0x30>
 8014532:	2378      	movs	r3, #120	; 0x78
 8014534:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014538:	4864      	ldr	r0, [pc, #400]	; (80146cc <_printf_i+0x220>)
 801453a:	e055      	b.n	80145e8 <_printf_i+0x13c>
 801453c:	6813      	ldr	r3, [r2, #0]
 801453e:	1d19      	adds	r1, r3, #4
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	6011      	str	r1, [r2, #0]
 8014544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801454c:	2301      	movs	r3, #1
 801454e:	e08c      	b.n	801466a <_printf_i+0x1be>
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	6011      	str	r1, [r2, #0]
 8014554:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014558:	bf18      	it	ne
 801455a:	b21b      	sxthne	r3, r3
 801455c:	e7cf      	b.n	80144fe <_printf_i+0x52>
 801455e:	6813      	ldr	r3, [r2, #0]
 8014560:	6825      	ldr	r5, [r4, #0]
 8014562:	1d18      	adds	r0, r3, #4
 8014564:	6010      	str	r0, [r2, #0]
 8014566:	0628      	lsls	r0, r5, #24
 8014568:	d501      	bpl.n	801456e <_printf_i+0xc2>
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	e002      	b.n	8014574 <_printf_i+0xc8>
 801456e:	0668      	lsls	r0, r5, #25
 8014570:	d5fb      	bpl.n	801456a <_printf_i+0xbe>
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	4854      	ldr	r0, [pc, #336]	; (80146c8 <_printf_i+0x21c>)
 8014576:	296f      	cmp	r1, #111	; 0x6f
 8014578:	bf14      	ite	ne
 801457a:	220a      	movne	r2, #10
 801457c:	2208      	moveq	r2, #8
 801457e:	2100      	movs	r1, #0
 8014580:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014584:	6865      	ldr	r5, [r4, #4]
 8014586:	60a5      	str	r5, [r4, #8]
 8014588:	2d00      	cmp	r5, #0
 801458a:	f2c0 8095 	blt.w	80146b8 <_printf_i+0x20c>
 801458e:	6821      	ldr	r1, [r4, #0]
 8014590:	f021 0104 	bic.w	r1, r1, #4
 8014594:	6021      	str	r1, [r4, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d13d      	bne.n	8014616 <_printf_i+0x16a>
 801459a:	2d00      	cmp	r5, #0
 801459c:	f040 808e 	bne.w	80146bc <_printf_i+0x210>
 80145a0:	4665      	mov	r5, ip
 80145a2:	2a08      	cmp	r2, #8
 80145a4:	d10b      	bne.n	80145be <_printf_i+0x112>
 80145a6:	6823      	ldr	r3, [r4, #0]
 80145a8:	07db      	lsls	r3, r3, #31
 80145aa:	d508      	bpl.n	80145be <_printf_i+0x112>
 80145ac:	6923      	ldr	r3, [r4, #16]
 80145ae:	6862      	ldr	r2, [r4, #4]
 80145b0:	429a      	cmp	r2, r3
 80145b2:	bfde      	ittt	le
 80145b4:	2330      	movle	r3, #48	; 0x30
 80145b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80145ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80145be:	ebac 0305 	sub.w	r3, ip, r5
 80145c2:	6123      	str	r3, [r4, #16]
 80145c4:	f8cd 8000 	str.w	r8, [sp]
 80145c8:	463b      	mov	r3, r7
 80145ca:	aa03      	add	r2, sp, #12
 80145cc:	4621      	mov	r1, r4
 80145ce:	4630      	mov	r0, r6
 80145d0:	f7ff fef6 	bl	80143c0 <_printf_common>
 80145d4:	3001      	adds	r0, #1
 80145d6:	d14d      	bne.n	8014674 <_printf_i+0x1c8>
 80145d8:	f04f 30ff 	mov.w	r0, #4294967295
 80145dc:	b005      	add	sp, #20
 80145de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145e2:	4839      	ldr	r0, [pc, #228]	; (80146c8 <_printf_i+0x21c>)
 80145e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80145e8:	6813      	ldr	r3, [r2, #0]
 80145ea:	6821      	ldr	r1, [r4, #0]
 80145ec:	1d1d      	adds	r5, r3, #4
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	6015      	str	r5, [r2, #0]
 80145f2:	060a      	lsls	r2, r1, #24
 80145f4:	d50b      	bpl.n	801460e <_printf_i+0x162>
 80145f6:	07ca      	lsls	r2, r1, #31
 80145f8:	bf44      	itt	mi
 80145fa:	f041 0120 	orrmi.w	r1, r1, #32
 80145fe:	6021      	strmi	r1, [r4, #0]
 8014600:	b91b      	cbnz	r3, 801460a <_printf_i+0x15e>
 8014602:	6822      	ldr	r2, [r4, #0]
 8014604:	f022 0220 	bic.w	r2, r2, #32
 8014608:	6022      	str	r2, [r4, #0]
 801460a:	2210      	movs	r2, #16
 801460c:	e7b7      	b.n	801457e <_printf_i+0xd2>
 801460e:	064d      	lsls	r5, r1, #25
 8014610:	bf48      	it	mi
 8014612:	b29b      	uxthmi	r3, r3
 8014614:	e7ef      	b.n	80145f6 <_printf_i+0x14a>
 8014616:	4665      	mov	r5, ip
 8014618:	fbb3 f1f2 	udiv	r1, r3, r2
 801461c:	fb02 3311 	mls	r3, r2, r1, r3
 8014620:	5cc3      	ldrb	r3, [r0, r3]
 8014622:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014626:	460b      	mov	r3, r1
 8014628:	2900      	cmp	r1, #0
 801462a:	d1f5      	bne.n	8014618 <_printf_i+0x16c>
 801462c:	e7b9      	b.n	80145a2 <_printf_i+0xf6>
 801462e:	6813      	ldr	r3, [r2, #0]
 8014630:	6825      	ldr	r5, [r4, #0]
 8014632:	6961      	ldr	r1, [r4, #20]
 8014634:	1d18      	adds	r0, r3, #4
 8014636:	6010      	str	r0, [r2, #0]
 8014638:	0628      	lsls	r0, r5, #24
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	d501      	bpl.n	8014642 <_printf_i+0x196>
 801463e:	6019      	str	r1, [r3, #0]
 8014640:	e002      	b.n	8014648 <_printf_i+0x19c>
 8014642:	066a      	lsls	r2, r5, #25
 8014644:	d5fb      	bpl.n	801463e <_printf_i+0x192>
 8014646:	8019      	strh	r1, [r3, #0]
 8014648:	2300      	movs	r3, #0
 801464a:	6123      	str	r3, [r4, #16]
 801464c:	4665      	mov	r5, ip
 801464e:	e7b9      	b.n	80145c4 <_printf_i+0x118>
 8014650:	6813      	ldr	r3, [r2, #0]
 8014652:	1d19      	adds	r1, r3, #4
 8014654:	6011      	str	r1, [r2, #0]
 8014656:	681d      	ldr	r5, [r3, #0]
 8014658:	6862      	ldr	r2, [r4, #4]
 801465a:	2100      	movs	r1, #0
 801465c:	4628      	mov	r0, r5
 801465e:	f7eb fdd7 	bl	8000210 <memchr>
 8014662:	b108      	cbz	r0, 8014668 <_printf_i+0x1bc>
 8014664:	1b40      	subs	r0, r0, r5
 8014666:	6060      	str	r0, [r4, #4]
 8014668:	6863      	ldr	r3, [r4, #4]
 801466a:	6123      	str	r3, [r4, #16]
 801466c:	2300      	movs	r3, #0
 801466e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014672:	e7a7      	b.n	80145c4 <_printf_i+0x118>
 8014674:	6923      	ldr	r3, [r4, #16]
 8014676:	462a      	mov	r2, r5
 8014678:	4639      	mov	r1, r7
 801467a:	4630      	mov	r0, r6
 801467c:	47c0      	blx	r8
 801467e:	3001      	adds	r0, #1
 8014680:	d0aa      	beq.n	80145d8 <_printf_i+0x12c>
 8014682:	6823      	ldr	r3, [r4, #0]
 8014684:	079b      	lsls	r3, r3, #30
 8014686:	d413      	bmi.n	80146b0 <_printf_i+0x204>
 8014688:	68e0      	ldr	r0, [r4, #12]
 801468a:	9b03      	ldr	r3, [sp, #12]
 801468c:	4298      	cmp	r0, r3
 801468e:	bfb8      	it	lt
 8014690:	4618      	movlt	r0, r3
 8014692:	e7a3      	b.n	80145dc <_printf_i+0x130>
 8014694:	2301      	movs	r3, #1
 8014696:	464a      	mov	r2, r9
 8014698:	4639      	mov	r1, r7
 801469a:	4630      	mov	r0, r6
 801469c:	47c0      	blx	r8
 801469e:	3001      	adds	r0, #1
 80146a0:	d09a      	beq.n	80145d8 <_printf_i+0x12c>
 80146a2:	3501      	adds	r5, #1
 80146a4:	68e3      	ldr	r3, [r4, #12]
 80146a6:	9a03      	ldr	r2, [sp, #12]
 80146a8:	1a9b      	subs	r3, r3, r2
 80146aa:	42ab      	cmp	r3, r5
 80146ac:	dcf2      	bgt.n	8014694 <_printf_i+0x1e8>
 80146ae:	e7eb      	b.n	8014688 <_printf_i+0x1dc>
 80146b0:	2500      	movs	r5, #0
 80146b2:	f104 0919 	add.w	r9, r4, #25
 80146b6:	e7f5      	b.n	80146a4 <_printf_i+0x1f8>
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d1ac      	bne.n	8014616 <_printf_i+0x16a>
 80146bc:	7803      	ldrb	r3, [r0, #0]
 80146be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80146c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80146c6:	e76c      	b.n	80145a2 <_printf_i+0xf6>
 80146c8:	080189c8 	.word	0x080189c8
 80146cc:	080189d9 	.word	0x080189d9

080146d0 <_scanf_float>:
 80146d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146d4:	469a      	mov	sl, r3
 80146d6:	688b      	ldr	r3, [r1, #8]
 80146d8:	4616      	mov	r6, r2
 80146da:	1e5a      	subs	r2, r3, #1
 80146dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80146e0:	b087      	sub	sp, #28
 80146e2:	bf83      	ittte	hi
 80146e4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80146e8:	189b      	addhi	r3, r3, r2
 80146ea:	9301      	strhi	r3, [sp, #4]
 80146ec:	2300      	movls	r3, #0
 80146ee:	bf86      	itte	hi
 80146f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80146f4:	608b      	strhi	r3, [r1, #8]
 80146f6:	9301      	strls	r3, [sp, #4]
 80146f8:	680b      	ldr	r3, [r1, #0]
 80146fa:	4688      	mov	r8, r1
 80146fc:	f04f 0b00 	mov.w	fp, #0
 8014700:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014704:	f848 3b1c 	str.w	r3, [r8], #28
 8014708:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801470c:	4607      	mov	r7, r0
 801470e:	460c      	mov	r4, r1
 8014710:	4645      	mov	r5, r8
 8014712:	465a      	mov	r2, fp
 8014714:	46d9      	mov	r9, fp
 8014716:	f8cd b008 	str.w	fp, [sp, #8]
 801471a:	68a1      	ldr	r1, [r4, #8]
 801471c:	b181      	cbz	r1, 8014740 <_scanf_float+0x70>
 801471e:	6833      	ldr	r3, [r6, #0]
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	2b49      	cmp	r3, #73	; 0x49
 8014724:	d071      	beq.n	801480a <_scanf_float+0x13a>
 8014726:	d84d      	bhi.n	80147c4 <_scanf_float+0xf4>
 8014728:	2b39      	cmp	r3, #57	; 0x39
 801472a:	d840      	bhi.n	80147ae <_scanf_float+0xde>
 801472c:	2b31      	cmp	r3, #49	; 0x31
 801472e:	f080 8088 	bcs.w	8014842 <_scanf_float+0x172>
 8014732:	2b2d      	cmp	r3, #45	; 0x2d
 8014734:	f000 8090 	beq.w	8014858 <_scanf_float+0x188>
 8014738:	d815      	bhi.n	8014766 <_scanf_float+0x96>
 801473a:	2b2b      	cmp	r3, #43	; 0x2b
 801473c:	f000 808c 	beq.w	8014858 <_scanf_float+0x188>
 8014740:	f1b9 0f00 	cmp.w	r9, #0
 8014744:	d003      	beq.n	801474e <_scanf_float+0x7e>
 8014746:	6823      	ldr	r3, [r4, #0]
 8014748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801474c:	6023      	str	r3, [r4, #0]
 801474e:	3a01      	subs	r2, #1
 8014750:	2a01      	cmp	r2, #1
 8014752:	f200 80ea 	bhi.w	801492a <_scanf_float+0x25a>
 8014756:	4545      	cmp	r5, r8
 8014758:	f200 80dc 	bhi.w	8014914 <_scanf_float+0x244>
 801475c:	2601      	movs	r6, #1
 801475e:	4630      	mov	r0, r6
 8014760:	b007      	add	sp, #28
 8014762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014766:	2b2e      	cmp	r3, #46	; 0x2e
 8014768:	f000 809f 	beq.w	80148aa <_scanf_float+0x1da>
 801476c:	2b30      	cmp	r3, #48	; 0x30
 801476e:	d1e7      	bne.n	8014740 <_scanf_float+0x70>
 8014770:	6820      	ldr	r0, [r4, #0]
 8014772:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014776:	d064      	beq.n	8014842 <_scanf_float+0x172>
 8014778:	9b01      	ldr	r3, [sp, #4]
 801477a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801477e:	6020      	str	r0, [r4, #0]
 8014780:	f109 0901 	add.w	r9, r9, #1
 8014784:	b11b      	cbz	r3, 801478e <_scanf_float+0xbe>
 8014786:	3b01      	subs	r3, #1
 8014788:	3101      	adds	r1, #1
 801478a:	9301      	str	r3, [sp, #4]
 801478c:	60a1      	str	r1, [r4, #8]
 801478e:	68a3      	ldr	r3, [r4, #8]
 8014790:	3b01      	subs	r3, #1
 8014792:	60a3      	str	r3, [r4, #8]
 8014794:	6923      	ldr	r3, [r4, #16]
 8014796:	3301      	adds	r3, #1
 8014798:	6123      	str	r3, [r4, #16]
 801479a:	6873      	ldr	r3, [r6, #4]
 801479c:	3b01      	subs	r3, #1
 801479e:	2b00      	cmp	r3, #0
 80147a0:	6073      	str	r3, [r6, #4]
 80147a2:	f340 80ac 	ble.w	80148fe <_scanf_float+0x22e>
 80147a6:	6833      	ldr	r3, [r6, #0]
 80147a8:	3301      	adds	r3, #1
 80147aa:	6033      	str	r3, [r6, #0]
 80147ac:	e7b5      	b.n	801471a <_scanf_float+0x4a>
 80147ae:	2b45      	cmp	r3, #69	; 0x45
 80147b0:	f000 8085 	beq.w	80148be <_scanf_float+0x1ee>
 80147b4:	2b46      	cmp	r3, #70	; 0x46
 80147b6:	d06a      	beq.n	801488e <_scanf_float+0x1be>
 80147b8:	2b41      	cmp	r3, #65	; 0x41
 80147ba:	d1c1      	bne.n	8014740 <_scanf_float+0x70>
 80147bc:	2a01      	cmp	r2, #1
 80147be:	d1bf      	bne.n	8014740 <_scanf_float+0x70>
 80147c0:	2202      	movs	r2, #2
 80147c2:	e046      	b.n	8014852 <_scanf_float+0x182>
 80147c4:	2b65      	cmp	r3, #101	; 0x65
 80147c6:	d07a      	beq.n	80148be <_scanf_float+0x1ee>
 80147c8:	d818      	bhi.n	80147fc <_scanf_float+0x12c>
 80147ca:	2b54      	cmp	r3, #84	; 0x54
 80147cc:	d066      	beq.n	801489c <_scanf_float+0x1cc>
 80147ce:	d811      	bhi.n	80147f4 <_scanf_float+0x124>
 80147d0:	2b4e      	cmp	r3, #78	; 0x4e
 80147d2:	d1b5      	bne.n	8014740 <_scanf_float+0x70>
 80147d4:	2a00      	cmp	r2, #0
 80147d6:	d146      	bne.n	8014866 <_scanf_float+0x196>
 80147d8:	f1b9 0f00 	cmp.w	r9, #0
 80147dc:	d145      	bne.n	801486a <_scanf_float+0x19a>
 80147de:	6821      	ldr	r1, [r4, #0]
 80147e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80147e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80147e8:	d13f      	bne.n	801486a <_scanf_float+0x19a>
 80147ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80147ee:	6021      	str	r1, [r4, #0]
 80147f0:	2201      	movs	r2, #1
 80147f2:	e02e      	b.n	8014852 <_scanf_float+0x182>
 80147f4:	2b59      	cmp	r3, #89	; 0x59
 80147f6:	d01e      	beq.n	8014836 <_scanf_float+0x166>
 80147f8:	2b61      	cmp	r3, #97	; 0x61
 80147fa:	e7de      	b.n	80147ba <_scanf_float+0xea>
 80147fc:	2b6e      	cmp	r3, #110	; 0x6e
 80147fe:	d0e9      	beq.n	80147d4 <_scanf_float+0x104>
 8014800:	d815      	bhi.n	801482e <_scanf_float+0x15e>
 8014802:	2b66      	cmp	r3, #102	; 0x66
 8014804:	d043      	beq.n	801488e <_scanf_float+0x1be>
 8014806:	2b69      	cmp	r3, #105	; 0x69
 8014808:	d19a      	bne.n	8014740 <_scanf_float+0x70>
 801480a:	f1bb 0f00 	cmp.w	fp, #0
 801480e:	d138      	bne.n	8014882 <_scanf_float+0x1b2>
 8014810:	f1b9 0f00 	cmp.w	r9, #0
 8014814:	d197      	bne.n	8014746 <_scanf_float+0x76>
 8014816:	6821      	ldr	r1, [r4, #0]
 8014818:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801481c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014820:	d195      	bne.n	801474e <_scanf_float+0x7e>
 8014822:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014826:	6021      	str	r1, [r4, #0]
 8014828:	f04f 0b01 	mov.w	fp, #1
 801482c:	e011      	b.n	8014852 <_scanf_float+0x182>
 801482e:	2b74      	cmp	r3, #116	; 0x74
 8014830:	d034      	beq.n	801489c <_scanf_float+0x1cc>
 8014832:	2b79      	cmp	r3, #121	; 0x79
 8014834:	d184      	bne.n	8014740 <_scanf_float+0x70>
 8014836:	f1bb 0f07 	cmp.w	fp, #7
 801483a:	d181      	bne.n	8014740 <_scanf_float+0x70>
 801483c:	f04f 0b08 	mov.w	fp, #8
 8014840:	e007      	b.n	8014852 <_scanf_float+0x182>
 8014842:	eb12 0f0b 	cmn.w	r2, fp
 8014846:	f47f af7b 	bne.w	8014740 <_scanf_float+0x70>
 801484a:	6821      	ldr	r1, [r4, #0]
 801484c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014850:	6021      	str	r1, [r4, #0]
 8014852:	702b      	strb	r3, [r5, #0]
 8014854:	3501      	adds	r5, #1
 8014856:	e79a      	b.n	801478e <_scanf_float+0xbe>
 8014858:	6821      	ldr	r1, [r4, #0]
 801485a:	0608      	lsls	r0, r1, #24
 801485c:	f57f af70 	bpl.w	8014740 <_scanf_float+0x70>
 8014860:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014864:	e7f4      	b.n	8014850 <_scanf_float+0x180>
 8014866:	2a02      	cmp	r2, #2
 8014868:	d047      	beq.n	80148fa <_scanf_float+0x22a>
 801486a:	f1bb 0f01 	cmp.w	fp, #1
 801486e:	d003      	beq.n	8014878 <_scanf_float+0x1a8>
 8014870:	f1bb 0f04 	cmp.w	fp, #4
 8014874:	f47f af64 	bne.w	8014740 <_scanf_float+0x70>
 8014878:	f10b 0b01 	add.w	fp, fp, #1
 801487c:	fa5f fb8b 	uxtb.w	fp, fp
 8014880:	e7e7      	b.n	8014852 <_scanf_float+0x182>
 8014882:	f1bb 0f03 	cmp.w	fp, #3
 8014886:	d0f7      	beq.n	8014878 <_scanf_float+0x1a8>
 8014888:	f1bb 0f05 	cmp.w	fp, #5
 801488c:	e7f2      	b.n	8014874 <_scanf_float+0x1a4>
 801488e:	f1bb 0f02 	cmp.w	fp, #2
 8014892:	f47f af55 	bne.w	8014740 <_scanf_float+0x70>
 8014896:	f04f 0b03 	mov.w	fp, #3
 801489a:	e7da      	b.n	8014852 <_scanf_float+0x182>
 801489c:	f1bb 0f06 	cmp.w	fp, #6
 80148a0:	f47f af4e 	bne.w	8014740 <_scanf_float+0x70>
 80148a4:	f04f 0b07 	mov.w	fp, #7
 80148a8:	e7d3      	b.n	8014852 <_scanf_float+0x182>
 80148aa:	6821      	ldr	r1, [r4, #0]
 80148ac:	0588      	lsls	r0, r1, #22
 80148ae:	f57f af47 	bpl.w	8014740 <_scanf_float+0x70>
 80148b2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80148b6:	6021      	str	r1, [r4, #0]
 80148b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80148bc:	e7c9      	b.n	8014852 <_scanf_float+0x182>
 80148be:	6821      	ldr	r1, [r4, #0]
 80148c0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80148c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80148c8:	d006      	beq.n	80148d8 <_scanf_float+0x208>
 80148ca:	0548      	lsls	r0, r1, #21
 80148cc:	f57f af38 	bpl.w	8014740 <_scanf_float+0x70>
 80148d0:	f1b9 0f00 	cmp.w	r9, #0
 80148d4:	f43f af3b 	beq.w	801474e <_scanf_float+0x7e>
 80148d8:	0588      	lsls	r0, r1, #22
 80148da:	bf58      	it	pl
 80148dc:	9802      	ldrpl	r0, [sp, #8]
 80148de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80148e2:	bf58      	it	pl
 80148e4:	eba9 0000 	subpl.w	r0, r9, r0
 80148e8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80148ec:	bf58      	it	pl
 80148ee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80148f2:	6021      	str	r1, [r4, #0]
 80148f4:	f04f 0900 	mov.w	r9, #0
 80148f8:	e7ab      	b.n	8014852 <_scanf_float+0x182>
 80148fa:	2203      	movs	r2, #3
 80148fc:	e7a9      	b.n	8014852 <_scanf_float+0x182>
 80148fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014902:	9205      	str	r2, [sp, #20]
 8014904:	4631      	mov	r1, r6
 8014906:	4638      	mov	r0, r7
 8014908:	4798      	blx	r3
 801490a:	9a05      	ldr	r2, [sp, #20]
 801490c:	2800      	cmp	r0, #0
 801490e:	f43f af04 	beq.w	801471a <_scanf_float+0x4a>
 8014912:	e715      	b.n	8014740 <_scanf_float+0x70>
 8014914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014918:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801491c:	4632      	mov	r2, r6
 801491e:	4638      	mov	r0, r7
 8014920:	4798      	blx	r3
 8014922:	6923      	ldr	r3, [r4, #16]
 8014924:	3b01      	subs	r3, #1
 8014926:	6123      	str	r3, [r4, #16]
 8014928:	e715      	b.n	8014756 <_scanf_float+0x86>
 801492a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801492e:	2b06      	cmp	r3, #6
 8014930:	d80a      	bhi.n	8014948 <_scanf_float+0x278>
 8014932:	f1bb 0f02 	cmp.w	fp, #2
 8014936:	d968      	bls.n	8014a0a <_scanf_float+0x33a>
 8014938:	f1ab 0b03 	sub.w	fp, fp, #3
 801493c:	fa5f fb8b 	uxtb.w	fp, fp
 8014940:	eba5 0b0b 	sub.w	fp, r5, fp
 8014944:	455d      	cmp	r5, fp
 8014946:	d14b      	bne.n	80149e0 <_scanf_float+0x310>
 8014948:	6823      	ldr	r3, [r4, #0]
 801494a:	05da      	lsls	r2, r3, #23
 801494c:	d51f      	bpl.n	801498e <_scanf_float+0x2be>
 801494e:	055b      	lsls	r3, r3, #21
 8014950:	d468      	bmi.n	8014a24 <_scanf_float+0x354>
 8014952:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014956:	6923      	ldr	r3, [r4, #16]
 8014958:	2965      	cmp	r1, #101	; 0x65
 801495a:	f103 33ff 	add.w	r3, r3, #4294967295
 801495e:	f105 3bff 	add.w	fp, r5, #4294967295
 8014962:	6123      	str	r3, [r4, #16]
 8014964:	d00d      	beq.n	8014982 <_scanf_float+0x2b2>
 8014966:	2945      	cmp	r1, #69	; 0x45
 8014968:	d00b      	beq.n	8014982 <_scanf_float+0x2b2>
 801496a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801496e:	4632      	mov	r2, r6
 8014970:	4638      	mov	r0, r7
 8014972:	4798      	blx	r3
 8014974:	6923      	ldr	r3, [r4, #16]
 8014976:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801497a:	3b01      	subs	r3, #1
 801497c:	f1a5 0b02 	sub.w	fp, r5, #2
 8014980:	6123      	str	r3, [r4, #16]
 8014982:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014986:	4632      	mov	r2, r6
 8014988:	4638      	mov	r0, r7
 801498a:	4798      	blx	r3
 801498c:	465d      	mov	r5, fp
 801498e:	6826      	ldr	r6, [r4, #0]
 8014990:	f016 0610 	ands.w	r6, r6, #16
 8014994:	d17a      	bne.n	8014a8c <_scanf_float+0x3bc>
 8014996:	702e      	strb	r6, [r5, #0]
 8014998:	6823      	ldr	r3, [r4, #0]
 801499a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801499e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80149a2:	d142      	bne.n	8014a2a <_scanf_float+0x35a>
 80149a4:	9b02      	ldr	r3, [sp, #8]
 80149a6:	eba9 0303 	sub.w	r3, r9, r3
 80149aa:	425a      	negs	r2, r3
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d149      	bne.n	8014a44 <_scanf_float+0x374>
 80149b0:	2200      	movs	r2, #0
 80149b2:	4641      	mov	r1, r8
 80149b4:	4638      	mov	r0, r7
 80149b6:	f000 ff0b 	bl	80157d0 <_strtod_r>
 80149ba:	6825      	ldr	r5, [r4, #0]
 80149bc:	f8da 3000 	ldr.w	r3, [sl]
 80149c0:	f015 0f02 	tst.w	r5, #2
 80149c4:	f103 0204 	add.w	r2, r3, #4
 80149c8:	ec59 8b10 	vmov	r8, r9, d0
 80149cc:	f8ca 2000 	str.w	r2, [sl]
 80149d0:	d043      	beq.n	8014a5a <_scanf_float+0x38a>
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	e9c3 8900 	strd	r8, r9, [r3]
 80149d8:	68e3      	ldr	r3, [r4, #12]
 80149da:	3301      	adds	r3, #1
 80149dc:	60e3      	str	r3, [r4, #12]
 80149de:	e6be      	b.n	801475e <_scanf_float+0x8e>
 80149e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80149e8:	4632      	mov	r2, r6
 80149ea:	4638      	mov	r0, r7
 80149ec:	4798      	blx	r3
 80149ee:	6923      	ldr	r3, [r4, #16]
 80149f0:	3b01      	subs	r3, #1
 80149f2:	6123      	str	r3, [r4, #16]
 80149f4:	e7a6      	b.n	8014944 <_scanf_float+0x274>
 80149f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80149fe:	4632      	mov	r2, r6
 8014a00:	4638      	mov	r0, r7
 8014a02:	4798      	blx	r3
 8014a04:	6923      	ldr	r3, [r4, #16]
 8014a06:	3b01      	subs	r3, #1
 8014a08:	6123      	str	r3, [r4, #16]
 8014a0a:	4545      	cmp	r5, r8
 8014a0c:	d8f3      	bhi.n	80149f6 <_scanf_float+0x326>
 8014a0e:	e6a5      	b.n	801475c <_scanf_float+0x8c>
 8014a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014a18:	4632      	mov	r2, r6
 8014a1a:	4638      	mov	r0, r7
 8014a1c:	4798      	blx	r3
 8014a1e:	6923      	ldr	r3, [r4, #16]
 8014a20:	3b01      	subs	r3, #1
 8014a22:	6123      	str	r3, [r4, #16]
 8014a24:	4545      	cmp	r5, r8
 8014a26:	d8f3      	bhi.n	8014a10 <_scanf_float+0x340>
 8014a28:	e698      	b.n	801475c <_scanf_float+0x8c>
 8014a2a:	9b03      	ldr	r3, [sp, #12]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d0bf      	beq.n	80149b0 <_scanf_float+0x2e0>
 8014a30:	9904      	ldr	r1, [sp, #16]
 8014a32:	230a      	movs	r3, #10
 8014a34:	4632      	mov	r2, r6
 8014a36:	3101      	adds	r1, #1
 8014a38:	4638      	mov	r0, r7
 8014a3a:	f000 ff55 	bl	80158e8 <_strtol_r>
 8014a3e:	9b03      	ldr	r3, [sp, #12]
 8014a40:	9d04      	ldr	r5, [sp, #16]
 8014a42:	1ac2      	subs	r2, r0, r3
 8014a44:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014a48:	429d      	cmp	r5, r3
 8014a4a:	bf28      	it	cs
 8014a4c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014a50:	490f      	ldr	r1, [pc, #60]	; (8014a90 <_scanf_float+0x3c0>)
 8014a52:	4628      	mov	r0, r5
 8014a54:	f000 f858 	bl	8014b08 <siprintf>
 8014a58:	e7aa      	b.n	80149b0 <_scanf_float+0x2e0>
 8014a5a:	f015 0504 	ands.w	r5, r5, #4
 8014a5e:	d1b8      	bne.n	80149d2 <_scanf_float+0x302>
 8014a60:	681f      	ldr	r7, [r3, #0]
 8014a62:	ee10 2a10 	vmov	r2, s0
 8014a66:	464b      	mov	r3, r9
 8014a68:	ee10 0a10 	vmov	r0, s0
 8014a6c:	4649      	mov	r1, r9
 8014a6e:	f7ec f875 	bl	8000b5c <__aeabi_dcmpun>
 8014a72:	b128      	cbz	r0, 8014a80 <_scanf_float+0x3b0>
 8014a74:	4628      	mov	r0, r5
 8014a76:	f000 f80d 	bl	8014a94 <nanf>
 8014a7a:	ed87 0a00 	vstr	s0, [r7]
 8014a7e:	e7ab      	b.n	80149d8 <_scanf_float+0x308>
 8014a80:	4640      	mov	r0, r8
 8014a82:	4649      	mov	r1, r9
 8014a84:	f7ec f8c8 	bl	8000c18 <__aeabi_d2f>
 8014a88:	6038      	str	r0, [r7, #0]
 8014a8a:	e7a5      	b.n	80149d8 <_scanf_float+0x308>
 8014a8c:	2600      	movs	r6, #0
 8014a8e:	e666      	b.n	801475e <_scanf_float+0x8e>
 8014a90:	080189ea 	.word	0x080189ea

08014a94 <nanf>:
 8014a94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014a9c <nanf+0x8>
 8014a98:	4770      	bx	lr
 8014a9a:	bf00      	nop
 8014a9c:	7fc00000 	.word	0x7fc00000

08014aa0 <sniprintf>:
 8014aa0:	b40c      	push	{r2, r3}
 8014aa2:	b530      	push	{r4, r5, lr}
 8014aa4:	4b17      	ldr	r3, [pc, #92]	; (8014b04 <sniprintf+0x64>)
 8014aa6:	1e0c      	subs	r4, r1, #0
 8014aa8:	b09d      	sub	sp, #116	; 0x74
 8014aaa:	681d      	ldr	r5, [r3, #0]
 8014aac:	da08      	bge.n	8014ac0 <sniprintf+0x20>
 8014aae:	238b      	movs	r3, #139	; 0x8b
 8014ab0:	602b      	str	r3, [r5, #0]
 8014ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ab6:	b01d      	add	sp, #116	; 0x74
 8014ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014abc:	b002      	add	sp, #8
 8014abe:	4770      	bx	lr
 8014ac0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014ac4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014ac8:	bf14      	ite	ne
 8014aca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014ace:	4623      	moveq	r3, r4
 8014ad0:	9304      	str	r3, [sp, #16]
 8014ad2:	9307      	str	r3, [sp, #28]
 8014ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ad8:	9002      	str	r0, [sp, #8]
 8014ada:	9006      	str	r0, [sp, #24]
 8014adc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ae0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014ae2:	ab21      	add	r3, sp, #132	; 0x84
 8014ae4:	a902      	add	r1, sp, #8
 8014ae6:	4628      	mov	r0, r5
 8014ae8:	9301      	str	r3, [sp, #4]
 8014aea:	f002 fde7 	bl	80176bc <_svfiprintf_r>
 8014aee:	1c43      	adds	r3, r0, #1
 8014af0:	bfbc      	itt	lt
 8014af2:	238b      	movlt	r3, #139	; 0x8b
 8014af4:	602b      	strlt	r3, [r5, #0]
 8014af6:	2c00      	cmp	r4, #0
 8014af8:	d0dd      	beq.n	8014ab6 <sniprintf+0x16>
 8014afa:	9b02      	ldr	r3, [sp, #8]
 8014afc:	2200      	movs	r2, #0
 8014afe:	701a      	strb	r2, [r3, #0]
 8014b00:	e7d9      	b.n	8014ab6 <sniprintf+0x16>
 8014b02:	bf00      	nop
 8014b04:	2000000c 	.word	0x2000000c

08014b08 <siprintf>:
 8014b08:	b40e      	push	{r1, r2, r3}
 8014b0a:	b500      	push	{lr}
 8014b0c:	b09c      	sub	sp, #112	; 0x70
 8014b0e:	ab1d      	add	r3, sp, #116	; 0x74
 8014b10:	9002      	str	r0, [sp, #8]
 8014b12:	9006      	str	r0, [sp, #24]
 8014b14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b18:	4809      	ldr	r0, [pc, #36]	; (8014b40 <siprintf+0x38>)
 8014b1a:	9107      	str	r1, [sp, #28]
 8014b1c:	9104      	str	r1, [sp, #16]
 8014b1e:	4909      	ldr	r1, [pc, #36]	; (8014b44 <siprintf+0x3c>)
 8014b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b24:	9105      	str	r1, [sp, #20]
 8014b26:	6800      	ldr	r0, [r0, #0]
 8014b28:	9301      	str	r3, [sp, #4]
 8014b2a:	a902      	add	r1, sp, #8
 8014b2c:	f002 fdc6 	bl	80176bc <_svfiprintf_r>
 8014b30:	9b02      	ldr	r3, [sp, #8]
 8014b32:	2200      	movs	r2, #0
 8014b34:	701a      	strb	r2, [r3, #0]
 8014b36:	b01c      	add	sp, #112	; 0x70
 8014b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b3c:	b003      	add	sp, #12
 8014b3e:	4770      	bx	lr
 8014b40:	2000000c 	.word	0x2000000c
 8014b44:	ffff0208 	.word	0xffff0208

08014b48 <siscanf>:
 8014b48:	b40e      	push	{r1, r2, r3}
 8014b4a:	b530      	push	{r4, r5, lr}
 8014b4c:	b09c      	sub	sp, #112	; 0x70
 8014b4e:	ac1f      	add	r4, sp, #124	; 0x7c
 8014b50:	f44f 7201 	mov.w	r2, #516	; 0x204
 8014b54:	f854 5b04 	ldr.w	r5, [r4], #4
 8014b58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014b5c:	9002      	str	r0, [sp, #8]
 8014b5e:	9006      	str	r0, [sp, #24]
 8014b60:	f7eb fb4e 	bl	8000200 <strlen>
 8014b64:	4b0b      	ldr	r3, [pc, #44]	; (8014b94 <siscanf+0x4c>)
 8014b66:	9003      	str	r0, [sp, #12]
 8014b68:	9007      	str	r0, [sp, #28]
 8014b6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b6c:	480a      	ldr	r0, [pc, #40]	; (8014b98 <siscanf+0x50>)
 8014b6e:	9401      	str	r4, [sp, #4]
 8014b70:	2300      	movs	r3, #0
 8014b72:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b74:	9314      	str	r3, [sp, #80]	; 0x50
 8014b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b7e:	462a      	mov	r2, r5
 8014b80:	4623      	mov	r3, r4
 8014b82:	a902      	add	r1, sp, #8
 8014b84:	6800      	ldr	r0, [r0, #0]
 8014b86:	f002 feeb 	bl	8017960 <__ssvfiscanf_r>
 8014b8a:	b01c      	add	sp, #112	; 0x70
 8014b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b90:	b003      	add	sp, #12
 8014b92:	4770      	bx	lr
 8014b94:	08014b9d 	.word	0x08014b9d
 8014b98:	2000000c 	.word	0x2000000c

08014b9c <__seofread>:
 8014b9c:	2000      	movs	r0, #0
 8014b9e:	4770      	bx	lr

08014ba0 <strcpy>:
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ba6:	f803 2b01 	strb.w	r2, [r3], #1
 8014baa:	2a00      	cmp	r2, #0
 8014bac:	d1f9      	bne.n	8014ba2 <strcpy+0x2>
 8014bae:	4770      	bx	lr

08014bb0 <sulp>:
 8014bb0:	b570      	push	{r4, r5, r6, lr}
 8014bb2:	4604      	mov	r4, r0
 8014bb4:	460d      	mov	r5, r1
 8014bb6:	ec45 4b10 	vmov	d0, r4, r5
 8014bba:	4616      	mov	r6, r2
 8014bbc:	f002 fb3a 	bl	8017234 <__ulp>
 8014bc0:	ec51 0b10 	vmov	r0, r1, d0
 8014bc4:	b17e      	cbz	r6, 8014be6 <sulp+0x36>
 8014bc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014bca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	dd09      	ble.n	8014be6 <sulp+0x36>
 8014bd2:	051b      	lsls	r3, r3, #20
 8014bd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014bd8:	2400      	movs	r4, #0
 8014bda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014bde:	4622      	mov	r2, r4
 8014be0:	462b      	mov	r3, r5
 8014be2:	f7eb fd21 	bl	8000628 <__aeabi_dmul>
 8014be6:	bd70      	pop	{r4, r5, r6, pc}

08014be8 <_strtod_l>:
 8014be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bec:	461f      	mov	r7, r3
 8014bee:	b0a1      	sub	sp, #132	; 0x84
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	4681      	mov	r9, r0
 8014bf4:	4638      	mov	r0, r7
 8014bf6:	460e      	mov	r6, r1
 8014bf8:	9217      	str	r2, [sp, #92]	; 0x5c
 8014bfa:	931c      	str	r3, [sp, #112]	; 0x70
 8014bfc:	f002 f824 	bl	8016c48 <__localeconv_l>
 8014c00:	4680      	mov	r8, r0
 8014c02:	6800      	ldr	r0, [r0, #0]
 8014c04:	f7eb fafc 	bl	8000200 <strlen>
 8014c08:	f04f 0a00 	mov.w	sl, #0
 8014c0c:	4604      	mov	r4, r0
 8014c0e:	f04f 0b00 	mov.w	fp, #0
 8014c12:	961b      	str	r6, [sp, #108]	; 0x6c
 8014c14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c16:	781a      	ldrb	r2, [r3, #0]
 8014c18:	2a0d      	cmp	r2, #13
 8014c1a:	d832      	bhi.n	8014c82 <_strtod_l+0x9a>
 8014c1c:	2a09      	cmp	r2, #9
 8014c1e:	d236      	bcs.n	8014c8e <_strtod_l+0xa6>
 8014c20:	2a00      	cmp	r2, #0
 8014c22:	d03e      	beq.n	8014ca2 <_strtod_l+0xba>
 8014c24:	2300      	movs	r3, #0
 8014c26:	930d      	str	r3, [sp, #52]	; 0x34
 8014c28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014c2a:	782b      	ldrb	r3, [r5, #0]
 8014c2c:	2b30      	cmp	r3, #48	; 0x30
 8014c2e:	f040 80ac 	bne.w	8014d8a <_strtod_l+0x1a2>
 8014c32:	786b      	ldrb	r3, [r5, #1]
 8014c34:	2b58      	cmp	r3, #88	; 0x58
 8014c36:	d001      	beq.n	8014c3c <_strtod_l+0x54>
 8014c38:	2b78      	cmp	r3, #120	; 0x78
 8014c3a:	d167      	bne.n	8014d0c <_strtod_l+0x124>
 8014c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c3e:	9301      	str	r3, [sp, #4]
 8014c40:	ab1c      	add	r3, sp, #112	; 0x70
 8014c42:	9300      	str	r3, [sp, #0]
 8014c44:	9702      	str	r7, [sp, #8]
 8014c46:	ab1d      	add	r3, sp, #116	; 0x74
 8014c48:	4a88      	ldr	r2, [pc, #544]	; (8014e6c <_strtod_l+0x284>)
 8014c4a:	a91b      	add	r1, sp, #108	; 0x6c
 8014c4c:	4648      	mov	r0, r9
 8014c4e:	f001 fd12 	bl	8016676 <__gethex>
 8014c52:	f010 0407 	ands.w	r4, r0, #7
 8014c56:	4606      	mov	r6, r0
 8014c58:	d005      	beq.n	8014c66 <_strtod_l+0x7e>
 8014c5a:	2c06      	cmp	r4, #6
 8014c5c:	d12b      	bne.n	8014cb6 <_strtod_l+0xce>
 8014c5e:	3501      	adds	r5, #1
 8014c60:	2300      	movs	r3, #0
 8014c62:	951b      	str	r5, [sp, #108]	; 0x6c
 8014c64:	930d      	str	r3, [sp, #52]	; 0x34
 8014c66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	f040 859a 	bne.w	80157a2 <_strtod_l+0xbba>
 8014c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c70:	b1e3      	cbz	r3, 8014cac <_strtod_l+0xc4>
 8014c72:	4652      	mov	r2, sl
 8014c74:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014c78:	ec43 2b10 	vmov	d0, r2, r3
 8014c7c:	b021      	add	sp, #132	; 0x84
 8014c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c82:	2a2b      	cmp	r2, #43	; 0x2b
 8014c84:	d015      	beq.n	8014cb2 <_strtod_l+0xca>
 8014c86:	2a2d      	cmp	r2, #45	; 0x2d
 8014c88:	d004      	beq.n	8014c94 <_strtod_l+0xac>
 8014c8a:	2a20      	cmp	r2, #32
 8014c8c:	d1ca      	bne.n	8014c24 <_strtod_l+0x3c>
 8014c8e:	3301      	adds	r3, #1
 8014c90:	931b      	str	r3, [sp, #108]	; 0x6c
 8014c92:	e7bf      	b.n	8014c14 <_strtod_l+0x2c>
 8014c94:	2201      	movs	r2, #1
 8014c96:	920d      	str	r2, [sp, #52]	; 0x34
 8014c98:	1c5a      	adds	r2, r3, #1
 8014c9a:	921b      	str	r2, [sp, #108]	; 0x6c
 8014c9c:	785b      	ldrb	r3, [r3, #1]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d1c2      	bne.n	8014c28 <_strtod_l+0x40>
 8014ca2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ca4:	961b      	str	r6, [sp, #108]	; 0x6c
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	f040 8579 	bne.w	801579e <_strtod_l+0xbb6>
 8014cac:	4652      	mov	r2, sl
 8014cae:	465b      	mov	r3, fp
 8014cb0:	e7e2      	b.n	8014c78 <_strtod_l+0x90>
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	e7ef      	b.n	8014c96 <_strtod_l+0xae>
 8014cb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014cb8:	b13a      	cbz	r2, 8014cca <_strtod_l+0xe2>
 8014cba:	2135      	movs	r1, #53	; 0x35
 8014cbc:	a81e      	add	r0, sp, #120	; 0x78
 8014cbe:	f002 fbb1 	bl	8017424 <__copybits>
 8014cc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014cc4:	4648      	mov	r0, r9
 8014cc6:	f002 f81d 	bl	8016d04 <_Bfree>
 8014cca:	3c01      	subs	r4, #1
 8014ccc:	2c04      	cmp	r4, #4
 8014cce:	d806      	bhi.n	8014cde <_strtod_l+0xf6>
 8014cd0:	e8df f004 	tbb	[pc, r4]
 8014cd4:	1714030a 	.word	0x1714030a
 8014cd8:	0a          	.byte	0x0a
 8014cd9:	00          	.byte	0x00
 8014cda:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8014cde:	0730      	lsls	r0, r6, #28
 8014ce0:	d5c1      	bpl.n	8014c66 <_strtod_l+0x7e>
 8014ce2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014ce6:	e7be      	b.n	8014c66 <_strtod_l+0x7e>
 8014ce8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8014cec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014cee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014cf2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014cf6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014cfa:	e7f0      	b.n	8014cde <_strtod_l+0xf6>
 8014cfc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014e70 <_strtod_l+0x288>
 8014d00:	e7ed      	b.n	8014cde <_strtod_l+0xf6>
 8014d02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014d06:	f04f 3aff 	mov.w	sl, #4294967295
 8014d0a:	e7e8      	b.n	8014cde <_strtod_l+0xf6>
 8014d0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014d0e:	1c5a      	adds	r2, r3, #1
 8014d10:	921b      	str	r2, [sp, #108]	; 0x6c
 8014d12:	785b      	ldrb	r3, [r3, #1]
 8014d14:	2b30      	cmp	r3, #48	; 0x30
 8014d16:	d0f9      	beq.n	8014d0c <_strtod_l+0x124>
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d0a4      	beq.n	8014c66 <_strtod_l+0x7e>
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	2500      	movs	r5, #0
 8014d20:	9306      	str	r3, [sp, #24]
 8014d22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014d24:	9308      	str	r3, [sp, #32]
 8014d26:	9507      	str	r5, [sp, #28]
 8014d28:	9505      	str	r5, [sp, #20]
 8014d2a:	220a      	movs	r2, #10
 8014d2c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014d2e:	7807      	ldrb	r7, [r0, #0]
 8014d30:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014d34:	b2d9      	uxtb	r1, r3
 8014d36:	2909      	cmp	r1, #9
 8014d38:	d929      	bls.n	8014d8e <_strtod_l+0x1a6>
 8014d3a:	4622      	mov	r2, r4
 8014d3c:	f8d8 1000 	ldr.w	r1, [r8]
 8014d40:	f003 f8f8 	bl	8017f34 <strncmp>
 8014d44:	2800      	cmp	r0, #0
 8014d46:	d031      	beq.n	8014dac <_strtod_l+0x1c4>
 8014d48:	2000      	movs	r0, #0
 8014d4a:	9c05      	ldr	r4, [sp, #20]
 8014d4c:	9004      	str	r0, [sp, #16]
 8014d4e:	463b      	mov	r3, r7
 8014d50:	4602      	mov	r2, r0
 8014d52:	2b65      	cmp	r3, #101	; 0x65
 8014d54:	d001      	beq.n	8014d5a <_strtod_l+0x172>
 8014d56:	2b45      	cmp	r3, #69	; 0x45
 8014d58:	d114      	bne.n	8014d84 <_strtod_l+0x19c>
 8014d5a:	b924      	cbnz	r4, 8014d66 <_strtod_l+0x17e>
 8014d5c:	b910      	cbnz	r0, 8014d64 <_strtod_l+0x17c>
 8014d5e:	9b06      	ldr	r3, [sp, #24]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d09e      	beq.n	8014ca2 <_strtod_l+0xba>
 8014d64:	2400      	movs	r4, #0
 8014d66:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014d68:	1c73      	adds	r3, r6, #1
 8014d6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8014d6c:	7873      	ldrb	r3, [r6, #1]
 8014d6e:	2b2b      	cmp	r3, #43	; 0x2b
 8014d70:	d078      	beq.n	8014e64 <_strtod_l+0x27c>
 8014d72:	2b2d      	cmp	r3, #45	; 0x2d
 8014d74:	d070      	beq.n	8014e58 <_strtod_l+0x270>
 8014d76:	f04f 0c00 	mov.w	ip, #0
 8014d7a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8014d7e:	2f09      	cmp	r7, #9
 8014d80:	d97c      	bls.n	8014e7c <_strtod_l+0x294>
 8014d82:	961b      	str	r6, [sp, #108]	; 0x6c
 8014d84:	f04f 0e00 	mov.w	lr, #0
 8014d88:	e09a      	b.n	8014ec0 <_strtod_l+0x2d8>
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	e7c7      	b.n	8014d1e <_strtod_l+0x136>
 8014d8e:	9905      	ldr	r1, [sp, #20]
 8014d90:	2908      	cmp	r1, #8
 8014d92:	bfdd      	ittte	le
 8014d94:	9907      	ldrle	r1, [sp, #28]
 8014d96:	fb02 3301 	mlale	r3, r2, r1, r3
 8014d9a:	9307      	strle	r3, [sp, #28]
 8014d9c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014da0:	9b05      	ldr	r3, [sp, #20]
 8014da2:	3001      	adds	r0, #1
 8014da4:	3301      	adds	r3, #1
 8014da6:	9305      	str	r3, [sp, #20]
 8014da8:	901b      	str	r0, [sp, #108]	; 0x6c
 8014daa:	e7bf      	b.n	8014d2c <_strtod_l+0x144>
 8014dac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014dae:	191a      	adds	r2, r3, r4
 8014db0:	921b      	str	r2, [sp, #108]	; 0x6c
 8014db2:	9a05      	ldr	r2, [sp, #20]
 8014db4:	5d1b      	ldrb	r3, [r3, r4]
 8014db6:	2a00      	cmp	r2, #0
 8014db8:	d037      	beq.n	8014e2a <_strtod_l+0x242>
 8014dba:	9c05      	ldr	r4, [sp, #20]
 8014dbc:	4602      	mov	r2, r0
 8014dbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014dc2:	2909      	cmp	r1, #9
 8014dc4:	d913      	bls.n	8014dee <_strtod_l+0x206>
 8014dc6:	2101      	movs	r1, #1
 8014dc8:	9104      	str	r1, [sp, #16]
 8014dca:	e7c2      	b.n	8014d52 <_strtod_l+0x16a>
 8014dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014dce:	1c5a      	adds	r2, r3, #1
 8014dd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8014dd2:	785b      	ldrb	r3, [r3, #1]
 8014dd4:	3001      	adds	r0, #1
 8014dd6:	2b30      	cmp	r3, #48	; 0x30
 8014dd8:	d0f8      	beq.n	8014dcc <_strtod_l+0x1e4>
 8014dda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014dde:	2a08      	cmp	r2, #8
 8014de0:	f200 84e4 	bhi.w	80157ac <_strtod_l+0xbc4>
 8014de4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014de6:	9208      	str	r2, [sp, #32]
 8014de8:	4602      	mov	r2, r0
 8014dea:	2000      	movs	r0, #0
 8014dec:	4604      	mov	r4, r0
 8014dee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014df2:	f100 0101 	add.w	r1, r0, #1
 8014df6:	d012      	beq.n	8014e1e <_strtod_l+0x236>
 8014df8:	440a      	add	r2, r1
 8014dfa:	eb00 0c04 	add.w	ip, r0, r4
 8014dfe:	4621      	mov	r1, r4
 8014e00:	270a      	movs	r7, #10
 8014e02:	458c      	cmp	ip, r1
 8014e04:	d113      	bne.n	8014e2e <_strtod_l+0x246>
 8014e06:	1821      	adds	r1, r4, r0
 8014e08:	2908      	cmp	r1, #8
 8014e0a:	f104 0401 	add.w	r4, r4, #1
 8014e0e:	4404      	add	r4, r0
 8014e10:	dc19      	bgt.n	8014e46 <_strtod_l+0x25e>
 8014e12:	9b07      	ldr	r3, [sp, #28]
 8014e14:	210a      	movs	r1, #10
 8014e16:	fb01 e303 	mla	r3, r1, r3, lr
 8014e1a:	9307      	str	r3, [sp, #28]
 8014e1c:	2100      	movs	r1, #0
 8014e1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e20:	1c58      	adds	r0, r3, #1
 8014e22:	901b      	str	r0, [sp, #108]	; 0x6c
 8014e24:	785b      	ldrb	r3, [r3, #1]
 8014e26:	4608      	mov	r0, r1
 8014e28:	e7c9      	b.n	8014dbe <_strtod_l+0x1d6>
 8014e2a:	9805      	ldr	r0, [sp, #20]
 8014e2c:	e7d3      	b.n	8014dd6 <_strtod_l+0x1ee>
 8014e2e:	2908      	cmp	r1, #8
 8014e30:	f101 0101 	add.w	r1, r1, #1
 8014e34:	dc03      	bgt.n	8014e3e <_strtod_l+0x256>
 8014e36:	9b07      	ldr	r3, [sp, #28]
 8014e38:	437b      	muls	r3, r7
 8014e3a:	9307      	str	r3, [sp, #28]
 8014e3c:	e7e1      	b.n	8014e02 <_strtod_l+0x21a>
 8014e3e:	2910      	cmp	r1, #16
 8014e40:	bfd8      	it	le
 8014e42:	437d      	mulle	r5, r7
 8014e44:	e7dd      	b.n	8014e02 <_strtod_l+0x21a>
 8014e46:	2c10      	cmp	r4, #16
 8014e48:	bfdc      	itt	le
 8014e4a:	210a      	movle	r1, #10
 8014e4c:	fb01 e505 	mlale	r5, r1, r5, lr
 8014e50:	e7e4      	b.n	8014e1c <_strtod_l+0x234>
 8014e52:	2301      	movs	r3, #1
 8014e54:	9304      	str	r3, [sp, #16]
 8014e56:	e781      	b.n	8014d5c <_strtod_l+0x174>
 8014e58:	f04f 0c01 	mov.w	ip, #1
 8014e5c:	1cb3      	adds	r3, r6, #2
 8014e5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8014e60:	78b3      	ldrb	r3, [r6, #2]
 8014e62:	e78a      	b.n	8014d7a <_strtod_l+0x192>
 8014e64:	f04f 0c00 	mov.w	ip, #0
 8014e68:	e7f8      	b.n	8014e5c <_strtod_l+0x274>
 8014e6a:	bf00      	nop
 8014e6c:	080189f0 	.word	0x080189f0
 8014e70:	7ff00000 	.word	0x7ff00000
 8014e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e76:	1c5f      	adds	r7, r3, #1
 8014e78:	971b      	str	r7, [sp, #108]	; 0x6c
 8014e7a:	785b      	ldrb	r3, [r3, #1]
 8014e7c:	2b30      	cmp	r3, #48	; 0x30
 8014e7e:	d0f9      	beq.n	8014e74 <_strtod_l+0x28c>
 8014e80:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014e84:	2f08      	cmp	r7, #8
 8014e86:	f63f af7d 	bhi.w	8014d84 <_strtod_l+0x19c>
 8014e8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014e8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e90:	930a      	str	r3, [sp, #40]	; 0x28
 8014e92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e94:	1c5f      	adds	r7, r3, #1
 8014e96:	971b      	str	r7, [sp, #108]	; 0x6c
 8014e98:	785b      	ldrb	r3, [r3, #1]
 8014e9a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8014e9e:	f1b8 0f09 	cmp.w	r8, #9
 8014ea2:	d937      	bls.n	8014f14 <_strtod_l+0x32c>
 8014ea4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014ea6:	1a7f      	subs	r7, r7, r1
 8014ea8:	2f08      	cmp	r7, #8
 8014eaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014eae:	dc37      	bgt.n	8014f20 <_strtod_l+0x338>
 8014eb0:	45be      	cmp	lr, r7
 8014eb2:	bfa8      	it	ge
 8014eb4:	46be      	movge	lr, r7
 8014eb6:	f1bc 0f00 	cmp.w	ip, #0
 8014eba:	d001      	beq.n	8014ec0 <_strtod_l+0x2d8>
 8014ebc:	f1ce 0e00 	rsb	lr, lr, #0
 8014ec0:	2c00      	cmp	r4, #0
 8014ec2:	d151      	bne.n	8014f68 <_strtod_l+0x380>
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	f47f aece 	bne.w	8014c66 <_strtod_l+0x7e>
 8014eca:	9a06      	ldr	r2, [sp, #24]
 8014ecc:	2a00      	cmp	r2, #0
 8014ece:	f47f aeca 	bne.w	8014c66 <_strtod_l+0x7e>
 8014ed2:	9a04      	ldr	r2, [sp, #16]
 8014ed4:	2a00      	cmp	r2, #0
 8014ed6:	f47f aee4 	bne.w	8014ca2 <_strtod_l+0xba>
 8014eda:	2b4e      	cmp	r3, #78	; 0x4e
 8014edc:	d027      	beq.n	8014f2e <_strtod_l+0x346>
 8014ede:	dc21      	bgt.n	8014f24 <_strtod_l+0x33c>
 8014ee0:	2b49      	cmp	r3, #73	; 0x49
 8014ee2:	f47f aede 	bne.w	8014ca2 <_strtod_l+0xba>
 8014ee6:	49a0      	ldr	r1, [pc, #640]	; (8015168 <_strtod_l+0x580>)
 8014ee8:	a81b      	add	r0, sp, #108	; 0x6c
 8014eea:	f001 fdf7 	bl	8016adc <__match>
 8014eee:	2800      	cmp	r0, #0
 8014ef0:	f43f aed7 	beq.w	8014ca2 <_strtod_l+0xba>
 8014ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ef6:	499d      	ldr	r1, [pc, #628]	; (801516c <_strtod_l+0x584>)
 8014ef8:	3b01      	subs	r3, #1
 8014efa:	a81b      	add	r0, sp, #108	; 0x6c
 8014efc:	931b      	str	r3, [sp, #108]	; 0x6c
 8014efe:	f001 fded 	bl	8016adc <__match>
 8014f02:	b910      	cbnz	r0, 8014f0a <_strtod_l+0x322>
 8014f04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f06:	3301      	adds	r3, #1
 8014f08:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f0a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015180 <_strtod_l+0x598>
 8014f0e:	f04f 0a00 	mov.w	sl, #0
 8014f12:	e6a8      	b.n	8014c66 <_strtod_l+0x7e>
 8014f14:	210a      	movs	r1, #10
 8014f16:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014f1a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014f1e:	e7b8      	b.n	8014e92 <_strtod_l+0x2aa>
 8014f20:	46be      	mov	lr, r7
 8014f22:	e7c8      	b.n	8014eb6 <_strtod_l+0x2ce>
 8014f24:	2b69      	cmp	r3, #105	; 0x69
 8014f26:	d0de      	beq.n	8014ee6 <_strtod_l+0x2fe>
 8014f28:	2b6e      	cmp	r3, #110	; 0x6e
 8014f2a:	f47f aeba 	bne.w	8014ca2 <_strtod_l+0xba>
 8014f2e:	4990      	ldr	r1, [pc, #576]	; (8015170 <_strtod_l+0x588>)
 8014f30:	a81b      	add	r0, sp, #108	; 0x6c
 8014f32:	f001 fdd3 	bl	8016adc <__match>
 8014f36:	2800      	cmp	r0, #0
 8014f38:	f43f aeb3 	beq.w	8014ca2 <_strtod_l+0xba>
 8014f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	2b28      	cmp	r3, #40	; 0x28
 8014f42:	d10e      	bne.n	8014f62 <_strtod_l+0x37a>
 8014f44:	aa1e      	add	r2, sp, #120	; 0x78
 8014f46:	498b      	ldr	r1, [pc, #556]	; (8015174 <_strtod_l+0x58c>)
 8014f48:	a81b      	add	r0, sp, #108	; 0x6c
 8014f4a:	f001 fddb 	bl	8016b04 <__hexnan>
 8014f4e:	2805      	cmp	r0, #5
 8014f50:	d107      	bne.n	8014f62 <_strtod_l+0x37a>
 8014f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014f54:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014f58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014f5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014f60:	e681      	b.n	8014c66 <_strtod_l+0x7e>
 8014f62:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015188 <_strtod_l+0x5a0>
 8014f66:	e7d2      	b.n	8014f0e <_strtod_l+0x326>
 8014f68:	ebae 0302 	sub.w	r3, lr, r2
 8014f6c:	9306      	str	r3, [sp, #24]
 8014f6e:	9b05      	ldr	r3, [sp, #20]
 8014f70:	9807      	ldr	r0, [sp, #28]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	bf08      	it	eq
 8014f76:	4623      	moveq	r3, r4
 8014f78:	2c10      	cmp	r4, #16
 8014f7a:	9305      	str	r3, [sp, #20]
 8014f7c:	46a0      	mov	r8, r4
 8014f7e:	bfa8      	it	ge
 8014f80:	f04f 0810 	movge.w	r8, #16
 8014f84:	f7eb fad6 	bl	8000534 <__aeabi_ui2d>
 8014f88:	2c09      	cmp	r4, #9
 8014f8a:	4682      	mov	sl, r0
 8014f8c:	468b      	mov	fp, r1
 8014f8e:	dc13      	bgt.n	8014fb8 <_strtod_l+0x3d0>
 8014f90:	9b06      	ldr	r3, [sp, #24]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	f43f ae67 	beq.w	8014c66 <_strtod_l+0x7e>
 8014f98:	9b06      	ldr	r3, [sp, #24]
 8014f9a:	dd7a      	ble.n	8015092 <_strtod_l+0x4aa>
 8014f9c:	2b16      	cmp	r3, #22
 8014f9e:	dc61      	bgt.n	8015064 <_strtod_l+0x47c>
 8014fa0:	4a75      	ldr	r2, [pc, #468]	; (8015178 <_strtod_l+0x590>)
 8014fa2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014fa6:	e9de 0100 	ldrd	r0, r1, [lr]
 8014faa:	4652      	mov	r2, sl
 8014fac:	465b      	mov	r3, fp
 8014fae:	f7eb fb3b 	bl	8000628 <__aeabi_dmul>
 8014fb2:	4682      	mov	sl, r0
 8014fb4:	468b      	mov	fp, r1
 8014fb6:	e656      	b.n	8014c66 <_strtod_l+0x7e>
 8014fb8:	4b6f      	ldr	r3, [pc, #444]	; (8015178 <_strtod_l+0x590>)
 8014fba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014fbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014fc2:	f7eb fb31 	bl	8000628 <__aeabi_dmul>
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	4628      	mov	r0, r5
 8014fca:	460f      	mov	r7, r1
 8014fcc:	f7eb fab2 	bl	8000534 <__aeabi_ui2d>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	460b      	mov	r3, r1
 8014fd4:	4630      	mov	r0, r6
 8014fd6:	4639      	mov	r1, r7
 8014fd8:	f7eb f970 	bl	80002bc <__adddf3>
 8014fdc:	2c0f      	cmp	r4, #15
 8014fde:	4682      	mov	sl, r0
 8014fe0:	468b      	mov	fp, r1
 8014fe2:	ddd5      	ble.n	8014f90 <_strtod_l+0x3a8>
 8014fe4:	9b06      	ldr	r3, [sp, #24]
 8014fe6:	eba4 0808 	sub.w	r8, r4, r8
 8014fea:	4498      	add	r8, r3
 8014fec:	f1b8 0f00 	cmp.w	r8, #0
 8014ff0:	f340 8096 	ble.w	8015120 <_strtod_l+0x538>
 8014ff4:	f018 030f 	ands.w	r3, r8, #15
 8014ff8:	d00a      	beq.n	8015010 <_strtod_l+0x428>
 8014ffa:	495f      	ldr	r1, [pc, #380]	; (8015178 <_strtod_l+0x590>)
 8014ffc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015000:	4652      	mov	r2, sl
 8015002:	465b      	mov	r3, fp
 8015004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015008:	f7eb fb0e 	bl	8000628 <__aeabi_dmul>
 801500c:	4682      	mov	sl, r0
 801500e:	468b      	mov	fp, r1
 8015010:	f038 080f 	bics.w	r8, r8, #15
 8015014:	d073      	beq.n	80150fe <_strtod_l+0x516>
 8015016:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801501a:	dd47      	ble.n	80150ac <_strtod_l+0x4c4>
 801501c:	2400      	movs	r4, #0
 801501e:	46a0      	mov	r8, r4
 8015020:	9407      	str	r4, [sp, #28]
 8015022:	9405      	str	r4, [sp, #20]
 8015024:	2322      	movs	r3, #34	; 0x22
 8015026:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015180 <_strtod_l+0x598>
 801502a:	f8c9 3000 	str.w	r3, [r9]
 801502e:	f04f 0a00 	mov.w	sl, #0
 8015032:	9b07      	ldr	r3, [sp, #28]
 8015034:	2b00      	cmp	r3, #0
 8015036:	f43f ae16 	beq.w	8014c66 <_strtod_l+0x7e>
 801503a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801503c:	4648      	mov	r0, r9
 801503e:	f001 fe61 	bl	8016d04 <_Bfree>
 8015042:	9905      	ldr	r1, [sp, #20]
 8015044:	4648      	mov	r0, r9
 8015046:	f001 fe5d 	bl	8016d04 <_Bfree>
 801504a:	4641      	mov	r1, r8
 801504c:	4648      	mov	r0, r9
 801504e:	f001 fe59 	bl	8016d04 <_Bfree>
 8015052:	9907      	ldr	r1, [sp, #28]
 8015054:	4648      	mov	r0, r9
 8015056:	f001 fe55 	bl	8016d04 <_Bfree>
 801505a:	4621      	mov	r1, r4
 801505c:	4648      	mov	r0, r9
 801505e:	f001 fe51 	bl	8016d04 <_Bfree>
 8015062:	e600      	b.n	8014c66 <_strtod_l+0x7e>
 8015064:	9a06      	ldr	r2, [sp, #24]
 8015066:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801506a:	4293      	cmp	r3, r2
 801506c:	dbba      	blt.n	8014fe4 <_strtod_l+0x3fc>
 801506e:	4d42      	ldr	r5, [pc, #264]	; (8015178 <_strtod_l+0x590>)
 8015070:	f1c4 040f 	rsb	r4, r4, #15
 8015074:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015078:	4652      	mov	r2, sl
 801507a:	465b      	mov	r3, fp
 801507c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015080:	f7eb fad2 	bl	8000628 <__aeabi_dmul>
 8015084:	9b06      	ldr	r3, [sp, #24]
 8015086:	1b1c      	subs	r4, r3, r4
 8015088:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801508c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015090:	e78d      	b.n	8014fae <_strtod_l+0x3c6>
 8015092:	f113 0f16 	cmn.w	r3, #22
 8015096:	dba5      	blt.n	8014fe4 <_strtod_l+0x3fc>
 8015098:	4a37      	ldr	r2, [pc, #220]	; (8015178 <_strtod_l+0x590>)
 801509a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801509e:	e9d2 2300 	ldrd	r2, r3, [r2]
 80150a2:	4650      	mov	r0, sl
 80150a4:	4659      	mov	r1, fp
 80150a6:	f7eb fbe9 	bl	800087c <__aeabi_ddiv>
 80150aa:	e782      	b.n	8014fb2 <_strtod_l+0x3ca>
 80150ac:	2300      	movs	r3, #0
 80150ae:	4e33      	ldr	r6, [pc, #204]	; (801517c <_strtod_l+0x594>)
 80150b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80150b4:	4650      	mov	r0, sl
 80150b6:	4659      	mov	r1, fp
 80150b8:	461d      	mov	r5, r3
 80150ba:	f1b8 0f01 	cmp.w	r8, #1
 80150be:	dc21      	bgt.n	8015104 <_strtod_l+0x51c>
 80150c0:	b10b      	cbz	r3, 80150c6 <_strtod_l+0x4de>
 80150c2:	4682      	mov	sl, r0
 80150c4:	468b      	mov	fp, r1
 80150c6:	4b2d      	ldr	r3, [pc, #180]	; (801517c <_strtod_l+0x594>)
 80150c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80150cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80150d0:	4652      	mov	r2, sl
 80150d2:	465b      	mov	r3, fp
 80150d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80150d8:	f7eb faa6 	bl	8000628 <__aeabi_dmul>
 80150dc:	4b28      	ldr	r3, [pc, #160]	; (8015180 <_strtod_l+0x598>)
 80150de:	460a      	mov	r2, r1
 80150e0:	400b      	ands	r3, r1
 80150e2:	4928      	ldr	r1, [pc, #160]	; (8015184 <_strtod_l+0x59c>)
 80150e4:	428b      	cmp	r3, r1
 80150e6:	4682      	mov	sl, r0
 80150e8:	d898      	bhi.n	801501c <_strtod_l+0x434>
 80150ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80150ee:	428b      	cmp	r3, r1
 80150f0:	bf86      	itte	hi
 80150f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801518c <_strtod_l+0x5a4>
 80150f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80150fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80150fe:	2300      	movs	r3, #0
 8015100:	9304      	str	r3, [sp, #16]
 8015102:	e077      	b.n	80151f4 <_strtod_l+0x60c>
 8015104:	f018 0f01 	tst.w	r8, #1
 8015108:	d006      	beq.n	8015118 <_strtod_l+0x530>
 801510a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015112:	f7eb fa89 	bl	8000628 <__aeabi_dmul>
 8015116:	2301      	movs	r3, #1
 8015118:	3501      	adds	r5, #1
 801511a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801511e:	e7cc      	b.n	80150ba <_strtod_l+0x4d2>
 8015120:	d0ed      	beq.n	80150fe <_strtod_l+0x516>
 8015122:	f1c8 0800 	rsb	r8, r8, #0
 8015126:	f018 020f 	ands.w	r2, r8, #15
 801512a:	d00a      	beq.n	8015142 <_strtod_l+0x55a>
 801512c:	4b12      	ldr	r3, [pc, #72]	; (8015178 <_strtod_l+0x590>)
 801512e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015132:	4650      	mov	r0, sl
 8015134:	4659      	mov	r1, fp
 8015136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801513a:	f7eb fb9f 	bl	800087c <__aeabi_ddiv>
 801513e:	4682      	mov	sl, r0
 8015140:	468b      	mov	fp, r1
 8015142:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015146:	d0da      	beq.n	80150fe <_strtod_l+0x516>
 8015148:	f1b8 0f1f 	cmp.w	r8, #31
 801514c:	dd20      	ble.n	8015190 <_strtod_l+0x5a8>
 801514e:	2400      	movs	r4, #0
 8015150:	46a0      	mov	r8, r4
 8015152:	9407      	str	r4, [sp, #28]
 8015154:	9405      	str	r4, [sp, #20]
 8015156:	2322      	movs	r3, #34	; 0x22
 8015158:	f04f 0a00 	mov.w	sl, #0
 801515c:	f04f 0b00 	mov.w	fp, #0
 8015160:	f8c9 3000 	str.w	r3, [r9]
 8015164:	e765      	b.n	8015032 <_strtod_l+0x44a>
 8015166:	bf00      	nop
 8015168:	080189bd 	.word	0x080189bd
 801516c:	08018a43 	.word	0x08018a43
 8015170:	080189c5 	.word	0x080189c5
 8015174:	08018a04 	.word	0x08018a04
 8015178:	08018ae8 	.word	0x08018ae8
 801517c:	08018ac0 	.word	0x08018ac0
 8015180:	7ff00000 	.word	0x7ff00000
 8015184:	7ca00000 	.word	0x7ca00000
 8015188:	fff80000 	.word	0xfff80000
 801518c:	7fefffff 	.word	0x7fefffff
 8015190:	f018 0310 	ands.w	r3, r8, #16
 8015194:	bf18      	it	ne
 8015196:	236a      	movne	r3, #106	; 0x6a
 8015198:	4da0      	ldr	r5, [pc, #640]	; (801541c <_strtod_l+0x834>)
 801519a:	9304      	str	r3, [sp, #16]
 801519c:	4650      	mov	r0, sl
 801519e:	4659      	mov	r1, fp
 80151a0:	2300      	movs	r3, #0
 80151a2:	f1b8 0f00 	cmp.w	r8, #0
 80151a6:	f300 810a 	bgt.w	80153be <_strtod_l+0x7d6>
 80151aa:	b10b      	cbz	r3, 80151b0 <_strtod_l+0x5c8>
 80151ac:	4682      	mov	sl, r0
 80151ae:	468b      	mov	fp, r1
 80151b0:	9b04      	ldr	r3, [sp, #16]
 80151b2:	b1bb      	cbz	r3, 80151e4 <_strtod_l+0x5fc>
 80151b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80151b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80151bc:	2b00      	cmp	r3, #0
 80151be:	4659      	mov	r1, fp
 80151c0:	dd10      	ble.n	80151e4 <_strtod_l+0x5fc>
 80151c2:	2b1f      	cmp	r3, #31
 80151c4:	f340 8107 	ble.w	80153d6 <_strtod_l+0x7ee>
 80151c8:	2b34      	cmp	r3, #52	; 0x34
 80151ca:	bfde      	ittt	le
 80151cc:	3b20      	suble	r3, #32
 80151ce:	f04f 32ff 	movle.w	r2, #4294967295
 80151d2:	fa02 f303 	lslle.w	r3, r2, r3
 80151d6:	f04f 0a00 	mov.w	sl, #0
 80151da:	bfcc      	ite	gt
 80151dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80151e0:	ea03 0b01 	andle.w	fp, r3, r1
 80151e4:	2200      	movs	r2, #0
 80151e6:	2300      	movs	r3, #0
 80151e8:	4650      	mov	r0, sl
 80151ea:	4659      	mov	r1, fp
 80151ec:	f7eb fc84 	bl	8000af8 <__aeabi_dcmpeq>
 80151f0:	2800      	cmp	r0, #0
 80151f2:	d1ac      	bne.n	801514e <_strtod_l+0x566>
 80151f4:	9b07      	ldr	r3, [sp, #28]
 80151f6:	9300      	str	r3, [sp, #0]
 80151f8:	9a05      	ldr	r2, [sp, #20]
 80151fa:	9908      	ldr	r1, [sp, #32]
 80151fc:	4623      	mov	r3, r4
 80151fe:	4648      	mov	r0, r9
 8015200:	f001 fdd2 	bl	8016da8 <__s2b>
 8015204:	9007      	str	r0, [sp, #28]
 8015206:	2800      	cmp	r0, #0
 8015208:	f43f af08 	beq.w	801501c <_strtod_l+0x434>
 801520c:	9a06      	ldr	r2, [sp, #24]
 801520e:	9b06      	ldr	r3, [sp, #24]
 8015210:	2a00      	cmp	r2, #0
 8015212:	f1c3 0300 	rsb	r3, r3, #0
 8015216:	bfa8      	it	ge
 8015218:	2300      	movge	r3, #0
 801521a:	930e      	str	r3, [sp, #56]	; 0x38
 801521c:	2400      	movs	r4, #0
 801521e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015222:	9316      	str	r3, [sp, #88]	; 0x58
 8015224:	46a0      	mov	r8, r4
 8015226:	9b07      	ldr	r3, [sp, #28]
 8015228:	4648      	mov	r0, r9
 801522a:	6859      	ldr	r1, [r3, #4]
 801522c:	f001 fd36 	bl	8016c9c <_Balloc>
 8015230:	9005      	str	r0, [sp, #20]
 8015232:	2800      	cmp	r0, #0
 8015234:	f43f aef6 	beq.w	8015024 <_strtod_l+0x43c>
 8015238:	9b07      	ldr	r3, [sp, #28]
 801523a:	691a      	ldr	r2, [r3, #16]
 801523c:	3202      	adds	r2, #2
 801523e:	f103 010c 	add.w	r1, r3, #12
 8015242:	0092      	lsls	r2, r2, #2
 8015244:	300c      	adds	r0, #12
 8015246:	f7fe fdd3 	bl	8013df0 <memcpy>
 801524a:	aa1e      	add	r2, sp, #120	; 0x78
 801524c:	a91d      	add	r1, sp, #116	; 0x74
 801524e:	ec4b ab10 	vmov	d0, sl, fp
 8015252:	4648      	mov	r0, r9
 8015254:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015258:	f002 f862 	bl	8017320 <__d2b>
 801525c:	901c      	str	r0, [sp, #112]	; 0x70
 801525e:	2800      	cmp	r0, #0
 8015260:	f43f aee0 	beq.w	8015024 <_strtod_l+0x43c>
 8015264:	2101      	movs	r1, #1
 8015266:	4648      	mov	r0, r9
 8015268:	f001 fe2a 	bl	8016ec0 <__i2b>
 801526c:	4680      	mov	r8, r0
 801526e:	2800      	cmp	r0, #0
 8015270:	f43f aed8 	beq.w	8015024 <_strtod_l+0x43c>
 8015274:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015276:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015278:	2e00      	cmp	r6, #0
 801527a:	bfab      	itete	ge
 801527c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801527e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015280:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015282:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015284:	bfac      	ite	ge
 8015286:	18f7      	addge	r7, r6, r3
 8015288:	1b9d      	sublt	r5, r3, r6
 801528a:	9b04      	ldr	r3, [sp, #16]
 801528c:	1af6      	subs	r6, r6, r3
 801528e:	4416      	add	r6, r2
 8015290:	4b63      	ldr	r3, [pc, #396]	; (8015420 <_strtod_l+0x838>)
 8015292:	3e01      	subs	r6, #1
 8015294:	429e      	cmp	r6, r3
 8015296:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801529a:	f280 80af 	bge.w	80153fc <_strtod_l+0x814>
 801529e:	1b9b      	subs	r3, r3, r6
 80152a0:	2b1f      	cmp	r3, #31
 80152a2:	eba2 0203 	sub.w	r2, r2, r3
 80152a6:	f04f 0101 	mov.w	r1, #1
 80152aa:	f300 809b 	bgt.w	80153e4 <_strtod_l+0x7fc>
 80152ae:	fa01 f303 	lsl.w	r3, r1, r3
 80152b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80152b4:	2300      	movs	r3, #0
 80152b6:	930a      	str	r3, [sp, #40]	; 0x28
 80152b8:	18be      	adds	r6, r7, r2
 80152ba:	9b04      	ldr	r3, [sp, #16]
 80152bc:	42b7      	cmp	r7, r6
 80152be:	4415      	add	r5, r2
 80152c0:	441d      	add	r5, r3
 80152c2:	463b      	mov	r3, r7
 80152c4:	bfa8      	it	ge
 80152c6:	4633      	movge	r3, r6
 80152c8:	42ab      	cmp	r3, r5
 80152ca:	bfa8      	it	ge
 80152cc:	462b      	movge	r3, r5
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	bfc2      	ittt	gt
 80152d2:	1af6      	subgt	r6, r6, r3
 80152d4:	1aed      	subgt	r5, r5, r3
 80152d6:	1aff      	subgt	r7, r7, r3
 80152d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152da:	b1bb      	cbz	r3, 801530c <_strtod_l+0x724>
 80152dc:	4641      	mov	r1, r8
 80152de:	461a      	mov	r2, r3
 80152e0:	4648      	mov	r0, r9
 80152e2:	f001 fe8d 	bl	8017000 <__pow5mult>
 80152e6:	4680      	mov	r8, r0
 80152e8:	2800      	cmp	r0, #0
 80152ea:	f43f ae9b 	beq.w	8015024 <_strtod_l+0x43c>
 80152ee:	4601      	mov	r1, r0
 80152f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80152f2:	4648      	mov	r0, r9
 80152f4:	f001 fded 	bl	8016ed2 <__multiply>
 80152f8:	900c      	str	r0, [sp, #48]	; 0x30
 80152fa:	2800      	cmp	r0, #0
 80152fc:	f43f ae92 	beq.w	8015024 <_strtod_l+0x43c>
 8015300:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015302:	4648      	mov	r0, r9
 8015304:	f001 fcfe 	bl	8016d04 <_Bfree>
 8015308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801530a:	931c      	str	r3, [sp, #112]	; 0x70
 801530c:	2e00      	cmp	r6, #0
 801530e:	dc7a      	bgt.n	8015406 <_strtod_l+0x81e>
 8015310:	9b06      	ldr	r3, [sp, #24]
 8015312:	2b00      	cmp	r3, #0
 8015314:	dd08      	ble.n	8015328 <_strtod_l+0x740>
 8015316:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015318:	9905      	ldr	r1, [sp, #20]
 801531a:	4648      	mov	r0, r9
 801531c:	f001 fe70 	bl	8017000 <__pow5mult>
 8015320:	9005      	str	r0, [sp, #20]
 8015322:	2800      	cmp	r0, #0
 8015324:	f43f ae7e 	beq.w	8015024 <_strtod_l+0x43c>
 8015328:	2d00      	cmp	r5, #0
 801532a:	dd08      	ble.n	801533e <_strtod_l+0x756>
 801532c:	462a      	mov	r2, r5
 801532e:	9905      	ldr	r1, [sp, #20]
 8015330:	4648      	mov	r0, r9
 8015332:	f001 feb3 	bl	801709c <__lshift>
 8015336:	9005      	str	r0, [sp, #20]
 8015338:	2800      	cmp	r0, #0
 801533a:	f43f ae73 	beq.w	8015024 <_strtod_l+0x43c>
 801533e:	2f00      	cmp	r7, #0
 8015340:	dd08      	ble.n	8015354 <_strtod_l+0x76c>
 8015342:	4641      	mov	r1, r8
 8015344:	463a      	mov	r2, r7
 8015346:	4648      	mov	r0, r9
 8015348:	f001 fea8 	bl	801709c <__lshift>
 801534c:	4680      	mov	r8, r0
 801534e:	2800      	cmp	r0, #0
 8015350:	f43f ae68 	beq.w	8015024 <_strtod_l+0x43c>
 8015354:	9a05      	ldr	r2, [sp, #20]
 8015356:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015358:	4648      	mov	r0, r9
 801535a:	f001 ff0d 	bl	8017178 <__mdiff>
 801535e:	4604      	mov	r4, r0
 8015360:	2800      	cmp	r0, #0
 8015362:	f43f ae5f 	beq.w	8015024 <_strtod_l+0x43c>
 8015366:	68c3      	ldr	r3, [r0, #12]
 8015368:	930c      	str	r3, [sp, #48]	; 0x30
 801536a:	2300      	movs	r3, #0
 801536c:	60c3      	str	r3, [r0, #12]
 801536e:	4641      	mov	r1, r8
 8015370:	f001 fee8 	bl	8017144 <__mcmp>
 8015374:	2800      	cmp	r0, #0
 8015376:	da55      	bge.n	8015424 <_strtod_l+0x83c>
 8015378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801537a:	b9e3      	cbnz	r3, 80153b6 <_strtod_l+0x7ce>
 801537c:	f1ba 0f00 	cmp.w	sl, #0
 8015380:	d119      	bne.n	80153b6 <_strtod_l+0x7ce>
 8015382:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015386:	b9b3      	cbnz	r3, 80153b6 <_strtod_l+0x7ce>
 8015388:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801538c:	0d1b      	lsrs	r3, r3, #20
 801538e:	051b      	lsls	r3, r3, #20
 8015390:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015394:	d90f      	bls.n	80153b6 <_strtod_l+0x7ce>
 8015396:	6963      	ldr	r3, [r4, #20]
 8015398:	b913      	cbnz	r3, 80153a0 <_strtod_l+0x7b8>
 801539a:	6923      	ldr	r3, [r4, #16]
 801539c:	2b01      	cmp	r3, #1
 801539e:	dd0a      	ble.n	80153b6 <_strtod_l+0x7ce>
 80153a0:	4621      	mov	r1, r4
 80153a2:	2201      	movs	r2, #1
 80153a4:	4648      	mov	r0, r9
 80153a6:	f001 fe79 	bl	801709c <__lshift>
 80153aa:	4641      	mov	r1, r8
 80153ac:	4604      	mov	r4, r0
 80153ae:	f001 fec9 	bl	8017144 <__mcmp>
 80153b2:	2800      	cmp	r0, #0
 80153b4:	dc67      	bgt.n	8015486 <_strtod_l+0x89e>
 80153b6:	9b04      	ldr	r3, [sp, #16]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d171      	bne.n	80154a0 <_strtod_l+0x8b8>
 80153bc:	e63d      	b.n	801503a <_strtod_l+0x452>
 80153be:	f018 0f01 	tst.w	r8, #1
 80153c2:	d004      	beq.n	80153ce <_strtod_l+0x7e6>
 80153c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80153c8:	f7eb f92e 	bl	8000628 <__aeabi_dmul>
 80153cc:	2301      	movs	r3, #1
 80153ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80153d2:	3508      	adds	r5, #8
 80153d4:	e6e5      	b.n	80151a2 <_strtod_l+0x5ba>
 80153d6:	f04f 32ff 	mov.w	r2, #4294967295
 80153da:	fa02 f303 	lsl.w	r3, r2, r3
 80153de:	ea03 0a0a 	and.w	sl, r3, sl
 80153e2:	e6ff      	b.n	80151e4 <_strtod_l+0x5fc>
 80153e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80153e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80153ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80153f0:	36e2      	adds	r6, #226	; 0xe2
 80153f2:	fa01 f306 	lsl.w	r3, r1, r6
 80153f6:	930a      	str	r3, [sp, #40]	; 0x28
 80153f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80153fa:	e75d      	b.n	80152b8 <_strtod_l+0x6d0>
 80153fc:	2300      	movs	r3, #0
 80153fe:	930a      	str	r3, [sp, #40]	; 0x28
 8015400:	2301      	movs	r3, #1
 8015402:	930f      	str	r3, [sp, #60]	; 0x3c
 8015404:	e758      	b.n	80152b8 <_strtod_l+0x6d0>
 8015406:	4632      	mov	r2, r6
 8015408:	991c      	ldr	r1, [sp, #112]	; 0x70
 801540a:	4648      	mov	r0, r9
 801540c:	f001 fe46 	bl	801709c <__lshift>
 8015410:	901c      	str	r0, [sp, #112]	; 0x70
 8015412:	2800      	cmp	r0, #0
 8015414:	f47f af7c 	bne.w	8015310 <_strtod_l+0x728>
 8015418:	e604      	b.n	8015024 <_strtod_l+0x43c>
 801541a:	bf00      	nop
 801541c:	08018a18 	.word	0x08018a18
 8015420:	fffffc02 	.word	0xfffffc02
 8015424:	465d      	mov	r5, fp
 8015426:	f040 8086 	bne.w	8015536 <_strtod_l+0x94e>
 801542a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801542c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015430:	b32a      	cbz	r2, 801547e <_strtod_l+0x896>
 8015432:	4aaf      	ldr	r2, [pc, #700]	; (80156f0 <_strtod_l+0xb08>)
 8015434:	4293      	cmp	r3, r2
 8015436:	d153      	bne.n	80154e0 <_strtod_l+0x8f8>
 8015438:	9b04      	ldr	r3, [sp, #16]
 801543a:	4650      	mov	r0, sl
 801543c:	b1d3      	cbz	r3, 8015474 <_strtod_l+0x88c>
 801543e:	4aad      	ldr	r2, [pc, #692]	; (80156f4 <_strtod_l+0xb0c>)
 8015440:	402a      	ands	r2, r5
 8015442:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015446:	f04f 31ff 	mov.w	r1, #4294967295
 801544a:	d816      	bhi.n	801547a <_strtod_l+0x892>
 801544c:	0d12      	lsrs	r2, r2, #20
 801544e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015452:	fa01 f303 	lsl.w	r3, r1, r3
 8015456:	4298      	cmp	r0, r3
 8015458:	d142      	bne.n	80154e0 <_strtod_l+0x8f8>
 801545a:	4ba7      	ldr	r3, [pc, #668]	; (80156f8 <_strtod_l+0xb10>)
 801545c:	429d      	cmp	r5, r3
 801545e:	d102      	bne.n	8015466 <_strtod_l+0x87e>
 8015460:	3001      	adds	r0, #1
 8015462:	f43f addf 	beq.w	8015024 <_strtod_l+0x43c>
 8015466:	4ba3      	ldr	r3, [pc, #652]	; (80156f4 <_strtod_l+0xb0c>)
 8015468:	402b      	ands	r3, r5
 801546a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801546e:	f04f 0a00 	mov.w	sl, #0
 8015472:	e7a0      	b.n	80153b6 <_strtod_l+0x7ce>
 8015474:	f04f 33ff 	mov.w	r3, #4294967295
 8015478:	e7ed      	b.n	8015456 <_strtod_l+0x86e>
 801547a:	460b      	mov	r3, r1
 801547c:	e7eb      	b.n	8015456 <_strtod_l+0x86e>
 801547e:	bb7b      	cbnz	r3, 80154e0 <_strtod_l+0x8f8>
 8015480:	f1ba 0f00 	cmp.w	sl, #0
 8015484:	d12c      	bne.n	80154e0 <_strtod_l+0x8f8>
 8015486:	9904      	ldr	r1, [sp, #16]
 8015488:	4a9a      	ldr	r2, [pc, #616]	; (80156f4 <_strtod_l+0xb0c>)
 801548a:	465b      	mov	r3, fp
 801548c:	b1f1      	cbz	r1, 80154cc <_strtod_l+0x8e4>
 801548e:	ea02 010b 	and.w	r1, r2, fp
 8015492:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015496:	dc19      	bgt.n	80154cc <_strtod_l+0x8e4>
 8015498:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801549c:	f77f ae5b 	ble.w	8015156 <_strtod_l+0x56e>
 80154a0:	4a96      	ldr	r2, [pc, #600]	; (80156fc <_strtod_l+0xb14>)
 80154a2:	2300      	movs	r3, #0
 80154a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80154a8:	4650      	mov	r0, sl
 80154aa:	4659      	mov	r1, fp
 80154ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80154b0:	f7eb f8ba 	bl	8000628 <__aeabi_dmul>
 80154b4:	4682      	mov	sl, r0
 80154b6:	468b      	mov	fp, r1
 80154b8:	2900      	cmp	r1, #0
 80154ba:	f47f adbe 	bne.w	801503a <_strtod_l+0x452>
 80154be:	2800      	cmp	r0, #0
 80154c0:	f47f adbb 	bne.w	801503a <_strtod_l+0x452>
 80154c4:	2322      	movs	r3, #34	; 0x22
 80154c6:	f8c9 3000 	str.w	r3, [r9]
 80154ca:	e5b6      	b.n	801503a <_strtod_l+0x452>
 80154cc:	4013      	ands	r3, r2
 80154ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80154d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80154d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80154da:	f04f 3aff 	mov.w	sl, #4294967295
 80154de:	e76a      	b.n	80153b6 <_strtod_l+0x7ce>
 80154e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154e2:	b193      	cbz	r3, 801550a <_strtod_l+0x922>
 80154e4:	422b      	tst	r3, r5
 80154e6:	f43f af66 	beq.w	80153b6 <_strtod_l+0x7ce>
 80154ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154ec:	9a04      	ldr	r2, [sp, #16]
 80154ee:	4650      	mov	r0, sl
 80154f0:	4659      	mov	r1, fp
 80154f2:	b173      	cbz	r3, 8015512 <_strtod_l+0x92a>
 80154f4:	f7ff fb5c 	bl	8014bb0 <sulp>
 80154f8:	4602      	mov	r2, r0
 80154fa:	460b      	mov	r3, r1
 80154fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015500:	f7ea fedc 	bl	80002bc <__adddf3>
 8015504:	4682      	mov	sl, r0
 8015506:	468b      	mov	fp, r1
 8015508:	e755      	b.n	80153b6 <_strtod_l+0x7ce>
 801550a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801550c:	ea13 0f0a 	tst.w	r3, sl
 8015510:	e7e9      	b.n	80154e6 <_strtod_l+0x8fe>
 8015512:	f7ff fb4d 	bl	8014bb0 <sulp>
 8015516:	4602      	mov	r2, r0
 8015518:	460b      	mov	r3, r1
 801551a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801551e:	f7ea fecb 	bl	80002b8 <__aeabi_dsub>
 8015522:	2200      	movs	r2, #0
 8015524:	2300      	movs	r3, #0
 8015526:	4682      	mov	sl, r0
 8015528:	468b      	mov	fp, r1
 801552a:	f7eb fae5 	bl	8000af8 <__aeabi_dcmpeq>
 801552e:	2800      	cmp	r0, #0
 8015530:	f47f ae11 	bne.w	8015156 <_strtod_l+0x56e>
 8015534:	e73f      	b.n	80153b6 <_strtod_l+0x7ce>
 8015536:	4641      	mov	r1, r8
 8015538:	4620      	mov	r0, r4
 801553a:	f001 ff40 	bl	80173be <__ratio>
 801553e:	ec57 6b10 	vmov	r6, r7, d0
 8015542:	2200      	movs	r2, #0
 8015544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015548:	ee10 0a10 	vmov	r0, s0
 801554c:	4639      	mov	r1, r7
 801554e:	f7eb fae7 	bl	8000b20 <__aeabi_dcmple>
 8015552:	2800      	cmp	r0, #0
 8015554:	d077      	beq.n	8015646 <_strtod_l+0xa5e>
 8015556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015558:	2b00      	cmp	r3, #0
 801555a:	d04a      	beq.n	80155f2 <_strtod_l+0xa0a>
 801555c:	4b68      	ldr	r3, [pc, #416]	; (8015700 <_strtod_l+0xb18>)
 801555e:	2200      	movs	r2, #0
 8015560:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015564:	4f66      	ldr	r7, [pc, #408]	; (8015700 <_strtod_l+0xb18>)
 8015566:	2600      	movs	r6, #0
 8015568:	4b62      	ldr	r3, [pc, #392]	; (80156f4 <_strtod_l+0xb0c>)
 801556a:	402b      	ands	r3, r5
 801556c:	930f      	str	r3, [sp, #60]	; 0x3c
 801556e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015570:	4b64      	ldr	r3, [pc, #400]	; (8015704 <_strtod_l+0xb1c>)
 8015572:	429a      	cmp	r2, r3
 8015574:	f040 80ce 	bne.w	8015714 <_strtod_l+0xb2c>
 8015578:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801557c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015580:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015584:	ec4b ab10 	vmov	d0, sl, fp
 8015588:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801558c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015590:	f001 fe50 	bl	8017234 <__ulp>
 8015594:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015598:	ec53 2b10 	vmov	r2, r3, d0
 801559c:	f7eb f844 	bl	8000628 <__aeabi_dmul>
 80155a0:	4652      	mov	r2, sl
 80155a2:	465b      	mov	r3, fp
 80155a4:	f7ea fe8a 	bl	80002bc <__adddf3>
 80155a8:	460b      	mov	r3, r1
 80155aa:	4952      	ldr	r1, [pc, #328]	; (80156f4 <_strtod_l+0xb0c>)
 80155ac:	4a56      	ldr	r2, [pc, #344]	; (8015708 <_strtod_l+0xb20>)
 80155ae:	4019      	ands	r1, r3
 80155b0:	4291      	cmp	r1, r2
 80155b2:	4682      	mov	sl, r0
 80155b4:	d95b      	bls.n	801566e <_strtod_l+0xa86>
 80155b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80155bc:	4293      	cmp	r3, r2
 80155be:	d103      	bne.n	80155c8 <_strtod_l+0x9e0>
 80155c0:	9b08      	ldr	r3, [sp, #32]
 80155c2:	3301      	adds	r3, #1
 80155c4:	f43f ad2e 	beq.w	8015024 <_strtod_l+0x43c>
 80155c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80156f8 <_strtod_l+0xb10>
 80155cc:	f04f 3aff 	mov.w	sl, #4294967295
 80155d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80155d2:	4648      	mov	r0, r9
 80155d4:	f001 fb96 	bl	8016d04 <_Bfree>
 80155d8:	9905      	ldr	r1, [sp, #20]
 80155da:	4648      	mov	r0, r9
 80155dc:	f001 fb92 	bl	8016d04 <_Bfree>
 80155e0:	4641      	mov	r1, r8
 80155e2:	4648      	mov	r0, r9
 80155e4:	f001 fb8e 	bl	8016d04 <_Bfree>
 80155e8:	4621      	mov	r1, r4
 80155ea:	4648      	mov	r0, r9
 80155ec:	f001 fb8a 	bl	8016d04 <_Bfree>
 80155f0:	e619      	b.n	8015226 <_strtod_l+0x63e>
 80155f2:	f1ba 0f00 	cmp.w	sl, #0
 80155f6:	d11a      	bne.n	801562e <_strtod_l+0xa46>
 80155f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80155fc:	b9eb      	cbnz	r3, 801563a <_strtod_l+0xa52>
 80155fe:	2200      	movs	r2, #0
 8015600:	4b3f      	ldr	r3, [pc, #252]	; (8015700 <_strtod_l+0xb18>)
 8015602:	4630      	mov	r0, r6
 8015604:	4639      	mov	r1, r7
 8015606:	f7eb fa81 	bl	8000b0c <__aeabi_dcmplt>
 801560a:	b9c8      	cbnz	r0, 8015640 <_strtod_l+0xa58>
 801560c:	4630      	mov	r0, r6
 801560e:	4639      	mov	r1, r7
 8015610:	2200      	movs	r2, #0
 8015612:	4b3e      	ldr	r3, [pc, #248]	; (801570c <_strtod_l+0xb24>)
 8015614:	f7eb f808 	bl	8000628 <__aeabi_dmul>
 8015618:	4606      	mov	r6, r0
 801561a:	460f      	mov	r7, r1
 801561c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015620:	9618      	str	r6, [sp, #96]	; 0x60
 8015622:	9319      	str	r3, [sp, #100]	; 0x64
 8015624:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015628:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801562c:	e79c      	b.n	8015568 <_strtod_l+0x980>
 801562e:	f1ba 0f01 	cmp.w	sl, #1
 8015632:	d102      	bne.n	801563a <_strtod_l+0xa52>
 8015634:	2d00      	cmp	r5, #0
 8015636:	f43f ad8e 	beq.w	8015156 <_strtod_l+0x56e>
 801563a:	2200      	movs	r2, #0
 801563c:	4b34      	ldr	r3, [pc, #208]	; (8015710 <_strtod_l+0xb28>)
 801563e:	e78f      	b.n	8015560 <_strtod_l+0x978>
 8015640:	2600      	movs	r6, #0
 8015642:	4f32      	ldr	r7, [pc, #200]	; (801570c <_strtod_l+0xb24>)
 8015644:	e7ea      	b.n	801561c <_strtod_l+0xa34>
 8015646:	4b31      	ldr	r3, [pc, #196]	; (801570c <_strtod_l+0xb24>)
 8015648:	4630      	mov	r0, r6
 801564a:	4639      	mov	r1, r7
 801564c:	2200      	movs	r2, #0
 801564e:	f7ea ffeb 	bl	8000628 <__aeabi_dmul>
 8015652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015654:	4606      	mov	r6, r0
 8015656:	460f      	mov	r7, r1
 8015658:	b933      	cbnz	r3, 8015668 <_strtod_l+0xa80>
 801565a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801565e:	9010      	str	r0, [sp, #64]	; 0x40
 8015660:	9311      	str	r3, [sp, #68]	; 0x44
 8015662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015666:	e7df      	b.n	8015628 <_strtod_l+0xa40>
 8015668:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801566c:	e7f9      	b.n	8015662 <_strtod_l+0xa7a>
 801566e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015672:	9b04      	ldr	r3, [sp, #16]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d1ab      	bne.n	80155d0 <_strtod_l+0x9e8>
 8015678:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801567c:	0d1b      	lsrs	r3, r3, #20
 801567e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015680:	051b      	lsls	r3, r3, #20
 8015682:	429a      	cmp	r2, r3
 8015684:	465d      	mov	r5, fp
 8015686:	d1a3      	bne.n	80155d0 <_strtod_l+0x9e8>
 8015688:	4639      	mov	r1, r7
 801568a:	4630      	mov	r0, r6
 801568c:	f7eb fa7c 	bl	8000b88 <__aeabi_d2iz>
 8015690:	f7ea ff60 	bl	8000554 <__aeabi_i2d>
 8015694:	460b      	mov	r3, r1
 8015696:	4602      	mov	r2, r0
 8015698:	4639      	mov	r1, r7
 801569a:	4630      	mov	r0, r6
 801569c:	f7ea fe0c 	bl	80002b8 <__aeabi_dsub>
 80156a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156a2:	4606      	mov	r6, r0
 80156a4:	460f      	mov	r7, r1
 80156a6:	b933      	cbnz	r3, 80156b6 <_strtod_l+0xace>
 80156a8:	f1ba 0f00 	cmp.w	sl, #0
 80156ac:	d103      	bne.n	80156b6 <_strtod_l+0xace>
 80156ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80156b2:	2d00      	cmp	r5, #0
 80156b4:	d06d      	beq.n	8015792 <_strtod_l+0xbaa>
 80156b6:	a30a      	add	r3, pc, #40	; (adr r3, 80156e0 <_strtod_l+0xaf8>)
 80156b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156bc:	4630      	mov	r0, r6
 80156be:	4639      	mov	r1, r7
 80156c0:	f7eb fa24 	bl	8000b0c <__aeabi_dcmplt>
 80156c4:	2800      	cmp	r0, #0
 80156c6:	f47f acb8 	bne.w	801503a <_strtod_l+0x452>
 80156ca:	a307      	add	r3, pc, #28	; (adr r3, 80156e8 <_strtod_l+0xb00>)
 80156cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156d0:	4630      	mov	r0, r6
 80156d2:	4639      	mov	r1, r7
 80156d4:	f7eb fa38 	bl	8000b48 <__aeabi_dcmpgt>
 80156d8:	2800      	cmp	r0, #0
 80156da:	f43f af79 	beq.w	80155d0 <_strtod_l+0x9e8>
 80156de:	e4ac      	b.n	801503a <_strtod_l+0x452>
 80156e0:	94a03595 	.word	0x94a03595
 80156e4:	3fdfffff 	.word	0x3fdfffff
 80156e8:	35afe535 	.word	0x35afe535
 80156ec:	3fe00000 	.word	0x3fe00000
 80156f0:	000fffff 	.word	0x000fffff
 80156f4:	7ff00000 	.word	0x7ff00000
 80156f8:	7fefffff 	.word	0x7fefffff
 80156fc:	39500000 	.word	0x39500000
 8015700:	3ff00000 	.word	0x3ff00000
 8015704:	7fe00000 	.word	0x7fe00000
 8015708:	7c9fffff 	.word	0x7c9fffff
 801570c:	3fe00000 	.word	0x3fe00000
 8015710:	bff00000 	.word	0xbff00000
 8015714:	9b04      	ldr	r3, [sp, #16]
 8015716:	b333      	cbz	r3, 8015766 <_strtod_l+0xb7e>
 8015718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801571a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801571e:	d822      	bhi.n	8015766 <_strtod_l+0xb7e>
 8015720:	a327      	add	r3, pc, #156	; (adr r3, 80157c0 <_strtod_l+0xbd8>)
 8015722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015726:	4630      	mov	r0, r6
 8015728:	4639      	mov	r1, r7
 801572a:	f7eb f9f9 	bl	8000b20 <__aeabi_dcmple>
 801572e:	b1a0      	cbz	r0, 801575a <_strtod_l+0xb72>
 8015730:	4639      	mov	r1, r7
 8015732:	4630      	mov	r0, r6
 8015734:	f7eb fa50 	bl	8000bd8 <__aeabi_d2uiz>
 8015738:	2800      	cmp	r0, #0
 801573a:	bf08      	it	eq
 801573c:	2001      	moveq	r0, #1
 801573e:	f7ea fef9 	bl	8000534 <__aeabi_ui2d>
 8015742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015744:	4606      	mov	r6, r0
 8015746:	460f      	mov	r7, r1
 8015748:	bb03      	cbnz	r3, 801578c <_strtod_l+0xba4>
 801574a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801574e:	9012      	str	r0, [sp, #72]	; 0x48
 8015750:	9313      	str	r3, [sp, #76]	; 0x4c
 8015752:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015756:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801575a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801575c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801575e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015762:	1a9b      	subs	r3, r3, r2
 8015764:	930b      	str	r3, [sp, #44]	; 0x2c
 8015766:	ed9d 0b08 	vldr	d0, [sp, #32]
 801576a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801576e:	f001 fd61 	bl	8017234 <__ulp>
 8015772:	4650      	mov	r0, sl
 8015774:	ec53 2b10 	vmov	r2, r3, d0
 8015778:	4659      	mov	r1, fp
 801577a:	f7ea ff55 	bl	8000628 <__aeabi_dmul>
 801577e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015782:	f7ea fd9b 	bl	80002bc <__adddf3>
 8015786:	4682      	mov	sl, r0
 8015788:	468b      	mov	fp, r1
 801578a:	e772      	b.n	8015672 <_strtod_l+0xa8a>
 801578c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015790:	e7df      	b.n	8015752 <_strtod_l+0xb6a>
 8015792:	a30d      	add	r3, pc, #52	; (adr r3, 80157c8 <_strtod_l+0xbe0>)
 8015794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015798:	f7eb f9b8 	bl	8000b0c <__aeabi_dcmplt>
 801579c:	e79c      	b.n	80156d8 <_strtod_l+0xaf0>
 801579e:	2300      	movs	r3, #0
 80157a0:	930d      	str	r3, [sp, #52]	; 0x34
 80157a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80157a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157a6:	6013      	str	r3, [r2, #0]
 80157a8:	f7ff ba61 	b.w	8014c6e <_strtod_l+0x86>
 80157ac:	2b65      	cmp	r3, #101	; 0x65
 80157ae:	f04f 0200 	mov.w	r2, #0
 80157b2:	f43f ab4e 	beq.w	8014e52 <_strtod_l+0x26a>
 80157b6:	2101      	movs	r1, #1
 80157b8:	4614      	mov	r4, r2
 80157ba:	9104      	str	r1, [sp, #16]
 80157bc:	f7ff bacb 	b.w	8014d56 <_strtod_l+0x16e>
 80157c0:	ffc00000 	.word	0xffc00000
 80157c4:	41dfffff 	.word	0x41dfffff
 80157c8:	94a03595 	.word	0x94a03595
 80157cc:	3fcfffff 	.word	0x3fcfffff

080157d0 <_strtod_r>:
 80157d0:	4b05      	ldr	r3, [pc, #20]	; (80157e8 <_strtod_r+0x18>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	b410      	push	{r4}
 80157d6:	6a1b      	ldr	r3, [r3, #32]
 80157d8:	4c04      	ldr	r4, [pc, #16]	; (80157ec <_strtod_r+0x1c>)
 80157da:	2b00      	cmp	r3, #0
 80157dc:	bf08      	it	eq
 80157de:	4623      	moveq	r3, r4
 80157e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157e4:	f7ff ba00 	b.w	8014be8 <_strtod_l>
 80157e8:	2000000c 	.word	0x2000000c
 80157ec:	20000070 	.word	0x20000070

080157f0 <_strtol_l.isra.0>:
 80157f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157f4:	4680      	mov	r8, r0
 80157f6:	4689      	mov	r9, r1
 80157f8:	4692      	mov	sl, r2
 80157fa:	461e      	mov	r6, r3
 80157fc:	460f      	mov	r7, r1
 80157fe:	463d      	mov	r5, r7
 8015800:	9808      	ldr	r0, [sp, #32]
 8015802:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015806:	f001 fa0d 	bl	8016c24 <__locale_ctype_ptr_l>
 801580a:	4420      	add	r0, r4
 801580c:	7843      	ldrb	r3, [r0, #1]
 801580e:	f013 0308 	ands.w	r3, r3, #8
 8015812:	d132      	bne.n	801587a <_strtol_l.isra.0+0x8a>
 8015814:	2c2d      	cmp	r4, #45	; 0x2d
 8015816:	d132      	bne.n	801587e <_strtol_l.isra.0+0x8e>
 8015818:	787c      	ldrb	r4, [r7, #1]
 801581a:	1cbd      	adds	r5, r7, #2
 801581c:	2201      	movs	r2, #1
 801581e:	2e00      	cmp	r6, #0
 8015820:	d05d      	beq.n	80158de <_strtol_l.isra.0+0xee>
 8015822:	2e10      	cmp	r6, #16
 8015824:	d109      	bne.n	801583a <_strtol_l.isra.0+0x4a>
 8015826:	2c30      	cmp	r4, #48	; 0x30
 8015828:	d107      	bne.n	801583a <_strtol_l.isra.0+0x4a>
 801582a:	782b      	ldrb	r3, [r5, #0]
 801582c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015830:	2b58      	cmp	r3, #88	; 0x58
 8015832:	d14f      	bne.n	80158d4 <_strtol_l.isra.0+0xe4>
 8015834:	786c      	ldrb	r4, [r5, #1]
 8015836:	2610      	movs	r6, #16
 8015838:	3502      	adds	r5, #2
 801583a:	2a00      	cmp	r2, #0
 801583c:	bf14      	ite	ne
 801583e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015842:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015846:	2700      	movs	r7, #0
 8015848:	fbb1 fcf6 	udiv	ip, r1, r6
 801584c:	4638      	mov	r0, r7
 801584e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015852:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015856:	2b09      	cmp	r3, #9
 8015858:	d817      	bhi.n	801588a <_strtol_l.isra.0+0x9a>
 801585a:	461c      	mov	r4, r3
 801585c:	42a6      	cmp	r6, r4
 801585e:	dd23      	ble.n	80158a8 <_strtol_l.isra.0+0xb8>
 8015860:	1c7b      	adds	r3, r7, #1
 8015862:	d007      	beq.n	8015874 <_strtol_l.isra.0+0x84>
 8015864:	4584      	cmp	ip, r0
 8015866:	d31c      	bcc.n	80158a2 <_strtol_l.isra.0+0xb2>
 8015868:	d101      	bne.n	801586e <_strtol_l.isra.0+0x7e>
 801586a:	45a6      	cmp	lr, r4
 801586c:	db19      	blt.n	80158a2 <_strtol_l.isra.0+0xb2>
 801586e:	fb00 4006 	mla	r0, r0, r6, r4
 8015872:	2701      	movs	r7, #1
 8015874:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015878:	e7eb      	b.n	8015852 <_strtol_l.isra.0+0x62>
 801587a:	462f      	mov	r7, r5
 801587c:	e7bf      	b.n	80157fe <_strtol_l.isra.0+0xe>
 801587e:	2c2b      	cmp	r4, #43	; 0x2b
 8015880:	bf04      	itt	eq
 8015882:	1cbd      	addeq	r5, r7, #2
 8015884:	787c      	ldrbeq	r4, [r7, #1]
 8015886:	461a      	mov	r2, r3
 8015888:	e7c9      	b.n	801581e <_strtol_l.isra.0+0x2e>
 801588a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801588e:	2b19      	cmp	r3, #25
 8015890:	d801      	bhi.n	8015896 <_strtol_l.isra.0+0xa6>
 8015892:	3c37      	subs	r4, #55	; 0x37
 8015894:	e7e2      	b.n	801585c <_strtol_l.isra.0+0x6c>
 8015896:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801589a:	2b19      	cmp	r3, #25
 801589c:	d804      	bhi.n	80158a8 <_strtol_l.isra.0+0xb8>
 801589e:	3c57      	subs	r4, #87	; 0x57
 80158a0:	e7dc      	b.n	801585c <_strtol_l.isra.0+0x6c>
 80158a2:	f04f 37ff 	mov.w	r7, #4294967295
 80158a6:	e7e5      	b.n	8015874 <_strtol_l.isra.0+0x84>
 80158a8:	1c7b      	adds	r3, r7, #1
 80158aa:	d108      	bne.n	80158be <_strtol_l.isra.0+0xce>
 80158ac:	2322      	movs	r3, #34	; 0x22
 80158ae:	f8c8 3000 	str.w	r3, [r8]
 80158b2:	4608      	mov	r0, r1
 80158b4:	f1ba 0f00 	cmp.w	sl, #0
 80158b8:	d107      	bne.n	80158ca <_strtol_l.isra.0+0xda>
 80158ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158be:	b102      	cbz	r2, 80158c2 <_strtol_l.isra.0+0xd2>
 80158c0:	4240      	negs	r0, r0
 80158c2:	f1ba 0f00 	cmp.w	sl, #0
 80158c6:	d0f8      	beq.n	80158ba <_strtol_l.isra.0+0xca>
 80158c8:	b10f      	cbz	r7, 80158ce <_strtol_l.isra.0+0xde>
 80158ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80158ce:	f8ca 9000 	str.w	r9, [sl]
 80158d2:	e7f2      	b.n	80158ba <_strtol_l.isra.0+0xca>
 80158d4:	2430      	movs	r4, #48	; 0x30
 80158d6:	2e00      	cmp	r6, #0
 80158d8:	d1af      	bne.n	801583a <_strtol_l.isra.0+0x4a>
 80158da:	2608      	movs	r6, #8
 80158dc:	e7ad      	b.n	801583a <_strtol_l.isra.0+0x4a>
 80158de:	2c30      	cmp	r4, #48	; 0x30
 80158e0:	d0a3      	beq.n	801582a <_strtol_l.isra.0+0x3a>
 80158e2:	260a      	movs	r6, #10
 80158e4:	e7a9      	b.n	801583a <_strtol_l.isra.0+0x4a>
	...

080158e8 <_strtol_r>:
 80158e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158ea:	4c06      	ldr	r4, [pc, #24]	; (8015904 <_strtol_r+0x1c>)
 80158ec:	4d06      	ldr	r5, [pc, #24]	; (8015908 <_strtol_r+0x20>)
 80158ee:	6824      	ldr	r4, [r4, #0]
 80158f0:	6a24      	ldr	r4, [r4, #32]
 80158f2:	2c00      	cmp	r4, #0
 80158f4:	bf08      	it	eq
 80158f6:	462c      	moveq	r4, r5
 80158f8:	9400      	str	r4, [sp, #0]
 80158fa:	f7ff ff79 	bl	80157f0 <_strtol_l.isra.0>
 80158fe:	b003      	add	sp, #12
 8015900:	bd30      	pop	{r4, r5, pc}
 8015902:	bf00      	nop
 8015904:	2000000c 	.word	0x2000000c
 8015908:	20000070 	.word	0x20000070

0801590c <_vsiprintf_r>:
 801590c:	b500      	push	{lr}
 801590e:	b09b      	sub	sp, #108	; 0x6c
 8015910:	9100      	str	r1, [sp, #0]
 8015912:	9104      	str	r1, [sp, #16]
 8015914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015918:	9105      	str	r1, [sp, #20]
 801591a:	9102      	str	r1, [sp, #8]
 801591c:	4905      	ldr	r1, [pc, #20]	; (8015934 <_vsiprintf_r+0x28>)
 801591e:	9103      	str	r1, [sp, #12]
 8015920:	4669      	mov	r1, sp
 8015922:	f001 fecb 	bl	80176bc <_svfiprintf_r>
 8015926:	9b00      	ldr	r3, [sp, #0]
 8015928:	2200      	movs	r2, #0
 801592a:	701a      	strb	r2, [r3, #0]
 801592c:	b01b      	add	sp, #108	; 0x6c
 801592e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015932:	bf00      	nop
 8015934:	ffff0208 	.word	0xffff0208

08015938 <vsiprintf>:
 8015938:	4613      	mov	r3, r2
 801593a:	460a      	mov	r2, r1
 801593c:	4601      	mov	r1, r0
 801593e:	4802      	ldr	r0, [pc, #8]	; (8015948 <vsiprintf+0x10>)
 8015940:	6800      	ldr	r0, [r0, #0]
 8015942:	f7ff bfe3 	b.w	801590c <_vsiprintf_r>
 8015946:	bf00      	nop
 8015948:	2000000c 	.word	0x2000000c

0801594c <quorem>:
 801594c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015950:	6903      	ldr	r3, [r0, #16]
 8015952:	690c      	ldr	r4, [r1, #16]
 8015954:	42a3      	cmp	r3, r4
 8015956:	4680      	mov	r8, r0
 8015958:	f2c0 8082 	blt.w	8015a60 <quorem+0x114>
 801595c:	3c01      	subs	r4, #1
 801595e:	f101 0714 	add.w	r7, r1, #20
 8015962:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015966:	f100 0614 	add.w	r6, r0, #20
 801596a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801596e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015972:	eb06 030c 	add.w	r3, r6, ip
 8015976:	3501      	adds	r5, #1
 8015978:	eb07 090c 	add.w	r9, r7, ip
 801597c:	9301      	str	r3, [sp, #4]
 801597e:	fbb0 f5f5 	udiv	r5, r0, r5
 8015982:	b395      	cbz	r5, 80159ea <quorem+0x9e>
 8015984:	f04f 0a00 	mov.w	sl, #0
 8015988:	4638      	mov	r0, r7
 801598a:	46b6      	mov	lr, r6
 801598c:	46d3      	mov	fp, sl
 801598e:	f850 2b04 	ldr.w	r2, [r0], #4
 8015992:	b293      	uxth	r3, r2
 8015994:	fb05 a303 	mla	r3, r5, r3, sl
 8015998:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801599c:	b29b      	uxth	r3, r3
 801599e:	ebab 0303 	sub.w	r3, fp, r3
 80159a2:	0c12      	lsrs	r2, r2, #16
 80159a4:	f8de b000 	ldr.w	fp, [lr]
 80159a8:	fb05 a202 	mla	r2, r5, r2, sl
 80159ac:	fa13 f38b 	uxtah	r3, r3, fp
 80159b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80159b4:	fa1f fb82 	uxth.w	fp, r2
 80159b8:	f8de 2000 	ldr.w	r2, [lr]
 80159bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80159c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80159ca:	4581      	cmp	r9, r0
 80159cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80159d0:	f84e 3b04 	str.w	r3, [lr], #4
 80159d4:	d2db      	bcs.n	801598e <quorem+0x42>
 80159d6:	f856 300c 	ldr.w	r3, [r6, ip]
 80159da:	b933      	cbnz	r3, 80159ea <quorem+0x9e>
 80159dc:	9b01      	ldr	r3, [sp, #4]
 80159de:	3b04      	subs	r3, #4
 80159e0:	429e      	cmp	r6, r3
 80159e2:	461a      	mov	r2, r3
 80159e4:	d330      	bcc.n	8015a48 <quorem+0xfc>
 80159e6:	f8c8 4010 	str.w	r4, [r8, #16]
 80159ea:	4640      	mov	r0, r8
 80159ec:	f001 fbaa 	bl	8017144 <__mcmp>
 80159f0:	2800      	cmp	r0, #0
 80159f2:	db25      	blt.n	8015a40 <quorem+0xf4>
 80159f4:	3501      	adds	r5, #1
 80159f6:	4630      	mov	r0, r6
 80159f8:	f04f 0c00 	mov.w	ip, #0
 80159fc:	f857 2b04 	ldr.w	r2, [r7], #4
 8015a00:	f8d0 e000 	ldr.w	lr, [r0]
 8015a04:	b293      	uxth	r3, r2
 8015a06:	ebac 0303 	sub.w	r3, ip, r3
 8015a0a:	0c12      	lsrs	r2, r2, #16
 8015a0c:	fa13 f38e 	uxtah	r3, r3, lr
 8015a10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015a14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015a18:	b29b      	uxth	r3, r3
 8015a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015a1e:	45b9      	cmp	r9, r7
 8015a20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015a24:	f840 3b04 	str.w	r3, [r0], #4
 8015a28:	d2e8      	bcs.n	80159fc <quorem+0xb0>
 8015a2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015a2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015a32:	b92a      	cbnz	r2, 8015a40 <quorem+0xf4>
 8015a34:	3b04      	subs	r3, #4
 8015a36:	429e      	cmp	r6, r3
 8015a38:	461a      	mov	r2, r3
 8015a3a:	d30b      	bcc.n	8015a54 <quorem+0x108>
 8015a3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8015a40:	4628      	mov	r0, r5
 8015a42:	b003      	add	sp, #12
 8015a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a48:	6812      	ldr	r2, [r2, #0]
 8015a4a:	3b04      	subs	r3, #4
 8015a4c:	2a00      	cmp	r2, #0
 8015a4e:	d1ca      	bne.n	80159e6 <quorem+0x9a>
 8015a50:	3c01      	subs	r4, #1
 8015a52:	e7c5      	b.n	80159e0 <quorem+0x94>
 8015a54:	6812      	ldr	r2, [r2, #0]
 8015a56:	3b04      	subs	r3, #4
 8015a58:	2a00      	cmp	r2, #0
 8015a5a:	d1ef      	bne.n	8015a3c <quorem+0xf0>
 8015a5c:	3c01      	subs	r4, #1
 8015a5e:	e7ea      	b.n	8015a36 <quorem+0xea>
 8015a60:	2000      	movs	r0, #0
 8015a62:	e7ee      	b.n	8015a42 <quorem+0xf6>
 8015a64:	0000      	movs	r0, r0
	...

08015a68 <_dtoa_r>:
 8015a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a6c:	ec57 6b10 	vmov	r6, r7, d0
 8015a70:	b097      	sub	sp, #92	; 0x5c
 8015a72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015a74:	9106      	str	r1, [sp, #24]
 8015a76:	4604      	mov	r4, r0
 8015a78:	920b      	str	r2, [sp, #44]	; 0x2c
 8015a7a:	9312      	str	r3, [sp, #72]	; 0x48
 8015a7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015a80:	e9cd 6700 	strd	r6, r7, [sp]
 8015a84:	b93d      	cbnz	r5, 8015a96 <_dtoa_r+0x2e>
 8015a86:	2010      	movs	r0, #16
 8015a88:	f001 f8ee 	bl	8016c68 <malloc>
 8015a8c:	6260      	str	r0, [r4, #36]	; 0x24
 8015a8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015a92:	6005      	str	r5, [r0, #0]
 8015a94:	60c5      	str	r5, [r0, #12]
 8015a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a98:	6819      	ldr	r1, [r3, #0]
 8015a9a:	b151      	cbz	r1, 8015ab2 <_dtoa_r+0x4a>
 8015a9c:	685a      	ldr	r2, [r3, #4]
 8015a9e:	604a      	str	r2, [r1, #4]
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	4093      	lsls	r3, r2
 8015aa4:	608b      	str	r3, [r1, #8]
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	f001 f92c 	bl	8016d04 <_Bfree>
 8015aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015aae:	2200      	movs	r2, #0
 8015ab0:	601a      	str	r2, [r3, #0]
 8015ab2:	1e3b      	subs	r3, r7, #0
 8015ab4:	bfbb      	ittet	lt
 8015ab6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015aba:	9301      	strlt	r3, [sp, #4]
 8015abc:	2300      	movge	r3, #0
 8015abe:	2201      	movlt	r2, #1
 8015ac0:	bfac      	ite	ge
 8015ac2:	f8c8 3000 	strge.w	r3, [r8]
 8015ac6:	f8c8 2000 	strlt.w	r2, [r8]
 8015aca:	4baf      	ldr	r3, [pc, #700]	; (8015d88 <_dtoa_r+0x320>)
 8015acc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015ad0:	ea33 0308 	bics.w	r3, r3, r8
 8015ad4:	d114      	bne.n	8015b00 <_dtoa_r+0x98>
 8015ad6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ad8:	f242 730f 	movw	r3, #9999	; 0x270f
 8015adc:	6013      	str	r3, [r2, #0]
 8015ade:	9b00      	ldr	r3, [sp, #0]
 8015ae0:	b923      	cbnz	r3, 8015aec <_dtoa_r+0x84>
 8015ae2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015ae6:	2800      	cmp	r0, #0
 8015ae8:	f000 8542 	beq.w	8016570 <_dtoa_r+0xb08>
 8015aec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015aee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015d9c <_dtoa_r+0x334>
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	f000 8544 	beq.w	8016580 <_dtoa_r+0xb18>
 8015af8:	f10b 0303 	add.w	r3, fp, #3
 8015afc:	f000 bd3e 	b.w	801657c <_dtoa_r+0xb14>
 8015b00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015b04:	2200      	movs	r2, #0
 8015b06:	2300      	movs	r3, #0
 8015b08:	4630      	mov	r0, r6
 8015b0a:	4639      	mov	r1, r7
 8015b0c:	f7ea fff4 	bl	8000af8 <__aeabi_dcmpeq>
 8015b10:	4681      	mov	r9, r0
 8015b12:	b168      	cbz	r0, 8015b30 <_dtoa_r+0xc8>
 8015b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b16:	2301      	movs	r3, #1
 8015b18:	6013      	str	r3, [r2, #0]
 8015b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	f000 8524 	beq.w	801656a <_dtoa_r+0xb02>
 8015b22:	4b9a      	ldr	r3, [pc, #616]	; (8015d8c <_dtoa_r+0x324>)
 8015b24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015b26:	f103 3bff 	add.w	fp, r3, #4294967295
 8015b2a:	6013      	str	r3, [r2, #0]
 8015b2c:	f000 bd28 	b.w	8016580 <_dtoa_r+0xb18>
 8015b30:	aa14      	add	r2, sp, #80	; 0x50
 8015b32:	a915      	add	r1, sp, #84	; 0x54
 8015b34:	ec47 6b10 	vmov	d0, r6, r7
 8015b38:	4620      	mov	r0, r4
 8015b3a:	f001 fbf1 	bl	8017320 <__d2b>
 8015b3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015b42:	9004      	str	r0, [sp, #16]
 8015b44:	2d00      	cmp	r5, #0
 8015b46:	d07c      	beq.n	8015c42 <_dtoa_r+0x1da>
 8015b48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015b4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015b50:	46b2      	mov	sl, r6
 8015b52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8015b56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015b5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8015b5e:	2200      	movs	r2, #0
 8015b60:	4b8b      	ldr	r3, [pc, #556]	; (8015d90 <_dtoa_r+0x328>)
 8015b62:	4650      	mov	r0, sl
 8015b64:	4659      	mov	r1, fp
 8015b66:	f7ea fba7 	bl	80002b8 <__aeabi_dsub>
 8015b6a:	a381      	add	r3, pc, #516	; (adr r3, 8015d70 <_dtoa_r+0x308>)
 8015b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b70:	f7ea fd5a 	bl	8000628 <__aeabi_dmul>
 8015b74:	a380      	add	r3, pc, #512	; (adr r3, 8015d78 <_dtoa_r+0x310>)
 8015b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7a:	f7ea fb9f 	bl	80002bc <__adddf3>
 8015b7e:	4606      	mov	r6, r0
 8015b80:	4628      	mov	r0, r5
 8015b82:	460f      	mov	r7, r1
 8015b84:	f7ea fce6 	bl	8000554 <__aeabi_i2d>
 8015b88:	a37d      	add	r3, pc, #500	; (adr r3, 8015d80 <_dtoa_r+0x318>)
 8015b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b8e:	f7ea fd4b 	bl	8000628 <__aeabi_dmul>
 8015b92:	4602      	mov	r2, r0
 8015b94:	460b      	mov	r3, r1
 8015b96:	4630      	mov	r0, r6
 8015b98:	4639      	mov	r1, r7
 8015b9a:	f7ea fb8f 	bl	80002bc <__adddf3>
 8015b9e:	4606      	mov	r6, r0
 8015ba0:	460f      	mov	r7, r1
 8015ba2:	f7ea fff1 	bl	8000b88 <__aeabi_d2iz>
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	4682      	mov	sl, r0
 8015baa:	2300      	movs	r3, #0
 8015bac:	4630      	mov	r0, r6
 8015bae:	4639      	mov	r1, r7
 8015bb0:	f7ea ffac 	bl	8000b0c <__aeabi_dcmplt>
 8015bb4:	b148      	cbz	r0, 8015bca <_dtoa_r+0x162>
 8015bb6:	4650      	mov	r0, sl
 8015bb8:	f7ea fccc 	bl	8000554 <__aeabi_i2d>
 8015bbc:	4632      	mov	r2, r6
 8015bbe:	463b      	mov	r3, r7
 8015bc0:	f7ea ff9a 	bl	8000af8 <__aeabi_dcmpeq>
 8015bc4:	b908      	cbnz	r0, 8015bca <_dtoa_r+0x162>
 8015bc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015bca:	f1ba 0f16 	cmp.w	sl, #22
 8015bce:	d859      	bhi.n	8015c84 <_dtoa_r+0x21c>
 8015bd0:	4970      	ldr	r1, [pc, #448]	; (8015d94 <_dtoa_r+0x32c>)
 8015bd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015bda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bde:	f7ea ffb3 	bl	8000b48 <__aeabi_dcmpgt>
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d050      	beq.n	8015c88 <_dtoa_r+0x220>
 8015be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015bea:	2300      	movs	r3, #0
 8015bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8015bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015bf0:	1b5d      	subs	r5, r3, r5
 8015bf2:	f1b5 0801 	subs.w	r8, r5, #1
 8015bf6:	bf49      	itett	mi
 8015bf8:	f1c5 0301 	rsbmi	r3, r5, #1
 8015bfc:	2300      	movpl	r3, #0
 8015bfe:	9305      	strmi	r3, [sp, #20]
 8015c00:	f04f 0800 	movmi.w	r8, #0
 8015c04:	bf58      	it	pl
 8015c06:	9305      	strpl	r3, [sp, #20]
 8015c08:	f1ba 0f00 	cmp.w	sl, #0
 8015c0c:	db3e      	blt.n	8015c8c <_dtoa_r+0x224>
 8015c0e:	2300      	movs	r3, #0
 8015c10:	44d0      	add	r8, sl
 8015c12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015c16:	9307      	str	r3, [sp, #28]
 8015c18:	9b06      	ldr	r3, [sp, #24]
 8015c1a:	2b09      	cmp	r3, #9
 8015c1c:	f200 8090 	bhi.w	8015d40 <_dtoa_r+0x2d8>
 8015c20:	2b05      	cmp	r3, #5
 8015c22:	bfc4      	itt	gt
 8015c24:	3b04      	subgt	r3, #4
 8015c26:	9306      	strgt	r3, [sp, #24]
 8015c28:	9b06      	ldr	r3, [sp, #24]
 8015c2a:	f1a3 0302 	sub.w	r3, r3, #2
 8015c2e:	bfcc      	ite	gt
 8015c30:	2500      	movgt	r5, #0
 8015c32:	2501      	movle	r5, #1
 8015c34:	2b03      	cmp	r3, #3
 8015c36:	f200 808f 	bhi.w	8015d58 <_dtoa_r+0x2f0>
 8015c3a:	e8df f003 	tbb	[pc, r3]
 8015c3e:	7f7d      	.short	0x7f7d
 8015c40:	7131      	.short	0x7131
 8015c42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015c46:	441d      	add	r5, r3
 8015c48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8015c4c:	2820      	cmp	r0, #32
 8015c4e:	dd13      	ble.n	8015c78 <_dtoa_r+0x210>
 8015c50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015c54:	9b00      	ldr	r3, [sp, #0]
 8015c56:	fa08 f800 	lsl.w	r8, r8, r0
 8015c5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015c5e:	fa23 f000 	lsr.w	r0, r3, r0
 8015c62:	ea48 0000 	orr.w	r0, r8, r0
 8015c66:	f7ea fc65 	bl	8000534 <__aeabi_ui2d>
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	4682      	mov	sl, r0
 8015c6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015c72:	3d01      	subs	r5, #1
 8015c74:	9313      	str	r3, [sp, #76]	; 0x4c
 8015c76:	e772      	b.n	8015b5e <_dtoa_r+0xf6>
 8015c78:	9b00      	ldr	r3, [sp, #0]
 8015c7a:	f1c0 0020 	rsb	r0, r0, #32
 8015c7e:	fa03 f000 	lsl.w	r0, r3, r0
 8015c82:	e7f0      	b.n	8015c66 <_dtoa_r+0x1fe>
 8015c84:	2301      	movs	r3, #1
 8015c86:	e7b1      	b.n	8015bec <_dtoa_r+0x184>
 8015c88:	900f      	str	r0, [sp, #60]	; 0x3c
 8015c8a:	e7b0      	b.n	8015bee <_dtoa_r+0x186>
 8015c8c:	9b05      	ldr	r3, [sp, #20]
 8015c8e:	eba3 030a 	sub.w	r3, r3, sl
 8015c92:	9305      	str	r3, [sp, #20]
 8015c94:	f1ca 0300 	rsb	r3, sl, #0
 8015c98:	9307      	str	r3, [sp, #28]
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8015c9e:	e7bb      	b.n	8015c18 <_dtoa_r+0x1b0>
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8015ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	dd59      	ble.n	8015d5e <_dtoa_r+0x2f6>
 8015caa:	9302      	str	r3, [sp, #8]
 8015cac:	4699      	mov	r9, r3
 8015cae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	6072      	str	r2, [r6, #4]
 8015cb4:	2204      	movs	r2, #4
 8015cb6:	f102 0014 	add.w	r0, r2, #20
 8015cba:	4298      	cmp	r0, r3
 8015cbc:	6871      	ldr	r1, [r6, #4]
 8015cbe:	d953      	bls.n	8015d68 <_dtoa_r+0x300>
 8015cc0:	4620      	mov	r0, r4
 8015cc2:	f000 ffeb 	bl	8016c9c <_Balloc>
 8015cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cc8:	6030      	str	r0, [r6, #0]
 8015cca:	f1b9 0f0e 	cmp.w	r9, #14
 8015cce:	f8d3 b000 	ldr.w	fp, [r3]
 8015cd2:	f200 80e6 	bhi.w	8015ea2 <_dtoa_r+0x43a>
 8015cd6:	2d00      	cmp	r5, #0
 8015cd8:	f000 80e3 	beq.w	8015ea2 <_dtoa_r+0x43a>
 8015cdc:	ed9d 7b00 	vldr	d7, [sp]
 8015ce0:	f1ba 0f00 	cmp.w	sl, #0
 8015ce4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015ce8:	dd74      	ble.n	8015dd4 <_dtoa_r+0x36c>
 8015cea:	4a2a      	ldr	r2, [pc, #168]	; (8015d94 <_dtoa_r+0x32c>)
 8015cec:	f00a 030f 	and.w	r3, sl, #15
 8015cf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015cf4:	ed93 7b00 	vldr	d7, [r3]
 8015cf8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8015cfc:	06f0      	lsls	r0, r6, #27
 8015cfe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015d02:	d565      	bpl.n	8015dd0 <_dtoa_r+0x368>
 8015d04:	4b24      	ldr	r3, [pc, #144]	; (8015d98 <_dtoa_r+0x330>)
 8015d06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015d0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015d0e:	f7ea fdb5 	bl	800087c <__aeabi_ddiv>
 8015d12:	e9cd 0100 	strd	r0, r1, [sp]
 8015d16:	f006 060f 	and.w	r6, r6, #15
 8015d1a:	2503      	movs	r5, #3
 8015d1c:	4f1e      	ldr	r7, [pc, #120]	; (8015d98 <_dtoa_r+0x330>)
 8015d1e:	e04c      	b.n	8015dba <_dtoa_r+0x352>
 8015d20:	2301      	movs	r3, #1
 8015d22:	930a      	str	r3, [sp, #40]	; 0x28
 8015d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d26:	4453      	add	r3, sl
 8015d28:	f103 0901 	add.w	r9, r3, #1
 8015d2c:	9302      	str	r3, [sp, #8]
 8015d2e:	464b      	mov	r3, r9
 8015d30:	2b01      	cmp	r3, #1
 8015d32:	bfb8      	it	lt
 8015d34:	2301      	movlt	r3, #1
 8015d36:	e7ba      	b.n	8015cae <_dtoa_r+0x246>
 8015d38:	2300      	movs	r3, #0
 8015d3a:	e7b2      	b.n	8015ca2 <_dtoa_r+0x23a>
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	e7f0      	b.n	8015d22 <_dtoa_r+0x2ba>
 8015d40:	2501      	movs	r5, #1
 8015d42:	2300      	movs	r3, #0
 8015d44:	9306      	str	r3, [sp, #24]
 8015d46:	950a      	str	r5, [sp, #40]	; 0x28
 8015d48:	f04f 33ff 	mov.w	r3, #4294967295
 8015d4c:	9302      	str	r3, [sp, #8]
 8015d4e:	4699      	mov	r9, r3
 8015d50:	2200      	movs	r2, #0
 8015d52:	2312      	movs	r3, #18
 8015d54:	920b      	str	r2, [sp, #44]	; 0x2c
 8015d56:	e7aa      	b.n	8015cae <_dtoa_r+0x246>
 8015d58:	2301      	movs	r3, #1
 8015d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8015d5c:	e7f4      	b.n	8015d48 <_dtoa_r+0x2e0>
 8015d5e:	2301      	movs	r3, #1
 8015d60:	9302      	str	r3, [sp, #8]
 8015d62:	4699      	mov	r9, r3
 8015d64:	461a      	mov	r2, r3
 8015d66:	e7f5      	b.n	8015d54 <_dtoa_r+0x2ec>
 8015d68:	3101      	adds	r1, #1
 8015d6a:	6071      	str	r1, [r6, #4]
 8015d6c:	0052      	lsls	r2, r2, #1
 8015d6e:	e7a2      	b.n	8015cb6 <_dtoa_r+0x24e>
 8015d70:	636f4361 	.word	0x636f4361
 8015d74:	3fd287a7 	.word	0x3fd287a7
 8015d78:	8b60c8b3 	.word	0x8b60c8b3
 8015d7c:	3fc68a28 	.word	0x3fc68a28
 8015d80:	509f79fb 	.word	0x509f79fb
 8015d84:	3fd34413 	.word	0x3fd34413
 8015d88:	7ff00000 	.word	0x7ff00000
 8015d8c:	08018be4 	.word	0x08018be4
 8015d90:	3ff80000 	.word	0x3ff80000
 8015d94:	08018ae8 	.word	0x08018ae8
 8015d98:	08018ac0 	.word	0x08018ac0
 8015d9c:	08018a49 	.word	0x08018a49
 8015da0:	07f1      	lsls	r1, r6, #31
 8015da2:	d508      	bpl.n	8015db6 <_dtoa_r+0x34e>
 8015da4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015dac:	f7ea fc3c 	bl	8000628 <__aeabi_dmul>
 8015db0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015db4:	3501      	adds	r5, #1
 8015db6:	1076      	asrs	r6, r6, #1
 8015db8:	3708      	adds	r7, #8
 8015dba:	2e00      	cmp	r6, #0
 8015dbc:	d1f0      	bne.n	8015da0 <_dtoa_r+0x338>
 8015dbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015dc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015dc6:	f7ea fd59 	bl	800087c <__aeabi_ddiv>
 8015dca:	e9cd 0100 	strd	r0, r1, [sp]
 8015dce:	e01a      	b.n	8015e06 <_dtoa_r+0x39e>
 8015dd0:	2502      	movs	r5, #2
 8015dd2:	e7a3      	b.n	8015d1c <_dtoa_r+0x2b4>
 8015dd4:	f000 80a0 	beq.w	8015f18 <_dtoa_r+0x4b0>
 8015dd8:	f1ca 0600 	rsb	r6, sl, #0
 8015ddc:	4b9f      	ldr	r3, [pc, #636]	; (801605c <_dtoa_r+0x5f4>)
 8015dde:	4fa0      	ldr	r7, [pc, #640]	; (8016060 <_dtoa_r+0x5f8>)
 8015de0:	f006 020f 	and.w	r2, r6, #15
 8015de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015df0:	f7ea fc1a 	bl	8000628 <__aeabi_dmul>
 8015df4:	e9cd 0100 	strd	r0, r1, [sp]
 8015df8:	1136      	asrs	r6, r6, #4
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	2502      	movs	r5, #2
 8015dfe:	2e00      	cmp	r6, #0
 8015e00:	d17f      	bne.n	8015f02 <_dtoa_r+0x49a>
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d1e1      	bne.n	8015dca <_dtoa_r+0x362>
 8015e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	f000 8087 	beq.w	8015f1c <_dtoa_r+0x4b4>
 8015e0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015e12:	2200      	movs	r2, #0
 8015e14:	4b93      	ldr	r3, [pc, #588]	; (8016064 <_dtoa_r+0x5fc>)
 8015e16:	4630      	mov	r0, r6
 8015e18:	4639      	mov	r1, r7
 8015e1a:	f7ea fe77 	bl	8000b0c <__aeabi_dcmplt>
 8015e1e:	2800      	cmp	r0, #0
 8015e20:	d07c      	beq.n	8015f1c <_dtoa_r+0x4b4>
 8015e22:	f1b9 0f00 	cmp.w	r9, #0
 8015e26:	d079      	beq.n	8015f1c <_dtoa_r+0x4b4>
 8015e28:	9b02      	ldr	r3, [sp, #8]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	dd35      	ble.n	8015e9a <_dtoa_r+0x432>
 8015e2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015e32:	9308      	str	r3, [sp, #32]
 8015e34:	4639      	mov	r1, r7
 8015e36:	2200      	movs	r2, #0
 8015e38:	4b8b      	ldr	r3, [pc, #556]	; (8016068 <_dtoa_r+0x600>)
 8015e3a:	4630      	mov	r0, r6
 8015e3c:	f7ea fbf4 	bl	8000628 <__aeabi_dmul>
 8015e40:	e9cd 0100 	strd	r0, r1, [sp]
 8015e44:	9f02      	ldr	r7, [sp, #8]
 8015e46:	3501      	adds	r5, #1
 8015e48:	4628      	mov	r0, r5
 8015e4a:	f7ea fb83 	bl	8000554 <__aeabi_i2d>
 8015e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e52:	f7ea fbe9 	bl	8000628 <__aeabi_dmul>
 8015e56:	2200      	movs	r2, #0
 8015e58:	4b84      	ldr	r3, [pc, #528]	; (801606c <_dtoa_r+0x604>)
 8015e5a:	f7ea fa2f 	bl	80002bc <__adddf3>
 8015e5e:	4605      	mov	r5, r0
 8015e60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015e64:	2f00      	cmp	r7, #0
 8015e66:	d15d      	bne.n	8015f24 <_dtoa_r+0x4bc>
 8015e68:	2200      	movs	r2, #0
 8015e6a:	4b81      	ldr	r3, [pc, #516]	; (8016070 <_dtoa_r+0x608>)
 8015e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e70:	f7ea fa22 	bl	80002b8 <__aeabi_dsub>
 8015e74:	462a      	mov	r2, r5
 8015e76:	4633      	mov	r3, r6
 8015e78:	e9cd 0100 	strd	r0, r1, [sp]
 8015e7c:	f7ea fe64 	bl	8000b48 <__aeabi_dcmpgt>
 8015e80:	2800      	cmp	r0, #0
 8015e82:	f040 8288 	bne.w	8016396 <_dtoa_r+0x92e>
 8015e86:	462a      	mov	r2, r5
 8015e88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e90:	f7ea fe3c 	bl	8000b0c <__aeabi_dcmplt>
 8015e94:	2800      	cmp	r0, #0
 8015e96:	f040 827c 	bne.w	8016392 <_dtoa_r+0x92a>
 8015e9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015e9e:	e9cd 2300 	strd	r2, r3, [sp]
 8015ea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	f2c0 8150 	blt.w	801614a <_dtoa_r+0x6e2>
 8015eaa:	f1ba 0f0e 	cmp.w	sl, #14
 8015eae:	f300 814c 	bgt.w	801614a <_dtoa_r+0x6e2>
 8015eb2:	4b6a      	ldr	r3, [pc, #424]	; (801605c <_dtoa_r+0x5f4>)
 8015eb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015eb8:	ed93 7b00 	vldr	d7, [r3]
 8015ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015ec4:	f280 80d8 	bge.w	8016078 <_dtoa_r+0x610>
 8015ec8:	f1b9 0f00 	cmp.w	r9, #0
 8015ecc:	f300 80d4 	bgt.w	8016078 <_dtoa_r+0x610>
 8015ed0:	f040 825e 	bne.w	8016390 <_dtoa_r+0x928>
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	4b66      	ldr	r3, [pc, #408]	; (8016070 <_dtoa_r+0x608>)
 8015ed8:	ec51 0b17 	vmov	r0, r1, d7
 8015edc:	f7ea fba4 	bl	8000628 <__aeabi_dmul>
 8015ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ee4:	f7ea fe26 	bl	8000b34 <__aeabi_dcmpge>
 8015ee8:	464f      	mov	r7, r9
 8015eea:	464e      	mov	r6, r9
 8015eec:	2800      	cmp	r0, #0
 8015eee:	f040 8234 	bne.w	801635a <_dtoa_r+0x8f2>
 8015ef2:	2331      	movs	r3, #49	; 0x31
 8015ef4:	f10b 0501 	add.w	r5, fp, #1
 8015ef8:	f88b 3000 	strb.w	r3, [fp]
 8015efc:	f10a 0a01 	add.w	sl, sl, #1
 8015f00:	e22f      	b.n	8016362 <_dtoa_r+0x8fa>
 8015f02:	07f2      	lsls	r2, r6, #31
 8015f04:	d505      	bpl.n	8015f12 <_dtoa_r+0x4aa>
 8015f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f0a:	f7ea fb8d 	bl	8000628 <__aeabi_dmul>
 8015f0e:	3501      	adds	r5, #1
 8015f10:	2301      	movs	r3, #1
 8015f12:	1076      	asrs	r6, r6, #1
 8015f14:	3708      	adds	r7, #8
 8015f16:	e772      	b.n	8015dfe <_dtoa_r+0x396>
 8015f18:	2502      	movs	r5, #2
 8015f1a:	e774      	b.n	8015e06 <_dtoa_r+0x39e>
 8015f1c:	f8cd a020 	str.w	sl, [sp, #32]
 8015f20:	464f      	mov	r7, r9
 8015f22:	e791      	b.n	8015e48 <_dtoa_r+0x3e0>
 8015f24:	4b4d      	ldr	r3, [pc, #308]	; (801605c <_dtoa_r+0x5f4>)
 8015f26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015f2a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d047      	beq.n	8015fc4 <_dtoa_r+0x55c>
 8015f34:	4602      	mov	r2, r0
 8015f36:	460b      	mov	r3, r1
 8015f38:	2000      	movs	r0, #0
 8015f3a:	494e      	ldr	r1, [pc, #312]	; (8016074 <_dtoa_r+0x60c>)
 8015f3c:	f7ea fc9e 	bl	800087c <__aeabi_ddiv>
 8015f40:	462a      	mov	r2, r5
 8015f42:	4633      	mov	r3, r6
 8015f44:	f7ea f9b8 	bl	80002b8 <__aeabi_dsub>
 8015f48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015f4c:	465d      	mov	r5, fp
 8015f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f52:	f7ea fe19 	bl	8000b88 <__aeabi_d2iz>
 8015f56:	4606      	mov	r6, r0
 8015f58:	f7ea fafc 	bl	8000554 <__aeabi_i2d>
 8015f5c:	4602      	mov	r2, r0
 8015f5e:	460b      	mov	r3, r1
 8015f60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f64:	f7ea f9a8 	bl	80002b8 <__aeabi_dsub>
 8015f68:	3630      	adds	r6, #48	; 0x30
 8015f6a:	f805 6b01 	strb.w	r6, [r5], #1
 8015f6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015f72:	e9cd 0100 	strd	r0, r1, [sp]
 8015f76:	f7ea fdc9 	bl	8000b0c <__aeabi_dcmplt>
 8015f7a:	2800      	cmp	r0, #0
 8015f7c:	d163      	bne.n	8016046 <_dtoa_r+0x5de>
 8015f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015f82:	2000      	movs	r0, #0
 8015f84:	4937      	ldr	r1, [pc, #220]	; (8016064 <_dtoa_r+0x5fc>)
 8015f86:	f7ea f997 	bl	80002b8 <__aeabi_dsub>
 8015f8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015f8e:	f7ea fdbd 	bl	8000b0c <__aeabi_dcmplt>
 8015f92:	2800      	cmp	r0, #0
 8015f94:	f040 80b7 	bne.w	8016106 <_dtoa_r+0x69e>
 8015f98:	eba5 030b 	sub.w	r3, r5, fp
 8015f9c:	429f      	cmp	r7, r3
 8015f9e:	f77f af7c 	ble.w	8015e9a <_dtoa_r+0x432>
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	4b30      	ldr	r3, [pc, #192]	; (8016068 <_dtoa_r+0x600>)
 8015fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015faa:	f7ea fb3d 	bl	8000628 <__aeabi_dmul>
 8015fae:	2200      	movs	r2, #0
 8015fb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015fb4:	4b2c      	ldr	r3, [pc, #176]	; (8016068 <_dtoa_r+0x600>)
 8015fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fba:	f7ea fb35 	bl	8000628 <__aeabi_dmul>
 8015fbe:	e9cd 0100 	strd	r0, r1, [sp]
 8015fc2:	e7c4      	b.n	8015f4e <_dtoa_r+0x4e6>
 8015fc4:	462a      	mov	r2, r5
 8015fc6:	4633      	mov	r3, r6
 8015fc8:	f7ea fb2e 	bl	8000628 <__aeabi_dmul>
 8015fcc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015fd0:	eb0b 0507 	add.w	r5, fp, r7
 8015fd4:	465e      	mov	r6, fp
 8015fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fda:	f7ea fdd5 	bl	8000b88 <__aeabi_d2iz>
 8015fde:	4607      	mov	r7, r0
 8015fe0:	f7ea fab8 	bl	8000554 <__aeabi_i2d>
 8015fe4:	3730      	adds	r7, #48	; 0x30
 8015fe6:	4602      	mov	r2, r0
 8015fe8:	460b      	mov	r3, r1
 8015fea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fee:	f7ea f963 	bl	80002b8 <__aeabi_dsub>
 8015ff2:	f806 7b01 	strb.w	r7, [r6], #1
 8015ff6:	42ae      	cmp	r6, r5
 8015ff8:	e9cd 0100 	strd	r0, r1, [sp]
 8015ffc:	f04f 0200 	mov.w	r2, #0
 8016000:	d126      	bne.n	8016050 <_dtoa_r+0x5e8>
 8016002:	4b1c      	ldr	r3, [pc, #112]	; (8016074 <_dtoa_r+0x60c>)
 8016004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016008:	f7ea f958 	bl	80002bc <__adddf3>
 801600c:	4602      	mov	r2, r0
 801600e:	460b      	mov	r3, r1
 8016010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016014:	f7ea fd98 	bl	8000b48 <__aeabi_dcmpgt>
 8016018:	2800      	cmp	r0, #0
 801601a:	d174      	bne.n	8016106 <_dtoa_r+0x69e>
 801601c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016020:	2000      	movs	r0, #0
 8016022:	4914      	ldr	r1, [pc, #80]	; (8016074 <_dtoa_r+0x60c>)
 8016024:	f7ea f948 	bl	80002b8 <__aeabi_dsub>
 8016028:	4602      	mov	r2, r0
 801602a:	460b      	mov	r3, r1
 801602c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016030:	f7ea fd6c 	bl	8000b0c <__aeabi_dcmplt>
 8016034:	2800      	cmp	r0, #0
 8016036:	f43f af30 	beq.w	8015e9a <_dtoa_r+0x432>
 801603a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801603e:	2b30      	cmp	r3, #48	; 0x30
 8016040:	f105 32ff 	add.w	r2, r5, #4294967295
 8016044:	d002      	beq.n	801604c <_dtoa_r+0x5e4>
 8016046:	f8dd a020 	ldr.w	sl, [sp, #32]
 801604a:	e04a      	b.n	80160e2 <_dtoa_r+0x67a>
 801604c:	4615      	mov	r5, r2
 801604e:	e7f4      	b.n	801603a <_dtoa_r+0x5d2>
 8016050:	4b05      	ldr	r3, [pc, #20]	; (8016068 <_dtoa_r+0x600>)
 8016052:	f7ea fae9 	bl	8000628 <__aeabi_dmul>
 8016056:	e9cd 0100 	strd	r0, r1, [sp]
 801605a:	e7bc      	b.n	8015fd6 <_dtoa_r+0x56e>
 801605c:	08018ae8 	.word	0x08018ae8
 8016060:	08018ac0 	.word	0x08018ac0
 8016064:	3ff00000 	.word	0x3ff00000
 8016068:	40240000 	.word	0x40240000
 801606c:	401c0000 	.word	0x401c0000
 8016070:	40140000 	.word	0x40140000
 8016074:	3fe00000 	.word	0x3fe00000
 8016078:	e9dd 6700 	ldrd	r6, r7, [sp]
 801607c:	465d      	mov	r5, fp
 801607e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016082:	4630      	mov	r0, r6
 8016084:	4639      	mov	r1, r7
 8016086:	f7ea fbf9 	bl	800087c <__aeabi_ddiv>
 801608a:	f7ea fd7d 	bl	8000b88 <__aeabi_d2iz>
 801608e:	4680      	mov	r8, r0
 8016090:	f7ea fa60 	bl	8000554 <__aeabi_i2d>
 8016094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016098:	f7ea fac6 	bl	8000628 <__aeabi_dmul>
 801609c:	4602      	mov	r2, r0
 801609e:	460b      	mov	r3, r1
 80160a0:	4630      	mov	r0, r6
 80160a2:	4639      	mov	r1, r7
 80160a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80160a8:	f7ea f906 	bl	80002b8 <__aeabi_dsub>
 80160ac:	f805 6b01 	strb.w	r6, [r5], #1
 80160b0:	eba5 060b 	sub.w	r6, r5, fp
 80160b4:	45b1      	cmp	r9, r6
 80160b6:	4602      	mov	r2, r0
 80160b8:	460b      	mov	r3, r1
 80160ba:	d139      	bne.n	8016130 <_dtoa_r+0x6c8>
 80160bc:	f7ea f8fe 	bl	80002bc <__adddf3>
 80160c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80160c4:	4606      	mov	r6, r0
 80160c6:	460f      	mov	r7, r1
 80160c8:	f7ea fd3e 	bl	8000b48 <__aeabi_dcmpgt>
 80160cc:	b9c8      	cbnz	r0, 8016102 <_dtoa_r+0x69a>
 80160ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80160d2:	4630      	mov	r0, r6
 80160d4:	4639      	mov	r1, r7
 80160d6:	f7ea fd0f 	bl	8000af8 <__aeabi_dcmpeq>
 80160da:	b110      	cbz	r0, 80160e2 <_dtoa_r+0x67a>
 80160dc:	f018 0f01 	tst.w	r8, #1
 80160e0:	d10f      	bne.n	8016102 <_dtoa_r+0x69a>
 80160e2:	9904      	ldr	r1, [sp, #16]
 80160e4:	4620      	mov	r0, r4
 80160e6:	f000 fe0d 	bl	8016d04 <_Bfree>
 80160ea:	2300      	movs	r3, #0
 80160ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80160ee:	702b      	strb	r3, [r5, #0]
 80160f0:	f10a 0301 	add.w	r3, sl, #1
 80160f4:	6013      	str	r3, [r2, #0]
 80160f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	f000 8241 	beq.w	8016580 <_dtoa_r+0xb18>
 80160fe:	601d      	str	r5, [r3, #0]
 8016100:	e23e      	b.n	8016580 <_dtoa_r+0xb18>
 8016102:	f8cd a020 	str.w	sl, [sp, #32]
 8016106:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801610a:	2a39      	cmp	r2, #57	; 0x39
 801610c:	f105 33ff 	add.w	r3, r5, #4294967295
 8016110:	d108      	bne.n	8016124 <_dtoa_r+0x6bc>
 8016112:	459b      	cmp	fp, r3
 8016114:	d10a      	bne.n	801612c <_dtoa_r+0x6c4>
 8016116:	9b08      	ldr	r3, [sp, #32]
 8016118:	3301      	adds	r3, #1
 801611a:	9308      	str	r3, [sp, #32]
 801611c:	2330      	movs	r3, #48	; 0x30
 801611e:	f88b 3000 	strb.w	r3, [fp]
 8016122:	465b      	mov	r3, fp
 8016124:	781a      	ldrb	r2, [r3, #0]
 8016126:	3201      	adds	r2, #1
 8016128:	701a      	strb	r2, [r3, #0]
 801612a:	e78c      	b.n	8016046 <_dtoa_r+0x5de>
 801612c:	461d      	mov	r5, r3
 801612e:	e7ea      	b.n	8016106 <_dtoa_r+0x69e>
 8016130:	2200      	movs	r2, #0
 8016132:	4b9b      	ldr	r3, [pc, #620]	; (80163a0 <_dtoa_r+0x938>)
 8016134:	f7ea fa78 	bl	8000628 <__aeabi_dmul>
 8016138:	2200      	movs	r2, #0
 801613a:	2300      	movs	r3, #0
 801613c:	4606      	mov	r6, r0
 801613e:	460f      	mov	r7, r1
 8016140:	f7ea fcda 	bl	8000af8 <__aeabi_dcmpeq>
 8016144:	2800      	cmp	r0, #0
 8016146:	d09a      	beq.n	801607e <_dtoa_r+0x616>
 8016148:	e7cb      	b.n	80160e2 <_dtoa_r+0x67a>
 801614a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801614c:	2a00      	cmp	r2, #0
 801614e:	f000 808b 	beq.w	8016268 <_dtoa_r+0x800>
 8016152:	9a06      	ldr	r2, [sp, #24]
 8016154:	2a01      	cmp	r2, #1
 8016156:	dc6e      	bgt.n	8016236 <_dtoa_r+0x7ce>
 8016158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801615a:	2a00      	cmp	r2, #0
 801615c:	d067      	beq.n	801622e <_dtoa_r+0x7c6>
 801615e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016162:	9f07      	ldr	r7, [sp, #28]
 8016164:	9d05      	ldr	r5, [sp, #20]
 8016166:	9a05      	ldr	r2, [sp, #20]
 8016168:	2101      	movs	r1, #1
 801616a:	441a      	add	r2, r3
 801616c:	4620      	mov	r0, r4
 801616e:	9205      	str	r2, [sp, #20]
 8016170:	4498      	add	r8, r3
 8016172:	f000 fea5 	bl	8016ec0 <__i2b>
 8016176:	4606      	mov	r6, r0
 8016178:	2d00      	cmp	r5, #0
 801617a:	dd0c      	ble.n	8016196 <_dtoa_r+0x72e>
 801617c:	f1b8 0f00 	cmp.w	r8, #0
 8016180:	dd09      	ble.n	8016196 <_dtoa_r+0x72e>
 8016182:	4545      	cmp	r5, r8
 8016184:	9a05      	ldr	r2, [sp, #20]
 8016186:	462b      	mov	r3, r5
 8016188:	bfa8      	it	ge
 801618a:	4643      	movge	r3, r8
 801618c:	1ad2      	subs	r2, r2, r3
 801618e:	9205      	str	r2, [sp, #20]
 8016190:	1aed      	subs	r5, r5, r3
 8016192:	eba8 0803 	sub.w	r8, r8, r3
 8016196:	9b07      	ldr	r3, [sp, #28]
 8016198:	b1eb      	cbz	r3, 80161d6 <_dtoa_r+0x76e>
 801619a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801619c:	2b00      	cmp	r3, #0
 801619e:	d067      	beq.n	8016270 <_dtoa_r+0x808>
 80161a0:	b18f      	cbz	r7, 80161c6 <_dtoa_r+0x75e>
 80161a2:	4631      	mov	r1, r6
 80161a4:	463a      	mov	r2, r7
 80161a6:	4620      	mov	r0, r4
 80161a8:	f000 ff2a 	bl	8017000 <__pow5mult>
 80161ac:	9a04      	ldr	r2, [sp, #16]
 80161ae:	4601      	mov	r1, r0
 80161b0:	4606      	mov	r6, r0
 80161b2:	4620      	mov	r0, r4
 80161b4:	f000 fe8d 	bl	8016ed2 <__multiply>
 80161b8:	9904      	ldr	r1, [sp, #16]
 80161ba:	9008      	str	r0, [sp, #32]
 80161bc:	4620      	mov	r0, r4
 80161be:	f000 fda1 	bl	8016d04 <_Bfree>
 80161c2:	9b08      	ldr	r3, [sp, #32]
 80161c4:	9304      	str	r3, [sp, #16]
 80161c6:	9b07      	ldr	r3, [sp, #28]
 80161c8:	1bda      	subs	r2, r3, r7
 80161ca:	d004      	beq.n	80161d6 <_dtoa_r+0x76e>
 80161cc:	9904      	ldr	r1, [sp, #16]
 80161ce:	4620      	mov	r0, r4
 80161d0:	f000 ff16 	bl	8017000 <__pow5mult>
 80161d4:	9004      	str	r0, [sp, #16]
 80161d6:	2101      	movs	r1, #1
 80161d8:	4620      	mov	r0, r4
 80161da:	f000 fe71 	bl	8016ec0 <__i2b>
 80161de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161e0:	4607      	mov	r7, r0
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	f000 81d0 	beq.w	8016588 <_dtoa_r+0xb20>
 80161e8:	461a      	mov	r2, r3
 80161ea:	4601      	mov	r1, r0
 80161ec:	4620      	mov	r0, r4
 80161ee:	f000 ff07 	bl	8017000 <__pow5mult>
 80161f2:	9b06      	ldr	r3, [sp, #24]
 80161f4:	2b01      	cmp	r3, #1
 80161f6:	4607      	mov	r7, r0
 80161f8:	dc40      	bgt.n	801627c <_dtoa_r+0x814>
 80161fa:	9b00      	ldr	r3, [sp, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d139      	bne.n	8016274 <_dtoa_r+0x80c>
 8016200:	9b01      	ldr	r3, [sp, #4]
 8016202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016206:	2b00      	cmp	r3, #0
 8016208:	d136      	bne.n	8016278 <_dtoa_r+0x810>
 801620a:	9b01      	ldr	r3, [sp, #4]
 801620c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016210:	0d1b      	lsrs	r3, r3, #20
 8016212:	051b      	lsls	r3, r3, #20
 8016214:	b12b      	cbz	r3, 8016222 <_dtoa_r+0x7ba>
 8016216:	9b05      	ldr	r3, [sp, #20]
 8016218:	3301      	adds	r3, #1
 801621a:	9305      	str	r3, [sp, #20]
 801621c:	f108 0801 	add.w	r8, r8, #1
 8016220:	2301      	movs	r3, #1
 8016222:	9307      	str	r3, [sp, #28]
 8016224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016226:	2b00      	cmp	r3, #0
 8016228:	d12a      	bne.n	8016280 <_dtoa_r+0x818>
 801622a:	2001      	movs	r0, #1
 801622c:	e030      	b.n	8016290 <_dtoa_r+0x828>
 801622e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016230:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016234:	e795      	b.n	8016162 <_dtoa_r+0x6fa>
 8016236:	9b07      	ldr	r3, [sp, #28]
 8016238:	f109 37ff 	add.w	r7, r9, #4294967295
 801623c:	42bb      	cmp	r3, r7
 801623e:	bfbf      	itttt	lt
 8016240:	9b07      	ldrlt	r3, [sp, #28]
 8016242:	9707      	strlt	r7, [sp, #28]
 8016244:	1afa      	sublt	r2, r7, r3
 8016246:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016248:	bfbb      	ittet	lt
 801624a:	189b      	addlt	r3, r3, r2
 801624c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801624e:	1bdf      	subge	r7, r3, r7
 8016250:	2700      	movlt	r7, #0
 8016252:	f1b9 0f00 	cmp.w	r9, #0
 8016256:	bfb5      	itete	lt
 8016258:	9b05      	ldrlt	r3, [sp, #20]
 801625a:	9d05      	ldrge	r5, [sp, #20]
 801625c:	eba3 0509 	sublt.w	r5, r3, r9
 8016260:	464b      	movge	r3, r9
 8016262:	bfb8      	it	lt
 8016264:	2300      	movlt	r3, #0
 8016266:	e77e      	b.n	8016166 <_dtoa_r+0x6fe>
 8016268:	9f07      	ldr	r7, [sp, #28]
 801626a:	9d05      	ldr	r5, [sp, #20]
 801626c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801626e:	e783      	b.n	8016178 <_dtoa_r+0x710>
 8016270:	9a07      	ldr	r2, [sp, #28]
 8016272:	e7ab      	b.n	80161cc <_dtoa_r+0x764>
 8016274:	2300      	movs	r3, #0
 8016276:	e7d4      	b.n	8016222 <_dtoa_r+0x7ba>
 8016278:	9b00      	ldr	r3, [sp, #0]
 801627a:	e7d2      	b.n	8016222 <_dtoa_r+0x7ba>
 801627c:	2300      	movs	r3, #0
 801627e:	9307      	str	r3, [sp, #28]
 8016280:	693b      	ldr	r3, [r7, #16]
 8016282:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016286:	6918      	ldr	r0, [r3, #16]
 8016288:	f000 fdcc 	bl	8016e24 <__hi0bits>
 801628c:	f1c0 0020 	rsb	r0, r0, #32
 8016290:	4440      	add	r0, r8
 8016292:	f010 001f 	ands.w	r0, r0, #31
 8016296:	d047      	beq.n	8016328 <_dtoa_r+0x8c0>
 8016298:	f1c0 0320 	rsb	r3, r0, #32
 801629c:	2b04      	cmp	r3, #4
 801629e:	dd3b      	ble.n	8016318 <_dtoa_r+0x8b0>
 80162a0:	9b05      	ldr	r3, [sp, #20]
 80162a2:	f1c0 001c 	rsb	r0, r0, #28
 80162a6:	4403      	add	r3, r0
 80162a8:	9305      	str	r3, [sp, #20]
 80162aa:	4405      	add	r5, r0
 80162ac:	4480      	add	r8, r0
 80162ae:	9b05      	ldr	r3, [sp, #20]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	dd05      	ble.n	80162c0 <_dtoa_r+0x858>
 80162b4:	461a      	mov	r2, r3
 80162b6:	9904      	ldr	r1, [sp, #16]
 80162b8:	4620      	mov	r0, r4
 80162ba:	f000 feef 	bl	801709c <__lshift>
 80162be:	9004      	str	r0, [sp, #16]
 80162c0:	f1b8 0f00 	cmp.w	r8, #0
 80162c4:	dd05      	ble.n	80162d2 <_dtoa_r+0x86a>
 80162c6:	4639      	mov	r1, r7
 80162c8:	4642      	mov	r2, r8
 80162ca:	4620      	mov	r0, r4
 80162cc:	f000 fee6 	bl	801709c <__lshift>
 80162d0:	4607      	mov	r7, r0
 80162d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162d4:	b353      	cbz	r3, 801632c <_dtoa_r+0x8c4>
 80162d6:	4639      	mov	r1, r7
 80162d8:	9804      	ldr	r0, [sp, #16]
 80162da:	f000 ff33 	bl	8017144 <__mcmp>
 80162de:	2800      	cmp	r0, #0
 80162e0:	da24      	bge.n	801632c <_dtoa_r+0x8c4>
 80162e2:	2300      	movs	r3, #0
 80162e4:	220a      	movs	r2, #10
 80162e6:	9904      	ldr	r1, [sp, #16]
 80162e8:	4620      	mov	r0, r4
 80162ea:	f000 fd22 	bl	8016d32 <__multadd>
 80162ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162f0:	9004      	str	r0, [sp, #16]
 80162f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	f000 814d 	beq.w	8016596 <_dtoa_r+0xb2e>
 80162fc:	2300      	movs	r3, #0
 80162fe:	4631      	mov	r1, r6
 8016300:	220a      	movs	r2, #10
 8016302:	4620      	mov	r0, r4
 8016304:	f000 fd15 	bl	8016d32 <__multadd>
 8016308:	9b02      	ldr	r3, [sp, #8]
 801630a:	2b00      	cmp	r3, #0
 801630c:	4606      	mov	r6, r0
 801630e:	dc4f      	bgt.n	80163b0 <_dtoa_r+0x948>
 8016310:	9b06      	ldr	r3, [sp, #24]
 8016312:	2b02      	cmp	r3, #2
 8016314:	dd4c      	ble.n	80163b0 <_dtoa_r+0x948>
 8016316:	e011      	b.n	801633c <_dtoa_r+0x8d4>
 8016318:	d0c9      	beq.n	80162ae <_dtoa_r+0x846>
 801631a:	9a05      	ldr	r2, [sp, #20]
 801631c:	331c      	adds	r3, #28
 801631e:	441a      	add	r2, r3
 8016320:	9205      	str	r2, [sp, #20]
 8016322:	441d      	add	r5, r3
 8016324:	4498      	add	r8, r3
 8016326:	e7c2      	b.n	80162ae <_dtoa_r+0x846>
 8016328:	4603      	mov	r3, r0
 801632a:	e7f6      	b.n	801631a <_dtoa_r+0x8b2>
 801632c:	f1b9 0f00 	cmp.w	r9, #0
 8016330:	dc38      	bgt.n	80163a4 <_dtoa_r+0x93c>
 8016332:	9b06      	ldr	r3, [sp, #24]
 8016334:	2b02      	cmp	r3, #2
 8016336:	dd35      	ble.n	80163a4 <_dtoa_r+0x93c>
 8016338:	f8cd 9008 	str.w	r9, [sp, #8]
 801633c:	9b02      	ldr	r3, [sp, #8]
 801633e:	b963      	cbnz	r3, 801635a <_dtoa_r+0x8f2>
 8016340:	4639      	mov	r1, r7
 8016342:	2205      	movs	r2, #5
 8016344:	4620      	mov	r0, r4
 8016346:	f000 fcf4 	bl	8016d32 <__multadd>
 801634a:	4601      	mov	r1, r0
 801634c:	4607      	mov	r7, r0
 801634e:	9804      	ldr	r0, [sp, #16]
 8016350:	f000 fef8 	bl	8017144 <__mcmp>
 8016354:	2800      	cmp	r0, #0
 8016356:	f73f adcc 	bgt.w	8015ef2 <_dtoa_r+0x48a>
 801635a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801635c:	465d      	mov	r5, fp
 801635e:	ea6f 0a03 	mvn.w	sl, r3
 8016362:	f04f 0900 	mov.w	r9, #0
 8016366:	4639      	mov	r1, r7
 8016368:	4620      	mov	r0, r4
 801636a:	f000 fccb 	bl	8016d04 <_Bfree>
 801636e:	2e00      	cmp	r6, #0
 8016370:	f43f aeb7 	beq.w	80160e2 <_dtoa_r+0x67a>
 8016374:	f1b9 0f00 	cmp.w	r9, #0
 8016378:	d005      	beq.n	8016386 <_dtoa_r+0x91e>
 801637a:	45b1      	cmp	r9, r6
 801637c:	d003      	beq.n	8016386 <_dtoa_r+0x91e>
 801637e:	4649      	mov	r1, r9
 8016380:	4620      	mov	r0, r4
 8016382:	f000 fcbf 	bl	8016d04 <_Bfree>
 8016386:	4631      	mov	r1, r6
 8016388:	4620      	mov	r0, r4
 801638a:	f000 fcbb 	bl	8016d04 <_Bfree>
 801638e:	e6a8      	b.n	80160e2 <_dtoa_r+0x67a>
 8016390:	2700      	movs	r7, #0
 8016392:	463e      	mov	r6, r7
 8016394:	e7e1      	b.n	801635a <_dtoa_r+0x8f2>
 8016396:	f8dd a020 	ldr.w	sl, [sp, #32]
 801639a:	463e      	mov	r6, r7
 801639c:	e5a9      	b.n	8015ef2 <_dtoa_r+0x48a>
 801639e:	bf00      	nop
 80163a0:	40240000 	.word	0x40240000
 80163a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	f000 80fa 	beq.w	80165a4 <_dtoa_r+0xb3c>
 80163b0:	2d00      	cmp	r5, #0
 80163b2:	dd05      	ble.n	80163c0 <_dtoa_r+0x958>
 80163b4:	4631      	mov	r1, r6
 80163b6:	462a      	mov	r2, r5
 80163b8:	4620      	mov	r0, r4
 80163ba:	f000 fe6f 	bl	801709c <__lshift>
 80163be:	4606      	mov	r6, r0
 80163c0:	9b07      	ldr	r3, [sp, #28]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d04c      	beq.n	8016460 <_dtoa_r+0x9f8>
 80163c6:	6871      	ldr	r1, [r6, #4]
 80163c8:	4620      	mov	r0, r4
 80163ca:	f000 fc67 	bl	8016c9c <_Balloc>
 80163ce:	6932      	ldr	r2, [r6, #16]
 80163d0:	3202      	adds	r2, #2
 80163d2:	4605      	mov	r5, r0
 80163d4:	0092      	lsls	r2, r2, #2
 80163d6:	f106 010c 	add.w	r1, r6, #12
 80163da:	300c      	adds	r0, #12
 80163dc:	f7fd fd08 	bl	8013df0 <memcpy>
 80163e0:	2201      	movs	r2, #1
 80163e2:	4629      	mov	r1, r5
 80163e4:	4620      	mov	r0, r4
 80163e6:	f000 fe59 	bl	801709c <__lshift>
 80163ea:	9b00      	ldr	r3, [sp, #0]
 80163ec:	f8cd b014 	str.w	fp, [sp, #20]
 80163f0:	f003 0301 	and.w	r3, r3, #1
 80163f4:	46b1      	mov	r9, r6
 80163f6:	9307      	str	r3, [sp, #28]
 80163f8:	4606      	mov	r6, r0
 80163fa:	4639      	mov	r1, r7
 80163fc:	9804      	ldr	r0, [sp, #16]
 80163fe:	f7ff faa5 	bl	801594c <quorem>
 8016402:	4649      	mov	r1, r9
 8016404:	4605      	mov	r5, r0
 8016406:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801640a:	9804      	ldr	r0, [sp, #16]
 801640c:	f000 fe9a 	bl	8017144 <__mcmp>
 8016410:	4632      	mov	r2, r6
 8016412:	9000      	str	r0, [sp, #0]
 8016414:	4639      	mov	r1, r7
 8016416:	4620      	mov	r0, r4
 8016418:	f000 feae 	bl	8017178 <__mdiff>
 801641c:	68c3      	ldr	r3, [r0, #12]
 801641e:	4602      	mov	r2, r0
 8016420:	bb03      	cbnz	r3, 8016464 <_dtoa_r+0x9fc>
 8016422:	4601      	mov	r1, r0
 8016424:	9008      	str	r0, [sp, #32]
 8016426:	9804      	ldr	r0, [sp, #16]
 8016428:	f000 fe8c 	bl	8017144 <__mcmp>
 801642c:	9a08      	ldr	r2, [sp, #32]
 801642e:	4603      	mov	r3, r0
 8016430:	4611      	mov	r1, r2
 8016432:	4620      	mov	r0, r4
 8016434:	9308      	str	r3, [sp, #32]
 8016436:	f000 fc65 	bl	8016d04 <_Bfree>
 801643a:	9b08      	ldr	r3, [sp, #32]
 801643c:	b9a3      	cbnz	r3, 8016468 <_dtoa_r+0xa00>
 801643e:	9a06      	ldr	r2, [sp, #24]
 8016440:	b992      	cbnz	r2, 8016468 <_dtoa_r+0xa00>
 8016442:	9a07      	ldr	r2, [sp, #28]
 8016444:	b982      	cbnz	r2, 8016468 <_dtoa_r+0xa00>
 8016446:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801644a:	d029      	beq.n	80164a0 <_dtoa_r+0xa38>
 801644c:	9b00      	ldr	r3, [sp, #0]
 801644e:	2b00      	cmp	r3, #0
 8016450:	dd01      	ble.n	8016456 <_dtoa_r+0x9ee>
 8016452:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016456:	9b05      	ldr	r3, [sp, #20]
 8016458:	1c5d      	adds	r5, r3, #1
 801645a:	f883 8000 	strb.w	r8, [r3]
 801645e:	e782      	b.n	8016366 <_dtoa_r+0x8fe>
 8016460:	4630      	mov	r0, r6
 8016462:	e7c2      	b.n	80163ea <_dtoa_r+0x982>
 8016464:	2301      	movs	r3, #1
 8016466:	e7e3      	b.n	8016430 <_dtoa_r+0x9c8>
 8016468:	9a00      	ldr	r2, [sp, #0]
 801646a:	2a00      	cmp	r2, #0
 801646c:	db04      	blt.n	8016478 <_dtoa_r+0xa10>
 801646e:	d125      	bne.n	80164bc <_dtoa_r+0xa54>
 8016470:	9a06      	ldr	r2, [sp, #24]
 8016472:	bb1a      	cbnz	r2, 80164bc <_dtoa_r+0xa54>
 8016474:	9a07      	ldr	r2, [sp, #28]
 8016476:	bb0a      	cbnz	r2, 80164bc <_dtoa_r+0xa54>
 8016478:	2b00      	cmp	r3, #0
 801647a:	ddec      	ble.n	8016456 <_dtoa_r+0x9ee>
 801647c:	2201      	movs	r2, #1
 801647e:	9904      	ldr	r1, [sp, #16]
 8016480:	4620      	mov	r0, r4
 8016482:	f000 fe0b 	bl	801709c <__lshift>
 8016486:	4639      	mov	r1, r7
 8016488:	9004      	str	r0, [sp, #16]
 801648a:	f000 fe5b 	bl	8017144 <__mcmp>
 801648e:	2800      	cmp	r0, #0
 8016490:	dc03      	bgt.n	801649a <_dtoa_r+0xa32>
 8016492:	d1e0      	bne.n	8016456 <_dtoa_r+0x9ee>
 8016494:	f018 0f01 	tst.w	r8, #1
 8016498:	d0dd      	beq.n	8016456 <_dtoa_r+0x9ee>
 801649a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801649e:	d1d8      	bne.n	8016452 <_dtoa_r+0x9ea>
 80164a0:	9b05      	ldr	r3, [sp, #20]
 80164a2:	9a05      	ldr	r2, [sp, #20]
 80164a4:	1c5d      	adds	r5, r3, #1
 80164a6:	2339      	movs	r3, #57	; 0x39
 80164a8:	7013      	strb	r3, [r2, #0]
 80164aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80164ae:	2b39      	cmp	r3, #57	; 0x39
 80164b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80164b4:	d04f      	beq.n	8016556 <_dtoa_r+0xaee>
 80164b6:	3301      	adds	r3, #1
 80164b8:	7013      	strb	r3, [r2, #0]
 80164ba:	e754      	b.n	8016366 <_dtoa_r+0x8fe>
 80164bc:	9a05      	ldr	r2, [sp, #20]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	f102 0501 	add.w	r5, r2, #1
 80164c4:	dd06      	ble.n	80164d4 <_dtoa_r+0xa6c>
 80164c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80164ca:	d0e9      	beq.n	80164a0 <_dtoa_r+0xa38>
 80164cc:	f108 0801 	add.w	r8, r8, #1
 80164d0:	9b05      	ldr	r3, [sp, #20]
 80164d2:	e7c2      	b.n	801645a <_dtoa_r+0x9f2>
 80164d4:	9a02      	ldr	r2, [sp, #8]
 80164d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80164da:	eba5 030b 	sub.w	r3, r5, fp
 80164de:	4293      	cmp	r3, r2
 80164e0:	d021      	beq.n	8016526 <_dtoa_r+0xabe>
 80164e2:	2300      	movs	r3, #0
 80164e4:	220a      	movs	r2, #10
 80164e6:	9904      	ldr	r1, [sp, #16]
 80164e8:	4620      	mov	r0, r4
 80164ea:	f000 fc22 	bl	8016d32 <__multadd>
 80164ee:	45b1      	cmp	r9, r6
 80164f0:	9004      	str	r0, [sp, #16]
 80164f2:	f04f 0300 	mov.w	r3, #0
 80164f6:	f04f 020a 	mov.w	r2, #10
 80164fa:	4649      	mov	r1, r9
 80164fc:	4620      	mov	r0, r4
 80164fe:	d105      	bne.n	801650c <_dtoa_r+0xaa4>
 8016500:	f000 fc17 	bl	8016d32 <__multadd>
 8016504:	4681      	mov	r9, r0
 8016506:	4606      	mov	r6, r0
 8016508:	9505      	str	r5, [sp, #20]
 801650a:	e776      	b.n	80163fa <_dtoa_r+0x992>
 801650c:	f000 fc11 	bl	8016d32 <__multadd>
 8016510:	4631      	mov	r1, r6
 8016512:	4681      	mov	r9, r0
 8016514:	2300      	movs	r3, #0
 8016516:	220a      	movs	r2, #10
 8016518:	4620      	mov	r0, r4
 801651a:	f000 fc0a 	bl	8016d32 <__multadd>
 801651e:	4606      	mov	r6, r0
 8016520:	e7f2      	b.n	8016508 <_dtoa_r+0xaa0>
 8016522:	f04f 0900 	mov.w	r9, #0
 8016526:	2201      	movs	r2, #1
 8016528:	9904      	ldr	r1, [sp, #16]
 801652a:	4620      	mov	r0, r4
 801652c:	f000 fdb6 	bl	801709c <__lshift>
 8016530:	4639      	mov	r1, r7
 8016532:	9004      	str	r0, [sp, #16]
 8016534:	f000 fe06 	bl	8017144 <__mcmp>
 8016538:	2800      	cmp	r0, #0
 801653a:	dcb6      	bgt.n	80164aa <_dtoa_r+0xa42>
 801653c:	d102      	bne.n	8016544 <_dtoa_r+0xadc>
 801653e:	f018 0f01 	tst.w	r8, #1
 8016542:	d1b2      	bne.n	80164aa <_dtoa_r+0xa42>
 8016544:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016548:	2b30      	cmp	r3, #48	; 0x30
 801654a:	f105 32ff 	add.w	r2, r5, #4294967295
 801654e:	f47f af0a 	bne.w	8016366 <_dtoa_r+0x8fe>
 8016552:	4615      	mov	r5, r2
 8016554:	e7f6      	b.n	8016544 <_dtoa_r+0xadc>
 8016556:	4593      	cmp	fp, r2
 8016558:	d105      	bne.n	8016566 <_dtoa_r+0xafe>
 801655a:	2331      	movs	r3, #49	; 0x31
 801655c:	f10a 0a01 	add.w	sl, sl, #1
 8016560:	f88b 3000 	strb.w	r3, [fp]
 8016564:	e6ff      	b.n	8016366 <_dtoa_r+0x8fe>
 8016566:	4615      	mov	r5, r2
 8016568:	e79f      	b.n	80164aa <_dtoa_r+0xa42>
 801656a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80165d0 <_dtoa_r+0xb68>
 801656e:	e007      	b.n	8016580 <_dtoa_r+0xb18>
 8016570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016572:	f8df b060 	ldr.w	fp, [pc, #96]	; 80165d4 <_dtoa_r+0xb6c>
 8016576:	b11b      	cbz	r3, 8016580 <_dtoa_r+0xb18>
 8016578:	f10b 0308 	add.w	r3, fp, #8
 801657c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801657e:	6013      	str	r3, [r2, #0]
 8016580:	4658      	mov	r0, fp
 8016582:	b017      	add	sp, #92	; 0x5c
 8016584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016588:	9b06      	ldr	r3, [sp, #24]
 801658a:	2b01      	cmp	r3, #1
 801658c:	f77f ae35 	ble.w	80161fa <_dtoa_r+0x792>
 8016590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016592:	9307      	str	r3, [sp, #28]
 8016594:	e649      	b.n	801622a <_dtoa_r+0x7c2>
 8016596:	9b02      	ldr	r3, [sp, #8]
 8016598:	2b00      	cmp	r3, #0
 801659a:	dc03      	bgt.n	80165a4 <_dtoa_r+0xb3c>
 801659c:	9b06      	ldr	r3, [sp, #24]
 801659e:	2b02      	cmp	r3, #2
 80165a0:	f73f aecc 	bgt.w	801633c <_dtoa_r+0x8d4>
 80165a4:	465d      	mov	r5, fp
 80165a6:	4639      	mov	r1, r7
 80165a8:	9804      	ldr	r0, [sp, #16]
 80165aa:	f7ff f9cf 	bl	801594c <quorem>
 80165ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80165b2:	f805 8b01 	strb.w	r8, [r5], #1
 80165b6:	9a02      	ldr	r2, [sp, #8]
 80165b8:	eba5 030b 	sub.w	r3, r5, fp
 80165bc:	429a      	cmp	r2, r3
 80165be:	ddb0      	ble.n	8016522 <_dtoa_r+0xaba>
 80165c0:	2300      	movs	r3, #0
 80165c2:	220a      	movs	r2, #10
 80165c4:	9904      	ldr	r1, [sp, #16]
 80165c6:	4620      	mov	r0, r4
 80165c8:	f000 fbb3 	bl	8016d32 <__multadd>
 80165cc:	9004      	str	r0, [sp, #16]
 80165ce:	e7ea      	b.n	80165a6 <_dtoa_r+0xb3e>
 80165d0:	08018be3 	.word	0x08018be3
 80165d4:	08018a40 	.word	0x08018a40

080165d8 <rshift>:
 80165d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165da:	6906      	ldr	r6, [r0, #16]
 80165dc:	114b      	asrs	r3, r1, #5
 80165de:	429e      	cmp	r6, r3
 80165e0:	f100 0414 	add.w	r4, r0, #20
 80165e4:	dd30      	ble.n	8016648 <rshift+0x70>
 80165e6:	f011 011f 	ands.w	r1, r1, #31
 80165ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80165ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80165f2:	d108      	bne.n	8016606 <rshift+0x2e>
 80165f4:	4621      	mov	r1, r4
 80165f6:	42b2      	cmp	r2, r6
 80165f8:	460b      	mov	r3, r1
 80165fa:	d211      	bcs.n	8016620 <rshift+0x48>
 80165fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8016600:	f841 3b04 	str.w	r3, [r1], #4
 8016604:	e7f7      	b.n	80165f6 <rshift+0x1e>
 8016606:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801660a:	f1c1 0c20 	rsb	ip, r1, #32
 801660e:	40cd      	lsrs	r5, r1
 8016610:	3204      	adds	r2, #4
 8016612:	4623      	mov	r3, r4
 8016614:	42b2      	cmp	r2, r6
 8016616:	4617      	mov	r7, r2
 8016618:	d30c      	bcc.n	8016634 <rshift+0x5c>
 801661a:	601d      	str	r5, [r3, #0]
 801661c:	b105      	cbz	r5, 8016620 <rshift+0x48>
 801661e:	3304      	adds	r3, #4
 8016620:	1b1a      	subs	r2, r3, r4
 8016622:	42a3      	cmp	r3, r4
 8016624:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016628:	bf08      	it	eq
 801662a:	2300      	moveq	r3, #0
 801662c:	6102      	str	r2, [r0, #16]
 801662e:	bf08      	it	eq
 8016630:	6143      	streq	r3, [r0, #20]
 8016632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016634:	683f      	ldr	r7, [r7, #0]
 8016636:	fa07 f70c 	lsl.w	r7, r7, ip
 801663a:	433d      	orrs	r5, r7
 801663c:	f843 5b04 	str.w	r5, [r3], #4
 8016640:	f852 5b04 	ldr.w	r5, [r2], #4
 8016644:	40cd      	lsrs	r5, r1
 8016646:	e7e5      	b.n	8016614 <rshift+0x3c>
 8016648:	4623      	mov	r3, r4
 801664a:	e7e9      	b.n	8016620 <rshift+0x48>

0801664c <__hexdig_fun>:
 801664c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016650:	2b09      	cmp	r3, #9
 8016652:	d802      	bhi.n	801665a <__hexdig_fun+0xe>
 8016654:	3820      	subs	r0, #32
 8016656:	b2c0      	uxtb	r0, r0
 8016658:	4770      	bx	lr
 801665a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801665e:	2b05      	cmp	r3, #5
 8016660:	d801      	bhi.n	8016666 <__hexdig_fun+0x1a>
 8016662:	3847      	subs	r0, #71	; 0x47
 8016664:	e7f7      	b.n	8016656 <__hexdig_fun+0xa>
 8016666:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801666a:	2b05      	cmp	r3, #5
 801666c:	d801      	bhi.n	8016672 <__hexdig_fun+0x26>
 801666e:	3827      	subs	r0, #39	; 0x27
 8016670:	e7f1      	b.n	8016656 <__hexdig_fun+0xa>
 8016672:	2000      	movs	r0, #0
 8016674:	4770      	bx	lr

08016676 <__gethex>:
 8016676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801667a:	b08b      	sub	sp, #44	; 0x2c
 801667c:	468a      	mov	sl, r1
 801667e:	9002      	str	r0, [sp, #8]
 8016680:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016682:	9306      	str	r3, [sp, #24]
 8016684:	4690      	mov	r8, r2
 8016686:	f000 fadf 	bl	8016c48 <__localeconv_l>
 801668a:	6803      	ldr	r3, [r0, #0]
 801668c:	9303      	str	r3, [sp, #12]
 801668e:	4618      	mov	r0, r3
 8016690:	f7e9 fdb6 	bl	8000200 <strlen>
 8016694:	9b03      	ldr	r3, [sp, #12]
 8016696:	9001      	str	r0, [sp, #4]
 8016698:	4403      	add	r3, r0
 801669a:	f04f 0b00 	mov.w	fp, #0
 801669e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80166a2:	9307      	str	r3, [sp, #28]
 80166a4:	f8da 3000 	ldr.w	r3, [sl]
 80166a8:	3302      	adds	r3, #2
 80166aa:	461f      	mov	r7, r3
 80166ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80166b0:	2830      	cmp	r0, #48	; 0x30
 80166b2:	d06c      	beq.n	801678e <__gethex+0x118>
 80166b4:	f7ff ffca 	bl	801664c <__hexdig_fun>
 80166b8:	4604      	mov	r4, r0
 80166ba:	2800      	cmp	r0, #0
 80166bc:	d16a      	bne.n	8016794 <__gethex+0x11e>
 80166be:	9a01      	ldr	r2, [sp, #4]
 80166c0:	9903      	ldr	r1, [sp, #12]
 80166c2:	4638      	mov	r0, r7
 80166c4:	f001 fc36 	bl	8017f34 <strncmp>
 80166c8:	2800      	cmp	r0, #0
 80166ca:	d166      	bne.n	801679a <__gethex+0x124>
 80166cc:	9b01      	ldr	r3, [sp, #4]
 80166ce:	5cf8      	ldrb	r0, [r7, r3]
 80166d0:	18fe      	adds	r6, r7, r3
 80166d2:	f7ff ffbb 	bl	801664c <__hexdig_fun>
 80166d6:	2800      	cmp	r0, #0
 80166d8:	d062      	beq.n	80167a0 <__gethex+0x12a>
 80166da:	4633      	mov	r3, r6
 80166dc:	7818      	ldrb	r0, [r3, #0]
 80166de:	2830      	cmp	r0, #48	; 0x30
 80166e0:	461f      	mov	r7, r3
 80166e2:	f103 0301 	add.w	r3, r3, #1
 80166e6:	d0f9      	beq.n	80166dc <__gethex+0x66>
 80166e8:	f7ff ffb0 	bl	801664c <__hexdig_fun>
 80166ec:	fab0 f580 	clz	r5, r0
 80166f0:	096d      	lsrs	r5, r5, #5
 80166f2:	4634      	mov	r4, r6
 80166f4:	f04f 0b01 	mov.w	fp, #1
 80166f8:	463a      	mov	r2, r7
 80166fa:	4616      	mov	r6, r2
 80166fc:	3201      	adds	r2, #1
 80166fe:	7830      	ldrb	r0, [r6, #0]
 8016700:	f7ff ffa4 	bl	801664c <__hexdig_fun>
 8016704:	2800      	cmp	r0, #0
 8016706:	d1f8      	bne.n	80166fa <__gethex+0x84>
 8016708:	9a01      	ldr	r2, [sp, #4]
 801670a:	9903      	ldr	r1, [sp, #12]
 801670c:	4630      	mov	r0, r6
 801670e:	f001 fc11 	bl	8017f34 <strncmp>
 8016712:	b950      	cbnz	r0, 801672a <__gethex+0xb4>
 8016714:	b954      	cbnz	r4, 801672c <__gethex+0xb6>
 8016716:	9b01      	ldr	r3, [sp, #4]
 8016718:	18f4      	adds	r4, r6, r3
 801671a:	4622      	mov	r2, r4
 801671c:	4616      	mov	r6, r2
 801671e:	3201      	adds	r2, #1
 8016720:	7830      	ldrb	r0, [r6, #0]
 8016722:	f7ff ff93 	bl	801664c <__hexdig_fun>
 8016726:	2800      	cmp	r0, #0
 8016728:	d1f8      	bne.n	801671c <__gethex+0xa6>
 801672a:	b10c      	cbz	r4, 8016730 <__gethex+0xba>
 801672c:	1ba4      	subs	r4, r4, r6
 801672e:	00a4      	lsls	r4, r4, #2
 8016730:	7833      	ldrb	r3, [r6, #0]
 8016732:	2b50      	cmp	r3, #80	; 0x50
 8016734:	d001      	beq.n	801673a <__gethex+0xc4>
 8016736:	2b70      	cmp	r3, #112	; 0x70
 8016738:	d140      	bne.n	80167bc <__gethex+0x146>
 801673a:	7873      	ldrb	r3, [r6, #1]
 801673c:	2b2b      	cmp	r3, #43	; 0x2b
 801673e:	d031      	beq.n	80167a4 <__gethex+0x12e>
 8016740:	2b2d      	cmp	r3, #45	; 0x2d
 8016742:	d033      	beq.n	80167ac <__gethex+0x136>
 8016744:	1c71      	adds	r1, r6, #1
 8016746:	f04f 0900 	mov.w	r9, #0
 801674a:	7808      	ldrb	r0, [r1, #0]
 801674c:	f7ff ff7e 	bl	801664c <__hexdig_fun>
 8016750:	1e43      	subs	r3, r0, #1
 8016752:	b2db      	uxtb	r3, r3
 8016754:	2b18      	cmp	r3, #24
 8016756:	d831      	bhi.n	80167bc <__gethex+0x146>
 8016758:	f1a0 0210 	sub.w	r2, r0, #16
 801675c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016760:	f7ff ff74 	bl	801664c <__hexdig_fun>
 8016764:	1e43      	subs	r3, r0, #1
 8016766:	b2db      	uxtb	r3, r3
 8016768:	2b18      	cmp	r3, #24
 801676a:	d922      	bls.n	80167b2 <__gethex+0x13c>
 801676c:	f1b9 0f00 	cmp.w	r9, #0
 8016770:	d000      	beq.n	8016774 <__gethex+0xfe>
 8016772:	4252      	negs	r2, r2
 8016774:	4414      	add	r4, r2
 8016776:	f8ca 1000 	str.w	r1, [sl]
 801677a:	b30d      	cbz	r5, 80167c0 <__gethex+0x14a>
 801677c:	f1bb 0f00 	cmp.w	fp, #0
 8016780:	bf0c      	ite	eq
 8016782:	2706      	moveq	r7, #6
 8016784:	2700      	movne	r7, #0
 8016786:	4638      	mov	r0, r7
 8016788:	b00b      	add	sp, #44	; 0x2c
 801678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801678e:	f10b 0b01 	add.w	fp, fp, #1
 8016792:	e78a      	b.n	80166aa <__gethex+0x34>
 8016794:	2500      	movs	r5, #0
 8016796:	462c      	mov	r4, r5
 8016798:	e7ae      	b.n	80166f8 <__gethex+0x82>
 801679a:	463e      	mov	r6, r7
 801679c:	2501      	movs	r5, #1
 801679e:	e7c7      	b.n	8016730 <__gethex+0xba>
 80167a0:	4604      	mov	r4, r0
 80167a2:	e7fb      	b.n	801679c <__gethex+0x126>
 80167a4:	f04f 0900 	mov.w	r9, #0
 80167a8:	1cb1      	adds	r1, r6, #2
 80167aa:	e7ce      	b.n	801674a <__gethex+0xd4>
 80167ac:	f04f 0901 	mov.w	r9, #1
 80167b0:	e7fa      	b.n	80167a8 <__gethex+0x132>
 80167b2:	230a      	movs	r3, #10
 80167b4:	fb03 0202 	mla	r2, r3, r2, r0
 80167b8:	3a10      	subs	r2, #16
 80167ba:	e7cf      	b.n	801675c <__gethex+0xe6>
 80167bc:	4631      	mov	r1, r6
 80167be:	e7da      	b.n	8016776 <__gethex+0x100>
 80167c0:	1bf3      	subs	r3, r6, r7
 80167c2:	3b01      	subs	r3, #1
 80167c4:	4629      	mov	r1, r5
 80167c6:	2b07      	cmp	r3, #7
 80167c8:	dc49      	bgt.n	801685e <__gethex+0x1e8>
 80167ca:	9802      	ldr	r0, [sp, #8]
 80167cc:	f000 fa66 	bl	8016c9c <_Balloc>
 80167d0:	9b01      	ldr	r3, [sp, #4]
 80167d2:	f100 0914 	add.w	r9, r0, #20
 80167d6:	f04f 0b00 	mov.w	fp, #0
 80167da:	f1c3 0301 	rsb	r3, r3, #1
 80167de:	4605      	mov	r5, r0
 80167e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80167e4:	46da      	mov	sl, fp
 80167e6:	9308      	str	r3, [sp, #32]
 80167e8:	42b7      	cmp	r7, r6
 80167ea:	d33b      	bcc.n	8016864 <__gethex+0x1ee>
 80167ec:	9804      	ldr	r0, [sp, #16]
 80167ee:	f840 ab04 	str.w	sl, [r0], #4
 80167f2:	eba0 0009 	sub.w	r0, r0, r9
 80167f6:	1080      	asrs	r0, r0, #2
 80167f8:	6128      	str	r0, [r5, #16]
 80167fa:	0147      	lsls	r7, r0, #5
 80167fc:	4650      	mov	r0, sl
 80167fe:	f000 fb11 	bl	8016e24 <__hi0bits>
 8016802:	f8d8 6000 	ldr.w	r6, [r8]
 8016806:	1a3f      	subs	r7, r7, r0
 8016808:	42b7      	cmp	r7, r6
 801680a:	dd64      	ble.n	80168d6 <__gethex+0x260>
 801680c:	1bbf      	subs	r7, r7, r6
 801680e:	4639      	mov	r1, r7
 8016810:	4628      	mov	r0, r5
 8016812:	f000 fe21 	bl	8017458 <__any_on>
 8016816:	4682      	mov	sl, r0
 8016818:	b178      	cbz	r0, 801683a <__gethex+0x1c4>
 801681a:	1e7b      	subs	r3, r7, #1
 801681c:	1159      	asrs	r1, r3, #5
 801681e:	f003 021f 	and.w	r2, r3, #31
 8016822:	f04f 0a01 	mov.w	sl, #1
 8016826:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801682a:	fa0a f202 	lsl.w	r2, sl, r2
 801682e:	420a      	tst	r2, r1
 8016830:	d003      	beq.n	801683a <__gethex+0x1c4>
 8016832:	4553      	cmp	r3, sl
 8016834:	dc46      	bgt.n	80168c4 <__gethex+0x24e>
 8016836:	f04f 0a02 	mov.w	sl, #2
 801683a:	4639      	mov	r1, r7
 801683c:	4628      	mov	r0, r5
 801683e:	f7ff fecb 	bl	80165d8 <rshift>
 8016842:	443c      	add	r4, r7
 8016844:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016848:	42a3      	cmp	r3, r4
 801684a:	da52      	bge.n	80168f2 <__gethex+0x27c>
 801684c:	4629      	mov	r1, r5
 801684e:	9802      	ldr	r0, [sp, #8]
 8016850:	f000 fa58 	bl	8016d04 <_Bfree>
 8016854:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016856:	2300      	movs	r3, #0
 8016858:	6013      	str	r3, [r2, #0]
 801685a:	27a3      	movs	r7, #163	; 0xa3
 801685c:	e793      	b.n	8016786 <__gethex+0x110>
 801685e:	3101      	adds	r1, #1
 8016860:	105b      	asrs	r3, r3, #1
 8016862:	e7b0      	b.n	80167c6 <__gethex+0x150>
 8016864:	1e73      	subs	r3, r6, #1
 8016866:	9305      	str	r3, [sp, #20]
 8016868:	9a07      	ldr	r2, [sp, #28]
 801686a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801686e:	4293      	cmp	r3, r2
 8016870:	d018      	beq.n	80168a4 <__gethex+0x22e>
 8016872:	f1bb 0f20 	cmp.w	fp, #32
 8016876:	d107      	bne.n	8016888 <__gethex+0x212>
 8016878:	9b04      	ldr	r3, [sp, #16]
 801687a:	f8c3 a000 	str.w	sl, [r3]
 801687e:	3304      	adds	r3, #4
 8016880:	f04f 0a00 	mov.w	sl, #0
 8016884:	9304      	str	r3, [sp, #16]
 8016886:	46d3      	mov	fp, sl
 8016888:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801688c:	f7ff fede 	bl	801664c <__hexdig_fun>
 8016890:	f000 000f 	and.w	r0, r0, #15
 8016894:	fa00 f00b 	lsl.w	r0, r0, fp
 8016898:	ea4a 0a00 	orr.w	sl, sl, r0
 801689c:	f10b 0b04 	add.w	fp, fp, #4
 80168a0:	9b05      	ldr	r3, [sp, #20]
 80168a2:	e00d      	b.n	80168c0 <__gethex+0x24a>
 80168a4:	9b05      	ldr	r3, [sp, #20]
 80168a6:	9a08      	ldr	r2, [sp, #32]
 80168a8:	4413      	add	r3, r2
 80168aa:	42bb      	cmp	r3, r7
 80168ac:	d3e1      	bcc.n	8016872 <__gethex+0x1fc>
 80168ae:	4618      	mov	r0, r3
 80168b0:	9a01      	ldr	r2, [sp, #4]
 80168b2:	9903      	ldr	r1, [sp, #12]
 80168b4:	9309      	str	r3, [sp, #36]	; 0x24
 80168b6:	f001 fb3d 	bl	8017f34 <strncmp>
 80168ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168bc:	2800      	cmp	r0, #0
 80168be:	d1d8      	bne.n	8016872 <__gethex+0x1fc>
 80168c0:	461e      	mov	r6, r3
 80168c2:	e791      	b.n	80167e8 <__gethex+0x172>
 80168c4:	1eb9      	subs	r1, r7, #2
 80168c6:	4628      	mov	r0, r5
 80168c8:	f000 fdc6 	bl	8017458 <__any_on>
 80168cc:	2800      	cmp	r0, #0
 80168ce:	d0b2      	beq.n	8016836 <__gethex+0x1c0>
 80168d0:	f04f 0a03 	mov.w	sl, #3
 80168d4:	e7b1      	b.n	801683a <__gethex+0x1c4>
 80168d6:	da09      	bge.n	80168ec <__gethex+0x276>
 80168d8:	1bf7      	subs	r7, r6, r7
 80168da:	4629      	mov	r1, r5
 80168dc:	463a      	mov	r2, r7
 80168de:	9802      	ldr	r0, [sp, #8]
 80168e0:	f000 fbdc 	bl	801709c <__lshift>
 80168e4:	1be4      	subs	r4, r4, r7
 80168e6:	4605      	mov	r5, r0
 80168e8:	f100 0914 	add.w	r9, r0, #20
 80168ec:	f04f 0a00 	mov.w	sl, #0
 80168f0:	e7a8      	b.n	8016844 <__gethex+0x1ce>
 80168f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80168f6:	42a0      	cmp	r0, r4
 80168f8:	dd6a      	ble.n	80169d0 <__gethex+0x35a>
 80168fa:	1b04      	subs	r4, r0, r4
 80168fc:	42a6      	cmp	r6, r4
 80168fe:	dc2e      	bgt.n	801695e <__gethex+0x2e8>
 8016900:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016904:	2b02      	cmp	r3, #2
 8016906:	d022      	beq.n	801694e <__gethex+0x2d8>
 8016908:	2b03      	cmp	r3, #3
 801690a:	d024      	beq.n	8016956 <__gethex+0x2e0>
 801690c:	2b01      	cmp	r3, #1
 801690e:	d115      	bne.n	801693c <__gethex+0x2c6>
 8016910:	42a6      	cmp	r6, r4
 8016912:	d113      	bne.n	801693c <__gethex+0x2c6>
 8016914:	2e01      	cmp	r6, #1
 8016916:	dc0b      	bgt.n	8016930 <__gethex+0x2ba>
 8016918:	9a06      	ldr	r2, [sp, #24]
 801691a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801691e:	6013      	str	r3, [r2, #0]
 8016920:	2301      	movs	r3, #1
 8016922:	612b      	str	r3, [r5, #16]
 8016924:	f8c9 3000 	str.w	r3, [r9]
 8016928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801692a:	2762      	movs	r7, #98	; 0x62
 801692c:	601d      	str	r5, [r3, #0]
 801692e:	e72a      	b.n	8016786 <__gethex+0x110>
 8016930:	1e71      	subs	r1, r6, #1
 8016932:	4628      	mov	r0, r5
 8016934:	f000 fd90 	bl	8017458 <__any_on>
 8016938:	2800      	cmp	r0, #0
 801693a:	d1ed      	bne.n	8016918 <__gethex+0x2a2>
 801693c:	4629      	mov	r1, r5
 801693e:	9802      	ldr	r0, [sp, #8]
 8016940:	f000 f9e0 	bl	8016d04 <_Bfree>
 8016944:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016946:	2300      	movs	r3, #0
 8016948:	6013      	str	r3, [r2, #0]
 801694a:	2750      	movs	r7, #80	; 0x50
 801694c:	e71b      	b.n	8016786 <__gethex+0x110>
 801694e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016950:	2b00      	cmp	r3, #0
 8016952:	d0e1      	beq.n	8016918 <__gethex+0x2a2>
 8016954:	e7f2      	b.n	801693c <__gethex+0x2c6>
 8016956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016958:	2b00      	cmp	r3, #0
 801695a:	d1dd      	bne.n	8016918 <__gethex+0x2a2>
 801695c:	e7ee      	b.n	801693c <__gethex+0x2c6>
 801695e:	1e67      	subs	r7, r4, #1
 8016960:	f1ba 0f00 	cmp.w	sl, #0
 8016964:	d131      	bne.n	80169ca <__gethex+0x354>
 8016966:	b127      	cbz	r7, 8016972 <__gethex+0x2fc>
 8016968:	4639      	mov	r1, r7
 801696a:	4628      	mov	r0, r5
 801696c:	f000 fd74 	bl	8017458 <__any_on>
 8016970:	4682      	mov	sl, r0
 8016972:	117a      	asrs	r2, r7, #5
 8016974:	2301      	movs	r3, #1
 8016976:	f007 071f 	and.w	r7, r7, #31
 801697a:	fa03 f707 	lsl.w	r7, r3, r7
 801697e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016982:	4621      	mov	r1, r4
 8016984:	421f      	tst	r7, r3
 8016986:	4628      	mov	r0, r5
 8016988:	bf18      	it	ne
 801698a:	f04a 0a02 	orrne.w	sl, sl, #2
 801698e:	1b36      	subs	r6, r6, r4
 8016990:	f7ff fe22 	bl	80165d8 <rshift>
 8016994:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016998:	2702      	movs	r7, #2
 801699a:	f1ba 0f00 	cmp.w	sl, #0
 801699e:	d048      	beq.n	8016a32 <__gethex+0x3bc>
 80169a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80169a4:	2b02      	cmp	r3, #2
 80169a6:	d015      	beq.n	80169d4 <__gethex+0x35e>
 80169a8:	2b03      	cmp	r3, #3
 80169aa:	d017      	beq.n	80169dc <__gethex+0x366>
 80169ac:	2b01      	cmp	r3, #1
 80169ae:	d109      	bne.n	80169c4 <__gethex+0x34e>
 80169b0:	f01a 0f02 	tst.w	sl, #2
 80169b4:	d006      	beq.n	80169c4 <__gethex+0x34e>
 80169b6:	f8d9 3000 	ldr.w	r3, [r9]
 80169ba:	ea4a 0a03 	orr.w	sl, sl, r3
 80169be:	f01a 0f01 	tst.w	sl, #1
 80169c2:	d10e      	bne.n	80169e2 <__gethex+0x36c>
 80169c4:	f047 0710 	orr.w	r7, r7, #16
 80169c8:	e033      	b.n	8016a32 <__gethex+0x3bc>
 80169ca:	f04f 0a01 	mov.w	sl, #1
 80169ce:	e7d0      	b.n	8016972 <__gethex+0x2fc>
 80169d0:	2701      	movs	r7, #1
 80169d2:	e7e2      	b.n	801699a <__gethex+0x324>
 80169d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169d6:	f1c3 0301 	rsb	r3, r3, #1
 80169da:	9315      	str	r3, [sp, #84]	; 0x54
 80169dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d0f0      	beq.n	80169c4 <__gethex+0x34e>
 80169e2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80169e6:	f105 0314 	add.w	r3, r5, #20
 80169ea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80169ee:	eb03 010a 	add.w	r1, r3, sl
 80169f2:	f04f 0c00 	mov.w	ip, #0
 80169f6:	4618      	mov	r0, r3
 80169f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80169fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016a00:	d01c      	beq.n	8016a3c <__gethex+0x3c6>
 8016a02:	3201      	adds	r2, #1
 8016a04:	6002      	str	r2, [r0, #0]
 8016a06:	2f02      	cmp	r7, #2
 8016a08:	f105 0314 	add.w	r3, r5, #20
 8016a0c:	d138      	bne.n	8016a80 <__gethex+0x40a>
 8016a0e:	f8d8 2000 	ldr.w	r2, [r8]
 8016a12:	3a01      	subs	r2, #1
 8016a14:	42b2      	cmp	r2, r6
 8016a16:	d10a      	bne.n	8016a2e <__gethex+0x3b8>
 8016a18:	1171      	asrs	r1, r6, #5
 8016a1a:	2201      	movs	r2, #1
 8016a1c:	f006 061f 	and.w	r6, r6, #31
 8016a20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a24:	fa02 f606 	lsl.w	r6, r2, r6
 8016a28:	421e      	tst	r6, r3
 8016a2a:	bf18      	it	ne
 8016a2c:	4617      	movne	r7, r2
 8016a2e:	f047 0720 	orr.w	r7, r7, #32
 8016a32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a34:	601d      	str	r5, [r3, #0]
 8016a36:	9b06      	ldr	r3, [sp, #24]
 8016a38:	601c      	str	r4, [r3, #0]
 8016a3a:	e6a4      	b.n	8016786 <__gethex+0x110>
 8016a3c:	4299      	cmp	r1, r3
 8016a3e:	f843 cc04 	str.w	ip, [r3, #-4]
 8016a42:	d8d8      	bhi.n	80169f6 <__gethex+0x380>
 8016a44:	68ab      	ldr	r3, [r5, #8]
 8016a46:	4599      	cmp	r9, r3
 8016a48:	db12      	blt.n	8016a70 <__gethex+0x3fa>
 8016a4a:	6869      	ldr	r1, [r5, #4]
 8016a4c:	9802      	ldr	r0, [sp, #8]
 8016a4e:	3101      	adds	r1, #1
 8016a50:	f000 f924 	bl	8016c9c <_Balloc>
 8016a54:	692a      	ldr	r2, [r5, #16]
 8016a56:	3202      	adds	r2, #2
 8016a58:	f105 010c 	add.w	r1, r5, #12
 8016a5c:	4683      	mov	fp, r0
 8016a5e:	0092      	lsls	r2, r2, #2
 8016a60:	300c      	adds	r0, #12
 8016a62:	f7fd f9c5 	bl	8013df0 <memcpy>
 8016a66:	4629      	mov	r1, r5
 8016a68:	9802      	ldr	r0, [sp, #8]
 8016a6a:	f000 f94b 	bl	8016d04 <_Bfree>
 8016a6e:	465d      	mov	r5, fp
 8016a70:	692b      	ldr	r3, [r5, #16]
 8016a72:	1c5a      	adds	r2, r3, #1
 8016a74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016a78:	612a      	str	r2, [r5, #16]
 8016a7a:	2201      	movs	r2, #1
 8016a7c:	615a      	str	r2, [r3, #20]
 8016a7e:	e7c2      	b.n	8016a06 <__gethex+0x390>
 8016a80:	692a      	ldr	r2, [r5, #16]
 8016a82:	454a      	cmp	r2, r9
 8016a84:	dd0b      	ble.n	8016a9e <__gethex+0x428>
 8016a86:	2101      	movs	r1, #1
 8016a88:	4628      	mov	r0, r5
 8016a8a:	f7ff fda5 	bl	80165d8 <rshift>
 8016a8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a92:	3401      	adds	r4, #1
 8016a94:	42a3      	cmp	r3, r4
 8016a96:	f6ff aed9 	blt.w	801684c <__gethex+0x1d6>
 8016a9a:	2701      	movs	r7, #1
 8016a9c:	e7c7      	b.n	8016a2e <__gethex+0x3b8>
 8016a9e:	f016 061f 	ands.w	r6, r6, #31
 8016aa2:	d0fa      	beq.n	8016a9a <__gethex+0x424>
 8016aa4:	449a      	add	sl, r3
 8016aa6:	f1c6 0620 	rsb	r6, r6, #32
 8016aaa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016aae:	f000 f9b9 	bl	8016e24 <__hi0bits>
 8016ab2:	42b0      	cmp	r0, r6
 8016ab4:	dbe7      	blt.n	8016a86 <__gethex+0x410>
 8016ab6:	e7f0      	b.n	8016a9a <__gethex+0x424>

08016ab8 <L_shift>:
 8016ab8:	f1c2 0208 	rsb	r2, r2, #8
 8016abc:	0092      	lsls	r2, r2, #2
 8016abe:	b570      	push	{r4, r5, r6, lr}
 8016ac0:	f1c2 0620 	rsb	r6, r2, #32
 8016ac4:	6843      	ldr	r3, [r0, #4]
 8016ac6:	6804      	ldr	r4, [r0, #0]
 8016ac8:	fa03 f506 	lsl.w	r5, r3, r6
 8016acc:	432c      	orrs	r4, r5
 8016ace:	40d3      	lsrs	r3, r2
 8016ad0:	6004      	str	r4, [r0, #0]
 8016ad2:	f840 3f04 	str.w	r3, [r0, #4]!
 8016ad6:	4288      	cmp	r0, r1
 8016ad8:	d3f4      	bcc.n	8016ac4 <L_shift+0xc>
 8016ada:	bd70      	pop	{r4, r5, r6, pc}

08016adc <__match>:
 8016adc:	b530      	push	{r4, r5, lr}
 8016ade:	6803      	ldr	r3, [r0, #0]
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ae6:	b914      	cbnz	r4, 8016aee <__match+0x12>
 8016ae8:	6003      	str	r3, [r0, #0]
 8016aea:	2001      	movs	r0, #1
 8016aec:	bd30      	pop	{r4, r5, pc}
 8016aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016af2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016af6:	2d19      	cmp	r5, #25
 8016af8:	bf98      	it	ls
 8016afa:	3220      	addls	r2, #32
 8016afc:	42a2      	cmp	r2, r4
 8016afe:	d0f0      	beq.n	8016ae2 <__match+0x6>
 8016b00:	2000      	movs	r0, #0
 8016b02:	e7f3      	b.n	8016aec <__match+0x10>

08016b04 <__hexnan>:
 8016b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b08:	680b      	ldr	r3, [r1, #0]
 8016b0a:	6801      	ldr	r1, [r0, #0]
 8016b0c:	115f      	asrs	r7, r3, #5
 8016b0e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016b12:	f013 031f 	ands.w	r3, r3, #31
 8016b16:	b087      	sub	sp, #28
 8016b18:	bf18      	it	ne
 8016b1a:	3704      	addne	r7, #4
 8016b1c:	2500      	movs	r5, #0
 8016b1e:	1f3e      	subs	r6, r7, #4
 8016b20:	4682      	mov	sl, r0
 8016b22:	4690      	mov	r8, r2
 8016b24:	9301      	str	r3, [sp, #4]
 8016b26:	f847 5c04 	str.w	r5, [r7, #-4]
 8016b2a:	46b1      	mov	r9, r6
 8016b2c:	4634      	mov	r4, r6
 8016b2e:	9502      	str	r5, [sp, #8]
 8016b30:	46ab      	mov	fp, r5
 8016b32:	784a      	ldrb	r2, [r1, #1]
 8016b34:	1c4b      	adds	r3, r1, #1
 8016b36:	9303      	str	r3, [sp, #12]
 8016b38:	b342      	cbz	r2, 8016b8c <__hexnan+0x88>
 8016b3a:	4610      	mov	r0, r2
 8016b3c:	9105      	str	r1, [sp, #20]
 8016b3e:	9204      	str	r2, [sp, #16]
 8016b40:	f7ff fd84 	bl	801664c <__hexdig_fun>
 8016b44:	2800      	cmp	r0, #0
 8016b46:	d143      	bne.n	8016bd0 <__hexnan+0xcc>
 8016b48:	9a04      	ldr	r2, [sp, #16]
 8016b4a:	9905      	ldr	r1, [sp, #20]
 8016b4c:	2a20      	cmp	r2, #32
 8016b4e:	d818      	bhi.n	8016b82 <__hexnan+0x7e>
 8016b50:	9b02      	ldr	r3, [sp, #8]
 8016b52:	459b      	cmp	fp, r3
 8016b54:	dd13      	ble.n	8016b7e <__hexnan+0x7a>
 8016b56:	454c      	cmp	r4, r9
 8016b58:	d206      	bcs.n	8016b68 <__hexnan+0x64>
 8016b5a:	2d07      	cmp	r5, #7
 8016b5c:	dc04      	bgt.n	8016b68 <__hexnan+0x64>
 8016b5e:	462a      	mov	r2, r5
 8016b60:	4649      	mov	r1, r9
 8016b62:	4620      	mov	r0, r4
 8016b64:	f7ff ffa8 	bl	8016ab8 <L_shift>
 8016b68:	4544      	cmp	r4, r8
 8016b6a:	d944      	bls.n	8016bf6 <__hexnan+0xf2>
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	f1a4 0904 	sub.w	r9, r4, #4
 8016b72:	f844 3c04 	str.w	r3, [r4, #-4]
 8016b76:	f8cd b008 	str.w	fp, [sp, #8]
 8016b7a:	464c      	mov	r4, r9
 8016b7c:	461d      	mov	r5, r3
 8016b7e:	9903      	ldr	r1, [sp, #12]
 8016b80:	e7d7      	b.n	8016b32 <__hexnan+0x2e>
 8016b82:	2a29      	cmp	r2, #41	; 0x29
 8016b84:	d14a      	bne.n	8016c1c <__hexnan+0x118>
 8016b86:	3102      	adds	r1, #2
 8016b88:	f8ca 1000 	str.w	r1, [sl]
 8016b8c:	f1bb 0f00 	cmp.w	fp, #0
 8016b90:	d044      	beq.n	8016c1c <__hexnan+0x118>
 8016b92:	454c      	cmp	r4, r9
 8016b94:	d206      	bcs.n	8016ba4 <__hexnan+0xa0>
 8016b96:	2d07      	cmp	r5, #7
 8016b98:	dc04      	bgt.n	8016ba4 <__hexnan+0xa0>
 8016b9a:	462a      	mov	r2, r5
 8016b9c:	4649      	mov	r1, r9
 8016b9e:	4620      	mov	r0, r4
 8016ba0:	f7ff ff8a 	bl	8016ab8 <L_shift>
 8016ba4:	4544      	cmp	r4, r8
 8016ba6:	d928      	bls.n	8016bfa <__hexnan+0xf6>
 8016ba8:	4643      	mov	r3, r8
 8016baa:	f854 2b04 	ldr.w	r2, [r4], #4
 8016bae:	f843 2b04 	str.w	r2, [r3], #4
 8016bb2:	42a6      	cmp	r6, r4
 8016bb4:	d2f9      	bcs.n	8016baa <__hexnan+0xa6>
 8016bb6:	2200      	movs	r2, #0
 8016bb8:	f843 2b04 	str.w	r2, [r3], #4
 8016bbc:	429e      	cmp	r6, r3
 8016bbe:	d2fb      	bcs.n	8016bb8 <__hexnan+0xb4>
 8016bc0:	6833      	ldr	r3, [r6, #0]
 8016bc2:	b91b      	cbnz	r3, 8016bcc <__hexnan+0xc8>
 8016bc4:	4546      	cmp	r6, r8
 8016bc6:	d127      	bne.n	8016c18 <__hexnan+0x114>
 8016bc8:	2301      	movs	r3, #1
 8016bca:	6033      	str	r3, [r6, #0]
 8016bcc:	2005      	movs	r0, #5
 8016bce:	e026      	b.n	8016c1e <__hexnan+0x11a>
 8016bd0:	3501      	adds	r5, #1
 8016bd2:	2d08      	cmp	r5, #8
 8016bd4:	f10b 0b01 	add.w	fp, fp, #1
 8016bd8:	dd06      	ble.n	8016be8 <__hexnan+0xe4>
 8016bda:	4544      	cmp	r4, r8
 8016bdc:	d9cf      	bls.n	8016b7e <__hexnan+0x7a>
 8016bde:	2300      	movs	r3, #0
 8016be0:	f844 3c04 	str.w	r3, [r4, #-4]
 8016be4:	2501      	movs	r5, #1
 8016be6:	3c04      	subs	r4, #4
 8016be8:	6822      	ldr	r2, [r4, #0]
 8016bea:	f000 000f 	and.w	r0, r0, #15
 8016bee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016bf2:	6020      	str	r0, [r4, #0]
 8016bf4:	e7c3      	b.n	8016b7e <__hexnan+0x7a>
 8016bf6:	2508      	movs	r5, #8
 8016bf8:	e7c1      	b.n	8016b7e <__hexnan+0x7a>
 8016bfa:	9b01      	ldr	r3, [sp, #4]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d0df      	beq.n	8016bc0 <__hexnan+0xbc>
 8016c00:	f04f 32ff 	mov.w	r2, #4294967295
 8016c04:	f1c3 0320 	rsb	r3, r3, #32
 8016c08:	fa22 f303 	lsr.w	r3, r2, r3
 8016c0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016c10:	401a      	ands	r2, r3
 8016c12:	f847 2c04 	str.w	r2, [r7, #-4]
 8016c16:	e7d3      	b.n	8016bc0 <__hexnan+0xbc>
 8016c18:	3e04      	subs	r6, #4
 8016c1a:	e7d1      	b.n	8016bc0 <__hexnan+0xbc>
 8016c1c:	2004      	movs	r0, #4
 8016c1e:	b007      	add	sp, #28
 8016c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c24 <__locale_ctype_ptr_l>:
 8016c24:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016c28:	4770      	bx	lr
	...

08016c2c <__locale_ctype_ptr>:
 8016c2c:	4b04      	ldr	r3, [pc, #16]	; (8016c40 <__locale_ctype_ptr+0x14>)
 8016c2e:	4a05      	ldr	r2, [pc, #20]	; (8016c44 <__locale_ctype_ptr+0x18>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	6a1b      	ldr	r3, [r3, #32]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	bf08      	it	eq
 8016c38:	4613      	moveq	r3, r2
 8016c3a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016c3e:	4770      	bx	lr
 8016c40:	2000000c 	.word	0x2000000c
 8016c44:	20000070 	.word	0x20000070

08016c48 <__localeconv_l>:
 8016c48:	30f0      	adds	r0, #240	; 0xf0
 8016c4a:	4770      	bx	lr

08016c4c <_localeconv_r>:
 8016c4c:	4b04      	ldr	r3, [pc, #16]	; (8016c60 <_localeconv_r+0x14>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	6a18      	ldr	r0, [r3, #32]
 8016c52:	4b04      	ldr	r3, [pc, #16]	; (8016c64 <_localeconv_r+0x18>)
 8016c54:	2800      	cmp	r0, #0
 8016c56:	bf08      	it	eq
 8016c58:	4618      	moveq	r0, r3
 8016c5a:	30f0      	adds	r0, #240	; 0xf0
 8016c5c:	4770      	bx	lr
 8016c5e:	bf00      	nop
 8016c60:	2000000c 	.word	0x2000000c
 8016c64:	20000070 	.word	0x20000070

08016c68 <malloc>:
 8016c68:	4b02      	ldr	r3, [pc, #8]	; (8016c74 <malloc+0xc>)
 8016c6a:	4601      	mov	r1, r0
 8016c6c:	6818      	ldr	r0, [r3, #0]
 8016c6e:	f000 bc71 	b.w	8017554 <_malloc_r>
 8016c72:	bf00      	nop
 8016c74:	2000000c 	.word	0x2000000c

08016c78 <__ascii_mbtowc>:
 8016c78:	b082      	sub	sp, #8
 8016c7a:	b901      	cbnz	r1, 8016c7e <__ascii_mbtowc+0x6>
 8016c7c:	a901      	add	r1, sp, #4
 8016c7e:	b142      	cbz	r2, 8016c92 <__ascii_mbtowc+0x1a>
 8016c80:	b14b      	cbz	r3, 8016c96 <__ascii_mbtowc+0x1e>
 8016c82:	7813      	ldrb	r3, [r2, #0]
 8016c84:	600b      	str	r3, [r1, #0]
 8016c86:	7812      	ldrb	r2, [r2, #0]
 8016c88:	1c10      	adds	r0, r2, #0
 8016c8a:	bf18      	it	ne
 8016c8c:	2001      	movne	r0, #1
 8016c8e:	b002      	add	sp, #8
 8016c90:	4770      	bx	lr
 8016c92:	4610      	mov	r0, r2
 8016c94:	e7fb      	b.n	8016c8e <__ascii_mbtowc+0x16>
 8016c96:	f06f 0001 	mvn.w	r0, #1
 8016c9a:	e7f8      	b.n	8016c8e <__ascii_mbtowc+0x16>

08016c9c <_Balloc>:
 8016c9c:	b570      	push	{r4, r5, r6, lr}
 8016c9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	460e      	mov	r6, r1
 8016ca4:	b93d      	cbnz	r5, 8016cb6 <_Balloc+0x1a>
 8016ca6:	2010      	movs	r0, #16
 8016ca8:	f7ff ffde 	bl	8016c68 <malloc>
 8016cac:	6260      	str	r0, [r4, #36]	; 0x24
 8016cae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016cb2:	6005      	str	r5, [r0, #0]
 8016cb4:	60c5      	str	r5, [r0, #12]
 8016cb6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016cb8:	68eb      	ldr	r3, [r5, #12]
 8016cba:	b183      	cbz	r3, 8016cde <_Balloc+0x42>
 8016cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016cbe:	68db      	ldr	r3, [r3, #12]
 8016cc0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016cc4:	b9b8      	cbnz	r0, 8016cf6 <_Balloc+0x5a>
 8016cc6:	2101      	movs	r1, #1
 8016cc8:	fa01 f506 	lsl.w	r5, r1, r6
 8016ccc:	1d6a      	adds	r2, r5, #5
 8016cce:	0092      	lsls	r2, r2, #2
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	f000 fbe2 	bl	801749a <_calloc_r>
 8016cd6:	b160      	cbz	r0, 8016cf2 <_Balloc+0x56>
 8016cd8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016cdc:	e00e      	b.n	8016cfc <_Balloc+0x60>
 8016cde:	2221      	movs	r2, #33	; 0x21
 8016ce0:	2104      	movs	r1, #4
 8016ce2:	4620      	mov	r0, r4
 8016ce4:	f000 fbd9 	bl	801749a <_calloc_r>
 8016ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016cea:	60e8      	str	r0, [r5, #12]
 8016cec:	68db      	ldr	r3, [r3, #12]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d1e4      	bne.n	8016cbc <_Balloc+0x20>
 8016cf2:	2000      	movs	r0, #0
 8016cf4:	bd70      	pop	{r4, r5, r6, pc}
 8016cf6:	6802      	ldr	r2, [r0, #0]
 8016cf8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016d02:	e7f7      	b.n	8016cf4 <_Balloc+0x58>

08016d04 <_Bfree>:
 8016d04:	b570      	push	{r4, r5, r6, lr}
 8016d06:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016d08:	4606      	mov	r6, r0
 8016d0a:	460d      	mov	r5, r1
 8016d0c:	b93c      	cbnz	r4, 8016d1e <_Bfree+0x1a>
 8016d0e:	2010      	movs	r0, #16
 8016d10:	f7ff ffaa 	bl	8016c68 <malloc>
 8016d14:	6270      	str	r0, [r6, #36]	; 0x24
 8016d16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016d1a:	6004      	str	r4, [r0, #0]
 8016d1c:	60c4      	str	r4, [r0, #12]
 8016d1e:	b13d      	cbz	r5, 8016d30 <_Bfree+0x2c>
 8016d20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016d22:	686a      	ldr	r2, [r5, #4]
 8016d24:	68db      	ldr	r3, [r3, #12]
 8016d26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016d2a:	6029      	str	r1, [r5, #0]
 8016d2c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016d30:	bd70      	pop	{r4, r5, r6, pc}

08016d32 <__multadd>:
 8016d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d36:	690d      	ldr	r5, [r1, #16]
 8016d38:	461f      	mov	r7, r3
 8016d3a:	4606      	mov	r6, r0
 8016d3c:	460c      	mov	r4, r1
 8016d3e:	f101 0c14 	add.w	ip, r1, #20
 8016d42:	2300      	movs	r3, #0
 8016d44:	f8dc 0000 	ldr.w	r0, [ip]
 8016d48:	b281      	uxth	r1, r0
 8016d4a:	fb02 7101 	mla	r1, r2, r1, r7
 8016d4e:	0c0f      	lsrs	r7, r1, #16
 8016d50:	0c00      	lsrs	r0, r0, #16
 8016d52:	fb02 7000 	mla	r0, r2, r0, r7
 8016d56:	b289      	uxth	r1, r1
 8016d58:	3301      	adds	r3, #1
 8016d5a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016d5e:	429d      	cmp	r5, r3
 8016d60:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016d64:	f84c 1b04 	str.w	r1, [ip], #4
 8016d68:	dcec      	bgt.n	8016d44 <__multadd+0x12>
 8016d6a:	b1d7      	cbz	r7, 8016da2 <__multadd+0x70>
 8016d6c:	68a3      	ldr	r3, [r4, #8]
 8016d6e:	42ab      	cmp	r3, r5
 8016d70:	dc12      	bgt.n	8016d98 <__multadd+0x66>
 8016d72:	6861      	ldr	r1, [r4, #4]
 8016d74:	4630      	mov	r0, r6
 8016d76:	3101      	adds	r1, #1
 8016d78:	f7ff ff90 	bl	8016c9c <_Balloc>
 8016d7c:	6922      	ldr	r2, [r4, #16]
 8016d7e:	3202      	adds	r2, #2
 8016d80:	f104 010c 	add.w	r1, r4, #12
 8016d84:	4680      	mov	r8, r0
 8016d86:	0092      	lsls	r2, r2, #2
 8016d88:	300c      	adds	r0, #12
 8016d8a:	f7fd f831 	bl	8013df0 <memcpy>
 8016d8e:	4621      	mov	r1, r4
 8016d90:	4630      	mov	r0, r6
 8016d92:	f7ff ffb7 	bl	8016d04 <_Bfree>
 8016d96:	4644      	mov	r4, r8
 8016d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016d9c:	3501      	adds	r5, #1
 8016d9e:	615f      	str	r7, [r3, #20]
 8016da0:	6125      	str	r5, [r4, #16]
 8016da2:	4620      	mov	r0, r4
 8016da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016da8 <__s2b>:
 8016da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dac:	460c      	mov	r4, r1
 8016dae:	4615      	mov	r5, r2
 8016db0:	461f      	mov	r7, r3
 8016db2:	2209      	movs	r2, #9
 8016db4:	3308      	adds	r3, #8
 8016db6:	4606      	mov	r6, r0
 8016db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8016dbc:	2100      	movs	r1, #0
 8016dbe:	2201      	movs	r2, #1
 8016dc0:	429a      	cmp	r2, r3
 8016dc2:	db20      	blt.n	8016e06 <__s2b+0x5e>
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	f7ff ff69 	bl	8016c9c <_Balloc>
 8016dca:	9b08      	ldr	r3, [sp, #32]
 8016dcc:	6143      	str	r3, [r0, #20]
 8016dce:	2d09      	cmp	r5, #9
 8016dd0:	f04f 0301 	mov.w	r3, #1
 8016dd4:	6103      	str	r3, [r0, #16]
 8016dd6:	dd19      	ble.n	8016e0c <__s2b+0x64>
 8016dd8:	f104 0809 	add.w	r8, r4, #9
 8016ddc:	46c1      	mov	r9, r8
 8016dde:	442c      	add	r4, r5
 8016de0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016de4:	4601      	mov	r1, r0
 8016de6:	3b30      	subs	r3, #48	; 0x30
 8016de8:	220a      	movs	r2, #10
 8016dea:	4630      	mov	r0, r6
 8016dec:	f7ff ffa1 	bl	8016d32 <__multadd>
 8016df0:	45a1      	cmp	r9, r4
 8016df2:	d1f5      	bne.n	8016de0 <__s2b+0x38>
 8016df4:	eb08 0405 	add.w	r4, r8, r5
 8016df8:	3c08      	subs	r4, #8
 8016dfa:	1b2d      	subs	r5, r5, r4
 8016dfc:	1963      	adds	r3, r4, r5
 8016dfe:	42bb      	cmp	r3, r7
 8016e00:	db07      	blt.n	8016e12 <__s2b+0x6a>
 8016e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e06:	0052      	lsls	r2, r2, #1
 8016e08:	3101      	adds	r1, #1
 8016e0a:	e7d9      	b.n	8016dc0 <__s2b+0x18>
 8016e0c:	340a      	adds	r4, #10
 8016e0e:	2509      	movs	r5, #9
 8016e10:	e7f3      	b.n	8016dfa <__s2b+0x52>
 8016e12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016e16:	4601      	mov	r1, r0
 8016e18:	3b30      	subs	r3, #48	; 0x30
 8016e1a:	220a      	movs	r2, #10
 8016e1c:	4630      	mov	r0, r6
 8016e1e:	f7ff ff88 	bl	8016d32 <__multadd>
 8016e22:	e7eb      	b.n	8016dfc <__s2b+0x54>

08016e24 <__hi0bits>:
 8016e24:	0c02      	lsrs	r2, r0, #16
 8016e26:	0412      	lsls	r2, r2, #16
 8016e28:	4603      	mov	r3, r0
 8016e2a:	b9b2      	cbnz	r2, 8016e5a <__hi0bits+0x36>
 8016e2c:	0403      	lsls	r3, r0, #16
 8016e2e:	2010      	movs	r0, #16
 8016e30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016e34:	bf04      	itt	eq
 8016e36:	021b      	lsleq	r3, r3, #8
 8016e38:	3008      	addeq	r0, #8
 8016e3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016e3e:	bf04      	itt	eq
 8016e40:	011b      	lsleq	r3, r3, #4
 8016e42:	3004      	addeq	r0, #4
 8016e44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016e48:	bf04      	itt	eq
 8016e4a:	009b      	lsleq	r3, r3, #2
 8016e4c:	3002      	addeq	r0, #2
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	db06      	blt.n	8016e60 <__hi0bits+0x3c>
 8016e52:	005b      	lsls	r3, r3, #1
 8016e54:	d503      	bpl.n	8016e5e <__hi0bits+0x3a>
 8016e56:	3001      	adds	r0, #1
 8016e58:	4770      	bx	lr
 8016e5a:	2000      	movs	r0, #0
 8016e5c:	e7e8      	b.n	8016e30 <__hi0bits+0xc>
 8016e5e:	2020      	movs	r0, #32
 8016e60:	4770      	bx	lr

08016e62 <__lo0bits>:
 8016e62:	6803      	ldr	r3, [r0, #0]
 8016e64:	f013 0207 	ands.w	r2, r3, #7
 8016e68:	4601      	mov	r1, r0
 8016e6a:	d00b      	beq.n	8016e84 <__lo0bits+0x22>
 8016e6c:	07da      	lsls	r2, r3, #31
 8016e6e:	d423      	bmi.n	8016eb8 <__lo0bits+0x56>
 8016e70:	0798      	lsls	r0, r3, #30
 8016e72:	bf49      	itett	mi
 8016e74:	085b      	lsrmi	r3, r3, #1
 8016e76:	089b      	lsrpl	r3, r3, #2
 8016e78:	2001      	movmi	r0, #1
 8016e7a:	600b      	strmi	r3, [r1, #0]
 8016e7c:	bf5c      	itt	pl
 8016e7e:	600b      	strpl	r3, [r1, #0]
 8016e80:	2002      	movpl	r0, #2
 8016e82:	4770      	bx	lr
 8016e84:	b298      	uxth	r0, r3
 8016e86:	b9a8      	cbnz	r0, 8016eb4 <__lo0bits+0x52>
 8016e88:	0c1b      	lsrs	r3, r3, #16
 8016e8a:	2010      	movs	r0, #16
 8016e8c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016e90:	bf04      	itt	eq
 8016e92:	0a1b      	lsreq	r3, r3, #8
 8016e94:	3008      	addeq	r0, #8
 8016e96:	071a      	lsls	r2, r3, #28
 8016e98:	bf04      	itt	eq
 8016e9a:	091b      	lsreq	r3, r3, #4
 8016e9c:	3004      	addeq	r0, #4
 8016e9e:	079a      	lsls	r2, r3, #30
 8016ea0:	bf04      	itt	eq
 8016ea2:	089b      	lsreq	r3, r3, #2
 8016ea4:	3002      	addeq	r0, #2
 8016ea6:	07da      	lsls	r2, r3, #31
 8016ea8:	d402      	bmi.n	8016eb0 <__lo0bits+0x4e>
 8016eaa:	085b      	lsrs	r3, r3, #1
 8016eac:	d006      	beq.n	8016ebc <__lo0bits+0x5a>
 8016eae:	3001      	adds	r0, #1
 8016eb0:	600b      	str	r3, [r1, #0]
 8016eb2:	4770      	bx	lr
 8016eb4:	4610      	mov	r0, r2
 8016eb6:	e7e9      	b.n	8016e8c <__lo0bits+0x2a>
 8016eb8:	2000      	movs	r0, #0
 8016eba:	4770      	bx	lr
 8016ebc:	2020      	movs	r0, #32
 8016ebe:	4770      	bx	lr

08016ec0 <__i2b>:
 8016ec0:	b510      	push	{r4, lr}
 8016ec2:	460c      	mov	r4, r1
 8016ec4:	2101      	movs	r1, #1
 8016ec6:	f7ff fee9 	bl	8016c9c <_Balloc>
 8016eca:	2201      	movs	r2, #1
 8016ecc:	6144      	str	r4, [r0, #20]
 8016ece:	6102      	str	r2, [r0, #16]
 8016ed0:	bd10      	pop	{r4, pc}

08016ed2 <__multiply>:
 8016ed2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed6:	4614      	mov	r4, r2
 8016ed8:	690a      	ldr	r2, [r1, #16]
 8016eda:	6923      	ldr	r3, [r4, #16]
 8016edc:	429a      	cmp	r2, r3
 8016ede:	bfb8      	it	lt
 8016ee0:	460b      	movlt	r3, r1
 8016ee2:	4688      	mov	r8, r1
 8016ee4:	bfbc      	itt	lt
 8016ee6:	46a0      	movlt	r8, r4
 8016ee8:	461c      	movlt	r4, r3
 8016eea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016eee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016ef2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016ef6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016efa:	eb07 0609 	add.w	r6, r7, r9
 8016efe:	42b3      	cmp	r3, r6
 8016f00:	bfb8      	it	lt
 8016f02:	3101      	addlt	r1, #1
 8016f04:	f7ff feca 	bl	8016c9c <_Balloc>
 8016f08:	f100 0514 	add.w	r5, r0, #20
 8016f0c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016f10:	462b      	mov	r3, r5
 8016f12:	2200      	movs	r2, #0
 8016f14:	4573      	cmp	r3, lr
 8016f16:	d316      	bcc.n	8016f46 <__multiply+0x74>
 8016f18:	f104 0214 	add.w	r2, r4, #20
 8016f1c:	f108 0114 	add.w	r1, r8, #20
 8016f20:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016f24:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016f28:	9300      	str	r3, [sp, #0]
 8016f2a:	9b00      	ldr	r3, [sp, #0]
 8016f2c:	9201      	str	r2, [sp, #4]
 8016f2e:	4293      	cmp	r3, r2
 8016f30:	d80c      	bhi.n	8016f4c <__multiply+0x7a>
 8016f32:	2e00      	cmp	r6, #0
 8016f34:	dd03      	ble.n	8016f3e <__multiply+0x6c>
 8016f36:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d05d      	beq.n	8016ffa <__multiply+0x128>
 8016f3e:	6106      	str	r6, [r0, #16]
 8016f40:	b003      	add	sp, #12
 8016f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f46:	f843 2b04 	str.w	r2, [r3], #4
 8016f4a:	e7e3      	b.n	8016f14 <__multiply+0x42>
 8016f4c:	f8b2 b000 	ldrh.w	fp, [r2]
 8016f50:	f1bb 0f00 	cmp.w	fp, #0
 8016f54:	d023      	beq.n	8016f9e <__multiply+0xcc>
 8016f56:	4689      	mov	r9, r1
 8016f58:	46ac      	mov	ip, r5
 8016f5a:	f04f 0800 	mov.w	r8, #0
 8016f5e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016f62:	f8dc a000 	ldr.w	sl, [ip]
 8016f66:	b2a3      	uxth	r3, r4
 8016f68:	fa1f fa8a 	uxth.w	sl, sl
 8016f6c:	fb0b a303 	mla	r3, fp, r3, sl
 8016f70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016f74:	f8dc 4000 	ldr.w	r4, [ip]
 8016f78:	4443      	add	r3, r8
 8016f7a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016f7e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016f82:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016f86:	46e2      	mov	sl, ip
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016f8e:	454f      	cmp	r7, r9
 8016f90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016f94:	f84a 3b04 	str.w	r3, [sl], #4
 8016f98:	d82b      	bhi.n	8016ff2 <__multiply+0x120>
 8016f9a:	f8cc 8004 	str.w	r8, [ip, #4]
 8016f9e:	9b01      	ldr	r3, [sp, #4]
 8016fa0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016fa4:	3204      	adds	r2, #4
 8016fa6:	f1ba 0f00 	cmp.w	sl, #0
 8016faa:	d020      	beq.n	8016fee <__multiply+0x11c>
 8016fac:	682b      	ldr	r3, [r5, #0]
 8016fae:	4689      	mov	r9, r1
 8016fb0:	46a8      	mov	r8, r5
 8016fb2:	f04f 0b00 	mov.w	fp, #0
 8016fb6:	f8b9 c000 	ldrh.w	ip, [r9]
 8016fba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016fbe:	fb0a 440c 	mla	r4, sl, ip, r4
 8016fc2:	445c      	add	r4, fp
 8016fc4:	46c4      	mov	ip, r8
 8016fc6:	b29b      	uxth	r3, r3
 8016fc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016fcc:	f84c 3b04 	str.w	r3, [ip], #4
 8016fd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8016fd4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016fd8:	0c1b      	lsrs	r3, r3, #16
 8016fda:	fb0a b303 	mla	r3, sl, r3, fp
 8016fde:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016fe2:	454f      	cmp	r7, r9
 8016fe4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016fe8:	d805      	bhi.n	8016ff6 <__multiply+0x124>
 8016fea:	f8c8 3004 	str.w	r3, [r8, #4]
 8016fee:	3504      	adds	r5, #4
 8016ff0:	e79b      	b.n	8016f2a <__multiply+0x58>
 8016ff2:	46d4      	mov	ip, sl
 8016ff4:	e7b3      	b.n	8016f5e <__multiply+0x8c>
 8016ff6:	46e0      	mov	r8, ip
 8016ff8:	e7dd      	b.n	8016fb6 <__multiply+0xe4>
 8016ffa:	3e01      	subs	r6, #1
 8016ffc:	e799      	b.n	8016f32 <__multiply+0x60>
	...

08017000 <__pow5mult>:
 8017000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017004:	4615      	mov	r5, r2
 8017006:	f012 0203 	ands.w	r2, r2, #3
 801700a:	4606      	mov	r6, r0
 801700c:	460f      	mov	r7, r1
 801700e:	d007      	beq.n	8017020 <__pow5mult+0x20>
 8017010:	3a01      	subs	r2, #1
 8017012:	4c21      	ldr	r4, [pc, #132]	; (8017098 <__pow5mult+0x98>)
 8017014:	2300      	movs	r3, #0
 8017016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801701a:	f7ff fe8a 	bl	8016d32 <__multadd>
 801701e:	4607      	mov	r7, r0
 8017020:	10ad      	asrs	r5, r5, #2
 8017022:	d035      	beq.n	8017090 <__pow5mult+0x90>
 8017024:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017026:	b93c      	cbnz	r4, 8017038 <__pow5mult+0x38>
 8017028:	2010      	movs	r0, #16
 801702a:	f7ff fe1d 	bl	8016c68 <malloc>
 801702e:	6270      	str	r0, [r6, #36]	; 0x24
 8017030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017034:	6004      	str	r4, [r0, #0]
 8017036:	60c4      	str	r4, [r0, #12]
 8017038:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801703c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017040:	b94c      	cbnz	r4, 8017056 <__pow5mult+0x56>
 8017042:	f240 2171 	movw	r1, #625	; 0x271
 8017046:	4630      	mov	r0, r6
 8017048:	f7ff ff3a 	bl	8016ec0 <__i2b>
 801704c:	2300      	movs	r3, #0
 801704e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017052:	4604      	mov	r4, r0
 8017054:	6003      	str	r3, [r0, #0]
 8017056:	f04f 0800 	mov.w	r8, #0
 801705a:	07eb      	lsls	r3, r5, #31
 801705c:	d50a      	bpl.n	8017074 <__pow5mult+0x74>
 801705e:	4639      	mov	r1, r7
 8017060:	4622      	mov	r2, r4
 8017062:	4630      	mov	r0, r6
 8017064:	f7ff ff35 	bl	8016ed2 <__multiply>
 8017068:	4639      	mov	r1, r7
 801706a:	4681      	mov	r9, r0
 801706c:	4630      	mov	r0, r6
 801706e:	f7ff fe49 	bl	8016d04 <_Bfree>
 8017072:	464f      	mov	r7, r9
 8017074:	106d      	asrs	r5, r5, #1
 8017076:	d00b      	beq.n	8017090 <__pow5mult+0x90>
 8017078:	6820      	ldr	r0, [r4, #0]
 801707a:	b938      	cbnz	r0, 801708c <__pow5mult+0x8c>
 801707c:	4622      	mov	r2, r4
 801707e:	4621      	mov	r1, r4
 8017080:	4630      	mov	r0, r6
 8017082:	f7ff ff26 	bl	8016ed2 <__multiply>
 8017086:	6020      	str	r0, [r4, #0]
 8017088:	f8c0 8000 	str.w	r8, [r0]
 801708c:	4604      	mov	r4, r0
 801708e:	e7e4      	b.n	801705a <__pow5mult+0x5a>
 8017090:	4638      	mov	r0, r7
 8017092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017096:	bf00      	nop
 8017098:	08018bb0 	.word	0x08018bb0

0801709c <__lshift>:
 801709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170a0:	460c      	mov	r4, r1
 80170a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80170a6:	6923      	ldr	r3, [r4, #16]
 80170a8:	6849      	ldr	r1, [r1, #4]
 80170aa:	eb0a 0903 	add.w	r9, sl, r3
 80170ae:	68a3      	ldr	r3, [r4, #8]
 80170b0:	4607      	mov	r7, r0
 80170b2:	4616      	mov	r6, r2
 80170b4:	f109 0501 	add.w	r5, r9, #1
 80170b8:	42ab      	cmp	r3, r5
 80170ba:	db32      	blt.n	8017122 <__lshift+0x86>
 80170bc:	4638      	mov	r0, r7
 80170be:	f7ff fded 	bl	8016c9c <_Balloc>
 80170c2:	2300      	movs	r3, #0
 80170c4:	4680      	mov	r8, r0
 80170c6:	f100 0114 	add.w	r1, r0, #20
 80170ca:	461a      	mov	r2, r3
 80170cc:	4553      	cmp	r3, sl
 80170ce:	db2b      	blt.n	8017128 <__lshift+0x8c>
 80170d0:	6920      	ldr	r0, [r4, #16]
 80170d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80170d6:	f104 0314 	add.w	r3, r4, #20
 80170da:	f016 021f 	ands.w	r2, r6, #31
 80170de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80170e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80170e6:	d025      	beq.n	8017134 <__lshift+0x98>
 80170e8:	f1c2 0e20 	rsb	lr, r2, #32
 80170ec:	2000      	movs	r0, #0
 80170ee:	681e      	ldr	r6, [r3, #0]
 80170f0:	468a      	mov	sl, r1
 80170f2:	4096      	lsls	r6, r2
 80170f4:	4330      	orrs	r0, r6
 80170f6:	f84a 0b04 	str.w	r0, [sl], #4
 80170fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80170fe:	459c      	cmp	ip, r3
 8017100:	fa20 f00e 	lsr.w	r0, r0, lr
 8017104:	d814      	bhi.n	8017130 <__lshift+0x94>
 8017106:	6048      	str	r0, [r1, #4]
 8017108:	b108      	cbz	r0, 801710e <__lshift+0x72>
 801710a:	f109 0502 	add.w	r5, r9, #2
 801710e:	3d01      	subs	r5, #1
 8017110:	4638      	mov	r0, r7
 8017112:	f8c8 5010 	str.w	r5, [r8, #16]
 8017116:	4621      	mov	r1, r4
 8017118:	f7ff fdf4 	bl	8016d04 <_Bfree>
 801711c:	4640      	mov	r0, r8
 801711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017122:	3101      	adds	r1, #1
 8017124:	005b      	lsls	r3, r3, #1
 8017126:	e7c7      	b.n	80170b8 <__lshift+0x1c>
 8017128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801712c:	3301      	adds	r3, #1
 801712e:	e7cd      	b.n	80170cc <__lshift+0x30>
 8017130:	4651      	mov	r1, sl
 8017132:	e7dc      	b.n	80170ee <__lshift+0x52>
 8017134:	3904      	subs	r1, #4
 8017136:	f853 2b04 	ldr.w	r2, [r3], #4
 801713a:	f841 2f04 	str.w	r2, [r1, #4]!
 801713e:	459c      	cmp	ip, r3
 8017140:	d8f9      	bhi.n	8017136 <__lshift+0x9a>
 8017142:	e7e4      	b.n	801710e <__lshift+0x72>

08017144 <__mcmp>:
 8017144:	6903      	ldr	r3, [r0, #16]
 8017146:	690a      	ldr	r2, [r1, #16]
 8017148:	1a9b      	subs	r3, r3, r2
 801714a:	b530      	push	{r4, r5, lr}
 801714c:	d10c      	bne.n	8017168 <__mcmp+0x24>
 801714e:	0092      	lsls	r2, r2, #2
 8017150:	3014      	adds	r0, #20
 8017152:	3114      	adds	r1, #20
 8017154:	1884      	adds	r4, r0, r2
 8017156:	4411      	add	r1, r2
 8017158:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801715c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017160:	4295      	cmp	r5, r2
 8017162:	d003      	beq.n	801716c <__mcmp+0x28>
 8017164:	d305      	bcc.n	8017172 <__mcmp+0x2e>
 8017166:	2301      	movs	r3, #1
 8017168:	4618      	mov	r0, r3
 801716a:	bd30      	pop	{r4, r5, pc}
 801716c:	42a0      	cmp	r0, r4
 801716e:	d3f3      	bcc.n	8017158 <__mcmp+0x14>
 8017170:	e7fa      	b.n	8017168 <__mcmp+0x24>
 8017172:	f04f 33ff 	mov.w	r3, #4294967295
 8017176:	e7f7      	b.n	8017168 <__mcmp+0x24>

08017178 <__mdiff>:
 8017178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801717c:	460d      	mov	r5, r1
 801717e:	4607      	mov	r7, r0
 8017180:	4611      	mov	r1, r2
 8017182:	4628      	mov	r0, r5
 8017184:	4614      	mov	r4, r2
 8017186:	f7ff ffdd 	bl	8017144 <__mcmp>
 801718a:	1e06      	subs	r6, r0, #0
 801718c:	d108      	bne.n	80171a0 <__mdiff+0x28>
 801718e:	4631      	mov	r1, r6
 8017190:	4638      	mov	r0, r7
 8017192:	f7ff fd83 	bl	8016c9c <_Balloc>
 8017196:	2301      	movs	r3, #1
 8017198:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801719c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171a0:	bfa4      	itt	ge
 80171a2:	4623      	movge	r3, r4
 80171a4:	462c      	movge	r4, r5
 80171a6:	4638      	mov	r0, r7
 80171a8:	6861      	ldr	r1, [r4, #4]
 80171aa:	bfa6      	itte	ge
 80171ac:	461d      	movge	r5, r3
 80171ae:	2600      	movge	r6, #0
 80171b0:	2601      	movlt	r6, #1
 80171b2:	f7ff fd73 	bl	8016c9c <_Balloc>
 80171b6:	692b      	ldr	r3, [r5, #16]
 80171b8:	60c6      	str	r6, [r0, #12]
 80171ba:	6926      	ldr	r6, [r4, #16]
 80171bc:	f105 0914 	add.w	r9, r5, #20
 80171c0:	f104 0214 	add.w	r2, r4, #20
 80171c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80171c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80171cc:	f100 0514 	add.w	r5, r0, #20
 80171d0:	f04f 0e00 	mov.w	lr, #0
 80171d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80171d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80171dc:	fa1e f18a 	uxtah	r1, lr, sl
 80171e0:	b2a3      	uxth	r3, r4
 80171e2:	1ac9      	subs	r1, r1, r3
 80171e4:	0c23      	lsrs	r3, r4, #16
 80171e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80171ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80171ee:	b289      	uxth	r1, r1
 80171f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80171f4:	45c8      	cmp	r8, r9
 80171f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80171fa:	4694      	mov	ip, r2
 80171fc:	f845 3b04 	str.w	r3, [r5], #4
 8017200:	d8e8      	bhi.n	80171d4 <__mdiff+0x5c>
 8017202:	45bc      	cmp	ip, r7
 8017204:	d304      	bcc.n	8017210 <__mdiff+0x98>
 8017206:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801720a:	b183      	cbz	r3, 801722e <__mdiff+0xb6>
 801720c:	6106      	str	r6, [r0, #16]
 801720e:	e7c5      	b.n	801719c <__mdiff+0x24>
 8017210:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017214:	fa1e f381 	uxtah	r3, lr, r1
 8017218:	141a      	asrs	r2, r3, #16
 801721a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801721e:	b29b      	uxth	r3, r3
 8017220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017224:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017228:	f845 3b04 	str.w	r3, [r5], #4
 801722c:	e7e9      	b.n	8017202 <__mdiff+0x8a>
 801722e:	3e01      	subs	r6, #1
 8017230:	e7e9      	b.n	8017206 <__mdiff+0x8e>
	...

08017234 <__ulp>:
 8017234:	4b12      	ldr	r3, [pc, #72]	; (8017280 <__ulp+0x4c>)
 8017236:	ee10 2a90 	vmov	r2, s1
 801723a:	401a      	ands	r2, r3
 801723c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017240:	2b00      	cmp	r3, #0
 8017242:	dd04      	ble.n	801724e <__ulp+0x1a>
 8017244:	2000      	movs	r0, #0
 8017246:	4619      	mov	r1, r3
 8017248:	ec41 0b10 	vmov	d0, r0, r1
 801724c:	4770      	bx	lr
 801724e:	425b      	negs	r3, r3
 8017250:	151b      	asrs	r3, r3, #20
 8017252:	2b13      	cmp	r3, #19
 8017254:	f04f 0000 	mov.w	r0, #0
 8017258:	f04f 0100 	mov.w	r1, #0
 801725c:	dc04      	bgt.n	8017268 <__ulp+0x34>
 801725e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017262:	fa42 f103 	asr.w	r1, r2, r3
 8017266:	e7ef      	b.n	8017248 <__ulp+0x14>
 8017268:	3b14      	subs	r3, #20
 801726a:	2b1e      	cmp	r3, #30
 801726c:	f04f 0201 	mov.w	r2, #1
 8017270:	bfda      	itte	le
 8017272:	f1c3 031f 	rsble	r3, r3, #31
 8017276:	fa02 f303 	lslle.w	r3, r2, r3
 801727a:	4613      	movgt	r3, r2
 801727c:	4618      	mov	r0, r3
 801727e:	e7e3      	b.n	8017248 <__ulp+0x14>
 8017280:	7ff00000 	.word	0x7ff00000

08017284 <__b2d>:
 8017284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017286:	6905      	ldr	r5, [r0, #16]
 8017288:	f100 0714 	add.w	r7, r0, #20
 801728c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017290:	1f2e      	subs	r6, r5, #4
 8017292:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017296:	4620      	mov	r0, r4
 8017298:	f7ff fdc4 	bl	8016e24 <__hi0bits>
 801729c:	f1c0 0320 	rsb	r3, r0, #32
 80172a0:	280a      	cmp	r0, #10
 80172a2:	600b      	str	r3, [r1, #0]
 80172a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801731c <__b2d+0x98>
 80172a8:	dc14      	bgt.n	80172d4 <__b2d+0x50>
 80172aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80172ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80172b2:	42b7      	cmp	r7, r6
 80172b4:	ea41 030c 	orr.w	r3, r1, ip
 80172b8:	bf34      	ite	cc
 80172ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80172be:	2100      	movcs	r1, #0
 80172c0:	3015      	adds	r0, #21
 80172c2:	fa04 f000 	lsl.w	r0, r4, r0
 80172c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80172ca:	ea40 0201 	orr.w	r2, r0, r1
 80172ce:	ec43 2b10 	vmov	d0, r2, r3
 80172d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172d4:	42b7      	cmp	r7, r6
 80172d6:	bf3a      	itte	cc
 80172d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80172dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80172e0:	2100      	movcs	r1, #0
 80172e2:	380b      	subs	r0, #11
 80172e4:	d015      	beq.n	8017312 <__b2d+0x8e>
 80172e6:	4084      	lsls	r4, r0
 80172e8:	f1c0 0520 	rsb	r5, r0, #32
 80172ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80172f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80172f4:	42be      	cmp	r6, r7
 80172f6:	fa21 fc05 	lsr.w	ip, r1, r5
 80172fa:	ea44 030c 	orr.w	r3, r4, ip
 80172fe:	bf8c      	ite	hi
 8017300:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017304:	2400      	movls	r4, #0
 8017306:	fa01 f000 	lsl.w	r0, r1, r0
 801730a:	40ec      	lsrs	r4, r5
 801730c:	ea40 0204 	orr.w	r2, r0, r4
 8017310:	e7dd      	b.n	80172ce <__b2d+0x4a>
 8017312:	ea44 030c 	orr.w	r3, r4, ip
 8017316:	460a      	mov	r2, r1
 8017318:	e7d9      	b.n	80172ce <__b2d+0x4a>
 801731a:	bf00      	nop
 801731c:	3ff00000 	.word	0x3ff00000

08017320 <__d2b>:
 8017320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017324:	460e      	mov	r6, r1
 8017326:	2101      	movs	r1, #1
 8017328:	ec59 8b10 	vmov	r8, r9, d0
 801732c:	4615      	mov	r5, r2
 801732e:	f7ff fcb5 	bl	8016c9c <_Balloc>
 8017332:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017336:	4607      	mov	r7, r0
 8017338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801733c:	bb34      	cbnz	r4, 801738c <__d2b+0x6c>
 801733e:	9301      	str	r3, [sp, #4]
 8017340:	f1b8 0300 	subs.w	r3, r8, #0
 8017344:	d027      	beq.n	8017396 <__d2b+0x76>
 8017346:	a802      	add	r0, sp, #8
 8017348:	f840 3d08 	str.w	r3, [r0, #-8]!
 801734c:	f7ff fd89 	bl	8016e62 <__lo0bits>
 8017350:	9900      	ldr	r1, [sp, #0]
 8017352:	b1f0      	cbz	r0, 8017392 <__d2b+0x72>
 8017354:	9a01      	ldr	r2, [sp, #4]
 8017356:	f1c0 0320 	rsb	r3, r0, #32
 801735a:	fa02 f303 	lsl.w	r3, r2, r3
 801735e:	430b      	orrs	r3, r1
 8017360:	40c2      	lsrs	r2, r0
 8017362:	617b      	str	r3, [r7, #20]
 8017364:	9201      	str	r2, [sp, #4]
 8017366:	9b01      	ldr	r3, [sp, #4]
 8017368:	61bb      	str	r3, [r7, #24]
 801736a:	2b00      	cmp	r3, #0
 801736c:	bf14      	ite	ne
 801736e:	2102      	movne	r1, #2
 8017370:	2101      	moveq	r1, #1
 8017372:	6139      	str	r1, [r7, #16]
 8017374:	b1c4      	cbz	r4, 80173a8 <__d2b+0x88>
 8017376:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801737a:	4404      	add	r4, r0
 801737c:	6034      	str	r4, [r6, #0]
 801737e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017382:	6028      	str	r0, [r5, #0]
 8017384:	4638      	mov	r0, r7
 8017386:	b003      	add	sp, #12
 8017388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801738c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017390:	e7d5      	b.n	801733e <__d2b+0x1e>
 8017392:	6179      	str	r1, [r7, #20]
 8017394:	e7e7      	b.n	8017366 <__d2b+0x46>
 8017396:	a801      	add	r0, sp, #4
 8017398:	f7ff fd63 	bl	8016e62 <__lo0bits>
 801739c:	9b01      	ldr	r3, [sp, #4]
 801739e:	617b      	str	r3, [r7, #20]
 80173a0:	2101      	movs	r1, #1
 80173a2:	6139      	str	r1, [r7, #16]
 80173a4:	3020      	adds	r0, #32
 80173a6:	e7e5      	b.n	8017374 <__d2b+0x54>
 80173a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80173ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80173b0:	6030      	str	r0, [r6, #0]
 80173b2:	6918      	ldr	r0, [r3, #16]
 80173b4:	f7ff fd36 	bl	8016e24 <__hi0bits>
 80173b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80173bc:	e7e1      	b.n	8017382 <__d2b+0x62>

080173be <__ratio>:
 80173be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173c2:	4688      	mov	r8, r1
 80173c4:	4669      	mov	r1, sp
 80173c6:	4681      	mov	r9, r0
 80173c8:	f7ff ff5c 	bl	8017284 <__b2d>
 80173cc:	a901      	add	r1, sp, #4
 80173ce:	4640      	mov	r0, r8
 80173d0:	ec57 6b10 	vmov	r6, r7, d0
 80173d4:	f7ff ff56 	bl	8017284 <__b2d>
 80173d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80173dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80173e0:	eba3 0c02 	sub.w	ip, r3, r2
 80173e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80173e8:	1a9b      	subs	r3, r3, r2
 80173ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80173ee:	ec5b ab10 	vmov	sl, fp, d0
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	bfce      	itee	gt
 80173f6:	463a      	movgt	r2, r7
 80173f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80173fc:	465a      	movle	r2, fp
 80173fe:	4659      	mov	r1, fp
 8017400:	463d      	mov	r5, r7
 8017402:	bfd4      	ite	le
 8017404:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017408:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801740c:	4630      	mov	r0, r6
 801740e:	ee10 2a10 	vmov	r2, s0
 8017412:	460b      	mov	r3, r1
 8017414:	4629      	mov	r1, r5
 8017416:	f7e9 fa31 	bl	800087c <__aeabi_ddiv>
 801741a:	ec41 0b10 	vmov	d0, r0, r1
 801741e:	b003      	add	sp, #12
 8017420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017424 <__copybits>:
 8017424:	3901      	subs	r1, #1
 8017426:	b510      	push	{r4, lr}
 8017428:	1149      	asrs	r1, r1, #5
 801742a:	6914      	ldr	r4, [r2, #16]
 801742c:	3101      	adds	r1, #1
 801742e:	f102 0314 	add.w	r3, r2, #20
 8017432:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017436:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801743a:	42a3      	cmp	r3, r4
 801743c:	4602      	mov	r2, r0
 801743e:	d303      	bcc.n	8017448 <__copybits+0x24>
 8017440:	2300      	movs	r3, #0
 8017442:	428a      	cmp	r2, r1
 8017444:	d305      	bcc.n	8017452 <__copybits+0x2e>
 8017446:	bd10      	pop	{r4, pc}
 8017448:	f853 2b04 	ldr.w	r2, [r3], #4
 801744c:	f840 2b04 	str.w	r2, [r0], #4
 8017450:	e7f3      	b.n	801743a <__copybits+0x16>
 8017452:	f842 3b04 	str.w	r3, [r2], #4
 8017456:	e7f4      	b.n	8017442 <__copybits+0x1e>

08017458 <__any_on>:
 8017458:	f100 0214 	add.w	r2, r0, #20
 801745c:	6900      	ldr	r0, [r0, #16]
 801745e:	114b      	asrs	r3, r1, #5
 8017460:	4298      	cmp	r0, r3
 8017462:	b510      	push	{r4, lr}
 8017464:	db11      	blt.n	801748a <__any_on+0x32>
 8017466:	dd0a      	ble.n	801747e <__any_on+0x26>
 8017468:	f011 011f 	ands.w	r1, r1, #31
 801746c:	d007      	beq.n	801747e <__any_on+0x26>
 801746e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017472:	fa24 f001 	lsr.w	r0, r4, r1
 8017476:	fa00 f101 	lsl.w	r1, r0, r1
 801747a:	428c      	cmp	r4, r1
 801747c:	d10b      	bne.n	8017496 <__any_on+0x3e>
 801747e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017482:	4293      	cmp	r3, r2
 8017484:	d803      	bhi.n	801748e <__any_on+0x36>
 8017486:	2000      	movs	r0, #0
 8017488:	bd10      	pop	{r4, pc}
 801748a:	4603      	mov	r3, r0
 801748c:	e7f7      	b.n	801747e <__any_on+0x26>
 801748e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017492:	2900      	cmp	r1, #0
 8017494:	d0f5      	beq.n	8017482 <__any_on+0x2a>
 8017496:	2001      	movs	r0, #1
 8017498:	e7f6      	b.n	8017488 <__any_on+0x30>

0801749a <_calloc_r>:
 801749a:	b538      	push	{r3, r4, r5, lr}
 801749c:	fb02 f401 	mul.w	r4, r2, r1
 80174a0:	4621      	mov	r1, r4
 80174a2:	f000 f857 	bl	8017554 <_malloc_r>
 80174a6:	4605      	mov	r5, r0
 80174a8:	b118      	cbz	r0, 80174b2 <_calloc_r+0x18>
 80174aa:	4622      	mov	r2, r4
 80174ac:	2100      	movs	r1, #0
 80174ae:	f7fc fcaa 	bl	8013e06 <memset>
 80174b2:	4628      	mov	r0, r5
 80174b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080174b8 <_free_r>:
 80174b8:	b538      	push	{r3, r4, r5, lr}
 80174ba:	4605      	mov	r5, r0
 80174bc:	2900      	cmp	r1, #0
 80174be:	d045      	beq.n	801754c <_free_r+0x94>
 80174c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174c4:	1f0c      	subs	r4, r1, #4
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	bfb8      	it	lt
 80174ca:	18e4      	addlt	r4, r4, r3
 80174cc:	f000 fe30 	bl	8018130 <__malloc_lock>
 80174d0:	4a1f      	ldr	r2, [pc, #124]	; (8017550 <_free_r+0x98>)
 80174d2:	6813      	ldr	r3, [r2, #0]
 80174d4:	4610      	mov	r0, r2
 80174d6:	b933      	cbnz	r3, 80174e6 <_free_r+0x2e>
 80174d8:	6063      	str	r3, [r4, #4]
 80174da:	6014      	str	r4, [r2, #0]
 80174dc:	4628      	mov	r0, r5
 80174de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80174e2:	f000 be26 	b.w	8018132 <__malloc_unlock>
 80174e6:	42a3      	cmp	r3, r4
 80174e8:	d90c      	bls.n	8017504 <_free_r+0x4c>
 80174ea:	6821      	ldr	r1, [r4, #0]
 80174ec:	1862      	adds	r2, r4, r1
 80174ee:	4293      	cmp	r3, r2
 80174f0:	bf04      	itt	eq
 80174f2:	681a      	ldreq	r2, [r3, #0]
 80174f4:	685b      	ldreq	r3, [r3, #4]
 80174f6:	6063      	str	r3, [r4, #4]
 80174f8:	bf04      	itt	eq
 80174fa:	1852      	addeq	r2, r2, r1
 80174fc:	6022      	streq	r2, [r4, #0]
 80174fe:	6004      	str	r4, [r0, #0]
 8017500:	e7ec      	b.n	80174dc <_free_r+0x24>
 8017502:	4613      	mov	r3, r2
 8017504:	685a      	ldr	r2, [r3, #4]
 8017506:	b10a      	cbz	r2, 801750c <_free_r+0x54>
 8017508:	42a2      	cmp	r2, r4
 801750a:	d9fa      	bls.n	8017502 <_free_r+0x4a>
 801750c:	6819      	ldr	r1, [r3, #0]
 801750e:	1858      	adds	r0, r3, r1
 8017510:	42a0      	cmp	r0, r4
 8017512:	d10b      	bne.n	801752c <_free_r+0x74>
 8017514:	6820      	ldr	r0, [r4, #0]
 8017516:	4401      	add	r1, r0
 8017518:	1858      	adds	r0, r3, r1
 801751a:	4282      	cmp	r2, r0
 801751c:	6019      	str	r1, [r3, #0]
 801751e:	d1dd      	bne.n	80174dc <_free_r+0x24>
 8017520:	6810      	ldr	r0, [r2, #0]
 8017522:	6852      	ldr	r2, [r2, #4]
 8017524:	605a      	str	r2, [r3, #4]
 8017526:	4401      	add	r1, r0
 8017528:	6019      	str	r1, [r3, #0]
 801752a:	e7d7      	b.n	80174dc <_free_r+0x24>
 801752c:	d902      	bls.n	8017534 <_free_r+0x7c>
 801752e:	230c      	movs	r3, #12
 8017530:	602b      	str	r3, [r5, #0]
 8017532:	e7d3      	b.n	80174dc <_free_r+0x24>
 8017534:	6820      	ldr	r0, [r4, #0]
 8017536:	1821      	adds	r1, r4, r0
 8017538:	428a      	cmp	r2, r1
 801753a:	bf04      	itt	eq
 801753c:	6811      	ldreq	r1, [r2, #0]
 801753e:	6852      	ldreq	r2, [r2, #4]
 8017540:	6062      	str	r2, [r4, #4]
 8017542:	bf04      	itt	eq
 8017544:	1809      	addeq	r1, r1, r0
 8017546:	6021      	streq	r1, [r4, #0]
 8017548:	605c      	str	r4, [r3, #4]
 801754a:	e7c7      	b.n	80174dc <_free_r+0x24>
 801754c:	bd38      	pop	{r3, r4, r5, pc}
 801754e:	bf00      	nop
 8017550:	2003c494 	.word	0x2003c494

08017554 <_malloc_r>:
 8017554:	b570      	push	{r4, r5, r6, lr}
 8017556:	1ccd      	adds	r5, r1, #3
 8017558:	f025 0503 	bic.w	r5, r5, #3
 801755c:	3508      	adds	r5, #8
 801755e:	2d0c      	cmp	r5, #12
 8017560:	bf38      	it	cc
 8017562:	250c      	movcc	r5, #12
 8017564:	2d00      	cmp	r5, #0
 8017566:	4606      	mov	r6, r0
 8017568:	db01      	blt.n	801756e <_malloc_r+0x1a>
 801756a:	42a9      	cmp	r1, r5
 801756c:	d903      	bls.n	8017576 <_malloc_r+0x22>
 801756e:	230c      	movs	r3, #12
 8017570:	6033      	str	r3, [r6, #0]
 8017572:	2000      	movs	r0, #0
 8017574:	bd70      	pop	{r4, r5, r6, pc}
 8017576:	f000 fddb 	bl	8018130 <__malloc_lock>
 801757a:	4a21      	ldr	r2, [pc, #132]	; (8017600 <_malloc_r+0xac>)
 801757c:	6814      	ldr	r4, [r2, #0]
 801757e:	4621      	mov	r1, r4
 8017580:	b991      	cbnz	r1, 80175a8 <_malloc_r+0x54>
 8017582:	4c20      	ldr	r4, [pc, #128]	; (8017604 <_malloc_r+0xb0>)
 8017584:	6823      	ldr	r3, [r4, #0]
 8017586:	b91b      	cbnz	r3, 8017590 <_malloc_r+0x3c>
 8017588:	4630      	mov	r0, r6
 801758a:	f000 fc91 	bl	8017eb0 <_sbrk_r>
 801758e:	6020      	str	r0, [r4, #0]
 8017590:	4629      	mov	r1, r5
 8017592:	4630      	mov	r0, r6
 8017594:	f000 fc8c 	bl	8017eb0 <_sbrk_r>
 8017598:	1c43      	adds	r3, r0, #1
 801759a:	d124      	bne.n	80175e6 <_malloc_r+0x92>
 801759c:	230c      	movs	r3, #12
 801759e:	6033      	str	r3, [r6, #0]
 80175a0:	4630      	mov	r0, r6
 80175a2:	f000 fdc6 	bl	8018132 <__malloc_unlock>
 80175a6:	e7e4      	b.n	8017572 <_malloc_r+0x1e>
 80175a8:	680b      	ldr	r3, [r1, #0]
 80175aa:	1b5b      	subs	r3, r3, r5
 80175ac:	d418      	bmi.n	80175e0 <_malloc_r+0x8c>
 80175ae:	2b0b      	cmp	r3, #11
 80175b0:	d90f      	bls.n	80175d2 <_malloc_r+0x7e>
 80175b2:	600b      	str	r3, [r1, #0]
 80175b4:	50cd      	str	r5, [r1, r3]
 80175b6:	18cc      	adds	r4, r1, r3
 80175b8:	4630      	mov	r0, r6
 80175ba:	f000 fdba 	bl	8018132 <__malloc_unlock>
 80175be:	f104 000b 	add.w	r0, r4, #11
 80175c2:	1d23      	adds	r3, r4, #4
 80175c4:	f020 0007 	bic.w	r0, r0, #7
 80175c8:	1ac3      	subs	r3, r0, r3
 80175ca:	d0d3      	beq.n	8017574 <_malloc_r+0x20>
 80175cc:	425a      	negs	r2, r3
 80175ce:	50e2      	str	r2, [r4, r3]
 80175d0:	e7d0      	b.n	8017574 <_malloc_r+0x20>
 80175d2:	428c      	cmp	r4, r1
 80175d4:	684b      	ldr	r3, [r1, #4]
 80175d6:	bf16      	itet	ne
 80175d8:	6063      	strne	r3, [r4, #4]
 80175da:	6013      	streq	r3, [r2, #0]
 80175dc:	460c      	movne	r4, r1
 80175de:	e7eb      	b.n	80175b8 <_malloc_r+0x64>
 80175e0:	460c      	mov	r4, r1
 80175e2:	6849      	ldr	r1, [r1, #4]
 80175e4:	e7cc      	b.n	8017580 <_malloc_r+0x2c>
 80175e6:	1cc4      	adds	r4, r0, #3
 80175e8:	f024 0403 	bic.w	r4, r4, #3
 80175ec:	42a0      	cmp	r0, r4
 80175ee:	d005      	beq.n	80175fc <_malloc_r+0xa8>
 80175f0:	1a21      	subs	r1, r4, r0
 80175f2:	4630      	mov	r0, r6
 80175f4:	f000 fc5c 	bl	8017eb0 <_sbrk_r>
 80175f8:	3001      	adds	r0, #1
 80175fa:	d0cf      	beq.n	801759c <_malloc_r+0x48>
 80175fc:	6025      	str	r5, [r4, #0]
 80175fe:	e7db      	b.n	80175b8 <_malloc_r+0x64>
 8017600:	2003c494 	.word	0x2003c494
 8017604:	2003c498 	.word	0x2003c498

08017608 <__ssputs_r>:
 8017608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801760c:	688e      	ldr	r6, [r1, #8]
 801760e:	429e      	cmp	r6, r3
 8017610:	4682      	mov	sl, r0
 8017612:	460c      	mov	r4, r1
 8017614:	4690      	mov	r8, r2
 8017616:	4699      	mov	r9, r3
 8017618:	d837      	bhi.n	801768a <__ssputs_r+0x82>
 801761a:	898a      	ldrh	r2, [r1, #12]
 801761c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017620:	d031      	beq.n	8017686 <__ssputs_r+0x7e>
 8017622:	6825      	ldr	r5, [r4, #0]
 8017624:	6909      	ldr	r1, [r1, #16]
 8017626:	1a6f      	subs	r7, r5, r1
 8017628:	6965      	ldr	r5, [r4, #20]
 801762a:	2302      	movs	r3, #2
 801762c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017630:	fb95 f5f3 	sdiv	r5, r5, r3
 8017634:	f109 0301 	add.w	r3, r9, #1
 8017638:	443b      	add	r3, r7
 801763a:	429d      	cmp	r5, r3
 801763c:	bf38      	it	cc
 801763e:	461d      	movcc	r5, r3
 8017640:	0553      	lsls	r3, r2, #21
 8017642:	d530      	bpl.n	80176a6 <__ssputs_r+0x9e>
 8017644:	4629      	mov	r1, r5
 8017646:	f7ff ff85 	bl	8017554 <_malloc_r>
 801764a:	4606      	mov	r6, r0
 801764c:	b950      	cbnz	r0, 8017664 <__ssputs_r+0x5c>
 801764e:	230c      	movs	r3, #12
 8017650:	f8ca 3000 	str.w	r3, [sl]
 8017654:	89a3      	ldrh	r3, [r4, #12]
 8017656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801765a:	81a3      	strh	r3, [r4, #12]
 801765c:	f04f 30ff 	mov.w	r0, #4294967295
 8017660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017664:	463a      	mov	r2, r7
 8017666:	6921      	ldr	r1, [r4, #16]
 8017668:	f7fc fbc2 	bl	8013df0 <memcpy>
 801766c:	89a3      	ldrh	r3, [r4, #12]
 801766e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017676:	81a3      	strh	r3, [r4, #12]
 8017678:	6126      	str	r6, [r4, #16]
 801767a:	6165      	str	r5, [r4, #20]
 801767c:	443e      	add	r6, r7
 801767e:	1bed      	subs	r5, r5, r7
 8017680:	6026      	str	r6, [r4, #0]
 8017682:	60a5      	str	r5, [r4, #8]
 8017684:	464e      	mov	r6, r9
 8017686:	454e      	cmp	r6, r9
 8017688:	d900      	bls.n	801768c <__ssputs_r+0x84>
 801768a:	464e      	mov	r6, r9
 801768c:	4632      	mov	r2, r6
 801768e:	4641      	mov	r1, r8
 8017690:	6820      	ldr	r0, [r4, #0]
 8017692:	f000 fd34 	bl	80180fe <memmove>
 8017696:	68a3      	ldr	r3, [r4, #8]
 8017698:	1b9b      	subs	r3, r3, r6
 801769a:	60a3      	str	r3, [r4, #8]
 801769c:	6823      	ldr	r3, [r4, #0]
 801769e:	441e      	add	r6, r3
 80176a0:	6026      	str	r6, [r4, #0]
 80176a2:	2000      	movs	r0, #0
 80176a4:	e7dc      	b.n	8017660 <__ssputs_r+0x58>
 80176a6:	462a      	mov	r2, r5
 80176a8:	f000 fd44 	bl	8018134 <_realloc_r>
 80176ac:	4606      	mov	r6, r0
 80176ae:	2800      	cmp	r0, #0
 80176b0:	d1e2      	bne.n	8017678 <__ssputs_r+0x70>
 80176b2:	6921      	ldr	r1, [r4, #16]
 80176b4:	4650      	mov	r0, sl
 80176b6:	f7ff feff 	bl	80174b8 <_free_r>
 80176ba:	e7c8      	b.n	801764e <__ssputs_r+0x46>

080176bc <_svfiprintf_r>:
 80176bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176c0:	461d      	mov	r5, r3
 80176c2:	898b      	ldrh	r3, [r1, #12]
 80176c4:	061f      	lsls	r7, r3, #24
 80176c6:	b09d      	sub	sp, #116	; 0x74
 80176c8:	4680      	mov	r8, r0
 80176ca:	460c      	mov	r4, r1
 80176cc:	4616      	mov	r6, r2
 80176ce:	d50f      	bpl.n	80176f0 <_svfiprintf_r+0x34>
 80176d0:	690b      	ldr	r3, [r1, #16]
 80176d2:	b96b      	cbnz	r3, 80176f0 <_svfiprintf_r+0x34>
 80176d4:	2140      	movs	r1, #64	; 0x40
 80176d6:	f7ff ff3d 	bl	8017554 <_malloc_r>
 80176da:	6020      	str	r0, [r4, #0]
 80176dc:	6120      	str	r0, [r4, #16]
 80176de:	b928      	cbnz	r0, 80176ec <_svfiprintf_r+0x30>
 80176e0:	230c      	movs	r3, #12
 80176e2:	f8c8 3000 	str.w	r3, [r8]
 80176e6:	f04f 30ff 	mov.w	r0, #4294967295
 80176ea:	e0c8      	b.n	801787e <_svfiprintf_r+0x1c2>
 80176ec:	2340      	movs	r3, #64	; 0x40
 80176ee:	6163      	str	r3, [r4, #20]
 80176f0:	2300      	movs	r3, #0
 80176f2:	9309      	str	r3, [sp, #36]	; 0x24
 80176f4:	2320      	movs	r3, #32
 80176f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176fa:	2330      	movs	r3, #48	; 0x30
 80176fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017700:	9503      	str	r5, [sp, #12]
 8017702:	f04f 0b01 	mov.w	fp, #1
 8017706:	4637      	mov	r7, r6
 8017708:	463d      	mov	r5, r7
 801770a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801770e:	b10b      	cbz	r3, 8017714 <_svfiprintf_r+0x58>
 8017710:	2b25      	cmp	r3, #37	; 0x25
 8017712:	d13e      	bne.n	8017792 <_svfiprintf_r+0xd6>
 8017714:	ebb7 0a06 	subs.w	sl, r7, r6
 8017718:	d00b      	beq.n	8017732 <_svfiprintf_r+0x76>
 801771a:	4653      	mov	r3, sl
 801771c:	4632      	mov	r2, r6
 801771e:	4621      	mov	r1, r4
 8017720:	4640      	mov	r0, r8
 8017722:	f7ff ff71 	bl	8017608 <__ssputs_r>
 8017726:	3001      	adds	r0, #1
 8017728:	f000 80a4 	beq.w	8017874 <_svfiprintf_r+0x1b8>
 801772c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801772e:	4453      	add	r3, sl
 8017730:	9309      	str	r3, [sp, #36]	; 0x24
 8017732:	783b      	ldrb	r3, [r7, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	f000 809d 	beq.w	8017874 <_svfiprintf_r+0x1b8>
 801773a:	2300      	movs	r3, #0
 801773c:	f04f 32ff 	mov.w	r2, #4294967295
 8017740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017744:	9304      	str	r3, [sp, #16]
 8017746:	9307      	str	r3, [sp, #28]
 8017748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801774c:	931a      	str	r3, [sp, #104]	; 0x68
 801774e:	462f      	mov	r7, r5
 8017750:	2205      	movs	r2, #5
 8017752:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017756:	4850      	ldr	r0, [pc, #320]	; (8017898 <_svfiprintf_r+0x1dc>)
 8017758:	f7e8 fd5a 	bl	8000210 <memchr>
 801775c:	9b04      	ldr	r3, [sp, #16]
 801775e:	b9d0      	cbnz	r0, 8017796 <_svfiprintf_r+0xda>
 8017760:	06d9      	lsls	r1, r3, #27
 8017762:	bf44      	itt	mi
 8017764:	2220      	movmi	r2, #32
 8017766:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801776a:	071a      	lsls	r2, r3, #28
 801776c:	bf44      	itt	mi
 801776e:	222b      	movmi	r2, #43	; 0x2b
 8017770:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017774:	782a      	ldrb	r2, [r5, #0]
 8017776:	2a2a      	cmp	r2, #42	; 0x2a
 8017778:	d015      	beq.n	80177a6 <_svfiprintf_r+0xea>
 801777a:	9a07      	ldr	r2, [sp, #28]
 801777c:	462f      	mov	r7, r5
 801777e:	2000      	movs	r0, #0
 8017780:	250a      	movs	r5, #10
 8017782:	4639      	mov	r1, r7
 8017784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017788:	3b30      	subs	r3, #48	; 0x30
 801778a:	2b09      	cmp	r3, #9
 801778c:	d94d      	bls.n	801782a <_svfiprintf_r+0x16e>
 801778e:	b1b8      	cbz	r0, 80177c0 <_svfiprintf_r+0x104>
 8017790:	e00f      	b.n	80177b2 <_svfiprintf_r+0xf6>
 8017792:	462f      	mov	r7, r5
 8017794:	e7b8      	b.n	8017708 <_svfiprintf_r+0x4c>
 8017796:	4a40      	ldr	r2, [pc, #256]	; (8017898 <_svfiprintf_r+0x1dc>)
 8017798:	1a80      	subs	r0, r0, r2
 801779a:	fa0b f000 	lsl.w	r0, fp, r0
 801779e:	4318      	orrs	r0, r3
 80177a0:	9004      	str	r0, [sp, #16]
 80177a2:	463d      	mov	r5, r7
 80177a4:	e7d3      	b.n	801774e <_svfiprintf_r+0x92>
 80177a6:	9a03      	ldr	r2, [sp, #12]
 80177a8:	1d11      	adds	r1, r2, #4
 80177aa:	6812      	ldr	r2, [r2, #0]
 80177ac:	9103      	str	r1, [sp, #12]
 80177ae:	2a00      	cmp	r2, #0
 80177b0:	db01      	blt.n	80177b6 <_svfiprintf_r+0xfa>
 80177b2:	9207      	str	r2, [sp, #28]
 80177b4:	e004      	b.n	80177c0 <_svfiprintf_r+0x104>
 80177b6:	4252      	negs	r2, r2
 80177b8:	f043 0302 	orr.w	r3, r3, #2
 80177bc:	9207      	str	r2, [sp, #28]
 80177be:	9304      	str	r3, [sp, #16]
 80177c0:	783b      	ldrb	r3, [r7, #0]
 80177c2:	2b2e      	cmp	r3, #46	; 0x2e
 80177c4:	d10c      	bne.n	80177e0 <_svfiprintf_r+0x124>
 80177c6:	787b      	ldrb	r3, [r7, #1]
 80177c8:	2b2a      	cmp	r3, #42	; 0x2a
 80177ca:	d133      	bne.n	8017834 <_svfiprintf_r+0x178>
 80177cc:	9b03      	ldr	r3, [sp, #12]
 80177ce:	1d1a      	adds	r2, r3, #4
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	9203      	str	r2, [sp, #12]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	bfb8      	it	lt
 80177d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80177dc:	3702      	adds	r7, #2
 80177de:	9305      	str	r3, [sp, #20]
 80177e0:	4d2e      	ldr	r5, [pc, #184]	; (801789c <_svfiprintf_r+0x1e0>)
 80177e2:	7839      	ldrb	r1, [r7, #0]
 80177e4:	2203      	movs	r2, #3
 80177e6:	4628      	mov	r0, r5
 80177e8:	f7e8 fd12 	bl	8000210 <memchr>
 80177ec:	b138      	cbz	r0, 80177fe <_svfiprintf_r+0x142>
 80177ee:	2340      	movs	r3, #64	; 0x40
 80177f0:	1b40      	subs	r0, r0, r5
 80177f2:	fa03 f000 	lsl.w	r0, r3, r0
 80177f6:	9b04      	ldr	r3, [sp, #16]
 80177f8:	4303      	orrs	r3, r0
 80177fa:	3701      	adds	r7, #1
 80177fc:	9304      	str	r3, [sp, #16]
 80177fe:	7839      	ldrb	r1, [r7, #0]
 8017800:	4827      	ldr	r0, [pc, #156]	; (80178a0 <_svfiprintf_r+0x1e4>)
 8017802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017806:	2206      	movs	r2, #6
 8017808:	1c7e      	adds	r6, r7, #1
 801780a:	f7e8 fd01 	bl	8000210 <memchr>
 801780e:	2800      	cmp	r0, #0
 8017810:	d038      	beq.n	8017884 <_svfiprintf_r+0x1c8>
 8017812:	4b24      	ldr	r3, [pc, #144]	; (80178a4 <_svfiprintf_r+0x1e8>)
 8017814:	bb13      	cbnz	r3, 801785c <_svfiprintf_r+0x1a0>
 8017816:	9b03      	ldr	r3, [sp, #12]
 8017818:	3307      	adds	r3, #7
 801781a:	f023 0307 	bic.w	r3, r3, #7
 801781e:	3308      	adds	r3, #8
 8017820:	9303      	str	r3, [sp, #12]
 8017822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017824:	444b      	add	r3, r9
 8017826:	9309      	str	r3, [sp, #36]	; 0x24
 8017828:	e76d      	b.n	8017706 <_svfiprintf_r+0x4a>
 801782a:	fb05 3202 	mla	r2, r5, r2, r3
 801782e:	2001      	movs	r0, #1
 8017830:	460f      	mov	r7, r1
 8017832:	e7a6      	b.n	8017782 <_svfiprintf_r+0xc6>
 8017834:	2300      	movs	r3, #0
 8017836:	3701      	adds	r7, #1
 8017838:	9305      	str	r3, [sp, #20]
 801783a:	4619      	mov	r1, r3
 801783c:	250a      	movs	r5, #10
 801783e:	4638      	mov	r0, r7
 8017840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017844:	3a30      	subs	r2, #48	; 0x30
 8017846:	2a09      	cmp	r2, #9
 8017848:	d903      	bls.n	8017852 <_svfiprintf_r+0x196>
 801784a:	2b00      	cmp	r3, #0
 801784c:	d0c8      	beq.n	80177e0 <_svfiprintf_r+0x124>
 801784e:	9105      	str	r1, [sp, #20]
 8017850:	e7c6      	b.n	80177e0 <_svfiprintf_r+0x124>
 8017852:	fb05 2101 	mla	r1, r5, r1, r2
 8017856:	2301      	movs	r3, #1
 8017858:	4607      	mov	r7, r0
 801785a:	e7f0      	b.n	801783e <_svfiprintf_r+0x182>
 801785c:	ab03      	add	r3, sp, #12
 801785e:	9300      	str	r3, [sp, #0]
 8017860:	4622      	mov	r2, r4
 8017862:	4b11      	ldr	r3, [pc, #68]	; (80178a8 <_svfiprintf_r+0x1ec>)
 8017864:	a904      	add	r1, sp, #16
 8017866:	4640      	mov	r0, r8
 8017868:	f7fc fb6a 	bl	8013f40 <_printf_float>
 801786c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017870:	4681      	mov	r9, r0
 8017872:	d1d6      	bne.n	8017822 <_svfiprintf_r+0x166>
 8017874:	89a3      	ldrh	r3, [r4, #12]
 8017876:	065b      	lsls	r3, r3, #25
 8017878:	f53f af35 	bmi.w	80176e6 <_svfiprintf_r+0x2a>
 801787c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801787e:	b01d      	add	sp, #116	; 0x74
 8017880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017884:	ab03      	add	r3, sp, #12
 8017886:	9300      	str	r3, [sp, #0]
 8017888:	4622      	mov	r2, r4
 801788a:	4b07      	ldr	r3, [pc, #28]	; (80178a8 <_svfiprintf_r+0x1ec>)
 801788c:	a904      	add	r1, sp, #16
 801788e:	4640      	mov	r0, r8
 8017890:	f7fc fe0c 	bl	80144ac <_printf_i>
 8017894:	e7ea      	b.n	801786c <_svfiprintf_r+0x1b0>
 8017896:	bf00      	nop
 8017898:	08018bbc 	.word	0x08018bbc
 801789c:	08018bc2 	.word	0x08018bc2
 80178a0:	08018bc6 	.word	0x08018bc6
 80178a4:	08013f41 	.word	0x08013f41
 80178a8:	08017609 	.word	0x08017609

080178ac <_sungetc_r>:
 80178ac:	b538      	push	{r3, r4, r5, lr}
 80178ae:	1c4b      	adds	r3, r1, #1
 80178b0:	4614      	mov	r4, r2
 80178b2:	d103      	bne.n	80178bc <_sungetc_r+0x10>
 80178b4:	f04f 35ff 	mov.w	r5, #4294967295
 80178b8:	4628      	mov	r0, r5
 80178ba:	bd38      	pop	{r3, r4, r5, pc}
 80178bc:	8993      	ldrh	r3, [r2, #12]
 80178be:	f023 0320 	bic.w	r3, r3, #32
 80178c2:	8193      	strh	r3, [r2, #12]
 80178c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80178c6:	6852      	ldr	r2, [r2, #4]
 80178c8:	b2cd      	uxtb	r5, r1
 80178ca:	b18b      	cbz	r3, 80178f0 <_sungetc_r+0x44>
 80178cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80178ce:	4293      	cmp	r3, r2
 80178d0:	dd08      	ble.n	80178e4 <_sungetc_r+0x38>
 80178d2:	6823      	ldr	r3, [r4, #0]
 80178d4:	1e5a      	subs	r2, r3, #1
 80178d6:	6022      	str	r2, [r4, #0]
 80178d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80178dc:	6863      	ldr	r3, [r4, #4]
 80178de:	3301      	adds	r3, #1
 80178e0:	6063      	str	r3, [r4, #4]
 80178e2:	e7e9      	b.n	80178b8 <_sungetc_r+0xc>
 80178e4:	4621      	mov	r1, r4
 80178e6:	f000 fbc3 	bl	8018070 <__submore>
 80178ea:	2800      	cmp	r0, #0
 80178ec:	d0f1      	beq.n	80178d2 <_sungetc_r+0x26>
 80178ee:	e7e1      	b.n	80178b4 <_sungetc_r+0x8>
 80178f0:	6921      	ldr	r1, [r4, #16]
 80178f2:	6823      	ldr	r3, [r4, #0]
 80178f4:	b151      	cbz	r1, 801790c <_sungetc_r+0x60>
 80178f6:	4299      	cmp	r1, r3
 80178f8:	d208      	bcs.n	801790c <_sungetc_r+0x60>
 80178fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80178fe:	42a9      	cmp	r1, r5
 8017900:	d104      	bne.n	801790c <_sungetc_r+0x60>
 8017902:	3b01      	subs	r3, #1
 8017904:	3201      	adds	r2, #1
 8017906:	6023      	str	r3, [r4, #0]
 8017908:	6062      	str	r2, [r4, #4]
 801790a:	e7d5      	b.n	80178b8 <_sungetc_r+0xc>
 801790c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017914:	6363      	str	r3, [r4, #52]	; 0x34
 8017916:	2303      	movs	r3, #3
 8017918:	63a3      	str	r3, [r4, #56]	; 0x38
 801791a:	4623      	mov	r3, r4
 801791c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017920:	6023      	str	r3, [r4, #0]
 8017922:	2301      	movs	r3, #1
 8017924:	e7dc      	b.n	80178e0 <_sungetc_r+0x34>

08017926 <__ssrefill_r>:
 8017926:	b510      	push	{r4, lr}
 8017928:	460c      	mov	r4, r1
 801792a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801792c:	b169      	cbz	r1, 801794a <__ssrefill_r+0x24>
 801792e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017932:	4299      	cmp	r1, r3
 8017934:	d001      	beq.n	801793a <__ssrefill_r+0x14>
 8017936:	f7ff fdbf 	bl	80174b8 <_free_r>
 801793a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801793c:	6063      	str	r3, [r4, #4]
 801793e:	2000      	movs	r0, #0
 8017940:	6360      	str	r0, [r4, #52]	; 0x34
 8017942:	b113      	cbz	r3, 801794a <__ssrefill_r+0x24>
 8017944:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017946:	6023      	str	r3, [r4, #0]
 8017948:	bd10      	pop	{r4, pc}
 801794a:	6923      	ldr	r3, [r4, #16]
 801794c:	6023      	str	r3, [r4, #0]
 801794e:	2300      	movs	r3, #0
 8017950:	6063      	str	r3, [r4, #4]
 8017952:	89a3      	ldrh	r3, [r4, #12]
 8017954:	f043 0320 	orr.w	r3, r3, #32
 8017958:	81a3      	strh	r3, [r4, #12]
 801795a:	f04f 30ff 	mov.w	r0, #4294967295
 801795e:	e7f3      	b.n	8017948 <__ssrefill_r+0x22>

08017960 <__ssvfiscanf_r>:
 8017960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017964:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017968:	460c      	mov	r4, r1
 801796a:	2100      	movs	r1, #0
 801796c:	9144      	str	r1, [sp, #272]	; 0x110
 801796e:	9145      	str	r1, [sp, #276]	; 0x114
 8017970:	499f      	ldr	r1, [pc, #636]	; (8017bf0 <__ssvfiscanf_r+0x290>)
 8017972:	91a0      	str	r1, [sp, #640]	; 0x280
 8017974:	f10d 0804 	add.w	r8, sp, #4
 8017978:	499e      	ldr	r1, [pc, #632]	; (8017bf4 <__ssvfiscanf_r+0x294>)
 801797a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017bf8 <__ssvfiscanf_r+0x298>
 801797e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017982:	4606      	mov	r6, r0
 8017984:	4692      	mov	sl, r2
 8017986:	91a1      	str	r1, [sp, #644]	; 0x284
 8017988:	9300      	str	r3, [sp, #0]
 801798a:	270a      	movs	r7, #10
 801798c:	f89a 3000 	ldrb.w	r3, [sl]
 8017990:	2b00      	cmp	r3, #0
 8017992:	f000 812a 	beq.w	8017bea <__ssvfiscanf_r+0x28a>
 8017996:	4655      	mov	r5, sl
 8017998:	f7ff f948 	bl	8016c2c <__locale_ctype_ptr>
 801799c:	f815 bb01 	ldrb.w	fp, [r5], #1
 80179a0:	4458      	add	r0, fp
 80179a2:	7843      	ldrb	r3, [r0, #1]
 80179a4:	f013 0308 	ands.w	r3, r3, #8
 80179a8:	d01c      	beq.n	80179e4 <__ssvfiscanf_r+0x84>
 80179aa:	6863      	ldr	r3, [r4, #4]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	dd12      	ble.n	80179d6 <__ssvfiscanf_r+0x76>
 80179b0:	f7ff f93c 	bl	8016c2c <__locale_ctype_ptr>
 80179b4:	6823      	ldr	r3, [r4, #0]
 80179b6:	781a      	ldrb	r2, [r3, #0]
 80179b8:	4410      	add	r0, r2
 80179ba:	7842      	ldrb	r2, [r0, #1]
 80179bc:	0712      	lsls	r2, r2, #28
 80179be:	d401      	bmi.n	80179c4 <__ssvfiscanf_r+0x64>
 80179c0:	46aa      	mov	sl, r5
 80179c2:	e7e3      	b.n	801798c <__ssvfiscanf_r+0x2c>
 80179c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80179c6:	3201      	adds	r2, #1
 80179c8:	9245      	str	r2, [sp, #276]	; 0x114
 80179ca:	6862      	ldr	r2, [r4, #4]
 80179cc:	3301      	adds	r3, #1
 80179ce:	3a01      	subs	r2, #1
 80179d0:	6062      	str	r2, [r4, #4]
 80179d2:	6023      	str	r3, [r4, #0]
 80179d4:	e7e9      	b.n	80179aa <__ssvfiscanf_r+0x4a>
 80179d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80179d8:	4621      	mov	r1, r4
 80179da:	4630      	mov	r0, r6
 80179dc:	4798      	blx	r3
 80179de:	2800      	cmp	r0, #0
 80179e0:	d0e6      	beq.n	80179b0 <__ssvfiscanf_r+0x50>
 80179e2:	e7ed      	b.n	80179c0 <__ssvfiscanf_r+0x60>
 80179e4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80179e8:	f040 8082 	bne.w	8017af0 <__ssvfiscanf_r+0x190>
 80179ec:	9343      	str	r3, [sp, #268]	; 0x10c
 80179ee:	9341      	str	r3, [sp, #260]	; 0x104
 80179f0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80179f4:	2b2a      	cmp	r3, #42	; 0x2a
 80179f6:	d103      	bne.n	8017a00 <__ssvfiscanf_r+0xa0>
 80179f8:	2310      	movs	r3, #16
 80179fa:	9341      	str	r3, [sp, #260]	; 0x104
 80179fc:	f10a 0502 	add.w	r5, sl, #2
 8017a00:	46aa      	mov	sl, r5
 8017a02:	f815 1b01 	ldrb.w	r1, [r5], #1
 8017a06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8017a0a:	2a09      	cmp	r2, #9
 8017a0c:	d922      	bls.n	8017a54 <__ssvfiscanf_r+0xf4>
 8017a0e:	2203      	movs	r2, #3
 8017a10:	4879      	ldr	r0, [pc, #484]	; (8017bf8 <__ssvfiscanf_r+0x298>)
 8017a12:	f7e8 fbfd 	bl	8000210 <memchr>
 8017a16:	b138      	cbz	r0, 8017a28 <__ssvfiscanf_r+0xc8>
 8017a18:	eba0 0309 	sub.w	r3, r0, r9
 8017a1c:	2001      	movs	r0, #1
 8017a1e:	4098      	lsls	r0, r3
 8017a20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017a22:	4318      	orrs	r0, r3
 8017a24:	9041      	str	r0, [sp, #260]	; 0x104
 8017a26:	46aa      	mov	sl, r5
 8017a28:	f89a 3000 	ldrb.w	r3, [sl]
 8017a2c:	2b67      	cmp	r3, #103	; 0x67
 8017a2e:	f10a 0501 	add.w	r5, sl, #1
 8017a32:	d82b      	bhi.n	8017a8c <__ssvfiscanf_r+0x12c>
 8017a34:	2b65      	cmp	r3, #101	; 0x65
 8017a36:	f080 809f 	bcs.w	8017b78 <__ssvfiscanf_r+0x218>
 8017a3a:	2b47      	cmp	r3, #71	; 0x47
 8017a3c:	d810      	bhi.n	8017a60 <__ssvfiscanf_r+0x100>
 8017a3e:	2b45      	cmp	r3, #69	; 0x45
 8017a40:	f080 809a 	bcs.w	8017b78 <__ssvfiscanf_r+0x218>
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d06c      	beq.n	8017b22 <__ssvfiscanf_r+0x1c2>
 8017a48:	2b25      	cmp	r3, #37	; 0x25
 8017a4a:	d051      	beq.n	8017af0 <__ssvfiscanf_r+0x190>
 8017a4c:	2303      	movs	r3, #3
 8017a4e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017a50:	9742      	str	r7, [sp, #264]	; 0x108
 8017a52:	e027      	b.n	8017aa4 <__ssvfiscanf_r+0x144>
 8017a54:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017a56:	fb07 1303 	mla	r3, r7, r3, r1
 8017a5a:	3b30      	subs	r3, #48	; 0x30
 8017a5c:	9343      	str	r3, [sp, #268]	; 0x10c
 8017a5e:	e7cf      	b.n	8017a00 <__ssvfiscanf_r+0xa0>
 8017a60:	2b5b      	cmp	r3, #91	; 0x5b
 8017a62:	d06a      	beq.n	8017b3a <__ssvfiscanf_r+0x1da>
 8017a64:	d80c      	bhi.n	8017a80 <__ssvfiscanf_r+0x120>
 8017a66:	2b58      	cmp	r3, #88	; 0x58
 8017a68:	d1f0      	bne.n	8017a4c <__ssvfiscanf_r+0xec>
 8017a6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017a70:	9241      	str	r2, [sp, #260]	; 0x104
 8017a72:	2210      	movs	r2, #16
 8017a74:	9242      	str	r2, [sp, #264]	; 0x108
 8017a76:	2b6e      	cmp	r3, #110	; 0x6e
 8017a78:	bf8c      	ite	hi
 8017a7a:	2304      	movhi	r3, #4
 8017a7c:	2303      	movls	r3, #3
 8017a7e:	e010      	b.n	8017aa2 <__ssvfiscanf_r+0x142>
 8017a80:	2b63      	cmp	r3, #99	; 0x63
 8017a82:	d065      	beq.n	8017b50 <__ssvfiscanf_r+0x1f0>
 8017a84:	2b64      	cmp	r3, #100	; 0x64
 8017a86:	d1e1      	bne.n	8017a4c <__ssvfiscanf_r+0xec>
 8017a88:	9742      	str	r7, [sp, #264]	; 0x108
 8017a8a:	e7f4      	b.n	8017a76 <__ssvfiscanf_r+0x116>
 8017a8c:	2b70      	cmp	r3, #112	; 0x70
 8017a8e:	d04b      	beq.n	8017b28 <__ssvfiscanf_r+0x1c8>
 8017a90:	d826      	bhi.n	8017ae0 <__ssvfiscanf_r+0x180>
 8017a92:	2b6e      	cmp	r3, #110	; 0x6e
 8017a94:	d062      	beq.n	8017b5c <__ssvfiscanf_r+0x1fc>
 8017a96:	d84c      	bhi.n	8017b32 <__ssvfiscanf_r+0x1d2>
 8017a98:	2b69      	cmp	r3, #105	; 0x69
 8017a9a:	d1d7      	bne.n	8017a4c <__ssvfiscanf_r+0xec>
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	9342      	str	r3, [sp, #264]	; 0x108
 8017aa0:	2303      	movs	r3, #3
 8017aa2:	9347      	str	r3, [sp, #284]	; 0x11c
 8017aa4:	6863      	ldr	r3, [r4, #4]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	dd68      	ble.n	8017b7c <__ssvfiscanf_r+0x21c>
 8017aaa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017aac:	0659      	lsls	r1, r3, #25
 8017aae:	d407      	bmi.n	8017ac0 <__ssvfiscanf_r+0x160>
 8017ab0:	f7ff f8bc 	bl	8016c2c <__locale_ctype_ptr>
 8017ab4:	6823      	ldr	r3, [r4, #0]
 8017ab6:	781a      	ldrb	r2, [r3, #0]
 8017ab8:	4410      	add	r0, r2
 8017aba:	7842      	ldrb	r2, [r0, #1]
 8017abc:	0712      	lsls	r2, r2, #28
 8017abe:	d464      	bmi.n	8017b8a <__ssvfiscanf_r+0x22a>
 8017ac0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017ac2:	2b02      	cmp	r3, #2
 8017ac4:	dc73      	bgt.n	8017bae <__ssvfiscanf_r+0x24e>
 8017ac6:	466b      	mov	r3, sp
 8017ac8:	4622      	mov	r2, r4
 8017aca:	a941      	add	r1, sp, #260	; 0x104
 8017acc:	4630      	mov	r0, r6
 8017ace:	f000 f897 	bl	8017c00 <_scanf_chars>
 8017ad2:	2801      	cmp	r0, #1
 8017ad4:	f000 8089 	beq.w	8017bea <__ssvfiscanf_r+0x28a>
 8017ad8:	2802      	cmp	r0, #2
 8017ada:	f47f af71 	bne.w	80179c0 <__ssvfiscanf_r+0x60>
 8017ade:	e01d      	b.n	8017b1c <__ssvfiscanf_r+0x1bc>
 8017ae0:	2b75      	cmp	r3, #117	; 0x75
 8017ae2:	d0d1      	beq.n	8017a88 <__ssvfiscanf_r+0x128>
 8017ae4:	2b78      	cmp	r3, #120	; 0x78
 8017ae6:	d0c0      	beq.n	8017a6a <__ssvfiscanf_r+0x10a>
 8017ae8:	2b73      	cmp	r3, #115	; 0x73
 8017aea:	d1af      	bne.n	8017a4c <__ssvfiscanf_r+0xec>
 8017aec:	2302      	movs	r3, #2
 8017aee:	e7d8      	b.n	8017aa2 <__ssvfiscanf_r+0x142>
 8017af0:	6863      	ldr	r3, [r4, #4]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	dd0c      	ble.n	8017b10 <__ssvfiscanf_r+0x1b0>
 8017af6:	6823      	ldr	r3, [r4, #0]
 8017af8:	781a      	ldrb	r2, [r3, #0]
 8017afa:	455a      	cmp	r2, fp
 8017afc:	d175      	bne.n	8017bea <__ssvfiscanf_r+0x28a>
 8017afe:	3301      	adds	r3, #1
 8017b00:	6862      	ldr	r2, [r4, #4]
 8017b02:	6023      	str	r3, [r4, #0]
 8017b04:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017b06:	3a01      	subs	r2, #1
 8017b08:	3301      	adds	r3, #1
 8017b0a:	6062      	str	r2, [r4, #4]
 8017b0c:	9345      	str	r3, [sp, #276]	; 0x114
 8017b0e:	e757      	b.n	80179c0 <__ssvfiscanf_r+0x60>
 8017b10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017b12:	4621      	mov	r1, r4
 8017b14:	4630      	mov	r0, r6
 8017b16:	4798      	blx	r3
 8017b18:	2800      	cmp	r0, #0
 8017b1a:	d0ec      	beq.n	8017af6 <__ssvfiscanf_r+0x196>
 8017b1c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017b1e:	2800      	cmp	r0, #0
 8017b20:	d159      	bne.n	8017bd6 <__ssvfiscanf_r+0x276>
 8017b22:	f04f 30ff 	mov.w	r0, #4294967295
 8017b26:	e05c      	b.n	8017be2 <__ssvfiscanf_r+0x282>
 8017b28:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017b2a:	f042 0220 	orr.w	r2, r2, #32
 8017b2e:	9241      	str	r2, [sp, #260]	; 0x104
 8017b30:	e79b      	b.n	8017a6a <__ssvfiscanf_r+0x10a>
 8017b32:	2308      	movs	r3, #8
 8017b34:	9342      	str	r3, [sp, #264]	; 0x108
 8017b36:	2304      	movs	r3, #4
 8017b38:	e7b3      	b.n	8017aa2 <__ssvfiscanf_r+0x142>
 8017b3a:	4629      	mov	r1, r5
 8017b3c:	4640      	mov	r0, r8
 8017b3e:	f000 f9c7 	bl	8017ed0 <__sccl>
 8017b42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b48:	9341      	str	r3, [sp, #260]	; 0x104
 8017b4a:	4605      	mov	r5, r0
 8017b4c:	2301      	movs	r3, #1
 8017b4e:	e7a8      	b.n	8017aa2 <__ssvfiscanf_r+0x142>
 8017b50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b56:	9341      	str	r3, [sp, #260]	; 0x104
 8017b58:	2300      	movs	r3, #0
 8017b5a:	e7a2      	b.n	8017aa2 <__ssvfiscanf_r+0x142>
 8017b5c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017b5e:	06c3      	lsls	r3, r0, #27
 8017b60:	f53f af2e 	bmi.w	80179c0 <__ssvfiscanf_r+0x60>
 8017b64:	9b00      	ldr	r3, [sp, #0]
 8017b66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017b68:	1d19      	adds	r1, r3, #4
 8017b6a:	9100      	str	r1, [sp, #0]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	07c0      	lsls	r0, r0, #31
 8017b70:	bf4c      	ite	mi
 8017b72:	801a      	strhmi	r2, [r3, #0]
 8017b74:	601a      	strpl	r2, [r3, #0]
 8017b76:	e723      	b.n	80179c0 <__ssvfiscanf_r+0x60>
 8017b78:	2305      	movs	r3, #5
 8017b7a:	e792      	b.n	8017aa2 <__ssvfiscanf_r+0x142>
 8017b7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017b7e:	4621      	mov	r1, r4
 8017b80:	4630      	mov	r0, r6
 8017b82:	4798      	blx	r3
 8017b84:	2800      	cmp	r0, #0
 8017b86:	d090      	beq.n	8017aaa <__ssvfiscanf_r+0x14a>
 8017b88:	e7c8      	b.n	8017b1c <__ssvfiscanf_r+0x1bc>
 8017b8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017b8c:	3201      	adds	r2, #1
 8017b8e:	9245      	str	r2, [sp, #276]	; 0x114
 8017b90:	6862      	ldr	r2, [r4, #4]
 8017b92:	3a01      	subs	r2, #1
 8017b94:	2a00      	cmp	r2, #0
 8017b96:	6062      	str	r2, [r4, #4]
 8017b98:	dd02      	ble.n	8017ba0 <__ssvfiscanf_r+0x240>
 8017b9a:	3301      	adds	r3, #1
 8017b9c:	6023      	str	r3, [r4, #0]
 8017b9e:	e787      	b.n	8017ab0 <__ssvfiscanf_r+0x150>
 8017ba0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017ba2:	4621      	mov	r1, r4
 8017ba4:	4630      	mov	r0, r6
 8017ba6:	4798      	blx	r3
 8017ba8:	2800      	cmp	r0, #0
 8017baa:	d081      	beq.n	8017ab0 <__ssvfiscanf_r+0x150>
 8017bac:	e7b6      	b.n	8017b1c <__ssvfiscanf_r+0x1bc>
 8017bae:	2b04      	cmp	r3, #4
 8017bb0:	dc06      	bgt.n	8017bc0 <__ssvfiscanf_r+0x260>
 8017bb2:	466b      	mov	r3, sp
 8017bb4:	4622      	mov	r2, r4
 8017bb6:	a941      	add	r1, sp, #260	; 0x104
 8017bb8:	4630      	mov	r0, r6
 8017bba:	f000 f885 	bl	8017cc8 <_scanf_i>
 8017bbe:	e788      	b.n	8017ad2 <__ssvfiscanf_r+0x172>
 8017bc0:	4b0e      	ldr	r3, [pc, #56]	; (8017bfc <__ssvfiscanf_r+0x29c>)
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	f43f aefc 	beq.w	80179c0 <__ssvfiscanf_r+0x60>
 8017bc8:	466b      	mov	r3, sp
 8017bca:	4622      	mov	r2, r4
 8017bcc:	a941      	add	r1, sp, #260	; 0x104
 8017bce:	4630      	mov	r0, r6
 8017bd0:	f7fc fd7e 	bl	80146d0 <_scanf_float>
 8017bd4:	e77d      	b.n	8017ad2 <__ssvfiscanf_r+0x172>
 8017bd6:	89a3      	ldrh	r3, [r4, #12]
 8017bd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017bdc:	bf18      	it	ne
 8017bde:	f04f 30ff 	movne.w	r0, #4294967295
 8017be2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bea:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017bec:	e7f9      	b.n	8017be2 <__ssvfiscanf_r+0x282>
 8017bee:	bf00      	nop
 8017bf0:	080178ad 	.word	0x080178ad
 8017bf4:	08017927 	.word	0x08017927
 8017bf8:	08018bc2 	.word	0x08018bc2
 8017bfc:	080146d1 	.word	0x080146d1

08017c00 <_scanf_chars>:
 8017c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c04:	4615      	mov	r5, r2
 8017c06:	688a      	ldr	r2, [r1, #8]
 8017c08:	4680      	mov	r8, r0
 8017c0a:	460c      	mov	r4, r1
 8017c0c:	b932      	cbnz	r2, 8017c1c <_scanf_chars+0x1c>
 8017c0e:	698a      	ldr	r2, [r1, #24]
 8017c10:	2a00      	cmp	r2, #0
 8017c12:	bf14      	ite	ne
 8017c14:	f04f 32ff 	movne.w	r2, #4294967295
 8017c18:	2201      	moveq	r2, #1
 8017c1a:	608a      	str	r2, [r1, #8]
 8017c1c:	6822      	ldr	r2, [r4, #0]
 8017c1e:	06d1      	lsls	r1, r2, #27
 8017c20:	bf5f      	itttt	pl
 8017c22:	681a      	ldrpl	r2, [r3, #0]
 8017c24:	1d11      	addpl	r1, r2, #4
 8017c26:	6019      	strpl	r1, [r3, #0]
 8017c28:	6817      	ldrpl	r7, [r2, #0]
 8017c2a:	2600      	movs	r6, #0
 8017c2c:	69a3      	ldr	r3, [r4, #24]
 8017c2e:	b1db      	cbz	r3, 8017c68 <_scanf_chars+0x68>
 8017c30:	2b01      	cmp	r3, #1
 8017c32:	d107      	bne.n	8017c44 <_scanf_chars+0x44>
 8017c34:	682b      	ldr	r3, [r5, #0]
 8017c36:	6962      	ldr	r2, [r4, #20]
 8017c38:	781b      	ldrb	r3, [r3, #0]
 8017c3a:	5cd3      	ldrb	r3, [r2, r3]
 8017c3c:	b9a3      	cbnz	r3, 8017c68 <_scanf_chars+0x68>
 8017c3e:	2e00      	cmp	r6, #0
 8017c40:	d132      	bne.n	8017ca8 <_scanf_chars+0xa8>
 8017c42:	e006      	b.n	8017c52 <_scanf_chars+0x52>
 8017c44:	2b02      	cmp	r3, #2
 8017c46:	d007      	beq.n	8017c58 <_scanf_chars+0x58>
 8017c48:	2e00      	cmp	r6, #0
 8017c4a:	d12d      	bne.n	8017ca8 <_scanf_chars+0xa8>
 8017c4c:	69a3      	ldr	r3, [r4, #24]
 8017c4e:	2b01      	cmp	r3, #1
 8017c50:	d12a      	bne.n	8017ca8 <_scanf_chars+0xa8>
 8017c52:	2001      	movs	r0, #1
 8017c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c58:	f7fe ffe8 	bl	8016c2c <__locale_ctype_ptr>
 8017c5c:	682b      	ldr	r3, [r5, #0]
 8017c5e:	781b      	ldrb	r3, [r3, #0]
 8017c60:	4418      	add	r0, r3
 8017c62:	7843      	ldrb	r3, [r0, #1]
 8017c64:	071b      	lsls	r3, r3, #28
 8017c66:	d4ef      	bmi.n	8017c48 <_scanf_chars+0x48>
 8017c68:	6823      	ldr	r3, [r4, #0]
 8017c6a:	06da      	lsls	r2, r3, #27
 8017c6c:	bf5e      	ittt	pl
 8017c6e:	682b      	ldrpl	r3, [r5, #0]
 8017c70:	781b      	ldrbpl	r3, [r3, #0]
 8017c72:	703b      	strbpl	r3, [r7, #0]
 8017c74:	682a      	ldr	r2, [r5, #0]
 8017c76:	686b      	ldr	r3, [r5, #4]
 8017c78:	f102 0201 	add.w	r2, r2, #1
 8017c7c:	602a      	str	r2, [r5, #0]
 8017c7e:	68a2      	ldr	r2, [r4, #8]
 8017c80:	f103 33ff 	add.w	r3, r3, #4294967295
 8017c84:	f102 32ff 	add.w	r2, r2, #4294967295
 8017c88:	606b      	str	r3, [r5, #4]
 8017c8a:	f106 0601 	add.w	r6, r6, #1
 8017c8e:	bf58      	it	pl
 8017c90:	3701      	addpl	r7, #1
 8017c92:	60a2      	str	r2, [r4, #8]
 8017c94:	b142      	cbz	r2, 8017ca8 <_scanf_chars+0xa8>
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	dcc8      	bgt.n	8017c2c <_scanf_chars+0x2c>
 8017c9a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017c9e:	4629      	mov	r1, r5
 8017ca0:	4640      	mov	r0, r8
 8017ca2:	4798      	blx	r3
 8017ca4:	2800      	cmp	r0, #0
 8017ca6:	d0c1      	beq.n	8017c2c <_scanf_chars+0x2c>
 8017ca8:	6823      	ldr	r3, [r4, #0]
 8017caa:	f013 0310 	ands.w	r3, r3, #16
 8017cae:	d105      	bne.n	8017cbc <_scanf_chars+0xbc>
 8017cb0:	68e2      	ldr	r2, [r4, #12]
 8017cb2:	3201      	adds	r2, #1
 8017cb4:	60e2      	str	r2, [r4, #12]
 8017cb6:	69a2      	ldr	r2, [r4, #24]
 8017cb8:	b102      	cbz	r2, 8017cbc <_scanf_chars+0xbc>
 8017cba:	703b      	strb	r3, [r7, #0]
 8017cbc:	6923      	ldr	r3, [r4, #16]
 8017cbe:	441e      	add	r6, r3
 8017cc0:	6126      	str	r6, [r4, #16]
 8017cc2:	2000      	movs	r0, #0
 8017cc4:	e7c6      	b.n	8017c54 <_scanf_chars+0x54>
	...

08017cc8 <_scanf_i>:
 8017cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ccc:	469a      	mov	sl, r3
 8017cce:	4b74      	ldr	r3, [pc, #464]	; (8017ea0 <_scanf_i+0x1d8>)
 8017cd0:	460c      	mov	r4, r1
 8017cd2:	4683      	mov	fp, r0
 8017cd4:	4616      	mov	r6, r2
 8017cd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017cda:	b087      	sub	sp, #28
 8017cdc:	ab03      	add	r3, sp, #12
 8017cde:	68a7      	ldr	r7, [r4, #8]
 8017ce0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017ce4:	4b6f      	ldr	r3, [pc, #444]	; (8017ea4 <_scanf_i+0x1dc>)
 8017ce6:	69a1      	ldr	r1, [r4, #24]
 8017ce8:	4a6f      	ldr	r2, [pc, #444]	; (8017ea8 <_scanf_i+0x1e0>)
 8017cea:	2903      	cmp	r1, #3
 8017cec:	bf08      	it	eq
 8017cee:	461a      	moveq	r2, r3
 8017cf0:	1e7b      	subs	r3, r7, #1
 8017cf2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017cf6:	bf84      	itt	hi
 8017cf8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017cfc:	60a3      	strhi	r3, [r4, #8]
 8017cfe:	6823      	ldr	r3, [r4, #0]
 8017d00:	9200      	str	r2, [sp, #0]
 8017d02:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017d06:	bf88      	it	hi
 8017d08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017d0c:	f104 091c 	add.w	r9, r4, #28
 8017d10:	6023      	str	r3, [r4, #0]
 8017d12:	bf8c      	ite	hi
 8017d14:	197f      	addhi	r7, r7, r5
 8017d16:	2700      	movls	r7, #0
 8017d18:	464b      	mov	r3, r9
 8017d1a:	f04f 0800 	mov.w	r8, #0
 8017d1e:	9301      	str	r3, [sp, #4]
 8017d20:	6831      	ldr	r1, [r6, #0]
 8017d22:	ab03      	add	r3, sp, #12
 8017d24:	2202      	movs	r2, #2
 8017d26:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017d2a:	7809      	ldrb	r1, [r1, #0]
 8017d2c:	f7e8 fa70 	bl	8000210 <memchr>
 8017d30:	9b01      	ldr	r3, [sp, #4]
 8017d32:	b330      	cbz	r0, 8017d82 <_scanf_i+0xba>
 8017d34:	f1b8 0f01 	cmp.w	r8, #1
 8017d38:	d15a      	bne.n	8017df0 <_scanf_i+0x128>
 8017d3a:	6862      	ldr	r2, [r4, #4]
 8017d3c:	b92a      	cbnz	r2, 8017d4a <_scanf_i+0x82>
 8017d3e:	6822      	ldr	r2, [r4, #0]
 8017d40:	2108      	movs	r1, #8
 8017d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d46:	6061      	str	r1, [r4, #4]
 8017d48:	6022      	str	r2, [r4, #0]
 8017d4a:	6822      	ldr	r2, [r4, #0]
 8017d4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017d50:	6022      	str	r2, [r4, #0]
 8017d52:	68a2      	ldr	r2, [r4, #8]
 8017d54:	1e51      	subs	r1, r2, #1
 8017d56:	60a1      	str	r1, [r4, #8]
 8017d58:	b19a      	cbz	r2, 8017d82 <_scanf_i+0xba>
 8017d5a:	6832      	ldr	r2, [r6, #0]
 8017d5c:	1c51      	adds	r1, r2, #1
 8017d5e:	6031      	str	r1, [r6, #0]
 8017d60:	7812      	ldrb	r2, [r2, #0]
 8017d62:	701a      	strb	r2, [r3, #0]
 8017d64:	1c5d      	adds	r5, r3, #1
 8017d66:	6873      	ldr	r3, [r6, #4]
 8017d68:	3b01      	subs	r3, #1
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	6073      	str	r3, [r6, #4]
 8017d6e:	dc07      	bgt.n	8017d80 <_scanf_i+0xb8>
 8017d70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017d74:	4631      	mov	r1, r6
 8017d76:	4658      	mov	r0, fp
 8017d78:	4798      	blx	r3
 8017d7a:	2800      	cmp	r0, #0
 8017d7c:	f040 8086 	bne.w	8017e8c <_scanf_i+0x1c4>
 8017d80:	462b      	mov	r3, r5
 8017d82:	f108 0801 	add.w	r8, r8, #1
 8017d86:	f1b8 0f03 	cmp.w	r8, #3
 8017d8a:	d1c8      	bne.n	8017d1e <_scanf_i+0x56>
 8017d8c:	6862      	ldr	r2, [r4, #4]
 8017d8e:	b90a      	cbnz	r2, 8017d94 <_scanf_i+0xcc>
 8017d90:	220a      	movs	r2, #10
 8017d92:	6062      	str	r2, [r4, #4]
 8017d94:	6862      	ldr	r2, [r4, #4]
 8017d96:	4945      	ldr	r1, [pc, #276]	; (8017eac <_scanf_i+0x1e4>)
 8017d98:	6960      	ldr	r0, [r4, #20]
 8017d9a:	9301      	str	r3, [sp, #4]
 8017d9c:	1a89      	subs	r1, r1, r2
 8017d9e:	f000 f897 	bl	8017ed0 <__sccl>
 8017da2:	9b01      	ldr	r3, [sp, #4]
 8017da4:	f04f 0800 	mov.w	r8, #0
 8017da8:	461d      	mov	r5, r3
 8017daa:	68a3      	ldr	r3, [r4, #8]
 8017dac:	6822      	ldr	r2, [r4, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d03a      	beq.n	8017e28 <_scanf_i+0x160>
 8017db2:	6831      	ldr	r1, [r6, #0]
 8017db4:	6960      	ldr	r0, [r4, #20]
 8017db6:	f891 c000 	ldrb.w	ip, [r1]
 8017dba:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017dbe:	2800      	cmp	r0, #0
 8017dc0:	d032      	beq.n	8017e28 <_scanf_i+0x160>
 8017dc2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017dc6:	d121      	bne.n	8017e0c <_scanf_i+0x144>
 8017dc8:	0510      	lsls	r0, r2, #20
 8017dca:	d51f      	bpl.n	8017e0c <_scanf_i+0x144>
 8017dcc:	f108 0801 	add.w	r8, r8, #1
 8017dd0:	b117      	cbz	r7, 8017dd8 <_scanf_i+0x110>
 8017dd2:	3301      	adds	r3, #1
 8017dd4:	3f01      	subs	r7, #1
 8017dd6:	60a3      	str	r3, [r4, #8]
 8017dd8:	6873      	ldr	r3, [r6, #4]
 8017dda:	3b01      	subs	r3, #1
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	6073      	str	r3, [r6, #4]
 8017de0:	dd1b      	ble.n	8017e1a <_scanf_i+0x152>
 8017de2:	6833      	ldr	r3, [r6, #0]
 8017de4:	3301      	adds	r3, #1
 8017de6:	6033      	str	r3, [r6, #0]
 8017de8:	68a3      	ldr	r3, [r4, #8]
 8017dea:	3b01      	subs	r3, #1
 8017dec:	60a3      	str	r3, [r4, #8]
 8017dee:	e7dc      	b.n	8017daa <_scanf_i+0xe2>
 8017df0:	f1b8 0f02 	cmp.w	r8, #2
 8017df4:	d1ad      	bne.n	8017d52 <_scanf_i+0x8a>
 8017df6:	6822      	ldr	r2, [r4, #0]
 8017df8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017dfc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017e00:	d1bf      	bne.n	8017d82 <_scanf_i+0xba>
 8017e02:	2110      	movs	r1, #16
 8017e04:	6061      	str	r1, [r4, #4]
 8017e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017e0a:	e7a1      	b.n	8017d50 <_scanf_i+0x88>
 8017e0c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017e10:	6022      	str	r2, [r4, #0]
 8017e12:	780b      	ldrb	r3, [r1, #0]
 8017e14:	702b      	strb	r3, [r5, #0]
 8017e16:	3501      	adds	r5, #1
 8017e18:	e7de      	b.n	8017dd8 <_scanf_i+0x110>
 8017e1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017e1e:	4631      	mov	r1, r6
 8017e20:	4658      	mov	r0, fp
 8017e22:	4798      	blx	r3
 8017e24:	2800      	cmp	r0, #0
 8017e26:	d0df      	beq.n	8017de8 <_scanf_i+0x120>
 8017e28:	6823      	ldr	r3, [r4, #0]
 8017e2a:	05d9      	lsls	r1, r3, #23
 8017e2c:	d50c      	bpl.n	8017e48 <_scanf_i+0x180>
 8017e2e:	454d      	cmp	r5, r9
 8017e30:	d908      	bls.n	8017e44 <_scanf_i+0x17c>
 8017e32:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e3a:	4632      	mov	r2, r6
 8017e3c:	4658      	mov	r0, fp
 8017e3e:	4798      	blx	r3
 8017e40:	1e6f      	subs	r7, r5, #1
 8017e42:	463d      	mov	r5, r7
 8017e44:	454d      	cmp	r5, r9
 8017e46:	d029      	beq.n	8017e9c <_scanf_i+0x1d4>
 8017e48:	6822      	ldr	r2, [r4, #0]
 8017e4a:	f012 0210 	ands.w	r2, r2, #16
 8017e4e:	d113      	bne.n	8017e78 <_scanf_i+0x1b0>
 8017e50:	702a      	strb	r2, [r5, #0]
 8017e52:	6863      	ldr	r3, [r4, #4]
 8017e54:	9e00      	ldr	r6, [sp, #0]
 8017e56:	4649      	mov	r1, r9
 8017e58:	4658      	mov	r0, fp
 8017e5a:	47b0      	blx	r6
 8017e5c:	f8da 3000 	ldr.w	r3, [sl]
 8017e60:	6821      	ldr	r1, [r4, #0]
 8017e62:	1d1a      	adds	r2, r3, #4
 8017e64:	f8ca 2000 	str.w	r2, [sl]
 8017e68:	f011 0f20 	tst.w	r1, #32
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	d010      	beq.n	8017e92 <_scanf_i+0x1ca>
 8017e70:	6018      	str	r0, [r3, #0]
 8017e72:	68e3      	ldr	r3, [r4, #12]
 8017e74:	3301      	adds	r3, #1
 8017e76:	60e3      	str	r3, [r4, #12]
 8017e78:	eba5 0509 	sub.w	r5, r5, r9
 8017e7c:	44a8      	add	r8, r5
 8017e7e:	6925      	ldr	r5, [r4, #16]
 8017e80:	4445      	add	r5, r8
 8017e82:	6125      	str	r5, [r4, #16]
 8017e84:	2000      	movs	r0, #0
 8017e86:	b007      	add	sp, #28
 8017e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e8c:	f04f 0800 	mov.w	r8, #0
 8017e90:	e7ca      	b.n	8017e28 <_scanf_i+0x160>
 8017e92:	07ca      	lsls	r2, r1, #31
 8017e94:	bf4c      	ite	mi
 8017e96:	8018      	strhmi	r0, [r3, #0]
 8017e98:	6018      	strpl	r0, [r3, #0]
 8017e9a:	e7ea      	b.n	8017e72 <_scanf_i+0x1aa>
 8017e9c:	2001      	movs	r0, #1
 8017e9e:	e7f2      	b.n	8017e86 <_scanf_i+0x1be>
 8017ea0:	0801871c 	.word	0x0801871c
 8017ea4:	080158e9 	.word	0x080158e9
 8017ea8:	0801804d 	.word	0x0801804d
 8017eac:	08018bdd 	.word	0x08018bdd

08017eb0 <_sbrk_r>:
 8017eb0:	b538      	push	{r3, r4, r5, lr}
 8017eb2:	4c06      	ldr	r4, [pc, #24]	; (8017ecc <_sbrk_r+0x1c>)
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	4605      	mov	r5, r0
 8017eb8:	4608      	mov	r0, r1
 8017eba:	6023      	str	r3, [r4, #0]
 8017ebc:	f7ee feac 	bl	8006c18 <_sbrk>
 8017ec0:	1c43      	adds	r3, r0, #1
 8017ec2:	d102      	bne.n	8017eca <_sbrk_r+0x1a>
 8017ec4:	6823      	ldr	r3, [r4, #0]
 8017ec6:	b103      	cbz	r3, 8017eca <_sbrk_r+0x1a>
 8017ec8:	602b      	str	r3, [r5, #0]
 8017eca:	bd38      	pop	{r3, r4, r5, pc}
 8017ecc:	20040e34 	.word	0x20040e34

08017ed0 <__sccl>:
 8017ed0:	b570      	push	{r4, r5, r6, lr}
 8017ed2:	780b      	ldrb	r3, [r1, #0]
 8017ed4:	2b5e      	cmp	r3, #94	; 0x5e
 8017ed6:	bf13      	iteet	ne
 8017ed8:	1c4a      	addne	r2, r1, #1
 8017eda:	1c8a      	addeq	r2, r1, #2
 8017edc:	784b      	ldrbeq	r3, [r1, #1]
 8017ede:	2100      	movne	r1, #0
 8017ee0:	bf08      	it	eq
 8017ee2:	2101      	moveq	r1, #1
 8017ee4:	1e44      	subs	r4, r0, #1
 8017ee6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017eea:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017eee:	42ac      	cmp	r4, r5
 8017ef0:	d1fb      	bne.n	8017eea <__sccl+0x1a>
 8017ef2:	b913      	cbnz	r3, 8017efa <__sccl+0x2a>
 8017ef4:	3a01      	subs	r2, #1
 8017ef6:	4610      	mov	r0, r2
 8017ef8:	bd70      	pop	{r4, r5, r6, pc}
 8017efa:	f081 0401 	eor.w	r4, r1, #1
 8017efe:	54c4      	strb	r4, [r0, r3]
 8017f00:	1c51      	adds	r1, r2, #1
 8017f02:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017f06:	2d2d      	cmp	r5, #45	; 0x2d
 8017f08:	f101 36ff 	add.w	r6, r1, #4294967295
 8017f0c:	460a      	mov	r2, r1
 8017f0e:	d006      	beq.n	8017f1e <__sccl+0x4e>
 8017f10:	2d5d      	cmp	r5, #93	; 0x5d
 8017f12:	d0f0      	beq.n	8017ef6 <__sccl+0x26>
 8017f14:	b90d      	cbnz	r5, 8017f1a <__sccl+0x4a>
 8017f16:	4632      	mov	r2, r6
 8017f18:	e7ed      	b.n	8017ef6 <__sccl+0x26>
 8017f1a:	462b      	mov	r3, r5
 8017f1c:	e7ef      	b.n	8017efe <__sccl+0x2e>
 8017f1e:	780e      	ldrb	r6, [r1, #0]
 8017f20:	2e5d      	cmp	r6, #93	; 0x5d
 8017f22:	d0fa      	beq.n	8017f1a <__sccl+0x4a>
 8017f24:	42b3      	cmp	r3, r6
 8017f26:	dcf8      	bgt.n	8017f1a <__sccl+0x4a>
 8017f28:	3301      	adds	r3, #1
 8017f2a:	429e      	cmp	r6, r3
 8017f2c:	54c4      	strb	r4, [r0, r3]
 8017f2e:	dcfb      	bgt.n	8017f28 <__sccl+0x58>
 8017f30:	3102      	adds	r1, #2
 8017f32:	e7e6      	b.n	8017f02 <__sccl+0x32>

08017f34 <strncmp>:
 8017f34:	b510      	push	{r4, lr}
 8017f36:	b16a      	cbz	r2, 8017f54 <strncmp+0x20>
 8017f38:	3901      	subs	r1, #1
 8017f3a:	1884      	adds	r4, r0, r2
 8017f3c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017f40:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017f44:	4293      	cmp	r3, r2
 8017f46:	d103      	bne.n	8017f50 <strncmp+0x1c>
 8017f48:	42a0      	cmp	r0, r4
 8017f4a:	d001      	beq.n	8017f50 <strncmp+0x1c>
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d1f5      	bne.n	8017f3c <strncmp+0x8>
 8017f50:	1a98      	subs	r0, r3, r2
 8017f52:	bd10      	pop	{r4, pc}
 8017f54:	4610      	mov	r0, r2
 8017f56:	e7fc      	b.n	8017f52 <strncmp+0x1e>

08017f58 <_strtoul_l.isra.0>:
 8017f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f5c:	4680      	mov	r8, r0
 8017f5e:	4689      	mov	r9, r1
 8017f60:	4692      	mov	sl, r2
 8017f62:	461e      	mov	r6, r3
 8017f64:	460f      	mov	r7, r1
 8017f66:	463d      	mov	r5, r7
 8017f68:	9808      	ldr	r0, [sp, #32]
 8017f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f6e:	f7fe fe59 	bl	8016c24 <__locale_ctype_ptr_l>
 8017f72:	4420      	add	r0, r4
 8017f74:	7843      	ldrb	r3, [r0, #1]
 8017f76:	f013 0308 	ands.w	r3, r3, #8
 8017f7a:	d130      	bne.n	8017fde <_strtoul_l.isra.0+0x86>
 8017f7c:	2c2d      	cmp	r4, #45	; 0x2d
 8017f7e:	d130      	bne.n	8017fe2 <_strtoul_l.isra.0+0x8a>
 8017f80:	787c      	ldrb	r4, [r7, #1]
 8017f82:	1cbd      	adds	r5, r7, #2
 8017f84:	2101      	movs	r1, #1
 8017f86:	2e00      	cmp	r6, #0
 8017f88:	d05c      	beq.n	8018044 <_strtoul_l.isra.0+0xec>
 8017f8a:	2e10      	cmp	r6, #16
 8017f8c:	d109      	bne.n	8017fa2 <_strtoul_l.isra.0+0x4a>
 8017f8e:	2c30      	cmp	r4, #48	; 0x30
 8017f90:	d107      	bne.n	8017fa2 <_strtoul_l.isra.0+0x4a>
 8017f92:	782b      	ldrb	r3, [r5, #0]
 8017f94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017f98:	2b58      	cmp	r3, #88	; 0x58
 8017f9a:	d14e      	bne.n	801803a <_strtoul_l.isra.0+0xe2>
 8017f9c:	786c      	ldrb	r4, [r5, #1]
 8017f9e:	2610      	movs	r6, #16
 8017fa0:	3502      	adds	r5, #2
 8017fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	fbb2 f2f6 	udiv	r2, r2, r6
 8017fac:	fb06 fc02 	mul.w	ip, r6, r2
 8017fb0:	ea6f 0c0c 	mvn.w	ip, ip
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017fba:	2f09      	cmp	r7, #9
 8017fbc:	d817      	bhi.n	8017fee <_strtoul_l.isra.0+0x96>
 8017fbe:	463c      	mov	r4, r7
 8017fc0:	42a6      	cmp	r6, r4
 8017fc2:	dd23      	ble.n	801800c <_strtoul_l.isra.0+0xb4>
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	db1e      	blt.n	8018006 <_strtoul_l.isra.0+0xae>
 8017fc8:	4282      	cmp	r2, r0
 8017fca:	d31c      	bcc.n	8018006 <_strtoul_l.isra.0+0xae>
 8017fcc:	d101      	bne.n	8017fd2 <_strtoul_l.isra.0+0x7a>
 8017fce:	45a4      	cmp	ip, r4
 8017fd0:	db19      	blt.n	8018006 <_strtoul_l.isra.0+0xae>
 8017fd2:	fb00 4006 	mla	r0, r0, r6, r4
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fdc:	e7eb      	b.n	8017fb6 <_strtoul_l.isra.0+0x5e>
 8017fde:	462f      	mov	r7, r5
 8017fe0:	e7c1      	b.n	8017f66 <_strtoul_l.isra.0+0xe>
 8017fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8017fe4:	bf04      	itt	eq
 8017fe6:	1cbd      	addeq	r5, r7, #2
 8017fe8:	787c      	ldrbeq	r4, [r7, #1]
 8017fea:	4619      	mov	r1, r3
 8017fec:	e7cb      	b.n	8017f86 <_strtoul_l.isra.0+0x2e>
 8017fee:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017ff2:	2f19      	cmp	r7, #25
 8017ff4:	d801      	bhi.n	8017ffa <_strtoul_l.isra.0+0xa2>
 8017ff6:	3c37      	subs	r4, #55	; 0x37
 8017ff8:	e7e2      	b.n	8017fc0 <_strtoul_l.isra.0+0x68>
 8017ffa:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017ffe:	2f19      	cmp	r7, #25
 8018000:	d804      	bhi.n	801800c <_strtoul_l.isra.0+0xb4>
 8018002:	3c57      	subs	r4, #87	; 0x57
 8018004:	e7dc      	b.n	8017fc0 <_strtoul_l.isra.0+0x68>
 8018006:	f04f 33ff 	mov.w	r3, #4294967295
 801800a:	e7e5      	b.n	8017fd8 <_strtoul_l.isra.0+0x80>
 801800c:	2b00      	cmp	r3, #0
 801800e:	da09      	bge.n	8018024 <_strtoul_l.isra.0+0xcc>
 8018010:	2322      	movs	r3, #34	; 0x22
 8018012:	f8c8 3000 	str.w	r3, [r8]
 8018016:	f04f 30ff 	mov.w	r0, #4294967295
 801801a:	f1ba 0f00 	cmp.w	sl, #0
 801801e:	d107      	bne.n	8018030 <_strtoul_l.isra.0+0xd8>
 8018020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018024:	b101      	cbz	r1, 8018028 <_strtoul_l.isra.0+0xd0>
 8018026:	4240      	negs	r0, r0
 8018028:	f1ba 0f00 	cmp.w	sl, #0
 801802c:	d0f8      	beq.n	8018020 <_strtoul_l.isra.0+0xc8>
 801802e:	b10b      	cbz	r3, 8018034 <_strtoul_l.isra.0+0xdc>
 8018030:	f105 39ff 	add.w	r9, r5, #4294967295
 8018034:	f8ca 9000 	str.w	r9, [sl]
 8018038:	e7f2      	b.n	8018020 <_strtoul_l.isra.0+0xc8>
 801803a:	2430      	movs	r4, #48	; 0x30
 801803c:	2e00      	cmp	r6, #0
 801803e:	d1b0      	bne.n	8017fa2 <_strtoul_l.isra.0+0x4a>
 8018040:	2608      	movs	r6, #8
 8018042:	e7ae      	b.n	8017fa2 <_strtoul_l.isra.0+0x4a>
 8018044:	2c30      	cmp	r4, #48	; 0x30
 8018046:	d0a4      	beq.n	8017f92 <_strtoul_l.isra.0+0x3a>
 8018048:	260a      	movs	r6, #10
 801804a:	e7aa      	b.n	8017fa2 <_strtoul_l.isra.0+0x4a>

0801804c <_strtoul_r>:
 801804c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801804e:	4c06      	ldr	r4, [pc, #24]	; (8018068 <_strtoul_r+0x1c>)
 8018050:	4d06      	ldr	r5, [pc, #24]	; (801806c <_strtoul_r+0x20>)
 8018052:	6824      	ldr	r4, [r4, #0]
 8018054:	6a24      	ldr	r4, [r4, #32]
 8018056:	2c00      	cmp	r4, #0
 8018058:	bf08      	it	eq
 801805a:	462c      	moveq	r4, r5
 801805c:	9400      	str	r4, [sp, #0]
 801805e:	f7ff ff7b 	bl	8017f58 <_strtoul_l.isra.0>
 8018062:	b003      	add	sp, #12
 8018064:	bd30      	pop	{r4, r5, pc}
 8018066:	bf00      	nop
 8018068:	2000000c 	.word	0x2000000c
 801806c:	20000070 	.word	0x20000070

08018070 <__submore>:
 8018070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018074:	460c      	mov	r4, r1
 8018076:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801807c:	4299      	cmp	r1, r3
 801807e:	d11d      	bne.n	80180bc <__submore+0x4c>
 8018080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018084:	f7ff fa66 	bl	8017554 <_malloc_r>
 8018088:	b918      	cbnz	r0, 8018092 <__submore+0x22>
 801808a:	f04f 30ff 	mov.w	r0, #4294967295
 801808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018096:	63a3      	str	r3, [r4, #56]	; 0x38
 8018098:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801809c:	6360      	str	r0, [r4, #52]	; 0x34
 801809e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80180a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80180a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80180aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80180ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80180b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80180b6:	6020      	str	r0, [r4, #0]
 80180b8:	2000      	movs	r0, #0
 80180ba:	e7e8      	b.n	801808e <__submore+0x1e>
 80180bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80180be:	0077      	lsls	r7, r6, #1
 80180c0:	463a      	mov	r2, r7
 80180c2:	f000 f837 	bl	8018134 <_realloc_r>
 80180c6:	4605      	mov	r5, r0
 80180c8:	2800      	cmp	r0, #0
 80180ca:	d0de      	beq.n	801808a <__submore+0x1a>
 80180cc:	eb00 0806 	add.w	r8, r0, r6
 80180d0:	4601      	mov	r1, r0
 80180d2:	4632      	mov	r2, r6
 80180d4:	4640      	mov	r0, r8
 80180d6:	f7fb fe8b 	bl	8013df0 <memcpy>
 80180da:	f8c4 8000 	str.w	r8, [r4]
 80180de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80180e2:	e7e9      	b.n	80180b8 <__submore+0x48>

080180e4 <__ascii_wctomb>:
 80180e4:	b149      	cbz	r1, 80180fa <__ascii_wctomb+0x16>
 80180e6:	2aff      	cmp	r2, #255	; 0xff
 80180e8:	bf85      	ittet	hi
 80180ea:	238a      	movhi	r3, #138	; 0x8a
 80180ec:	6003      	strhi	r3, [r0, #0]
 80180ee:	700a      	strbls	r2, [r1, #0]
 80180f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80180f4:	bf98      	it	ls
 80180f6:	2001      	movls	r0, #1
 80180f8:	4770      	bx	lr
 80180fa:	4608      	mov	r0, r1
 80180fc:	4770      	bx	lr

080180fe <memmove>:
 80180fe:	4288      	cmp	r0, r1
 8018100:	b510      	push	{r4, lr}
 8018102:	eb01 0302 	add.w	r3, r1, r2
 8018106:	d807      	bhi.n	8018118 <memmove+0x1a>
 8018108:	1e42      	subs	r2, r0, #1
 801810a:	4299      	cmp	r1, r3
 801810c:	d00a      	beq.n	8018124 <memmove+0x26>
 801810e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018112:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018116:	e7f8      	b.n	801810a <memmove+0xc>
 8018118:	4283      	cmp	r3, r0
 801811a:	d9f5      	bls.n	8018108 <memmove+0xa>
 801811c:	1881      	adds	r1, r0, r2
 801811e:	1ad2      	subs	r2, r2, r3
 8018120:	42d3      	cmn	r3, r2
 8018122:	d100      	bne.n	8018126 <memmove+0x28>
 8018124:	bd10      	pop	{r4, pc}
 8018126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801812a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801812e:	e7f7      	b.n	8018120 <memmove+0x22>

08018130 <__malloc_lock>:
 8018130:	4770      	bx	lr

08018132 <__malloc_unlock>:
 8018132:	4770      	bx	lr

08018134 <_realloc_r>:
 8018134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018136:	4607      	mov	r7, r0
 8018138:	4614      	mov	r4, r2
 801813a:	460e      	mov	r6, r1
 801813c:	b921      	cbnz	r1, 8018148 <_realloc_r+0x14>
 801813e:	4611      	mov	r1, r2
 8018140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018144:	f7ff ba06 	b.w	8017554 <_malloc_r>
 8018148:	b922      	cbnz	r2, 8018154 <_realloc_r+0x20>
 801814a:	f7ff f9b5 	bl	80174b8 <_free_r>
 801814e:	4625      	mov	r5, r4
 8018150:	4628      	mov	r0, r5
 8018152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018154:	f000 f814 	bl	8018180 <_malloc_usable_size_r>
 8018158:	42a0      	cmp	r0, r4
 801815a:	d20f      	bcs.n	801817c <_realloc_r+0x48>
 801815c:	4621      	mov	r1, r4
 801815e:	4638      	mov	r0, r7
 8018160:	f7ff f9f8 	bl	8017554 <_malloc_r>
 8018164:	4605      	mov	r5, r0
 8018166:	2800      	cmp	r0, #0
 8018168:	d0f2      	beq.n	8018150 <_realloc_r+0x1c>
 801816a:	4631      	mov	r1, r6
 801816c:	4622      	mov	r2, r4
 801816e:	f7fb fe3f 	bl	8013df0 <memcpy>
 8018172:	4631      	mov	r1, r6
 8018174:	4638      	mov	r0, r7
 8018176:	f7ff f99f 	bl	80174b8 <_free_r>
 801817a:	e7e9      	b.n	8018150 <_realloc_r+0x1c>
 801817c:	4635      	mov	r5, r6
 801817e:	e7e7      	b.n	8018150 <_realloc_r+0x1c>

08018180 <_malloc_usable_size_r>:
 8018180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018184:	1f18      	subs	r0, r3, #4
 8018186:	2b00      	cmp	r3, #0
 8018188:	bfbc      	itt	lt
 801818a:	580b      	ldrlt	r3, [r1, r0]
 801818c:	18c0      	addlt	r0, r0, r3
 801818e:	4770      	bx	lr

08018190 <_init>:
 8018190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018192:	bf00      	nop
 8018194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018196:	bc08      	pop	{r3}
 8018198:	469e      	mov	lr, r3
 801819a:	4770      	bx	lr

0801819c <_fini>:
 801819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801819e:	bf00      	nop
 80181a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181a2:	bc08      	pop	{r3}
 80181a4:	469e      	mov	lr, r3
 80181a6:	4770      	bx	lr
