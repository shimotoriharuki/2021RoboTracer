
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f7c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  08013140  08013140  00023140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a0c  08013a0c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08013a0c  08013a0c  00023a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a14  08013a14  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013a14  08013a14  00023a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a1c  08013a1c  00023a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08013a20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c20  200001dc  08013bfc  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dfc  08013bfc  00034dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029426  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000579b  00000000  00000000  00059632  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dc8  00000000  00000000  0005edd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b58  00000000  00000000  00060b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033454  00000000  00000000  000626f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d398  00000000  00000000  00095b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107bf3  00000000  00000000  000b2edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001baacf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000919c  00000000  00000000  001bab4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013124 	.word	0x08013124

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08013124 	.word	0x08013124

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f004 fb18 	bl	800560c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200029bc 	.word	0x200029bc

08000fe8 <lcd_init>:
void lcd_data(uint8_t data) {
	uint8_t Txdata[2] = { 0x40 , data };
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
}

void lcd_init(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	481e      	ldr	r0, [pc, #120]	; (800106c <lcd_init+0x84>)
 8000ff2:	f004 f9a1 	bl	8005338 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8000ff6:	2028      	movs	r0, #40	; 0x28
 8000ff8:	f002 ff08 	bl	8003e0c <HAL_Delay>
	lcd_cmd(0x38);
 8000ffc:	2038      	movs	r0, #56	; 0x38
 8000ffe:	f7ff ffdb 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f002 ff02 	bl	8003e0c <HAL_Delay>
	lcd_cmd(0x39);
 8001008:	2039      	movs	r0, #57	; 0x39
 800100a:	f7ff ffd5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f002 fefc 	bl	8003e0c <HAL_Delay>
	lcd_cmd(0x14);
 8001014:	2014      	movs	r0, #20
 8001016:	f7ff ffcf 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f002 fef6 	bl	8003e0c <HAL_Delay>
	lcd_cmd(0x70);
 8001020:	2070      	movs	r0, #112	; 0x70
 8001022:	f7ff ffc9 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f002 fef0 	bl	8003e0c <HAL_Delay>
	lcd_cmd(0x56);
 800102c:	2056      	movs	r0, #86	; 0x56
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f002 feea 	bl	8003e0c <HAL_Delay>
	lcd_cmd(0x6C);
 8001038:	206c      	movs	r0, #108	; 0x6c
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800103e:	20c8      	movs	r0, #200	; 0xc8
 8001040:	f002 fee4 	bl	8003e0c <HAL_Delay>
	lcd_cmd(0x38);
 8001044:	2038      	movs	r0, #56	; 0x38
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f002 fede 	bl	8003e0c <HAL_Delay>
	lcd_cmd(0x0C);
 8001050:	200c      	movs	r0, #12
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f002 fed8 	bl	8003e0c <HAL_Delay>
	lcd_cmd(0x01);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f002 fed2 	bl	8003e0c <HAL_Delay>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020000 	.word	0x40020000

08001070 <_ZN7EncoderC1Ev>:
#include "G_variables.h"

#define MAX_ENCODER_CNT 65535
#define CNT_OFFSET 32768

Encoder::Encoder() : cnt_l_(CNT_OFFSET), cnt_r_(CNT_OFFSET){}
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800107e:	801a      	strh	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001086:	805a      	strh	r2, [r3, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80010a0:	213c      	movs	r1, #60	; 0x3c
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <_ZN7Encoder4initEv+0x30>)
 80010a4:	f007 f910 	bl	80082c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80010a8:	213c      	movs	r1, #60	; 0x3c
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <_ZN7Encoder4initEv+0x34>)
 80010ac:	f007 f90c 	bl	80082c8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_ZN7Encoder4initEv+0x38>)
 80010b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <_ZN7Encoder4initEv+0x3c>)
 80010ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20002bd8 	.word	0x20002bd8
 80010cc:	200028f4 	.word	0x200028f4
 80010d0:	40010000 	.word	0x40010000
 80010d4:	40010400 	.word	0x40010400

080010d8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	cnt_l_ = TIM1 -> CNT;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_ZN7Encoder9updateCntEv+0x28>)
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	801a      	strh	r2, [r3, #0]
	cnt_r_ = TIM8 -> CNT;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <_ZN7Encoder9updateCntEv+0x2c>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	805a      	strh	r2, [r3, #2]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40010000 	.word	0x40010000
 8001104:	40010400 	.word	0x40010400

08001108 <_ZN7Encoder6getCntERsS0_>:

void Encoder::getCnt(int16_t &cnt_l, int16_t &cnt_r)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_ - CNT_OFFSET;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800111c:	b29b      	uxth	r3, r3
 800111e:	b21a      	sxth	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	801a      	strh	r2, [r3, #0]
	cnt_r = CNT_OFFSET - cnt_r_;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	885a      	ldrh	r2, [r3, #2]
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <_ZN7Encoder6getCntERsS0_+0x38>)
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	b29b      	uxth	r3, r3
 800112e:	b21a      	sxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	801a      	strh	r2, [r3, #0]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	ffff8000 	.word	0xffff8000

08001144 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	801a      	strh	r2, [r3, #0]
	cnt_r_ = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	805a      	strh	r2, [r3, #2]
	TIM1 -> CNT = CNT_OFFSET;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <_ZN7Encoder8clearCntEv+0x30>)
 800115a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <_ZN7Encoder8clearCntEv+0x34>)
 8001162:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40010000 	.word	0x40010000
 8001178:	40010400 	.word	0x40010400

0800117c <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(char *p_folder_name, char *p_file_name, short size, int *data, char state){
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	4613      	mov	r3, r2
 800118a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f8cc 	bl	8001330 <create_path>

	if(state == OVER_WRITE){
 8001198:	f897 3020 	ldrb.w	r3, [r7, #32]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d108      	bne.n	80011b2 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 80011a0:	481e      	ldr	r0, [pc, #120]	; (800121c <sd_write_array_int+0xa0>)
 80011a2:	f00c faec 	bl	800d77e <f_chdir>
		f_unlink(filepath);	//一回消す
 80011a6:	481e      	ldr	r0, [pc, #120]	; (8001220 <sd_write_array_int+0xa4>)
 80011a8:	f00c fd57 	bl	800dc5a <f_unlink>
		f_chdir("..");
 80011ac:	481d      	ldr	r0, [pc, #116]	; (8001224 <sd_write_array_int+0xa8>)
 80011ae:	f00c fae6 	bl	800d77e <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 80011b2:	f000 f8d3 	bl	800135c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80011b6:	2300      	movs	r3, #0
 80011b8:	82fb      	strh	r3, [r7, #22]
 80011ba:	e021      	b.n	8001200 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 80011bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <sd_write_array_int+0xac>)
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	4817      	ldr	r0, [pc, #92]	; (800122c <sd_write_array_int+0xb0>)
 80011ce:	f00d ff85 	bl	800f0dc <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <sd_write_array_int+0xb4>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4815      	ldr	r0, [pc, #84]	; (8001230 <sd_write_array_int+0xb4>)
 80011da:	f00c fb1a 	bl	800d812 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <sd_write_array_int+0xb0>)
 80011e0:	f7ff f80e 	bl	8000200 <strlen>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <sd_write_array_int+0xb8>)
 80011e8:	4910      	ldr	r1, [pc, #64]	; (800122c <sd_write_array_int+0xb0>)
 80011ea:	4811      	ldr	r0, [pc, #68]	; (8001230 <sd_write_array_int+0xb4>)
 80011ec:	f00c f88b 	bl	800d306 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80011f0:	f000 f8ce 	bl	8001390 <bufclear>
	for(short i = 0 ; i < size; i++){
 80011f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	82fb      	strh	r3, [r7, #22]
 8001200:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001208:	429a      	cmp	r2, r3
 800120a:	dbd7      	blt.n	80011bc <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <sd_write_array_int+0xb4>)
 800120e:	f00c fa8c 	bl	800d72a <f_close>

	return ret;
 8001212:	7d7b      	ldrb	r3, [r7, #21]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20001678 	.word	0x20001678
 8001220:	20000534 	.word	0x20000534
 8001224:	08013148 	.word	0x08013148
 8001228:	0801314c 	.word	0x0801314c
 800122c:	20001778 	.word	0x20001778
 8001230:	20001808 	.word	0x20001808
 8001234:	200017f8 	.word	0x200017f8

08001238 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(char *p_folder_name, char *p_file_name, short size, int *data){
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4613      	mov	r3, r2
 8001246:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 f86c 	bl	8001330 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001258:	f000 f880 	bl	800135c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800125c:	e019      	b.n	8001292 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 800125e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4913      	ldr	r1, [pc, #76]	; (80012b8 <sd_read_array_int+0x80>)
 800126c:	4813      	ldr	r0, [pc, #76]	; (80012bc <sd_read_array_int+0x84>)
 800126e:	f00d ff89 	bl	800f184 <siscanf>
		i++;
 8001272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001276:	b29b      	uxth	r3, r3
 8001278:	3301      	adds	r3, #1
 800127a:	b29b      	uxth	r3, r3
 800127c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800127e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001286:	429a      	cmp	r2, r3
 8001288:	db03      	blt.n	8001292 <sd_read_array_int+0x5a>
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	3b01      	subs	r3, #1
 800128e:	b29b      	uxth	r3, r3
 8001290:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <sd_read_array_int+0x88>)
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <sd_read_array_int+0x84>)
 8001298:	f00c feba 	bl	800e010 <f_gets>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1dd      	bne.n	800125e <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80012a2:	f000 f875 	bl	8001390 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <sd_read_array_int+0x88>)
 80012a8:	f00c fa3f 	bl	800d72a <f_close>

	return ret;
 80012ac:	7d7b      	ldrb	r3, [r7, #21]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08013150 	.word	0x08013150
 80012bc:	20001778 	.word	0x20001778
 80012c0:	20001808 	.word	0x20001808

080012c4 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80012ce:	2201      	movs	r2, #1
 80012d0:	4908      	ldr	r1, [pc, #32]	; (80012f4 <sd_mount+0x30>)
 80012d2:	4809      	ldr	r0, [pc, #36]	; (80012f8 <sd_mount+0x34>)
 80012d4:	f00b fca6 	bl	800cc24 <f_mount>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <sd_mount+0x20>
 80012de:	2301      	movs	r3, #1
 80012e0:	71fb      	strb	r3, [r7, #7]
 80012e2:	e001      	b.n	80012e8 <sd_mount+0x24>
	else ret = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08013154 	.word	0x08013154
 80012f8:	20000634 	.word	0x20000634

080012fc <sd_unmount>:
//* 役割　：　SDカードをアンマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_unmount(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]

	if(f_mount(NULL, "", 1) == FR_OK) ret = 1;
 8001306:	2201      	movs	r2, #1
 8001308:	4908      	ldr	r1, [pc, #32]	; (800132c <sd_unmount+0x30>)
 800130a:	2000      	movs	r0, #0
 800130c:	f00b fc8a 	bl	800cc24 <f_mount>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <sd_unmount+0x20>
 8001316:	2301      	movs	r3, #1
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e001      	b.n	8001320 <sd_unmount+0x24>
	else ret = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001320:	79fb      	ldrb	r3, [r7, #7]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	08013154 	.word	0x08013154

08001330 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char *p_folder_name, char *p_file_name){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <create_path+0x24>)
 800133e:	f00d ff90 	bl	800f262 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <create_path+0x28>)
 8001346:	f00d ff8c 	bl	800f262 <strcpy>

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20001678 	.word	0x20001678
 8001358:	20000534 	.word	0x20000534

0800135c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <fopen_folder_and_file+0x24>)
 8001362:	f00c fd3b 	bl	800dddc <f_mkdir>

	f_chdir(dirpath);
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <fopen_folder_and_file+0x24>)
 8001368:	f00c fa09 	bl	800d77e <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800136c:	2213      	movs	r2, #19
 800136e:	4905      	ldr	r1, [pc, #20]	; (8001384 <fopen_folder_and_file+0x28>)
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <fopen_folder_and_file+0x2c>)
 8001372:	f00b fc9d 	bl	800ccb0 <f_open>

	f_chdir("..");
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <fopen_folder_and_file+0x30>)
 8001378:	f00c fa01 	bl	800d77e <f_chdir>


}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20001678 	.word	0x20001678
 8001384:	20000534 	.word	0x20000534
 8001388:	20001808 	.word	0x20001808
 800138c:	08013148 	.word	0x08013148

08001390 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e007      	b.n	80013ac <bufclear+0x1c>
		buffer[i] = '\0';
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <bufclear+0x30>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3301      	adds	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b7f      	cmp	r3, #127	; 0x7f
 80013b0:	ddf4      	ble.n	800139c <bufclear+0xc>
	}
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20001778 	.word	0x20001778

080013c4 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
{

}
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 80013e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ec:	482a      	ldr	r0, [pc, #168]	; (8001498 <_ZN8JoyStick8getValueEv+0xbc>)
 80013ee:	f003 ff8b 	bl	8005308 <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <_ZN8JoyStick8getValueEv+0x2e>
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800140a:	2101      	movs	r1, #1
 800140c:	4823      	ldr	r0, [pc, #140]	; (800149c <_ZN8JoyStick8getValueEv+0xc0>)
 800140e:	f003 ff7b 	bl	8005308 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <_ZN8JoyStick8getValueEv+0x4e>
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800142a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142e:	481a      	ldr	r0, [pc, #104]	; (8001498 <_ZN8JoyStick8getValueEv+0xbc>)
 8001430:	f003 ff6a 	bl	8005308 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <_ZN8JoyStick8getValueEv+0x70>
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800144c:	2104      	movs	r1, #4
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <_ZN8JoyStick8getValueEv+0xc4>)
 8001450:	f003 ff5a 	bl	8005308 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	bf0c      	ite	eq
 800145a:	2301      	moveq	r3, #1
 800145c:	2300      	movne	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <_ZN8JoyStick8getValueEv+0x90>
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	480a      	ldr	r0, [pc, #40]	; (8001498 <_ZN8JoyStick8getValueEv+0xbc>)
 8001470:	f003 ff4a 	bl	8005308 <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	bf0c      	ite	eq
 800147a:	2301      	moveq	r3, #1
 800147c:	2300      	movne	r3, #0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <_ZN8JoyStick8getValueEv+0xb0>
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800148c:	89fb      	ldrh	r3, [r7, #14]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40020400 	.word	0x40020400

080014a4 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	2b52      	cmp	r3, #82	; 0x52
 80014b4:	d112      	bne.n	80014dc <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014bc:	4856      	ldr	r0, [pc, #344]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80014be:	f003 ff3b 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c8:	4853      	ldr	r0, [pc, #332]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80014ca:	f003 ff35 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d4:	4850      	ldr	r0, [pc, #320]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80014d6:	f003 ff2f 	bl	8005338 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80014da:	e098      	b.n	800160e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	2b47      	cmp	r3, #71	; 0x47
 80014e0:	d112      	bne.n	8001508 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e8:	484b      	ldr	r0, [pc, #300]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80014ea:	f003 ff25 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f4:	4848      	ldr	r0, [pc, #288]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80014f6:	f003 ff1f 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001500:	4845      	ldr	r0, [pc, #276]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 8001502:	f003 ff19 	bl	8005338 <HAL_GPIO_WritePin>
}
 8001506:	e082      	b.n	800160e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	2b42      	cmp	r3, #66	; 0x42
 800150c:	d112      	bne.n	8001534 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001514:	4840      	ldr	r0, [pc, #256]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 8001516:	f003 ff0f 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001520:	483d      	ldr	r0, [pc, #244]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 8001522:	f003 ff09 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	483a      	ldr	r0, [pc, #232]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 800152e:	f003 ff03 	bl	8005338 <HAL_GPIO_WritePin>
}
 8001532:	e06c      	b.n	800160e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b43      	cmp	r3, #67	; 0x43
 8001538:	d112      	bne.n	8001560 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001540:	4835      	ldr	r0, [pc, #212]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 8001542:	f003 fef9 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154c:	4832      	ldr	r0, [pc, #200]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 800154e:	f003 fef3 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	482f      	ldr	r0, [pc, #188]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 800155a:	f003 feed 	bl	8005338 <HAL_GPIO_WritePin>
}
 800155e:	e056      	b.n	800160e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	2b4d      	cmp	r3, #77	; 0x4d
 8001564:	d112      	bne.n	800158c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800156c:	482a      	ldr	r0, [pc, #168]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 800156e:	f003 fee3 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001578:	4827      	ldr	r0, [pc, #156]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 800157a:	f003 fedd 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001584:	4824      	ldr	r0, [pc, #144]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 8001586:	f003 fed7 	bl	8005338 <HAL_GPIO_WritePin>
}
 800158a:	e040      	b.n	800160e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2b59      	cmp	r3, #89	; 0x59
 8001590:	d112      	bne.n	80015b8 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001598:	481f      	ldr	r0, [pc, #124]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 800159a:	f003 fecd 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80015a6:	f003 fec7 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b0:	4819      	ldr	r0, [pc, #100]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80015b2:	f003 fec1 	bl	8005338 <HAL_GPIO_WritePin>
}
 80015b6:	e02a      	b.n	800160e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	2b57      	cmp	r3, #87	; 0x57
 80015bc:	d112      	bne.n	80015e4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80015c6:	f003 feb7 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d0:	4811      	ldr	r0, [pc, #68]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80015d2:	f003 feb1 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015dc:	480e      	ldr	r0, [pc, #56]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80015de:	f003 feab 	bl	8005338 <HAL_GPIO_WritePin>
}
 80015e2:	e014      	b.n	800160e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	2b7e      	cmp	r3, #126	; 0x7e
 80015e8:	d111      	bne.n	800160e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80015f2:	f003 fea1 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 80015fe:	f003 fe9b 	bl	8005338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <_ZN3LED9fullColorEc+0x174>)
 800160a:	f003 fe95 	bl	8005338 <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40020000 	.word	0x40020000

0800161c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
 8001628:	4613      	mov	r3, r2
 800162a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800162c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d106      	bne.n	8001642 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163a:	4813      	ldr	r0, [pc, #76]	; (8001688 <_ZN3LED2LREaa+0x6c>)
 800163c:	f003 fe7c 	bl	8005338 <HAL_GPIO_WritePin>
 8001640:	e009      	b.n	8001656 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001642:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d105      	bne.n	8001656 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <_ZN3LED2LREaa+0x6c>)
 8001652:	f003 fe71 	bl	8005338 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001656:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d106      	bne.n	800166c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001664:	4808      	ldr	r0, [pc, #32]	; (8001688 <_ZN3LED2LREaa+0x6c>)
 8001666:	f003 fe67 	bl	8005338 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800166a:	e009      	b.n	8001680 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800166c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <_ZN3LED2LREaa+0x6c>)
 800167c:	f003 fe5c 	bl	8005338 <HAL_GPIO_WritePin>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40020000 	.word	0x40020000

0800168c <_ZN10LineSensorC1Ev>:

#include <stdio.h>
#include <LineSensor.hpp>
#include "G_variables.h"

LineSensor::LineSensor()
 800168c:	b580      	push	{r7, lr}
 800168e:	b092      	sub	sp, #72	; 0x48
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3355      	adds	r3, #85	; 0x55
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe93 	bl	80013c4 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
 80016a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a4:	647b      	str	r3, [r7, #68]	; 0x44
 80016a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a8:	331c      	adds	r3, #28
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
 80016ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d008      	beq.n	80016c6 <_ZN10LineSensorC1Ev+0x3a>
 80016b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80016b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ba:	2200      	movs	r2, #0
 80016bc:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80016be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c0:	3302      	adds	r3, #2
 80016c2:	647b      	str	r3, [r7, #68]	; 0x44
 80016c4:	e7f2      	b.n	80016ac <_ZN10LineSensorC1Ev+0x20>
	}
	for(auto &s : sensor){
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3358      	adds	r3, #88	; 0x58
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80016cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
 80016d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d2:	331c      	adds	r3, #28
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	429a      	cmp	r2, r3
 80016dc:	d008      	beq.n	80016f0 <_ZN10LineSensorC1Ev+0x64>
 80016de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016e0:	623b      	str	r3, [r7, #32]
		s = 0;
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	2200      	movs	r2, #0
 80016e6:	801a      	strh	r2, [r3, #0]
	for(auto &s : sensor){
 80016e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ea:	3302      	adds	r3, #2
 80016ec:	643b      	str	r3, [r7, #64]	; 0x40
 80016ee:	e7f2      	b.n	80016d6 <_ZN10LineSensorC1Ev+0x4a>
	}
	for(auto &m : offset_values){
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3374      	adds	r3, #116	; 0x74
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	331c      	adds	r3, #28
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	429a      	cmp	r2, r3
 8001706:	d008      	beq.n	800171a <_ZN10LineSensorC1Ev+0x8e>
 8001708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800170a:	617b      	str	r3, [r7, #20]
		m = 0;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2200      	movs	r2, #0
 8001710:	801a      	strh	r2, [r3, #0]
	for(auto &m : offset_values){
 8001712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001714:	3302      	adds	r3, #2
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001718:	e7f2      	b.n	8001700 <_ZN10LineSensorC1Ev+0x74>
	}
	for(auto &s : sensor_coefficient_){
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	331c      	adds	r3, #28
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	3338      	adds	r3, #56	; 0x38
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	429a      	cmp	r2, r3
 8001730:	d009      	beq.n	8001746 <_ZN10LineSensorC1Ev+0xba>
 8001732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001734:	60bb      	str	r3, [r7, #8]
		s = 1;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800173c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800173e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001740:	3304      	adds	r3, #4
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
 8001744:	e7f1      	b.n	800172a <_ZN10LineSensorC1Ev+0x9e>
	}

}
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	3748      	adds	r7, #72	; 0x48
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	220e      	movs	r2, #14
 800175c:	4619      	mov	r1, r3
 800175e:	4803      	ldr	r0, [pc, #12]	; (800176c <_ZN10LineSensor8ADCStartEv+0x1c>)
 8001760:	f002 fbba 	bl	8003ed8 <HAL_ADC_Start_DMA>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20002974 	.word	0x20002974

08001770 <_ZN10LineSensor19updateSensorvalusesEv>:

void LineSensor::updateSensorvaluses()
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < AD_DATA_SIZE; i++){
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	2b0d      	cmp	r3, #13
 8001780:	d827      	bhi.n	80017d2 <_ZN10LineSensor19updateSensorvalusesEv+0x62>
		sensor[i] = (analog_val_[i] - offset_values[i]) * sensor_coefficient_[i];
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800178a:	4619      	mov	r1, r3
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	3338      	adds	r3, #56	; 0x38
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	889b      	ldrh	r3, [r3, #4]
 8001798:	1acb      	subs	r3, r1, r3
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	3306      	adds	r3, #6
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3304      	adds	r3, #4
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017bc:	ee17 3a90 	vmov	r3, s15
 80017c0:	b299      	uxth	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	322c      	adds	r2, #44	; 0x2c
 80017c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0; i < AD_DATA_SIZE; i++){
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	3301      	adds	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e7d4      	b.n	800177c <_ZN10LineSensor19updateSensorvalusesEv+0xc>
	}

}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b09a      	sub	sp, #104	; 0x68
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80017e8:	2064      	movs	r0, #100	; 0x64
 80017ea:	f002 fb0f 	bl	8003e0c <HAL_Delay>

	uint16_t max_values[AD_DATA_SIZE];
	uint16_t min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80017f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017f8:	2b0d      	cmp	r3, #13
 80017fa:	d821      	bhi.n	8001840 <_ZN10LineSensor11calibrationEv+0x60>
		max_values[i] = sensor[i];
 80017fc:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 8001800:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	312c      	adds	r1, #44	; 0x2c
 8001808:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001812:	440b      	add	r3, r1
 8001814:	f823 2c44 	strh.w	r2, [r3, #-68]
		min_values[i] = sensor[i];
 8001818:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 800181c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	312c      	adds	r1, #44	; 0x2c
 8001824:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800182e:	440b      	add	r3, r1
 8001830:	f823 2c60 	strh.w	r2, [r3, #-96]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001834:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001838:	3301      	adds	r3, #1
 800183a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800183e:	e7d9      	b.n	80017f4 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3355      	adds	r3, #85	; 0x55
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fdc9 	bl	80013dc <_ZN8JoyStick8getValueEv>
 800184a:	4603      	mov	r3, r0
 800184c:	2b02      	cmp	r3, #2
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2300      	moveq	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d068      	beq.n	800192c <_ZN10LineSensor11calibrationEv+0x14c>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800185a:	2300      	movs	r3, #0
 800185c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001860:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001864:	2b0d      	cmp	r3, #13
 8001866:	d842      	bhi.n	80018ee <_ZN10LineSensor11calibrationEv+0x10e>
			if(max_values[i] < sensor[i]){
 8001868:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001872:	4413      	add	r3, r2
 8001874:	f833 2c44 	ldrh.w	r2, [r3, #-68]
 8001878:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	312c      	adds	r1, #44	; 0x2c
 8001880:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001884:	429a      	cmp	r2, r3
 8001886:	d20e      	bcs.n	80018a6 <_ZN10LineSensor11calibrationEv+0xc6>
				max_values[i] = sensor[i];
 8001888:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800188c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	312c      	adds	r1, #44	; 0x2c
 8001894:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800189e:	440b      	add	r3, r1
 80018a0:	f823 2c44 	strh.w	r2, [r3, #-68]
 80018a4:	e01d      	b.n	80018e2 <_ZN10LineSensor11calibrationEv+0x102>
			}
			else if(min_values[i] > sensor[i]){
 80018a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80018b0:	4413      	add	r3, r2
 80018b2:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 80018b6:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	312c      	adds	r1, #44	; 0x2c
 80018be:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d90d      	bls.n	80018e2 <_ZN10LineSensor11calibrationEv+0x102>
				min_values[i] = sensor[i];
 80018c6:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80018ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	312c      	adds	r1, #44	; 0x2c
 80018d2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80018dc:	440b      	add	r3, r1
 80018de:	f823 2c60 	strh.w	r2, [r3, #-96]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80018e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80018e6:	3301      	adds	r3, #1
 80018e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80018ec:	e7b8      	b.n	8001860 <_ZN10LineSensor11calibrationEv+0x80>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3356      	adds	r3, #86	; 0x56
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f9c2 	bl	8001c7c <_ZN12RotarySwitch8getValueEv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf0c      	ite	eq
 80018fe:	2301      	moveq	r3, #1
 8001900:	2300      	movne	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <_ZN10LineSensor11calibrationEv+0x13a>
			led_.LR(-1, 1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3354      	adds	r3, #84	; 0x54
 800190c:	2201      	movs	r2, #1
 800190e:	f04f 31ff 	mov.w	r1, #4294967295
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe82 	bl	800161c <_ZN3LED2LREaa>
 8001918:	e792      	b.n	8001840 <_ZN10LineSensor11calibrationEv+0x60>

		}
		else{
			led_.LR(-1, 0);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3354      	adds	r3, #84	; 0x54
 800191e:	2200      	movs	r2, #0
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe79 	bl	800161c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800192a:	e789      	b.n	8001840 <_ZN10LineSensor11calibrationEv+0x60>

		}
	}

	for(const auto &m : max_values){
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	657b      	str	r3, [r7, #84]	; 0x54
 8001932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001934:	663b      	str	r3, [r7, #96]	; 0x60
 8001936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001938:	331c      	adds	r3, #28
 800193a:	653b      	str	r3, [r7, #80]	; 0x50
 800193c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800193e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001940:	429a      	cmp	r2, r3
 8001942:	d00b      	beq.n	800195c <_ZN10LineSensor11calibrationEv+0x17c>
 8001944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, ", m);
 8001948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	483b      	ldr	r0, [pc, #236]	; (8001a3c <_ZN10LineSensor11calibrationEv+0x25c>)
 8001950:	f00d fb2e 	bl	800efb0 <iprintf>
	for(const auto &m : max_values){
 8001954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001956:	3302      	adds	r3, #2
 8001958:	663b      	str	r3, [r7, #96]	; 0x60
 800195a:	e7ef      	b.n	800193c <_ZN10LineSensor11calibrationEv+0x15c>
	}
		printf("\n");
 800195c:	200a      	movs	r0, #10
 800195e:	f00d fb3f 	bl	800efe0 <putchar>
	for(const auto &m : min_values){
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
 8001968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800196a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800196c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800196e:	331c      	adds	r3, #28
 8001970:	647b      	str	r3, [r7, #68]	; 0x44
 8001972:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001976:	429a      	cmp	r2, r3
 8001978:	d00b      	beq.n	8001992 <_ZN10LineSensor11calibrationEv+0x1b2>
 800197a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197c:	643b      	str	r3, [r7, #64]	; 0x40
		printf("%d, ", m);
 800197e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	482d      	ldr	r0, [pc, #180]	; (8001a3c <_ZN10LineSensor11calibrationEv+0x25c>)
 8001986:	f00d fb13 	bl	800efb0 <iprintf>
	for(const auto &m : min_values){
 800198a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198c:	3302      	adds	r3, #2
 800198e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001990:	e7ef      	b.n	8001972 <_ZN10LineSensor11calibrationEv+0x192>
	}
		printf("\n");
 8001992:	200a      	movs	r0, #10
 8001994:	f00d fb24 	bl	800efe0 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001998:	2300      	movs	r3, #0
 800199a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800199e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80019a2:	2b0d      	cmp	r3, #13
 80019a4:	d828      	bhi.n	80019f8 <_ZN10LineSensor11calibrationEv+0x218>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80019a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80019b0:	4413      	add	r3, r2
 80019b2:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80019c2:	440b      	add	r3, r1
 80019c4:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80019d2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80019d6:	ee07 2a90 	vmov	s15, r2
 80019da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	3306      	adds	r3, #6
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3304      	adds	r3, #4
 80019e8:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80019ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80019f0:	3301      	adds	r3, #1
 80019f2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80019f6:	e7d2      	b.n	800199e <_ZN10LineSensor11calibrationEv+0x1be>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80019fe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001a02:	2b0d      	cmp	r3, #13
 8001a04:	d816      	bhi.n	8001a34 <_ZN10LineSensor11calibrationEv+0x254>
		offset_values[i] = min_values[i];
 8001a06:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001a0a:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001a14:	4413      	add	r3, r2
 8001a16:	f833 0c60 	ldrh.w	r0, [r3, #-96]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	4602      	mov	r2, r0
 8001a26:	809a      	strh	r2, [r3, #4]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001a28:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001a32:	e7e4      	b.n	80019fe <_ZN10LineSensor11calibrationEv+0x21e>
	}

}
 8001a34:	bf00      	nop
 8001a36:	3768      	adds	r7, #104	; 0x68
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	08013158 	.word	0x08013158

08001a40 <_ZN9LineTraceC1EP5MotorP10LineSensor>:
 */

#include "LineTrace.hpp"
#include <stdio.h>

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor) : kp_(0), kd_(0), ki_(0){
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
	motor_ = motor;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	605a      	str	r2, [r3, #4]
}
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a8a:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a8e:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	609a      	str	r2, [r3, #8]
	kd_ = kd;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	60da      	str	r2, [r3, #12]
	ki_ = ki;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	611a      	str	r2, [r3, #16]

}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	801a      	strh	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	805a      	strh	r2, [r3, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <_ZN5Motor4initEv>:

void Motor::init()
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001adc:	2108      	movs	r1, #8
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <_ZN5Motor4initEv+0x20>)
 8001ae0:	f006 fb22 	bl	8008128 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001ae4:	210c      	movs	r1, #12
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <_ZN5Motor4initEv+0x20>)
 8001ae8:	f006 fb1e 	bl	8008128 <HAL_TIM_PWM_Start>

}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20002934 	.word	0x20002934

08001af8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	da0d      	bge.n	8001b26 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b10:	481f      	ldr	r0, [pc, #124]	; (8001b90 <_ZN5Motor9motorCtrlEv+0x98>)
 8001b12:	f003 fc11 	bl	8005338 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	425b      	negs	r3, r3
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	81fb      	strh	r3, [r7, #14]
 8001b24:	e00a      	b.n	8001b3c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2c:	4818      	ldr	r0, [pc, #96]	; (8001b90 <_ZN5Motor9motorCtrlEv+0x98>)
 8001b2e:	f003 fc03 	bl	8005338 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da0d      	bge.n	8001b62 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4c:	4810      	ldr	r0, [pc, #64]	; (8001b90 <_ZN5Motor9motorCtrlEv+0x98>)
 8001b4e:	f003 fbf3 	bl	8005338 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	81bb      	strh	r3, [r7, #12]
 8001b60:	e00a      	b.n	8001b78 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <_ZN5Motor9motorCtrlEv+0x98>)
 8001b6a:	f003 fbe5 	bl	8005338 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8001b78:	89fa      	ldrh	r2, [r7, #14]
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <_ZN5Motor9motorCtrlEv+0x9c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8001b80:	89ba      	ldrh	r2, [r7, #12]
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <_ZN5Motor9motorCtrlEv+0x9c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	20002934 	.word	0x20002934

08001b98 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6178      	str	r0, [r7, #20]
 8001ba0:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ba4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <_ZN5Motor8setRatioEdd+0xd8>)
 8001bae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb2:	f7fe ffc9 	bl	8000b48 <__aeabi_dcmpgt>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <_ZN5Motor8setRatioEdd+0x30>
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	4c2b      	ldr	r4, [pc, #172]	; (8001c70 <_ZN5Motor8setRatioEdd+0xd8>)
 8001bc2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001bc6:	e00e      	b.n	8001be6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <_ZN5Motor8setRatioEdd+0xdc>)
 8001bce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bd2:	f7fe ff9b 	bl	8000b0c <__aeabi_dcmplt>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <_ZN5Motor8setRatioEdd+0x4e>
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	4c24      	ldr	r4, [pc, #144]	; (8001c74 <_ZN5Motor8setRatioEdd+0xdc>)
 8001be2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <_ZN5Motor8setRatioEdd+0xd8>)
 8001bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf0:	f7fe ffaa 	bl	8000b48 <__aeabi_dcmpgt>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <_ZN5Motor8setRatioEdd+0x6e>
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	4c1c      	ldr	r4, [pc, #112]	; (8001c70 <_ZN5Motor8setRatioEdd+0xd8>)
 8001c00:	e9c7 3400 	strd	r3, r4, [r7]
 8001c04:	e00e      	b.n	8001c24 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <_ZN5Motor8setRatioEdd+0xdc>)
 8001c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c10:	f7fe ff7c 	bl	8000b0c <__aeabi_dcmplt>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <_ZN5Motor8setRatioEdd+0x8c>
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	4c15      	ldr	r4, [pc, #84]	; (8001c74 <_ZN5Motor8setRatioEdd+0xdc>)
 8001c20:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <_ZN5Motor8setRatioEdd+0xe0>)
 8001c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c2e:	f7fe fcfb 	bl	8000628 <__aeabi_dmul>
 8001c32:	4603      	mov	r3, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	4618      	mov	r0, r3
 8001c38:	4621      	mov	r1, r4
 8001c3a:	f7fe ffa5 	bl	8000b88 <__aeabi_d2iz>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <_ZN5Motor8setRatioEdd+0xe0>)
 8001c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c50:	f7fe fcea 	bl	8000628 <__aeabi_dmul>
 8001c54:	4603      	mov	r3, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	f7fe ff94 	bl	8000b88 <__aeabi_d2iz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	805a      	strh	r2, [r3, #2]

}
 8001c68:	bf00      	nop
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	3ff00000 	.word	0x3ff00000
 8001c74:	bff00000 	.word	0xbff00000
 8001c78:	409c2000 	.word	0x409c2000

08001c7c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4822      	ldr	r0, [pc, #136]	; (8001d14 <_ZN12RotarySwitch8getValueEv+0x98>)
 8001c8c:	f003 fb3c 	bl	8005308 <HAL_GPIO_ReadPin>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf0c      	ite	eq
 8001c96:	2301      	moveq	r3, #1
 8001c98:	2300      	movne	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <_ZN12RotarySwitch8getValueEv+0x2c>
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8001ca8:	2108      	movs	r1, #8
 8001caa:	481a      	ldr	r0, [pc, #104]	; (8001d14 <_ZN12RotarySwitch8getValueEv+0x98>)
 8001cac:	f003 fb2c 	bl	8005308 <HAL_GPIO_ReadPin>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <_ZN12RotarySwitch8getValueEv+0x4c>
 8001cc0:	89fb      	ldrh	r3, [r7, #14]
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8001cc8:	2110      	movs	r1, #16
 8001cca:	4812      	ldr	r0, [pc, #72]	; (8001d14 <_ZN12RotarySwitch8getValueEv+0x98>)
 8001ccc:	f003 fb1c 	bl	8005308 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf0c      	ite	eq
 8001cd6:	2301      	moveq	r3, #1
 8001cd8:	2300      	movne	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <_ZN12RotarySwitch8getValueEv+0x6c>
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	480a      	ldr	r0, [pc, #40]	; (8001d14 <_ZN12RotarySwitch8getValueEv+0x98>)
 8001cec:	f003 fb0c 	bl	8005308 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <_ZN12RotarySwitch8getValueEv+0x8c>
 8001d00:	89fb      	ldrh	r3, [r7, #14]
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001d08:	89fb      	ldrh	r3, [r7, #14]

}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40020c00 	.word	0x40020c00

08001d18 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
{

}
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d111      	bne.n	8001d66 <_ZN10SideSensor12updateStatusEt+0x36>
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	f083 0301 	eor.w	r3, r3, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e010      	b.n	8001d88 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d10d      	bne.n	8001d88 <_ZN10SideSensor12updateStatusEt+0x58>
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d009      	beq.n	8001d88 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	f083 0301 	eor.w	r3, r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d8e:	d111      	bne.n	8001db4 <_ZN10SideSensor12updateStatusEt+0x84>
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	f083 0301 	eor.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8001db2:	e011      	b.n	8001dd8 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dba:	d10d      	bne.n	8001dd8 <_ZN10SideSensor12updateStatusEt+0xa8>
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	f083 0302 	eor.w	r3, r3, #2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	200001f8 	.word	0x200001f8
 8001de8:	200001f9 	.word	0x200001f9

08001dec <_ZN12VelocityCtrlC1EP5MotorP7Encoder>:
 *      Author: Haruki Shimotori
 */

#include "VelocityCtrl.hpp"

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder) :
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0), o_kp_(0), o_kd_(0), o_ki_(0)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
{
	motor_ = motor;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
	encoder_ = encoder;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	0000      	movs	r0, r0
 8001e64:	0000      	movs	r0, r0
	...

08001e68 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	int16_t enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	f107 010a 	add.w	r1, r7, #10
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff f943 	bl	8001108 <_ZN7Encoder6getCntERsS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8001e82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e86:	461a      	mov	r2, r3
 8001e88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	0fda      	lsrs	r2, r3, #31
 8001e90:	4413      	add	r3, r2
 8001e92:	105b      	asrs	r3, r3, #1
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9c:	edc7 7a03 	vstr	s15, [r7, #12]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7fe fb69 	bl	8000578 <__aeabi_f2d>
 8001ea6:	a30c      	add	r3, pc, #48	; (adr r3, 8001ed8 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe fbbc 	bl	8000628 <__aeabi_dmul>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	460c      	mov	r4, r1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	f7fe feae 	bl	8000c18 <__aeabi_d2f>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	ee07 3a90 	vmov	s15, r3
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	1ab1d998 	.word	0x1ab1d998
 8001edc:	3fa830b5 	.word	0x3fa830b5

08001ee0 <_ZN12VelocityCtrl3pidEv>:


void VelocityCtrl::pid()
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	float diff = target_velocity_ - current_velocity_;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	ed93 7a00 	vldr	s14, [r3]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef8:	edc7 7a03 	vstr	s15, [r7, #12]
	float p = v_kp_ * diff;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f02:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(p, p);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001f12:	68b8      	ldr	r0, [r7, #8]
 8001f14:	f7fe fb30 	bl	8000578 <__aeabi_f2d>
 8001f18:	4605      	mov	r5, r0
 8001f1a:	460e      	mov	r6, r1
 8001f1c:	68b8      	ldr	r0, [r7, #8]
 8001f1e:	f7fe fb2b 	bl	8000578 <__aeabi_f2d>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	ec43 2b11 	vmov	d1, r2, r3
 8001f2a:	ec46 5b10 	vmov	d0, r5, r6
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7ff fe32 	bl	8001b98 <_ZN5Motor8setRatioEdd>
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3c <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f48:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	605a      	str	r2, [r3, #4]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f70:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f74:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	611a      	str	r2, [r3, #16]
	v_kd_ = kd;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	615a      	str	r2, [r3, #20]
	v_ki_ = ki;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_ZN12VelocityCtrl4flipEv>:
	o_kd_ = kd;
	o_ki_ = ki;
}

float VelocityCtrl::flip()
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]

	float velocity;
	velocity = calcVelocity();
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff62 	bl	8001e68 <_ZN12VelocityCtrl12calcVelocityEv>
 8001fa4:	ed87 0a03 	vstr	s0, [r7, #12]
	pid();
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff99 	bl	8001ee0 <_ZN12VelocityCtrl3pidEv>

	return velocity;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	ee07 3a90 	vmov	s15, r3

}
 8001fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fc6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fca:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d013      	beq.n	8001ffe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001fd6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fda:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001fde:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001fe6:	e000      	b.n	8001fea <ITM_SendChar+0x2c>
    {
      __NOP();
 8001fe8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001fea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f9      	beq.n	8001fe8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ff4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ffe:	687b      	ldr	r3, [r7, #4]
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e009      	b.n	8002032 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	60ba      	str	r2, [r7, #8]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ffc9 	bl	8001fbe <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3301      	adds	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	dbf1      	blt.n	800201e <_write+0x12>
  }
  return len;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	4618      	mov	r0, r3
 8002052:	f001 fd9b 	bl	8003b8c <cppExit>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
	cppFlip();
 8002066:	f001 fd6f 	bl	8003b48 <cppFlip>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <init>:

void init()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af02      	add	r7, sp, #8
	      Error_Handler();
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 65535);
	*/

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002080:	481f      	ldr	r0, [pc, #124]	; (8002100 <init+0x8c>)
 8002082:	f003 f959 	bl	8005338 <HAL_GPIO_WritePin>

	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8002086:	213c      	movs	r1, #60	; 0x3c
 8002088:	481e      	ldr	r0, [pc, #120]	; (8002104 <init+0x90>)
 800208a:	f006 f91d 	bl	80082c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800208e:	213c      	movs	r1, #60	; 0x3c
 8002090:	481d      	ldr	r0, [pc, #116]	; (8002108 <init+0x94>)
 8002092:	f006 f919 	bl	80082c8 <HAL_TIM_Encoder_Start>

	//Timer intrruptin start
	HAL_TIM_Base_Start_IT(&htim6);
 8002096:	481d      	ldr	r0, [pc, #116]	; (800210c <init+0x98>)
 8002098:	f005 fff7 	bl	800808a <HAL_TIM_Base_Start_IT>

	lcd_init();
 800209c:	f7fe ffa4 	bl	8000fe8 <lcd_init>

	if(sd_mount() == 1){
 80020a0:	f7ff f910 	bl	80012c4 <sd_mount>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d103      	bne.n	80020b2 <init+0x3e>
	  printf("mount success\r\n");
 80020aa:	4819      	ldr	r0, [pc, #100]	; (8002110 <init+0x9c>)
 80020ac:	f00d f808 	bl	800f0c0 <puts>
 80020b0:	e002      	b.n	80020b8 <init+0x44>
	}
	else{
	  printf("error\r\n");
 80020b2:	4818      	ldr	r0, [pc, #96]	; (8002114 <init+0xa0>)
 80020b4:	f00d f804 	bl	800f0c0 <puts>
	}

	data[0] = 30;
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <init+0xa4>)
 80020ba:	221e      	movs	r2, #30
 80020bc:	601a      	str	r2, [r3, #0]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 80020be:	2301      	movs	r3, #1
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <init+0xa4>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	4915      	ldr	r1, [pc, #84]	; (800211c <init+0xa8>)
 80020c8:	4815      	ldr	r0, [pc, #84]	; (8002120 <init+0xac>)
 80020ca:	f7ff f857 	bl	800117c <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <init+0xb0>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	4912      	ldr	r1, [pc, #72]	; (800211c <init+0xa8>)
 80020d4:	4812      	ldr	r0, [pc, #72]	; (8002120 <init+0xac>)
 80020d6:	f7ff f8af 	bl	8001238 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80020da:	2301      	movs	r3, #1
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <init+0xb0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	4911      	ldr	r1, [pc, #68]	; (8002128 <init+0xb4>)
 80020e4:	480e      	ldr	r0, [pc, #56]	; (8002120 <init+0xac>)
 80020e6:	f7ff f849 	bl	800117c <sd_write_array_int>

	printf("sd write and read success!!\r\n");
 80020ea:	4810      	ldr	r0, [pc, #64]	; (800212c <init+0xb8>)
 80020ec:	f00c ffe8 	bl	800f0c0 <puts>
	sd_unmount();
 80020f0:	f7ff f904 	bl	80012fc <sd_unmount>

	cppInit();
 80020f4:	f001 fcf8 	bl	8003ae8 <cppInit>
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	20002bd8 	.word	0x20002bd8
 8002108:	200028f4 	.word	0x200028f4
 800210c:	20002b98 	.word	0x20002b98
 8002110:	08013198 	.word	0x08013198
 8002114:	080131a8 	.word	0x080131a8
 8002118:	20002b94 	.word	0x20002b94
 800211c:	080131b0 	.word	0x080131b0
 8002120:	080131bc 	.word	0x080131bc
 8002124:	20002aa4 	.word	0x20002aa4
 8002128:	080131c4 	.word	0x080131c4
 800212c:	080131d0 	.word	0x080131d0

08002130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002134:	f001 fdf8 	bl	8003d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002138:	f000 f828 	bl	800218c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800213c:	f000 fd98 	bl	8002c70 <MX_GPIO_Init>
  MX_DMA_Init();
 8002140:	f000 fd66 	bl	8002c10 <MX_DMA_Init>
  MX_I2C2_Init();
 8002144:	f000 f9e6 	bl	8002514 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002148:	f000 fa12 	bl	8002570 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800214c:	f000 fa30 	bl	80025b0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002150:	f000 fa64 	bl	800261c <MX_TIM1_Init>
  MX_TIM4_Init();
 8002154:	f000 fb6e 	bl	8002834 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002158:	f000 fc3c 	bl	80029d4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800215c:	f000 fd2e 	bl	8002bbc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002160:	f007 ff66 	bl	800a030 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002164:	f000 fbca 	bl	80028fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8002168:	f000 fbfe 	bl	8002968 <MX_TIM7_Init>
  MX_I2C1_Init();
 800216c:	f000 f9a4 	bl	80024b8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002170:	f000 fafc 	bl	800276c <MX_TIM3_Init>
  MX_TIM10_Init();
 8002174:	f000 fc86 	bl	8002a84 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002178:	f000 fcd2 	bl	8002b20 <MX_TIM11_Init>
  MX_ADC2_Init();
 800217c:	f000 f894 	bl	80022a8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8002180:	f7ff ff78 	bl	8002074 <init>


	  //printf("side: %d\n", side);


	  cppLoop();
 8002184:	f001 fd12 	bl	8003bac <cppLoop>
 8002188:	e7fc      	b.n	8002184 <main+0x54>
	...

0800218c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0a4      	sub	sp, #144	; 0x90
 8002190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002192:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002196:	2234      	movs	r2, #52	; 0x34
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f00c f8c2 	bl	800e324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	223c      	movs	r2, #60	; 0x3c
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f00c f8b3 	bl	800e324 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <SystemClock_Config+0x114>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a36      	ldr	r2, [pc, #216]	; (80022a0 <SystemClock_Config+0x114>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <SystemClock_Config+0x114>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <SystemClock_Config+0x118>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <SystemClock_Config+0x118>)
 80021e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <SystemClock_Config+0x118>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021f6:	2301      	movs	r3, #1
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002200:	2302      	movs	r3, #2
 8002202:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002204:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002208:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800220a:	2308      	movs	r3, #8
 800220c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800220e:	23b4      	movs	r3, #180	; 0xb4
 8002210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800221a:	2308      	movs	r3, #8
 800221c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002220:	2302      	movs	r3, #2
 8002222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002226:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800222a:	4618      	mov	r0, r3
 800222c:	f004 f974 	bl	8006518 <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002236:	f000 fe71 	bl	8002f1c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800223a:	f003 fcef 	bl	8005c1c <HAL_PWREx_EnableOverDrive>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002244:	f000 fe6a 	bl	8002f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002248:	230f      	movs	r3, #15
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224c:	2302      	movs	r3, #2
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002254:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002258:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800225a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225e:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002260:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002264:	2105      	movs	r1, #5
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fd28 	bl	8005cbc <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002272:	f000 fe53 	bl	8002f1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8002276:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800227a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800227c:	2300      	movs	r3, #0
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002280:	2300      	movs	r3, #0
 8002282:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	4618      	mov	r0, r3
 800228a:	f003 ff07 	bl	800609c <HAL_RCCEx_PeriphCLKConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8002294:	f000 fe42 	bl	8002f1c <Error_Handler>
  }
}
 8002298:	bf00      	nop
 800229a:	3790      	adds	r7, #144	; 0x90
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000

080022a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ae:	463b      	mov	r3, r7
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80022ba:	4b7c      	ldr	r3, [pc, #496]	; (80024ac <MX_ADC2_Init+0x204>)
 80022bc:	4a7c      	ldr	r2, [pc, #496]	; (80024b0 <MX_ADC2_Init+0x208>)
 80022be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022c0:	4b7a      	ldr	r3, [pc, #488]	; (80024ac <MX_ADC2_Init+0x204>)
 80022c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80022c8:	4b78      	ldr	r3, [pc, #480]	; (80024ac <MX_ADC2_Init+0x204>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80022ce:	4b77      	ldr	r3, [pc, #476]	; (80024ac <MX_ADC2_Init+0x204>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80022d4:	4b75      	ldr	r3, [pc, #468]	; (80024ac <MX_ADC2_Init+0x204>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80022da:	4b74      	ldr	r3, [pc, #464]	; (80024ac <MX_ADC2_Init+0x204>)
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022e2:	4b72      	ldr	r3, [pc, #456]	; (80024ac <MX_ADC2_Init+0x204>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022e8:	4b70      	ldr	r3, [pc, #448]	; (80024ac <MX_ADC2_Init+0x204>)
 80022ea:	4a72      	ldr	r2, [pc, #456]	; (80024b4 <MX_ADC2_Init+0x20c>)
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ee:	4b6f      	ldr	r3, [pc, #444]	; (80024ac <MX_ADC2_Init+0x204>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80022f4:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <MX_ADC2_Init+0x204>)
 80022f6:	220e      	movs	r2, #14
 80022f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80022fa:	4b6c      	ldr	r3, [pc, #432]	; (80024ac <MX_ADC2_Init+0x204>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002302:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <MX_ADC2_Init+0x204>)
 8002304:	2201      	movs	r2, #1
 8002306:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002308:	4868      	ldr	r0, [pc, #416]	; (80024ac <MX_ADC2_Init+0x204>)
 800230a:	f001 fda1 	bl	8003e50 <HAL_ADC_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002314:	f000 fe02 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002318:	230a      	movs	r3, #10
 800231a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800231c:	2301      	movs	r3, #1
 800231e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002320:	2306      	movs	r3, #6
 8002322:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002324:	463b      	mov	r3, r7
 8002326:	4619      	mov	r1, r3
 8002328:	4860      	ldr	r0, [pc, #384]	; (80024ac <MX_ADC2_Init+0x204>)
 800232a:	f001 fee5 	bl	80040f8 <HAL_ADC_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002334:	f000 fdf2 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002338:	230b      	movs	r3, #11
 800233a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800233c:	2302      	movs	r3, #2
 800233e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002340:	463b      	mov	r3, r7
 8002342:	4619      	mov	r1, r3
 8002344:	4859      	ldr	r0, [pc, #356]	; (80024ac <MX_ADC2_Init+0x204>)
 8002346:	f001 fed7 	bl	80040f8 <HAL_ADC_ConfigChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002350:	f000 fde4 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002354:	230c      	movs	r3, #12
 8002356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002358:	2303      	movs	r3, #3
 800235a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800235c:	463b      	mov	r3, r7
 800235e:	4619      	mov	r1, r3
 8002360:	4852      	ldr	r0, [pc, #328]	; (80024ac <MX_ADC2_Init+0x204>)
 8002362:	f001 fec9 	bl	80040f8 <HAL_ADC_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800236c:	f000 fdd6 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002370:	230d      	movs	r3, #13
 8002372:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002374:	2304      	movs	r3, #4
 8002376:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002378:	463b      	mov	r3, r7
 800237a:	4619      	mov	r1, r3
 800237c:	484b      	ldr	r0, [pc, #300]	; (80024ac <MX_ADC2_Init+0x204>)
 800237e:	f001 febb 	bl	80040f8 <HAL_ADC_ConfigChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002388:	f000 fdc8 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800238c:	2300      	movs	r3, #0
 800238e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002390:	2305      	movs	r3, #5
 8002392:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002394:	463b      	mov	r3, r7
 8002396:	4619      	mov	r1, r3
 8002398:	4844      	ldr	r0, [pc, #272]	; (80024ac <MX_ADC2_Init+0x204>)
 800239a:	f001 fead 	bl	80040f8 <HAL_ADC_ConfigChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80023a4:	f000 fdba 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023a8:	2301      	movs	r3, #1
 80023aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80023ac:	2306      	movs	r3, #6
 80023ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023b0:	463b      	mov	r3, r7
 80023b2:	4619      	mov	r1, r3
 80023b4:	483d      	ldr	r0, [pc, #244]	; (80024ac <MX_ADC2_Init+0x204>)
 80023b6:	f001 fe9f 	bl	80040f8 <HAL_ADC_ConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80023c0:	f000 fdac 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80023c4:	2302      	movs	r3, #2
 80023c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80023c8:	2307      	movs	r3, #7
 80023ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023cc:	463b      	mov	r3, r7
 80023ce:	4619      	mov	r1, r3
 80023d0:	4836      	ldr	r0, [pc, #216]	; (80024ac <MX_ADC2_Init+0x204>)
 80023d2:	f001 fe91 	bl	80040f8 <HAL_ADC_ConfigChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80023dc:	f000 fd9e 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80023e0:	2303      	movs	r3, #3
 80023e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80023e4:	2308      	movs	r3, #8
 80023e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023e8:	463b      	mov	r3, r7
 80023ea:	4619      	mov	r1, r3
 80023ec:	482f      	ldr	r0, [pc, #188]	; (80024ac <MX_ADC2_Init+0x204>)
 80023ee:	f001 fe83 	bl	80040f8 <HAL_ADC_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80023f8:	f000 fd90 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80023fc:	2304      	movs	r3, #4
 80023fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002400:	2309      	movs	r3, #9
 8002402:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002404:	463b      	mov	r3, r7
 8002406:	4619      	mov	r1, r3
 8002408:	4828      	ldr	r0, [pc, #160]	; (80024ac <MX_ADC2_Init+0x204>)
 800240a:	f001 fe75 	bl	80040f8 <HAL_ADC_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8002414:	f000 fd82 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002418:	2305      	movs	r3, #5
 800241a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800241c:	230a      	movs	r3, #10
 800241e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002420:	463b      	mov	r3, r7
 8002422:	4619      	mov	r1, r3
 8002424:	4821      	ldr	r0, [pc, #132]	; (80024ac <MX_ADC2_Init+0x204>)
 8002426:	f001 fe67 	bl	80040f8 <HAL_ADC_ConfigChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8002430:	f000 fd74 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002434:	2306      	movs	r3, #6
 8002436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002438:	230b      	movs	r3, #11
 800243a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800243c:	463b      	mov	r3, r7
 800243e:	4619      	mov	r1, r3
 8002440:	481a      	ldr	r0, [pc, #104]	; (80024ac <MX_ADC2_Init+0x204>)
 8002442:	f001 fe59 	bl	80040f8 <HAL_ADC_ConfigChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 800244c:	f000 fd66 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002450:	2307      	movs	r3, #7
 8002452:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002454:	230c      	movs	r3, #12
 8002456:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002458:	463b      	mov	r3, r7
 800245a:	4619      	mov	r1, r3
 800245c:	4813      	ldr	r0, [pc, #76]	; (80024ac <MX_ADC2_Init+0x204>)
 800245e:	f001 fe4b 	bl	80040f8 <HAL_ADC_ConfigChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8002468:	f000 fd58 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800246c:	2308      	movs	r3, #8
 800246e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002470:	230d      	movs	r3, #13
 8002472:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002474:	463b      	mov	r3, r7
 8002476:	4619      	mov	r1, r3
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <MX_ADC2_Init+0x204>)
 800247a:	f001 fe3d 	bl	80040f8 <HAL_ADC_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8002484:	f000 fd4a 	bl	8002f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002488:	2309      	movs	r3, #9
 800248a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 800248c:	230e      	movs	r3, #14
 800248e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002490:	463b      	mov	r3, r7
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_ADC2_Init+0x204>)
 8002496:	f001 fe2f 	bl	80040f8 <HAL_ADC_ConfigChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80024a0:	f000 fd3c 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20002974 	.word	0x20002974
 80024b0:	40012100 	.word	0x40012100
 80024b4:	0f000001 	.word	0x0f000001

080024b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <MX_I2C1_Init+0x50>)
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <MX_I2C1_Init+0x54>)
 80024c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_I2C1_Init+0x50>)
 80024c4:	4a12      	ldr	r2, [pc, #72]	; (8002510 <MX_I2C1_Init+0x58>)
 80024c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <MX_I2C1_Init+0x50>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <MX_I2C1_Init+0x50>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <MX_I2C1_Init+0x50>)
 80024d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <MX_I2C1_Init+0x50>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_I2C1_Init+0x50>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <MX_I2C1_Init+0x50>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_I2C1_Init+0x50>)
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	; (8002508 <MX_I2C1_Init+0x50>)
 80024f6:	f002 ff51 	bl	800539c <HAL_I2C_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002500:	f000 fd0c 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200029bc 	.word	0x200029bc
 800250c:	40005400 	.word	0x40005400
 8002510:	000186a0 	.word	0x000186a0

08002514 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <MX_I2C2_Init+0x50>)
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <MX_I2C2_Init+0x54>)
 800251c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_I2C2_Init+0x50>)
 8002520:	4a12      	ldr	r2, [pc, #72]	; (800256c <MX_I2C2_Init+0x58>)
 8002522:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_I2C2_Init+0x50>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_I2C2_Init+0x50>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <MX_I2C2_Init+0x50>)
 8002532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002536:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <MX_I2C2_Init+0x50>)
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_I2C2_Init+0x50>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <MX_I2C2_Init+0x50>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_I2C2_Init+0x50>)
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002550:	4804      	ldr	r0, [pc, #16]	; (8002564 <MX_I2C2_Init+0x50>)
 8002552:	f002 ff23 	bl	800539c <HAL_I2C_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800255c:	f000 fcde 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20002a50 	.word	0x20002a50
 8002568:	40005800 	.word	0x40005800
 800256c:	000186a0 	.word	0x000186a0

08002570 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_SDIO_SD_Init+0x38>)
 8002576:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <MX_SDIO_SD_Init+0x3c>)
 8002578:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_SDIO_SD_Init+0x38>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_SDIO_SD_Init+0x38>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_SDIO_SD_Init+0x38>)
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_SDIO_SD_Init+0x38>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <MX_SDIO_SD_Init+0x38>)
 8002594:	2200      	movs	r2, #0
 8002596:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <MX_SDIO_SD_Init+0x38>)
 800259a:	2200      	movs	r2, #0
 800259c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	20002c18 	.word	0x20002c18
 80025ac:	40012c00 	.word	0x40012c00

080025b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_SPI2_Init+0x64>)
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <MX_SPI2_Init+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <MX_SPI2_Init+0x64>)
 80025bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_SPI2_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <MX_SPI2_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_SPI2_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <MX_SPI2_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_SPI2_Init+0x64>)
 80025dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_SPI2_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <MX_SPI2_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_SPI2_Init+0x64>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MX_SPI2_Init+0x64>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_SPI2_Init+0x64>)
 80025fc:	220a      	movs	r2, #10
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_SPI2_Init+0x64>)
 8002602:	f005 fcb3 	bl	8007f6c <HAL_SPI_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800260c:	f000 fc86 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000289c 	.word	0x2000289c
 8002618:	40003800 	.word	0x40003800

0800261c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b09a      	sub	sp, #104	; 0x68
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002622:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f00b fe7a 	bl	800e324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263a:	f107 0320 	add.w	r3, r7, #32
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	615a      	str	r2, [r3, #20]
 800264c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800264e:	463b      	mov	r3, r7
 8002650:	2220      	movs	r2, #32
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f00b fe65 	bl	800e324 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800265a:	4b42      	ldr	r3, [pc, #264]	; (8002764 <MX_TIM1_Init+0x148>)
 800265c:	4a42      	ldr	r2, [pc, #264]	; (8002768 <MX_TIM1_Init+0x14c>)
 800265e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002660:	4b40      	ldr	r3, [pc, #256]	; (8002764 <MX_TIM1_Init+0x148>)
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <MX_TIM1_Init+0x148>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800266c:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <MX_TIM1_Init+0x148>)
 800266e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002672:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002674:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <MX_TIM1_Init+0x148>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <MX_TIM1_Init+0x148>)
 800267c:	2200      	movs	r2, #0
 800267e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002680:	4b38      	ldr	r3, [pc, #224]	; (8002764 <MX_TIM1_Init+0x148>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002686:	4837      	ldr	r0, [pc, #220]	; (8002764 <MX_TIM1_Init+0x148>)
 8002688:	f005 fd23 	bl	80080d2 <HAL_TIM_PWM_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002692:	f000 fc43 	bl	8002f1c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002696:	2303      	movs	r3, #3
 8002698:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800269a:	2300      	movs	r3, #0
 800269c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800269e:	2301      	movs	r3, #1
 80026a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026a2:	2300      	movs	r3, #0
 80026a4:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026aa:	2300      	movs	r3, #0
 80026ac:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026ae:	2301      	movs	r3, #1
 80026b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026b2:	2300      	movs	r3, #0
 80026b4:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80026ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026be:	4619      	mov	r1, r3
 80026c0:	4828      	ldr	r0, [pc, #160]	; (8002764 <MX_TIM1_Init+0x148>)
 80026c2:	f005 fd6f 	bl	80081a4 <HAL_TIM_Encoder_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80026cc:	f000 fc26 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026dc:	4619      	mov	r1, r3
 80026de:	4821      	ldr	r0, [pc, #132]	; (8002764 <MX_TIM1_Init+0x148>)
 80026e0:	f006 fa96 	bl	8008c10 <HAL_TIMEx_MasterConfigSynchronization>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80026ea:	f000 fc17 	bl	8002f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ee:	2360      	movs	r3, #96	; 0x60
 80026f0:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800270a:	f107 0320 	add.w	r3, r7, #32
 800270e:	2208      	movs	r2, #8
 8002710:	4619      	mov	r1, r3
 8002712:	4814      	ldr	r0, [pc, #80]	; (8002764 <MX_TIM1_Init+0x148>)
 8002714:	f005 ff18 	bl	8008548 <HAL_TIM_PWM_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800271e:	f000 fbfd 	bl	8002f1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800273a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002740:	463b      	mov	r3, r7
 8002742:	4619      	mov	r1, r3
 8002744:	4807      	ldr	r0, [pc, #28]	; (8002764 <MX_TIM1_Init+0x148>)
 8002746:	f006 fadf 	bl	8008d08 <HAL_TIMEx_ConfigBreakDeadTime>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002750:	f000 fbe4 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002754:	4803      	ldr	r0, [pc, #12]	; (8002764 <MX_TIM1_Init+0x148>)
 8002756:	f000 ff9b 	bl	8003690 <HAL_TIM_MspPostInit>

}
 800275a:	bf00      	nop
 800275c:	3768      	adds	r7, #104	; 0x68
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20002bd8 	.word	0x20002bd8
 8002768:	40010000 	.word	0x40010000

0800276c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002772:	f107 0320 	add.w	r3, r7, #32
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	611a      	str	r2, [r3, #16]
 800278a:	615a      	str	r2, [r3, #20]
 800278c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <MX_TIM3_Init+0xc0>)
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <MX_TIM3_Init+0xc4>)
 8002792:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <MX_TIM3_Init+0xc0>)
 8002796:	2200      	movs	r2, #0
 8002798:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <MX_TIM3_Init+0xc0>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027a0:	4b22      	ldr	r3, [pc, #136]	; (800282c <MX_TIM3_Init+0xc0>)
 80027a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <MX_TIM3_Init+0xc0>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <MX_TIM3_Init+0xc0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027b4:	481d      	ldr	r0, [pc, #116]	; (800282c <MX_TIM3_Init+0xc0>)
 80027b6:	f005 fc8c 	bl	80080d2 <HAL_TIM_PWM_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80027c0:	f000 fbac 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	4619      	mov	r1, r3
 80027d2:	4816      	ldr	r0, [pc, #88]	; (800282c <MX_TIM3_Init+0xc0>)
 80027d4:	f006 fa1c 	bl	8008c10 <HAL_TIMEx_MasterConfigSynchronization>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80027de:	f000 fb9d 	bl	8002f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e2:	2360      	movs	r3, #96	; 0x60
 80027e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	4619      	mov	r1, r3
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <MX_TIM3_Init+0xc0>)
 80027fa:	f005 fea5 	bl	8008548 <HAL_TIM_PWM_ConfigChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002804:	f000 fb8a 	bl	8002f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2204      	movs	r2, #4
 800280c:	4619      	mov	r1, r3
 800280e:	4807      	ldr	r0, [pc, #28]	; (800282c <MX_TIM3_Init+0xc0>)
 8002810:	f005 fe9a 	bl	8008548 <HAL_TIM_PWM_ConfigChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800281a:	f000 fb7f 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <MX_TIM3_Init+0xc0>)
 8002820:	f000 ff36 	bl	8003690 <HAL_TIM_MspPostInit>

}
 8002824:	bf00      	nop
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20002aac 	.word	0x20002aac
 8002830:	40000400 	.word	0x40000400

08002834 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283a:	f107 0320 	add.w	r3, r7, #32
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	615a      	str	r2, [r3, #20]
 8002854:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002856:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <MX_TIM4_Init+0xc0>)
 8002858:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <MX_TIM4_Init+0xc4>)
 800285a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <MX_TIM4_Init+0xc0>)
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <MX_TIM4_Init+0xc0>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8002868:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <MX_TIM4_Init+0xc0>)
 800286a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800286e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <MX_TIM4_Init+0xc0>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002876:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <MX_TIM4_Init+0xc0>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800287c:	481d      	ldr	r0, [pc, #116]	; (80028f4 <MX_TIM4_Init+0xc0>)
 800287e:	f005 fc28 	bl	80080d2 <HAL_TIM_PWM_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002888:	f000 fb48 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002894:	f107 0320 	add.w	r3, r7, #32
 8002898:	4619      	mov	r1, r3
 800289a:	4816      	ldr	r0, [pc, #88]	; (80028f4 <MX_TIM4_Init+0xc0>)
 800289c:	f006 f9b8 	bl	8008c10 <HAL_TIMEx_MasterConfigSynchronization>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80028a6:	f000 fb39 	bl	8002f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028aa:	2360      	movs	r3, #96	; 0x60
 80028ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2208      	movs	r2, #8
 80028be:	4619      	mov	r1, r3
 80028c0:	480c      	ldr	r0, [pc, #48]	; (80028f4 <MX_TIM4_Init+0xc0>)
 80028c2:	f005 fe41 	bl	8008548 <HAL_TIM_PWM_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80028cc:	f000 fb26 	bl	8002f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	220c      	movs	r2, #12
 80028d4:	4619      	mov	r1, r3
 80028d6:	4807      	ldr	r0, [pc, #28]	; (80028f4 <MX_TIM4_Init+0xc0>)
 80028d8:	f005 fe36 	bl	8008548 <HAL_TIM_PWM_ConfigChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80028e2:	f000 fb1b 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80028e6:	4803      	ldr	r0, [pc, #12]	; (80028f4 <MX_TIM4_Init+0xc0>)
 80028e8:	f000 fed2 	bl	8003690 <HAL_TIM_MspPostInit>

}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20002934 	.word	0x20002934
 80028f8:	40000800 	.word	0x40000800

080028fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002902:	463b      	mov	r3, r7
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <MX_TIM6_Init+0x64>)
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <MX_TIM6_Init+0x68>)
 800290e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_TIM6_Init+0x64>)
 8002912:	2259      	movs	r2, #89	; 0x59
 8002914:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <MX_TIM6_Init+0x64>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <MX_TIM6_Init+0x64>)
 800291e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002922:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <MX_TIM6_Init+0x64>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800292a:	480d      	ldr	r0, [pc, #52]	; (8002960 <MX_TIM6_Init+0x64>)
 800292c:	f005 fb82 	bl	8008034 <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002936:	f000 faf1 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002942:	463b      	mov	r3, r7
 8002944:	4619      	mov	r1, r3
 8002946:	4806      	ldr	r0, [pc, #24]	; (8002960 <MX_TIM6_Init+0x64>)
 8002948:	f006 f962 	bl	8008c10 <HAL_TIMEx_MasterConfigSynchronization>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002952:	f000 fae3 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20002b98 	.word	0x20002b98
 8002964:	40001000 	.word	0x40001000

08002968 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800296e:	463b      	mov	r3, r7
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <MX_TIM7_Init+0x64>)
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <MX_TIM7_Init+0x68>)
 800297a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <MX_TIM7_Init+0x64>)
 800297e:	2200      	movs	r2, #0
 8002980:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <MX_TIM7_Init+0x64>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <MX_TIM7_Init+0x64>)
 800298a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <MX_TIM7_Init+0x64>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002996:	480d      	ldr	r0, [pc, #52]	; (80029cc <MX_TIM7_Init+0x64>)
 8002998:	f005 fb4c 	bl	8008034 <HAL_TIM_Base_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80029a2:	f000 fabb 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029ae:	463b      	mov	r3, r7
 80029b0:	4619      	mov	r1, r3
 80029b2:	4806      	ldr	r0, [pc, #24]	; (80029cc <MX_TIM7_Init+0x64>)
 80029b4:	f006 f92c 	bl	8008c10 <HAL_TIMEx_MasterConfigSynchronization>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80029be:	f000 faad 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20002d40 	.word	0x20002d40
 80029d0:	40001400 	.word	0x40001400

080029d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	; 0x30
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f00b fc9e 	bl	800e324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <MX_TIM8_Init+0xa8>)
 80029f2:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <MX_TIM8_Init+0xac>)
 80029f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <MX_TIM8_Init+0xa8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <MX_TIM8_Init+0xa8>)
 80029fe:	2210      	movs	r2, #16
 8002a00:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <MX_TIM8_Init+0xa8>)
 8002a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a08:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <MX_TIM8_Init+0xa8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <MX_TIM8_Init+0xa8>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <MX_TIM8_Init+0xa8>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a24:	2301      	movs	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a34:	2301      	movs	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	4619      	mov	r1, r3
 8002a46:	480d      	ldr	r0, [pc, #52]	; (8002a7c <MX_TIM8_Init+0xa8>)
 8002a48:	f005 fbac 	bl	80081a4 <HAL_TIM_Encoder_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002a52:	f000 fa63 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4806      	ldr	r0, [pc, #24]	; (8002a7c <MX_TIM8_Init+0xa8>)
 8002a64:	f006 f8d4 	bl	8008c10 <HAL_TIMEx_MasterConfigSynchronization>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002a6e:	f000 fa55 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	3730      	adds	r7, #48	; 0x30
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200028f4 	.word	0x200028f4
 8002a80:	40010400 	.word	0x40010400

08002a84 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
 8002a98:	615a      	str	r2, [r3, #20]
 8002a9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002a9e:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <MX_TIM10_Init+0x98>)
 8002aa0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002ac2:	4815      	ldr	r0, [pc, #84]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002ac4:	f005 fab6 	bl	8008034 <HAL_TIM_Base_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002ace:	f000 fa25 	bl	8002f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002ad2:	4811      	ldr	r0, [pc, #68]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002ad4:	f005 fafd 	bl	80080d2 <HAL_TIM_PWM_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002ade:	f000 fa1d 	bl	8002f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae2:	2360      	movs	r3, #96	; 0x60
 8002ae4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	2200      	movs	r2, #0
 8002af6:	4619      	mov	r1, r3
 8002af8:	4807      	ldr	r0, [pc, #28]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002afa:	f005 fd25 	bl	8008548 <HAL_TIM_PWM_ConfigChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002b04:	f000 fa0a 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002b08:	4803      	ldr	r0, [pc, #12]	; (8002b18 <MX_TIM10_Init+0x94>)
 8002b0a:	f000 fdc1 	bl	8003690 <HAL_TIM_MspPostInit>

}
 8002b0e:	bf00      	nop
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20002a10 	.word	0x20002a10
 8002b1c:	40014400 	.word	0x40014400

08002b20 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
 8002b34:	615a      	str	r2, [r3, #20]
 8002b36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002b3a:	4a1f      	ldr	r2, [pc, #124]	; (8002bb8 <MX_TIM11_Init+0x98>)
 8002b3c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b50:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b5e:	4815      	ldr	r0, [pc, #84]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002b60:	f005 fa68 	bl	8008034 <HAL_TIM_Base_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002b6a:	f000 f9d7 	bl	8002f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002b6e:	4811      	ldr	r0, [pc, #68]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002b70:	f005 faaf 	bl	80080d2 <HAL_TIM_PWM_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002b7a:	f000 f9cf 	bl	8002f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b7e:	2360      	movs	r3, #96	; 0x60
 8002b80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	2200      	movs	r2, #0
 8002b92:	4619      	mov	r1, r3
 8002b94:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002b96:	f005 fcd7 	bl	8008548 <HAL_TIM_PWM_ConfigChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002ba0:	f000 f9bc 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002ba4:	4803      	ldr	r0, [pc, #12]	; (8002bb4 <MX_TIM11_Init+0x94>)
 8002ba6:	f000 fd73 	bl	8003690 <HAL_TIM_MspPostInit>

}
 8002baa:	bf00      	nop
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20002af0 	.word	0x20002af0
 8002bb8:	40014800 	.word	0x40014800

08002bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <MX_USART2_UART_Init+0x50>)
 8002bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002be2:	220c      	movs	r2, #12
 8002be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bf4:	f006 f8ee 	bl	8008dd4 <HAL_UART_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bfe:	f000 f98d 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20002ca0 	.word	0x20002ca0
 8002c0c:	40004400 	.word	0x40004400

08002c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_DMA_Init+0x5c>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <MX_DMA_Init+0x5c>)
 8002c20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_DMA_Init+0x5c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	203a      	movs	r0, #58	; 0x3a
 8002c38:	f001 fde9 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002c3c:	203a      	movs	r0, #58	; 0x3a
 8002c3e:	f001 fe02 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	203b      	movs	r0, #59	; 0x3b
 8002c48:	f001 fde1 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002c4c:	203b      	movs	r0, #59	; 0x3b
 8002c4e:	f001 fdfa 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2045      	movs	r0, #69	; 0x45
 8002c58:	f001 fdd9 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002c5c:	2045      	movs	r0, #69	; 0x45
 8002c5e:	f001 fdf2 	bl	8004846 <HAL_NVIC_EnableIRQ>

}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800

08002c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	; 0x30
 8002c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	4b9c      	ldr	r3, [pc, #624]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a9b      	ldr	r2, [pc, #620]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002c90:	f043 0310 	orr.w	r3, r3, #16
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b99      	ldr	r3, [pc, #612]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	4b95      	ldr	r3, [pc, #596]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a94      	ldr	r2, [pc, #592]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b92      	ldr	r3, [pc, #584]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b8e      	ldr	r3, [pc, #568]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a8d      	ldr	r2, [pc, #564]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b8b      	ldr	r3, [pc, #556]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b87      	ldr	r3, [pc, #540]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a86      	ldr	r2, [pc, #536]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b84      	ldr	r3, [pc, #528]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	4b80      	ldr	r3, [pc, #512]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a7f      	ldr	r2, [pc, #508]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b7d      	ldr	r3, [pc, #500]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	4b79      	ldr	r3, [pc, #484]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a78      	ldr	r2, [pc, #480]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <MX_GPIO_Init+0x28c>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d34:	4872      	ldr	r0, [pc, #456]	; (8002f00 <MX_GPIO_Init+0x290>)
 8002d36:	f002 faff 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d40:	4870      	ldr	r0, [pc, #448]	; (8002f04 <MX_GPIO_Init+0x294>)
 8002d42:	f002 faf9 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002d46:	2200      	movs	r2, #0
 8002d48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d4c:	486e      	ldr	r0, [pc, #440]	; (8002f08 <MX_GPIO_Init+0x298>)
 8002d4e:	f002 faf3 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002d52:	2200      	movs	r2, #0
 8002d54:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002d58:	486c      	ldr	r0, [pc, #432]	; (8002f0c <MX_GPIO_Init+0x29c>)
 8002d5a:	f002 faed 	bl	8005338 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d5e:	2304      	movs	r3, #4
 8002d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002d62:	4b6b      	ldr	r3, [pc, #428]	; (8002f10 <MX_GPIO_Init+0x2a0>)
 8002d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4863      	ldr	r0, [pc, #396]	; (8002f00 <MX_GPIO_Init+0x290>)
 8002d72:	f002 f91f 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002d76:	230f      	movs	r3, #15
 8002d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	4619      	mov	r1, r3
 8002d88:	4862      	ldr	r0, [pc, #392]	; (8002f14 <MX_GPIO_Init+0x2a4>)
 8002d8a:	f002 f913 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d8e:	23e1      	movs	r3, #225	; 0xe1
 8002d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d92:	2303      	movs	r3, #3
 8002d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9a:	f107 031c 	add.w	r3, r7, #28
 8002d9e:	4619      	mov	r1, r3
 8002da0:	485a      	ldr	r0, [pc, #360]	; (8002f0c <MX_GPIO_Init+0x29c>)
 8002da2:	f002 f907 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002da6:	2303      	movs	r3, #3
 8002da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002daa:	2303      	movs	r3, #3
 8002dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db2:	f107 031c 	add.w	r3, r7, #28
 8002db6:	4619      	mov	r1, r3
 8002db8:	4852      	ldr	r0, [pc, #328]	; (8002f04 <MX_GPIO_Init+0x294>)
 8002dba:	f002 f8fb 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	f107 031c 	add.w	r3, r7, #28
 8002dce:	4619      	mov	r1, r3
 8002dd0:	484c      	ldr	r0, [pc, #304]	; (8002f04 <MX_GPIO_Init+0x294>)
 8002dd2:	f002 f8ef 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8002dd6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8002dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de0:	2301      	movs	r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de4:	f107 031c 	add.w	r3, r7, #28
 8002de8:	4619      	mov	r1, r3
 8002dea:	4845      	ldr	r0, [pc, #276]	; (8002f00 <MX_GPIO_Init+0x290>)
 8002dec:	f002 f8e2 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df6:	2301      	movs	r3, #1
 8002df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e02:	f107 031c 	add.w	r3, r7, #28
 8002e06:	4619      	mov	r1, r3
 8002e08:	483d      	ldr	r0, [pc, #244]	; (8002f00 <MX_GPIO_Init+0x290>)
 8002e0a:	f002 f8d3 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e14:	2301      	movs	r3, #1
 8002e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	4619      	mov	r1, r3
 8002e26:	4837      	ldr	r0, [pc, #220]	; (8002f04 <MX_GPIO_Init+0x294>)
 8002e28:	f002 f8c4 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <MX_GPIO_Init+0x2a8>)
 8002e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e3a:	f107 031c 	add.w	r3, r7, #28
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4831      	ldr	r0, [pc, #196]	; (8002f08 <MX_GPIO_Init+0x298>)
 8002e42:	f002 f8b7 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	482a      	ldr	r0, [pc, #168]	; (8002f08 <MX_GPIO_Init+0x298>)
 8002e60:	f002 f8a8 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e76:	f107 031c 	add.w	r3, r7, #28
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4822      	ldr	r0, [pc, #136]	; (8002f08 <MX_GPIO_Init+0x298>)
 8002e7e:	f002 f899 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e82:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002e86:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 031c 	add.w	r3, r7, #28
 8002e98:	4619      	mov	r1, r3
 8002e9a:	481c      	ldr	r0, [pc, #112]	; (8002f0c <MX_GPIO_Init+0x29c>)
 8002e9c:	f002 f88a 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4815      	ldr	r0, [pc, #84]	; (8002f0c <MX_GPIO_Init+0x29c>)
 8002eb6:	f002 f87d 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002eba:	239b      	movs	r3, #155	; 0x9b
 8002ebc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec6:	f107 031c 	add.w	r3, r7, #28
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480e      	ldr	r0, [pc, #56]	; (8002f08 <MX_GPIO_Init+0x298>)
 8002ece:	f002 f871 	bl	8004fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	2008      	movs	r0, #8
 8002ed8:	f001 fc99 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002edc:	2008      	movs	r0, #8
 8002ede:	f001 fcb2 	bl	8004846 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2017      	movs	r0, #23
 8002ee8:	f001 fc91 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002eec:	2017      	movs	r0, #23
 8002eee:	f001 fcaa 	bl	8004846 <HAL_NVIC_EnableIRQ>

}
 8002ef2:	bf00      	nop
 8002ef4:	3730      	adds	r7, #48	; 0x30
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40020400 	.word	0x40020400
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	10310000 	.word	0x10310000
 8002f14:	40020800 	.word	0x40020800
 8002f18:	10110000 	.word	0x10110000

08002f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f20:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <Error_Handler+0x6>

08002f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08c      	sub	sp, #48	; 0x30
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 031c 	add.w	r3, r7, #28
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a4a      	ldr	r2, [pc, #296]	; (80030bc <HAL_ADC_MspInit+0x148>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	f040 808e 	bne.w	80030b4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	4a47      	ldr	r2, [pc, #284]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	4a40      	ldr	r2, [pc, #256]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc4:	4b3e      	ldr	r3, [pc, #248]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	4a39      	ldr	r2, [pc, #228]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe0:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	4a32      	ldr	r2, [pc, #200]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffc:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <HAL_ADC_MspInit+0x14c>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003008:	230f      	movs	r3, #15
 800300a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800300c:	2303      	movs	r3, #3
 800300e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	4619      	mov	r1, r3
 800301a:	482a      	ldr	r0, [pc, #168]	; (80030c4 <HAL_ADC_MspInit+0x150>)
 800301c:	f001 ffca 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003020:	23ff      	movs	r3, #255	; 0xff
 8003022:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003024:	2303      	movs	r3, #3
 8003026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	4619      	mov	r1, r3
 8003032:	4825      	ldr	r0, [pc, #148]	; (80030c8 <HAL_ADC_MspInit+0x154>)
 8003034:	f001 ffbe 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003038:	2303      	movs	r3, #3
 800303a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800303c:	2303      	movs	r3, #3
 800303e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003044:	f107 031c 	add.w	r3, r7, #28
 8003048:	4619      	mov	r1, r3
 800304a:	4820      	ldr	r0, [pc, #128]	; (80030cc <HAL_ADC_MspInit+0x158>)
 800304c:	f001 ffb2 	bl	8004fb4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8003050:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 8003052:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_ADC_MspInit+0x160>)
 8003054:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003056:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 8003058:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800305e:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003064:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800306a:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 800306c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003070:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003072:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 8003074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003078:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 800307c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003080:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 8003084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003088:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 800308c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003090:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 8003094:	2200      	movs	r2, #0
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 800309a:	f001 fbef 	bl	800487c <HAL_DMA_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80030a4:	f7ff ff3a 	bl	8002f1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <HAL_ADC_MspInit+0x15c>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80030b4:	bf00      	nop
 80030b6:	3730      	adds	r7, #48	; 0x30
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40012100 	.word	0x40012100
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40020400 	.word	0x40020400
 80030d0:	20002ce0 	.word	0x20002ce0
 80030d4:	40026440 	.word	0x40026440

080030d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	; 0x30
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a32      	ldr	r2, [pc, #200]	; (80031c0 <HAL_I2C_MspInit+0xe8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d12c      	bne.n	8003154 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003116:	23c0      	movs	r3, #192	; 0xc0
 8003118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800311a:	2312      	movs	r3, #18
 800311c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800311e:	2301      	movs	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003122:	2303      	movs	r3, #3
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003126:	2304      	movs	r3, #4
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312a:	f107 031c 	add.w	r3, r7, #28
 800312e:	4619      	mov	r1, r3
 8003130:	4825      	ldr	r0, [pc, #148]	; (80031c8 <HAL_I2C_MspInit+0xf0>)
 8003132:	f001 ff3f 	bl	8004fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 8003140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003152:	e031      	b.n	80031b8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <HAL_I2C_MspInit+0xf4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d12c      	bne.n	80031b8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a17      	ldr	r2, [pc, #92]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800317a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800317e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003180:	2312      	movs	r3, #18
 8003182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003184:	2301      	movs	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003188:	2303      	movs	r3, #3
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800318c:	2304      	movs	r3, #4
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003190:	f107 031c 	add.w	r3, r7, #28
 8003194:	4619      	mov	r1, r3
 8003196:	480c      	ldr	r0, [pc, #48]	; (80031c8 <HAL_I2C_MspInit+0xf0>)
 8003198:	f001 ff0c 	bl	8004fb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 80031a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031aa:	6413      	str	r3, [r2, #64]	; 0x40
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_I2C_MspInit+0xec>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3730      	adds	r7, #48	; 0x30
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40005400 	.word	0x40005400
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020400 	.word	0x40020400
 80031cc:	40005800 	.word	0x40005800

080031d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a69      	ldr	r2, [pc, #420]	; (8003394 <HAL_SD_MspInit+0x1c4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f040 80cb 	bne.w	800338a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	4b67      	ldr	r3, [pc, #412]	; (8003398 <HAL_SD_MspInit+0x1c8>)
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	4a66      	ldr	r2, [pc, #408]	; (8003398 <HAL_SD_MspInit+0x1c8>)
 80031fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003202:	6453      	str	r3, [r2, #68]	; 0x44
 8003204:	4b64      	ldr	r3, [pc, #400]	; (8003398 <HAL_SD_MspInit+0x1c8>)
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	4b60      	ldr	r3, [pc, #384]	; (8003398 <HAL_SD_MspInit+0x1c8>)
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	4a5f      	ldr	r2, [pc, #380]	; (8003398 <HAL_SD_MspInit+0x1c8>)
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	6313      	str	r3, [r2, #48]	; 0x30
 8003220:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_SD_MspInit+0x1c8>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_SD_MspInit+0x1c8>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_SD_MspInit+0x1c8>)
 8003236:	f043 0308 	orr.w	r3, r3, #8
 800323a:	6313      	str	r3, [r2, #48]	; 0x30
 800323c:	4b56      	ldr	r3, [pc, #344]	; (8003398 <HAL_SD_MspInit+0x1c8>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003248:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800324c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003256:	2303      	movs	r3, #3
 8003258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800325a:	230c      	movs	r3, #12
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	4619      	mov	r1, r3
 8003264:	484d      	ldr	r0, [pc, #308]	; (800339c <HAL_SD_MspInit+0x1cc>)
 8003266:	f001 fea5 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800326a:	2304      	movs	r3, #4
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003276:	2303      	movs	r3, #3
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800327a:	230c      	movs	r3, #12
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	4846      	ldr	r0, [pc, #280]	; (80033a0 <HAL_SD_MspInit+0x1d0>)
 8003286:	f001 fe95 	bl	8004fb4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800328a:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 800328c:	4a46      	ldr	r2, [pc, #280]	; (80033a8 <HAL_SD_MspInit+0x1d8>)
 800328e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003290:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 8003292:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003296:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003298:	4b42      	ldr	r3, [pc, #264]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032a4:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032aa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032ac:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032b2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032b4:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032ba:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80032bc:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032be:	2220      	movs	r2, #32
 80032c0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80032c2:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032ca:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032cc:	2204      	movs	r2, #4
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032d0:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032d2:	2203      	movs	r2, #3
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80032d6:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80032e6:	482f      	ldr	r0, [pc, #188]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032e8:	f001 fac8 	bl	800487c <HAL_DMA_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80032f2:	f7ff fe13 	bl	8002f1c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
 80032fc:	4a29      	ldr	r2, [pc, #164]	; (80033a4 <HAL_SD_MspInit+0x1d4>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003302:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003304:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <HAL_SD_MspInit+0x1e0>)
 8003306:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003308:	4b28      	ldr	r3, [pc, #160]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 800330a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800330e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003310:	4b26      	ldr	r3, [pc, #152]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003312:	2240      	movs	r2, #64	; 0x40
 8003314:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003318:	2200      	movs	r2, #0
 800331a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800331c:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 800331e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003322:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800332a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800332c:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 800332e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003332:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003336:	2220      	movs	r2, #32
 8003338:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 800333c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003340:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003344:	2204      	movs	r2, #4
 8003346:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 800334a:	2203      	movs	r2, #3
 800334c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800334e:	4b17      	ldr	r3, [pc, #92]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003350:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003354:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003358:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800335e:	4813      	ldr	r0, [pc, #76]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003360:	f001 fa8c 	bl	800487c <HAL_DMA_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800336a:	f7ff fdd7 	bl	8002f1c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003372:	63da      	str	r2, [r3, #60]	; 0x3c
 8003374:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <HAL_SD_MspInit+0x1dc>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	2031      	movs	r0, #49	; 0x31
 8003380:	f001 fa45 	bl	800480e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003384:	2031      	movs	r0, #49	; 0x31
 8003386:	f001 fa5e 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800338a:	bf00      	nop
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40023800 	.word	0x40023800
 800339c:	40020800 	.word	0x40020800
 80033a0:	40020c00 	.word	0x40020c00
 80033a4:	20002838 	.word	0x20002838
 80033a8:	40026458 	.word	0x40026458
 80033ac:	20002b34 	.word	0x20002b34
 80033b0:	400264a0 	.word	0x400264a0

080033b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a19      	ldr	r2, [pc, #100]	; (8003438 <HAL_SPI_MspInit+0x84>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d12c      	bne.n	8003430 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_SPI_MspInit+0x88>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <HAL_SPI_MspInit+0x88>)
 80033e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_SPI_MspInit+0x88>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_SPI_MspInit+0x88>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a10      	ldr	r2, [pc, #64]	; (800343c <HAL_SPI_MspInit+0x88>)
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_SPI_MspInit+0x88>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800340e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003414:	2302      	movs	r3, #2
 8003416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341c:	2303      	movs	r3, #3
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003420:	2305      	movs	r3, #5
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	4619      	mov	r1, r3
 800342a:	4805      	ldr	r0, [pc, #20]	; (8003440 <HAL_SPI_MspInit+0x8c>)
 800342c:	f001 fdc2 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003430:	bf00      	nop
 8003432:	3728      	adds	r7, #40	; 0x28
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40003800 	.word	0x40003800
 800343c:	40023800 	.word	0x40023800
 8003440:	40020400 	.word	0x40020400

08003444 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	; 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2d      	ldr	r2, [pc, #180]	; (8003518 <HAL_TIM_PWM_MspInit+0xd4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d12d      	bne.n	80034c2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	4b2c      	ldr	r3, [pc, #176]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a2b      	ldr	r2, [pc, #172]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b29      	ldr	r3, [pc, #164]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a24      	ldr	r2, [pc, #144]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 800348c:	f043 0310 	orr.w	r3, r3, #16
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b22      	ldr	r3, [pc, #136]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800349e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80034a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034b0:	2301      	movs	r3, #1
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034b4:	f107 031c 	add.w	r3, r7, #28
 80034b8:	4619      	mov	r1, r3
 80034ba:	4819      	ldr	r0, [pc, #100]	; (8003520 <HAL_TIM_PWM_MspInit+0xdc>)
 80034bc:	f001 fd7a 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034c0:	e026      	b.n	8003510 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a17      	ldr	r2, [pc, #92]	; (8003524 <HAL_TIM_PWM_MspInit+0xe0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10e      	bne.n	80034ea <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	4a11      	ldr	r2, [pc, #68]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	6413      	str	r3, [r2, #64]	; 0x40
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693b      	ldr	r3, [r7, #16]
}
 80034e8:	e012      	b.n	8003510 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_TIM_PWM_MspInit+0xe4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10d      	bne.n	8003510 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	4a07      	ldr	r2, [pc, #28]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	6413      	str	r3, [r2, #64]	; 0x40
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_TIM_PWM_MspInit+0xd8>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	bf00      	nop
 8003512:	3730      	adds	r7, #48	; 0x30
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40010000 	.word	0x40010000
 800351c:	40023800 	.word	0x40023800
 8003520:	40021000 	.word	0x40021000
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800

0800352c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <HAL_TIM_Base_MspInit+0xc0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d116      	bne.n	800356c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 8003548:	f043 0310 	orr.w	r3, r3, #16
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	2036      	movs	r0, #54	; 0x36
 8003560:	f001 f955 	bl	800480e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003564:	2036      	movs	r0, #54	; 0x36
 8003566:	f001 f96e 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800356a:	e03a      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a20      	ldr	r2, [pc, #128]	; (80035f4 <HAL_TIM_Base_MspInit+0xc8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10e      	bne.n	8003594 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 8003580:	f043 0320 	orr.w	r3, r3, #32
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]
}
 8003592:	e026      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a17      	ldr	r2, [pc, #92]	; (80035f8 <HAL_TIM_Base_MspInit+0xcc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ac:	6453      	str	r3, [r2, #68]	; 0x44
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	e012      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM11)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <HAL_TIM_Base_MspInit+0xd0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d10d      	bne.n	80035e2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_TIM_Base_MspInit+0xc4>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40001000 	.word	0x40001000
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40001400 	.word	0x40001400
 80035f8:	40014400 	.word	0x40014400
 80035fc:	40014800 	.word	0x40014800

08003600 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_TIM_Encoder_MspInit+0x84>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d12b      	bne.n	800367a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_TIM_Encoder_MspInit+0x88>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_TIM_Encoder_MspInit+0x88>)
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	6453      	str	r3, [r2, #68]	; 0x44
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_TIM_Encoder_MspInit+0x88>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_TIM_Encoder_MspInit+0x88>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <HAL_TIM_Encoder_MspInit+0x88>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <HAL_TIM_Encoder_MspInit+0x88>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800365a:	23c0      	movs	r3, #192	; 0xc0
 800365c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800366a:	2303      	movs	r3, #3
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4619      	mov	r1, r3
 8003674:	4805      	ldr	r0, [pc, #20]	; (800368c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003676:	f001 fc9d 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800367a:	bf00      	nop
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40010400 	.word	0x40010400
 8003688:	40023800 	.word	0x40023800
 800368c:	40020800 	.word	0x40020800

08003690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	f107 031c 	add.w	r3, r7, #28
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_TIM_MspPostInit+0x190>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d11f      	bne.n	80036f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	4b5b      	ldr	r3, [pc, #364]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a5a      	ldr	r2, [pc, #360]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 80036bc:	f043 0310 	orr.w	r3, r3, #16
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b58      	ldr	r3, [pc, #352]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2300      	movs	r3, #0
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036e0:	2301      	movs	r3, #1
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	4619      	mov	r1, r3
 80036ea:	484f      	ldr	r0, [pc, #316]	; (8003828 <HAL_TIM_MspPostInit+0x198>)
 80036ec:	f001 fc62 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80036f0:	e091      	b.n	8003816 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a4d      	ldr	r2, [pc, #308]	; (800382c <HAL_TIM_MspPostInit+0x19c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d11e      	bne.n	800373a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	4b48      	ldr	r3, [pc, #288]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4a47      	ldr	r2, [pc, #284]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	6313      	str	r3, [r2, #48]	; 0x30
 800370c:	4b45      	ldr	r3, [pc, #276]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003718:	2330      	movs	r3, #48	; 0x30
 800371a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2302      	movs	r3, #2
 800371e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003728:	2302      	movs	r3, #2
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372c:	f107 031c 	add.w	r3, r7, #28
 8003730:	4619      	mov	r1, r3
 8003732:	483f      	ldr	r0, [pc, #252]	; (8003830 <HAL_TIM_MspPostInit+0x1a0>)
 8003734:	f001 fc3e 	bl	8004fb4 <HAL_GPIO_Init>
}
 8003738:	e06d      	b.n	8003816 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a3d      	ldr	r2, [pc, #244]	; (8003834 <HAL_TIM_MspPostInit+0x1a4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d11f      	bne.n	8003784 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	4b36      	ldr	r3, [pc, #216]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	4a35      	ldr	r2, [pc, #212]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 800374e:	f043 0308 	orr.w	r3, r3, #8
 8003752:	6313      	str	r3, [r2, #48]	; 0x30
 8003754:	4b33      	ldr	r3, [pc, #204]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003760:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003772:	2302      	movs	r3, #2
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003776:	f107 031c 	add.w	r3, r7, #28
 800377a:	4619      	mov	r1, r3
 800377c:	482e      	ldr	r0, [pc, #184]	; (8003838 <HAL_TIM_MspPostInit+0x1a8>)
 800377e:	f001 fc19 	bl	8004fb4 <HAL_GPIO_Init>
}
 8003782:	e048      	b.n	8003816 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2c      	ldr	r2, [pc, #176]	; (800383c <HAL_TIM_MspPostInit+0x1ac>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d11f      	bne.n	80037ce <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	4a23      	ldr	r2, [pc, #140]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
 800379e:	4b21      	ldr	r3, [pc, #132]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80037bc:	2303      	movs	r3, #3
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	4619      	mov	r1, r3
 80037c6:	481a      	ldr	r0, [pc, #104]	; (8003830 <HAL_TIM_MspPostInit+0x1a0>)
 80037c8:	f001 fbf4 	bl	8004fb4 <HAL_GPIO_Init>
}
 80037cc:	e023      	b.n	8003816 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_TIM_MspPostInit+0x1b0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d11e      	bne.n	8003816 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	4a10      	ldr	r2, [pc, #64]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 80037e2:	f043 0302 	orr.w	r3, r3, #2
 80037e6:	6313      	str	r3, [r2, #48]	; 0x30
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_TIM_MspPostInit+0x194>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003802:	2300      	movs	r3, #0
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003806:	2303      	movs	r3, #3
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380a:	f107 031c 	add.w	r3, r7, #28
 800380e:	4619      	mov	r1, r3
 8003810:	4807      	ldr	r0, [pc, #28]	; (8003830 <HAL_TIM_MspPostInit+0x1a0>)
 8003812:	f001 fbcf 	bl	8004fb4 <HAL_GPIO_Init>
}
 8003816:	bf00      	nop
 8003818:	3730      	adds	r7, #48	; 0x30
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40023800 	.word	0x40023800
 8003828:	40021000 	.word	0x40021000
 800382c:	40000400 	.word	0x40000400
 8003830:	40020400 	.word	0x40020400
 8003834:	40000800 	.word	0x40000800
 8003838:	40020c00 	.word	0x40020c00
 800383c:	40014400 	.word	0x40014400
 8003840:	40014800 	.word	0x40014800

08003844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384c:	f107 0314 	add.w	r3, r7, #20
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_UART_MspInit+0x84>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d12b      	bne.n	80038be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_UART_MspInit+0x88>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_UART_MspInit+0x88>)
 8003870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_UART_MspInit+0x88>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_UART_MspInit+0x88>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a10      	ldr	r2, [pc, #64]	; (80038cc <HAL_UART_MspInit+0x88>)
 800388c:	f043 0308 	orr.w	r3, r3, #8
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_UART_MspInit+0x88>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800389e:	2360      	movs	r3, #96	; 0x60
 80038a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a2:	2302      	movs	r3, #2
 80038a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038aa:	2303      	movs	r3, #3
 80038ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038ae:	2307      	movs	r3, #7
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	4619      	mov	r1, r3
 80038b8:	4805      	ldr	r0, [pc, #20]	; (80038d0 <HAL_UART_MspInit+0x8c>)
 80038ba:	f001 fb7b 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038be:	bf00      	nop
 80038c0:	3728      	adds	r7, #40	; 0x28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40004400 	.word	0x40004400
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020c00 	.word	0x40020c00

080038d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038d8:	e7fe      	b.n	80038d8 <NMI_Handler+0x4>

080038da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038de:	e7fe      	b.n	80038de <HardFault_Handler+0x4>

080038e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <MemManage_Handler+0x4>

080038e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ea:	e7fe      	b.n	80038ea <BusFault_Handler+0x4>

080038ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f0:	e7fe      	b.n	80038f0 <UsageFault_Handler+0x4>

080038f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003920:	f000 fa54 	bl	8003dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}

08003928 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800392c:	2004      	movs	r0, #4
 800392e:	f001 fd1d 	bl	800536c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}

08003936 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800393a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800393e:	f001 fd15 	bl	800536c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <SDIO_IRQHandler+0x10>)
 800394e:	f003 fa89 	bl	8006e64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20002c18 	.word	0x20002c18

0800395c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <TIM6_DAC_IRQHandler+0x10>)
 8003962:	f004 fce8 	bl	8008336 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20002b98 	.word	0x20002b98

08003970 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003974:	4802      	ldr	r0, [pc, #8]	; (8003980 <DMA2_Stream2_IRQHandler+0x10>)
 8003976:	f001 f8a9 	bl	8004acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20002ce0 	.word	0x20002ce0

08003984 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <DMA2_Stream3_IRQHandler+0x10>)
 800398a:	f001 f89f 	bl	8004acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20002838 	.word	0x20002838

08003998 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <DMA2_Stream6_IRQHandler+0x10>)
 800399e:	f001 f895 	bl	8004acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20002b34 	.word	0x20002b34

080039ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e00a      	b.n	80039d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039be:	f3af 8000 	nop.w
 80039c2:	4601      	mov	r1, r0
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	60ba      	str	r2, [r7, #8]
 80039ca:	b2ca      	uxtb	r2, r1
 80039cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	3301      	adds	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	dbf0      	blt.n	80039be <_read+0x12>
	}

return len;
 80039dc:	687b      	ldr	r3, [r7, #4]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
	return -1;
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a0e:	605a      	str	r2, [r3, #4]
	return 0;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <_isatty>:

int _isatty(int file)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
	return 1;
 8003a26:	2301      	movs	r3, #1
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
	return 0;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a58:	4a14      	ldr	r2, [pc, #80]	; (8003aac <_sbrk+0x5c>)
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <_sbrk+0x60>)
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a64:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <_sbrk+0x64>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <_sbrk+0x64>)
 8003a6e:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <_sbrk+0x68>)
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <_sbrk+0x64>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d207      	bcs.n	8003a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a80:	f00a fc26 	bl	800e2d0 <__errno>
 8003a84:	4602      	mov	r2, r0
 8003a86:	230c      	movs	r3, #12
 8003a88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	e009      	b.n	8003aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <_sbrk+0x64>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <_sbrk+0x64>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <_sbrk+0x64>)
 8003aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20050000 	.word	0x20050000
 8003ab0:	00000400 	.word	0x00000400
 8003ab4:	200001fc 	.word	0x200001fc
 8003ab8:	20004e00 	.word	0x20004e00

08003abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <SystemInit+0x28>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <SystemInit+0x28>)
 8003ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <SystemInit+0x28>)
 8003ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <cppInit>:
LineTrace line_trace(&motor, &line_sensor);

float velocity;

void cppInit(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	line_sensor.ADCStart();
 8003aec:	480f      	ldr	r0, [pc, #60]	; (8003b2c <cppInit+0x44>)
 8003aee:	f7fd fe2f 	bl	8001750 <_ZN10LineSensor8ADCStartEv>
	line_sensor.calibration();
 8003af2:	480e      	ldr	r0, [pc, #56]	; (8003b2c <cppInit+0x44>)
 8003af4:	f7fd fe74 	bl	80017e0 <_ZN10LineSensor11calibrationEv>
	motor.init();
 8003af8:	480d      	ldr	r0, [pc, #52]	; (8003b30 <cppInit+0x48>)
 8003afa:	f7fd ffeb 	bl	8001ad4 <_ZN5Motor4initEv>
	encoder.init();
 8003afe:	480d      	ldr	r0, [pc, #52]	; (8003b34 <cppInit+0x4c>)
 8003b00:	f7fd faca 	bl	8001098 <_ZN7Encoder4initEv>
	//line_trace.init();
	line_trace.setGain(0.001, 0, 0);
 8003b04:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003b38 <cppInit+0x50>
 8003b08:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8003b38 <cppInit+0x50>
 8003b0c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003b3c <cppInit+0x54>
 8003b10:	480b      	ldr	r0, [pc, #44]	; (8003b40 <cppInit+0x58>)
 8003b12:	f7fd ffb4 	bl	8001a7e <_ZN9LineTrace7setGainEfff>
	velocity_ctrl.setVelocityGain(1, 0, 0);
 8003b16:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8003b38 <cppInit+0x50>
 8003b1a:	eddf 0a07 	vldr	s1, [pc, #28]	; 8003b38 <cppInit+0x50>
 8003b1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003b22:	4808      	ldr	r0, [pc, #32]	; (8003b44 <cppInit+0x5c>)
 8003b24:	f7fe fa1e 	bl	8001f64 <_ZN12VelocityCtrl15setVelocityGainEfff>

	//line_trace.calibration();

}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000200 	.word	0x20000200
 8003b30:	20000298 	.word	0x20000298
 8003b34:	200002a0 	.word	0x200002a0
 8003b38:	00000000 	.word	0x00000000
 8003b3c:	3a83126f 	.word	0x3a83126f
 8003b40:	200002d4 	.word	0x200002d4
 8003b44:	200002a4 	.word	0x200002a4

08003b48 <cppFlip>:

void cppFlip(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorvaluses();
 8003b4c:	480a      	ldr	r0, [pc, #40]	; (8003b78 <cppFlip+0x30>)
 8003b4e:	f7fd fe0f 	bl	8001770 <_ZN10LineSensor19updateSensorvalusesEv>
	encoder.updateCnt();
 8003b52:	480a      	ldr	r0, [pc, #40]	; (8003b7c <cppFlip+0x34>)
 8003b54:	f7fd fac0 	bl	80010d8 <_ZN7Encoder9updateCntEv>



	velocity = velocity_ctrl.flip();
 8003b58:	4809      	ldr	r0, [pc, #36]	; (8003b80 <cppFlip+0x38>)
 8003b5a:	f7fe fa1c 	bl	8001f96 <_ZN12VelocityCtrl4flipEv>
 8003b5e:	eef0 7a40 	vmov.f32	s15, s0
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <cppFlip+0x3c>)
 8003b64:	edc3 7a00 	vstr	s15, [r3]
	//line_trace.flip();



	motor.motorCtrl();
 8003b68:	4807      	ldr	r0, [pc, #28]	; (8003b88 <cppFlip+0x40>)
 8003b6a:	f7fd ffc5 	bl	8001af8 <_ZN5Motor9motorCtrlEv>
	encoder.clearCnt();
 8003b6e:	4803      	ldr	r0, [pc, #12]	; (8003b7c <cppFlip+0x34>)
 8003b70:	f7fd fae8 	bl	8001144 <_ZN7Encoder8clearCntEv>
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000200 	.word	0x20000200
 8003b7c:	200002a0 	.word	0x200002a0
 8003b80:	200002a4 	.word	0x200002a4
 8003b84:	200002e8 	.word	0x200002e8
 8003b88:	20000298 	.word	0x20000298

08003b8c <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <cppExit+0x1c>)
 8003b9c:	f7fe f8c8 	bl	8001d30 <_ZN10SideSensor12updateStatusEt>
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000290 	.word	0x20000290

08003bac <cppLoop>:

void cppLoop(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
	//encoder.getCnt(cnt_l, cnt_r);
	//printf("cpp encode: %d, %d\n", cnt_l, cnt_r);

	//motor.setRatio(0, 1.0);
	//velocity_ctrl.setVelocityGain(1, 1, 1);
	velocity_ctrl.setVelocity(0., 1);
 8003bb2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003bb6:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003c38 <cppLoop+0x8c>
 8003bba:	4820      	ldr	r0, [pc, #128]	; (8003c3c <cppLoop+0x90>)
 8003bbc:	f7fe f9be 	bl	8001f3c <_ZN12VelocityCtrl11setVelocityEff>

	printf("%d, %d, %d\n", line_sensor.sensor[0], line_sensor.sensor[1], line_sensor.sensor[2]);
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <cppLoop+0x94>)
 8003bc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <cppLoop+0x94>)
 8003bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <cppLoop+0x94>)
 8003bd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bd6:	481b      	ldr	r0, [pc, #108]	; (8003c44 <cppLoop+0x98>)
 8003bd8:	f00b f9ea 	bl	800efb0 <iprintf>
	int16_t enc_l, enc_r;
	encoder.getCnt(enc_l, enc_r);
 8003bdc:	1d3a      	adds	r2, r7, #4
 8003bde:	1dbb      	adds	r3, r7, #6
 8003be0:	4619      	mov	r1, r3
 8003be2:	4819      	ldr	r0, [pc, #100]	; (8003c48 <cppLoop+0x9c>)
 8003be4:	f7fd fa90 	bl	8001108 <_ZN7Encoder6getCntERsS0_>
	printf("velo: %d, %d\n", enc_l, enc_r);
 8003be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bec:	4619      	mov	r1, r3
 8003bee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4815      	ldr	r0, [pc, #84]	; (8003c4c <cppLoop+0xa0>)
 8003bf6:	f00b f9db 	bl	800efb0 <iprintf>


	led.fullColor('C');
 8003bfa:	2143      	movs	r1, #67	; 0x43
 8003bfc:	4814      	ldr	r0, [pc, #80]	; (8003c50 <cppLoop+0xa4>)
 8003bfe:	f7fd fc51 	bl	80014a4 <_ZN3LED9fullColorEc>
	led.LR(1, 1);
 8003c02:	2201      	movs	r2, #1
 8003c04:	2101      	movs	r1, #1
 8003c06:	4812      	ldr	r0, [pc, #72]	; (8003c50 <cppLoop+0xa4>)
 8003c08:	f7fd fd08 	bl	800161c <_ZN3LED2LREaa>

	HAL_Delay(1000);
 8003c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c10:	f000 f8fc 	bl	8003e0c <HAL_Delay>

	//motor.setRatio(0, -0.5);
	//velocity_ctrl.setOmegaGain(1, 1, 1);
	led.fullColor('Y');
 8003c14:	2159      	movs	r1, #89	; 0x59
 8003c16:	480e      	ldr	r0, [pc, #56]	; (8003c50 <cppLoop+0xa4>)
 8003c18:	f7fd fc44 	bl	80014a4 <_ZN3LED9fullColorEc>
	led.LR(-1, 0);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c22:	480b      	ldr	r0, [pc, #44]	; (8003c50 <cppLoop+0xa4>)
 8003c24:	f7fd fcfa 	bl	800161c <_ZN3LED2LREaa>

	HAL_Delay(1000);
 8003c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c2c:	f000 f8ee 	bl	8003e0c <HAL_Delay>

}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00000000 	.word	0x00000000
 8003c3c:	200002a4 	.word	0x200002a4
 8003c40:	20000200 	.word	0x20000200
 8003c44:	080131f0 	.word	0x080131f0
 8003c48:	200002a0 	.word	0x200002a0
 8003c4c:	080131fc 	.word	0x080131fc
 8003c50:	2000029c 	.word	0x2000029c

08003c54 <_Z41__static_initialization_and_destruction_0ii>:
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d11d      	bne.n	8003ca0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d118      	bne.n	8003ca0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
LineSensor line_sensor;
 8003c6e:	480e      	ldr	r0, [pc, #56]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003c70:	f7fd fd0c 	bl	800168c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8003c74:	480d      	ldr	r0, [pc, #52]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003c76:	f7fe f84f 	bl	8001d18 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8003c7a:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003c7c:	f7fd fba2 	bl	80013c4 <_ZN8JoyStickC1Ev>
Motor motor;
 8003c80:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003c82:	f7fd ff15 	bl	8001ab0 <_ZN5MotorC1Ev>
Encoder encoder;
 8003c86:	480c      	ldr	r0, [pc, #48]	; (8003cb8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003c88:	f7fd f9f2 	bl	8001070 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder);
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003c8e:	4909      	ldr	r1, [pc, #36]	; (8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003c90:	480a      	ldr	r0, [pc, #40]	; (8003cbc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003c92:	f7fe f8ab 	bl	8001dec <_ZN12VelocityCtrlC1EP5MotorP7Encoder>
LineTrace line_trace(&motor, &line_sensor);
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003c98:	4906      	ldr	r1, [pc, #24]	; (8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003c9a:	4809      	ldr	r0, [pc, #36]	; (8003cc0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003c9c:	f7fd fed0 	bl	8001a40 <_ZN9LineTraceC1EP5MotorP10LineSensor>
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000200 	.word	0x20000200
 8003cac:	20000290 	.word	0x20000290
 8003cb0:	20000294 	.word	0x20000294
 8003cb4:	20000298 	.word	0x20000298
 8003cb8:	200002a0 	.word	0x200002a0
 8003cbc:	200002a4 	.word	0x200002a4
 8003cc0:	200002d4 	.word	0x200002d4

08003cc4 <_GLOBAL__sub_I_line_sensor>:
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f7ff ffc1 	bl	8003c54 <_Z41__static_initialization_and_destruction_0ii>
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003cd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003cda:	e003      	b.n	8003ce4 <LoopCopyDataInit>

08003cdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003cde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ce0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ce2:	3104      	adds	r1, #4

08003ce4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ce4:	480b      	ldr	r0, [pc, #44]	; (8003d14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ce8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003cea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003cec:	d3f6      	bcc.n	8003cdc <CopyDataInit>
  ldr  r2, =_sbss
 8003cee:	4a0b      	ldr	r2, [pc, #44]	; (8003d1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cf0:	e002      	b.n	8003cf8 <LoopFillZerobss>

08003cf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cf4:	f842 3b04 	str.w	r3, [r2], #4

08003cf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cfc:	d3f9      	bcc.n	8003cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cfe:	f7ff fedd 	bl	8003abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d02:	f00a faeb 	bl	800e2dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d06:	f7fe fa13 	bl	8002130 <main>
  bx  lr    
 8003d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d0c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003d10:	08013a20 	.word	0x08013a20
  ldr  r0, =_sdata
 8003d14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d18:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003d1c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003d20:	20004dfc 	.word	0x20004dfc

08003d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d24:	e7fe      	b.n	8003d24 <ADC_IRQHandler>
	...

08003d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <HAL_Init+0x40>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <HAL_Init+0x40>)
 8003d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_Init+0x40>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a0a      	ldr	r2, [pc, #40]	; (8003d68 <HAL_Init+0x40>)
 8003d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d44:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_Init+0x40>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <HAL_Init+0x40>)
 8003d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d50:	2003      	movs	r0, #3
 8003d52:	f000 fd51 	bl	80047f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d56:	2000      	movs	r0, #0
 8003d58:	f000 f808 	bl	8003d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d5c:	f7ff f8e2 	bl	8002f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023c00 	.word	0x40023c00

08003d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_InitTick+0x54>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <HAL_InitTick+0x58>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fd69 	bl	8004862 <HAL_SYSTICK_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e00e      	b.n	8003db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b0f      	cmp	r3, #15
 8003d9e:	d80a      	bhi.n	8003db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003da0:	2200      	movs	r2, #0
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	f000 fd31 	bl	800480e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dac:	4a06      	ldr	r2, [pc, #24]	; (8003dc8 <HAL_InitTick+0x5c>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e000      	b.n	8003db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000000 	.word	0x20000000
 8003dc4:	20000008 	.word	0x20000008
 8003dc8:	20000004 	.word	0x20000004

08003dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_IncTick+0x20>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_IncTick+0x24>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4413      	add	r3, r2
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <HAL_IncTick+0x24>)
 8003dde:	6013      	str	r3, [r2, #0]
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000008 	.word	0x20000008
 8003df0:	20002d80 	.word	0x20002d80

08003df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return uwTick;
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <HAL_GetTick+0x14>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20002d80 	.word	0x20002d80

08003e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e14:	f7ff ffee 	bl	8003df4 <HAL_GetTick>
 8003e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d005      	beq.n	8003e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_Delay+0x40>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e32:	bf00      	nop
 8003e34:	f7ff ffde 	bl	8003df4 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d8f7      	bhi.n	8003e34 <HAL_Delay+0x28>
  {
  }
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000008 	.word	0x20000008

08003e50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e033      	b.n	8003ece <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff f880 	bl	8002f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d118      	bne.n	8003ec0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e96:	f023 0302 	bic.w	r3, r3, #2
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa5a 	bl	800435c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	f043 0201 	orr.w	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8003ebe:	e001      	b.n	8003ec4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_ADC_Start_DMA+0x1e>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e0cc      	b.n	8004090 <HAL_ADC_Start_DMA+0x1b8>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d018      	beq.n	8003f3e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f1c:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <HAL_ADC_Start_DMA+0x1c0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5e      	ldr	r2, [pc, #376]	; (800409c <HAL_ADC_Start_DMA+0x1c4>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	0c9a      	lsrs	r2, r3, #18
 8003f28:	4613      	mov	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f30:	e002      	b.n	8003f38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f9      	bne.n	8003f32 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f040 80a0 	bne.w	800408e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d106      	bne.n	8003f9c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f023 0206 	bic.w	r2, r3, #6
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	645a      	str	r2, [r3, #68]	; 0x44
 8003f9a:	e002      	b.n	8003fa2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <HAL_ADC_Start_DMA+0x1c8>)
 8003fac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <HAL_ADC_Start_DMA+0x1cc>)
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <HAL_ADC_Start_DMA+0x1d0>)
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <HAL_ADC_Start_DMA+0x1d4>)
 8003fc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003fce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	334c      	adds	r3, #76	; 0x4c
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f000 fcea 	bl	80049d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2b00      	cmp	r3, #0
 800400e:	d12a      	bne.n	8004066 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <HAL_ADC_Start_DMA+0x1d8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d015      	beq.n	8004046 <HAL_ADC_Start_DMA+0x16e>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <HAL_ADC_Start_DMA+0x1dc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d105      	bne.n	8004030 <HAL_ADC_Start_DMA+0x158>
 8004024:	4b1e      	ldr	r3, [pc, #120]	; (80040a0 <HAL_ADC_Start_DMA+0x1c8>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a20      	ldr	r2, [pc, #128]	; (80040b8 <HAL_ADC_Start_DMA+0x1e0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d129      	bne.n	800408e <HAL_ADC_Start_DMA+0x1b6>
 800403a:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <HAL_ADC_Start_DMA+0x1c8>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2b0f      	cmp	r3, #15
 8004044:	d823      	bhi.n	800408e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d11c      	bne.n	800408e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	e013      	b.n	800408e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <HAL_ADC_Start_DMA+0x1d8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10e      	bne.n	800408e <HAL_ADC_Start_DMA+0x1b6>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d107      	bne.n	800408e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800408c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000000 	.word	0x20000000
 800409c:	431bde83 	.word	0x431bde83
 80040a0:	40012300 	.word	0x40012300
 80040a4:	08004555 	.word	0x08004555
 80040a8:	0800460f 	.word	0x0800460f
 80040ac:	0800462b 	.word	0x0800462b
 80040b0:	40012000 	.word	0x40012000
 80040b4:	40012100 	.word	0x40012100
 80040b8:	40012200 	.word	0x40012200

080040bc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x1c>
 8004110:	2302      	movs	r3, #2
 8004112:	e113      	b.n	800433c <HAL_ADC_ConfigChannel+0x244>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b09      	cmp	r3, #9
 8004122:	d925      	bls.n	8004170 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68d9      	ldr	r1, [r3, #12]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	3b1e      	subs	r3, #30
 800413a:	2207      	movs	r2, #7
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43da      	mvns	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	400a      	ands	r2, r1
 8004148:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68d9      	ldr	r1, [r3, #12]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	4618      	mov	r0, r3
 800415c:	4603      	mov	r3, r0
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4403      	add	r3, r0
 8004162:	3b1e      	subs	r3, #30
 8004164:	409a      	lsls	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	e022      	b.n	80041b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6919      	ldr	r1, [r3, #16]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	4613      	mov	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	2207      	movs	r2, #7
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43da      	mvns	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	400a      	ands	r2, r1
 8004192:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6919      	ldr	r1, [r3, #16]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	4618      	mov	r0, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4403      	add	r3, r0
 80041ac:	409a      	lsls	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	d824      	bhi.n	8004208 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	3b05      	subs	r3, #5
 80041d0:	221f      	movs	r2, #31
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43da      	mvns	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	400a      	ands	r2, r1
 80041de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	4618      	mov	r0, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	3b05      	subs	r3, #5
 80041fa:	fa00 f203 	lsl.w	r2, r0, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	635a      	str	r2, [r3, #52]	; 0x34
 8004206:	e04c      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	d824      	bhi.n	800425a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	3b23      	subs	r3, #35	; 0x23
 8004222:	221f      	movs	r2, #31
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43da      	mvns	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	400a      	ands	r2, r1
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	4618      	mov	r0, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	3b23      	subs	r3, #35	; 0x23
 800424c:	fa00 f203 	lsl.w	r2, r0, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
 8004258:	e023      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	3b41      	subs	r3, #65	; 0x41
 800426c:	221f      	movs	r2, #31
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43da      	mvns	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	400a      	ands	r2, r1
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	4618      	mov	r0, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	3b41      	subs	r3, #65	; 0x41
 8004296:	fa00 f203 	lsl.w	r2, r0, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042a2:	4b29      	ldr	r3, [pc, #164]	; (8004348 <HAL_ADC_ConfigChannel+0x250>)
 80042a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a28      	ldr	r2, [pc, #160]	; (800434c <HAL_ADC_ConfigChannel+0x254>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10f      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x1d8>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b12      	cmp	r3, #18
 80042b6:	d10b      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <HAL_ADC_ConfigChannel+0x254>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d12b      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x23a>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1c      	ldr	r2, [pc, #112]	; (8004350 <HAL_ADC_ConfigChannel+0x258>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <HAL_ADC_ConfigChannel+0x1f4>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b11      	cmp	r3, #17
 80042ea:	d122      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a11      	ldr	r2, [pc, #68]	; (8004350 <HAL_ADC_ConfigChannel+0x258>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d111      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <HAL_ADC_ConfigChannel+0x25c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a11      	ldr	r2, [pc, #68]	; (8004358 <HAL_ADC_ConfigChannel+0x260>)
 8004314:	fba2 2303 	umull	r2, r3, r2, r3
 8004318:	0c9a      	lsrs	r2, r3, #18
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004324:	e002      	b.n	800432c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3b01      	subs	r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f9      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40012300 	.word	0x40012300
 800434c:	40012000 	.word	0x40012000
 8004350:	10000012 	.word	0x10000012
 8004354:	20000000 	.word	0x20000000
 8004358:	431bde83 	.word	0x431bde83

0800435c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004364:	4b79      	ldr	r3, [pc, #484]	; (800454c <ADC_Init+0x1f0>)
 8004366:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	021a      	lsls	r2, r3, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6899      	ldr	r1, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	4a58      	ldr	r2, [pc, #352]	; (8004550 <ADC_Init+0x1f4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d022      	beq.n	800443a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004402:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6899      	ldr	r1, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6899      	ldr	r1, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	e00f      	b.n	800445a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004458:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0202 	bic.w	r2, r2, #2
 8004468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6899      	ldr	r1, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	7e1b      	ldrb	r3, [r3, #24]
 8004474:	005a      	lsls	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004496:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80044a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6859      	ldr	r1, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	3b01      	subs	r3, #1
 80044b4:	035a      	lsls	r2, r3, #13
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	e007      	b.n	80044d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	051a      	lsls	r2, r3, #20
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6899      	ldr	r1, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004512:	025a      	lsls	r2, r3, #9
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6899      	ldr	r1, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	029a      	lsls	r2, r3, #10
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40012300 	.word	0x40012300
 8004550:	0f000001 	.word	0x0f000001

08004554 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800456a:	2b00      	cmp	r3, #0
 800456c:	d13c      	bne.n	80045e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d12b      	bne.n	80045e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800458c:	2b00      	cmp	r3, #0
 800458e:	d127      	bne.n	80045e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d119      	bne.n	80045e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0220 	bic.w	r2, r2, #32
 80045ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff fd6b 	bl	80040bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045e6:	e00e      	b.n	8004606 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff fd75 	bl	80040e4 <HAL_ADC_ErrorCallback>
}
 80045fa:	e004      	b.n	8004606 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
}
 8004606:	bf00      	nop
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff fd57 	bl	80040d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2240      	movs	r2, #64	; 0x40
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	f043 0204 	orr.w	r2, r3, #4
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fd4a 	bl	80040e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <__NVIC_SetPriorityGrouping>:
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <__NVIC_SetPriorityGrouping+0x44>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004674:	4013      	ands	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800468a:	4a04      	ldr	r2, [pc, #16]	; (800469c <__NVIC_SetPriorityGrouping+0x44>)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	60d3      	str	r3, [r2, #12]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <__NVIC_GetPriorityGrouping>:
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <__NVIC_GetPriorityGrouping+0x18>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 0307 	and.w	r3, r3, #7
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <__NVIC_EnableIRQ>:
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	db0b      	blt.n	80046e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	f003 021f 	and.w	r2, r3, #31
 80046d4:	4907      	ldr	r1, [pc, #28]	; (80046f4 <__NVIC_EnableIRQ+0x38>)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2001      	movs	r0, #1
 80046de:	fa00 f202 	lsl.w	r2, r0, r2
 80046e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000e100 	.word	0xe000e100

080046f8 <__NVIC_SetPriority>:
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004708:	2b00      	cmp	r3, #0
 800470a:	db0a      	blt.n	8004722 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	b2da      	uxtb	r2, r3
 8004710:	490c      	ldr	r1, [pc, #48]	; (8004744 <__NVIC_SetPriority+0x4c>)
 8004712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004716:	0112      	lsls	r2, r2, #4
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	440b      	add	r3, r1
 800471c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004720:	e00a      	b.n	8004738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	4908      	ldr	r1, [pc, #32]	; (8004748 <__NVIC_SetPriority+0x50>)
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	3b04      	subs	r3, #4
 8004730:	0112      	lsls	r2, r2, #4
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	440b      	add	r3, r1
 8004736:	761a      	strb	r2, [r3, #24]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	e000e100 	.word	0xe000e100
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <NVIC_EncodePriority>:
{
 800474c:	b480      	push	{r7}
 800474e:	b089      	sub	sp, #36	; 0x24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f1c3 0307 	rsb	r3, r3, #7
 8004766:	2b04      	cmp	r3, #4
 8004768:	bf28      	it	cs
 800476a:	2304      	movcs	r3, #4
 800476c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3304      	adds	r3, #4
 8004772:	2b06      	cmp	r3, #6
 8004774:	d902      	bls.n	800477c <NVIC_EncodePriority+0x30>
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3b03      	subs	r3, #3
 800477a:	e000      	b.n	800477e <NVIC_EncodePriority+0x32>
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43da      	mvns	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	401a      	ands	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004794:	f04f 31ff 	mov.w	r1, #4294967295
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	43d9      	mvns	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a4:	4313      	orrs	r3, r2
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3724      	adds	r7, #36	; 0x24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <SysTick_Config>:
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c4:	d301      	bcc.n	80047ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80047c6:	2301      	movs	r3, #1
 80047c8:	e00f      	b.n	80047ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ca:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <SysTick_Config+0x40>)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047d2:	210f      	movs	r1, #15
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	f7ff ff8e 	bl	80046f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <SysTick_Config+0x40>)
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047e2:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <SysTick_Config+0x40>)
 80047e4:	2207      	movs	r2, #7
 80047e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	e000e010 	.word	0xe000e010

080047f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff29 	bl	8004658 <__NVIC_SetPriorityGrouping>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800480e:	b580      	push	{r7, lr}
 8004810:	b086      	sub	sp, #24
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004820:	f7ff ff3e 	bl	80046a0 <__NVIC_GetPriorityGrouping>
 8004824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	f7ff ff8e 	bl	800474c <NVIC_EncodePriority>
 8004830:	4602      	mov	r2, r0
 8004832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ff5d 	bl	80046f8 <__NVIC_SetPriority>
}
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	4603      	mov	r3, r0
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff31 	bl	80046bc <__NVIC_EnableIRQ>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff ffa2 	bl	80047b4 <SysTick_Config>
 8004870:	4603      	mov	r3, r0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004888:	f7ff fab4 	bl	8003df4 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e099      	b.n	80049cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048b8:	e00f      	b.n	80048da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ba:	f7ff fa9b 	bl	8003df4 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b05      	cmp	r3, #5
 80048c6:	d908      	bls.n	80048da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2203      	movs	r2, #3
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e078      	b.n	80049cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e8      	bne.n	80048ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4b38      	ldr	r3, [pc, #224]	; (80049d4 <HAL_DMA_Init+0x158>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004906:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2b04      	cmp	r3, #4
 8004932:	d107      	bne.n	8004944 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	4313      	orrs	r3, r2
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f023 0307 	bic.w	r3, r3, #7
 800495a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b04      	cmp	r3, #4
 800496c:	d117      	bne.n	800499e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00e      	beq.n	800499e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fa9d 	bl	8004ec0 <DMA_CheckFifoParam>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800499a:	2301      	movs	r3, #1
 800499c:	e016      	b.n	80049cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fa54 	bl	8004e54 <DMA_CalcBaseAndBitshift>
 80049ac:	4603      	mov	r3, r0
 80049ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b4:	223f      	movs	r2, #63	; 0x3f
 80049b6:	409a      	lsls	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	f010803f 	.word	0xf010803f

080049d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_DMA_Start_IT+0x26>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e040      	b.n	8004a80 <HAL_DMA_Start_IT+0xa8>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d12f      	bne.n	8004a72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f9e6 	bl	8004df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a30:	223f      	movs	r2, #63	; 0x3f
 8004a32:	409a      	lsls	r2, r3
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0216 	orr.w	r2, r2, #22
 8004a46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0208 	orr.w	r2, r2, #8
 8004a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e005      	b.n	8004a7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2280      	movs	r2, #128	; 0x80
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00c      	b.n	8004ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2205      	movs	r2, #5
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0201 	bic.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ad8:	4b92      	ldr	r3, [pc, #584]	; (8004d24 <HAL_DMA_IRQHandler+0x258>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a92      	ldr	r2, [pc, #584]	; (8004d28 <HAL_DMA_IRQHandler+0x25c>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0a9b      	lsrs	r3, r3, #10
 8004ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af6:	2208      	movs	r2, #8
 8004af8:	409a      	lsls	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4013      	ands	r3, r2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01a      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0204 	bic.w	r2, r2, #4
 8004b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	2208      	movs	r2, #8
 8004b26:	409a      	lsls	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b30:	f043 0201 	orr.w	r2, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d012      	beq.n	8004b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	f043 0202 	orr.w	r2, r3, #2
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b72:	2204      	movs	r2, #4
 8004b74:	409a      	lsls	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d012      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b90:	2204      	movs	r2, #4
 8004b92:	409a      	lsls	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	f043 0204 	orr.w	r2, r3, #4
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	2210      	movs	r2, #16
 8004baa:	409a      	lsls	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d043      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d03c      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	2210      	movs	r2, #16
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d018      	beq.n	8004c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d108      	bne.n	8004bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d024      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
 8004bfa:	e01f      	b.n	8004c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4798      	blx	r3
 8004c0c:	e016      	b.n	8004c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d107      	bne.n	8004c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0208 	bic.w	r2, r2, #8
 8004c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c40:	2220      	movs	r2, #32
 8004c42:	409a      	lsls	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 808e 	beq.w	8004d6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8086 	beq.w	8004d6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	2220      	movs	r2, #32
 8004c64:	409a      	lsls	r2, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d136      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0216 	bic.w	r2, r2, #22
 8004c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <HAL_DMA_IRQHandler+0x1da>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0208 	bic.w	r2, r2, #8
 8004cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	223f      	movs	r2, #63	; 0x3f
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d07d      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
        }
        return;
 8004ce2:	e078      	b.n	8004dd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01c      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d108      	bne.n	8004d12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d030      	beq.n	8004d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4798      	blx	r3
 8004d10:	e02b      	b.n	8004d6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d027      	beq.n	8004d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
 8004d22:	e022      	b.n	8004d6a <HAL_DMA_IRQHandler+0x29e>
 8004d24:	20000000 	.word	0x20000000
 8004d28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10f      	bne.n	8004d5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0210 	bic.w	r2, r2, #16
 8004d48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d032      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d022      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2205      	movs	r2, #5
 8004d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d307      	bcc.n	8004db2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f2      	bne.n	8004d96 <HAL_DMA_IRQHandler+0x2ca>
 8004db0:	e000      	b.n	8004db4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004db2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
 8004dd4:	e000      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004dd6:	bf00      	nop
    }
  }
}
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop

08004de0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d108      	bne.n	8004e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e36:	e007      	b.n	8004e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	3b10      	subs	r3, #16
 8004e64:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e6e:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <DMA_CalcBaseAndBitshift+0x68>)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d909      	bls.n	8004e96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	659a      	str	r2, [r3, #88]	; 0x58
 8004e94:	e007      	b.n	8004ea6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	aaaaaaab 	.word	0xaaaaaaab
 8004ebc:	08013278 	.word	0x08013278

08004ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11f      	bne.n	8004f1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d855      	bhi.n	8004f8c <DMA_CheckFifoParam+0xcc>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <DMA_CheckFifoParam+0x28>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004f0b 	.word	0x08004f0b
 8004ef0:	08004ef9 	.word	0x08004ef9
 8004ef4:	08004f8d 	.word	0x08004f8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d045      	beq.n	8004f90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f08:	e042      	b.n	8004f90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f12:	d13f      	bne.n	8004f94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f18:	e03c      	b.n	8004f94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	d121      	bne.n	8004f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d836      	bhi.n	8004f98 <DMA_CheckFifoParam+0xd8>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <DMA_CheckFifoParam+0x70>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f47 	.word	0x08004f47
 8004f38:	08004f41 	.word	0x08004f41
 8004f3c:	08004f59 	.word	0x08004f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
      break;
 8004f44:	e02f      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d024      	beq.n	8004f9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f56:	e021      	b.n	8004f9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f60:	d11e      	bne.n	8004fa0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f66:	e01b      	b.n	8004fa0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d902      	bls.n	8004f74 <DMA_CheckFifoParam+0xb4>
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d003      	beq.n	8004f7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f72:	e018      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
      break;
 8004f78:	e015      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00e      	beq.n	8004fa4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
      break;
 8004f8a:	e00b      	b.n	8004fa4 <DMA_CheckFifoParam+0xe4>
      break;
 8004f8c:	bf00      	nop
 8004f8e:	e00a      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8004f90:	bf00      	nop
 8004f92:	e008      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8004f94:	bf00      	nop
 8004f96:	e006      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8004f98:	bf00      	nop
 8004f9a:	e004      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      break;   
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fa4:	bf00      	nop
    }
  } 
  
  return status; 
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	e177      	b.n	80052c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	f040 8166 	bne.w	80052ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d00b      	beq.n	800500e <HAL_GPIO_Init+0x5a>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d007      	beq.n	800500e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005002:	2b11      	cmp	r3, #17
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b12      	cmp	r3, #18
 800500c:	d130      	bne.n	8005070 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005044:	2201      	movs	r2, #1
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 0201 	and.w	r2, r3, #1
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	2203      	movs	r2, #3
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0xfc>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b12      	cmp	r3, #18
 80050ae:	d123      	bne.n	80050f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	08da      	lsrs	r2, r3, #3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3208      	adds	r2, #8
 80050b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	220f      	movs	r2, #15
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	08da      	lsrs	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3208      	adds	r2, #8
 80050f2:	69b9      	ldr	r1, [r7, #24]
 80050f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	2203      	movs	r2, #3
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0203 	and.w	r2, r3, #3
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4313      	orrs	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80c0 	beq.w	80052ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	4b65      	ldr	r3, [pc, #404]	; (80052d4 <HAL_GPIO_Init+0x320>)
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	4a64      	ldr	r2, [pc, #400]	; (80052d4 <HAL_GPIO_Init+0x320>)
 8005144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005148:	6453      	str	r3, [r2, #68]	; 0x44
 800514a:	4b62      	ldr	r3, [pc, #392]	; (80052d4 <HAL_GPIO_Init+0x320>)
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005156:	4a60      	ldr	r2, [pc, #384]	; (80052d8 <HAL_GPIO_Init+0x324>)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	3302      	adds	r3, #2
 800515e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a57      	ldr	r2, [pc, #348]	; (80052dc <HAL_GPIO_Init+0x328>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d037      	beq.n	80051f2 <HAL_GPIO_Init+0x23e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a56      	ldr	r2, [pc, #344]	; (80052e0 <HAL_GPIO_Init+0x32c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d031      	beq.n	80051ee <HAL_GPIO_Init+0x23a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a55      	ldr	r2, [pc, #340]	; (80052e4 <HAL_GPIO_Init+0x330>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d02b      	beq.n	80051ea <HAL_GPIO_Init+0x236>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a54      	ldr	r2, [pc, #336]	; (80052e8 <HAL_GPIO_Init+0x334>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d025      	beq.n	80051e6 <HAL_GPIO_Init+0x232>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a53      	ldr	r2, [pc, #332]	; (80052ec <HAL_GPIO_Init+0x338>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01f      	beq.n	80051e2 <HAL_GPIO_Init+0x22e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a52      	ldr	r2, [pc, #328]	; (80052f0 <HAL_GPIO_Init+0x33c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d019      	beq.n	80051de <HAL_GPIO_Init+0x22a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a51      	ldr	r2, [pc, #324]	; (80052f4 <HAL_GPIO_Init+0x340>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d013      	beq.n	80051da <HAL_GPIO_Init+0x226>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a50      	ldr	r2, [pc, #320]	; (80052f8 <HAL_GPIO_Init+0x344>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00d      	beq.n	80051d6 <HAL_GPIO_Init+0x222>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a4f      	ldr	r2, [pc, #316]	; (80052fc <HAL_GPIO_Init+0x348>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d007      	beq.n	80051d2 <HAL_GPIO_Init+0x21e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a4e      	ldr	r2, [pc, #312]	; (8005300 <HAL_GPIO_Init+0x34c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d101      	bne.n	80051ce <HAL_GPIO_Init+0x21a>
 80051ca:	2309      	movs	r3, #9
 80051cc:	e012      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051ce:	230a      	movs	r3, #10
 80051d0:	e010      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051d2:	2308      	movs	r3, #8
 80051d4:	e00e      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051d6:	2307      	movs	r3, #7
 80051d8:	e00c      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051da:	2306      	movs	r3, #6
 80051dc:	e00a      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051de:	2305      	movs	r3, #5
 80051e0:	e008      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051e2:	2304      	movs	r3, #4
 80051e4:	e006      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051e6:	2303      	movs	r3, #3
 80051e8:	e004      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e002      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <HAL_GPIO_Init+0x240>
 80051f2:	2300      	movs	r3, #0
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	f002 0203 	and.w	r2, r2, #3
 80051fa:	0092      	lsls	r2, r2, #2
 80051fc:	4093      	lsls	r3, r2
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4313      	orrs	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005204:	4934      	ldr	r1, [pc, #208]	; (80052d8 <HAL_GPIO_Init+0x324>)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	089b      	lsrs	r3, r3, #2
 800520a:	3302      	adds	r3, #2
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005212:	4b3c      	ldr	r3, [pc, #240]	; (8005304 <HAL_GPIO_Init+0x350>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005236:	4a33      	ldr	r2, [pc, #204]	; (8005304 <HAL_GPIO_Init+0x350>)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800523c:	4b31      	ldr	r3, [pc, #196]	; (8005304 <HAL_GPIO_Init+0x350>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005260:	4a28      	ldr	r2, [pc, #160]	; (8005304 <HAL_GPIO_Init+0x350>)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005266:	4b27      	ldr	r3, [pc, #156]	; (8005304 <HAL_GPIO_Init+0x350>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	43db      	mvns	r3, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4013      	ands	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800528a:	4a1e      	ldr	r2, [pc, #120]	; (8005304 <HAL_GPIO_Init+0x350>)
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005290:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <HAL_GPIO_Init+0x350>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	43db      	mvns	r3, r3
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	4013      	ands	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052b4:	4a13      	ldr	r2, [pc, #76]	; (8005304 <HAL_GPIO_Init+0x350>)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	3301      	adds	r3, #1
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b0f      	cmp	r3, #15
 80052c4:	f67f ae84 	bls.w	8004fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052c8:	bf00      	nop
 80052ca:	3724      	adds	r7, #36	; 0x24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40013800 	.word	0x40013800
 80052dc:	40020000 	.word	0x40020000
 80052e0:	40020400 	.word	0x40020400
 80052e4:	40020800 	.word	0x40020800
 80052e8:	40020c00 	.word	0x40020c00
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40021400 	.word	0x40021400
 80052f4:	40021800 	.word	0x40021800
 80052f8:	40021c00 	.word	0x40021c00
 80052fc:	40022000 	.word	0x40022000
 8005300:	40022400 	.word	0x40022400
 8005304:	40013c00 	.word	0x40013c00

08005308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	887b      	ldrh	r3, [r7, #2]
 800531a:	4013      	ands	r3, r2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
 8005324:	e001      	b.n	800532a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	807b      	strh	r3, [r7, #2]
 8005344:	4613      	mov	r3, r2
 8005346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005348:	787b      	ldrb	r3, [r7, #1]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800534e:	887a      	ldrh	r2, [r7, #2]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005354:	e003      	b.n	800535e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005356:	887b      	ldrh	r3, [r7, #2]
 8005358:	041a      	lsls	r2, r3, #16
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	619a      	str	r2, [r3, #24]
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005376:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d006      	beq.n	8005390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005382:	4a05      	ldr	r2, [pc, #20]	; (8005398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	4618      	mov	r0, r3
 800538c:	f7fc fe5a 	bl	8002044 <HAL_GPIO_EXTI_Callback>
  }
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40013c00 	.word	0x40013c00

0800539c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e11f      	b.n	80055ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fd fe88 	bl	80030d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2224      	movs	r2, #36	; 0x24
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005400:	f000 fe24 	bl	800604c <HAL_RCC_GetPCLK1Freq>
 8005404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4a7b      	ldr	r2, [pc, #492]	; (80055f8 <HAL_I2C_Init+0x25c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d807      	bhi.n	8005420 <HAL_I2C_Init+0x84>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a7a      	ldr	r2, [pc, #488]	; (80055fc <HAL_I2C_Init+0x260>)
 8005414:	4293      	cmp	r3, r2
 8005416:	bf94      	ite	ls
 8005418:	2301      	movls	r3, #1
 800541a:	2300      	movhi	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e006      	b.n	800542e <HAL_I2C_Init+0x92>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a77      	ldr	r2, [pc, #476]	; (8005600 <HAL_I2C_Init+0x264>)
 8005424:	4293      	cmp	r3, r2
 8005426:	bf94      	ite	ls
 8005428:	2301      	movls	r3, #1
 800542a:	2300      	movhi	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e0db      	b.n	80055ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a72      	ldr	r2, [pc, #456]	; (8005604 <HAL_I2C_Init+0x268>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	0c9b      	lsrs	r3, r3, #18
 8005440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a64      	ldr	r2, [pc, #400]	; (80055f8 <HAL_I2C_Init+0x25c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d802      	bhi.n	8005470 <HAL_I2C_Init+0xd4>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	3301      	adds	r3, #1
 800546e:	e009      	b.n	8005484 <HAL_I2C_Init+0xe8>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	4a63      	ldr	r2, [pc, #396]	; (8005608 <HAL_I2C_Init+0x26c>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	099b      	lsrs	r3, r3, #6
 8005482:	3301      	adds	r3, #1
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	430b      	orrs	r3, r1
 800548a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4956      	ldr	r1, [pc, #344]	; (80055f8 <HAL_I2C_Init+0x25c>)
 80054a0:	428b      	cmp	r3, r1
 80054a2:	d80d      	bhi.n	80054c0 <HAL_I2C_Init+0x124>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1e59      	subs	r1, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80054b2:	3301      	adds	r3, #1
 80054b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	bf38      	it	cc
 80054bc:	2304      	movcc	r3, #4
 80054be:	e04f      	b.n	8005560 <HAL_I2C_Init+0x1c4>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d111      	bne.n	80054ec <HAL_I2C_Init+0x150>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1e58      	subs	r0, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6859      	ldr	r1, [r3, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	440b      	add	r3, r1
 80054d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054da:	3301      	adds	r3, #1
 80054dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	e012      	b.n	8005512 <HAL_I2C_Init+0x176>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1e58      	subs	r0, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	0099      	lsls	r1, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005502:	3301      	adds	r3, #1
 8005504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_I2C_Init+0x17e>
 8005516:	2301      	movs	r3, #1
 8005518:	e022      	b.n	8005560 <HAL_I2C_Init+0x1c4>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10e      	bne.n	8005540 <HAL_I2C_Init+0x1a4>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1e58      	subs	r0, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6859      	ldr	r1, [r3, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	440b      	add	r3, r1
 8005530:	fbb0 f3f3 	udiv	r3, r0, r3
 8005534:	3301      	adds	r3, #1
 8005536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553e:	e00f      	b.n	8005560 <HAL_I2C_Init+0x1c4>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e58      	subs	r0, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	0099      	lsls	r1, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	fbb0 f3f3 	udiv	r3, r0, r3
 8005556:	3301      	adds	r3, #1
 8005558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	6809      	ldr	r1, [r1, #0]
 8005564:	4313      	orrs	r3, r2
 8005566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800558e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6911      	ldr	r1, [r2, #16]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68d2      	ldr	r2, [r2, #12]
 800559a:	4311      	orrs	r1, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	430b      	orrs	r3, r1
 80055a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	000186a0 	.word	0x000186a0
 80055fc:	001e847f 	.word	0x001e847f
 8005600:	003d08ff 	.word	0x003d08ff
 8005604:	431bde83 	.word	0x431bde83
 8005608:	10624dd3 	.word	0x10624dd3

0800560c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	461a      	mov	r2, r3
 8005618:	460b      	mov	r3, r1
 800561a:	817b      	strh	r3, [r7, #10]
 800561c:	4613      	mov	r3, r2
 800561e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005620:	f7fe fbe8 	bl	8003df4 <HAL_GetTick>
 8005624:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b20      	cmp	r3, #32
 8005630:	f040 80e0 	bne.w	80057f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	2319      	movs	r3, #25
 800563a:	2201      	movs	r2, #1
 800563c:	4970      	ldr	r1, [pc, #448]	; (8005800 <HAL_I2C_Master_Transmit+0x1f4>)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f964 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
 800564c:	e0d3      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_I2C_Master_Transmit+0x50>
 8005658:	2302      	movs	r3, #2
 800565a:	e0cc      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d007      	beq.n	8005682 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0201 	orr.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005690:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2221      	movs	r2, #33	; 0x21
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2210      	movs	r2, #16
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	893a      	ldrh	r2, [r7, #8]
 80056b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a50      	ldr	r2, [pc, #320]	; (8005804 <HAL_I2C_Master_Transmit+0x1f8>)
 80056c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056c4:	8979      	ldrh	r1, [r7, #10]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6a3a      	ldr	r2, [r7, #32]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f89c 	bl	8005808 <I2C_MasterRequestWrite>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e08d      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056f0:	e066      	b.n	80057c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	6a39      	ldr	r1, [r7, #32]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f9de 	bl	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00d      	beq.n	800571e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2b04      	cmp	r3, #4
 8005708:	d107      	bne.n	800571a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e06b      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d11b      	bne.n	8005794 <HAL_I2C_Master_Transmit+0x188>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	6a39      	ldr	r1, [r7, #32]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f9ce 	bl	8005b3a <I2C_WaitOnBTFFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00d      	beq.n	80057c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d107      	bne.n	80057bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e01a      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d194      	bne.n	80056f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	00100002 	.word	0x00100002
 8005804:	ffff0000 	.word	0xffff0000

08005808 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d006      	beq.n	8005832 <I2C_MasterRequestWrite+0x2a>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d003      	beq.n	8005832 <I2C_MasterRequestWrite+0x2a>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005830:	d108      	bne.n	8005844 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e00b      	b.n	800585c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	2b12      	cmp	r3, #18
 800584a:	d107      	bne.n	800585c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f84f 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005882:	d103      	bne.n	800588c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e035      	b.n	80058fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005898:	d108      	bne.n	80058ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800589a:	897b      	ldrh	r3, [r7, #10]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a8:	611a      	str	r2, [r3, #16]
 80058aa:	e01b      	b.n	80058e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058ac:	897b      	ldrh	r3, [r7, #10]
 80058ae:	11db      	asrs	r3, r3, #7
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f063 030f 	orn	r3, r3, #15
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	490e      	ldr	r1, [pc, #56]	; (8005904 <I2C_MasterRequestWrite+0xfc>)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f875 	bl	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e010      	b.n	80058fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4907      	ldr	r1, [pc, #28]	; (8005908 <I2C_MasterRequestWrite+0x100>)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f865 	bl	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	00010008 	.word	0x00010008
 8005908:	00010002 	.word	0x00010002

0800590c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	4613      	mov	r3, r2
 800591a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800591c:	e025      	b.n	800596a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d021      	beq.n	800596a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005926:	f7fe fa65 	bl	8003df4 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d116      	bne.n	800596a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f043 0220 	orr.w	r2, r3, #32
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e023      	b.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	0c1b      	lsrs	r3, r3, #16
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d10d      	bne.n	8005990 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	43da      	mvns	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	e00c      	b.n	80059aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	43da      	mvns	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d0b6      	beq.n	800591e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059c8:	e051      	b.n	8005a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d8:	d123      	bne.n	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0204 	orr.w	r2, r3, #4
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e046      	b.n	8005ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d021      	beq.n	8005a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fe f9e3 	bl	8003df4 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d116      	bne.n	8005a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e020      	b.n	8005ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d10c      	bne.n	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	43da      	mvns	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4013      	ands	r3, r2
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e00b      	b.n	8005aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	43da      	mvns	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d18d      	bne.n	80059ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ac4:	e02d      	b.n	8005b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f878 	bl	8005bbc <I2C_IsAcknowledgeFailed>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e02d      	b.n	8005b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d021      	beq.n	8005b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ade:	f7fe f989 	bl	8003df4 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d116      	bne.n	8005b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	f043 0220 	orr.w	r2, r3, #32
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e007      	b.n	8005b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b80      	cmp	r3, #128	; 0x80
 8005b2e:	d1ca      	bne.n	8005ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b46:	e02d      	b.n	8005ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f837 	bl	8005bbc <I2C_IsAcknowledgeFailed>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e02d      	b.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d021      	beq.n	8005ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b60:	f7fe f948 	bl	8003df4 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d302      	bcc.n	8005b76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d116      	bne.n	8005ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e007      	b.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d1ca      	bne.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd2:	d11b      	bne.n	8005c0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	f043 0204 	orr.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c26:	2300      	movs	r3, #0
 8005c28:	603b      	str	r3, [r7, #0]
 8005c2a:	4b20      	ldr	r3, [pc, #128]	; (8005cac <HAL_PWREx_EnableOverDrive+0x90>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <HAL_PWREx_EnableOverDrive+0x90>)
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c34:	6413      	str	r3, [r2, #64]	; 0x40
 8005c36:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <HAL_PWREx_EnableOverDrive+0x90>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c48:	f7fe f8d4 	bl	8003df4 <HAL_GetTick>
 8005c4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c4e:	e009      	b.n	8005c64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c50:	f7fe f8d0 	bl	8003df4 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c5e:	d901      	bls.n	8005c64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e01f      	b.n	8005ca4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d1ee      	bne.n	8005c50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c72:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c78:	f7fe f8bc 	bl	8003df4 <HAL_GetTick>
 8005c7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c7e:	e009      	b.n	8005c94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c80:	f7fe f8b8 	bl	8003df4 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c8e:	d901      	bls.n	8005c94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e007      	b.n	8005ca4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca0:	d1ee      	bne.n	8005c80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	420e0040 	.word	0x420e0040
 8005cb4:	40007000 	.word	0x40007000
 8005cb8:	420e0044 	.word	0x420e0044

08005cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0cc      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b68      	ldr	r3, [pc, #416]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d90c      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b65      	ldr	r3, [pc, #404]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b63      	ldr	r3, [pc, #396]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0b8      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d020      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d10:	4b59      	ldr	r3, [pc, #356]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a58      	ldr	r2, [pc, #352]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d28:	4b53      	ldr	r3, [pc, #332]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	4a52      	ldr	r2, [pc, #328]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d34:	4b50      	ldr	r3, [pc, #320]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	494d      	ldr	r1, [pc, #308]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d044      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d107      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5a:	4b47      	ldr	r3, [pc, #284]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d119      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e07f      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d003      	beq.n	8005d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7a:	4b3f      	ldr	r3, [pc, #252]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e06f      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8a:	4b3b      	ldr	r3, [pc, #236]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e067      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d9a:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 0203 	bic.w	r2, r3, #3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4934      	ldr	r1, [pc, #208]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dac:	f7fe f822 	bl	8003df4 <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db4:	f7fe f81e 	bl	8003df4 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e04f      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dca:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 020c 	and.w	r2, r3, #12
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d1eb      	bne.n	8005db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ddc:	4b25      	ldr	r3, [pc, #148]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d20c      	bcs.n	8005e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dea:	4b22      	ldr	r3, [pc, #136]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df2:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d001      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e032      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e10:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4916      	ldr	r1, [pc, #88]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d009      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e2e:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	490e      	ldr	r1, [pc, #56]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e42:	f000 f821 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e46:	4601      	mov	r1, r0
 8005e48:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <HAL_RCC_ClockConfig+0x1c0>)
 8005e54:	5cd3      	ldrb	r3, [r2, r3]
 8005e56:	fa21 f303 	lsr.w	r3, r1, r3
 8005e5a:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e5e:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fd ff82 	bl	8003d6c <HAL_InitTick>

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	40023c00 	.word	0x40023c00
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	08013260 	.word	0x08013260
 8005e80:	20000000 	.word	0x20000000
 8005e84:	20000004 	.word	0x20000004

08005e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	2300      	movs	r3, #0
 8005e98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e9e:	4b63      	ldr	r3, [pc, #396]	; (800602c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d007      	beq.n	8005eba <HAL_RCC_GetSysClockFreq+0x32>
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d008      	beq.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x38>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f040 80b4 	bne.w	800601c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eb4:	4b5e      	ldr	r3, [pc, #376]	; (8006030 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005eb6:	60bb      	str	r3, [r7, #8]
       break;
 8005eb8:	e0b3      	b.n	8006022 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eba:	4b5d      	ldr	r3, [pc, #372]	; (8006030 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ebc:	60bb      	str	r3, [r7, #8]
      break;
 8005ebe:	e0b0      	b.n	8006022 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ec0:	4b5a      	ldr	r3, [pc, #360]	; (800602c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eca:	4b58      	ldr	r3, [pc, #352]	; (800602c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04a      	beq.n	8005f6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ed6:	4b55      	ldr	r3, [pc, #340]	; (800602c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	099b      	lsrs	r3, r3, #6
 8005edc:	f04f 0400 	mov.w	r4, #0
 8005ee0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	ea03 0501 	and.w	r5, r3, r1
 8005eec:	ea04 0602 	and.w	r6, r4, r2
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4632      	mov	r2, r6
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	f04f 0400 	mov.w	r4, #0
 8005efc:	0154      	lsls	r4, r2, #5
 8005efe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f02:	014b      	lsls	r3, r1, #5
 8005f04:	4619      	mov	r1, r3
 8005f06:	4622      	mov	r2, r4
 8005f08:	1b49      	subs	r1, r1, r5
 8005f0a:	eb62 0206 	sbc.w	r2, r2, r6
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	f04f 0400 	mov.w	r4, #0
 8005f16:	0194      	lsls	r4, r2, #6
 8005f18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f1c:	018b      	lsls	r3, r1, #6
 8005f1e:	1a5b      	subs	r3, r3, r1
 8005f20:	eb64 0402 	sbc.w	r4, r4, r2
 8005f24:	f04f 0100 	mov.w	r1, #0
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	00e2      	lsls	r2, r4, #3
 8005f2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f32:	00d9      	lsls	r1, r3, #3
 8005f34:	460b      	mov	r3, r1
 8005f36:	4614      	mov	r4, r2
 8005f38:	195b      	adds	r3, r3, r5
 8005f3a:	eb44 0406 	adc.w	r4, r4, r6
 8005f3e:	f04f 0100 	mov.w	r1, #0
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	02a2      	lsls	r2, r4, #10
 8005f48:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f4c:	0299      	lsls	r1, r3, #10
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4614      	mov	r4, r2
 8005f52:	4618      	mov	r0, r3
 8005f54:	4621      	mov	r1, r4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f04f 0400 	mov.w	r4, #0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4623      	mov	r3, r4
 8005f60:	f7fa feaa 	bl	8000cb8 <__aeabi_uldivmod>
 8005f64:	4603      	mov	r3, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	e049      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6c:	4b2f      	ldr	r3, [pc, #188]	; (800602c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	099b      	lsrs	r3, r3, #6
 8005f72:	f04f 0400 	mov.w	r4, #0
 8005f76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	ea03 0501 	and.w	r5, r3, r1
 8005f82:	ea04 0602 	and.w	r6, r4, r2
 8005f86:	4629      	mov	r1, r5
 8005f88:	4632      	mov	r2, r6
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	f04f 0400 	mov.w	r4, #0
 8005f92:	0154      	lsls	r4, r2, #5
 8005f94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f98:	014b      	lsls	r3, r1, #5
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	1b49      	subs	r1, r1, r5
 8005fa0:	eb62 0206 	sbc.w	r2, r2, r6
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	f04f 0400 	mov.w	r4, #0
 8005fac:	0194      	lsls	r4, r2, #6
 8005fae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005fb2:	018b      	lsls	r3, r1, #6
 8005fb4:	1a5b      	subs	r3, r3, r1
 8005fb6:	eb64 0402 	sbc.w	r4, r4, r2
 8005fba:	f04f 0100 	mov.w	r1, #0
 8005fbe:	f04f 0200 	mov.w	r2, #0
 8005fc2:	00e2      	lsls	r2, r4, #3
 8005fc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005fc8:	00d9      	lsls	r1, r3, #3
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4614      	mov	r4, r2
 8005fce:	195b      	adds	r3, r3, r5
 8005fd0:	eb44 0406 	adc.w	r4, r4, r6
 8005fd4:	f04f 0100 	mov.w	r1, #0
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	02a2      	lsls	r2, r4, #10
 8005fde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fe2:	0299      	lsls	r1, r3, #10
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4614      	mov	r4, r2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	4621      	mov	r1, r4
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f04f 0400 	mov.w	r4, #0
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4623      	mov	r3, r4
 8005ff6:	f7fa fe5f 	bl	8000cb8 <__aeabi_uldivmod>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	3301      	adds	r3, #1
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	60bb      	str	r3, [r7, #8]
      break;
 800601a:	e002      	b.n	8006022 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800601c:	4b04      	ldr	r3, [pc, #16]	; (8006030 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800601e:	60bb      	str	r3, [r7, #8]
      break;
 8006020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006022:	68bb      	ldr	r3, [r7, #8]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602c:	40023800 	.word	0x40023800
 8006030:	00f42400 	.word	0x00f42400

08006034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006038:	4b03      	ldr	r3, [pc, #12]	; (8006048 <HAL_RCC_GetHCLKFreq+0x14>)
 800603a:	681b      	ldr	r3, [r3, #0]
}
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000000 	.word	0x20000000

0800604c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006050:	f7ff fff0 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 8006054:	4601      	mov	r1, r0
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	0a9b      	lsrs	r3, r3, #10
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	4a03      	ldr	r2, [pc, #12]	; (8006070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006062:	5cd3      	ldrb	r3, [r2, r3]
 8006064:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40023800 	.word	0x40023800
 8006070:	08013270 	.word	0x08013270

08006074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006078:	f7ff ffdc 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 800607c:	4601      	mov	r1, r0
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	0b5b      	lsrs	r3, r3, #13
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	4a03      	ldr	r2, [pc, #12]	; (8006098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800608a:	5cd3      	ldrb	r3, [r2, r3]
 800608c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006090:	4618      	mov	r0, r3
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40023800 	.word	0x40023800
 8006098:	08013270 	.word	0x08013270

0800609c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060c4:	4b66      	ldr	r3, [pc, #408]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80060c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d2:	4963      	ldr	r1, [pc, #396]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80060e6:	4b5e      	ldr	r3, [pc, #376]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80060e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	495a      	ldr	r1, [pc, #360]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10b      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006110:	2b00      	cmp	r3, #0
 8006112:	d105      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800611c:	2b00      	cmp	r3, #0
 800611e:	d075      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006120:	4b50      	ldr	r3, [pc, #320]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006126:	f7fd fe65 	bl	8003df4 <HAL_GetTick>
 800612a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800612c:	e008      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800612e:	f7fd fe61 	bl	8003df4 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e1dc      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006140:	4b47      	ldr	r3, [pc, #284]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1f0      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	019a      	lsls	r2, r3, #6
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	071b      	lsls	r3, r3, #28
 8006164:	493e      	ldr	r1, [pc, #248]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01f      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006178:	4b39      	ldr	r3, [pc, #228]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800617a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800617e:	0f1b      	lsrs	r3, r3, #28
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	019a      	lsls	r2, r3, #6
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	431a      	orrs	r2, r3
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	071b      	lsls	r3, r3, #28
 8006198:	4931      	ldr	r1, [pc, #196]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061a0:	4b2f      	ldr	r3, [pc, #188]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80061a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a6:	f023 021f 	bic.w	r2, r3, #31
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	492b      	ldr	r1, [pc, #172]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00d      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	019a      	lsls	r2, r3, #6
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	061b      	lsls	r3, r3, #24
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	071b      	lsls	r3, r3, #28
 80061d8:	4921      	ldr	r1, [pc, #132]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061e0:	4b20      	ldr	r3, [pc, #128]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061e6:	f7fd fe05 	bl	8003df4 <HAL_GetTick>
 80061ea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061ec:	e008      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061ee:	f7fd fe01 	bl	8003df4 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e17c      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d112      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10c      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80ce 	beq.w	80063ce <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623a:	f040 80c8 	bne.w	80063ce <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800623e:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006244:	f7fd fdd6 	bl	8003df4 <HAL_GetTick>
 8006248:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800624a:	e00f      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800624c:	f7fd fdd2 	bl	8003df4 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d908      	bls.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e14d      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800
 8006264:	42470068 	.word	0x42470068
 8006268:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800626c:	4ba5      	ldr	r3, [pc, #660]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006278:	d0e8      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d02e      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006286:	4b9f      	ldr	r3, [pc, #636]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	3301      	adds	r3, #1
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006298:	4b9a      	ldr	r3, [pc, #616]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800629a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629e:	0f1b      	lsrs	r3, r3, #28
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	019a      	lsls	r2, r3, #6
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	3b01      	subs	r3, #1
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	061b      	lsls	r3, r3, #24
 80062bc:	431a      	orrs	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	071b      	lsls	r3, r3, #28
 80062c2:	4990      	ldr	r1, [pc, #576]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062ca:	4b8e      	ldr	r3, [pc, #568]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	3b01      	subs	r3, #1
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	4989      	ldr	r1, [pc, #548]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d02c      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80062f0:	4b84      	ldr	r3, [pc, #528]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	3301      	adds	r3, #1
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006302:	4b80      	ldr	r3, [pc, #512]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	0e1b      	lsrs	r3, r3, #24
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	019a      	lsls	r2, r3, #6
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	3b01      	subs	r3, #1
 800631c:	041b      	lsls	r3, r3, #16
 800631e:	431a      	orrs	r2, r3
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	061b      	lsls	r3, r3, #24
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	071b      	lsls	r3, r3, #28
 800632c:	4975      	ldr	r1, [pc, #468]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006334:	4b73      	ldr	r3, [pc, #460]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800633a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	4970      	ldr	r1, [pc, #448]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d024      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800635a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635e:	d11f      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006360:	4b68      	ldr	r3, [pc, #416]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	0e1b      	lsrs	r3, r3, #24
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800636e:	4b65      	ldr	r3, [pc, #404]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006374:	0f1b      	lsrs	r3, r3, #28
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	019a      	lsls	r2, r3, #6
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	3b01      	subs	r3, #1
 800638a:	041b      	lsls	r3, r3, #16
 800638c:	431a      	orrs	r2, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	431a      	orrs	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	071b      	lsls	r3, r3, #28
 8006398:	495a      	ldr	r1, [pc, #360]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063a0:	4b59      	ldr	r3, [pc, #356]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063a6:	f7fd fd25 	bl	8003df4 <HAL_GetTick>
 80063aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063ac:	e008      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80063ae:	f7fd fd21 	bl	8003df4 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e09c      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063c0:	4b50      	ldr	r3, [pc, #320]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063cc:	d1ef      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8083 	beq.w	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063dc:	2300      	movs	r3, #0
 80063de:	60bb      	str	r3, [r7, #8]
 80063e0:	4b48      	ldr	r3, [pc, #288]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	4a47      	ldr	r2, [pc, #284]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80063e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ea:	6413      	str	r3, [r2, #64]	; 0x40
 80063ec:	4b45      	ldr	r3, [pc, #276]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063f8:	4b44      	ldr	r3, [pc, #272]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a43      	ldr	r2, [pc, #268]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80063fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006402:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006404:	f7fd fcf6 	bl	8003df4 <HAL_GetTick>
 8006408:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800640c:	f7fd fcf2 	bl	8003df4 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e06d      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800641e:	4b3b      	ldr	r3, [pc, #236]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800642a:	4b36      	ldr	r3, [pc, #216]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006432:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d02f      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	d028      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006448:	4b2e      	ldr	r3, [pc, #184]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800644a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006450:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006452:	4b2f      	ldr	r3, [pc, #188]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006454:	2201      	movs	r2, #1
 8006456:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006458:	4b2d      	ldr	r3, [pc, #180]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800645e:	4a29      	ldr	r2, [pc, #164]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006464:	4b27      	ldr	r3, [pc, #156]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b01      	cmp	r3, #1
 800646e:	d114      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006470:	f7fd fcc0 	bl	8003df4 <HAL_GetTick>
 8006474:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006476:	e00a      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006478:	f7fd fcbc 	bl	8003df4 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f241 3288 	movw	r2, #5000	; 0x1388
 8006486:	4293      	cmp	r3, r2
 8006488:	d901      	bls.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e035      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648e:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0ee      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a6:	d10d      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80064a8:	4b16      	ldr	r3, [pc, #88]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064bc:	4911      	ldr	r1, [pc, #68]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
 80064c2:	e005      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4a0e      	ldr	r2, [pc, #56]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064ce:	6093      	str	r3, [r2, #8]
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064dc:	4909      	ldr	r1, [pc, #36]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80064f4:	4b07      	ldr	r3, [pc, #28]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80064f6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	42470070 	.word	0x42470070
 800650c:	40007000 	.word	0x40007000
 8006510:	42470e40 	.word	0x42470e40
 8006514:	424711e0 	.word	0x424711e0

08006518 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d075      	beq.n	800661c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006530:	4ba2      	ldr	r3, [pc, #648]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	2b04      	cmp	r3, #4
 800653a:	d00c      	beq.n	8006556 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800653c:	4b9f      	ldr	r3, [pc, #636]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006544:	2b08      	cmp	r3, #8
 8006546:	d112      	bne.n	800656e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006548:	4b9c      	ldr	r3, [pc, #624]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006554:	d10b      	bne.n	800656e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006556:	4b99      	ldr	r3, [pc, #612]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d05b      	beq.n	800661a <HAL_RCC_OscConfig+0x102>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d157      	bne.n	800661a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e20b      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006576:	d106      	bne.n	8006586 <HAL_RCC_OscConfig+0x6e>
 8006578:	4b90      	ldr	r3, [pc, #576]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a8f      	ldr	r2, [pc, #572]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 800657e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	e01d      	b.n	80065c2 <HAL_RCC_OscConfig+0xaa>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800658e:	d10c      	bne.n	80065aa <HAL_RCC_OscConfig+0x92>
 8006590:	4b8a      	ldr	r3, [pc, #552]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a89      	ldr	r2, [pc, #548]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006596:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	4b87      	ldr	r3, [pc, #540]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a86      	ldr	r2, [pc, #536]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80065a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	e00b      	b.n	80065c2 <HAL_RCC_OscConfig+0xaa>
 80065aa:	4b84      	ldr	r3, [pc, #528]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a83      	ldr	r2, [pc, #524]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	4b81      	ldr	r3, [pc, #516]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a80      	ldr	r2, [pc, #512]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80065bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d013      	beq.n	80065f2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fd fc13 	bl	8003df4 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d2:	f7fd fc0f 	bl	8003df4 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b64      	cmp	r3, #100	; 0x64
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e1d0      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e4:	4b75      	ldr	r3, [pc, #468]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCC_OscConfig+0xba>
 80065f0:	e014      	b.n	800661c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f2:	f7fd fbff 	bl	8003df4 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065fa:	f7fd fbfb 	bl	8003df4 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b64      	cmp	r3, #100	; 0x64
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e1bc      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800660c:	4b6b      	ldr	r3, [pc, #428]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f0      	bne.n	80065fa <HAL_RCC_OscConfig+0xe2>
 8006618:	e000      	b.n	800661c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d063      	beq.n	80066f0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006628:	4b64      	ldr	r3, [pc, #400]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 030c 	and.w	r3, r3, #12
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006634:	4b61      	ldr	r3, [pc, #388]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800663c:	2b08      	cmp	r3, #8
 800663e:	d11c      	bne.n	800667a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006640:	4b5e      	ldr	r3, [pc, #376]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d116      	bne.n	800667a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800664c:	4b5b      	ldr	r3, [pc, #364]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_RCC_OscConfig+0x14c>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d001      	beq.n	8006664 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e190      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006664:	4b55      	ldr	r3, [pc, #340]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	4952      	ldr	r1, [pc, #328]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006674:	4313      	orrs	r3, r2
 8006676:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006678:	e03a      	b.n	80066f0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d020      	beq.n	80066c4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006682:	4b4f      	ldr	r3, [pc, #316]	; (80067c0 <HAL_RCC_OscConfig+0x2a8>)
 8006684:	2201      	movs	r2, #1
 8006686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006688:	f7fd fbb4 	bl	8003df4 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006690:	f7fd fbb0 	bl	8003df4 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e171      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a2:	4b46      	ldr	r3, [pc, #280]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0f0      	beq.n	8006690 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ae:	4b43      	ldr	r3, [pc, #268]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	493f      	ldr	r1, [pc, #252]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]
 80066c2:	e015      	b.n	80066f0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066c4:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <HAL_RCC_OscConfig+0x2a8>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ca:	f7fd fb93 	bl	8003df4 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066d2:	f7fd fb8f 	bl	8003df4 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e150      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066e4:	4b35      	ldr	r3, [pc, #212]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1f0      	bne.n	80066d2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d030      	beq.n	800675e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d016      	beq.n	8006732 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006704:	4b2f      	ldr	r3, [pc, #188]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006706:	2201      	movs	r2, #1
 8006708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670a:	f7fd fb73 	bl	8003df4 <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006712:	f7fd fb6f 	bl	8003df4 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e130      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006724:	4b25      	ldr	r3, [pc, #148]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0f0      	beq.n	8006712 <HAL_RCC_OscConfig+0x1fa>
 8006730:	e015      	b.n	800675e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006732:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006738:	f7fd fb5c 	bl	8003df4 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006740:	f7fd fb58 	bl	8003df4 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e119      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006752:	4b1a      	ldr	r3, [pc, #104]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f0      	bne.n	8006740 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 809f 	beq.w	80068aa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800676c:	2300      	movs	r3, #0
 800676e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10f      	bne.n	800679c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	4b0e      	ldr	r3, [pc, #56]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	4a0d      	ldr	r2, [pc, #52]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 8006786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678a:	6413      	str	r3, [r2, #64]	; 0x40
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <HAL_RCC_OscConfig+0x2a4>)
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679c:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <HAL_RCC_OscConfig+0x2b0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d120      	bne.n	80067ea <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a8:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <HAL_RCC_OscConfig+0x2b0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a06      	ldr	r2, [pc, #24]	; (80067c8 <HAL_RCC_OscConfig+0x2b0>)
 80067ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067b4:	f7fd fb1e 	bl	8003df4 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ba:	e010      	b.n	80067de <HAL_RCC_OscConfig+0x2c6>
 80067bc:	40023800 	.word	0x40023800
 80067c0:	42470000 	.word	0x42470000
 80067c4:	42470e80 	.word	0x42470e80
 80067c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067cc:	f7fd fb12 	bl	8003df4 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e0d3      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067de:	4b6c      	ldr	r3, [pc, #432]	; (8006990 <HAL_RCC_OscConfig+0x478>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d106      	bne.n	8006800 <HAL_RCC_OscConfig+0x2e8>
 80067f2:	4b68      	ldr	r3, [pc, #416]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 80067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f6:	4a67      	ldr	r2, [pc, #412]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 80067f8:	f043 0301 	orr.w	r3, r3, #1
 80067fc:	6713      	str	r3, [r2, #112]	; 0x70
 80067fe:	e01c      	b.n	800683a <HAL_RCC_OscConfig+0x322>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	2b05      	cmp	r3, #5
 8006806:	d10c      	bne.n	8006822 <HAL_RCC_OscConfig+0x30a>
 8006808:	4b62      	ldr	r3, [pc, #392]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 800680a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680c:	4a61      	ldr	r2, [pc, #388]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 800680e:	f043 0304 	orr.w	r3, r3, #4
 8006812:	6713      	str	r3, [r2, #112]	; 0x70
 8006814:	4b5f      	ldr	r3, [pc, #380]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 8006816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006818:	4a5e      	ldr	r2, [pc, #376]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	6713      	str	r3, [r2, #112]	; 0x70
 8006820:	e00b      	b.n	800683a <HAL_RCC_OscConfig+0x322>
 8006822:	4b5c      	ldr	r3, [pc, #368]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	4a5b      	ldr	r2, [pc, #364]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	6713      	str	r3, [r2, #112]	; 0x70
 800682e:	4b59      	ldr	r3, [pc, #356]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	4a58      	ldr	r2, [pc, #352]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 8006834:	f023 0304 	bic.w	r3, r3, #4
 8006838:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d015      	beq.n	800686e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006842:	f7fd fad7 	bl	8003df4 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006848:	e00a      	b.n	8006860 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800684a:	f7fd fad3 	bl	8003df4 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	f241 3288 	movw	r2, #5000	; 0x1388
 8006858:	4293      	cmp	r3, r2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e092      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006860:	4b4c      	ldr	r3, [pc, #304]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0ee      	beq.n	800684a <HAL_RCC_OscConfig+0x332>
 800686c:	e014      	b.n	8006898 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686e:	f7fd fac1 	bl	8003df4 <HAL_GetTick>
 8006872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006874:	e00a      	b.n	800688c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006876:	f7fd fabd 	bl	8003df4 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f241 3288 	movw	r2, #5000	; 0x1388
 8006884:	4293      	cmp	r3, r2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e07c      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800688c:	4b41      	ldr	r3, [pc, #260]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 800688e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1ee      	bne.n	8006876 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d105      	bne.n	80068aa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800689e:	4b3d      	ldr	r3, [pc, #244]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	4a3c      	ldr	r2, [pc, #240]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 80068a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d068      	beq.n	8006984 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068b2:	4b38      	ldr	r3, [pc, #224]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 030c 	and.w	r3, r3, #12
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d060      	beq.n	8006980 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d145      	bne.n	8006952 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c6:	4b34      	ldr	r3, [pc, #208]	; (8006998 <HAL_RCC_OscConfig+0x480>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068cc:	f7fd fa92 	bl	8003df4 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d4:	f7fd fa8e 	bl	8003df4 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e04f      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e6:	4b2b      	ldr	r3, [pc, #172]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f0      	bne.n	80068d4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69da      	ldr	r2, [r3, #28]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	019b      	lsls	r3, r3, #6
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	085b      	lsrs	r3, r3, #1
 800690a:	3b01      	subs	r3, #1
 800690c:	041b      	lsls	r3, r3, #16
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	061b      	lsls	r3, r3, #24
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	071b      	lsls	r3, r3, #28
 800691e:	491d      	ldr	r1, [pc, #116]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 8006920:	4313      	orrs	r3, r2
 8006922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006924:	4b1c      	ldr	r3, [pc, #112]	; (8006998 <HAL_RCC_OscConfig+0x480>)
 8006926:	2201      	movs	r2, #1
 8006928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692a:	f7fd fa63 	bl	8003df4 <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006932:	f7fd fa5f 	bl	8003df4 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e020      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006944:	4b13      	ldr	r3, [pc, #76]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f0      	beq.n	8006932 <HAL_RCC_OscConfig+0x41a>
 8006950:	e018      	b.n	8006984 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <HAL_RCC_OscConfig+0x480>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fd fa4c 	bl	8003df4 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006960:	f7fd fa48 	bl	8003df4 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e009      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <HAL_RCC_OscConfig+0x47c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x448>
 800697e:	e001      	b.n	8006984 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40007000 	.word	0x40007000
 8006994:	40023800 	.word	0x40023800
 8006998:	42470060 	.word	0x42470060

0800699c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e022      	b.n	80069f4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d105      	bne.n	80069c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fc fc05 	bl	80031d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2203      	movs	r2, #3
 80069ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f814 	bl	80069fc <HAL_SD_InitCard>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e00a      	b.n	80069f4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80069fc:	b5b0      	push	{r4, r5, r7, lr}
 80069fe:	b08e      	sub	sp, #56	; 0x38
 8006a00:	af04      	add	r7, sp, #16
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006a18:	2376      	movs	r3, #118	; 0x76
 8006a1a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681d      	ldr	r5, [r3, #0]
 8006a20:	466c      	mov	r4, sp
 8006a22:	f107 0314 	add.w	r3, r7, #20
 8006a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a2e:	f107 0308 	add.w	r3, r7, #8
 8006a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a34:	4628      	mov	r0, r5
 8006a36:	f002 fd97 	bl	8009568 <SDIO_Init>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e031      	b.n	8006ab0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	; (8006ab8 <HAL_SD_InitCard+0xbc>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f002 fdcf 	bl	80095fa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006a5c:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <HAL_SD_InitCard+0xbc>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 ffc6 	bl	80079f4 <SD_PowerON>
 8006a68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e013      	b.n	8006ab0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fee5 	bl	8007858 <SD_InitCard>
 8006a8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00b      	beq.n	8006aae <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	; 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ab8:	422580a0 	.word	0x422580a0

08006abc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08c      	sub	sp, #48	; 0x30
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d107      	bne.n	8006ae4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0c7      	b.n	8006c74 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	f040 80c0 	bne.w	8006c72 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	441a      	add	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d907      	bls.n	8006b16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e0ae      	b.n	8006c74 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2203      	movs	r2, #3
 8006b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006b34:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	4a50      	ldr	r2, [pc, #320]	; (8006c7c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006b3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	4a4f      	ldr	r2, [pc, #316]	; (8006c80 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8006b44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3380      	adds	r3, #128	; 0x80
 8006b58:	4619      	mov	r1, r3
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	025b      	lsls	r3, r3, #9
 8006b60:	089b      	lsrs	r3, r3, #2
 8006b62:	f7fd ff39 	bl	80049d8 <HAL_DMA_Start_IT>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d017      	beq.n	8006b9c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006b7a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a40      	ldr	r2, [pc, #256]	; (8006c84 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e06b      	b.n	8006c74 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006b9c:	4b3a      	ldr	r3, [pc, #232]	; (8006c88 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d002      	beq.n	8006bb0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	025b      	lsls	r3, r3, #9
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f002 fdb1 	bl	8009720 <SDMMC_CmdBlockLength>
 8006bbe:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00f      	beq.n	8006be6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2e      	ldr	r2, [pc, #184]	; (8006c84 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e046      	b.n	8006c74 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006be6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	025b      	lsls	r3, r3, #9
 8006bf0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006bf2:	2390      	movs	r3, #144	; 0x90
 8006bf4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f107 0210 	add.w	r2, r7, #16
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f002 fd5b 	bl	80096c8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d90a      	bls.n	8006c2e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2282      	movs	r2, #130	; 0x82
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c24:	4618      	mov	r0, r3
 8006c26:	f002 fdbf 	bl	80097a8 <SDMMC_CmdReadMultiBlock>
 8006c2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006c2c:	e009      	b.n	8006c42 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2281      	movs	r2, #129	; 0x81
 8006c32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f002 fd92 	bl	8009764 <SDMMC_CmdReadSingleBlock>
 8006c40:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d012      	beq.n	8006c6e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a0d      	ldr	r2, [pc, #52]	; (8006c84 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	431a      	orrs	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e002      	b.n	8006c74 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e000      	b.n	8006c74 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8006c72:	2302      	movs	r3, #2
  }
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3730      	adds	r7, #48	; 0x30
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	08007667 	.word	0x08007667
 8006c80:	080076d9 	.word	0x080076d9
 8006c84:	004005ff 	.word	0x004005ff
 8006c88:	4225858c 	.word	0x4225858c

08006c8c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08c      	sub	sp, #48	; 0x30
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d107      	bne.n	8006cb4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e0ca      	b.n	8006e4a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	f040 80c3 	bne.w	8006e48 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	441a      	add	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d907      	bls.n	8006ce6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e0b1      	b.n	8006e4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2203      	movs	r2, #3
 8006cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 021a 	orr.w	r2, r2, #26
 8006d04:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0a:	4a52      	ldr	r2, [pc, #328]	; (8006e54 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d12:	4a51      	ldr	r2, [pc, #324]	; (8006e58 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8006d14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d002      	beq.n	8006d2c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	025b      	lsls	r3, r3, #9
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d34:	4618      	mov	r0, r3
 8006d36:	f002 fcf3 	bl	8009720 <SDMMC_CmdBlockLength>
 8006d3a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00f      	beq.n	8006d62 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a45      	ldr	r2, [pc, #276]	; (8006e5c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006d48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e073      	b.n	8006e4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d90a      	bls.n	8006d7e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	22a0      	movs	r2, #160	; 0xa0
 8006d6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d74:	4618      	mov	r0, r3
 8006d76:	f002 fd5b 	bl	8009830 <SDMMC_CmdWriteMultiBlock>
 8006d7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d7c:	e009      	b.n	8006d92 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2290      	movs	r2, #144	; 0x90
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f002 fd2e 	bl	80097ec <SDMMC_CmdWriteSingleBlock>
 8006d90:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d012      	beq.n	8006dbe <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a2f      	ldr	r2, [pc, #188]	; (8006e5c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	431a      	orrs	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e045      	b.n	8006e4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006dbe:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3380      	adds	r3, #128	; 0x80
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	025b      	lsls	r3, r3, #9
 8006dd6:	089b      	lsrs	r3, r3, #2
 8006dd8:	f7fd fdfe 	bl	80049d8 <HAL_DMA_Start_IT>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01a      	beq.n	8006e18 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 021a 	bic.w	r2, r2, #26
 8006df0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a19      	ldr	r2, [pc, #100]	; (8006e5c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e018      	b.n	8006e4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e18:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	025b      	lsls	r3, r3, #9
 8006e22:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006e24:	2390      	movs	r3, #144	; 0x90
 8006e26:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006e30:	2301      	movs	r3, #1
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f107 0210 	add.w	r2, r7, #16
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f002 fc42 	bl	80096c8 <SDIO_ConfigData>

      return HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	e000      	b.n	8006e4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8006e48:	2302      	movs	r3, #2
  }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3730      	adds	r7, #48	; 0x30
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	0800763d 	.word	0x0800763d
 8006e58:	080076d9 	.word	0x080076d9
 8006e5c:	004005ff 	.word	0x004005ff
 8006e60:	4225858c 	.word	0x4225858c

08006e64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <HAL_SD_IRQHandler+0x2e>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 ffc8 	bl	8007e20 <SD_Read_IT>
 8006e90:	e155      	b.n	800713e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 808f 	beq.w	8006fc0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006eba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006ebe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d039      	beq.n	8006f4e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <HAL_SD_IRQHandler+0x8a>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d011      	beq.n	8006f12 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f002 fcbe 	bl	8009874 <SDMMC_CmdStopTransfer>
 8006ef8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f91f 	bl	8007150 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <HAL_SD_IRQHandler+0xda>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f003 f91c 	bl	800a17c <HAL_SD_RxCpltCallback>
 8006f44:	e0fb      	b.n	800713e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f003 f90e 	bl	800a168 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f4c:	e0f7      	b.n	800713e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80f2 	beq.w	800713e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d011      	beq.n	8006f88 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f002 fc83 	bl	8009874 <SDMMC_CmdStopTransfer>
 8006f6e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d008      	beq.n	8006f88 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f8e4 	bl	8007150 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 80d5 	bne.w	800713e <HAL_SD_IRQHandler+0x2da>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 80cf 	bne.w	800713e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0208 	bic.w	r2, r2, #8
 8006fae:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f003 f8d5 	bl	800a168 <HAL_SD_TxCpltCallback>
}
 8006fbe:	e0be      	b.n	800713e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d008      	beq.n	8006fe0 <HAL_SD_IRQHandler+0x17c>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 ff72 	bl	8007ec2 <SD_Write_IT>
 8006fde:	e0ae      	b.n	800713e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 80a7 	beq.w	800713e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	f043 0202 	orr.w	r2, r3, #2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	f043 0208 	orr.w	r2, r3, #8
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	f043 0220 	orr.w	r2, r3, #32
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	f003 0310 	and.w	r3, r3, #16
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	f043 0210 	orr.w	r2, r3, #16
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007070:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f002 fbfc 	bl	8009874 <SDMMC_CmdStopTransfer>
 800707c:	4602      	mov	r2, r0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f855 	bl	8007150 <HAL_SD_ErrorCallback>
}
 80070a6:	e04a      	b.n	800713e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d045      	beq.n	800713e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0310 	and.w	r3, r3, #16
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <HAL_SD_IRQHandler+0x262>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d011      	beq.n	80070ea <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <HAL_SD_IRQHandler+0x2e4>)
 80070cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fd fcd8 	bl	8004a88 <HAL_DMA_Abort_IT>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d02f      	beq.n	800713e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fb4a 	bl	800777c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80070e8:	e029      	b.n	800713e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <HAL_SD_IRQHandler+0x29a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d011      	beq.n	8007122 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	4a12      	ldr	r2, [pc, #72]	; (800714c <HAL_SD_IRQHandler+0x2e8>)
 8007104:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	4618      	mov	r0, r3
 800710c:	f7fd fcbc 	bl	8004a88 <HAL_DMA_Abort_IT>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d013      	beq.n	800713e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fb65 	bl	80077ea <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007120:	e00d      	b.n	800713e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f003 f80c 	bl	800a154 <HAL_SD_AbortCallback>
}
 800713c:	e7ff      	b.n	800713e <HAL_SD_IRQHandler+0x2da>
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	0800777d 	.word	0x0800777d
 800714c:	080077eb 	.word	0x080077eb

08007150 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007172:	0f9b      	lsrs	r3, r3, #30
 8007174:	b2da      	uxtb	r2, r3
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800717e:	0e9b      	lsrs	r3, r3, #26
 8007180:	b2db      	uxtb	r3, r3
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	b2da      	uxtb	r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007190:	0e1b      	lsrs	r3, r3, #24
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 0303 	and.w	r3, r3, #3
 8007198:	b2da      	uxtb	r2, r3
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a2:	0c1b      	lsrs	r3, r3, #16
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071c4:	0d1b      	lsrs	r3, r3, #20
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071e2:	0bdb      	lsrs	r3, r3, #15
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071f4:	0b9b      	lsrs	r3, r3, #14
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007206:	0b5b      	lsrs	r3, r3, #13
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	b2da      	uxtb	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007218:	0b1b      	lsrs	r3, r3, #12
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	b2da      	uxtb	r2, r3
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2200      	movs	r2, #0
 800722a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007230:	2b00      	cmp	r3, #0
 8007232:	d163      	bne.n	80072fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007238:	009a      	lsls	r2, r3, #2
 800723a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800723e:	4013      	ands	r3, r2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007244:	0f92      	lsrs	r2, r2, #30
 8007246:	431a      	orrs	r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007250:	0edb      	lsrs	r3, r3, #27
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	b2da      	uxtb	r2, r3
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007262:	0e1b      	lsrs	r3, r3, #24
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	b2da      	uxtb	r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007274:	0d5b      	lsrs	r3, r3, #21
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	b2da      	uxtb	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007286:	0c9b      	lsrs	r3, r3, #18
 8007288:	b2db      	uxtb	r3, r3
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	b2da      	uxtb	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007298:	0bdb      	lsrs	r3, r3, #15
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	7e1b      	ldrb	r3, [r3, #24]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	3302      	adds	r3, #2
 80072bc:	2201      	movs	r2, #1
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80072c6:	fb02 f203 	mul.w	r2, r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	7a1b      	ldrb	r3, [r3, #8]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	2201      	movs	r2, #1
 80072da:	409a      	lsls	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80072e8:	0a52      	lsrs	r2, r2, #9
 80072ea:	fb02 f203 	mul.w	r2, r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f8:	661a      	str	r2, [r3, #96]	; 0x60
 80072fa:	e031      	b.n	8007360 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007300:	2b01      	cmp	r3, #1
 8007302:	d11d      	bne.n	8007340 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007312:	0c1b      	lsrs	r3, r3, #16
 8007314:	431a      	orrs	r2, r3
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	3301      	adds	r3, #1
 8007320:	029a      	lsls	r2, r3, #10
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007334:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	661a      	str	r2, [r3, #96]	; 0x60
 800733e:	e00f      	b.n	8007360 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a58      	ldr	r2, [pc, #352]	; (80074a8 <HAL_SD_GetCardCSD+0x344>)
 8007346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e09d      	b.n	800749c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007364:	0b9b      	lsrs	r3, r3, #14
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	b2da      	uxtb	r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007376:	09db      	lsrs	r3, r3, #7
 8007378:	b2db      	uxtb	r3, r3
 800737a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800737e:	b2da      	uxtb	r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007388:	b2db      	uxtb	r3, r3
 800738a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738e:	b2da      	uxtb	r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007398:	0fdb      	lsrs	r3, r3, #31
 800739a:	b2da      	uxtb	r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a4:	0f5b      	lsrs	r3, r3, #29
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b6:	0e9b      	lsrs	r3, r3, #26
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c8:	0d9b      	lsrs	r3, r3, #22
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	0d5b      	lsrs	r3, r3, #21
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740a:	0bdb      	lsrs	r3, r3, #15
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	b2da      	uxtb	r2, r3
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741e:	0b9b      	lsrs	r3, r3, #14
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	b2da      	uxtb	r2, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007432:	0b5b      	lsrs	r3, r3, #13
 8007434:	b2db      	uxtb	r3, r3
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	b2da      	uxtb	r2, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007446:	0b1b      	lsrs	r3, r3, #12
 8007448:	b2db      	uxtb	r3, r3
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745a:	0a9b      	lsrs	r3, r3, #10
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	b2da      	uxtb	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	0a1b      	lsrs	r3, r3, #8
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	b2da      	uxtb	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748a:	b2da      	uxtb	r2, r3
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	004005ff 	.word	0x004005ff

080074ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007504:	b5b0      	push	{r4, r5, r7, lr}
 8007506:	b08e      	sub	sp, #56	; 0x38
 8007508:	af04      	add	r7, sp, #16
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2203      	movs	r2, #3
 8007512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751a:	2b03      	cmp	r3, #3
 800751c:	d02e      	beq.n	800757c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007524:	d106      	bne.n	8007534 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	639a      	str	r2, [r3, #56]	; 0x38
 8007532:	e029      	b.n	8007588 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753a:	d10a      	bne.n	8007552 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fb0f 	bl	8007b60 <SD_WideBus_Enable>
 8007542:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
 8007550:	e01a      	b.n	8007588 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fb4c 	bl	8007bf6 <SD_WideBus_Disable>
 800755e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
 800756c:	e00c      	b.n	8007588 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007572:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	639a      	str	r2, [r3, #56]	; 0x38
 800757a:	e005      	b.n	8007588 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a18      	ldr	r2, [pc, #96]	; (80075f8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e024      	b.n	80075ee <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681d      	ldr	r5, [r3, #0]
 80075ca:	466c      	mov	r4, sp
 80075cc:	f107 0318 	add.w	r3, r7, #24
 80075d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075d8:	f107 030c 	add.w	r3, r7, #12
 80075dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075de:	4628      	mov	r0, r5
 80075e0:	f001 ffc2 	bl	8009568 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bdb0      	pop	{r4, r5, r7, pc}
 80075f6:	bf00      	nop
 80075f8:	004005ff 	.word	0x004005ff

080075fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007608:	f107 030c 	add.w	r3, r7, #12
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa7e 	bl	8007b10 <SD_SendStatus>
 8007614:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	0a5b      	lsrs	r3, r3, #9
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007632:	693b      	ldr	r3, [r7, #16]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007658:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007678:	2b82      	cmp	r3, #130	; 0x82
 800767a:	d111      	bne.n	80076a0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f002 f8f7 	bl	8009874 <SDMMC_CmdStopTransfer>
 8007686:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	431a      	orrs	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff fd58 	bl	8007150 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0208 	bic.w	r2, r2, #8
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f240 523a 	movw	r2, #1338	; 0x53a
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f002 fd57 	bl	800a17c <HAL_SD_RxCpltCallback>
#endif
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fd fb7a 	bl	8004de0 <HAL_DMA_GetError>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d03e      	beq.n	8007770 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007700:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d002      	beq.n	800770e <SD_DMAError+0x36>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d12d      	bne.n	800776a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a19      	ldr	r2, [pc, #100]	; (8007778 <SD_DMAError+0xa0>)
 8007714:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007724:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007732:	6978      	ldr	r0, [r7, #20]
 8007734:	f7ff ff62 	bl	80075fc <HAL_SD_GetCardState>
 8007738:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b06      	cmp	r3, #6
 800773e:	d002      	beq.n	8007746 <SD_DMAError+0x6e>
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b05      	cmp	r3, #5
 8007744:	d10a      	bne.n	800775c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	f002 f892 	bl	8009874 <SDMMC_CmdStopTransfer>
 8007750:	4602      	mov	r2, r0
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	431a      	orrs	r2, r3
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2200      	movs	r2, #0
 8007768:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800776a:	6978      	ldr	r0, [r7, #20]
 800776c:	f7ff fcf0 	bl	8007150 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007770:	bf00      	nop
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	004005ff 	.word	0x004005ff

0800777c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007792:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff ff31 	bl	80075fc <HAL_SD_GetCardState>
 800779a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b06      	cmp	r3, #6
 80077ae:	d002      	beq.n	80077b6 <SD_DMATxAbort+0x3a>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	d10a      	bne.n	80077cc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f002 f85a 	bl	8009874 <SDMMC_CmdStopTransfer>
 80077c0:	4602      	mov	r2, r0
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	431a      	orrs	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f002 fcbd 	bl	800a154 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80077da:	e002      	b.n	80077e2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f7ff fcb7 	bl	8007150 <HAL_SD_ErrorCallback>
}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8007800:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff fefa 	bl	80075fc <HAL_SD_GetCardState>
 8007808:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b06      	cmp	r3, #6
 800781c:	d002      	beq.n	8007824 <SD_DMARxAbort+0x3a>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b05      	cmp	r3, #5
 8007822:	d10a      	bne.n	800783a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4618      	mov	r0, r3
 800782a:	f002 f823 	bl	8009874 <SDMMC_CmdStopTransfer>
 800782e:	4602      	mov	r2, r0
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	431a      	orrs	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	2b00      	cmp	r3, #0
 8007840:	d103      	bne.n	800784a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f002 fc86 	bl	800a154 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007848:	e002      	b.n	8007850 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff fc80 	bl	8007150 <HAL_SD_ErrorCallback>
}
 8007850:	bf00      	nop
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007858:	b5b0      	push	{r4, r5, r7, lr}
 800785a:	b094      	sub	sp, #80	; 0x50
 800785c:	af04      	add	r7, sp, #16
 800785e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007860:	2301      	movs	r3, #1
 8007862:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f001 fed5 	bl	8009618 <SDIO_GetPowerState>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007874:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007878:	e0b7      	b.n	80079ea <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787e:	2b03      	cmp	r3, #3
 8007880:	d02f      	beq.n	80078e2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f002 f8fe 	bl	8009a88 <SDMMC_CmdSendCID>
 800788c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800788e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <SD_InitCard+0x40>
    {
      return errorstate;
 8007894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007896:	e0a8      	b.n	80079ea <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 feff 	bl	80096a2 <SDIO_GetResponse>
 80078a4:	4602      	mov	r2, r0
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2104      	movs	r1, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f001 fef6 	bl	80096a2 <SDIO_GetResponse>
 80078b6:	4602      	mov	r2, r0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2108      	movs	r1, #8
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 feed 	bl	80096a2 <SDIO_GetResponse>
 80078c8:	4602      	mov	r2, r0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	210c      	movs	r1, #12
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 fee4 	bl	80096a2 <SDIO_GetResponse>
 80078da:	4602      	mov	r2, r0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d00d      	beq.n	8007906 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f107 020e 	add.w	r2, r7, #14
 80078f2:	4611      	mov	r1, r2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f002 f904 	bl	8009b02 <SDMMC_CmdSetRelAdd>
 80078fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80078fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <SD_InitCard+0xae>
    {
      return errorstate;
 8007902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007904:	e071      	b.n	80079ea <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	2b03      	cmp	r3, #3
 800790c:	d036      	beq.n	800797c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800790e:	89fb      	ldrh	r3, [r7, #14]
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f002 f8ce 	bl	8009ac4 <SDMMC_CmdSendCSD>
 8007928:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800792a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007932:	e05a      	b.n	80079ea <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2100      	movs	r1, #0
 800793a:	4618      	mov	r0, r3
 800793c:	f001 feb1 	bl	80096a2 <SDIO_GetResponse>
 8007940:	4602      	mov	r2, r0
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2104      	movs	r1, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f001 fea8 	bl	80096a2 <SDIO_GetResponse>
 8007952:	4602      	mov	r2, r0
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2108      	movs	r1, #8
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fe9f 	bl	80096a2 <SDIO_GetResponse>
 8007964:	4602      	mov	r2, r0
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	210c      	movs	r1, #12
 8007970:	4618      	mov	r0, r3
 8007972:	f001 fe96 	bl	80096a2 <SDIO_GetResponse>
 8007976:	4602      	mov	r2, r0
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2104      	movs	r1, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fe8d 	bl	80096a2 <SDIO_GetResponse>
 8007988:	4603      	mov	r3, r0
 800798a:	0d1a      	lsrs	r2, r3, #20
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007990:	f107 0310 	add.w	r3, r7, #16
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff fbe4 	bl	8007164 <HAL_SD_GetCardCSD>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079a6:	e020      	b.n	80079ea <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6819      	ldr	r1, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	041b      	lsls	r3, r3, #16
 80079b2:	f04f 0400 	mov.w	r4, #0
 80079b6:	461a      	mov	r2, r3
 80079b8:	4623      	mov	r3, r4
 80079ba:	4608      	mov	r0, r1
 80079bc:	f001 ff7c 	bl	80098b8 <SDMMC_CmdSelDesel>
 80079c0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80079c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <SD_InitCard+0x174>
  {
    return errorstate;
 80079c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ca:	e00e      	b.n	80079ea <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681d      	ldr	r5, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	466c      	mov	r4, sp
 80079d4:	f103 0210 	add.w	r2, r3, #16
 80079d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80079da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079de:	3304      	adds	r3, #4
 80079e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079e2:	4628      	mov	r0, r5
 80079e4:	f001 fdc0 	bl	8009568 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3740      	adds	r7, #64	; 0x40
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080079f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 ff76 	bl	80098fe <SDMMC_CmdGoIdleState>
 8007a12:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <SD_PowerON+0x2a>
  {
    return errorstate;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	e072      	b.n	8007b04 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 ff89 	bl	800993a <SDMMC_CmdOperCond>
 8007a28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00d      	beq.n	8007a4c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 ff5f 	bl	80098fe <SDMMC_CmdGoIdleState>
 8007a40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d004      	beq.n	8007a52 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	e05b      	b.n	8007b04 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d137      	bne.n	8007aca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2100      	movs	r1, #0
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 ff89 	bl	8009978 <SDMMC_CmdAppCommand>
 8007a66:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d02d      	beq.n	8007aca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a72:	e047      	b.n	8007b04 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 ff7c 	bl	8009978 <SDMMC_CmdAppCommand>
 8007a80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <SD_PowerON+0x98>
    {
      return errorstate;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	e03b      	b.n	8007b04 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	491e      	ldr	r1, [pc, #120]	; (8007b0c <SD_PowerON+0x118>)
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 ff92 	bl	80099bc <SDMMC_CmdAppOperCommand>
 8007a98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007aa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007aa4:	e02e      	b.n	8007b04 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 fdf8 	bl	80096a2 <SDIO_GetResponse>
 8007ab2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	0fdb      	lsrs	r3, r3, #31
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <SD_PowerON+0xcc>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <SD_PowerON+0xce>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	613b      	str	r3, [r7, #16]

    count++;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d802      	bhi.n	8007ada <SD_PowerON+0xe6>
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0cc      	beq.n	8007a74 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d902      	bls.n	8007aea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ae8:	e00c      	b.n	8007b04 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	645a      	str	r2, [r3, #68]	; 0x44
 8007afa:	e002      	b.n	8007b02 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	c1100000 	.word	0xc1100000

08007b10 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007b20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b24:	e018      	b.n	8007b58 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2e:	041b      	lsls	r3, r3, #16
 8007b30:	4619      	mov	r1, r3
 8007b32:	4610      	mov	r0, r2
 8007b34:	f002 f806 	bl	8009b44 <SDMMC_CmdSendStatus>
 8007b38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	e009      	b.n	8007b58 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f001 fda9 	bl	80096a2 <SDIO_GetResponse>
 8007b50:	4602      	mov	r2, r0
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2100      	movs	r1, #0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 fd93 	bl	80096a2 <SDIO_GetResponse>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b86:	d102      	bne.n	8007b8e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b8c:	e02f      	b.n	8007bee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b8e:	f107 030c 	add.w	r3, r7, #12
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f879 	bl	8007c8c <SD_FindSCR>
 8007b9a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	e023      	b.n	8007bee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d01c      	beq.n	8007bea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f001 fedb 	bl	8009978 <SDMMC_CmdAppCommand>
 8007bc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	e00f      	b.n	8007bee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 ff14 	bl	8009a02 <SDMMC_CmdBusWidth>
 8007bda:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	e003      	b.n	8007bee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e001      	b.n	8007bee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007bea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b086      	sub	sp, #24
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 fd48 	bl	80096a2 <SDIO_GetResponse>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c1c:	d102      	bne.n	8007c24 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c22:	e02f      	b.n	8007c84 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007c24:	f107 030c 	add.w	r3, r7, #12
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f82e 	bl	8007c8c <SD_FindSCR>
 8007c30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	e023      	b.n	8007c84 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d01c      	beq.n	8007c80 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f001 fe90 	bl	8009978 <SDMMC_CmdAppCommand>
 8007c58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	e00f      	b.n	8007c84 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 fec9 	bl	8009a02 <SDMMC_CmdBusWidth>
 8007c70:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	e003      	b.n	8007c84 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e001      	b.n	8007c84 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b08f      	sub	sp, #60	; 0x3c
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007c96:	f7fc f8ad 	bl	8003df4 <HAL_GetTick>
 8007c9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60bb      	str	r3, [r7, #8]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2108      	movs	r1, #8
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 fd34 	bl	8009720 <SDMMC_CmdBlockLength>
 8007cb8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	e0a9      	b.n	8007e18 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ccc:	041b      	lsls	r3, r3, #16
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f001 fe51 	bl	8009978 <SDMMC_CmdAppCommand>
 8007cd6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	e09a      	b.n	8007e18 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007ce8:	2308      	movs	r3, #8
 8007cea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007cec:	2330      	movs	r3, #48	; 0x30
 8007cee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f107 0210 	add.w	r2, r7, #16
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fcde 	bl	80096c8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 fe98 	bl	8009a46 <SDMMC_CmdSendSCR>
 8007d16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d022      	beq.n	8007d64 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	e07a      	b.n	8007e18 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00e      	beq.n	8007d4e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	f107 0208 	add.w	r2, r7, #8
 8007d3c:	18d4      	adds	r4, r2, r3
 8007d3e:	4608      	mov	r0, r1
 8007d40:	f001 fc3d 	bl	80095be <SDIO_ReadFIFO>
 8007d44:	4603      	mov	r3, r0
 8007d46:	6023      	str	r3, [r4, #0]
      index++;
 8007d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d4e:	f7fc f851 	bl	8003df4 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d102      	bne.n	8007d64 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007d5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d62:	e059      	b.n	8007e18 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d6a:	f240 432a 	movw	r3, #1066	; 0x42a
 8007d6e:	4013      	ands	r3, r2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0d6      	beq.n	8007d22 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2208      	movs	r2, #8
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007d8a:	2308      	movs	r3, #8
 8007d8c:	e044      	b.n	8007e18 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2202      	movs	r2, #2
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007da4:	2302      	movs	r3, #2
 8007da6:	e037      	b.n	8007e18 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007dbe:	2320      	movs	r3, #32
 8007dc0:	e02a      	b.n	8007e18 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f240 523a 	movw	r2, #1338	; 0x53a
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	061a      	lsls	r2, r3, #24
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007dd8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007de2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	0e1b      	lsrs	r3, r3, #24
 8007de8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	601a      	str	r2, [r3, #0]
    scr++;
 8007dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df0:	3304      	adds	r3, #4
 8007df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	061a      	lsls	r2, r3, #24
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	021b      	lsls	r3, r3, #8
 8007dfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e00:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	0a1b      	lsrs	r3, r3, #8
 8007e06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e0a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	0e1b      	lsrs	r3, r3, #24
 8007e10:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	373c      	adds	r7, #60	; 0x3c
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd90      	pop	{r4, r7, pc}

08007e20 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d03f      	beq.n	8007eba <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	e033      	b.n	8007ea8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fbba 	bl	80095be <SDIO_ReadFIFO>
 8007e4a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3301      	adds	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	0a1b      	lsrs	r3, r3, #8
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	0c1b      	lsrs	r3, r3, #16
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3301      	adds	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	0e1b      	lsrs	r3, r3, #24
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2b07      	cmp	r3, #7
 8007eac:	d9c8      	bls.n	8007e40 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007eba:	bf00      	nop
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d043      	beq.n	8007f64 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e037      	b.n	8007f52 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	021a      	lsls	r2, r3, #8
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	041a      	lsls	r2, r3, #16
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	061a      	lsls	r2, r3, #24
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3301      	adds	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f107 0208 	add.w	r2, r7, #8
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 fb46 	bl	80095d8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	617b      	str	r3, [r7, #20]
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b07      	cmp	r3, #7
 8007f56:	d9c4      	bls.n	8007ee2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007f64:	bf00      	nop
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e056      	b.n	800802c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d106      	bne.n	8007f9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7fb fa0b 	bl	80033b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	ea42 0103 	orr.w	r1, r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	0c1b      	lsrs	r3, r3, #16
 8007ffc:	f003 0104 	and.w	r1, r3, #4
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	69da      	ldr	r2, [r3, #28]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800801a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e01d      	b.n	8008082 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fb fa66 	bl	800352c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3304      	adds	r3, #4
 8008070:	4619      	mov	r1, r3
 8008072:	4610      	mov	r0, r2
 8008074:	f000 fb56 	bl	8008724 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0201 	orr.w	r2, r2, #1
 80080a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b06      	cmp	r3, #6
 80080b2:	d007      	beq.n	80080c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0201 	orr.w	r2, r2, #1
 80080c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e01d      	b.n	8008120 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d106      	bne.n	80080fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7fb f9a3 	bl	8003444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2202      	movs	r2, #2
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3304      	adds	r3, #4
 800810e:	4619      	mov	r1, r3
 8008110:	4610      	mov	r0, r2
 8008112:	f000 fb07 	bl	8008724 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2201      	movs	r2, #1
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fd42 	bl	8008bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a15      	ldr	r2, [pc, #84]	; (800819c <HAL_TIM_PWM_Start+0x74>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <HAL_TIM_PWM_Start+0x2c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a14      	ldr	r2, [pc, #80]	; (80081a0 <HAL_TIM_PWM_Start+0x78>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d101      	bne.n	8008158 <HAL_TIM_PWM_Start+0x30>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <HAL_TIM_PWM_Start+0x32>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800816c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b06      	cmp	r3, #6
 800817e:	d007      	beq.n	8008190 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0201 	orr.w	r2, r2, #1
 800818e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000
 80081a0:	40010400 	.word	0x40010400

080081a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e083      	b.n	80082c0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d106      	bne.n	80081d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7fb fa17 	bl	8003600 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2202      	movs	r2, #2
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6812      	ldr	r2, [r2, #0]
 80081e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081e8:	f023 0307 	bic.w	r3, r3, #7
 80081ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4619      	mov	r1, r3
 80081f8:	4610      	mov	r0, r2
 80081fa:	f000 fa93 	bl	8008724 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	4313      	orrs	r3, r2
 800821e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008226:	f023 0303 	bic.w	r3, r3, #3
 800822a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	021b      	lsls	r3, r3, #8
 8008236:	4313      	orrs	r3, r2
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008244:	f023 030c 	bic.w	r3, r3, #12
 8008248:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008250:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008254:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	021b      	lsls	r3, r3, #8
 8008260:	4313      	orrs	r3, r2
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4313      	orrs	r3, r2
 8008266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	011a      	lsls	r2, r3, #4
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	031b      	lsls	r3, r3, #12
 8008274:	4313      	orrs	r3, r2
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008282:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800828a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	4313      	orrs	r3, r2
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <HAL_TIM_Encoder_Start+0x16>
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d008      	beq.n	80082ee <HAL_TIM_Encoder_Start+0x26>
 80082dc:	e00f      	b.n	80082fe <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2201      	movs	r2, #1
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fc6c 	bl	8008bc4 <TIM_CCxChannelCmd>
      break;
 80082ec:	e016      	b.n	800831c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2201      	movs	r2, #1
 80082f4:	2104      	movs	r1, #4
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fc64 	bl	8008bc4 <TIM_CCxChannelCmd>
      break;
 80082fc:	e00e      	b.n	800831c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2201      	movs	r2, #1
 8008304:	2100      	movs	r1, #0
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fc5c 	bl	8008bc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2201      	movs	r2, #1
 8008312:	2104      	movs	r1, #4
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fc55 	bl	8008bc4 <TIM_CCxChannelCmd>
      break;
 800831a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b02      	cmp	r3, #2
 800834a:	d122      	bne.n	8008392 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b02      	cmp	r3, #2
 8008358:	d11b      	bne.n	8008392 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f06f 0202 	mvn.w	r2, #2
 8008362:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f9b5 	bl	80086e8 <HAL_TIM_IC_CaptureCallback>
 800837e:	e005      	b.n	800838c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9a7 	bl	80086d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f9b8 	bl	80086fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b04      	cmp	r3, #4
 800839e:	d122      	bne.n	80083e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f003 0304 	and.w	r3, r3, #4
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d11b      	bne.n	80083e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f06f 0204 	mvn.w	r2, #4
 80083b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f98b 	bl	80086e8 <HAL_TIM_IC_CaptureCallback>
 80083d2:	e005      	b.n	80083e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f97d 	bl	80086d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f98e 	bl	80086fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	f003 0308 	and.w	r3, r3, #8
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	d122      	bne.n	800843a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f003 0308 	and.w	r3, r3, #8
 80083fe:	2b08      	cmp	r3, #8
 8008400:	d11b      	bne.n	800843a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f06f 0208 	mvn.w	r2, #8
 800840a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2204      	movs	r2, #4
 8008410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f961 	bl	80086e8 <HAL_TIM_IC_CaptureCallback>
 8008426:	e005      	b.n	8008434 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f953 	bl	80086d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f964 	bl	80086fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	2b10      	cmp	r3, #16
 8008446:	d122      	bne.n	800848e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f003 0310 	and.w	r3, r3, #16
 8008452:	2b10      	cmp	r3, #16
 8008454:	d11b      	bne.n	800848e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f06f 0210 	mvn.w	r2, #16
 800845e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2208      	movs	r2, #8
 8008464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f937 	bl	80086e8 <HAL_TIM_IC_CaptureCallback>
 800847a:	e005      	b.n	8008488 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f929 	bl	80086d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f93a 	bl	80086fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b01      	cmp	r3, #1
 800849a:	d10e      	bne.n	80084ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d107      	bne.n	80084ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f06f 0201 	mvn.w	r2, #1
 80084b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7f9 fdd2 	bl	800205e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c4:	2b80      	cmp	r3, #128	; 0x80
 80084c6:	d10e      	bne.n	80084e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d2:	2b80      	cmp	r3, #128	; 0x80
 80084d4:	d107      	bne.n	80084e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fc6d 	bl	8008dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f0:	2b40      	cmp	r3, #64	; 0x40
 80084f2:	d10e      	bne.n	8008512 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fe:	2b40      	cmp	r3, #64	; 0x40
 8008500:	d107      	bne.n	8008512 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800850a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f8ff 	bl	8008710 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f003 0320 	and.w	r3, r3, #32
 800851c:	2b20      	cmp	r3, #32
 800851e:	d10e      	bne.n	800853e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	2b20      	cmp	r3, #32
 800852c:	d107      	bne.n	800853e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f06f 0220 	mvn.w	r2, #32
 8008536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fc37 	bl	8008dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800855a:	2b01      	cmp	r3, #1
 800855c:	d101      	bne.n	8008562 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800855e:	2302      	movs	r3, #2
 8008560:	e0b4      	b.n	80086cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2202      	movs	r2, #2
 800856e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b0c      	cmp	r3, #12
 8008576:	f200 809f 	bhi.w	80086b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800857a:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085b5 	.word	0x080085b5
 8008584:	080086b9 	.word	0x080086b9
 8008588:	080086b9 	.word	0x080086b9
 800858c:	080086b9 	.word	0x080086b9
 8008590:	080085f5 	.word	0x080085f5
 8008594:	080086b9 	.word	0x080086b9
 8008598:	080086b9 	.word	0x080086b9
 800859c:	080086b9 	.word	0x080086b9
 80085a0:	08008637 	.word	0x08008637
 80085a4:	080086b9 	.word	0x080086b9
 80085a8:	080086b9 	.word	0x080086b9
 80085ac:	080086b9 	.word	0x080086b9
 80085b0:	08008677 	.word	0x08008677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68b9      	ldr	r1, [r7, #8]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f952 	bl	8008864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f042 0208 	orr.w	r2, r2, #8
 80085ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0204 	bic.w	r2, r2, #4
 80085de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6999      	ldr	r1, [r3, #24]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	691a      	ldr	r2, [r3, #16]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	619a      	str	r2, [r3, #24]
      break;
 80085f2:	e062      	b.n	80086ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68b9      	ldr	r1, [r7, #8]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f9a2 	bl	8008944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800860e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800861e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6999      	ldr	r1, [r3, #24]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	021a      	lsls	r2, r3, #8
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	619a      	str	r2, [r3, #24]
      break;
 8008634:	e041      	b.n	80086ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f9f7 	bl	8008a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69da      	ldr	r2, [r3, #28]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f042 0208 	orr.w	r2, r2, #8
 8008650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69da      	ldr	r2, [r3, #28]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0204 	bic.w	r2, r2, #4
 8008660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69d9      	ldr	r1, [r3, #28]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	61da      	str	r2, [r3, #28]
      break;
 8008674:	e021      	b.n	80086ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fa4b 	bl	8008b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69da      	ldr	r2, [r3, #28]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69da      	ldr	r2, [r3, #28]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69d9      	ldr	r1, [r3, #28]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	021a      	lsls	r2, r3, #8
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	61da      	str	r2, [r3, #28]
      break;
 80086b6:	e000      	b.n	80086ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80086b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a40      	ldr	r2, [pc, #256]	; (8008838 <TIM_Base_SetConfig+0x114>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d013      	beq.n	8008764 <TIM_Base_SetConfig+0x40>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008742:	d00f      	beq.n	8008764 <TIM_Base_SetConfig+0x40>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a3d      	ldr	r2, [pc, #244]	; (800883c <TIM_Base_SetConfig+0x118>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d00b      	beq.n	8008764 <TIM_Base_SetConfig+0x40>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a3c      	ldr	r2, [pc, #240]	; (8008840 <TIM_Base_SetConfig+0x11c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d007      	beq.n	8008764 <TIM_Base_SetConfig+0x40>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a3b      	ldr	r2, [pc, #236]	; (8008844 <TIM_Base_SetConfig+0x120>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d003      	beq.n	8008764 <TIM_Base_SetConfig+0x40>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a3a      	ldr	r2, [pc, #232]	; (8008848 <TIM_Base_SetConfig+0x124>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d108      	bne.n	8008776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a2f      	ldr	r2, [pc, #188]	; (8008838 <TIM_Base_SetConfig+0x114>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d02b      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008784:	d027      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a2c      	ldr	r2, [pc, #176]	; (800883c <TIM_Base_SetConfig+0x118>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d023      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a2b      	ldr	r2, [pc, #172]	; (8008840 <TIM_Base_SetConfig+0x11c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d01f      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a2a      	ldr	r2, [pc, #168]	; (8008844 <TIM_Base_SetConfig+0x120>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d01b      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a29      	ldr	r2, [pc, #164]	; (8008848 <TIM_Base_SetConfig+0x124>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d017      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a28      	ldr	r2, [pc, #160]	; (800884c <TIM_Base_SetConfig+0x128>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d013      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a27      	ldr	r2, [pc, #156]	; (8008850 <TIM_Base_SetConfig+0x12c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d00f      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a26      	ldr	r2, [pc, #152]	; (8008854 <TIM_Base_SetConfig+0x130>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00b      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a25      	ldr	r2, [pc, #148]	; (8008858 <TIM_Base_SetConfig+0x134>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d007      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a24      	ldr	r2, [pc, #144]	; (800885c <TIM_Base_SetConfig+0x138>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d003      	beq.n	80087d6 <TIM_Base_SetConfig+0xb2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a23      	ldr	r2, [pc, #140]	; (8008860 <TIM_Base_SetConfig+0x13c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d108      	bne.n	80087e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a0a      	ldr	r2, [pc, #40]	; (8008838 <TIM_Base_SetConfig+0x114>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d003      	beq.n	800881c <TIM_Base_SetConfig+0xf8>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a0c      	ldr	r2, [pc, #48]	; (8008848 <TIM_Base_SetConfig+0x124>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d103      	bne.n	8008824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	615a      	str	r2, [r3, #20]
}
 800882a:	bf00      	nop
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40010000 	.word	0x40010000
 800883c:	40000400 	.word	0x40000400
 8008840:	40000800 	.word	0x40000800
 8008844:	40000c00 	.word	0x40000c00
 8008848:	40010400 	.word	0x40010400
 800884c:	40014000 	.word	0x40014000
 8008850:	40014400 	.word	0x40014400
 8008854:	40014800 	.word	0x40014800
 8008858:	40001800 	.word	0x40001800
 800885c:	40001c00 	.word	0x40001c00
 8008860:	40002000 	.word	0x40002000

08008864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f023 0201 	bic.w	r2, r3, #1
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f023 0302 	bic.w	r3, r3, #2
 80088ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a20      	ldr	r2, [pc, #128]	; (800893c <TIM_OC1_SetConfig+0xd8>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d003      	beq.n	80088c8 <TIM_OC1_SetConfig+0x64>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a1f      	ldr	r2, [pc, #124]	; (8008940 <TIM_OC1_SetConfig+0xdc>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d10c      	bne.n	80088e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f023 0308 	bic.w	r3, r3, #8
 80088ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f023 0304 	bic.w	r3, r3, #4
 80088e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a15      	ldr	r2, [pc, #84]	; (800893c <TIM_OC1_SetConfig+0xd8>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d003      	beq.n	80088f2 <TIM_OC1_SetConfig+0x8e>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a14      	ldr	r2, [pc, #80]	; (8008940 <TIM_OC1_SetConfig+0xdc>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d111      	bne.n	8008916 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	4313      	orrs	r3, r2
 800890a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	621a      	str	r2, [r3, #32]
}
 8008930:	bf00      	nop
 8008932:	371c      	adds	r7, #28
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	40010000 	.word	0x40010000
 8008940:	40010400 	.word	0x40010400

08008944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f023 0210 	bic.w	r2, r3, #16
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800897a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	021b      	lsls	r3, r3, #8
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	4313      	orrs	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f023 0320 	bic.w	r3, r3, #32
 800898e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	4313      	orrs	r3, r2
 800899a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a22      	ldr	r2, [pc, #136]	; (8008a28 <TIM_OC2_SetConfig+0xe4>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_OC2_SetConfig+0x68>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a21      	ldr	r2, [pc, #132]	; (8008a2c <TIM_OC2_SetConfig+0xe8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d10d      	bne.n	80089c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <TIM_OC2_SetConfig+0xe4>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_OC2_SetConfig+0x94>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a16      	ldr	r2, [pc, #88]	; (8008a2c <TIM_OC2_SetConfig+0xe8>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d113      	bne.n	8008a00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	621a      	str	r2, [r3, #32]
}
 8008a1a:	bf00      	nop
 8008a1c:	371c      	adds	r7, #28
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	40010000 	.word	0x40010000
 8008a2c:	40010400 	.word	0x40010400

08008a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	021b      	lsls	r3, r3, #8
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a21      	ldr	r2, [pc, #132]	; (8008b10 <TIM_OC3_SetConfig+0xe0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d003      	beq.n	8008a96 <TIM_OC3_SetConfig+0x66>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a20      	ldr	r2, [pc, #128]	; (8008b14 <TIM_OC3_SetConfig+0xe4>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d10d      	bne.n	8008ab2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <TIM_OC3_SetConfig+0xe0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d003      	beq.n	8008ac2 <TIM_OC3_SetConfig+0x92>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a15      	ldr	r2, [pc, #84]	; (8008b14 <TIM_OC3_SetConfig+0xe4>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d113      	bne.n	8008aea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	621a      	str	r2, [r3, #32]
}
 8008b04:	bf00      	nop
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	40010000 	.word	0x40010000
 8008b14:	40010400 	.word	0x40010400

08008b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	021b      	lsls	r3, r3, #8
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	031b      	lsls	r3, r3, #12
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a12      	ldr	r2, [pc, #72]	; (8008bbc <TIM_OC4_SetConfig+0xa4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d003      	beq.n	8008b80 <TIM_OC4_SetConfig+0x68>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a11      	ldr	r2, [pc, #68]	; (8008bc0 <TIM_OC4_SetConfig+0xa8>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d109      	bne.n	8008b94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	019b      	lsls	r3, r3, #6
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	621a      	str	r2, [r3, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	40010000 	.word	0x40010000
 8008bc0:	40010400 	.word	0x40010400

08008bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f003 031f 	and.w	r3, r3, #31
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6a1a      	ldr	r2, [r3, #32]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	43db      	mvns	r3, r3
 8008be6:	401a      	ands	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a1a      	ldr	r2, [r3, #32]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e05a      	b.n	8008cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a21      	ldr	r2, [pc, #132]	; (8008cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d022      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c74:	d01d      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a1d      	ldr	r2, [pc, #116]	; (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d018      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1b      	ldr	r2, [pc, #108]	; (8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d013      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a1a      	ldr	r2, [pc, #104]	; (8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00e      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a18      	ldr	r2, [pc, #96]	; (8008cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d009      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a17      	ldr	r2, [pc, #92]	; (8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d004      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a15      	ldr	r2, [pc, #84]	; (8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d10c      	bne.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40000400 	.word	0x40000400
 8008cf4:	40000800 	.word	0x40000800
 8008cf8:	40000c00 	.word	0x40000c00
 8008cfc:	40010400 	.word	0x40010400
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40001800 	.word	0x40001800

08008d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d101      	bne.n	8008d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d20:	2302      	movs	r3, #2
 8008d22:	e03d      	b.n	8008da0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e03f      	b.n	8008e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7fa fd22 	bl	8003844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2224      	movs	r2, #36	; 0x24
 8008e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f829 	bl	8008e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695a      	ldr	r2, [r3, #20]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	b085      	sub	sp, #20
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68da      	ldr	r2, [r3, #12]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008eb2:	f023 030c 	bic.w	r3, r3, #12
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6812      	ldr	r2, [r2, #0]
 8008eba:	68f9      	ldr	r1, [r7, #12]
 8008ebc:	430b      	orrs	r3, r1
 8008ebe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699a      	ldr	r2, [r3, #24]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ede:	f040 818b 	bne.w	80091f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4ac1      	ldr	r2, [pc, #772]	; (80091ec <UART_SetConfig+0x37c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d005      	beq.n	8008ef8 <UART_SetConfig+0x88>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4abf      	ldr	r2, [pc, #764]	; (80091f0 <UART_SetConfig+0x380>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	f040 80bd 	bne.w	8009072 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ef8:	f7fd f8bc 	bl	8006074 <HAL_RCC_GetPCLK2Freq>
 8008efc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	461d      	mov	r5, r3
 8008f02:	f04f 0600 	mov.w	r6, #0
 8008f06:	46a8      	mov	r8, r5
 8008f08:	46b1      	mov	r9, r6
 8008f0a:	eb18 0308 	adds.w	r3, r8, r8
 8008f0e:	eb49 0409 	adc.w	r4, r9, r9
 8008f12:	4698      	mov	r8, r3
 8008f14:	46a1      	mov	r9, r4
 8008f16:	eb18 0805 	adds.w	r8, r8, r5
 8008f1a:	eb49 0906 	adc.w	r9, r9, r6
 8008f1e:	f04f 0100 	mov.w	r1, #0
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f32:	4688      	mov	r8, r1
 8008f34:	4691      	mov	r9, r2
 8008f36:	eb18 0005 	adds.w	r0, r8, r5
 8008f3a:	eb49 0106 	adc.w	r1, r9, r6
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	461d      	mov	r5, r3
 8008f44:	f04f 0600 	mov.w	r6, #0
 8008f48:	196b      	adds	r3, r5, r5
 8008f4a:	eb46 0406 	adc.w	r4, r6, r6
 8008f4e:	461a      	mov	r2, r3
 8008f50:	4623      	mov	r3, r4
 8008f52:	f7f7 feb1 	bl	8000cb8 <__aeabi_uldivmod>
 8008f56:	4603      	mov	r3, r0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	4ba5      	ldr	r3, [pc, #660]	; (80091f4 <UART_SetConfig+0x384>)
 8008f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	461d      	mov	r5, r3
 8008f6c:	f04f 0600 	mov.w	r6, #0
 8008f70:	46a9      	mov	r9, r5
 8008f72:	46b2      	mov	sl, r6
 8008f74:	eb19 0309 	adds.w	r3, r9, r9
 8008f78:	eb4a 040a 	adc.w	r4, sl, sl
 8008f7c:	4699      	mov	r9, r3
 8008f7e:	46a2      	mov	sl, r4
 8008f80:	eb19 0905 	adds.w	r9, r9, r5
 8008f84:	eb4a 0a06 	adc.w	sl, sl, r6
 8008f88:	f04f 0100 	mov.w	r1, #0
 8008f8c:	f04f 0200 	mov.w	r2, #0
 8008f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f9c:	4689      	mov	r9, r1
 8008f9e:	4692      	mov	sl, r2
 8008fa0:	eb19 0005 	adds.w	r0, r9, r5
 8008fa4:	eb4a 0106 	adc.w	r1, sl, r6
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	461d      	mov	r5, r3
 8008fae:	f04f 0600 	mov.w	r6, #0
 8008fb2:	196b      	adds	r3, r5, r5
 8008fb4:	eb46 0406 	adc.w	r4, r6, r6
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4623      	mov	r3, r4
 8008fbc:	f7f7 fe7c 	bl	8000cb8 <__aeabi_uldivmod>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4b8b      	ldr	r3, [pc, #556]	; (80091f4 <UART_SetConfig+0x384>)
 8008fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	2164      	movs	r1, #100	; 0x64
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	3332      	adds	r3, #50	; 0x32
 8008fda:	4a86      	ldr	r2, [pc, #536]	; (80091f4 <UART_SetConfig+0x384>)
 8008fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fe8:	4498      	add	r8, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	461d      	mov	r5, r3
 8008fee:	f04f 0600 	mov.w	r6, #0
 8008ff2:	46a9      	mov	r9, r5
 8008ff4:	46b2      	mov	sl, r6
 8008ff6:	eb19 0309 	adds.w	r3, r9, r9
 8008ffa:	eb4a 040a 	adc.w	r4, sl, sl
 8008ffe:	4699      	mov	r9, r3
 8009000:	46a2      	mov	sl, r4
 8009002:	eb19 0905 	adds.w	r9, r9, r5
 8009006:	eb4a 0a06 	adc.w	sl, sl, r6
 800900a:	f04f 0100 	mov.w	r1, #0
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009016:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800901a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800901e:	4689      	mov	r9, r1
 8009020:	4692      	mov	sl, r2
 8009022:	eb19 0005 	adds.w	r0, r9, r5
 8009026:	eb4a 0106 	adc.w	r1, sl, r6
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	461d      	mov	r5, r3
 8009030:	f04f 0600 	mov.w	r6, #0
 8009034:	196b      	adds	r3, r5, r5
 8009036:	eb46 0406 	adc.w	r4, r6, r6
 800903a:	461a      	mov	r2, r3
 800903c:	4623      	mov	r3, r4
 800903e:	f7f7 fe3b 	bl	8000cb8 <__aeabi_uldivmod>
 8009042:	4603      	mov	r3, r0
 8009044:	460c      	mov	r4, r1
 8009046:	461a      	mov	r2, r3
 8009048:	4b6a      	ldr	r3, [pc, #424]	; (80091f4 <UART_SetConfig+0x384>)
 800904a:	fba3 1302 	umull	r1, r3, r3, r2
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	2164      	movs	r1, #100	; 0x64
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	3332      	adds	r3, #50	; 0x32
 800905c:	4a65      	ldr	r2, [pc, #404]	; (80091f4 <UART_SetConfig+0x384>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	095b      	lsrs	r3, r3, #5
 8009064:	f003 0207 	and.w	r2, r3, #7
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4442      	add	r2, r8
 800906e:	609a      	str	r2, [r3, #8]
 8009070:	e26f      	b.n	8009552 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009072:	f7fc ffeb 	bl	800604c <HAL_RCC_GetPCLK1Freq>
 8009076:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	461d      	mov	r5, r3
 800907c:	f04f 0600 	mov.w	r6, #0
 8009080:	46a8      	mov	r8, r5
 8009082:	46b1      	mov	r9, r6
 8009084:	eb18 0308 	adds.w	r3, r8, r8
 8009088:	eb49 0409 	adc.w	r4, r9, r9
 800908c:	4698      	mov	r8, r3
 800908e:	46a1      	mov	r9, r4
 8009090:	eb18 0805 	adds.w	r8, r8, r5
 8009094:	eb49 0906 	adc.w	r9, r9, r6
 8009098:	f04f 0100 	mov.w	r1, #0
 800909c:	f04f 0200 	mov.w	r2, #0
 80090a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80090a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80090a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80090ac:	4688      	mov	r8, r1
 80090ae:	4691      	mov	r9, r2
 80090b0:	eb18 0005 	adds.w	r0, r8, r5
 80090b4:	eb49 0106 	adc.w	r1, r9, r6
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	461d      	mov	r5, r3
 80090be:	f04f 0600 	mov.w	r6, #0
 80090c2:	196b      	adds	r3, r5, r5
 80090c4:	eb46 0406 	adc.w	r4, r6, r6
 80090c8:	461a      	mov	r2, r3
 80090ca:	4623      	mov	r3, r4
 80090cc:	f7f7 fdf4 	bl	8000cb8 <__aeabi_uldivmod>
 80090d0:	4603      	mov	r3, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	461a      	mov	r2, r3
 80090d6:	4b47      	ldr	r3, [pc, #284]	; (80091f4 <UART_SetConfig+0x384>)
 80090d8:	fba3 2302 	umull	r2, r3, r3, r2
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	461d      	mov	r5, r3
 80090e6:	f04f 0600 	mov.w	r6, #0
 80090ea:	46a9      	mov	r9, r5
 80090ec:	46b2      	mov	sl, r6
 80090ee:	eb19 0309 	adds.w	r3, r9, r9
 80090f2:	eb4a 040a 	adc.w	r4, sl, sl
 80090f6:	4699      	mov	r9, r3
 80090f8:	46a2      	mov	sl, r4
 80090fa:	eb19 0905 	adds.w	r9, r9, r5
 80090fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8009102:	f04f 0100 	mov.w	r1, #0
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800910e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009112:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009116:	4689      	mov	r9, r1
 8009118:	4692      	mov	sl, r2
 800911a:	eb19 0005 	adds.w	r0, r9, r5
 800911e:	eb4a 0106 	adc.w	r1, sl, r6
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	461d      	mov	r5, r3
 8009128:	f04f 0600 	mov.w	r6, #0
 800912c:	196b      	adds	r3, r5, r5
 800912e:	eb46 0406 	adc.w	r4, r6, r6
 8009132:	461a      	mov	r2, r3
 8009134:	4623      	mov	r3, r4
 8009136:	f7f7 fdbf 	bl	8000cb8 <__aeabi_uldivmod>
 800913a:	4603      	mov	r3, r0
 800913c:	460c      	mov	r4, r1
 800913e:	461a      	mov	r2, r3
 8009140:	4b2c      	ldr	r3, [pc, #176]	; (80091f4 <UART_SetConfig+0x384>)
 8009142:	fba3 1302 	umull	r1, r3, r3, r2
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	2164      	movs	r1, #100	; 0x64
 800914a:	fb01 f303 	mul.w	r3, r1, r3
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	3332      	adds	r3, #50	; 0x32
 8009154:	4a27      	ldr	r2, [pc, #156]	; (80091f4 <UART_SetConfig+0x384>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009162:	4498      	add	r8, r3
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	461d      	mov	r5, r3
 8009168:	f04f 0600 	mov.w	r6, #0
 800916c:	46a9      	mov	r9, r5
 800916e:	46b2      	mov	sl, r6
 8009170:	eb19 0309 	adds.w	r3, r9, r9
 8009174:	eb4a 040a 	adc.w	r4, sl, sl
 8009178:	4699      	mov	r9, r3
 800917a:	46a2      	mov	sl, r4
 800917c:	eb19 0905 	adds.w	r9, r9, r5
 8009180:	eb4a 0a06 	adc.w	sl, sl, r6
 8009184:	f04f 0100 	mov.w	r1, #0
 8009188:	f04f 0200 	mov.w	r2, #0
 800918c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009198:	4689      	mov	r9, r1
 800919a:	4692      	mov	sl, r2
 800919c:	eb19 0005 	adds.w	r0, r9, r5
 80091a0:	eb4a 0106 	adc.w	r1, sl, r6
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	461d      	mov	r5, r3
 80091aa:	f04f 0600 	mov.w	r6, #0
 80091ae:	196b      	adds	r3, r5, r5
 80091b0:	eb46 0406 	adc.w	r4, r6, r6
 80091b4:	461a      	mov	r2, r3
 80091b6:	4623      	mov	r3, r4
 80091b8:	f7f7 fd7e 	bl	8000cb8 <__aeabi_uldivmod>
 80091bc:	4603      	mov	r3, r0
 80091be:	460c      	mov	r4, r1
 80091c0:	461a      	mov	r2, r3
 80091c2:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <UART_SetConfig+0x384>)
 80091c4:	fba3 1302 	umull	r1, r3, r3, r2
 80091c8:	095b      	lsrs	r3, r3, #5
 80091ca:	2164      	movs	r1, #100	; 0x64
 80091cc:	fb01 f303 	mul.w	r3, r1, r3
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	3332      	adds	r3, #50	; 0x32
 80091d6:	4a07      	ldr	r2, [pc, #28]	; (80091f4 <UART_SetConfig+0x384>)
 80091d8:	fba2 2303 	umull	r2, r3, r2, r3
 80091dc:	095b      	lsrs	r3, r3, #5
 80091de:	f003 0207 	and.w	r2, r3, #7
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4442      	add	r2, r8
 80091e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80091ea:	e1b2      	b.n	8009552 <UART_SetConfig+0x6e2>
 80091ec:	40011000 	.word	0x40011000
 80091f0:	40011400 	.word	0x40011400
 80091f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4ad7      	ldr	r2, [pc, #860]	; (800955c <UART_SetConfig+0x6ec>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d005      	beq.n	800920e <UART_SetConfig+0x39e>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4ad6      	ldr	r2, [pc, #856]	; (8009560 <UART_SetConfig+0x6f0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	f040 80d1 	bne.w	80093b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800920e:	f7fc ff31 	bl	8006074 <HAL_RCC_GetPCLK2Freq>
 8009212:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	469a      	mov	sl, r3
 8009218:	f04f 0b00 	mov.w	fp, #0
 800921c:	46d0      	mov	r8, sl
 800921e:	46d9      	mov	r9, fp
 8009220:	eb18 0308 	adds.w	r3, r8, r8
 8009224:	eb49 0409 	adc.w	r4, r9, r9
 8009228:	4698      	mov	r8, r3
 800922a:	46a1      	mov	r9, r4
 800922c:	eb18 080a 	adds.w	r8, r8, sl
 8009230:	eb49 090b 	adc.w	r9, r9, fp
 8009234:	f04f 0100 	mov.w	r1, #0
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009240:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009244:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009248:	4688      	mov	r8, r1
 800924a:	4691      	mov	r9, r2
 800924c:	eb1a 0508 	adds.w	r5, sl, r8
 8009250:	eb4b 0609 	adc.w	r6, fp, r9
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	4619      	mov	r1, r3
 800925a:	f04f 0200 	mov.w	r2, #0
 800925e:	f04f 0300 	mov.w	r3, #0
 8009262:	f04f 0400 	mov.w	r4, #0
 8009266:	0094      	lsls	r4, r2, #2
 8009268:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800926c:	008b      	lsls	r3, r1, #2
 800926e:	461a      	mov	r2, r3
 8009270:	4623      	mov	r3, r4
 8009272:	4628      	mov	r0, r5
 8009274:	4631      	mov	r1, r6
 8009276:	f7f7 fd1f 	bl	8000cb8 <__aeabi_uldivmod>
 800927a:	4603      	mov	r3, r0
 800927c:	460c      	mov	r4, r1
 800927e:	461a      	mov	r2, r3
 8009280:	4bb8      	ldr	r3, [pc, #736]	; (8009564 <UART_SetConfig+0x6f4>)
 8009282:	fba3 2302 	umull	r2, r3, r3, r2
 8009286:	095b      	lsrs	r3, r3, #5
 8009288:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	469b      	mov	fp, r3
 8009290:	f04f 0c00 	mov.w	ip, #0
 8009294:	46d9      	mov	r9, fp
 8009296:	46e2      	mov	sl, ip
 8009298:	eb19 0309 	adds.w	r3, r9, r9
 800929c:	eb4a 040a 	adc.w	r4, sl, sl
 80092a0:	4699      	mov	r9, r3
 80092a2:	46a2      	mov	sl, r4
 80092a4:	eb19 090b 	adds.w	r9, r9, fp
 80092a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80092ac:	f04f 0100 	mov.w	r1, #0
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092c0:	4689      	mov	r9, r1
 80092c2:	4692      	mov	sl, r2
 80092c4:	eb1b 0509 	adds.w	r5, fp, r9
 80092c8:	eb4c 060a 	adc.w	r6, ip, sl
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	4619      	mov	r1, r3
 80092d2:	f04f 0200 	mov.w	r2, #0
 80092d6:	f04f 0300 	mov.w	r3, #0
 80092da:	f04f 0400 	mov.w	r4, #0
 80092de:	0094      	lsls	r4, r2, #2
 80092e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092e4:	008b      	lsls	r3, r1, #2
 80092e6:	461a      	mov	r2, r3
 80092e8:	4623      	mov	r3, r4
 80092ea:	4628      	mov	r0, r5
 80092ec:	4631      	mov	r1, r6
 80092ee:	f7f7 fce3 	bl	8000cb8 <__aeabi_uldivmod>
 80092f2:	4603      	mov	r3, r0
 80092f4:	460c      	mov	r4, r1
 80092f6:	461a      	mov	r2, r3
 80092f8:	4b9a      	ldr	r3, [pc, #616]	; (8009564 <UART_SetConfig+0x6f4>)
 80092fa:	fba3 1302 	umull	r1, r3, r3, r2
 80092fe:	095b      	lsrs	r3, r3, #5
 8009300:	2164      	movs	r1, #100	; 0x64
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	011b      	lsls	r3, r3, #4
 800930a:	3332      	adds	r3, #50	; 0x32
 800930c:	4a95      	ldr	r2, [pc, #596]	; (8009564 <UART_SetConfig+0x6f4>)
 800930e:	fba2 2303 	umull	r2, r3, r2, r3
 8009312:	095b      	lsrs	r3, r3, #5
 8009314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009318:	4498      	add	r8, r3
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	469b      	mov	fp, r3
 800931e:	f04f 0c00 	mov.w	ip, #0
 8009322:	46d9      	mov	r9, fp
 8009324:	46e2      	mov	sl, ip
 8009326:	eb19 0309 	adds.w	r3, r9, r9
 800932a:	eb4a 040a 	adc.w	r4, sl, sl
 800932e:	4699      	mov	r9, r3
 8009330:	46a2      	mov	sl, r4
 8009332:	eb19 090b 	adds.w	r9, r9, fp
 8009336:	eb4a 0a0c 	adc.w	sl, sl, ip
 800933a:	f04f 0100 	mov.w	r1, #0
 800933e:	f04f 0200 	mov.w	r2, #0
 8009342:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009346:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800934a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800934e:	4689      	mov	r9, r1
 8009350:	4692      	mov	sl, r2
 8009352:	eb1b 0509 	adds.w	r5, fp, r9
 8009356:	eb4c 060a 	adc.w	r6, ip, sl
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	4619      	mov	r1, r3
 8009360:	f04f 0200 	mov.w	r2, #0
 8009364:	f04f 0300 	mov.w	r3, #0
 8009368:	f04f 0400 	mov.w	r4, #0
 800936c:	0094      	lsls	r4, r2, #2
 800936e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009372:	008b      	lsls	r3, r1, #2
 8009374:	461a      	mov	r2, r3
 8009376:	4623      	mov	r3, r4
 8009378:	4628      	mov	r0, r5
 800937a:	4631      	mov	r1, r6
 800937c:	f7f7 fc9c 	bl	8000cb8 <__aeabi_uldivmod>
 8009380:	4603      	mov	r3, r0
 8009382:	460c      	mov	r4, r1
 8009384:	461a      	mov	r2, r3
 8009386:	4b77      	ldr	r3, [pc, #476]	; (8009564 <UART_SetConfig+0x6f4>)
 8009388:	fba3 1302 	umull	r1, r3, r3, r2
 800938c:	095b      	lsrs	r3, r3, #5
 800938e:	2164      	movs	r1, #100	; 0x64
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	3332      	adds	r3, #50	; 0x32
 800939a:	4a72      	ldr	r2, [pc, #456]	; (8009564 <UART_SetConfig+0x6f4>)
 800939c:	fba2 2303 	umull	r2, r3, r2, r3
 80093a0:	095b      	lsrs	r3, r3, #5
 80093a2:	f003 020f 	and.w	r2, r3, #15
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4442      	add	r2, r8
 80093ac:	609a      	str	r2, [r3, #8]
 80093ae:	e0d0      	b.n	8009552 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80093b0:	f7fc fe4c 	bl	800604c <HAL_RCC_GetPCLK1Freq>
 80093b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	469a      	mov	sl, r3
 80093ba:	f04f 0b00 	mov.w	fp, #0
 80093be:	46d0      	mov	r8, sl
 80093c0:	46d9      	mov	r9, fp
 80093c2:	eb18 0308 	adds.w	r3, r8, r8
 80093c6:	eb49 0409 	adc.w	r4, r9, r9
 80093ca:	4698      	mov	r8, r3
 80093cc:	46a1      	mov	r9, r4
 80093ce:	eb18 080a 	adds.w	r8, r8, sl
 80093d2:	eb49 090b 	adc.w	r9, r9, fp
 80093d6:	f04f 0100 	mov.w	r1, #0
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80093e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80093e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80093ea:	4688      	mov	r8, r1
 80093ec:	4691      	mov	r9, r2
 80093ee:	eb1a 0508 	adds.w	r5, sl, r8
 80093f2:	eb4b 0609 	adc.w	r6, fp, r9
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	4619      	mov	r1, r3
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	f04f 0300 	mov.w	r3, #0
 8009404:	f04f 0400 	mov.w	r4, #0
 8009408:	0094      	lsls	r4, r2, #2
 800940a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800940e:	008b      	lsls	r3, r1, #2
 8009410:	461a      	mov	r2, r3
 8009412:	4623      	mov	r3, r4
 8009414:	4628      	mov	r0, r5
 8009416:	4631      	mov	r1, r6
 8009418:	f7f7 fc4e 	bl	8000cb8 <__aeabi_uldivmod>
 800941c:	4603      	mov	r3, r0
 800941e:	460c      	mov	r4, r1
 8009420:	461a      	mov	r2, r3
 8009422:	4b50      	ldr	r3, [pc, #320]	; (8009564 <UART_SetConfig+0x6f4>)
 8009424:	fba3 2302 	umull	r2, r3, r3, r2
 8009428:	095b      	lsrs	r3, r3, #5
 800942a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	469b      	mov	fp, r3
 8009432:	f04f 0c00 	mov.w	ip, #0
 8009436:	46d9      	mov	r9, fp
 8009438:	46e2      	mov	sl, ip
 800943a:	eb19 0309 	adds.w	r3, r9, r9
 800943e:	eb4a 040a 	adc.w	r4, sl, sl
 8009442:	4699      	mov	r9, r3
 8009444:	46a2      	mov	sl, r4
 8009446:	eb19 090b 	adds.w	r9, r9, fp
 800944a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800944e:	f04f 0100 	mov.w	r1, #0
 8009452:	f04f 0200 	mov.w	r2, #0
 8009456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800945a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800945e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009462:	4689      	mov	r9, r1
 8009464:	4692      	mov	sl, r2
 8009466:	eb1b 0509 	adds.w	r5, fp, r9
 800946a:	eb4c 060a 	adc.w	r6, ip, sl
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	4619      	mov	r1, r3
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	f04f 0300 	mov.w	r3, #0
 800947c:	f04f 0400 	mov.w	r4, #0
 8009480:	0094      	lsls	r4, r2, #2
 8009482:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009486:	008b      	lsls	r3, r1, #2
 8009488:	461a      	mov	r2, r3
 800948a:	4623      	mov	r3, r4
 800948c:	4628      	mov	r0, r5
 800948e:	4631      	mov	r1, r6
 8009490:	f7f7 fc12 	bl	8000cb8 <__aeabi_uldivmod>
 8009494:	4603      	mov	r3, r0
 8009496:	460c      	mov	r4, r1
 8009498:	461a      	mov	r2, r3
 800949a:	4b32      	ldr	r3, [pc, #200]	; (8009564 <UART_SetConfig+0x6f4>)
 800949c:	fba3 1302 	umull	r1, r3, r3, r2
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	2164      	movs	r1, #100	; 0x64
 80094a4:	fb01 f303 	mul.w	r3, r1, r3
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	3332      	adds	r3, #50	; 0x32
 80094ae:	4a2d      	ldr	r2, [pc, #180]	; (8009564 <UART_SetConfig+0x6f4>)
 80094b0:	fba2 2303 	umull	r2, r3, r2, r3
 80094b4:	095b      	lsrs	r3, r3, #5
 80094b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094ba:	4498      	add	r8, r3
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	469b      	mov	fp, r3
 80094c0:	f04f 0c00 	mov.w	ip, #0
 80094c4:	46d9      	mov	r9, fp
 80094c6:	46e2      	mov	sl, ip
 80094c8:	eb19 0309 	adds.w	r3, r9, r9
 80094cc:	eb4a 040a 	adc.w	r4, sl, sl
 80094d0:	4699      	mov	r9, r3
 80094d2:	46a2      	mov	sl, r4
 80094d4:	eb19 090b 	adds.w	r9, r9, fp
 80094d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094dc:	f04f 0100 	mov.w	r1, #0
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094f0:	4689      	mov	r9, r1
 80094f2:	4692      	mov	sl, r2
 80094f4:	eb1b 0509 	adds.w	r5, fp, r9
 80094f8:	eb4c 060a 	adc.w	r6, ip, sl
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	4619      	mov	r1, r3
 8009502:	f04f 0200 	mov.w	r2, #0
 8009506:	f04f 0300 	mov.w	r3, #0
 800950a:	f04f 0400 	mov.w	r4, #0
 800950e:	0094      	lsls	r4, r2, #2
 8009510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009514:	008b      	lsls	r3, r1, #2
 8009516:	461a      	mov	r2, r3
 8009518:	4623      	mov	r3, r4
 800951a:	4628      	mov	r0, r5
 800951c:	4631      	mov	r1, r6
 800951e:	f7f7 fbcb 	bl	8000cb8 <__aeabi_uldivmod>
 8009522:	4603      	mov	r3, r0
 8009524:	460c      	mov	r4, r1
 8009526:	461a      	mov	r2, r3
 8009528:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <UART_SetConfig+0x6f4>)
 800952a:	fba3 1302 	umull	r1, r3, r3, r2
 800952e:	095b      	lsrs	r3, r3, #5
 8009530:	2164      	movs	r1, #100	; 0x64
 8009532:	fb01 f303 	mul.w	r3, r1, r3
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	3332      	adds	r3, #50	; 0x32
 800953c:	4a09      	ldr	r2, [pc, #36]	; (8009564 <UART_SetConfig+0x6f4>)
 800953e:	fba2 2303 	umull	r2, r3, r2, r3
 8009542:	095b      	lsrs	r3, r3, #5
 8009544:	f003 020f 	and.w	r2, r3, #15
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4442      	add	r2, r8
 800954e:	609a      	str	r2, [r3, #8]
}
 8009550:	e7ff      	b.n	8009552 <UART_SetConfig+0x6e2>
 8009552:	bf00      	nop
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955c:	40011000 	.word	0x40011000
 8009560:	40011400 	.word	0x40011400
 8009564:	51eb851f 	.word	0x51eb851f

08009568 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009568:	b084      	sub	sp, #16
 800956a:	b480      	push	{r7}
 800956c:	b085      	sub	sp, #20
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	f107 001c 	add.w	r0, r7, #28
 8009576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800957e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009580:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009582:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009586:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800958a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800958c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800958e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009592:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	4313      	orrs	r3, r2
 8009598:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80095a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	431a      	orrs	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	b004      	add	sp, #16
 80095bc:	4770      	bx	lr

080095be <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2203      	movs	r2, #3
 8009606:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009608:	2002      	movs	r0, #2
 800960a:	f7fa fbff 	bl	8003e0c <HAL_Delay>
  
  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0303 	and.w	r3, r3, #3
}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009652:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009658:	431a      	orrs	r2, r3
                       Command->CPSM);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800965e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800966e:	f023 030f 	bic.w	r3, r3, #15
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	431a      	orrs	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	b2db      	uxtb	r3, r3
}
 8009696:	4618      	mov	r0, r3
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3314      	adds	r3, #20
 80096b0:	461a      	mov	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	4413      	add	r3, r2
 80096b6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
}  
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096ee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80096f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80096fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009706:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	431a      	orrs	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009712:	2300      	movs	r3, #0

}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800972e:	2310      	movs	r3, #16
 8009730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009732:	2340      	movs	r3, #64	; 0x40
 8009734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800973a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800973e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009740:	f107 0308 	add.w	r3, r7, #8
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff ff74 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800974c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009750:	2110      	movs	r1, #16
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fa40 	bl	8009bd8 <SDMMC_GetCmdResp1>
 8009758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800975a:	69fb      	ldr	r3, [r7, #28]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3720      	adds	r7, #32
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009772:	2311      	movs	r3, #17
 8009774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009776:	2340      	movs	r3, #64	; 0x40
 8009778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800977a:	2300      	movs	r3, #0
 800977c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800977e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009784:	f107 0308 	add.w	r3, r7, #8
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7ff ff52 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009790:	f241 3288 	movw	r2, #5000	; 0x1388
 8009794:	2111      	movs	r1, #17
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fa1e 	bl	8009bd8 <SDMMC_GetCmdResp1>
 800979c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800979e:	69fb      	ldr	r3, [r7, #28]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3720      	adds	r7, #32
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80097b6:	2312      	movs	r3, #18
 80097b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097ba:	2340      	movs	r3, #64	; 0x40
 80097bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097be:	2300      	movs	r3, #0
 80097c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097c8:	f107 0308 	add.w	r3, r7, #8
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff ff30 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80097d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d8:	2112      	movs	r1, #18
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9fc 	bl	8009bd8 <SDMMC_GetCmdResp1>
 80097e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097e2:	69fb      	ldr	r3, [r7, #28]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3720      	adds	r7, #32
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80097fa:	2318      	movs	r3, #24
 80097fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097fe:	2340      	movs	r3, #64	; 0x40
 8009800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009802:	2300      	movs	r3, #0
 8009804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff ff0e 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009818:	f241 3288 	movw	r2, #5000	; 0x1388
 800981c:	2118      	movs	r1, #24
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f9da 	bl	8009bd8 <SDMMC_GetCmdResp1>
 8009824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009826:	69fb      	ldr	r3, [r7, #28]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3720      	adds	r7, #32
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800983e:	2319      	movs	r3, #25
 8009840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009842:	2340      	movs	r3, #64	; 0x40
 8009844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009846:	2300      	movs	r3, #0
 8009848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800984a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800984e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009850:	f107 0308 	add.w	r3, r7, #8
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff feec 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800985c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009860:	2119      	movs	r1, #25
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f9b8 	bl	8009bd8 <SDMMC_GetCmdResp1>
 8009868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800986a:	69fb      	ldr	r3, [r7, #28]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3720      	adds	r7, #32
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009880:	230c      	movs	r3, #12
 8009882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009884:	2340      	movs	r3, #64	; 0x40
 8009886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800988c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009890:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009892:	f107 0308 	add.w	r3, r7, #8
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff fecb 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800989e:	4a05      	ldr	r2, [pc, #20]	; (80098b4 <SDMMC_CmdStopTransfer+0x40>)
 80098a0:	210c      	movs	r1, #12
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f998 	bl	8009bd8 <SDMMC_GetCmdResp1>
 80098a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098aa:	69fb      	ldr	r3, [r7, #28]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3720      	adds	r7, #32
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	05f5e100 	.word	0x05f5e100

080098b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	; 0x28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80098c8:	2307      	movs	r3, #7
 80098ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098cc:	2340      	movs	r3, #64	; 0x40
 80098ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098d0:	2300      	movs	r3, #0
 80098d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098da:	f107 0310 	add.w	r3, r7, #16
 80098de:	4619      	mov	r1, r3
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7ff fea7 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80098e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80098ea:	2107      	movs	r1, #7
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 f973 	bl	8009bd8 <SDMMC_GetCmdResp1>
 80098f2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3728      	adds	r7, #40	; 0x28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b088      	sub	sp, #32
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800990a:	2300      	movs	r3, #0
 800990c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800990e:	2300      	movs	r3, #0
 8009910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800991a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800991c:	f107 0308 	add.w	r3, r7, #8
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff fe86 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f92d 	bl	8009b88 <SDMMC_GetCmdError>
 800992e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009930:	69fb      	ldr	r3, [r7, #28]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3720      	adds	r7, #32
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b088      	sub	sp, #32
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009942:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009948:	2308      	movs	r3, #8
 800994a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800994c:	2340      	movs	r3, #64	; 0x40
 800994e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009958:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800995a:	f107 0308 	add.w	r3, r7, #8
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff fe67 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fb16 	bl	8009f98 <SDMMC_GetCmdResp7>
 800996c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800996e:	69fb      	ldr	r3, [r7, #28]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3720      	adds	r7, #32
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009986:	2337      	movs	r3, #55	; 0x37
 8009988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800998a:	2340      	movs	r3, #64	; 0x40
 800998c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009996:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009998:	f107 0308 	add.w	r3, r7, #8
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff fe48 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80099a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a8:	2137      	movs	r1, #55	; 0x37
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f914 	bl	8009bd8 <SDMMC_GetCmdResp1>
 80099b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b2:	69fb      	ldr	r3, [r7, #28]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80099d2:	2329      	movs	r3, #41	; 0x29
 80099d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099d6:	2340      	movs	r3, #64	; 0x40
 80099d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099da:	2300      	movs	r3, #0
 80099dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099e4:	f107 0308 	add.w	r3, r7, #8
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff fe22 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fa23 	bl	8009e3c <SDMMC_GetCmdResp3>
 80099f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099f8:	69fb      	ldr	r3, [r7, #28]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3720      	adds	r7, #32
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b088      	sub	sp, #32
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009a10:	2306      	movs	r3, #6
 8009a12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a14:	2340      	movs	r3, #64	; 0x40
 8009a16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a22:	f107 0308 	add.w	r3, r7, #8
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff fe03 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a32:	2106      	movs	r1, #6
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f8cf 	bl	8009bd8 <SDMMC_GetCmdResp1>
 8009a3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a3c:	69fb      	ldr	r3, [r7, #28]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b088      	sub	sp, #32
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009a52:	2333      	movs	r3, #51	; 0x33
 8009a54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a56:	2340      	movs	r3, #64	; 0x40
 8009a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a64:	f107 0308 	add.w	r3, r7, #8
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff fde2 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a74:	2133      	movs	r1, #51	; 0x33
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f8ae 	bl	8009bd8 <SDMMC_GetCmdResp1>
 8009a7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009a94:	2302      	movs	r3, #2
 8009a96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a98:	23c0      	movs	r3, #192	; 0xc0
 8009a9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aa6:	f107 0308 	add.w	r3, r7, #8
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7ff fdc1 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f97c 	bl	8009db0 <SDMMC_GetCmdResp2>
 8009ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aba:	69fb      	ldr	r3, [r7, #28]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3720      	adds	r7, #32
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009ad2:	2309      	movs	r3, #9
 8009ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009ad6:	23c0      	movs	r3, #192	; 0xc0
 8009ad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ada:	2300      	movs	r3, #0
 8009adc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ae2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ae4:	f107 0308 	add.w	r3, r7, #8
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff fda2 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f95d 	bl	8009db0 <SDMMC_GetCmdResp2>
 8009af6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009af8:	69fb      	ldr	r3, [r7, #28]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3720      	adds	r7, #32
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b088      	sub	sp, #32
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009b10:	2303      	movs	r3, #3
 8009b12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b14:	2340      	movs	r3, #64	; 0x40
 8009b16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b22:	f107 0308 	add.w	r3, r7, #8
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff fd83 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	2103      	movs	r1, #3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f9bc 	bl	8009eb0 <SDMMC_GetCmdResp6>
 8009b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b3a:	69fb      	ldr	r3, [r7, #28]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3720      	adds	r7, #32
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009b52:	230d      	movs	r3, #13
 8009b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b56:	2340      	movs	r3, #64	; 0x40
 8009b58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b64:	f107 0308 	add.w	r3, r7, #8
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7ff fd62 	bl	8009634 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b74:	210d      	movs	r1, #13
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f82e 	bl	8009bd8 <SDMMC_GetCmdResp1>
 8009b7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b7e:	69fb      	ldr	r3, [r7, #28]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3720      	adds	r7, #32
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009b88:	b490      	push	{r4, r7}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b90:	4b0f      	ldr	r3, [pc, #60]	; (8009bd0 <SDMMC_GetCmdError+0x48>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a0f      	ldr	r2, [pc, #60]	; (8009bd4 <SDMMC_GetCmdError+0x4c>)
 8009b96:	fba2 2303 	umull	r2, r3, r2, r3
 8009b9a:	0a5b      	lsrs	r3, r3, #9
 8009b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ba0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009ba4:	4623      	mov	r3, r4
 8009ba6:	1e5c      	subs	r4, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bb0:	e009      	b.n	8009bc6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0f2      	beq.n	8009ba4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	22c5      	movs	r2, #197	; 0xc5
 8009bc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bc90      	pop	{r4, r7}
 8009bce:	4770      	bx	lr
 8009bd0:	20000000 	.word	0x20000000
 8009bd4:	10624dd3 	.word	0x10624dd3

08009bd8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	460b      	mov	r3, r1
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009be6:	4b6f      	ldr	r3, [pc, #444]	; (8009da4 <SDMMC_GetCmdResp1+0x1cc>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a6f      	ldr	r2, [pc, #444]	; (8009da8 <SDMMC_GetCmdResp1+0x1d0>)
 8009bec:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf0:	0a5b      	lsrs	r3, r3, #9
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009bf8:	4623      	mov	r3, r4
 8009bfa:	1e5c      	subs	r4, r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c04:	e0c9      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d0f0      	beq.n	8009bf8 <SDMMC_GetCmdResp1+0x20>
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1eb      	bne.n	8009bf8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c24:	f003 0304 	and.w	r3, r3, #4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d004      	beq.n	8009c36 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2204      	movs	r2, #4
 8009c30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c32:	2304      	movs	r3, #4
 8009c34:	e0b1      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d004      	beq.n	8009c4c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2201      	movs	r2, #1
 8009c46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e0a6      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	22c5      	movs	r2, #197	; 0xc5
 8009c50:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f7ff fd18 	bl	8009688 <SDIO_GetCommandResponse>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	7afb      	ldrb	r3, [r7, #11]
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d001      	beq.n	8009c66 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e099      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009c66:	2100      	movs	r1, #0
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff fd1a 	bl	80096a2 <SDIO_GetResponse>
 8009c6e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	4b4e      	ldr	r3, [pc, #312]	; (8009dac <SDMMC_GetCmdResp1+0x1d4>)
 8009c74:	4013      	ands	r3, r2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e08d      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	da02      	bge.n	8009c8a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c88:	e087      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c94:	2340      	movs	r3, #64	; 0x40
 8009c96:	e080      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ca2:	2380      	movs	r3, #128	; 0x80
 8009ca4:	e079      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cb4:	e071      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cc4:	e069      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd4:	e061      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ce4:	e059      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cf4:	e051      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d04:	e049      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d14:	e041      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d24:	e039      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d34:	e031      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d44:	e029      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009d50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d54:	e021      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009d60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009d64:	e019      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009d70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009d74:	e011      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009d80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d84:	e009      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009d90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009d94:	e001      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd90      	pop	{r4, r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000000 	.word	0x20000000
 8009da8:	10624dd3 	.word	0x10624dd3
 8009dac:	fdffe008 	.word	0xfdffe008

08009db0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009db0:	b490      	push	{r4, r7}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009db8:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <SDMMC_GetCmdResp2+0x84>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1e      	ldr	r2, [pc, #120]	; (8009e38 <SDMMC_GetCmdResp2+0x88>)
 8009dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc2:	0a5b      	lsrs	r3, r3, #9
 8009dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009dcc:	4623      	mov	r3, r4
 8009dce:	1e5c      	subs	r4, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d102      	bne.n	8009dda <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dd8:	e026      	b.n	8009e28 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dde:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f0      	beq.n	8009dcc <SDMMC_GetCmdResp2+0x1c>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1eb      	bne.n	8009dcc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2204      	movs	r2, #4
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e06:	2304      	movs	r3, #4
 8009e08:	e00e      	b.n	8009e28 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e003      	b.n	8009e28 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	22c5      	movs	r2, #197	; 0xc5
 8009e24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bc90      	pop	{r4, r7}
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	20000000 	.word	0x20000000
 8009e38:	10624dd3 	.word	0x10624dd3

08009e3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009e3c:	b490      	push	{r4, r7}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e44:	4b18      	ldr	r3, [pc, #96]	; (8009ea8 <SDMMC_GetCmdResp3+0x6c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a18      	ldr	r2, [pc, #96]	; (8009eac <SDMMC_GetCmdResp3+0x70>)
 8009e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4e:	0a5b      	lsrs	r3, r3, #9
 8009e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009e58:	4623      	mov	r3, r4
 8009e5a:	1e5c      	subs	r4, r3, #1
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e64:	e01b      	b.n	8009e9e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0f0      	beq.n	8009e58 <SDMMC_GetCmdResp3+0x1c>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1eb      	bne.n	8009e58 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e84:	f003 0304 	and.w	r3, r3, #4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d004      	beq.n	8009e96 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2204      	movs	r2, #4
 8009e90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e92:	2304      	movs	r3, #4
 8009e94:	e003      	b.n	8009e9e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	22c5      	movs	r2, #197	; 0xc5
 8009e9a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bc90      	pop	{r4, r7}
 8009ea6:	4770      	bx	lr
 8009ea8:	20000000 	.word	0x20000000
 8009eac:	10624dd3 	.word	0x10624dd3

08009eb0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009eb0:	b590      	push	{r4, r7, lr}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ebe:	4b34      	ldr	r3, [pc, #208]	; (8009f90 <SDMMC_GetCmdResp6+0xe0>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a34      	ldr	r2, [pc, #208]	; (8009f94 <SDMMC_GetCmdResp6+0xe4>)
 8009ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec8:	0a5b      	lsrs	r3, r3, #9
 8009eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ece:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009ed2:	4623      	mov	r3, r4
 8009ed4:	1e5c      	subs	r4, r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d102      	bne.n	8009ee0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ede:	e052      	b.n	8009f86 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0f0      	beq.n	8009ed2 <SDMMC_GetCmdResp6+0x22>
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1eb      	bne.n	8009ed2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efe:	f003 0304 	and.w	r3, r3, #4
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d004      	beq.n	8009f10 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2204      	movs	r2, #4
 8009f0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f0c:	2304      	movs	r3, #4
 8009f0e:	e03a      	b.n	8009f86 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d004      	beq.n	8009f26 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e02f      	b.n	8009f86 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f7ff fbae 	bl	8009688 <SDIO_GetCommandResponse>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	461a      	mov	r2, r3
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d001      	beq.n	8009f3a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e025      	b.n	8009f86 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	22c5      	movs	r2, #197	; 0xc5
 8009f3e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009f40:	2100      	movs	r1, #0
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f7ff fbad 	bl	80096a2 <SDIO_GetResponse>
 8009f48:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d106      	bne.n	8009f62 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	0c1b      	lsrs	r3, r3, #16
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	e011      	b.n	8009f86 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f70:	e009      	b.n	8009f86 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f80:	e001      	b.n	8009f86 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	371c      	adds	r7, #28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd90      	pop	{r4, r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000000 	.word	0x20000000
 8009f94:	10624dd3 	.word	0x10624dd3

08009f98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009f98:	b490      	push	{r4, r7}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fa0:	4b21      	ldr	r3, [pc, #132]	; (800a028 <SDMMC_GetCmdResp7+0x90>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a21      	ldr	r2, [pc, #132]	; (800a02c <SDMMC_GetCmdResp7+0x94>)
 8009fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009faa:	0a5b      	lsrs	r3, r3, #9
 8009fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	1e5c      	subs	r4, r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d102      	bne.n	8009fc2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fc0:	e02c      	b.n	800a01c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0f0      	beq.n	8009fb4 <SDMMC_GetCmdResp7+0x1c>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1eb      	bne.n	8009fb4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe0:	f003 0304 	and.w	r3, r3, #4
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2204      	movs	r2, #4
 8009fec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fee:	2304      	movs	r3, #4
 8009ff0:	e014      	b.n	800a01c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d004      	beq.n	800a008 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a004:	2301      	movs	r3, #1
 800a006:	e009      	b.n	800a01c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2240      	movs	r2, #64	; 0x40
 800a018:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a01a:	2300      	movs	r3, #0
  
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bc90      	pop	{r4, r7}
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	20000000 	.word	0x20000000
 800a02c:	10624dd3 	.word	0x10624dd3

0800a030 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a034:	4904      	ldr	r1, [pc, #16]	; (800a048 <MX_FATFS_Init+0x18>)
 800a036:	4805      	ldr	r0, [pc, #20]	; (800a04c <MX_FATFS_Init+0x1c>)
 800a038:	f004 f874 	bl	800e124 <FATFS_LinkDriver>
 800a03c:	4603      	mov	r3, r0
 800a03e:	461a      	mov	r2, r3
 800a040:	4b03      	ldr	r3, [pc, #12]	; (800a050 <MX_FATFS_Init+0x20>)
 800a042:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a044:	bf00      	nop
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20002d88 	.word	0x20002d88
 800a04c:	08013280 	.word	0x08013280
 800a050:	20002d84 	.word	0x20002d84

0800a054 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a054:	b480      	push	{r7}
 800a056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a058:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a06e:	f000 f896 	bl	800a19e <BSP_SD_IsDetected>
 800a072:	4603      	mov	r3, r0
 800a074:	2b01      	cmp	r3, #1
 800a076:	d001      	beq.n	800a07c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e012      	b.n	800a0a2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a07c:	480b      	ldr	r0, [pc, #44]	; (800a0ac <BSP_SD_Init+0x48>)
 800a07e:	f7fc fc8d 	bl	800699c <HAL_SD_Init>
 800a082:	4603      	mov	r3, r0
 800a084:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a08c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a090:	4806      	ldr	r0, [pc, #24]	; (800a0ac <BSP_SD_Init+0x48>)
 800a092:	f7fd fa37 	bl	8007504 <HAL_SD_ConfigWideBusOperation>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20002c18 	.word	0x20002c18

0800a0b0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	68f9      	ldr	r1, [r7, #12]
 800a0c6:	4806      	ldr	r0, [pc, #24]	; (800a0e0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a0c8:	f7fc fcf8 	bl	8006abc <HAL_SD_ReadBlocks_DMA>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	20002c18 	.word	0x20002c18

0800a0e4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	68f9      	ldr	r1, [r7, #12]
 800a0fa:	4806      	ldr	r0, [pc, #24]	; (800a114 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a0fc:	f7fc fdc6 	bl	8006c8c <HAL_SD_WriteBlocks_DMA>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	20002c18 	.word	0x20002c18

0800a118 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a11c:	4805      	ldr	r0, [pc, #20]	; (800a134 <BSP_SD_GetCardState+0x1c>)
 800a11e:	f7fd fa6d 	bl	80075fc <HAL_SD_GetCardState>
 800a122:	4603      	mov	r3, r0
 800a124:	2b04      	cmp	r3, #4
 800a126:	bf14      	ite	ne
 800a128:	2301      	movne	r3, #1
 800a12a:	2300      	moveq	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
}
 800a12e:	4618      	mov	r0, r3
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20002c18 	.word	0x20002c18

0800a138 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	4803      	ldr	r0, [pc, #12]	; (800a150 <BSP_SD_GetCardInfo+0x18>)
 800a144:	f7fd f9b2 	bl	80074ac <HAL_SD_GetCardInfo>
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20002c18 	.word	0x20002c18

0800a154 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a15c:	f000 f818 	bl	800a190 <BSP_SD_AbortCallback>
}
 800a160:	bf00      	nop
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a170:	f000 f9a8 	bl	800a4c4 <BSP_SD_WriteCpltCallback>
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a184:	f000 f9aa 	bl	800a4dc <BSP_SD_ReadCpltCallback>
}
 800a188:	bf00      	nop
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a190:	b480      	push	{r7}
 800a192:	af00      	add	r7, sp, #0

}
 800a194:	bf00      	nop
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a1a8:	f000 f80c 	bl	800a1c4 <BSP_PlatformIsDetected>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
 800a1b8:	b2db      	uxtb	r3, r3
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a1ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1d2:	4806      	ldr	r0, [pc, #24]	; (800a1ec <BSP_PlatformIsDetected+0x28>)
 800a1d4:	f7fb f898 	bl	8005308 <HAL_GPIO_ReadPin>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	40020000 	.word	0x40020000

0800a1f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a1f8:	f7f9 fdfc 	bl	8003df4 <HAL_GetTick>
 800a1fc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a1fe:	e006      	b.n	800a20e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a200:	f7ff ff8a 	bl	800a118 <BSP_SD_GetCardState>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	e009      	b.n	800a222 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a20e:	f7f9 fdf1 	bl	8003df4 <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d8f0      	bhi.n	800a200 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a21e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
	...

0800a22c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a236:	4b0b      	ldr	r3, [pc, #44]	; (800a264 <SD_CheckStatus+0x38>)
 800a238:	2201      	movs	r2, #1
 800a23a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a23c:	f7ff ff6c 	bl	800a118 <BSP_SD_GetCardState>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d107      	bne.n	800a256 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <SD_CheckStatus+0x38>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	b2da      	uxtb	r2, r3
 800a252:	4b04      	ldr	r3, [pc, #16]	; (800a264 <SD_CheckStatus+0x38>)
 800a254:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a256:	4b03      	ldr	r3, [pc, #12]	; (800a264 <SD_CheckStatus+0x38>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	b2db      	uxtb	r3, r3
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	20000009 	.word	0x20000009

0800a268 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a272:	f7ff fef7 	bl	800a064 <BSP_SD_Init>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d107      	bne.n	800a28c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	4618      	mov	r0, r3
 800a280:	f7ff ffd4 	bl	800a22c <SD_CheckStatus>
 800a284:	4603      	mov	r3, r0
 800a286:	461a      	mov	r2, r3
 800a288:	4b04      	ldr	r3, [pc, #16]	; (800a29c <SD_initialize+0x34>)
 800a28a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a28c:	4b03      	ldr	r3, [pc, #12]	; (800a29c <SD_initialize+0x34>)
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	b2db      	uxtb	r3, r3
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000009 	.word	0x20000009

0800a2a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a2aa:	79fb      	ldrb	r3, [r7, #7]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff ffbd 	bl	800a22c <SD_CheckStatus>
 800a2b2:	4603      	mov	r3, r0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60b9      	str	r1, [r7, #8]
 800a2c4:	607a      	str	r2, [r7, #4]
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a2d0:	f247 5030 	movw	r0, #30000	; 0x7530
 800a2d4:	f7ff ff8c 	bl	800a1f0 <SD_CheckStatusWithTimeout>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	da01      	bge.n	800a2e2 <SD_read+0x26>
  {
    return res;
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	e03b      	b.n	800a35a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	6879      	ldr	r1, [r7, #4]
 800a2e6:	68b8      	ldr	r0, [r7, #8]
 800a2e8:	f7ff fee2 	bl	800a0b0 <BSP_SD_ReadBlocks_DMA>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d132      	bne.n	800a358 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a2f2:	4b1c      	ldr	r3, [pc, #112]	; (800a364 <SD_read+0xa8>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a2f8:	f7f9 fd7c 	bl	8003df4 <HAL_GetTick>
 800a2fc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a2fe:	bf00      	nop
 800a300:	4b18      	ldr	r3, [pc, #96]	; (800a364 <SD_read+0xa8>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d108      	bne.n	800a31a <SD_read+0x5e>
 800a308:	f7f9 fd74 	bl	8003df4 <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	f247 522f 	movw	r2, #29999	; 0x752f
 800a316:	4293      	cmp	r3, r2
 800a318:	d9f2      	bls.n	800a300 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800a31a:	4b12      	ldr	r3, [pc, #72]	; (800a364 <SD_read+0xa8>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d102      	bne.n	800a328 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	75fb      	strb	r3, [r7, #23]
 800a326:	e017      	b.n	800a358 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a328:	4b0e      	ldr	r3, [pc, #56]	; (800a364 <SD_read+0xa8>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a32e:	f7f9 fd61 	bl	8003df4 <HAL_GetTick>
 800a332:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a334:	e007      	b.n	800a346 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a336:	f7ff feef 	bl	800a118 <BSP_SD_GetCardState>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <SD_read+0x8a>
          {
            res = RES_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a344:	e008      	b.n	800a358 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a346:	f7f9 fd55 	bl	8003df4 <HAL_GetTick>
 800a34a:	4602      	mov	r2, r0
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	f247 522f 	movw	r2, #29999	; 0x752f
 800a354:	4293      	cmp	r3, r2
 800a356:	d9ee      	bls.n	800a336 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a358:	7dfb      	ldrb	r3, [r7, #23]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	200002f0 	.word	0x200002f0

0800a368 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
 800a372:	603b      	str	r3, [r7, #0]
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a37c:	4b24      	ldr	r3, [pc, #144]	; (800a410 <SD_write+0xa8>)
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a382:	f247 5030 	movw	r0, #30000	; 0x7530
 800a386:	f7ff ff33 	bl	800a1f0 <SD_CheckStatusWithTimeout>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	da01      	bge.n	800a394 <SD_write+0x2c>
  {
    return res;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	e038      	b.n	800a406 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	68b8      	ldr	r0, [r7, #8]
 800a39a:	f7ff fea3 	bl	800a0e4 <BSP_SD_WriteBlocks_DMA>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d12f      	bne.n	800a404 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a3a4:	f7f9 fd26 	bl	8003df4 <HAL_GetTick>
 800a3a8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a3aa:	bf00      	nop
 800a3ac:	4b18      	ldr	r3, [pc, #96]	; (800a410 <SD_write+0xa8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d108      	bne.n	800a3c6 <SD_write+0x5e>
 800a3b4:	f7f9 fd1e 	bl	8003df4 <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	f247 522f 	movw	r2, #29999	; 0x752f
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d9f2      	bls.n	800a3ac <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800a3c6:	4b12      	ldr	r3, [pc, #72]	; (800a410 <SD_write+0xa8>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d102      	bne.n	800a3d4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	75fb      	strb	r3, [r7, #23]
 800a3d2:	e017      	b.n	800a404 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a3d4:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <SD_write+0xa8>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a3da:	f7f9 fd0b 	bl	8003df4 <HAL_GetTick>
 800a3de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a3e0:	e007      	b.n	800a3f2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a3e2:	f7ff fe99 	bl	800a118 <BSP_SD_GetCardState>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d102      	bne.n	800a3f2 <SD_write+0x8a>
          {
            res = RES_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	75fb      	strb	r3, [r7, #23]
            break;
 800a3f0:	e008      	b.n	800a404 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a3f2:	f7f9 fcff 	bl	8003df4 <HAL_GetTick>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	f247 522f 	movw	r2, #29999	; 0x752f
 800a400:	4293      	cmp	r3, r2
 800a402:	d9ee      	bls.n	800a3e2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a404:	7dfb      	ldrb	r3, [r7, #23]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	200002ec 	.word	0x200002ec

0800a414 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08c      	sub	sp, #48	; 0x30
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	603a      	str	r2, [r7, #0]
 800a41e:	71fb      	strb	r3, [r7, #7]
 800a420:	460b      	mov	r3, r1
 800a422:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a42a:	4b25      	ldr	r3, [pc, #148]	; (800a4c0 <SD_ioctl+0xac>)
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <SD_ioctl+0x28>
 800a438:	2303      	movs	r3, #3
 800a43a:	e03c      	b.n	800a4b6 <SD_ioctl+0xa2>

  switch (cmd)
 800a43c:	79bb      	ldrb	r3, [r7, #6]
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d834      	bhi.n	800a4ac <SD_ioctl+0x98>
 800a442:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <SD_ioctl+0x34>)
 800a444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a448:	0800a459 	.word	0x0800a459
 800a44c:	0800a461 	.word	0x0800a461
 800a450:	0800a479 	.word	0x0800a479
 800a454:	0800a493 	.word	0x0800a493
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a45e:	e028      	b.n	800a4b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a460:	f107 030c 	add.w	r3, r7, #12
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff fe67 	bl	800a138 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a476:	e01c      	b.n	800a4b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a478:	f107 030c 	add.w	r3, r7, #12
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff fe5b 	bl	800a138 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	b29a      	uxth	r2, r3
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a490:	e00f      	b.n	800a4b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a492:	f107 030c 	add.w	r3, r7, #12
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff fe4e 	bl	800a138 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	0a5a      	lsrs	r2, r3, #9
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4aa:	e002      	b.n	800a4b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a4ac:	2304      	movs	r3, #4
 800a4ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a4b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3730      	adds	r7, #48	; 0x30
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000009 	.word	0x20000009

0800a4c4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a4c8:	4b03      	ldr	r3, [pc, #12]	; (800a4d8 <BSP_SD_WriteCpltCallback+0x14>)
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	601a      	str	r2, [r3, #0]
}
 800a4ce:	bf00      	nop
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	200002ec 	.word	0x200002ec

0800a4dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a4e0:	4b03      	ldr	r3, [pc, #12]	; (800a4f0 <BSP_SD_ReadCpltCallback+0x14>)
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	601a      	str	r2, [r3, #0]
}
 800a4e6:	bf00      	nop
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	200002f0 	.word	0x200002f0

0800a4f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a4fe:	79fb      	ldrb	r3, [r7, #7]
 800a500:	4a08      	ldr	r2, [pc, #32]	; (800a524 <disk_status+0x30>)
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	79fa      	ldrb	r2, [r7, #7]
 800a50c:	4905      	ldr	r1, [pc, #20]	; (800a524 <disk_status+0x30>)
 800a50e:	440a      	add	r2, r1
 800a510:	7a12      	ldrb	r2, [r2, #8]
 800a512:	4610      	mov	r0, r2
 800a514:	4798      	blx	r3
 800a516:	4603      	mov	r3, r0
 800a518:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	2000051c 	.word	0x2000051c

0800a528 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	4a0d      	ldr	r2, [pc, #52]	; (800a570 <disk_initialize+0x48>)
 800a53a:	5cd3      	ldrb	r3, [r2, r3]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d111      	bne.n	800a564 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	4a0b      	ldr	r2, [pc, #44]	; (800a570 <disk_initialize+0x48>)
 800a544:	2101      	movs	r1, #1
 800a546:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	4a09      	ldr	r2, [pc, #36]	; (800a570 <disk_initialize+0x48>)
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	79fa      	ldrb	r2, [r7, #7]
 800a556:	4906      	ldr	r1, [pc, #24]	; (800a570 <disk_initialize+0x48>)
 800a558:	440a      	add	r2, r1
 800a55a:	7a12      	ldrb	r2, [r2, #8]
 800a55c:	4610      	mov	r0, r2
 800a55e:	4798      	blx	r3
 800a560:	4603      	mov	r3, r0
 800a562:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	2000051c 	.word	0x2000051c

0800a574 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a574:	b590      	push	{r4, r7, lr}
 800a576:	b087      	sub	sp, #28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a584:	7bfb      	ldrb	r3, [r7, #15]
 800a586:	4a0a      	ldr	r2, [pc, #40]	; (800a5b0 <disk_read+0x3c>)
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	4413      	add	r3, r2
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	689c      	ldr	r4, [r3, #8]
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	4a07      	ldr	r2, [pc, #28]	; (800a5b0 <disk_read+0x3c>)
 800a594:	4413      	add	r3, r2
 800a596:	7a18      	ldrb	r0, [r3, #8]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	68b9      	ldr	r1, [r7, #8]
 800a59e:	47a0      	blx	r4
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	371c      	adds	r7, #28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd90      	pop	{r4, r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	2000051c 	.word	0x2000051c

0800a5b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a5b4:	b590      	push	{r4, r7, lr}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	607a      	str	r2, [r7, #4]
 800a5be:	603b      	str	r3, [r7, #0]
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
 800a5c6:	4a0a      	ldr	r2, [pc, #40]	; (800a5f0 <disk_write+0x3c>)
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	68dc      	ldr	r4, [r3, #12]
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	4a07      	ldr	r2, [pc, #28]	; (800a5f0 <disk_write+0x3c>)
 800a5d4:	4413      	add	r3, r2
 800a5d6:	7a18      	ldrb	r0, [r3, #8]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	68b9      	ldr	r1, [r7, #8]
 800a5de:	47a0      	blx	r4
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	371c      	adds	r7, #28
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd90      	pop	{r4, r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2000051c 	.word	0x2000051c

0800a5f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	603a      	str	r2, [r7, #0]
 800a5fe:	71fb      	strb	r3, [r7, #7]
 800a600:	460b      	mov	r3, r1
 800a602:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	4a09      	ldr	r2, [pc, #36]	; (800a62c <disk_ioctl+0x38>)
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	79fa      	ldrb	r2, [r7, #7]
 800a612:	4906      	ldr	r1, [pc, #24]	; (800a62c <disk_ioctl+0x38>)
 800a614:	440a      	add	r2, r1
 800a616:	7a10      	ldrb	r0, [r2, #8]
 800a618:	79b9      	ldrb	r1, [r7, #6]
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	4798      	blx	r3
 800a61e:	4603      	mov	r3, r0
 800a620:	73fb      	strb	r3, [r7, #15]
  return res;
 800a622:	7bfb      	ldrb	r3, [r7, #15]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	2000051c 	.word	0x2000051c

0800a630 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3301      	adds	r3, #1
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a640:	89fb      	ldrh	r3, [r7, #14]
 800a642:	021b      	lsls	r3, r3, #8
 800a644:	b21a      	sxth	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	b21b      	sxth	r3, r3
 800a64c:	4313      	orrs	r3, r2
 800a64e:	b21b      	sxth	r3, r3
 800a650:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a652:	89fb      	ldrh	r3, [r7, #14]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3303      	adds	r3, #3
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	3202      	adds	r2, #2
 800a678:	7812      	ldrb	r2, [r2, #0]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	021b      	lsls	r3, r3, #8
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	3201      	adds	r2, #1
 800a686:	7812      	ldrb	r2, [r2, #0]
 800a688:	4313      	orrs	r3, r2
 800a68a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	021b      	lsls	r3, r3, #8
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	7812      	ldrb	r2, [r2, #0]
 800a694:	4313      	orrs	r3, r2
 800a696:	60fb      	str	r3, [r7, #12]
	return rv;
 800a698:	68fb      	ldr	r3, [r7, #12]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	1c5a      	adds	r2, r3, #1
 800a6b6:	607a      	str	r2, [r7, #4]
 800a6b8:	887a      	ldrh	r2, [r7, #2]
 800a6ba:	b2d2      	uxtb	r2, r2
 800a6bc:	701a      	strb	r2, [r3, #0]
 800a6be:	887b      	ldrh	r3, [r7, #2]
 800a6c0:	0a1b      	lsrs	r3, r3, #8
 800a6c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	607a      	str	r2, [r7, #4]
 800a6ca:	887a      	ldrh	r2, [r7, #2]
 800a6cc:	b2d2      	uxtb	r2, r2
 800a6ce:	701a      	strb	r2, [r3, #0]
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	b2d2      	uxtb	r2, r2
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	0a1b      	lsrs	r3, r3, #8
 800a6f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	607a      	str	r2, [r7, #4]
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	b2d2      	uxtb	r2, r2
 800a702:	701a      	strb	r2, [r3, #0]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	0a1b      	lsrs	r3, r3, #8
 800a708:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	607a      	str	r2, [r7, #4]
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	b2d2      	uxtb	r2, r2
 800a714:	701a      	strb	r2, [r3, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	0a1b      	lsrs	r3, r3, #8
 800a71a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	1c5a      	adds	r2, r3, #1
 800a720:	607a      	str	r2, [r7, #4]
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	b2d2      	uxtb	r2, r2
 800a726:	701a      	strb	r2, [r3, #0]
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00d      	beq.n	800a76a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	1c53      	adds	r3, r2, #1
 800a752:	613b      	str	r3, [r7, #16]
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	1c59      	adds	r1, r3, #1
 800a758:	6179      	str	r1, [r7, #20]
 800a75a:	7812      	ldrb	r2, [r2, #0]
 800a75c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3b01      	subs	r3, #1
 800a762:	607b      	str	r3, [r7, #4]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1f1      	bne.n	800a74e <mem_cpy+0x1a>
	}
}
 800a76a:	bf00      	nop
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a776:	b480      	push	{r7}
 800a778:	b087      	sub	sp, #28
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	617a      	str	r2, [r7, #20]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	b2d2      	uxtb	r2, r2
 800a790:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3b01      	subs	r3, #1
 800a796:	607b      	str	r3, [r7, #4]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1f3      	bne.n	800a786 <mem_set+0x10>
}
 800a79e:	bf00      	nop
 800a7a0:	371c      	adds	r7, #28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a7aa:	b480      	push	{r7}
 800a7ac:	b089      	sub	sp, #36	; 0x24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	61fb      	str	r3, [r7, #28]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	1c5a      	adds	r2, r3, #1
 800a7c6:	61fa      	str	r2, [r7, #28]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	1c5a      	adds	r2, r3, #1
 800a7d0:	61ba      	str	r2, [r7, #24]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	1acb      	subs	r3, r1, r3
 800a7d6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	607b      	str	r3, [r7, #4]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d002      	beq.n	800a7ea <mem_cmp+0x40>
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0eb      	beq.n	800a7c2 <mem_cmp+0x18>

	return r;
 800a7ea:	697b      	ldr	r3, [r7, #20]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3724      	adds	r7, #36	; 0x24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a802:	e002      	b.n	800a80a <chk_chr+0x12>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3301      	adds	r3, #1
 800a808:	607b      	str	r3, [r7, #4]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d005      	beq.n	800a81e <chk_chr+0x26>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d1f2      	bne.n	800a804 <chk_chr+0xc>
	return *str;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	781b      	ldrb	r3, [r3, #0]
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a83a:	2300      	movs	r3, #0
 800a83c:	60bb      	str	r3, [r7, #8]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	e029      	b.n	800a898 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a844:	4a27      	ldr	r2, [pc, #156]	; (800a8e4 <chk_lock+0xb4>)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	011b      	lsls	r3, r3, #4
 800a84a:	4413      	add	r3, r2
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d01d      	beq.n	800a88e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a852:	4a24      	ldr	r2, [pc, #144]	; (800a8e4 <chk_lock+0xb4>)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	4413      	add	r3, r2
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	429a      	cmp	r2, r3
 800a862:	d116      	bne.n	800a892 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a864:	4a1f      	ldr	r2, [pc, #124]	; (800a8e4 <chk_lock+0xb4>)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	011b      	lsls	r3, r3, #4
 800a86a:	4413      	add	r3, r2
 800a86c:	3304      	adds	r3, #4
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a874:	429a      	cmp	r2, r3
 800a876:	d10c      	bne.n	800a892 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a878:	4a1a      	ldr	r2, [pc, #104]	; (800a8e4 <chk_lock+0xb4>)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	011b      	lsls	r3, r3, #4
 800a87e:	4413      	add	r3, r2
 800a880:	3308      	adds	r3, #8
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a888:	429a      	cmp	r2, r3
 800a88a:	d102      	bne.n	800a892 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a88c:	e007      	b.n	800a89e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a88e:	2301      	movs	r3, #1
 800a890:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3301      	adds	r3, #1
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d9d2      	bls.n	800a844 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d109      	bne.n	800a8b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d102      	bne.n	800a8b0 <chk_lock+0x80>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d101      	bne.n	800a8b4 <chk_lock+0x84>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	e010      	b.n	800a8d6 <chk_lock+0xa6>
 800a8b4:	2312      	movs	r3, #18
 800a8b6:	e00e      	b.n	800a8d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d108      	bne.n	800a8d0 <chk_lock+0xa0>
 800a8be:	4a09      	ldr	r2, [pc, #36]	; (800a8e4 <chk_lock+0xb4>)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	011b      	lsls	r3, r3, #4
 800a8c4:	4413      	add	r3, r2
 800a8c6:	330c      	adds	r3, #12
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ce:	d101      	bne.n	800a8d4 <chk_lock+0xa4>
 800a8d0:	2310      	movs	r3, #16
 800a8d2:	e000      	b.n	800a8d6 <chk_lock+0xa6>
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	200002fc 	.word	0x200002fc

0800a8e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	607b      	str	r3, [r7, #4]
 800a8f2:	e002      	b.n	800a8fa <enq_lock+0x12>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	607b      	str	r3, [r7, #4]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d806      	bhi.n	800a90e <enq_lock+0x26>
 800a900:	4a09      	ldr	r2, [pc, #36]	; (800a928 <enq_lock+0x40>)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	011b      	lsls	r3, r3, #4
 800a906:	4413      	add	r3, r2
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d1f2      	bne.n	800a8f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b02      	cmp	r3, #2
 800a912:	bf14      	ite	ne
 800a914:	2301      	movne	r3, #1
 800a916:	2300      	moveq	r3, #0
 800a918:	b2db      	uxtb	r3, r3
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	200002fc 	.word	0x200002fc

0800a92c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a936:	2300      	movs	r3, #0
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	e01f      	b.n	800a97c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a93c:	4a41      	ldr	r2, [pc, #260]	; (800aa44 <inc_lock+0x118>)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	011b      	lsls	r3, r3, #4
 800a942:	4413      	add	r3, r2
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d113      	bne.n	800a976 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a94e:	4a3d      	ldr	r2, [pc, #244]	; (800aa44 <inc_lock+0x118>)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	011b      	lsls	r3, r3, #4
 800a954:	4413      	add	r3, r2
 800a956:	3304      	adds	r3, #4
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a95e:	429a      	cmp	r2, r3
 800a960:	d109      	bne.n	800a976 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a962:	4a38      	ldr	r2, [pc, #224]	; (800aa44 <inc_lock+0x118>)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	011b      	lsls	r3, r3, #4
 800a968:	4413      	add	r3, r2
 800a96a:	3308      	adds	r3, #8
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a972:	429a      	cmp	r2, r3
 800a974:	d006      	beq.n	800a984 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3301      	adds	r3, #1
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d9dc      	bls.n	800a93c <inc_lock+0x10>
 800a982:	e000      	b.n	800a986 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a984:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d132      	bne.n	800a9f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	e002      	b.n	800a998 <inc_lock+0x6c>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3301      	adds	r3, #1
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d806      	bhi.n	800a9ac <inc_lock+0x80>
 800a99e:	4a29      	ldr	r2, [pc, #164]	; (800aa44 <inc_lock+0x118>)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	011b      	lsls	r3, r3, #4
 800a9a4:	4413      	add	r3, r2
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1f2      	bne.n	800a992 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d101      	bne.n	800a9b6 <inc_lock+0x8a>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e040      	b.n	800aa38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	4922      	ldr	r1, [pc, #136]	; (800aa44 <inc_lock+0x118>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	011b      	lsls	r3, r3, #4
 800a9c0:	440b      	add	r3, r1
 800a9c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	491e      	ldr	r1, [pc, #120]	; (800aa44 <inc_lock+0x118>)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	440b      	add	r3, r1
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	695a      	ldr	r2, [r3, #20]
 800a9d8:	491a      	ldr	r1, [pc, #104]	; (800aa44 <inc_lock+0x118>)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	011b      	lsls	r3, r3, #4
 800a9de:	440b      	add	r3, r1
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a9e4:	4a17      	ldr	r2, [pc, #92]	; (800aa44 <inc_lock+0x118>)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	011b      	lsls	r3, r3, #4
 800a9ea:	4413      	add	r3, r2
 800a9ec:	330c      	adds	r3, #12
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <inc_lock+0xe0>
 800a9f8:	4a12      	ldr	r2, [pc, #72]	; (800aa44 <inc_lock+0x118>)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	011b      	lsls	r3, r3, #4
 800a9fe:	4413      	add	r3, r2
 800aa00:	330c      	adds	r3, #12
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <inc_lock+0xe0>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e015      	b.n	800aa38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d108      	bne.n	800aa24 <inc_lock+0xf8>
 800aa12:	4a0c      	ldr	r2, [pc, #48]	; (800aa44 <inc_lock+0x118>)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	011b      	lsls	r3, r3, #4
 800aa18:	4413      	add	r3, r2
 800aa1a:	330c      	adds	r3, #12
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	e001      	b.n	800aa28 <inc_lock+0xfc>
 800aa24:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa28:	4906      	ldr	r1, [pc, #24]	; (800aa44 <inc_lock+0x118>)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	011b      	lsls	r3, r3, #4
 800aa2e:	440b      	add	r3, r1
 800aa30:	330c      	adds	r3, #12
 800aa32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3301      	adds	r3, #1
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	200002fc 	.word	0x200002fc

0800aa48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	607b      	str	r3, [r7, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d825      	bhi.n	800aaa8 <dec_lock+0x60>
		n = Files[i].ctr;
 800aa5c:	4a17      	ldr	r2, [pc, #92]	; (800aabc <dec_lock+0x74>)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	011b      	lsls	r3, r3, #4
 800aa62:	4413      	add	r3, r2
 800aa64:	330c      	adds	r3, #12
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aa6a:	89fb      	ldrh	r3, [r7, #14]
 800aa6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa70:	d101      	bne.n	800aa76 <dec_lock+0x2e>
 800aa72:	2300      	movs	r3, #0
 800aa74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aa76:	89fb      	ldrh	r3, [r7, #14]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <dec_lock+0x3a>
 800aa7c:	89fb      	ldrh	r3, [r7, #14]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aa82:	4a0e      	ldr	r2, [pc, #56]	; (800aabc <dec_lock+0x74>)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	011b      	lsls	r3, r3, #4
 800aa88:	4413      	add	r3, r2
 800aa8a:	330c      	adds	r3, #12
 800aa8c:	89fa      	ldrh	r2, [r7, #14]
 800aa8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aa90:	89fb      	ldrh	r3, [r7, #14]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d105      	bne.n	800aaa2 <dec_lock+0x5a>
 800aa96:	4a09      	ldr	r2, [pc, #36]	; (800aabc <dec_lock+0x74>)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	011b      	lsls	r3, r3, #4
 800aa9c:	4413      	add	r3, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	737b      	strb	r3, [r7, #13]
 800aaa6:	e001      	b.n	800aaac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aaac:	7b7b      	ldrb	r3, [r7, #13]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	200002fc 	.word	0x200002fc

0800aac0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aac8:	2300      	movs	r3, #0
 800aaca:	60fb      	str	r3, [r7, #12]
 800aacc:	e010      	b.n	800aaf0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aace:	4a0d      	ldr	r2, [pc, #52]	; (800ab04 <clear_lock+0x44>)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	011b      	lsls	r3, r3, #4
 800aad4:	4413      	add	r3, r2
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d105      	bne.n	800aaea <clear_lock+0x2a>
 800aade:	4a09      	ldr	r2, [pc, #36]	; (800ab04 <clear_lock+0x44>)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	4413      	add	r3, r2
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3301      	adds	r3, #1
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d9eb      	bls.n	800aace <clear_lock+0xe>
	}
}
 800aaf6:	bf00      	nop
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	200002fc 	.word	0x200002fc

0800ab08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	78db      	ldrb	r3, [r3, #3]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d034      	beq.n	800ab86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	7858      	ldrb	r0, [r3, #1]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	f7ff fd40 	bl	800a5b4 <disk_write>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d002      	beq.n	800ab40 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	73fb      	strb	r3, [r7, #15]
 800ab3e:	e022      	b.n	800ab86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	1ad2      	subs	r2, r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d217      	bcs.n	800ab86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	789b      	ldrb	r3, [r3, #2]
 800ab5a:	613b      	str	r3, [r7, #16]
 800ab5c:	e010      	b.n	800ab80 <sync_window+0x78>
					wsect += fs->fsize;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	4413      	add	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	7858      	ldrb	r0, [r3, #1]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ab72:	2301      	movs	r3, #1
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	f7ff fd1d 	bl	800a5b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	613b      	str	r3, [r7, #16]
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d8eb      	bhi.n	800ab5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d01b      	beq.n	800abe0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff ffad 	bl	800ab08 <sync_window>
 800abae:	4603      	mov	r3, r0
 800abb0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d113      	bne.n	800abe0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7858      	ldrb	r0, [r3, #1]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800abc2:	2301      	movs	r3, #1
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	f7ff fcd5 	bl	800a574 <disk_read>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800abd0:	f04f 33ff 	mov.w	r3, #4294967295
 800abd4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
	...

0800abec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7ff ff87 	bl	800ab08 <sync_window>
 800abfa:	4603      	mov	r3, r0
 800abfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d159      	bne.n	800acb8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d149      	bne.n	800aca0 <sync_fs+0xb4>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	791b      	ldrb	r3, [r3, #4]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d145      	bne.n	800aca0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	899b      	ldrh	r3, [r3, #12]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	2100      	movs	r1, #0
 800ac22:	f7ff fda8 	bl	800a776 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	333c      	adds	r3, #60	; 0x3c
 800ac2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7ff fd37 	bl	800a6a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	333c      	adds	r3, #60	; 0x3c
 800ac3c:	4921      	ldr	r1, [pc, #132]	; (800acc4 <sync_fs+0xd8>)
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff fd4c 	bl	800a6dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	333c      	adds	r3, #60	; 0x3c
 800ac48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ac4c:	491e      	ldr	r1, [pc, #120]	; (800acc8 <sync_fs+0xdc>)
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7ff fd44 	bl	800a6dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	333c      	adds	r3, #60	; 0x3c
 800ac58:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	4619      	mov	r1, r3
 800ac62:	4610      	mov	r0, r2
 800ac64:	f7ff fd3a 	bl	800a6dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	333c      	adds	r3, #60	; 0x3c
 800ac6c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	4619      	mov	r1, r3
 800ac76:	4610      	mov	r0, r2
 800ac78:	f7ff fd30 	bl	800a6dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	7858      	ldrb	r0, [r3, #1]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac94:	2301      	movs	r3, #1
 800ac96:	f7ff fc8d 	bl	800a5b4 <disk_write>
			fs->fsi_flag = 0;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	785b      	ldrb	r3, [r3, #1]
 800aca4:	2200      	movs	r2, #0
 800aca6:	2100      	movs	r1, #0
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7ff fca3 	bl	800a5f4 <disk_ioctl>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <sync_fs+0xcc>
 800acb4:	2301      	movs	r3, #1
 800acb6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	41615252 	.word	0x41615252
 800acc8:	61417272 	.word	0x61417272

0800accc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	3b02      	subs	r3, #2
 800acda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a1b      	ldr	r3, [r3, #32]
 800ace0:	3b02      	subs	r3, #2
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d301      	bcc.n	800acec <clust2sect+0x20>
 800ace8:	2300      	movs	r3, #0
 800acea:	e008      	b.n	800acfe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	895b      	ldrh	r3, [r3, #10]
 800acf0:	461a      	mov	r2, r3
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	fb03 f202 	mul.w	r2, r3, r2
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfc:	4413      	add	r3, r2
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b086      	sub	sp, #24
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d904      	bls.n	800ad2a <get_fat+0x20>
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d302      	bcc.n	800ad30 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	617b      	str	r3, [r7, #20]
 800ad2e:	e0b7      	b.n	800aea0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ad30:	f04f 33ff 	mov.w	r3, #4294967295
 800ad34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d05a      	beq.n	800adf4 <get_fat+0xea>
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d07d      	beq.n	800ae3e <get_fat+0x134>
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	f040 80a2 	bne.w	800ae8c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	085b      	lsrs	r3, r3, #1
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	899b      	ldrh	r3, [r3, #12]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad66:	4413      	add	r3, r2
 800ad68:	4619      	mov	r1, r3
 800ad6a:	6938      	ldr	r0, [r7, #16]
 800ad6c:	f7ff ff10 	bl	800ab90 <move_window>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f040 808d 	bne.w	800ae92 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	60fa      	str	r2, [r7, #12]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	8992      	ldrh	r2, [r2, #12]
 800ad82:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad86:	fb02 f201 	mul.w	r2, r2, r1
 800ad8a:	1a9b      	subs	r3, r3, r2
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	899b      	ldrh	r3, [r3, #12]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ada6:	4413      	add	r3, r2
 800ada8:	4619      	mov	r1, r3
 800adaa:	6938      	ldr	r0, [r7, #16]
 800adac:	f7ff fef0 	bl	800ab90 <move_window>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d16f      	bne.n	800ae96 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	899b      	ldrh	r3, [r3, #12]
 800adba:	461a      	mov	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800adc2:	fb02 f201 	mul.w	r2, r2, r1
 800adc6:	1a9b      	subs	r3, r3, r2
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	4413      	add	r3, r2
 800adcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800add0:	021b      	lsls	r3, r3, #8
 800add2:	461a      	mov	r2, r3
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	4313      	orrs	r3, r2
 800add8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <get_fat+0xe0>
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	091b      	lsrs	r3, r3, #4
 800ade8:	e002      	b.n	800adf0 <get_fat+0xe6>
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adf0:	617b      	str	r3, [r7, #20]
			break;
 800adf2:	e055      	b.n	800aea0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	899b      	ldrh	r3, [r3, #12]
 800adfc:	085b      	lsrs	r3, r3, #1
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	4619      	mov	r1, r3
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae08:	4413      	add	r3, r2
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6938      	ldr	r0, [r7, #16]
 800ae0e:	f7ff febf 	bl	800ab90 <move_window>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d140      	bne.n	800ae9a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	005b      	lsls	r3, r3, #1
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	8992      	ldrh	r2, [r2, #12]
 800ae26:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae2a:	fb02 f200 	mul.w	r2, r2, r0
 800ae2e:	1a9b      	subs	r3, r3, r2
 800ae30:	440b      	add	r3, r1
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fbfc 	bl	800a630 <ld_word>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	617b      	str	r3, [r7, #20]
			break;
 800ae3c:	e030      	b.n	800aea0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	899b      	ldrh	r3, [r3, #12]
 800ae46:	089b      	lsrs	r3, r3, #2
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae52:	4413      	add	r3, r2
 800ae54:	4619      	mov	r1, r3
 800ae56:	6938      	ldr	r0, [r7, #16]
 800ae58:	f7ff fe9a 	bl	800ab90 <move_window>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d11d      	bne.n	800ae9e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	8992      	ldrh	r2, [r2, #12]
 800ae70:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae74:	fb02 f200 	mul.w	r2, r2, r0
 800ae78:	1a9b      	subs	r3, r3, r2
 800ae7a:	440b      	add	r3, r1
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7ff fbef 	bl	800a660 <ld_dword>
 800ae82:	4603      	mov	r3, r0
 800ae84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ae88:	617b      	str	r3, [r7, #20]
			break;
 800ae8a:	e009      	b.n	800aea0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	617b      	str	r3, [r7, #20]
 800ae90:	e006      	b.n	800aea0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae92:	bf00      	nop
 800ae94:	e004      	b.n	800aea0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae96:	bf00      	nop
 800ae98:	e002      	b.n	800aea0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae9a:	bf00      	nop
 800ae9c:	e000      	b.n	800aea0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae9e:	bf00      	nop
		}
	}

	return val;
 800aea0:	697b      	ldr	r3, [r7, #20]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aeaa:	b590      	push	{r4, r7, lr}
 800aeac:	b089      	sub	sp, #36	; 0x24
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	60f8      	str	r0, [r7, #12]
 800aeb2:	60b9      	str	r1, [r7, #8]
 800aeb4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	f240 8106 	bls.w	800b0ce <put_fat+0x224>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	f080 8100 	bcs.w	800b0ce <put_fat+0x224>
		switch (fs->fs_type) {
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	f000 8088 	beq.w	800afe8 <put_fat+0x13e>
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	f000 80b0 	beq.w	800b03e <put_fat+0x194>
 800aede:	2b01      	cmp	r3, #1
 800aee0:	f040 80f5 	bne.w	800b0ce <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	61bb      	str	r3, [r7, #24]
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	085b      	lsrs	r3, r3, #1
 800aeec:	69ba      	ldr	r2, [r7, #24]
 800aeee:	4413      	add	r3, r2
 800aef0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	899b      	ldrh	r3, [r3, #12]
 800aefa:	4619      	mov	r1, r3
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	fbb3 f3f1 	udiv	r3, r3, r1
 800af02:	4413      	add	r3, r2
 800af04:	4619      	mov	r1, r3
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f7ff fe42 	bl	800ab90 <move_window>
 800af0c:	4603      	mov	r3, r0
 800af0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af10:	7ffb      	ldrb	r3, [r7, #31]
 800af12:	2b00      	cmp	r3, #0
 800af14:	f040 80d4 	bne.w	800b0c0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	1c5a      	adds	r2, r3, #1
 800af22:	61ba      	str	r2, [r7, #24]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	8992      	ldrh	r2, [r2, #12]
 800af28:	fbb3 f0f2 	udiv	r0, r3, r2
 800af2c:	fb02 f200 	mul.w	r2, r2, r0
 800af30:	1a9b      	subs	r3, r3, r2
 800af32:	440b      	add	r3, r1
 800af34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00d      	beq.n	800af5c <put_fat+0xb2>
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	b25b      	sxtb	r3, r3
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	b25a      	sxtb	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	b25b      	sxtb	r3, r3
 800af54:	4313      	orrs	r3, r2
 800af56:	b25b      	sxtb	r3, r3
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	e001      	b.n	800af60 <put_fat+0xb6>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2201      	movs	r2, #1
 800af68:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	899b      	ldrh	r3, [r3, #12]
 800af72:	4619      	mov	r1, r3
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	fbb3 f3f1 	udiv	r3, r3, r1
 800af7a:	4413      	add	r3, r2
 800af7c:	4619      	mov	r1, r3
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7ff fe06 	bl	800ab90 <move_window>
 800af84:	4603      	mov	r3, r0
 800af86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af88:	7ffb      	ldrb	r3, [r7, #31]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f040 809a 	bne.w	800b0c4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	899b      	ldrh	r3, [r3, #12]
 800af9a:	461a      	mov	r2, r3
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800afa2:	fb02 f200 	mul.w	r2, r2, r0
 800afa6:	1a9b      	subs	r3, r3, r2
 800afa8:	440b      	add	r3, r1
 800afaa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <put_fat+0x114>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	091b      	lsrs	r3, r3, #4
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	e00e      	b.n	800afdc <put_fat+0x132>
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	b25b      	sxtb	r3, r3
 800afc4:	f023 030f 	bic.w	r3, r3, #15
 800afc8:	b25a      	sxtb	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	0a1b      	lsrs	r3, r3, #8
 800afce:	b25b      	sxtb	r3, r3
 800afd0:	f003 030f 	and.w	r3, r3, #15
 800afd4:	b25b      	sxtb	r3, r3
 800afd6:	4313      	orrs	r3, r2
 800afd8:	b25b      	sxtb	r3, r3
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	70da      	strb	r2, [r3, #3]
			break;
 800afe6:	e072      	b.n	800b0ce <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	899b      	ldrh	r3, [r3, #12]
 800aff0:	085b      	lsrs	r3, r3, #1
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	4619      	mov	r1, r3
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	fbb3 f3f1 	udiv	r3, r3, r1
 800affc:	4413      	add	r3, r2
 800affe:	4619      	mov	r1, r3
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7ff fdc5 	bl	800ab90 <move_window>
 800b006:	4603      	mov	r3, r0
 800b008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b00a:	7ffb      	ldrb	r3, [r7, #31]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d15b      	bne.n	800b0c8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	8992      	ldrh	r2, [r2, #12]
 800b01e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b022:	fb02 f200 	mul.w	r2, r2, r0
 800b026:	1a9b      	subs	r3, r3, r2
 800b028:	440b      	add	r3, r1
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	b292      	uxth	r2, r2
 800b02e:	4611      	mov	r1, r2
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fb38 	bl	800a6a6 <st_word>
			fs->wflag = 1;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2201      	movs	r2, #1
 800b03a:	70da      	strb	r2, [r3, #3]
			break;
 800b03c:	e047      	b.n	800b0ce <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	899b      	ldrh	r3, [r3, #12]
 800b046:	089b      	lsrs	r3, r3, #2
 800b048:	b29b      	uxth	r3, r3
 800b04a:	4619      	mov	r1, r3
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b052:	4413      	add	r3, r2
 800b054:	4619      	mov	r1, r3
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f7ff fd9a 	bl	800ab90 <move_window>
 800b05c:	4603      	mov	r3, r0
 800b05e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b060:	7ffb      	ldrb	r3, [r7, #31]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d132      	bne.n	800b0cc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	8992      	ldrh	r2, [r2, #12]
 800b07a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b07e:	fb02 f200 	mul.w	r2, r2, r0
 800b082:	1a9b      	subs	r3, r3, r2
 800b084:	440b      	add	r3, r1
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff faea 	bl	800a660 <ld_dword>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b092:	4323      	orrs	r3, r4
 800b094:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	8992      	ldrh	r2, [r2, #12]
 800b0a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0a8:	fb02 f200 	mul.w	r2, r2, r0
 800b0ac:	1a9b      	subs	r3, r3, r2
 800b0ae:	440b      	add	r3, r1
 800b0b0:	6879      	ldr	r1, [r7, #4]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff fb12 	bl	800a6dc <st_dword>
			fs->wflag = 1;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	70da      	strb	r2, [r3, #3]
			break;
 800b0be:	e006      	b.n	800b0ce <put_fat+0x224>
			if (res != FR_OK) break;
 800b0c0:	bf00      	nop
 800b0c2:	e004      	b.n	800b0ce <put_fat+0x224>
			if (res != FR_OK) break;
 800b0c4:	bf00      	nop
 800b0c6:	e002      	b.n	800b0ce <put_fat+0x224>
			if (res != FR_OK) break;
 800b0c8:	bf00      	nop
 800b0ca:	e000      	b.n	800b0ce <put_fat+0x224>
			if (res != FR_OK) break;
 800b0cc:	bf00      	nop
		}
	}
	return res;
 800b0ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3724      	adds	r7, #36	; 0x24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd90      	pop	{r4, r7, pc}

0800b0d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b088      	sub	sp, #32
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d904      	bls.n	800b0fe <remove_chain+0x26>
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d301      	bcc.n	800b102 <remove_chain+0x2a>
 800b0fe:	2302      	movs	r3, #2
 800b100:	e04b      	b.n	800b19a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00c      	beq.n	800b122 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b108:	f04f 32ff 	mov.w	r2, #4294967295
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	69b8      	ldr	r0, [r7, #24]
 800b110:	f7ff fecb 	bl	800aeaa <put_fat>
 800b114:	4603      	mov	r3, r0
 800b116:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b118:	7ffb      	ldrb	r3, [r7, #31]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <remove_chain+0x4a>
 800b11e:	7ffb      	ldrb	r3, [r7, #31]
 800b120:	e03b      	b.n	800b19a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7ff fdf0 	bl	800ad0a <get_fat>
 800b12a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d031      	beq.n	800b196 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d101      	bne.n	800b13c <remove_chain+0x64>
 800b138:	2302      	movs	r3, #2
 800b13a:	e02e      	b.n	800b19a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b142:	d101      	bne.n	800b148 <remove_chain+0x70>
 800b144:	2301      	movs	r3, #1
 800b146:	e028      	b.n	800b19a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b148:	2200      	movs	r2, #0
 800b14a:	68b9      	ldr	r1, [r7, #8]
 800b14c:	69b8      	ldr	r0, [r7, #24]
 800b14e:	f7ff feac 	bl	800aeaa <put_fat>
 800b152:	4603      	mov	r3, r0
 800b154:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b156:	7ffb      	ldrb	r3, [r7, #31]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <remove_chain+0x88>
 800b15c:	7ffb      	ldrb	r3, [r7, #31]
 800b15e:	e01c      	b.n	800b19a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	699a      	ldr	r2, [r3, #24]
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	3b02      	subs	r3, #2
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d20b      	bcs.n	800b186 <remove_chain+0xae>
			fs->free_clst++;
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	791b      	ldrb	r3, [r3, #4]
 800b17c:	f043 0301 	orr.w	r3, r3, #1
 800b180:	b2da      	uxtb	r2, r3
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	429a      	cmp	r2, r3
 800b192:	d3c6      	bcc.n	800b122 <remove_chain+0x4a>
 800b194:	e000      	b.n	800b198 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b196:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3720      	adds	r7, #32
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b088      	sub	sp, #32
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10d      	bne.n	800b1d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d004      	beq.n	800b1ce <create_chain+0x2c>
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	6a1b      	ldr	r3, [r3, #32]
 800b1c8:	69ba      	ldr	r2, [r7, #24]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d31b      	bcc.n	800b206 <create_chain+0x64>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	61bb      	str	r3, [r7, #24]
 800b1d2:	e018      	b.n	800b206 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7ff fd97 	bl	800ad0a <get_fat>
 800b1dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d801      	bhi.n	800b1e8 <create_chain+0x46>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e070      	b.n	800b2ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ee:	d101      	bne.n	800b1f4 <create_chain+0x52>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	e06a      	b.n	800b2ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d201      	bcs.n	800b202 <create_chain+0x60>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	e063      	b.n	800b2ca <create_chain+0x128>
		scl = clst;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	3301      	adds	r3, #1
 800b20e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	6a1b      	ldr	r3, [r3, #32]
 800b214:	69fa      	ldr	r2, [r7, #28]
 800b216:	429a      	cmp	r2, r3
 800b218:	d307      	bcc.n	800b22a <create_chain+0x88>
				ncl = 2;
 800b21a:	2302      	movs	r3, #2
 800b21c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b21e:	69fa      	ldr	r2, [r7, #28]
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	429a      	cmp	r2, r3
 800b224:	d901      	bls.n	800b22a <create_chain+0x88>
 800b226:	2300      	movs	r3, #0
 800b228:	e04f      	b.n	800b2ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b22a:	69f9      	ldr	r1, [r7, #28]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff fd6c 	bl	800ad0a <get_fat>
 800b232:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00e      	beq.n	800b258 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d003      	beq.n	800b248 <create_chain+0xa6>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b246:	d101      	bne.n	800b24c <create_chain+0xaa>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	e03e      	b.n	800b2ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b24c:	69fa      	ldr	r2, [r7, #28]
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	429a      	cmp	r2, r3
 800b252:	d1da      	bne.n	800b20a <create_chain+0x68>
 800b254:	2300      	movs	r3, #0
 800b256:	e038      	b.n	800b2ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b258:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b25a:	f04f 32ff 	mov.w	r2, #4294967295
 800b25e:	69f9      	ldr	r1, [r7, #28]
 800b260:	6938      	ldr	r0, [r7, #16]
 800b262:	f7ff fe22 	bl	800aeaa <put_fat>
 800b266:	4603      	mov	r3, r0
 800b268:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b26a:	7dfb      	ldrb	r3, [r7, #23]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d109      	bne.n	800b284 <create_chain+0xe2>
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d006      	beq.n	800b284 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b276:	69fa      	ldr	r2, [r7, #28]
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6938      	ldr	r0, [r7, #16]
 800b27c:	f7ff fe15 	bl	800aeaa <put_fat>
 800b280:	4603      	mov	r3, r0
 800b282:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d116      	bne.n	800b2b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	69fa      	ldr	r2, [r7, #28]
 800b28e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	699a      	ldr	r2, [r3, #24]
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	3b02      	subs	r3, #2
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d804      	bhi.n	800b2a8 <create_chain+0x106>
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	1e5a      	subs	r2, r3, #1
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	791b      	ldrb	r3, [r3, #4]
 800b2ac:	f043 0301 	orr.w	r3, r3, #1
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	711a      	strb	r2, [r3, #4]
 800b2b6:	e007      	b.n	800b2c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d102      	bne.n	800b2c4 <create_chain+0x122>
 800b2be:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c2:	e000      	b.n	800b2c6 <create_chain+0x124>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b2c8:	69fb      	ldr	r3, [r7, #28]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3720      	adds	r7, #32
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	b087      	sub	sp, #28
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	899b      	ldrh	r3, [r3, #12]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	8952      	ldrh	r2, [r2, #10]
 800b2fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	1d1a      	adds	r2, r3, #4
 800b304:	613a      	str	r2, [r7, #16]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <clmt_clust+0x42>
 800b310:	2300      	movs	r3, #0
 800b312:	e010      	b.n	800b336 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b314:	697a      	ldr	r2, [r7, #20]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d307      	bcc.n	800b32c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	3304      	adds	r3, #4
 800b328:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b32a:	e7e9      	b.n	800b300 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b32c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	4413      	add	r3, r2
}
 800b336:	4618      	mov	r0, r3
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b086      	sub	sp, #24
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b358:	d204      	bcs.n	800b364 <dir_sdi+0x22>
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	f003 031f 	and.w	r3, r3, #31
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b364:	2302      	movs	r3, #2
 800b366:	e071      	b.n	800b44c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d106      	bne.n	800b388 <dir_sdi+0x46>
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d902      	bls.n	800b388 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b386:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10c      	bne.n	800b3a8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	095b      	lsrs	r3, r3, #5
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	8912      	ldrh	r2, [r2, #8]
 800b396:	4293      	cmp	r3, r2
 800b398:	d301      	bcc.n	800b39e <dir_sdi+0x5c>
 800b39a:	2302      	movs	r3, #2
 800b39c:	e056      	b.n	800b44c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	61da      	str	r2, [r3, #28]
 800b3a6:	e02d      	b.n	800b404 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	895b      	ldrh	r3, [r3, #10]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	899b      	ldrh	r3, [r3, #12]
 800b3b2:	fb03 f302 	mul.w	r3, r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b3b8:	e019      	b.n	800b3ee <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6979      	ldr	r1, [r7, #20]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff fca3 	bl	800ad0a <get_fat>
 800b3c4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3cc:	d101      	bne.n	800b3d2 <dir_sdi+0x90>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e03c      	b.n	800b44c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d904      	bls.n	800b3e2 <dir_sdi+0xa0>
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d301      	bcc.n	800b3e6 <dir_sdi+0xa4>
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	e032      	b.n	800b44c <dir_sdi+0x10a>
			ofs -= csz;
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d2e1      	bcs.n	800b3ba <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b3f6:	6979      	ldr	r1, [r7, #20]
 800b3f8:	6938      	ldr	r0, [r7, #16]
 800b3fa:	f7ff fc67 	bl	800accc <clust2sect>
 800b3fe:	4602      	mov	r2, r0
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <dir_sdi+0xd4>
 800b412:	2302      	movs	r3, #2
 800b414:	e01a      	b.n	800b44c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	69da      	ldr	r2, [r3, #28]
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	899b      	ldrh	r3, [r3, #12]
 800b41e:	4619      	mov	r1, r3
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	fbb3 f3f1 	udiv	r3, r3, r1
 800b426:	441a      	add	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	899b      	ldrh	r3, [r3, #12]
 800b436:	461a      	mov	r2, r3
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b43e:	fb02 f200 	mul.w	r2, r2, r0
 800b442:	1a9b      	subs	r3, r3, r2
 800b444:	18ca      	adds	r2, r1, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3718      	adds	r7, #24
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	3320      	adds	r3, #32
 800b46a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	69db      	ldr	r3, [r3, #28]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <dir_next+0x28>
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b47a:	d301      	bcc.n	800b480 <dir_next+0x2c>
 800b47c:	2304      	movs	r3, #4
 800b47e:	e0bb      	b.n	800b5f8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	899b      	ldrh	r3, [r3, #12]
 800b484:	461a      	mov	r2, r3
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	fbb3 f1f2 	udiv	r1, r3, r2
 800b48c:	fb02 f201 	mul.w	r2, r2, r1
 800b490:	1a9b      	subs	r3, r3, r2
 800b492:	2b00      	cmp	r3, #0
 800b494:	f040 809d 	bne.w	800b5d2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	69db      	ldr	r3, [r3, #28]
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10b      	bne.n	800b4c2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	095b      	lsrs	r3, r3, #5
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	8912      	ldrh	r2, [r2, #8]
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	f0c0 808d 	bcc.w	800b5d2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	61da      	str	r2, [r3, #28]
 800b4be:	2304      	movs	r3, #4
 800b4c0:	e09a      	b.n	800b5f8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	899b      	ldrh	r3, [r3, #12]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	8952      	ldrh	r2, [r2, #10]
 800b4d2:	3a01      	subs	r2, #1
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d17b      	bne.n	800b5d2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	f7ff fc11 	bl	800ad0a <get_fat>
 800b4e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d801      	bhi.n	800b4f4 <dir_next+0xa0>
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	e081      	b.n	800b5f8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fa:	d101      	bne.n	800b500 <dir_next+0xac>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e07b      	b.n	800b5f8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6a1b      	ldr	r3, [r3, #32]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	429a      	cmp	r2, r3
 800b508:	d359      	bcc.n	800b5be <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d104      	bne.n	800b51a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	61da      	str	r2, [r3, #28]
 800b516:	2304      	movs	r3, #4
 800b518:	e06e      	b.n	800b5f8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	4619      	mov	r1, r3
 800b522:	4610      	mov	r0, r2
 800b524:	f7ff fe3d 	bl	800b1a2 <create_chain>
 800b528:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d101      	bne.n	800b534 <dir_next+0xe0>
 800b530:	2307      	movs	r3, #7
 800b532:	e061      	b.n	800b5f8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d101      	bne.n	800b53e <dir_next+0xea>
 800b53a:	2302      	movs	r3, #2
 800b53c:	e05c      	b.n	800b5f8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b544:	d101      	bne.n	800b54a <dir_next+0xf6>
 800b546:	2301      	movs	r3, #1
 800b548:	e056      	b.n	800b5f8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7ff fadc 	bl	800ab08 <sync_window>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <dir_next+0x106>
 800b556:	2301      	movs	r3, #1
 800b558:	e04e      	b.n	800b5f8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	899b      	ldrh	r3, [r3, #12]
 800b564:	461a      	mov	r2, r3
 800b566:	2100      	movs	r1, #0
 800b568:	f7ff f905 	bl	800a776 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b56c:	2300      	movs	r3, #0
 800b56e:	613b      	str	r3, [r7, #16]
 800b570:	6979      	ldr	r1, [r7, #20]
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7ff fbaa 	bl	800accc <clust2sect>
 800b578:	4602      	mov	r2, r0
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	639a      	str	r2, [r3, #56]	; 0x38
 800b57e:	e012      	b.n	800b5a6 <dir_next+0x152>
						fs->wflag = 1;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2201      	movs	r2, #1
 800b584:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7ff fabe 	bl	800ab08 <sync_window>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <dir_next+0x142>
 800b592:	2301      	movs	r3, #1
 800b594:	e030      	b.n	800b5f8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	3301      	adds	r3, #1
 800b59a:	613b      	str	r3, [r7, #16]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a0:	1c5a      	adds	r2, r3, #1
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	639a      	str	r2, [r3, #56]	; 0x38
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	895b      	ldrh	r3, [r3, #10]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d3e6      	bcc.n	800b580 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	1ad2      	subs	r2, r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b5c4:	6979      	ldr	r1, [r7, #20]
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f7ff fb80 	bl	800accc <clust2sect>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	899b      	ldrh	r3, [r3, #12]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5ea:	fb02 f200 	mul.w	r2, r2, r0
 800b5ee:	1a9b      	subs	r3, r3, r2
 800b5f0:	18ca      	adds	r2, r1, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b610:	2100      	movs	r1, #0
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7ff fe95 	bl	800b342 <dir_sdi>
 800b618:	4603      	mov	r3, r0
 800b61a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b61c:	7dfb      	ldrb	r3, [r7, #23]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d12b      	bne.n	800b67a <dir_alloc+0x7a>
		n = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	69db      	ldr	r3, [r3, #28]
 800b62a:	4619      	mov	r1, r3
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff faaf 	bl	800ab90 <move_window>
 800b632:	4603      	mov	r3, r0
 800b634:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b636:	7dfb      	ldrb	r3, [r7, #23]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d11d      	bne.n	800b678 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	2be5      	cmp	r3, #229	; 0xe5
 800b644:	d004      	beq.n	800b650 <dir_alloc+0x50>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d107      	bne.n	800b660 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	3301      	adds	r3, #1
 800b654:	613b      	str	r3, [r7, #16]
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d102      	bne.n	800b664 <dir_alloc+0x64>
 800b65e:	e00c      	b.n	800b67a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b660:	2300      	movs	r3, #0
 800b662:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b664:	2101      	movs	r1, #1
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fef4 	bl	800b454 <dir_next>
 800b66c:	4603      	mov	r3, r0
 800b66e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d0d7      	beq.n	800b626 <dir_alloc+0x26>
 800b676:	e000      	b.n	800b67a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b678:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
 800b67c:	2b04      	cmp	r3, #4
 800b67e:	d101      	bne.n	800b684 <dir_alloc+0x84>
 800b680:	2307      	movs	r3, #7
 800b682:	75fb      	strb	r3, [r7, #23]
	return res;
 800b684:	7dfb      	ldrb	r3, [r7, #23]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	331a      	adds	r3, #26
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fe ffc7 	bl	800a630 <ld_word>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	2b03      	cmp	r3, #3
 800b6ac:	d109      	bne.n	800b6c2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	3314      	adds	r3, #20
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fe ffbc 	bl	800a630 <ld_word>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	041b      	lsls	r3, r3, #16
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	331a      	adds	r3, #26
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	b292      	uxth	r2, r2
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fe ffdf 	bl	800a6a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d109      	bne.n	800b704 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	f103 0214 	add.w	r2, r3, #20
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	0c1b      	lsrs	r3, r3, #16
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4610      	mov	r0, r2
 800b700:	f7fe ffd1 	bl	800a6a6 <st_word>
	}
}
 800b704:	bf00      	nop
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b70c:	b590      	push	{r4, r7, lr}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	331a      	adds	r3, #26
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe ff88 	bl	800a630 <ld_word>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d001      	beq.n	800b72a <cmp_lfn+0x1e>
 800b726:	2300      	movs	r3, #0
 800b728:	e059      	b.n	800b7de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b732:	1e5a      	subs	r2, r3, #1
 800b734:	4613      	mov	r3, r2
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	4413      	add	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4413      	add	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b740:	2301      	movs	r3, #1
 800b742:	81fb      	strh	r3, [r7, #14]
 800b744:	2300      	movs	r3, #0
 800b746:	613b      	str	r3, [r7, #16]
 800b748:	e033      	b.n	800b7b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b74a:	4a27      	ldr	r2, [pc, #156]	; (800b7e8 <cmp_lfn+0xdc>)
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	4413      	add	r3, r2
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	461a      	mov	r2, r3
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	4413      	add	r3, r2
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe ff69 	bl	800a630 <ld_word>
 800b75e:	4603      	mov	r3, r0
 800b760:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b762:	89fb      	ldrh	r3, [r7, #14]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d01a      	beq.n	800b79e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	2bfe      	cmp	r3, #254	; 0xfe
 800b76c:	d812      	bhi.n	800b794 <cmp_lfn+0x88>
 800b76e:	89bb      	ldrh	r3, [r7, #12]
 800b770:	4618      	mov	r0, r3
 800b772:	f002 fd23 	bl	800e1bc <ff_wtoupper>
 800b776:	4603      	mov	r3, r0
 800b778:	461c      	mov	r4, r3
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	1c5a      	adds	r2, r3, #1
 800b77e:	617a      	str	r2, [r7, #20]
 800b780:	005b      	lsls	r3, r3, #1
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	4413      	add	r3, r2
 800b786:	881b      	ldrh	r3, [r3, #0]
 800b788:	4618      	mov	r0, r3
 800b78a:	f002 fd17 	bl	800e1bc <ff_wtoupper>
 800b78e:	4603      	mov	r3, r0
 800b790:	429c      	cmp	r4, r3
 800b792:	d001      	beq.n	800b798 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b794:	2300      	movs	r3, #0
 800b796:	e022      	b.n	800b7de <cmp_lfn+0xd2>
			}
			wc = uc;
 800b798:	89bb      	ldrh	r3, [r7, #12]
 800b79a:	81fb      	strh	r3, [r7, #14]
 800b79c:	e006      	b.n	800b7ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b79e:	89bb      	ldrh	r3, [r7, #12]
 800b7a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d001      	beq.n	800b7ac <cmp_lfn+0xa0>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e018      	b.n	800b7de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	613b      	str	r3, [r7, #16]
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2b0c      	cmp	r3, #12
 800b7b6:	d9c8      	bls.n	800b74a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00b      	beq.n	800b7dc <cmp_lfn+0xd0>
 800b7c4:	89fb      	ldrh	r3, [r7, #14]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d008      	beq.n	800b7dc <cmp_lfn+0xd0>
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <cmp_lfn+0xd0>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e000      	b.n	800b7de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b7dc:	2301      	movs	r3, #1
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd90      	pop	{r4, r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	08013314 	.word	0x08013314

0800b7ec <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	331a      	adds	r3, #26
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe ff18 	bl	800a630 <ld_word>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <pick_lfn+0x1e>
 800b806:	2300      	movs	r3, #0
 800b808:	e04d      	b.n	800b8a6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b812:	1e5a      	subs	r2, r3, #1
 800b814:	4613      	mov	r3, r2
 800b816:	005b      	lsls	r3, r3, #1
 800b818:	4413      	add	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b820:	2301      	movs	r3, #1
 800b822:	81fb      	strh	r3, [r7, #14]
 800b824:	2300      	movs	r3, #0
 800b826:	613b      	str	r3, [r7, #16]
 800b828:	e028      	b.n	800b87c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b82a:	4a21      	ldr	r2, [pc, #132]	; (800b8b0 <pick_lfn+0xc4>)
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	4413      	add	r3, r2
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	461a      	mov	r2, r3
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	4413      	add	r3, r2
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fe fef9 	bl	800a630 <ld_word>
 800b83e:	4603      	mov	r3, r0
 800b840:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b842:	89fb      	ldrh	r3, [r7, #14]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00f      	beq.n	800b868 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2bfe      	cmp	r3, #254	; 0xfe
 800b84c:	d901      	bls.n	800b852 <pick_lfn+0x66>
 800b84e:	2300      	movs	r3, #0
 800b850:	e029      	b.n	800b8a6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b852:	89bb      	ldrh	r3, [r7, #12]
 800b854:	81fb      	strh	r3, [r7, #14]
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	617a      	str	r2, [r7, #20]
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	4413      	add	r3, r2
 800b862:	89fa      	ldrh	r2, [r7, #14]
 800b864:	801a      	strh	r2, [r3, #0]
 800b866:	e006      	b.n	800b876 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b868:	89bb      	ldrh	r3, [r7, #12]
 800b86a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b86e:	4293      	cmp	r3, r2
 800b870:	d001      	beq.n	800b876 <pick_lfn+0x8a>
 800b872:	2300      	movs	r3, #0
 800b874:	e017      	b.n	800b8a6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	3301      	adds	r3, #1
 800b87a:	613b      	str	r3, [r7, #16]
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	2b0c      	cmp	r3, #12
 800b880:	d9d3      	bls.n	800b82a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00a      	beq.n	800b8a4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2bfe      	cmp	r3, #254	; 0xfe
 800b892:	d901      	bls.n	800b898 <pick_lfn+0xac>
 800b894:	2300      	movs	r3, #0
 800b896:	e006      	b.n	800b8a6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	4413      	add	r3, r2
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b8a4:	2301      	movs	r3, #1
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	08013314 	.word	0x08013314

0800b8b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	4611      	mov	r1, r2
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	71fb      	strb	r3, [r7, #7]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	330d      	adds	r3, #13
 800b8ce:	79ba      	ldrb	r2, [r7, #6]
 800b8d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	330b      	adds	r3, #11
 800b8d6:	220f      	movs	r2, #15
 800b8d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	330c      	adds	r3, #12
 800b8de:	2200      	movs	r2, #0
 800b8e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	331a      	adds	r3, #26
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fe fedc 	bl	800a6a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b8ee:	79fb      	ldrb	r3, [r7, #7]
 800b8f0:	1e5a      	subs	r2, r3, #1
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	4413      	add	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4413      	add	r3, r2
 800b8fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	82fb      	strh	r3, [r7, #22]
 800b902:	2300      	movs	r3, #0
 800b904:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b906:	8afb      	ldrh	r3, [r7, #22]
 800b908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d007      	beq.n	800b920 <put_lfn+0x6c>
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	61fa      	str	r2, [r7, #28]
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4413      	add	r3, r2
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b920:	4a17      	ldr	r2, [pc, #92]	; (800b980 <put_lfn+0xcc>)
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	4413      	add	r3, r2
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	461a      	mov	r2, r3
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	4413      	add	r3, r2
 800b92e:	8afa      	ldrh	r2, [r7, #22]
 800b930:	4611      	mov	r1, r2
 800b932:	4618      	mov	r0, r3
 800b934:	f7fe feb7 	bl	800a6a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b938:	8afb      	ldrh	r3, [r7, #22]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d102      	bne.n	800b944 <put_lfn+0x90>
 800b93e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b942:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	3301      	adds	r3, #1
 800b948:	61bb      	str	r3, [r7, #24]
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	2b0c      	cmp	r3, #12
 800b94e:	d9da      	bls.n	800b906 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b950:	8afb      	ldrh	r3, [r7, #22]
 800b952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b956:	4293      	cmp	r3, r2
 800b958:	d006      	beq.n	800b968 <put_lfn+0xb4>
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	881b      	ldrh	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d103      	bne.n	800b970 <put_lfn+0xbc>
 800b968:	79fb      	ldrb	r3, [r7, #7]
 800b96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b96e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	79fa      	ldrb	r2, [r7, #7]
 800b974:	701a      	strb	r2, [r3, #0]
}
 800b976:	bf00      	nop
 800b978:	3720      	adds	r7, #32
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	08013314 	.word	0x08013314

0800b984 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b08c      	sub	sp, #48	; 0x30
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b992:	220b      	movs	r2, #11
 800b994:	68b9      	ldr	r1, [r7, #8]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f7fe fecc 	bl	800a734 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	2b05      	cmp	r3, #5
 800b9a0:	d92b      	bls.n	800b9fa <gen_numname+0x76>
		sr = seq;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b9a6:	e022      	b.n	800b9ee <gen_numname+0x6a>
			wc = *lfn++;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	1c9a      	adds	r2, r3, #2
 800b9ac:	607a      	str	r2, [r7, #4]
 800b9ae:	881b      	ldrh	r3, [r3, #0]
 800b9b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9b6:	e017      	b.n	800b9e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	005a      	lsls	r2, r3, #1
 800b9bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	4413      	add	r3, r2
 800b9c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b9c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9c8:	085b      	lsrs	r3, r3, #1
 800b9ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d005      	beq.n	800b9e2 <gen_numname+0x5e>
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b9dc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b9e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	2b0f      	cmp	r3, #15
 800b9ec:	d9e4      	bls.n	800b9b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1d8      	bne.n	800b9a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b9fa:	2307      	movs	r3, #7
 800b9fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	f003 030f 	and.w	r3, r3, #15
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	3330      	adds	r3, #48	; 0x30
 800ba0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ba0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba12:	2b39      	cmp	r3, #57	; 0x39
 800ba14:	d904      	bls.n	800ba20 <gen_numname+0x9c>
 800ba16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba1a:	3307      	adds	r3, #7
 800ba1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ba20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba22:	1e5a      	subs	r2, r3, #1
 800ba24:	62ba      	str	r2, [r7, #40]	; 0x28
 800ba26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ba30:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	091b      	lsrs	r3, r3, #4
 800ba38:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1de      	bne.n	800b9fe <gen_numname+0x7a>
	ns[i] = '~';
 800ba40:	f107 0214 	add.w	r2, r7, #20
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	4413      	add	r3, r2
 800ba48:	227e      	movs	r2, #126	; 0x7e
 800ba4a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba50:	e002      	b.n	800ba58 <gen_numname+0xd4>
 800ba52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba54:	3301      	adds	r3, #1
 800ba56:	627b      	str	r3, [r7, #36]	; 0x24
 800ba58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d205      	bcs.n	800ba6c <gen_numname+0xe8>
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba64:	4413      	add	r3, r2
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b20      	cmp	r3, #32
 800ba6a:	d1f2      	bne.n	800ba52 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6e:	2b07      	cmp	r3, #7
 800ba70:	d808      	bhi.n	800ba84 <gen_numname+0x100>
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	62ba      	str	r2, [r7, #40]	; 0x28
 800ba78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ba82:	e000      	b.n	800ba86 <gen_numname+0x102>
 800ba84:	2120      	movs	r1, #32
 800ba86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	627a      	str	r2, [r7, #36]	; 0x24
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	460a      	mov	r2, r1
 800ba92:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	2b07      	cmp	r3, #7
 800ba98:	d9e8      	bls.n	800ba6c <gen_numname+0xe8>
}
 800ba9a:	bf00      	nop
 800ba9c:	3730      	adds	r7, #48	; 0x30
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b085      	sub	sp, #20
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800baae:	230b      	movs	r3, #11
 800bab0:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	0852      	lsrs	r2, r2, #1
 800bab8:	01db      	lsls	r3, r3, #7
 800baba:	4313      	orrs	r3, r2
 800babc:	b2da      	uxtb	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	1c59      	adds	r1, r3, #1
 800bac2:	6079      	str	r1, [r7, #4]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	4413      	add	r3, r2
 800bac8:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	3b01      	subs	r3, #1
 800bace:	60bb      	str	r3, [r7, #8]
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1ed      	bne.n	800bab2 <sum_sfn+0x10>
	return sum;
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800baee:	2304      	movs	r3, #4
 800baf0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800baf8:	23ff      	movs	r3, #255	; 0xff
 800bafa:	757b      	strb	r3, [r7, #21]
 800bafc:	23ff      	movs	r3, #255	; 0xff
 800bafe:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bb00:	e081      	b.n	800bc06 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	4619      	mov	r1, r3
 800bb08:	6938      	ldr	r0, [r7, #16]
 800bb0a:	f7ff f841 	bl	800ab90 <move_window>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d17c      	bne.n	800bc12 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a1b      	ldr	r3, [r3, #32]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bb20:	7dbb      	ldrb	r3, [r7, #22]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d102      	bne.n	800bb2c <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bb26:	2304      	movs	r3, #4
 800bb28:	75fb      	strb	r3, [r7, #23]
 800bb2a:	e077      	b.n	800bc1c <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a1b      	ldr	r3, [r3, #32]
 800bb30:	330b      	adds	r3, #11
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb38:	73fb      	strb	r3, [r7, #15]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	7bfa      	ldrb	r2, [r7, #15]
 800bb3e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bb40:	7dbb      	ldrb	r3, [r7, #22]
 800bb42:	2be5      	cmp	r3, #229	; 0xe5
 800bb44:	d00e      	beq.n	800bb64 <dir_read+0x80>
 800bb46:	7dbb      	ldrb	r3, [r7, #22]
 800bb48:	2b2e      	cmp	r3, #46	; 0x2e
 800bb4a:	d00b      	beq.n	800bb64 <dir_read+0x80>
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	f023 0320 	bic.w	r3, r3, #32
 800bb52:	2b08      	cmp	r3, #8
 800bb54:	bf0c      	ite	eq
 800bb56:	2301      	moveq	r3, #1
 800bb58:	2300      	movne	r3, #0
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d002      	beq.n	800bb6a <dir_read+0x86>
				ord = 0xFF;
 800bb64:	23ff      	movs	r3, #255	; 0xff
 800bb66:	757b      	strb	r3, [r7, #21]
 800bb68:	e044      	b.n	800bbf4 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
 800bb6c:	2b0f      	cmp	r3, #15
 800bb6e:	d12f      	bne.n	800bbd0 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800bb70:	7dbb      	ldrb	r3, [r7, #22]
 800bb72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00d      	beq.n	800bb96 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a1b      	ldr	r3, [r3, #32]
 800bb7e:	7b5b      	ldrb	r3, [r3, #13]
 800bb80:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800bb82:	7dbb      	ldrb	r3, [r7, #22]
 800bb84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb88:	75bb      	strb	r3, [r7, #22]
 800bb8a:	7dbb      	ldrb	r3, [r7, #22]
 800bb8c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	695a      	ldr	r2, [r3, #20]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bb96:	7dba      	ldrb	r2, [r7, #22]
 800bb98:	7d7b      	ldrb	r3, [r7, #21]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d115      	bne.n	800bbca <dir_read+0xe6>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	330d      	adds	r3, #13
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	7d3a      	ldrb	r2, [r7, #20]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d10e      	bne.n	800bbca <dir_read+0xe6>
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	691a      	ldr	r2, [r3, #16]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a1b      	ldr	r3, [r3, #32]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	f7ff fe18 	bl	800b7ec <pick_lfn>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d003      	beq.n	800bbca <dir_read+0xe6>
 800bbc2:	7d7b      	ldrb	r3, [r7, #21]
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	e000      	b.n	800bbcc <dir_read+0xe8>
 800bbca:	23ff      	movs	r3, #255	; 0xff
 800bbcc:	757b      	strb	r3, [r7, #21]
 800bbce:	e011      	b.n	800bbf4 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bbd0:	7d7b      	ldrb	r3, [r7, #21]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d109      	bne.n	800bbea <dir_read+0x106>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff ff61 	bl	800baa2 <sum_sfn>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	7d3b      	ldrb	r3, [r7, #20]
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d015      	beq.n	800bc16 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800bbf2:	e010      	b.n	800bc16 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7ff fc2c 	bl	800b454 <dir_next>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d109      	bne.n	800bc1a <dir_read+0x136>
	while (dp->sect) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f47f af79 	bne.w	800bb02 <dir_read+0x1e>
 800bc10:	e004      	b.n	800bc1c <dir_read+0x138>
		if (res != FR_OK) break;
 800bc12:	bf00      	nop
 800bc14:	e002      	b.n	800bc1c <dir_read+0x138>
					break;
 800bc16:	bf00      	nop
 800bc18:	e000      	b.n	800bc1c <dir_read+0x138>
		if (res != FR_OK) break;
 800bc1a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bc1c:	7dfb      	ldrb	r3, [r7, #23]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d002      	beq.n	800bc28 <dir_read+0x144>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	61da      	str	r2, [r3, #28]
	return res;
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3718      	adds	r7, #24
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b086      	sub	sp, #24
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc40:	2100      	movs	r1, #0
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff fb7d 	bl	800b342 <dir_sdi>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <dir_find+0x24>
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	e0a9      	b.n	800bdaa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc56:	23ff      	movs	r3, #255	; 0xff
 800bc58:	753b      	strb	r3, [r7, #20]
 800bc5a:	7d3b      	ldrb	r3, [r7, #20]
 800bc5c:	757b      	strb	r3, [r7, #21]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f04f 32ff 	mov.w	r2, #4294967295
 800bc64:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	69db      	ldr	r3, [r3, #28]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6938      	ldr	r0, [r7, #16]
 800bc6e:	f7fe ff8f 	bl	800ab90 <move_window>
 800bc72:	4603      	mov	r3, r0
 800bc74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f040 8090 	bne.w	800bd9e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc86:	7dbb      	ldrb	r3, [r7, #22]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <dir_find+0x60>
 800bc8c:	2304      	movs	r3, #4
 800bc8e:	75fb      	strb	r3, [r7, #23]
 800bc90:	e08a      	b.n	800bda8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	330b      	adds	r3, #11
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc9e:	73fb      	strb	r3, [r7, #15]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	7bfa      	ldrb	r2, [r7, #15]
 800bca4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bca6:	7dbb      	ldrb	r3, [r7, #22]
 800bca8:	2be5      	cmp	r3, #229	; 0xe5
 800bcaa:	d007      	beq.n	800bcbc <dir_find+0x8a>
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	f003 0308 	and.w	r3, r3, #8
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d009      	beq.n	800bcca <dir_find+0x98>
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
 800bcb8:	2b0f      	cmp	r3, #15
 800bcba:	d006      	beq.n	800bcca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bcbc:	23ff      	movs	r3, #255	; 0xff
 800bcbe:	757b      	strb	r3, [r7, #21]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc6:	631a      	str	r2, [r3, #48]	; 0x30
 800bcc8:	e05e      	b.n	800bd88 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
 800bccc:	2b0f      	cmp	r3, #15
 800bcce:	d136      	bne.n	800bd3e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bcd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d154      	bne.n	800bd88 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bcde:	7dbb      	ldrb	r3, [r7, #22]
 800bce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00d      	beq.n	800bd04 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a1b      	ldr	r3, [r3, #32]
 800bcec:	7b5b      	ldrb	r3, [r3, #13]
 800bcee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bcf0:	7dbb      	ldrb	r3, [r7, #22]
 800bcf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcf6:	75bb      	strb	r3, [r7, #22]
 800bcf8:	7dbb      	ldrb	r3, [r7, #22]
 800bcfa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	695a      	ldr	r2, [r3, #20]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bd04:	7dba      	ldrb	r2, [r7, #22]
 800bd06:	7d7b      	ldrb	r3, [r7, #21]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d115      	bne.n	800bd38 <dir_find+0x106>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	330d      	adds	r3, #13
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	7d3a      	ldrb	r2, [r7, #20]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d10e      	bne.n	800bd38 <dir_find+0x106>
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	691a      	ldr	r2, [r3, #16]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	4619      	mov	r1, r3
 800bd24:	4610      	mov	r0, r2
 800bd26:	f7ff fcf1 	bl	800b70c <cmp_lfn>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d003      	beq.n	800bd38 <dir_find+0x106>
 800bd30:	7d7b      	ldrb	r3, [r7, #21]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	e000      	b.n	800bd3a <dir_find+0x108>
 800bd38:	23ff      	movs	r3, #255	; 0xff
 800bd3a:	757b      	strb	r3, [r7, #21]
 800bd3c:	e024      	b.n	800bd88 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd3e:	7d7b      	ldrb	r3, [r7, #21]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d109      	bne.n	800bd58 <dir_find+0x126>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a1b      	ldr	r3, [r3, #32]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff feaa 	bl	800baa2 <sum_sfn>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	461a      	mov	r2, r3
 800bd52:	7d3b      	ldrb	r3, [r7, #20]
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d024      	beq.n	800bda2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10a      	bne.n	800bd7c <dir_find+0x14a>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a18      	ldr	r0, [r3, #32]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3324      	adds	r3, #36	; 0x24
 800bd6e:	220b      	movs	r2, #11
 800bd70:	4619      	mov	r1, r3
 800bd72:	f7fe fd1a 	bl	800a7aa <mem_cmp>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d014      	beq.n	800bda6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd7c:	23ff      	movs	r3, #255	; 0xff
 800bd7e:	757b      	strb	r3, [r7, #21]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f04f 32ff 	mov.w	r2, #4294967295
 800bd86:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bd88:	2100      	movs	r1, #0
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff fb62 	bl	800b454 <dir_next>
 800bd90:	4603      	mov	r3, r0
 800bd92:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f43f af65 	beq.w	800bc66 <dir_find+0x34>
 800bd9c:	e004      	b.n	800bda8 <dir_find+0x176>
		if (res != FR_OK) break;
 800bd9e:	bf00      	nop
 800bda0:	e002      	b.n	800bda8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bda2:	bf00      	nop
 800bda4:	e000      	b.n	800bda8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bda6:	bf00      	nop

	return res;
 800bda8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b08c      	sub	sp, #48	; 0x30
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bdc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <dir_register+0x20>
 800bdd0:	2306      	movs	r3, #6
 800bdd2:	e0e0      	b.n	800bf96 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd8:	e002      	b.n	800bde0 <dir_register+0x2c>
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	3301      	adds	r3, #1
 800bdde:	627b      	str	r3, [r7, #36]	; 0x24
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	691a      	ldr	r2, [r3, #16]
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	4413      	add	r3, r2
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1f4      	bne.n	800bdda <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bdf6:	f107 030c 	add.w	r3, r7, #12
 800bdfa:	220c      	movs	r2, #12
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fe fc99 	bl	800a734 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800be02:	7dfb      	ldrb	r3, [r7, #23]
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d032      	beq.n	800be72 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2240      	movs	r2, #64	; 0x40
 800be10:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800be14:	2301      	movs	r3, #1
 800be16:	62bb      	str	r3, [r7, #40]	; 0x28
 800be18:	e016      	b.n	800be48 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	691a      	ldr	r2, [r3, #16]
 800be24:	f107 010c 	add.w	r1, r7, #12
 800be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2a:	f7ff fdab 	bl	800b984 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7ff feff 	bl	800bc32 <dir_find>
 800be34:	4603      	mov	r3, r0
 800be36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800be3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d106      	bne.n	800be50 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	3301      	adds	r3, #1
 800be46:	62bb      	str	r3, [r7, #40]	; 0x28
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	2b63      	cmp	r3, #99	; 0x63
 800be4c:	d9e5      	bls.n	800be1a <dir_register+0x66>
 800be4e:	e000      	b.n	800be52 <dir_register+0x9e>
			if (res != FR_OK) break;
 800be50:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	2b64      	cmp	r3, #100	; 0x64
 800be56:	d101      	bne.n	800be5c <dir_register+0xa8>
 800be58:	2307      	movs	r3, #7
 800be5a:	e09c      	b.n	800bf96 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800be5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be60:	2b04      	cmp	r3, #4
 800be62:	d002      	beq.n	800be6a <dir_register+0xb6>
 800be64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be68:	e095      	b.n	800bf96 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800be6a:	7dfa      	ldrb	r2, [r7, #23]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	f003 0302 	and.w	r3, r3, #2
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d007      	beq.n	800be8c <dir_register+0xd8>
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7e:	330c      	adds	r3, #12
 800be80:	4a47      	ldr	r2, [pc, #284]	; (800bfa0 <dir_register+0x1ec>)
 800be82:	fba2 2303 	umull	r2, r3, r2, r3
 800be86:	089b      	lsrs	r3, r3, #2
 800be88:	3301      	adds	r3, #1
 800be8a:	e000      	b.n	800be8e <dir_register+0xda>
 800be8c:	2301      	movs	r3, #1
 800be8e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800be90:	6a39      	ldr	r1, [r7, #32]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7ff fbb4 	bl	800b600 <dir_alloc>
 800be98:	4603      	mov	r3, r0
 800be9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800be9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d148      	bne.n	800bf38 <dir_register+0x184>
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	623b      	str	r3, [r7, #32]
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d042      	beq.n	800bf38 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	695a      	ldr	r2, [r3, #20]
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	015b      	lsls	r3, r3, #5
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	4619      	mov	r1, r3
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fa3f 	bl	800b342 <dir_sdi>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800beca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d132      	bne.n	800bf38 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3324      	adds	r3, #36	; 0x24
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff fde3 	bl	800baa2 <sum_sfn>
 800bedc:	4603      	mov	r3, r0
 800bede:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	69db      	ldr	r3, [r3, #28]
 800bee4:	4619      	mov	r1, r3
 800bee6:	69f8      	ldr	r0, [r7, #28]
 800bee8:	f7fe fe52 	bl	800ab90 <move_window>
 800beec:	4603      	mov	r3, r0
 800beee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d11d      	bne.n	800bf36 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	6918      	ldr	r0, [r3, #16]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a19      	ldr	r1, [r3, #32]
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	7efb      	ldrb	r3, [r7, #27]
 800bf08:	f7ff fcd4 	bl	800b8b4 <put_lfn>
				fs->wflag = 1;
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bf12:	2100      	movs	r1, #0
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff fa9d 	bl	800b454 <dir_next>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bf20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d107      	bne.n	800bf38 <dir_register+0x184>
 800bf28:	6a3b      	ldr	r3, [r7, #32]
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	623b      	str	r3, [r7, #32]
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1d5      	bne.n	800bee0 <dir_register+0x12c>
 800bf34:	e000      	b.n	800bf38 <dir_register+0x184>
				if (res != FR_OK) break;
 800bf36:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bf38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d128      	bne.n	800bf92 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	69db      	ldr	r3, [r3, #28]
 800bf44:	4619      	mov	r1, r3
 800bf46:	69f8      	ldr	r0, [r7, #28]
 800bf48:	f7fe fe22 	bl	800ab90 <move_window>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bf52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d11b      	bne.n	800bf92 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	2220      	movs	r2, #32
 800bf60:	2100      	movs	r1, #0
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fe fc07 	bl	800a776 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a18      	ldr	r0, [r3, #32]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3324      	adds	r3, #36	; 0x24
 800bf70:	220b      	movs	r2, #11
 800bf72:	4619      	mov	r1, r3
 800bf74:	f7fe fbde 	bl	800a734 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	330c      	adds	r3, #12
 800bf84:	f002 0218 	and.w	r2, r2, #24
 800bf88:	b2d2      	uxtb	r2, r2
 800bf8a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bf92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3730      	adds	r7, #48	; 0x30
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	4ec4ec4f 	.word	0x4ec4ec4f

0800bfa4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	695b      	ldr	r3, [r3, #20]
 800bfb6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc0:	d007      	beq.n	800bfd2 <dir_remove+0x2e>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f7ff f9ba 	bl	800b342 <dir_sdi>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	e000      	b.n	800bfd4 <dir_remove+0x30>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bfd6:	7dfb      	ldrb	r3, [r7, #23]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d128      	bne.n	800c02e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	69db      	ldr	r3, [r3, #28]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6938      	ldr	r0, [r7, #16]
 800bfe4:	f7fe fdd4 	bl	800ab90 <move_window>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d115      	bne.n	800c01e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	22e5      	movs	r2, #229	; 0xe5
 800bff8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	2201      	movs	r2, #1
 800bffe:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	695b      	ldr	r3, [r3, #20]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	429a      	cmp	r2, r3
 800c008:	d90b      	bls.n	800c022 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800c00a:	2100      	movs	r1, #0
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff fa21 	bl	800b454 <dir_next>
 800c012:	4603      	mov	r3, r0
 800c014:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0df      	beq.n	800bfdc <dir_remove+0x38>
 800c01c:	e002      	b.n	800c024 <dir_remove+0x80>
			if (res != FR_OK) break;
 800c01e:	bf00      	nop
 800c020:	e000      	b.n	800c024 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c022:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800c024:	7dfb      	ldrb	r3, [r7, #23]
 800c026:	2b04      	cmp	r3, #4
 800c028:	d101      	bne.n	800c02e <dir_remove+0x8a>
 800c02a:	2302      	movs	r3, #2
 800c02c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b08a      	sub	sp, #40	; 0x28
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	613b      	str	r3, [r7, #16]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	60fb      	str	r3, [r7, #12]
 800c050:	2300      	movs	r3, #0
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	61ba      	str	r2, [r7, #24]
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	4413      	add	r3, r2
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c068:	2b1f      	cmp	r3, #31
 800c06a:	d940      	bls.n	800c0ee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c06c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c06e:	2b2f      	cmp	r3, #47	; 0x2f
 800c070:	d006      	beq.n	800c080 <create_name+0x48>
 800c072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c074:	2b5c      	cmp	r3, #92	; 0x5c
 800c076:	d110      	bne.n	800c09a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c078:	e002      	b.n	800c080 <create_name+0x48>
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	3301      	adds	r3, #1
 800c07e:	61bb      	str	r3, [r7, #24]
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	4413      	add	r3, r2
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	2b2f      	cmp	r3, #47	; 0x2f
 800c08a:	d0f6      	beq.n	800c07a <create_name+0x42>
 800c08c:	693a      	ldr	r2, [r7, #16]
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	4413      	add	r3, r2
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b5c      	cmp	r3, #92	; 0x5c
 800c096:	d0f0      	beq.n	800c07a <create_name+0x42>
			break;
 800c098:	e02a      	b.n	800c0f0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	2bfe      	cmp	r3, #254	; 0xfe
 800c09e:	d901      	bls.n	800c0a4 <create_name+0x6c>
 800c0a0:	2306      	movs	r3, #6
 800c0a2:	e1c9      	b.n	800c438 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c0a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c0aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ac:	2101      	movs	r1, #1
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f002 f848 	bl	800e144 <ff_convert>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c0b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d101      	bne.n	800c0c2 <create_name+0x8a>
 800c0be:	2306      	movs	r3, #6
 800c0c0:	e1ba      	b.n	800c438 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c0c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c0c6:	d809      	bhi.n	800c0dc <create_name+0xa4>
 800c0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	48a5      	ldr	r0, [pc, #660]	; (800c364 <create_name+0x32c>)
 800c0ce:	f7fe fb93 	bl	800a7f8 <chk_chr>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d001      	beq.n	800c0dc <create_name+0xa4>
 800c0d8:	2306      	movs	r3, #6
 800c0da:	e1ad      	b.n	800c438 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	617a      	str	r2, [r7, #20]
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c0ea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c0ec:	e7b4      	b.n	800c058 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c0ee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	441a      	add	r2, r3
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c0fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0fc:	2b1f      	cmp	r3, #31
 800c0fe:	d801      	bhi.n	800c104 <create_name+0xcc>
 800c100:	2304      	movs	r3, #4
 800c102:	e000      	b.n	800c106 <create_name+0xce>
 800c104:	2300      	movs	r3, #0
 800c106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d109      	bne.n	800c124 <create_name+0xec>
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c116:	3b01      	subs	r3, #1
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	4413      	add	r3, r2
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	2b2e      	cmp	r3, #46	; 0x2e
 800c122:	d016      	beq.n	800c152 <create_name+0x11a>
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	2b02      	cmp	r3, #2
 800c128:	d14e      	bne.n	800c1c8 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c130:	3b01      	subs	r3, #1
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	4413      	add	r3, r2
 800c138:	881b      	ldrh	r3, [r3, #0]
 800c13a:	2b2e      	cmp	r3, #46	; 0x2e
 800c13c:	d144      	bne.n	800c1c8 <create_name+0x190>
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c144:	3b02      	subs	r3, #2
 800c146:	005b      	lsls	r3, r3, #1
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	4413      	add	r3, r2
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	2b2e      	cmp	r3, #46	; 0x2e
 800c150:	d13a      	bne.n	800c1c8 <create_name+0x190>
		lfn[di] = 0;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	4413      	add	r3, r2
 800c15a:	2200      	movs	r2, #0
 800c15c:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c15e:	2300      	movs	r3, #0
 800c160:	623b      	str	r3, [r7, #32]
 800c162:	e00f      	b.n	800c184 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800c164:	6a3a      	ldr	r2, [r7, #32]
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d201      	bcs.n	800c170 <create_name+0x138>
 800c16c:	212e      	movs	r1, #46	; 0x2e
 800c16e:	e000      	b.n	800c172 <create_name+0x13a>
 800c170:	2120      	movs	r1, #32
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	6a3b      	ldr	r3, [r7, #32]
 800c176:	4413      	add	r3, r2
 800c178:	3324      	adds	r3, #36	; 0x24
 800c17a:	460a      	mov	r2, r1
 800c17c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	3301      	adds	r3, #1
 800c182:	623b      	str	r3, [r7, #32]
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	2b0a      	cmp	r3, #10
 800c188:	d9ec      	bls.n	800c164 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800c18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c18e:	f043 0320 	orr.w	r3, r3, #32
 800c192:	b2d9      	uxtb	r1, r3
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	6a3b      	ldr	r3, [r7, #32]
 800c198:	4413      	add	r3, r2
 800c19a:	3324      	adds	r3, #36	; 0x24
 800c19c:	460a      	mov	r2, r1
 800c19e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e149      	b.n	800c438 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1b8:	2b20      	cmp	r3, #32
 800c1ba:	d002      	beq.n	800c1c2 <create_name+0x18a>
 800c1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1be:	2b2e      	cmp	r3, #46	; 0x2e
 800c1c0:	d106      	bne.n	800c1d0 <create_name+0x198>
		di--;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d1ea      	bne.n	800c1a4 <create_name+0x16c>
 800c1ce:	e000      	b.n	800c1d2 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800c1d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	005b      	lsls	r3, r3, #1
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	4413      	add	r3, r2
 800c1da:	2200      	movs	r2, #0
 800c1dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d101      	bne.n	800c1e8 <create_name+0x1b0>
 800c1e4:	2306      	movs	r3, #6
 800c1e6:	e127      	b.n	800c438 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3324      	adds	r3, #36	; 0x24
 800c1ec:	220b      	movs	r2, #11
 800c1ee:	2120      	movs	r1, #32
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fe fac0 	bl	800a776 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	61bb      	str	r3, [r7, #24]
 800c1fa:	e002      	b.n	800c202 <create_name+0x1ca>
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	3301      	adds	r3, #1
 800c200:	61bb      	str	r3, [r7, #24]
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	4413      	add	r3, r2
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	2b20      	cmp	r3, #32
 800c20e:	d0f5      	beq.n	800c1fc <create_name+0x1c4>
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	005b      	lsls	r3, r3, #1
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	4413      	add	r3, r2
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	2b2e      	cmp	r3, #46	; 0x2e
 800c21c:	d0ee      	beq.n	800c1fc <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d009      	beq.n	800c238 <create_name+0x200>
 800c224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c228:	f043 0303 	orr.w	r3, r3, #3
 800c22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c230:	e002      	b.n	800c238 <create_name+0x200>
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	3b01      	subs	r3, #1
 800c236:	617b      	str	r3, [r7, #20]
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d009      	beq.n	800c252 <create_name+0x21a>
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c244:	3b01      	subs	r3, #1
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	4413      	add	r3, r2
 800c24c:	881b      	ldrh	r3, [r3, #0]
 800c24e:	2b2e      	cmp	r3, #46	; 0x2e
 800c250:	d1ef      	bne.n	800c232 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800c252:	2300      	movs	r3, #0
 800c254:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c258:	2300      	movs	r3, #0
 800c25a:	623b      	str	r3, [r7, #32]
 800c25c:	2308      	movs	r3, #8
 800c25e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	61ba      	str	r2, [r7, #24]
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	4413      	add	r3, r2
 800c26c:	881b      	ldrh	r3, [r3, #0]
 800c26e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 8096 	beq.w	800c3a4 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c27a:	2b20      	cmp	r3, #32
 800c27c:	d006      	beq.n	800c28c <create_name+0x254>
 800c27e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c280:	2b2e      	cmp	r3, #46	; 0x2e
 800c282:	d10a      	bne.n	800c29a <create_name+0x262>
 800c284:	69ba      	ldr	r2, [r7, #24]
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d006      	beq.n	800c29a <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800c28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c290:	f043 0303 	orr.w	r3, r3, #3
 800c294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c298:	e083      	b.n	800c3a2 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c29a:	6a3a      	ldr	r2, [r7, #32]
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d203      	bcs.n	800c2aa <create_name+0x272>
 800c2a2:	69ba      	ldr	r2, [r7, #24]
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d123      	bne.n	800c2f2 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	2b0b      	cmp	r3, #11
 800c2ae:	d106      	bne.n	800c2be <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800c2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2b4:	f043 0303 	orr.w	r3, r3, #3
 800c2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2bc:	e075      	b.n	800c3aa <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c2be:	69ba      	ldr	r2, [r7, #24]
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d005      	beq.n	800c2d2 <create_name+0x29a>
 800c2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2ca:	f043 0303 	orr.w	r3, r3, #3
 800c2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c2d2:	69ba      	ldr	r2, [r7, #24]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d866      	bhi.n	800c3a8 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	61bb      	str	r3, [r7, #24]
 800c2de:	2308      	movs	r3, #8
 800c2e0:	623b      	str	r3, [r7, #32]
 800c2e2:	230b      	movs	r3, #11
 800c2e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c2e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2f0:	e057      	b.n	800c3a2 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c2f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f4:	2b7f      	cmp	r3, #127	; 0x7f
 800c2f6:	d914      	bls.n	800c322 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c2f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f001 ff21 	bl	800e144 <ff_convert>
 800c302:	4603      	mov	r3, r0
 800c304:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d004      	beq.n	800c316 <create_name+0x2de>
 800c30c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c30e:	3b80      	subs	r3, #128	; 0x80
 800c310:	4a15      	ldr	r2, [pc, #84]	; (800c368 <create_name+0x330>)
 800c312:	5cd3      	ldrb	r3, [r2, r3]
 800c314:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c31a:	f043 0302 	orr.w	r3, r3, #2
 800c31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c324:	2b00      	cmp	r3, #0
 800c326:	d007      	beq.n	800c338 <create_name+0x300>
 800c328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c32a:	4619      	mov	r1, r3
 800c32c:	480f      	ldr	r0, [pc, #60]	; (800c36c <create_name+0x334>)
 800c32e:	f7fe fa63 	bl	800a7f8 <chk_chr>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d008      	beq.n	800c34a <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c338:	235f      	movs	r3, #95	; 0x5f
 800c33a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c340:	f043 0303 	orr.w	r3, r3, #3
 800c344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c348:	e021      	b.n	800c38e <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c34a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c34c:	2b40      	cmp	r3, #64	; 0x40
 800c34e:	d90f      	bls.n	800c370 <create_name+0x338>
 800c350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c352:	2b5a      	cmp	r3, #90	; 0x5a
 800c354:	d80c      	bhi.n	800c370 <create_name+0x338>
					b |= 2;
 800c356:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c35a:	f043 0302 	orr.w	r3, r3, #2
 800c35e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c362:	e014      	b.n	800c38e <create_name+0x356>
 800c364:	0801320c 	.word	0x0801320c
 800c368:	08013294 	.word	0x08013294
 800c36c:	08013218 	.word	0x08013218
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c372:	2b60      	cmp	r3, #96	; 0x60
 800c374:	d90b      	bls.n	800c38e <create_name+0x356>
 800c376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c378:	2b7a      	cmp	r3, #122	; 0x7a
 800c37a:	d808      	bhi.n	800c38e <create_name+0x356>
						b |= 1; w -= 0x20;
 800c37c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c380:	f043 0301 	orr.w	r3, r3, #1
 800c384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c38a:	3b20      	subs	r3, #32
 800c38c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	623a      	str	r2, [r7, #32]
 800c394:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c396:	b2d1      	uxtb	r1, r2
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	4413      	add	r3, r2
 800c39c:	460a      	mov	r2, r1
 800c39e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c3a2:	e75d      	b.n	800c260 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800c3a4:	bf00      	nop
 800c3a6:	e000      	b.n	800c3aa <create_name+0x372>
			if (si > di) break;			/* No extension */
 800c3a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c3b0:	2be5      	cmp	r3, #229	; 0xe5
 800c3b2:	d103      	bne.n	800c3bc <create_name+0x384>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2205      	movs	r2, #5
 800c3b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	2b08      	cmp	r3, #8
 800c3c0:	d104      	bne.n	800c3cc <create_name+0x394>
 800c3c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c3cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3d0:	f003 030c 	and.w	r3, r3, #12
 800c3d4:	2b0c      	cmp	r3, #12
 800c3d6:	d005      	beq.n	800c3e4 <create_name+0x3ac>
 800c3d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3dc:	f003 0303 	and.w	r3, r3, #3
 800c3e0:	2b03      	cmp	r3, #3
 800c3e2:	d105      	bne.n	800c3f0 <create_name+0x3b8>
 800c3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e8:	f043 0302 	orr.w	r3, r3, #2
 800c3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3f4:	f003 0302 	and.w	r3, r3, #2
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d117      	bne.n	800c42c <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c3fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c400:	f003 0303 	and.w	r3, r3, #3
 800c404:	2b01      	cmp	r3, #1
 800c406:	d105      	bne.n	800c414 <create_name+0x3dc>
 800c408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c40c:	f043 0310 	orr.w	r3, r3, #16
 800c410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c418:	f003 030c 	and.w	r3, r3, #12
 800c41c:	2b04      	cmp	r3, #4
 800c41e:	d105      	bne.n	800c42c <create_name+0x3f4>
 800c420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c424:	f043 0308 	orr.w	r3, r3, #8
 800c428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c432:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c436:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3728      	adds	r7, #40	; 0x28
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	2b2f      	cmp	r3, #47	; 0x2f
 800c45a:	d00b      	beq.n	800c474 <follow_path+0x34>
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	2b5c      	cmp	r3, #92	; 0x5c
 800c462:	d007      	beq.n	800c474 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	69da      	ldr	r2, [r3, #28]
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	609a      	str	r2, [r3, #8]
 800c46c:	e00d      	b.n	800c48a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	603b      	str	r3, [r7, #0]
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	2b2f      	cmp	r3, #47	; 0x2f
 800c47a:	d0f8      	beq.n	800c46e <follow_path+0x2e>
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	2b5c      	cmp	r3, #92	; 0x5c
 800c482:	d0f4      	beq.n	800c46e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2200      	movs	r2, #0
 800c488:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	2b1f      	cmp	r3, #31
 800c490:	d80a      	bhi.n	800c4a8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2280      	movs	r2, #128	; 0x80
 800c496:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c49a:	2100      	movs	r1, #0
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7fe ff50 	bl	800b342 <dir_sdi>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	75fb      	strb	r3, [r7, #23]
 800c4a6:	e05b      	b.n	800c560 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c4a8:	463b      	mov	r3, r7
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f7ff fdc3 	bl	800c038 <create_name>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d14c      	bne.n	800c556 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7ff fbb8 	bl	800bc32 <dir_find>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c4cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c4ce:	7dfb      	ldrb	r3, [r7, #23]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01b      	beq.n	800c50c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c4d4:	7dfb      	ldrb	r3, [r7, #23]
 800c4d6:	2b04      	cmp	r3, #4
 800c4d8:	d13f      	bne.n	800c55a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800c4da:	7afb      	ldrb	r3, [r7, #11]
 800c4dc:	f003 0320 	and.w	r3, r3, #32
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800c4e4:	7afb      	ldrb	r3, [r7, #11]
 800c4e6:	f003 0304 	and.w	r3, r3, #4
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d031      	beq.n	800c552 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2280      	movs	r2, #128	; 0x80
 800c4f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800c4fa:	e02e      	b.n	800c55a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c4fc:	7afb      	ldrb	r3, [r7, #11]
 800c4fe:	f003 0304 	and.w	r3, r3, #4
 800c502:	2b00      	cmp	r3, #0
 800c504:	d129      	bne.n	800c55a <follow_path+0x11a>
 800c506:	2305      	movs	r3, #5
 800c508:	75fb      	strb	r3, [r7, #23]
				break;
 800c50a:	e026      	b.n	800c55a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c50c:	7afb      	ldrb	r3, [r7, #11]
 800c50e:	f003 0304 	and.w	r3, r3, #4
 800c512:	2b00      	cmp	r3, #0
 800c514:	d123      	bne.n	800c55e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	799b      	ldrb	r3, [r3, #6]
 800c51a:	f003 0310 	and.w	r3, r3, #16
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d102      	bne.n	800c528 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800c522:	2305      	movs	r3, #5
 800c524:	75fb      	strb	r3, [r7, #23]
 800c526:	e01b      	b.n	800c560 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	695b      	ldr	r3, [r3, #20]
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	8992      	ldrh	r2, [r2, #12]
 800c536:	fbb3 f0f2 	udiv	r0, r3, r2
 800c53a:	fb02 f200 	mul.w	r2, r2, r0
 800c53e:	1a9b      	subs	r3, r3, r2
 800c540:	440b      	add	r3, r1
 800c542:	4619      	mov	r1, r3
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f7ff f8a2 	bl	800b68e <ld_clust>
 800c54a:	4602      	mov	r2, r0
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	609a      	str	r2, [r3, #8]
 800c550:	e7aa      	b.n	800c4a8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800c552:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c554:	e7a8      	b.n	800c4a8 <follow_path+0x68>
			if (res != FR_OK) break;
 800c556:	bf00      	nop
 800c558:	e002      	b.n	800c560 <follow_path+0x120>
				break;
 800c55a:	bf00      	nop
 800c55c:	e000      	b.n	800c560 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c55e:	bf00      	nop
			}
		}
	}

	return res;
 800c560:	7dfb      	ldrb	r3, [r7, #23]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b087      	sub	sp, #28
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c572:	f04f 33ff 	mov.w	r3, #4294967295
 800c576:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d031      	beq.n	800c5e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	617b      	str	r3, [r7, #20]
 800c586:	e002      	b.n	800c58e <get_ldnumber+0x24>
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	3301      	adds	r3, #1
 800c58c:	617b      	str	r3, [r7, #20]
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	2b1f      	cmp	r3, #31
 800c594:	d903      	bls.n	800c59e <get_ldnumber+0x34>
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b3a      	cmp	r3, #58	; 0x3a
 800c59c:	d1f4      	bne.n	800c588 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	2b3a      	cmp	r3, #58	; 0x3a
 800c5a4:	d11c      	bne.n	800c5e0 <get_ldnumber+0x76>
			tp = *path;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	60fa      	str	r2, [r7, #12]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	3b30      	subs	r3, #48	; 0x30
 800c5b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	2b09      	cmp	r3, #9
 800c5bc:	d80e      	bhi.n	800c5dc <get_ldnumber+0x72>
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d10a      	bne.n	800c5dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d107      	bne.n	800c5dc <get_ldnumber+0x72>
					vol = (int)i;
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	617b      	str	r3, [r7, #20]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	697a      	ldr	r2, [r7, #20]
 800c5da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	e002      	b.n	800c5e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c5e4:	693b      	ldr	r3, [r7, #16]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	371c      	adds	r7, #28
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
	...

0800c5f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	70da      	strb	r2, [r3, #3]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f04f 32ff 	mov.w	r2, #4294967295
 800c60a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7fe fabe 	bl	800ab90 <move_window>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d001      	beq.n	800c61e <check_fs+0x2a>
 800c61a:	2304      	movs	r3, #4
 800c61c:	e038      	b.n	800c690 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	333c      	adds	r3, #60	; 0x3c
 800c622:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c626:	4618      	mov	r0, r3
 800c628:	f7fe f802 	bl	800a630 <ld_word>
 800c62c:	4603      	mov	r3, r0
 800c62e:	461a      	mov	r2, r3
 800c630:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c634:	429a      	cmp	r2, r3
 800c636:	d001      	beq.n	800c63c <check_fs+0x48>
 800c638:	2303      	movs	r3, #3
 800c63a:	e029      	b.n	800c690 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c642:	2be9      	cmp	r3, #233	; 0xe9
 800c644:	d009      	beq.n	800c65a <check_fs+0x66>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c64c:	2beb      	cmp	r3, #235	; 0xeb
 800c64e:	d11e      	bne.n	800c68e <check_fs+0x9a>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c656:	2b90      	cmp	r3, #144	; 0x90
 800c658:	d119      	bne.n	800c68e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	333c      	adds	r3, #60	; 0x3c
 800c65e:	3336      	adds	r3, #54	; 0x36
 800c660:	4618      	mov	r0, r3
 800c662:	f7fd fffd 	bl	800a660 <ld_dword>
 800c666:	4603      	mov	r3, r0
 800c668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c66c:	4a0a      	ldr	r2, [pc, #40]	; (800c698 <check_fs+0xa4>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d101      	bne.n	800c676 <check_fs+0x82>
 800c672:	2300      	movs	r3, #0
 800c674:	e00c      	b.n	800c690 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	333c      	adds	r3, #60	; 0x3c
 800c67a:	3352      	adds	r3, #82	; 0x52
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fd ffef 	bl	800a660 <ld_dword>
 800c682:	4602      	mov	r2, r0
 800c684:	4b05      	ldr	r3, [pc, #20]	; (800c69c <check_fs+0xa8>)
 800c686:	429a      	cmp	r2, r3
 800c688:	d101      	bne.n	800c68e <check_fs+0x9a>
 800c68a:	2300      	movs	r3, #0
 800c68c:	e000      	b.n	800c690 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c68e:	2302      	movs	r3, #2
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	00544146 	.word	0x00544146
 800c69c:	33544146 	.word	0x33544146

0800c6a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b096      	sub	sp, #88	; 0x58
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f7ff ff58 	bl	800c56a <get_ldnumber>
 800c6ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	da01      	bge.n	800c6c6 <find_volume+0x26>
 800c6c2:	230b      	movs	r3, #11
 800c6c4:	e26b      	b.n	800cb9e <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c6c6:	4ab0      	ldr	r2, [pc, #704]	; (800c988 <find_volume+0x2e8>)
 800c6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <find_volume+0x3a>
 800c6d6:	230c      	movs	r3, #12
 800c6d8:	e261      	b.n	800cb9e <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c6e0:	79fb      	ldrb	r3, [r7, #7]
 800c6e2:	f023 0301 	bic.w	r3, r3, #1
 800c6e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d01a      	beq.n	800c726 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f2:	785b      	ldrb	r3, [r3, #1]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fd fefd 	bl	800a4f4 <disk_status>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10c      	bne.n	800c726 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d007      	beq.n	800c722 <find_volume+0x82>
 800c712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c716:	f003 0304 	and.w	r3, r3, #4
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c71e:	230a      	movs	r3, #10
 800c720:	e23d      	b.n	800cb9e <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800c722:	2300      	movs	r3, #0
 800c724:	e23b      	b.n	800cb9e <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	2200      	movs	r2, #0
 800c72a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	785b      	ldrb	r3, [r3, #1]
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fd fef5 	bl	800a528 <disk_initialize>
 800c73e:	4603      	mov	r3, r0
 800c740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c748:	f003 0301 	and.w	r3, r3, #1
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d001      	beq.n	800c754 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c750:	2303      	movs	r3, #3
 800c752:	e224      	b.n	800cb9e <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c754:	79fb      	ldrb	r3, [r7, #7]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d007      	beq.n	800c76a <find_volume+0xca>
 800c75a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c75e:	f003 0304 	and.w	r3, r3, #4
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c766:	230a      	movs	r3, #10
 800c768:	e219      	b.n	800cb9e <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76c:	7858      	ldrb	r0, [r3, #1]
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	330c      	adds	r3, #12
 800c772:	461a      	mov	r2, r3
 800c774:	2102      	movs	r1, #2
 800c776:	f7fd ff3d 	bl	800a5f4 <disk_ioctl>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d001      	beq.n	800c784 <find_volume+0xe4>
 800c780:	2301      	movs	r3, #1
 800c782:	e20c      	b.n	800cb9e <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c786:	899b      	ldrh	r3, [r3, #12]
 800c788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c78c:	d80d      	bhi.n	800c7aa <find_volume+0x10a>
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	899b      	ldrh	r3, [r3, #12]
 800c792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c796:	d308      	bcc.n	800c7aa <find_volume+0x10a>
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	899b      	ldrh	r3, [r3, #12]
 800c79c:	461a      	mov	r2, r3
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	899b      	ldrh	r3, [r3, #12]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	4013      	ands	r3, r2
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <find_volume+0x10e>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e1f7      	b.n	800cb9e <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c7b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7b6:	f7ff ff1d 	bl	800c5f4 <check_fs>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c7c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d14b      	bne.n	800c860 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c7cc:	e01f      	b.n	800c80e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7d6:	011b      	lsls	r3, r3, #4
 800c7d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c7dc:	4413      	add	r3, r2
 800c7de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d006      	beq.n	800c7f8 <find_volume+0x158>
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fd ff36 	bl	800a660 <ld_dword>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	e000      	b.n	800c7fa <find_volume+0x15a>
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c802:	440b      	add	r3, r1
 800c804:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c80a:	3301      	adds	r3, #1
 800c80c:	643b      	str	r3, [r7, #64]	; 0x40
 800c80e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c810:	2b03      	cmp	r3, #3
 800c812:	d9dc      	bls.n	800c7ce <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c814:	2300      	movs	r3, #0
 800c816:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <find_volume+0x184>
 800c81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c820:	3b01      	subs	r3, #1
 800c822:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c82c:	4413      	add	r3, r2
 800c82e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c832:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c836:	2b00      	cmp	r3, #0
 800c838:	d005      	beq.n	800c846 <find_volume+0x1a6>
 800c83a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c83c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c83e:	f7ff fed9 	bl	800c5f4 <check_fs>
 800c842:	4603      	mov	r3, r0
 800c844:	e000      	b.n	800c848 <find_volume+0x1a8>
 800c846:	2303      	movs	r3, #3
 800c848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c84c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c850:	2b01      	cmp	r3, #1
 800c852:	d905      	bls.n	800c860 <find_volume+0x1c0>
 800c854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c856:	3301      	adds	r3, #1
 800c858:	643b      	str	r3, [r7, #64]	; 0x40
 800c85a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c85c:	2b03      	cmp	r3, #3
 800c85e:	d9e1      	bls.n	800c824 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c864:	2b04      	cmp	r3, #4
 800c866:	d101      	bne.n	800c86c <find_volume+0x1cc>
 800c868:	2301      	movs	r3, #1
 800c86a:	e198      	b.n	800cb9e <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c86c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c870:	2b01      	cmp	r3, #1
 800c872:	d901      	bls.n	800c878 <find_volume+0x1d8>
 800c874:	230d      	movs	r3, #13
 800c876:	e192      	b.n	800cb9e <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	333c      	adds	r3, #60	; 0x3c
 800c87c:	330b      	adds	r3, #11
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fd fed6 	bl	800a630 <ld_word>
 800c884:	4603      	mov	r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	899b      	ldrh	r3, [r3, #12]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d001      	beq.n	800c894 <find_volume+0x1f4>
 800c890:	230d      	movs	r3, #13
 800c892:	e184      	b.n	800cb9e <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	333c      	adds	r3, #60	; 0x3c
 800c898:	3316      	adds	r3, #22
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fd fec8 	bl	800a630 <ld_word>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <find_volume+0x218>
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ac:	333c      	adds	r3, #60	; 0x3c
 800c8ae:	3324      	adds	r3, #36	; 0x24
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fd fed5 	bl	800a660 <ld_dword>
 800c8b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8bc:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ca:	789b      	ldrb	r3, [r3, #2]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d005      	beq.n	800c8dc <find_volume+0x23c>
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	789b      	ldrb	r3, [r3, #2]
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d001      	beq.n	800c8dc <find_volume+0x23c>
 800c8d8:	230d      	movs	r3, #13
 800c8da:	e160      	b.n	800cb9e <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	789b      	ldrb	r3, [r3, #2]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e4:	fb02 f303 	mul.w	r3, r2, r3
 800c8e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f8:	895b      	ldrh	r3, [r3, #10]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d008      	beq.n	800c910 <find_volume+0x270>
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c900:	895b      	ldrh	r3, [r3, #10]
 800c902:	461a      	mov	r2, r3
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	895b      	ldrh	r3, [r3, #10]
 800c908:	3b01      	subs	r3, #1
 800c90a:	4013      	ands	r3, r2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <find_volume+0x274>
 800c910:	230d      	movs	r3, #13
 800c912:	e144      	b.n	800cb9e <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	333c      	adds	r3, #60	; 0x3c
 800c918:	3311      	adds	r3, #17
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fd fe88 	bl	800a630 <ld_word>
 800c920:	4603      	mov	r3, r0
 800c922:	461a      	mov	r2, r3
 800c924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c926:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92a:	891b      	ldrh	r3, [r3, #8]
 800c92c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c92e:	8992      	ldrh	r2, [r2, #12]
 800c930:	0952      	lsrs	r2, r2, #5
 800c932:	b292      	uxth	r2, r2
 800c934:	fbb3 f1f2 	udiv	r1, r3, r2
 800c938:	fb02 f201 	mul.w	r2, r2, r1
 800c93c:	1a9b      	subs	r3, r3, r2
 800c93e:	b29b      	uxth	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <find_volume+0x2a8>
 800c944:	230d      	movs	r3, #13
 800c946:	e12a      	b.n	800cb9e <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94a:	333c      	adds	r3, #60	; 0x3c
 800c94c:	3313      	adds	r3, #19
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fd fe6e 	bl	800a630 <ld_word>
 800c954:	4603      	mov	r3, r0
 800c956:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d106      	bne.n	800c96c <find_volume+0x2cc>
 800c95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c960:	333c      	adds	r3, #60	; 0x3c
 800c962:	3320      	adds	r3, #32
 800c964:	4618      	mov	r0, r3
 800c966:	f7fd fe7b 	bl	800a660 <ld_dword>
 800c96a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96e:	333c      	adds	r3, #60	; 0x3c
 800c970:	330e      	adds	r3, #14
 800c972:	4618      	mov	r0, r3
 800c974:	f7fd fe5c 	bl	800a630 <ld_word>
 800c978:	4603      	mov	r3, r0
 800c97a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c97c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d104      	bne.n	800c98c <find_volume+0x2ec>
 800c982:	230d      	movs	r3, #13
 800c984:	e10b      	b.n	800cb9e <find_volume+0x4fe>
 800c986:	bf00      	nop
 800c988:	200002f4 	.word	0x200002f4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c98c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c990:	4413      	add	r3, r2
 800c992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c994:	8911      	ldrh	r1, [r2, #8]
 800c996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c998:	8992      	ldrh	r2, [r2, #12]
 800c99a:	0952      	lsrs	r2, r2, #5
 800c99c:	b292      	uxth	r2, r2
 800c99e:	fbb1 f2f2 	udiv	r2, r1, r2
 800c9a2:	b292      	uxth	r2, r2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c9a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d201      	bcs.n	800c9b4 <find_volume+0x314>
 800c9b0:	230d      	movs	r3, #13
 800c9b2:	e0f4      	b.n	800cb9e <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c9b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9bc:	8952      	ldrh	r2, [r2, #10]
 800c9be:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <find_volume+0x32e>
 800c9ca:	230d      	movs	r3, #13
 800c9cc:	e0e7      	b.n	800cb9e <find_volume+0x4fe>
		fmt = FS_FAT32;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d802      	bhi.n	800c9e4 <find_volume+0x344>
 800c9de:	2302      	movs	r3, #2
 800c9e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d802      	bhi.n	800c9f4 <find_volume+0x354>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	1c9a      	adds	r2, r3, #2
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca00:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ca02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca06:	441a      	add	r2, r3
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800ca0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	441a      	add	r2, r3
 800ca12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca14:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800ca16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d11e      	bne.n	800ca5c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	333c      	adds	r3, #60	; 0x3c
 800ca22:	332a      	adds	r3, #42	; 0x2a
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7fd fe03 	bl	800a630 <ld_word>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d001      	beq.n	800ca34 <find_volume+0x394>
 800ca30:	230d      	movs	r3, #13
 800ca32:	e0b4      	b.n	800cb9e <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	891b      	ldrh	r3, [r3, #8]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <find_volume+0x3a0>
 800ca3c:	230d      	movs	r3, #13
 800ca3e:	e0ae      	b.n	800cb9e <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	333c      	adds	r3, #60	; 0x3c
 800ca44:	332c      	adds	r3, #44	; 0x2c
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fd fe0a 	bl	800a660 <ld_dword>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ca52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca54:	6a1b      	ldr	r3, [r3, #32]
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	647b      	str	r3, [r7, #68]	; 0x44
 800ca5a:	e01f      	b.n	800ca9c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5e:	891b      	ldrh	r3, [r3, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d101      	bne.n	800ca68 <find_volume+0x3c8>
 800ca64:	230d      	movs	r3, #13
 800ca66:	e09a      	b.n	800cb9e <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca6e:	441a      	add	r2, r3
 800ca70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca72:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ca74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d103      	bne.n	800ca84 <find_volume+0x3e4>
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	6a1b      	ldr	r3, [r3, #32]
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	e00a      	b.n	800ca9a <find_volume+0x3fa>
 800ca84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca86:	6a1a      	ldr	r2, [r3, #32]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	4413      	add	r3, r2
 800ca8e:	085a      	lsrs	r2, r3, #1
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ca9a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa2:	899b      	ldrh	r3, [r3, #12]
 800caa4:	4619      	mov	r1, r3
 800caa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caa8:	440b      	add	r3, r1
 800caaa:	3b01      	subs	r3, #1
 800caac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800caae:	8989      	ldrh	r1, [r1, #12]
 800cab0:	fbb3 f3f1 	udiv	r3, r3, r1
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d201      	bcs.n	800cabc <find_volume+0x41c>
 800cab8:	230d      	movs	r3, #13
 800caba:	e070      	b.n	800cb9e <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabe:	f04f 32ff 	mov.w	r2, #4294967295
 800cac2:	619a      	str	r2, [r3, #24]
 800cac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac6:	699a      	ldr	r2, [r3, #24]
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	2280      	movs	r2, #128	; 0x80
 800cad0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cad2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cad6:	2b03      	cmp	r3, #3
 800cad8:	d149      	bne.n	800cb6e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cadc:	333c      	adds	r3, #60	; 0x3c
 800cade:	3330      	adds	r3, #48	; 0x30
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fd fda5 	bl	800a630 <ld_word>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d140      	bne.n	800cb6e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800caec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caee:	3301      	adds	r3, #1
 800caf0:	4619      	mov	r1, r3
 800caf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800caf4:	f7fe f84c 	bl	800ab90 <move_window>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d137      	bne.n	800cb6e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800cafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb00:	2200      	movs	r2, #0
 800cb02:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	333c      	adds	r3, #60	; 0x3c
 800cb08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fd fd8f 	bl	800a630 <ld_word>
 800cb12:	4603      	mov	r3, r0
 800cb14:	461a      	mov	r2, r3
 800cb16:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d127      	bne.n	800cb6e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb20:	333c      	adds	r3, #60	; 0x3c
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fd fd9c 	bl	800a660 <ld_dword>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	4b1f      	ldr	r3, [pc, #124]	; (800cba8 <find_volume+0x508>)
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d11e      	bne.n	800cb6e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb32:	333c      	adds	r3, #60	; 0x3c
 800cb34:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fd fd91 	bl	800a660 <ld_dword>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	4b1a      	ldr	r3, [pc, #104]	; (800cbac <find_volume+0x50c>)
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d113      	bne.n	800cb6e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb48:	333c      	adds	r3, #60	; 0x3c
 800cb4a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fd fd86 	bl	800a660 <ld_dword>
 800cb54:	4602      	mov	r2, r0
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5c:	333c      	adds	r3, #60	; 0x3c
 800cb5e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fd fd7c 	bl	800a660 <ld_dword>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb70:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cb74:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cb76:	4b0e      	ldr	r3, [pc, #56]	; (800cbb0 <find_volume+0x510>)
 800cb78:	881b      	ldrh	r3, [r3, #0]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	4b0c      	ldr	r3, [pc, #48]	; (800cbb0 <find_volume+0x510>)
 800cb80:	801a      	strh	r2, [r3, #0]
 800cb82:	4b0b      	ldr	r3, [pc, #44]	; (800cbb0 <find_volume+0x510>)
 800cb84:	881a      	ldrh	r2, [r3, #0]
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8c:	4a09      	ldr	r2, [pc, #36]	; (800cbb4 <find_volume+0x514>)
 800cb8e:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	2200      	movs	r2, #0
 800cb94:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cb96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb98:	f7fd ff92 	bl	800aac0 <clear_lock>
#endif
	return FR_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3758      	adds	r7, #88	; 0x58
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	41615252 	.word	0x41615252
 800cbac:	61417272 	.word	0x61417272
 800cbb0:	200002f8 	.word	0x200002f8
 800cbb4:	2000031c 	.word	0x2000031c

0800cbb8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cbc2:	2309      	movs	r3, #9
 800cbc4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01c      	beq.n	800cc06 <validate+0x4e>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d018      	beq.n	800cc06 <validate+0x4e>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d013      	beq.n	800cc06 <validate+0x4e>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	889a      	ldrh	r2, [r3, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	88db      	ldrh	r3, [r3, #6]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d10c      	bne.n	800cc06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	785b      	ldrb	r3, [r3, #1]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fd fc7e 	bl	800a4f4 <disk_status>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	f003 0301 	and.w	r3, r3, #1
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <validate+0x4e>
			res = FR_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc06:	7bfb      	ldrb	r3, [r7, #15]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d102      	bne.n	800cc12 <validate+0x5a>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	e000      	b.n	800cc14 <validate+0x5c>
 800cc12:	2300      	movs	r3, #0
 800cc14:	683a      	ldr	r2, [r7, #0]
 800cc16:	6013      	str	r3, [r2, #0]
	return res;
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
	...

0800cc24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cc36:	f107 0310 	add.w	r3, r7, #16
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7ff fc95 	bl	800c56a <get_ldnumber>
 800cc40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	da01      	bge.n	800cc4c <f_mount+0x28>
 800cc48:	230b      	movs	r3, #11
 800cc4a:	e02b      	b.n	800cca4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cc4c:	4a17      	ldr	r2, [pc, #92]	; (800ccac <f_mount+0x88>)
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d005      	beq.n	800cc68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cc5c:	69b8      	ldr	r0, [r7, #24]
 800cc5e:	f7fd ff2f 	bl	800aac0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	2200      	movs	r2, #0
 800cc66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d002      	beq.n	800cc74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	490d      	ldr	r1, [pc, #52]	; (800ccac <f_mount+0x88>)
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <f_mount+0x66>
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d001      	beq.n	800cc8e <f_mount+0x6a>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	e00a      	b.n	800cca4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cc8e:	f107 010c 	add.w	r1, r7, #12
 800cc92:	f107 0308 	add.w	r3, r7, #8
 800cc96:	2200      	movs	r2, #0
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7ff fd01 	bl	800c6a0 <find_volume>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3720      	adds	r7, #32
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	200002f4 	.word	0x200002f4

0800ccb0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b09a      	sub	sp, #104	; 0x68
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <f_open+0x18>
 800ccc4:	2309      	movs	r3, #9
 800ccc6:	e1bb      	b.n	800d040 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ccc8:	79fb      	ldrb	r3, [r7, #7]
 800ccca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ccd0:	79fa      	ldrb	r2, [r7, #7]
 800ccd2:	f107 0114 	add.w	r1, r7, #20
 800ccd6:	f107 0308 	add.w	r3, r7, #8
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff fce0 	bl	800c6a0 <find_volume>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cce6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f040 819f 	bne.w	800d02e <f_open+0x37e>
		dj.obj.fs = fs;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	f107 0318 	add.w	r3, r7, #24
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7ff fb9f 	bl	800c440 <follow_path>
 800cd02:	4603      	mov	r3, r0
 800cd04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cd08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d11a      	bne.n	800cd46 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cd10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cd14:	b25b      	sxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	da03      	bge.n	800cd22 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cd1a:	2306      	movs	r3, #6
 800cd1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cd20:	e011      	b.n	800cd46 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd22:	79fb      	ldrb	r3, [r7, #7]
 800cd24:	f023 0301 	bic.w	r3, r3, #1
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	bf14      	ite	ne
 800cd2c:	2301      	movne	r3, #1
 800cd2e:	2300      	moveq	r3, #0
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	461a      	mov	r2, r3
 800cd34:	f107 0318 	add.w	r3, r7, #24
 800cd38:	4611      	mov	r1, r2
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7fd fd78 	bl	800a830 <chk_lock>
 800cd40:	4603      	mov	r3, r0
 800cd42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cd46:	79fb      	ldrb	r3, [r7, #7]
 800cd48:	f003 031c 	and.w	r3, r3, #28
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d07f      	beq.n	800ce50 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cd50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d017      	beq.n	800cd88 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cd58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd5c:	2b04      	cmp	r3, #4
 800cd5e:	d10e      	bne.n	800cd7e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cd60:	f7fd fdc2 	bl	800a8e8 <enq_lock>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d006      	beq.n	800cd78 <f_open+0xc8>
 800cd6a:	f107 0318 	add.w	r3, r7, #24
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff f820 	bl	800bdb4 <dir_register>
 800cd74:	4603      	mov	r3, r0
 800cd76:	e000      	b.n	800cd7a <f_open+0xca>
 800cd78:	2312      	movs	r3, #18
 800cd7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cd7e:	79fb      	ldrb	r3, [r7, #7]
 800cd80:	f043 0308 	orr.w	r3, r3, #8
 800cd84:	71fb      	strb	r3, [r7, #7]
 800cd86:	e010      	b.n	800cdaa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cd88:	7fbb      	ldrb	r3, [r7, #30]
 800cd8a:	f003 0311 	and.w	r3, r3, #17
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d003      	beq.n	800cd9a <f_open+0xea>
					res = FR_DENIED;
 800cd92:	2307      	movs	r3, #7
 800cd94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cd98:	e007      	b.n	800cdaa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cd9a:	79fb      	ldrb	r3, [r7, #7]
 800cd9c:	f003 0304 	and.w	r3, r3, #4
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d002      	beq.n	800cdaa <f_open+0xfa>
 800cda4:	2308      	movs	r3, #8
 800cda6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cdaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d168      	bne.n	800ce84 <f_open+0x1d4>
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	f003 0308 	and.w	r3, r3, #8
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d063      	beq.n	800ce84 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cdbc:	f7fd f94a 	bl	800a054 <get_fattime>
 800cdc0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	330e      	adds	r3, #14
 800cdc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fd fc87 	bl	800a6dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd0:	3316      	adds	r3, #22
 800cdd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fd fc81 	bl	800a6dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	330b      	adds	r3, #11
 800cdde:	2220      	movs	r2, #32
 800cde0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cde6:	4611      	mov	r1, r2
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fe fc50 	bl	800b68e <ld_clust>
 800cdee:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fe fc68 	bl	800b6cc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	331c      	adds	r3, #28
 800ce00:	2100      	movs	r1, #0
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fd fc6a 	bl	800a6dc <st_dword>
					fs->wflag = 1;
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ce0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d037      	beq.n	800ce84 <f_open+0x1d4>
						dw = fs->winsect;
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce18:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ce1a:	f107 0318 	add.w	r3, r7, #24
 800ce1e:	2200      	movs	r2, #0
 800ce20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fe f958 	bl	800b0d8 <remove_chain>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ce2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d126      	bne.n	800ce84 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fd fea8 	bl	800ab90 <move_window>
 800ce40:	4603      	mov	r3, r0
 800ce42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce4a:	3a01      	subs	r2, #1
 800ce4c:	615a      	str	r2, [r3, #20]
 800ce4e:	e019      	b.n	800ce84 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ce50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d115      	bne.n	800ce84 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ce58:	7fbb      	ldrb	r3, [r7, #30]
 800ce5a:	f003 0310 	and.w	r3, r3, #16
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d003      	beq.n	800ce6a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ce62:	2304      	movs	r3, #4
 800ce64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ce68:	e00c      	b.n	800ce84 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ce6a:	79fb      	ldrb	r3, [r7, #7]
 800ce6c:	f003 0302 	and.w	r3, r3, #2
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d007      	beq.n	800ce84 <f_open+0x1d4>
 800ce74:	7fbb      	ldrb	r3, [r7, #30]
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d002      	beq.n	800ce84 <f_open+0x1d4>
						res = FR_DENIED;
 800ce7e:	2307      	movs	r3, #7
 800ce80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ce84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d128      	bne.n	800cede <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	f003 0308 	and.w	r3, r3, #8
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d003      	beq.n	800ce9e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce9c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ceac:	79fb      	ldrb	r3, [r7, #7]
 800ceae:	f023 0301 	bic.w	r3, r3, #1
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	bf14      	ite	ne
 800ceb6:	2301      	movne	r3, #1
 800ceb8:	2300      	moveq	r3, #0
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	461a      	mov	r2, r3
 800cebe:	f107 0318 	add.w	r3, r7, #24
 800cec2:	4611      	mov	r1, r2
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fd fd31 	bl	800a92c <inc_lock>
 800ceca:	4602      	mov	r2, r0
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <f_open+0x22e>
 800ced8:	2302      	movs	r3, #2
 800ceda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cede:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f040 80a3 	bne.w	800d02e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceec:	4611      	mov	r1, r2
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fe fbcd 	bl	800b68e <ld_clust>
 800cef4:	4602      	mov	r2, r0
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	331c      	adds	r3, #28
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fd fbae 	bl	800a660 <ld_dword>
 800cf04:	4602      	mov	r2, r0
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cf10:	697a      	ldr	r2, [r7, #20]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	88da      	ldrh	r2, [r3, #6]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	79fa      	ldrb	r2, [r7, #7]
 800cf22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2200      	movs	r2, #0
 800cf34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3330      	adds	r3, #48	; 0x30
 800cf3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cf3e:	2100      	movs	r1, #0
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fd fc18 	bl	800a776 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cf46:	79fb      	ldrb	r3, [r7, #7]
 800cf48:	f003 0320 	and.w	r3, r3, #32
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d06e      	beq.n	800d02e <f_open+0x37e>
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d06a      	beq.n	800d02e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	68da      	ldr	r2, [r3, #12]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	895b      	ldrh	r3, [r3, #10]
 800cf64:	461a      	mov	r2, r3
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	899b      	ldrh	r3, [r3, #12]
 800cf6a:	fb03 f302 	mul.w	r3, r3, r2
 800cf6e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf7c:	e016      	b.n	800cfac <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fd fec1 	bl	800ad0a <get_fat>
 800cf88:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800cf8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d802      	bhi.n	800cf96 <f_open+0x2e6>
 800cf90:	2302      	movs	r3, #2
 800cf92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cf96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9c:	d102      	bne.n	800cfa4 <f_open+0x2f4>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cfa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d103      	bne.n	800cfbc <f_open+0x30c>
 800cfb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d8e0      	bhi.n	800cf7e <f_open+0x2ce>
				}
				fp->clust = clst;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfc0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cfc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d131      	bne.n	800d02e <f_open+0x37e>
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	899b      	ldrh	r3, [r3, #12]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfd2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfd6:	fb02 f201 	mul.w	r2, r2, r1
 800cfda:	1a9b      	subs	r3, r3, r2
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d026      	beq.n	800d02e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fd fe71 	bl	800accc <clust2sect>
 800cfea:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cfec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d103      	bne.n	800cffa <f_open+0x34a>
						res = FR_INT_ERR;
 800cff2:	2302      	movs	r3, #2
 800cff4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cff8:	e019      	b.n	800d02e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	899b      	ldrh	r3, [r3, #12]
 800cffe:	461a      	mov	r2, r3
 800d000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d002:	fbb3 f2f2 	udiv	r2, r3, r2
 800d006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d008:	441a      	add	r2, r3
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	7858      	ldrb	r0, [r3, #1]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6a1a      	ldr	r2, [r3, #32]
 800d01c:	2301      	movs	r3, #1
 800d01e:	f7fd faa9 	bl	800a574 <disk_read>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d002      	beq.n	800d02e <f_open+0x37e>
 800d028:	2301      	movs	r3, #1
 800d02a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d02e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d032:	2b00      	cmp	r3, #0
 800d034:	d002      	beq.n	800d03c <f_open+0x38c>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d03c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d040:	4618      	mov	r0, r3
 800d042:	3768      	adds	r7, #104	; 0x68
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08e      	sub	sp, #56	; 0x38
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
 800d054:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	2200      	movs	r2, #0
 800d05e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f107 0214 	add.w	r2, r7, #20
 800d066:	4611      	mov	r1, r2
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff fda5 	bl	800cbb8 <validate>
 800d06e:	4603      	mov	r3, r0
 800d070:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d074:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d107      	bne.n	800d08c <f_read+0x44>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	7d5b      	ldrb	r3, [r3, #21]
 800d080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <f_read+0x4a>
 800d08c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d090:	e135      	b.n	800d2fe <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	7d1b      	ldrb	r3, [r3, #20]
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <f_read+0x5a>
 800d09e:	2307      	movs	r3, #7
 800d0a0:	e12d      	b.n	800d2fe <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	68da      	ldr	r2, [r3, #12]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	699b      	ldr	r3, [r3, #24]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	f240 811e 	bls.w	800d2f4 <f_read+0x2ac>
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d0bc:	e11a      	b.n	800d2f4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	699b      	ldr	r3, [r3, #24]
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	8992      	ldrh	r2, [r2, #12]
 800d0c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0ca:	fb02 f201 	mul.w	r2, r2, r1
 800d0ce:	1a9b      	subs	r3, r3, r2
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f040 80d5 	bne.w	800d280 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	8992      	ldrh	r2, [r2, #12]
 800d0de:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0e2:	697a      	ldr	r2, [r7, #20]
 800d0e4:	8952      	ldrh	r2, [r2, #10]
 800d0e6:	3a01      	subs	r2, #1
 800d0e8:	4013      	ands	r3, r2
 800d0ea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d12f      	bne.n	800d152 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	699b      	ldr	r3, [r3, #24]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d103      	bne.n	800d102 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	633b      	str	r3, [r7, #48]	; 0x30
 800d100:	e013      	b.n	800d12a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d106:	2b00      	cmp	r3, #0
 800d108:	d007      	beq.n	800d11a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	699b      	ldr	r3, [r3, #24]
 800d10e:	4619      	mov	r1, r3
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7fe f8de 	bl	800b2d2 <clmt_clust>
 800d116:	6338      	str	r0, [r7, #48]	; 0x30
 800d118:	e007      	b.n	800d12a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	69db      	ldr	r3, [r3, #28]
 800d120:	4619      	mov	r1, r3
 800d122:	4610      	mov	r0, r2
 800d124:	f7fd fdf1 	bl	800ad0a <get_fat>
 800d128:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d804      	bhi.n	800d13a <f_read+0xf2>
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2202      	movs	r2, #2
 800d134:	755a      	strb	r2, [r3, #21]
 800d136:	2302      	movs	r3, #2
 800d138:	e0e1      	b.n	800d2fe <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d140:	d104      	bne.n	800d14c <f_read+0x104>
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2201      	movs	r2, #1
 800d146:	755a      	strb	r2, [r3, #21]
 800d148:	2301      	movs	r3, #1
 800d14a:	e0d8      	b.n	800d2fe <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d150:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d152:	697a      	ldr	r2, [r7, #20]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	69db      	ldr	r3, [r3, #28]
 800d158:	4619      	mov	r1, r3
 800d15a:	4610      	mov	r0, r2
 800d15c:	f7fd fdb6 	bl	800accc <clust2sect>
 800d160:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d104      	bne.n	800d172 <f_read+0x12a>
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2202      	movs	r2, #2
 800d16c:	755a      	strb	r2, [r3, #21]
 800d16e:	2302      	movs	r3, #2
 800d170:	e0c5      	b.n	800d2fe <f_read+0x2b6>
			sect += csect;
 800d172:	69ba      	ldr	r2, [r7, #24]
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	4413      	add	r3, r2
 800d178:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	899b      	ldrh	r3, [r3, #12]
 800d17e:	461a      	mov	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	fbb3 f3f2 	udiv	r3, r3, r2
 800d186:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d041      	beq.n	800d212 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d18e:	69fa      	ldr	r2, [r7, #28]
 800d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d192:	4413      	add	r3, r2
 800d194:	697a      	ldr	r2, [r7, #20]
 800d196:	8952      	ldrh	r2, [r2, #10]
 800d198:	4293      	cmp	r3, r2
 800d19a:	d905      	bls.n	800d1a8 <f_read+0x160>
					cc = fs->csize - csect;
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	895b      	ldrh	r3, [r3, #10]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	7858      	ldrb	r0, [r3, #1]
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	69ba      	ldr	r2, [r7, #24]
 800d1b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1b2:	f7fd f9df 	bl	800a574 <disk_read>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d004      	beq.n	800d1c6 <f_read+0x17e>
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	755a      	strb	r2, [r3, #21]
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e09b      	b.n	800d2fe <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	7d1b      	ldrb	r3, [r3, #20]
 800d1ca:	b25b      	sxtb	r3, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	da18      	bge.n	800d202 <f_read+0x1ba>
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6a1a      	ldr	r2, [r3, #32]
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d911      	bls.n	800d202 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6a1a      	ldr	r2, [r3, #32]
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	697a      	ldr	r2, [r7, #20]
 800d1e8:	8992      	ldrh	r2, [r2, #12]
 800d1ea:	fb02 f303 	mul.w	r3, r2, r3
 800d1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1f0:	18d0      	adds	r0, r2, r3
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	899b      	ldrh	r3, [r3, #12]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	f7fd fa99 	bl	800a734 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	899b      	ldrh	r3, [r3, #12]
 800d206:	461a      	mov	r2, r3
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	fb02 f303 	mul.w	r3, r2, r3
 800d20e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d210:	e05c      	b.n	800d2cc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	69ba      	ldr	r2, [r7, #24]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d02e      	beq.n	800d27a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	7d1b      	ldrb	r3, [r3, #20]
 800d220:	b25b      	sxtb	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	da18      	bge.n	800d258 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	7858      	ldrb	r0, [r3, #1]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6a1a      	ldr	r2, [r3, #32]
 800d234:	2301      	movs	r3, #1
 800d236:	f7fd f9bd 	bl	800a5b4 <disk_write>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d004      	beq.n	800d24a <f_read+0x202>
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2201      	movs	r2, #1
 800d244:	755a      	strb	r2, [r3, #21]
 800d246:	2301      	movs	r3, #1
 800d248:	e059      	b.n	800d2fe <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	7d1b      	ldrb	r3, [r3, #20]
 800d24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d252:	b2da      	uxtb	r2, r3
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	7858      	ldrb	r0, [r3, #1]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d262:	2301      	movs	r3, #1
 800d264:	69ba      	ldr	r2, [r7, #24]
 800d266:	f7fd f985 	bl	800a574 <disk_read>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d004      	beq.n	800d27a <f_read+0x232>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2201      	movs	r2, #1
 800d274:	755a      	strb	r2, [r3, #21]
 800d276:	2301      	movs	r3, #1
 800d278:	e041      	b.n	800d2fe <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	69ba      	ldr	r2, [r7, #24]
 800d27e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	899b      	ldrh	r3, [r3, #12]
 800d284:	4618      	mov	r0, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	697a      	ldr	r2, [r7, #20]
 800d28c:	8992      	ldrh	r2, [r2, #12]
 800d28e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d292:	fb02 f201 	mul.w	r2, r2, r1
 800d296:	1a9b      	subs	r3, r3, r2
 800d298:	1ac3      	subs	r3, r0, r3
 800d29a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d29c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d901      	bls.n	800d2a8 <f_read+0x260>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	699b      	ldr	r3, [r3, #24]
 800d2b2:	697a      	ldr	r2, [r7, #20]
 800d2b4:	8992      	ldrh	r2, [r2, #12]
 800d2b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d2ba:	fb02 f200 	mul.w	r2, r2, r0
 800d2be:	1a9b      	subs	r3, r3, r2
 800d2c0:	440b      	add	r3, r1
 800d2c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2c8:	f7fd fa34 	bl	800a734 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	4413      	add	r3, r2
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	699a      	ldr	r2, [r3, #24]
 800d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2da:	441a      	add	r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	619a      	str	r2, [r3, #24]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e6:	441a      	add	r2, r3
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	601a      	str	r2, [r3, #0]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f47f aee1 	bne.w	800d0be <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3738      	adds	r7, #56	; 0x38
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b08c      	sub	sp, #48	; 0x30
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	60f8      	str	r0, [r7, #12]
 800d30e:	60b9      	str	r1, [r7, #8]
 800d310:	607a      	str	r2, [r7, #4]
 800d312:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2200      	movs	r2, #0
 800d31c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f107 0210 	add.w	r2, r7, #16
 800d324:	4611      	mov	r1, r2
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff fc46 	bl	800cbb8 <validate>
 800d32c:	4603      	mov	r3, r0
 800d32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d336:	2b00      	cmp	r3, #0
 800d338:	d107      	bne.n	800d34a <f_write+0x44>
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	7d5b      	ldrb	r3, [r3, #21]
 800d33e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <f_write+0x4a>
 800d34a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d34e:	e16a      	b.n	800d626 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	7d1b      	ldrb	r3, [r3, #20]
 800d354:	f003 0302 	and.w	r3, r3, #2
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d101      	bne.n	800d360 <f_write+0x5a>
 800d35c:	2307      	movs	r3, #7
 800d35e:	e162      	b.n	800d626 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	699a      	ldr	r2, [r3, #24]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	441a      	add	r2, r3
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	f080 814c 	bcs.w	800d60a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	43db      	mvns	r3, r3
 800d378:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d37a:	e146      	b.n	800d60a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	693a      	ldr	r2, [r7, #16]
 800d382:	8992      	ldrh	r2, [r2, #12]
 800d384:	fbb3 f1f2 	udiv	r1, r3, r2
 800d388:	fb02 f201 	mul.w	r2, r2, r1
 800d38c:	1a9b      	subs	r3, r3, r2
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f040 80f1 	bne.w	800d576 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	699b      	ldr	r3, [r3, #24]
 800d398:	693a      	ldr	r2, [r7, #16]
 800d39a:	8992      	ldrh	r2, [r2, #12]
 800d39c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	8952      	ldrh	r2, [r2, #10]
 800d3a4:	3a01      	subs	r2, #1
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d143      	bne.n	800d438 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10c      	bne.n	800d3d2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d11a      	bne.n	800d3fa <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fd feea 	bl	800b1a2 <create_chain>
 800d3ce:	62b8      	str	r0, [r7, #40]	; 0x28
 800d3d0:	e013      	b.n	800d3fa <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d007      	beq.n	800d3ea <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7fd ff76 	bl	800b2d2 <clmt_clust>
 800d3e6:	62b8      	str	r0, [r7, #40]	; 0x28
 800d3e8:	e007      	b.n	800d3fa <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	69db      	ldr	r3, [r3, #28]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f7fd fed5 	bl	800b1a2 <create_chain>
 800d3f8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 8109 	beq.w	800d614 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d404:	2b01      	cmp	r3, #1
 800d406:	d104      	bne.n	800d412 <f_write+0x10c>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2202      	movs	r2, #2
 800d40c:	755a      	strb	r2, [r3, #21]
 800d40e:	2302      	movs	r3, #2
 800d410:	e109      	b.n	800d626 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d418:	d104      	bne.n	800d424 <f_write+0x11e>
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2201      	movs	r2, #1
 800d41e:	755a      	strb	r2, [r3, #21]
 800d420:	2301      	movs	r3, #1
 800d422:	e100      	b.n	800d626 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d428:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d102      	bne.n	800d438 <f_write+0x132>
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d436:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	7d1b      	ldrb	r3, [r3, #20]
 800d43c:	b25b      	sxtb	r3, r3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	da18      	bge.n	800d474 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	7858      	ldrb	r0, [r3, #1]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6a1a      	ldr	r2, [r3, #32]
 800d450:	2301      	movs	r3, #1
 800d452:	f7fd f8af 	bl	800a5b4 <disk_write>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d004      	beq.n	800d466 <f_write+0x160>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2201      	movs	r2, #1
 800d460:	755a      	strb	r2, [r3, #21]
 800d462:	2301      	movs	r3, #1
 800d464:	e0df      	b.n	800d626 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	7d1b      	ldrb	r3, [r3, #20]
 800d46a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d474:	693a      	ldr	r2, [r7, #16]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	69db      	ldr	r3, [r3, #28]
 800d47a:	4619      	mov	r1, r3
 800d47c:	4610      	mov	r0, r2
 800d47e:	f7fd fc25 	bl	800accc <clust2sect>
 800d482:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d104      	bne.n	800d494 <f_write+0x18e>
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2202      	movs	r2, #2
 800d48e:	755a      	strb	r2, [r3, #21]
 800d490:	2302      	movs	r3, #2
 800d492:	e0c8      	b.n	800d626 <f_write+0x320>
			sect += csect;
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	4413      	add	r3, r2
 800d49a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	899b      	ldrh	r3, [r3, #12]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4a8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d4aa:	6a3b      	ldr	r3, [r7, #32]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d043      	beq.n	800d538 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d4b0:	69ba      	ldr	r2, [r7, #24]
 800d4b2:	6a3b      	ldr	r3, [r7, #32]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	693a      	ldr	r2, [r7, #16]
 800d4b8:	8952      	ldrh	r2, [r2, #10]
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d905      	bls.n	800d4ca <f_write+0x1c4>
					cc = fs->csize - csect;
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	895b      	ldrh	r3, [r3, #10]
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	7858      	ldrb	r0, [r3, #1]
 800d4ce:	6a3b      	ldr	r3, [r7, #32]
 800d4d0:	697a      	ldr	r2, [r7, #20]
 800d4d2:	69f9      	ldr	r1, [r7, #28]
 800d4d4:	f7fd f86e 	bl	800a5b4 <disk_write>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d004      	beq.n	800d4e8 <f_write+0x1e2>
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	755a      	strb	r2, [r3, #21]
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e09e      	b.n	800d626 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6a1a      	ldr	r2, [r3, #32]
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	6a3a      	ldr	r2, [r7, #32]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d918      	bls.n	800d528 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6a1a      	ldr	r2, [r3, #32]
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	693a      	ldr	r2, [r7, #16]
 800d506:	8992      	ldrh	r2, [r2, #12]
 800d508:	fb02 f303 	mul.w	r3, r2, r3
 800d50c:	69fa      	ldr	r2, [r7, #28]
 800d50e:	18d1      	adds	r1, r2, r3
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	899b      	ldrh	r3, [r3, #12]
 800d514:	461a      	mov	r2, r3
 800d516:	f7fd f90d 	bl	800a734 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	7d1b      	ldrb	r3, [r3, #20]
 800d51e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d522:	b2da      	uxtb	r2, r3
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	899b      	ldrh	r3, [r3, #12]
 800d52c:	461a      	mov	r2, r3
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	fb02 f303 	mul.w	r3, r2, r3
 800d534:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d536:	e04b      	b.n	800d5d0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6a1b      	ldr	r3, [r3, #32]
 800d53c:	697a      	ldr	r2, [r7, #20]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d016      	beq.n	800d570 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	699a      	ldr	r2, [r3, #24]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d210      	bcs.n	800d570 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	7858      	ldrb	r0, [r3, #1]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d558:	2301      	movs	r3, #1
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	f7fd f80a 	bl	800a574 <disk_read>
 800d560:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d562:	2b00      	cmp	r3, #0
 800d564:	d004      	beq.n	800d570 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2201      	movs	r2, #1
 800d56a:	755a      	strb	r2, [r3, #21]
 800d56c:	2301      	movs	r3, #1
 800d56e:	e05a      	b.n	800d626 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	899b      	ldrh	r3, [r3, #12]
 800d57a:	4618      	mov	r0, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	699b      	ldr	r3, [r3, #24]
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	8992      	ldrh	r2, [r2, #12]
 800d584:	fbb3 f1f2 	udiv	r1, r3, r2
 800d588:	fb02 f201 	mul.w	r2, r2, r1
 800d58c:	1a9b      	subs	r3, r3, r2
 800d58e:	1ac3      	subs	r3, r0, r3
 800d590:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	429a      	cmp	r2, r3
 800d598:	d901      	bls.n	800d59e <f_write+0x298>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	693a      	ldr	r2, [r7, #16]
 800d5aa:	8992      	ldrh	r2, [r2, #12]
 800d5ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800d5b0:	fb02 f200 	mul.w	r2, r2, r0
 800d5b4:	1a9b      	subs	r3, r3, r2
 800d5b6:	440b      	add	r3, r1
 800d5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ba:	69f9      	ldr	r1, [r7, #28]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fd f8b9 	bl	800a734 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	7d1b      	ldrb	r3, [r3, #20]
 800d5c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d5ca:	b2da      	uxtb	r2, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d5d0:	69fa      	ldr	r2, [r7, #28]
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d4:	4413      	add	r3, r2
 800d5d6:	61fb      	str	r3, [r7, #28]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	699a      	ldr	r2, [r3, #24]
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	441a      	add	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	619a      	str	r2, [r3, #24]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	68da      	ldr	r2, [r3, #12]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	699b      	ldr	r3, [r3, #24]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	bf38      	it	cc
 800d5f0:	461a      	movcc	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	60da      	str	r2, [r3, #12]
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fc:	441a      	add	r2, r3
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	601a      	str	r2, [r3, #0]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f47f aeb5 	bne.w	800d37c <f_write+0x76>
 800d612:	e000      	b.n	800d616 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d614:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	7d1b      	ldrb	r3, [r3, #20]
 800d61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d61e:	b2da      	uxtb	r2, r3
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	3730      	adds	r7, #48	; 0x30
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b086      	sub	sp, #24
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f107 0208 	add.w	r2, r7, #8
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff faba 	bl	800cbb8 <validate>
 800d644:	4603      	mov	r3, r0
 800d646:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d648:	7dfb      	ldrb	r3, [r7, #23]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d168      	bne.n	800d720 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	7d1b      	ldrb	r3, [r3, #20]
 800d652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d656:	2b00      	cmp	r3, #0
 800d658:	d062      	beq.n	800d720 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	7d1b      	ldrb	r3, [r3, #20]
 800d65e:	b25b      	sxtb	r3, r3
 800d660:	2b00      	cmp	r3, #0
 800d662:	da15      	bge.n	800d690 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	7858      	ldrb	r0, [r3, #1]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a1a      	ldr	r2, [r3, #32]
 800d672:	2301      	movs	r3, #1
 800d674:	f7fc ff9e 	bl	800a5b4 <disk_write>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d001      	beq.n	800d682 <f_sync+0x54>
 800d67e:	2301      	movs	r3, #1
 800d680:	e04f      	b.n	800d722 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	7d1b      	ldrb	r3, [r3, #20]
 800d686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d690:	f7fc fce0 	bl	800a054 <get_fattime>
 800d694:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d696:	68ba      	ldr	r2, [r7, #8]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69c:	4619      	mov	r1, r3
 800d69e:	4610      	mov	r0, r2
 800d6a0:	f7fd fa76 	bl	800ab90 <move_window>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d6a8:	7dfb      	ldrb	r3, [r7, #23]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d138      	bne.n	800d720 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	330b      	adds	r3, #11
 800d6b8:	781a      	ldrb	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	330b      	adds	r3, #11
 800d6be:	f042 0220 	orr.w	r2, r2, #32
 800d6c2:	b2d2      	uxtb	r2, r2
 800d6c4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6818      	ldr	r0, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	68f9      	ldr	r1, [r7, #12]
 800d6d2:	f7fd fffb 	bl	800b6cc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f103 021c 	add.w	r2, r3, #28
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	4610      	mov	r0, r2
 800d6e4:	f7fc fffa 	bl	800a6dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	3316      	adds	r3, #22
 800d6ec:	6939      	ldr	r1, [r7, #16]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fc fff4 	bl	800a6dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	3312      	adds	r3, #18
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fc ffd3 	bl	800a6a6 <st_word>
					fs->wflag = 1;
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2201      	movs	r2, #1
 800d704:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7fd fa6f 	bl	800abec <sync_fs>
 800d70e:	4603      	mov	r3, r0
 800d710:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	7d1b      	ldrb	r3, [r3, #20]
 800d716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d720:	7dfb      	ldrb	r3, [r7, #23]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3718      	adds	r7, #24
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7ff ff7b 	bl	800d62e <f_sync>
 800d738:	4603      	mov	r3, r0
 800d73a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d118      	bne.n	800d774 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f107 0208 	add.w	r2, r7, #8
 800d748:	4611      	mov	r1, r2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7ff fa34 	bl	800cbb8 <validate>
 800d750:	4603      	mov	r3, r0
 800d752:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d754:	7bfb      	ldrb	r3, [r7, #15]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d10c      	bne.n	800d774 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fd f972 	bl	800aa48 <dec_lock>
 800d764:	4603      	mov	r3, r0
 800d766:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d768:	7bfb      	ldrb	r3, [r7, #15]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d102      	bne.n	800d774 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d774:	7bfb      	ldrb	r3, [r7, #15]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d77e:	b590      	push	{r4, r7, lr}
 800d780:	b093      	sub	sp, #76	; 0x4c
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d786:	f107 010c 	add.w	r1, r7, #12
 800d78a:	1d3b      	adds	r3, r7, #4
 800d78c:	2200      	movs	r2, #0
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fe ff86 	bl	800c6a0 <find_volume>
 800d794:	4603      	mov	r3, r0
 800d796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d79a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d131      	bne.n	800d806 <f_chdir+0x88>
		dj.obj.fs = fs;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	f107 0310 	add.w	r3, r7, #16
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fe fe46 	bl	800c440 <follow_path>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 800d7ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d11a      	bne.n	800d7f8 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800d7c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7c6:	b25b      	sxtb	r3, r3
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	da03      	bge.n	800d7d4 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	69ba      	ldr	r2, [r7, #24]
 800d7d0:	61da      	str	r2, [r3, #28]
 800d7d2:	e011      	b.n	800d7f8 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800d7d4:	7dbb      	ldrb	r3, [r7, #22]
 800d7d6:	f003 0310 	and.w	r3, r3, #16
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d009      	beq.n	800d7f2 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7e2:	68fc      	ldr	r4, [r7, #12]
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7fd ff51 	bl	800b68e <ld_clust>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	61e3      	str	r3, [r4, #28]
 800d7f0:	e002      	b.n	800d7f8 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800d7f2:	2305      	movs	r3, #5
 800d7f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d7f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d7fc:	2b04      	cmp	r3, #4
 800d7fe:	d102      	bne.n	800d806 <f_chdir+0x88>
 800d800:	2305      	movs	r3, #5
 800d802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 800d806:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	374c      	adds	r7, #76	; 0x4c
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd90      	pop	{r4, r7, pc}

0800d812 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b090      	sub	sp, #64	; 0x40
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
 800d81a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f107 0208 	add.w	r2, r7, #8
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff f9c7 	bl	800cbb8 <validate>
 800d82a:	4603      	mov	r3, r0
 800d82c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d830:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d834:	2b00      	cmp	r3, #0
 800d836:	d103      	bne.n	800d840 <f_lseek+0x2e>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	7d5b      	ldrb	r3, [r3, #21]
 800d83c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d840:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <f_lseek+0x3c>
 800d848:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d84c:	e201      	b.n	800dc52 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 80d9 	beq.w	800da0a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d85e:	d15a      	bne.n	800d916 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d864:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d868:	1d1a      	adds	r2, r3, #4
 800d86a:	627a      	str	r2, [r7, #36]	; 0x24
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	2302      	movs	r3, #2
 800d872:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d03a      	beq.n	800d8f6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d882:	613b      	str	r3, [r7, #16]
 800d884:	2300      	movs	r3, #0
 800d886:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88a:	3302      	adds	r3, #2
 800d88c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d894:	3301      	adds	r3, #1
 800d896:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fd fa34 	bl	800ad0a <get_fat>
 800d8a2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d804      	bhi.n	800d8b4 <f_lseek+0xa2>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2202      	movs	r2, #2
 800d8ae:	755a      	strb	r2, [r3, #21]
 800d8b0:	2302      	movs	r3, #2
 800d8b2:	e1ce      	b.n	800dc52 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ba:	d104      	bne.n	800d8c6 <f_lseek+0xb4>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	755a      	strb	r2, [r3, #21]
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e1c5      	b.n	800dc52 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d0de      	beq.n	800d88e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d809      	bhi.n	800d8ec <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	1d1a      	adds	r2, r3, #4
 800d8dc:	627a      	str	r2, [r7, #36]	; 0x24
 800d8de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8e0:	601a      	str	r2, [r3, #0]
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	1d1a      	adds	r2, r3, #4
 800d8e6:	627a      	str	r2, [r7, #36]	; 0x24
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	6a1b      	ldr	r3, [r3, #32]
 800d8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d3c4      	bcc.n	800d880 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8fc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d8fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	429a      	cmp	r2, r3
 800d904:	d803      	bhi.n	800d90e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]
 800d90c:	e19f      	b.n	800dc4e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d90e:	2311      	movs	r3, #17
 800d910:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d914:	e19b      	b.n	800dc4e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	683a      	ldr	r2, [r7, #0]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d902      	bls.n	800d926 <f_lseek+0x114>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	683a      	ldr	r2, [r7, #0]
 800d92a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f000 818d 	beq.w	800dc4e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	3b01      	subs	r3, #1
 800d938:	4619      	mov	r1, r3
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7fd fcc9 	bl	800b2d2 <clmt_clust>
 800d940:	4602      	mov	r2, r0
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	69db      	ldr	r3, [r3, #28]
 800d94c:	4619      	mov	r1, r3
 800d94e:	4610      	mov	r0, r2
 800d950:	f7fd f9bc 	bl	800accc <clust2sect>
 800d954:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d104      	bne.n	800d966 <f_lseek+0x154>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2202      	movs	r2, #2
 800d960:	755a      	strb	r2, [r3, #21]
 800d962:	2302      	movs	r3, #2
 800d964:	e175      	b.n	800dc52 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	3b01      	subs	r3, #1
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	8992      	ldrh	r2, [r2, #12]
 800d96e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	8952      	ldrh	r2, [r2, #10]
 800d976:	3a01      	subs	r2, #1
 800d978:	4013      	ands	r3, r2
 800d97a:	69ba      	ldr	r2, [r7, #24]
 800d97c:	4413      	add	r3, r2
 800d97e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	699b      	ldr	r3, [r3, #24]
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	8992      	ldrh	r2, [r2, #12]
 800d988:	fbb3 f1f2 	udiv	r1, r3, r2
 800d98c:	fb02 f201 	mul.w	r2, r2, r1
 800d990:	1a9b      	subs	r3, r3, r2
 800d992:	2b00      	cmp	r3, #0
 800d994:	f000 815b 	beq.w	800dc4e <f_lseek+0x43c>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6a1b      	ldr	r3, [r3, #32]
 800d99c:	69ba      	ldr	r2, [r7, #24]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	f000 8155 	beq.w	800dc4e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	7d1b      	ldrb	r3, [r3, #20]
 800d9a8:	b25b      	sxtb	r3, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	da18      	bge.n	800d9e0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	7858      	ldrb	r0, [r3, #1]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6a1a      	ldr	r2, [r3, #32]
 800d9bc:	2301      	movs	r3, #1
 800d9be:	f7fc fdf9 	bl	800a5b4 <disk_write>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d004      	beq.n	800d9d2 <f_lseek+0x1c0>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	755a      	strb	r2, [r3, #21]
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e13f      	b.n	800dc52 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	7d1b      	ldrb	r3, [r3, #20]
 800d9d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	7858      	ldrb	r0, [r3, #1]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	69ba      	ldr	r2, [r7, #24]
 800d9ee:	f7fc fdc1 	bl	800a574 <disk_read>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d004      	beq.n	800da02 <f_lseek+0x1f0>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	755a      	strb	r2, [r3, #21]
 800d9fe:	2301      	movs	r3, #1
 800da00:	e127      	b.n	800dc52 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	69ba      	ldr	r2, [r7, #24]
 800da06:	621a      	str	r2, [r3, #32]
 800da08:	e121      	b.n	800dc4e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	429a      	cmp	r2, r3
 800da12:	d908      	bls.n	800da26 <f_lseek+0x214>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7d1b      	ldrb	r3, [r3, #20]
 800da18:	f003 0302 	and.w	r3, r3, #2
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d102      	bne.n	800da26 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	637b      	str	r3, [r7, #52]	; 0x34
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da34:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f000 80b5 	beq.w	800dba8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	895b      	ldrh	r3, [r3, #10]
 800da42:	461a      	mov	r2, r3
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	899b      	ldrh	r3, [r3, #12]
 800da48:	fb03 f302 	mul.w	r3, r3, r2
 800da4c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d01b      	beq.n	800da8c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	1e5a      	subs	r2, r3, #1
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	fbb2 f2f3 	udiv	r2, r2, r3
 800da5e:	6a3b      	ldr	r3, [r7, #32]
 800da60:	1e59      	subs	r1, r3, #1
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800da68:	429a      	cmp	r2, r3
 800da6a:	d30f      	bcc.n	800da8c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	1e5a      	subs	r2, r3, #1
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	425b      	negs	r3, r3
 800da74:	401a      	ands	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	699b      	ldr	r3, [r3, #24]
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	69db      	ldr	r3, [r3, #28]
 800da88:	63bb      	str	r3, [r7, #56]	; 0x38
 800da8a:	e022      	b.n	800dad2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800da92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da94:	2b00      	cmp	r3, #0
 800da96:	d119      	bne.n	800dacc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2100      	movs	r1, #0
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fd fb80 	bl	800b1a2 <create_chain>
 800daa2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800daa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d104      	bne.n	800dab4 <f_lseek+0x2a2>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2202      	movs	r2, #2
 800daae:	755a      	strb	r2, [r3, #21]
 800dab0:	2302      	movs	r3, #2
 800dab2:	e0ce      	b.n	800dc52 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daba:	d104      	bne.n	800dac6 <f_lseek+0x2b4>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	755a      	strb	r2, [r3, #21]
 800dac2:	2301      	movs	r3, #1
 800dac4:	e0c5      	b.n	800dc52 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daca:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dad0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d067      	beq.n	800dba8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800dad8:	e03a      	b.n	800db50 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800dada:	683a      	ldr	r2, [r7, #0]
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	603b      	str	r3, [r7, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	699a      	ldr	r2, [r3, #24]
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	441a      	add	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	7d1b      	ldrb	r3, [r3, #20]
 800daf2:	f003 0302 	and.w	r3, r3, #2
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00b      	beq.n	800db12 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fd fb4f 	bl	800b1a2 <create_chain>
 800db04:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800db06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d108      	bne.n	800db1e <f_lseek+0x30c>
							ofs = 0; break;
 800db0c:	2300      	movs	r3, #0
 800db0e:	603b      	str	r3, [r7, #0]
 800db10:	e022      	b.n	800db58 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db16:	4618      	mov	r0, r3
 800db18:	f7fd f8f7 	bl	800ad0a <get_fat>
 800db1c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800db1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db24:	d104      	bne.n	800db30 <f_lseek+0x31e>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2201      	movs	r2, #1
 800db2a:	755a      	strb	r2, [r3, #21]
 800db2c:	2301      	movs	r3, #1
 800db2e:	e090      	b.n	800dc52 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800db30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db32:	2b01      	cmp	r3, #1
 800db34:	d904      	bls.n	800db40 <f_lseek+0x32e>
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	6a1b      	ldr	r3, [r3, #32]
 800db3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d304      	bcc.n	800db4a <f_lseek+0x338>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2202      	movs	r2, #2
 800db44:	755a      	strb	r2, [r3, #21]
 800db46:	2302      	movs	r3, #2
 800db48:	e083      	b.n	800dc52 <f_lseek+0x440>
					fp->clust = clst;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db4e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	429a      	cmp	r2, r3
 800db56:	d8c0      	bhi.n	800dada <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	699a      	ldr	r2, [r3, #24]
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	441a      	add	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	899b      	ldrh	r3, [r3, #12]
 800db68:	461a      	mov	r2, r3
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800db70:	fb02 f201 	mul.w	r2, r2, r1
 800db74:	1a9b      	subs	r3, r3, r2
 800db76:	2b00      	cmp	r3, #0
 800db78:	d016      	beq.n	800dba8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fd f8a4 	bl	800accc <clust2sect>
 800db84:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800db86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d104      	bne.n	800db96 <f_lseek+0x384>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2202      	movs	r2, #2
 800db90:	755a      	strb	r2, [r3, #21]
 800db92:	2302      	movs	r3, #2
 800db94:	e05d      	b.n	800dc52 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	899b      	ldrh	r3, [r3, #12]
 800db9a:	461a      	mov	r2, r3
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800dba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dba4:	4413      	add	r3, r2
 800dba6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	699a      	ldr	r2, [r3, #24]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d90a      	bls.n	800dbca <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	699a      	ldr	r2, [r3, #24]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	7d1b      	ldrb	r3, [r3, #20]
 800dbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	699b      	ldr	r3, [r3, #24]
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	8992      	ldrh	r2, [r2, #12]
 800dbd2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbd6:	fb02 f201 	mul.w	r2, r2, r1
 800dbda:	1a9b      	subs	r3, r3, r2
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d036      	beq.n	800dc4e <f_lseek+0x43c>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a1b      	ldr	r3, [r3, #32]
 800dbe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d031      	beq.n	800dc4e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	7d1b      	ldrb	r3, [r3, #20]
 800dbee:	b25b      	sxtb	r3, r3
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	da18      	bge.n	800dc26 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	7858      	ldrb	r0, [r3, #1]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6a1a      	ldr	r2, [r3, #32]
 800dc02:	2301      	movs	r3, #1
 800dc04:	f7fc fcd6 	bl	800a5b4 <disk_write>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d004      	beq.n	800dc18 <f_lseek+0x406>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2201      	movs	r2, #1
 800dc12:	755a      	strb	r2, [r3, #21]
 800dc14:	2301      	movs	r3, #1
 800dc16:	e01c      	b.n	800dc52 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	7d1b      	ldrb	r3, [r3, #20]
 800dc1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	7858      	ldrb	r0, [r3, #1]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc30:	2301      	movs	r3, #1
 800dc32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc34:	f7fc fc9e 	bl	800a574 <disk_read>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d004      	beq.n	800dc48 <f_lseek+0x436>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2201      	movs	r2, #1
 800dc42:	755a      	strb	r2, [r3, #21]
 800dc44:	2301      	movs	r3, #1
 800dc46:	e004      	b.n	800dc52 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc4c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dc4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3740      	adds	r7, #64	; 0x40
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b0a0      	sub	sp, #128	; 0x80
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800dc66:	f107 010c 	add.w	r1, r7, #12
 800dc6a:	1d3b      	adds	r3, r7, #4
 800dc6c:	2202      	movs	r2, #2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fe fd16 	bl	800c6a0 <find_volume>
 800dc74:	4603      	mov	r3, r0
 800dc76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800dc7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f040 80a4 	bne.w	800ddd0 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dc8e:	4611      	mov	r1, r2
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fe fbd5 	bl	800c440 <follow_path>
 800dc96:	4603      	mov	r3, r0
 800dc98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 800dc9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d108      	bne.n	800dcb6 <f_unlink+0x5c>
 800dca4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800dca8:	f003 0320 	and.w	r3, r3, #32
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d002      	beq.n	800dcb6 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800dcb0:	2306      	movs	r3, #6
 800dcb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800dcb6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d108      	bne.n	800dcd0 <f_unlink+0x76>
 800dcbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dcc2:	2102      	movs	r1, #2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fc fdb3 	bl	800a830 <chk_lock>
 800dcca:	4603      	mov	r3, r0
 800dccc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800dcd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d17b      	bne.n	800ddd0 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800dcd8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800dcdc:	b25b      	sxtb	r3, r3
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	da03      	bge.n	800dcea <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800dce2:	2306      	movs	r3, #6
 800dce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dce8:	e008      	b.n	800dcfc <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800dcea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800dcee:	f003 0301 	and.w	r3, r3, #1
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d002      	beq.n	800dcfc <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800dcf6:	2307      	movs	r3, #7
 800dcf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800dcfc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d13d      	bne.n	800dd80 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd08:	4611      	mov	r1, r2
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fd fcbf 	bl	800b68e <ld_clust>
 800dd10:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800dd12:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800dd16:	f003 0310 	and.w	r3, r3, #16
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d030      	beq.n	800dd80 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	69db      	ldr	r3, [r3, #28]
 800dd22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d103      	bne.n	800dd30 <f_unlink+0xd6>
						res = FR_DENIED;
 800dd28:	2307      	movs	r3, #7
 800dd2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dd2e:	e027      	b.n	800dd80 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800dd34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd36:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800dd38:	f107 0310 	add.w	r3, r7, #16
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fd faff 	bl	800b342 <dir_sdi>
 800dd44:	4603      	mov	r3, r0
 800dd46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800dd4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d116      	bne.n	800dd80 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 800dd52:	f107 0310 	add.w	r3, r7, #16
 800dd56:	2100      	movs	r1, #0
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fd fec3 	bl	800bae4 <dir_read>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800dd64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d102      	bne.n	800dd72 <f_unlink+0x118>
 800dd6c:	2307      	movs	r3, #7
 800dd6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800dd72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd76:	2b04      	cmp	r3, #4
 800dd78:	d102      	bne.n	800dd80 <f_unlink+0x126>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800dd80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d123      	bne.n	800ddd0 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800dd88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fe f909 	bl	800bfa4 <dir_remove>
 800dd92:	4603      	mov	r3, r0
 800dd94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800dd98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10c      	bne.n	800ddba <f_unlink+0x160>
 800dda0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d009      	beq.n	800ddba <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800dda6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ddaa:	2200      	movs	r2, #0
 800ddac:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fd f992 	bl	800b0d8 <remove_chain>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ddba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d106      	bne.n	800ddd0 <f_unlink+0x176>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fc ff11 	bl	800abec <sync_fs>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ddd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3780      	adds	r7, #128	; 0x80
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b098      	sub	sp, #96	; 0x60
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800dde4:	f107 010c 	add.w	r1, r7, #12
 800dde8:	1d3b      	adds	r3, r7, #4
 800ddea:	2202      	movs	r2, #2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fe fc57 	bl	800c6a0 <find_volume>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800ddfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de00:	2b00      	cmp	r3, #0
 800de02:	f040 80ff 	bne.w	800e004 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	f107 0310 	add.w	r3, r7, #16
 800de0c:	4611      	mov	r1, r2
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe fb16 	bl	800c440 <follow_path>
 800de14:	4603      	mov	r3, r0
 800de16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800de1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d102      	bne.n	800de28 <f_mkdir+0x4c>
 800de22:	2308      	movs	r3, #8
 800de24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800de28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de2c:	2b04      	cmp	r3, #4
 800de2e:	d108      	bne.n	800de42 <f_mkdir+0x66>
 800de30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800de34:	f003 0320 	and.w	r3, r3, #32
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d002      	beq.n	800de42 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800de3c:	2306      	movs	r3, #6
 800de3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800de42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de46:	2b04      	cmp	r3, #4
 800de48:	f040 80dc 	bne.w	800e004 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800de4c:	f107 0310 	add.w	r3, r7, #16
 800de50:	2100      	movs	r1, #0
 800de52:	4618      	mov	r0, r3
 800de54:	f7fd f9a5 	bl	800b1a2 <create_chain>
 800de58:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	895b      	ldrh	r3, [r3, #10]
 800de5e:	461a      	mov	r2, r3
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	899b      	ldrh	r3, [r3, #12]
 800de64:	fb03 f302 	mul.w	r3, r3, r2
 800de68:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800de6a:	2300      	movs	r3, #0
 800de6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800de70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de72:	2b00      	cmp	r3, #0
 800de74:	d102      	bne.n	800de7c <f_mkdir+0xa0>
 800de76:	2307      	movs	r3, #7
 800de78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800de7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d102      	bne.n	800de88 <f_mkdir+0xac>
 800de82:	2302      	movs	r3, #2
 800de84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de8e:	d102      	bne.n	800de96 <f_mkdir+0xba>
 800de90:	2301      	movs	r3, #1
 800de92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800de96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d106      	bne.n	800deac <f_mkdir+0xd0>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fc fe31 	bl	800ab08 <sync_window>
 800dea6:	4603      	mov	r3, r0
 800dea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800deac:	f7fc f8d2 	bl	800a054 <get_fattime>
 800deb0:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800deb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d16c      	bne.n	800df94 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fc ff04 	bl	800accc <clust2sect>
 800dec4:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	333c      	adds	r3, #60	; 0x3c
 800deca:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	899b      	ldrh	r3, [r3, #12]
 800ded0:	461a      	mov	r2, r3
 800ded2:	2100      	movs	r1, #0
 800ded4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ded6:	f7fc fc4e 	bl	800a776 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800deda:	220b      	movs	r2, #11
 800dedc:	2120      	movs	r1, #32
 800dede:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dee0:	f7fc fc49 	bl	800a776 <mem_set>
					dir[DIR_Name] = '.';
 800dee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dee6:	222e      	movs	r2, #46	; 0x2e
 800dee8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800deea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deec:	330b      	adds	r3, #11
 800deee:	2210      	movs	r2, #16
 800def0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800def2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800def4:	3316      	adds	r3, #22
 800def6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800def8:	4618      	mov	r0, r3
 800defa:	f7fc fbef 	bl	800a6dc <st_dword>
					st_clust(fs, dir, dcl);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df04:	4618      	mov	r0, r3
 800df06:	f7fd fbe1 	bl	800b6cc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800df0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df0c:	3320      	adds	r3, #32
 800df0e:	2220      	movs	r2, #32
 800df10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df12:	4618      	mov	r0, r3
 800df14:	f7fc fc0e 	bl	800a734 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800df18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df1a:	3321      	adds	r3, #33	; 0x21
 800df1c:	222e      	movs	r2, #46	; 0x2e
 800df1e:	701a      	strb	r2, [r3, #0]
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b03      	cmp	r3, #3
 800df2a:	d106      	bne.n	800df3a <f_mkdir+0x15e>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df32:	429a      	cmp	r2, r3
 800df34:	d101      	bne.n	800df3a <f_mkdir+0x15e>
 800df36:	2300      	movs	r3, #0
 800df38:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df3e:	3320      	adds	r3, #32
 800df40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df42:	4619      	mov	r1, r3
 800df44:	f7fd fbc2 	bl	800b6cc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	895b      	ldrh	r3, [r3, #10]
 800df4c:	65bb      	str	r3, [r7, #88]	; 0x58
 800df4e:	e01c      	b.n	800df8a <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800df50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df52:	1c5a      	adds	r2, r3, #1
 800df54:	657a      	str	r2, [r7, #84]	; 0x54
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2201      	movs	r2, #1
 800df5e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	4618      	mov	r0, r3
 800df64:	f7fc fdd0 	bl	800ab08 <sync_window>
 800df68:	4603      	mov	r3, r0
 800df6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800df6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df72:	2b00      	cmp	r3, #0
 800df74:	d10d      	bne.n	800df92 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	899b      	ldrh	r3, [r3, #12]
 800df7a:	461a      	mov	r2, r3
 800df7c:	2100      	movs	r1, #0
 800df7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800df80:	f7fc fbf9 	bl	800a776 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800df84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df86:	3b01      	subs	r3, #1
 800df88:	65bb      	str	r3, [r7, #88]	; 0x58
 800df8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1df      	bne.n	800df50 <f_mkdir+0x174>
 800df90:	e000      	b.n	800df94 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800df92:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800df94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d107      	bne.n	800dfac <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800df9c:	f107 0310 	add.w	r3, r7, #16
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fd ff07 	bl	800bdb4 <dir_register>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800dfac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d120      	bne.n	800dff6 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800dfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb6:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800dfb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfba:	3316      	adds	r3, #22
 800dfbc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fc fb8c 	bl	800a6dc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dfc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fd fb7e 	bl	800b6cc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800dfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd2:	330b      	adds	r3, #11
 800dfd4:	2210      	movs	r2, #16
 800dfd6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800dfde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d10e      	bne.n	800e004 <f_mkdir+0x228>
					res = sync_fs(fs);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7fc fdff 	bl	800abec <sync_fs>
 800dfee:	4603      	mov	r3, r0
 800dff0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dff4:	e006      	b.n	800e004 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800dff6:	f107 0310 	add.w	r3, r7, #16
 800dffa:	2200      	movs	r2, #0
 800dffc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fd f86a 	bl	800b0d8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800e004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3760      	adds	r7, #96	; 0x60
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b088      	sub	sp, #32
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e024:	e01b      	b.n	800e05e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800e026:	f107 0310 	add.w	r3, r7, #16
 800e02a:	f107 0114 	add.w	r1, r7, #20
 800e02e:	2201      	movs	r2, #1
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff f809 	bl	800d048 <f_read>
		if (rc != 1) break;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d116      	bne.n	800e06a <f_gets+0x5a>
		c = s[0];
 800e03c:	7d3b      	ldrb	r3, [r7, #20]
 800e03e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800e040:	7dfb      	ldrb	r3, [r7, #23]
 800e042:	2b0d      	cmp	r3, #13
 800e044:	d100      	bne.n	800e048 <f_gets+0x38>
 800e046:	e00a      	b.n	800e05e <f_gets+0x4e>
		*p++ = c;
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	1c5a      	adds	r2, r3, #1
 800e04c:	61ba      	str	r2, [r7, #24]
 800e04e:	7dfa      	ldrb	r2, [r7, #23]
 800e050:	701a      	strb	r2, [r3, #0]
		n++;
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	3301      	adds	r3, #1
 800e056:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800e058:	7dfb      	ldrb	r3, [r7, #23]
 800e05a:	2b0a      	cmp	r3, #10
 800e05c:	d007      	beq.n	800e06e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	3b01      	subs	r3, #1
 800e062:	69fa      	ldr	r2, [r7, #28]
 800e064:	429a      	cmp	r2, r3
 800e066:	dbde      	blt.n	800e026 <f_gets+0x16>
 800e068:	e002      	b.n	800e070 <f_gets+0x60>
		if (rc != 1) break;
 800e06a:	bf00      	nop
 800e06c:	e000      	b.n	800e070 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800e06e:	bf00      	nop
	}
	*p = 0;
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	2200      	movs	r2, #0
 800e074:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800e076:	69fb      	ldr	r3, [r7, #28]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <f_gets+0x70>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	e000      	b.n	800e082 <f_gets+0x72>
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	3720      	adds	r7, #32
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
	...

0800e08c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b087      	sub	sp, #28
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	4613      	mov	r3, r2
 800e098:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e09a:	2301      	movs	r3, #1
 800e09c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e0a2:	4b1f      	ldr	r3, [pc, #124]	; (800e120 <FATFS_LinkDriverEx+0x94>)
 800e0a4:	7a5b      	ldrb	r3, [r3, #9]
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d131      	bne.n	800e110 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e0ac:	4b1c      	ldr	r3, [pc, #112]	; (800e120 <FATFS_LinkDriverEx+0x94>)
 800e0ae:	7a5b      	ldrb	r3, [r3, #9]
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	4b1a      	ldr	r3, [pc, #104]	; (800e120 <FATFS_LinkDriverEx+0x94>)
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e0ba:	4b19      	ldr	r3, [pc, #100]	; (800e120 <FATFS_LinkDriverEx+0x94>)
 800e0bc:	7a5b      	ldrb	r3, [r3, #9]
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	4a17      	ldr	r2, [pc, #92]	; (800e120 <FATFS_LinkDriverEx+0x94>)
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	68fa      	ldr	r2, [r7, #12]
 800e0c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e0ca:	4b15      	ldr	r3, [pc, #84]	; (800e120 <FATFS_LinkDriverEx+0x94>)
 800e0cc:	7a5b      	ldrb	r3, [r3, #9]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4b13      	ldr	r3, [pc, #76]	; (800e120 <FATFS_LinkDriverEx+0x94>)
 800e0d4:	4413      	add	r3, r2
 800e0d6:	79fa      	ldrb	r2, [r7, #7]
 800e0d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e0da:	4b11      	ldr	r3, [pc, #68]	; (800e120 <FATFS_LinkDriverEx+0x94>)
 800e0dc:	7a5b      	ldrb	r3, [r3, #9]
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	1c5a      	adds	r2, r3, #1
 800e0e2:	b2d1      	uxtb	r1, r2
 800e0e4:	4a0e      	ldr	r2, [pc, #56]	; (800e120 <FATFS_LinkDriverEx+0x94>)
 800e0e6:	7251      	strb	r1, [r2, #9]
 800e0e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e0ea:	7dbb      	ldrb	r3, [r7, #22]
 800e0ec:	3330      	adds	r3, #48	; 0x30
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	223a      	movs	r2, #58	; 0x3a
 800e0fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	3302      	adds	r3, #2
 800e100:	222f      	movs	r2, #47	; 0x2f
 800e102:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	3303      	adds	r3, #3
 800e108:	2200      	movs	r2, #0
 800e10a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e110:	7dfb      	ldrb	r3, [r7, #23]
}
 800e112:	4618      	mov	r0, r3
 800e114:	371c      	adds	r7, #28
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	2000051c 	.word	0x2000051c

0800e124 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e12e:	2200      	movs	r2, #0
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7ff ffaa 	bl	800e08c <FATFS_LinkDriverEx>
 800e138:	4603      	mov	r3, r0
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
	...

0800e144 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	4603      	mov	r3, r0
 800e14c:	6039      	str	r1, [r7, #0]
 800e14e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e150:	88fb      	ldrh	r3, [r7, #6]
 800e152:	2b7f      	cmp	r3, #127	; 0x7f
 800e154:	d802      	bhi.n	800e15c <ff_convert+0x18>
		c = chr;
 800e156:	88fb      	ldrh	r3, [r7, #6]
 800e158:	81fb      	strh	r3, [r7, #14]
 800e15a:	e025      	b.n	800e1a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00b      	beq.n	800e17a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e162:	88fb      	ldrh	r3, [r7, #6]
 800e164:	2bff      	cmp	r3, #255	; 0xff
 800e166:	d805      	bhi.n	800e174 <ff_convert+0x30>
 800e168:	88fb      	ldrh	r3, [r7, #6]
 800e16a:	3b80      	subs	r3, #128	; 0x80
 800e16c:	4a12      	ldr	r2, [pc, #72]	; (800e1b8 <ff_convert+0x74>)
 800e16e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e172:	e000      	b.n	800e176 <ff_convert+0x32>
 800e174:	2300      	movs	r3, #0
 800e176:	81fb      	strh	r3, [r7, #14]
 800e178:	e016      	b.n	800e1a8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e17a:	2300      	movs	r3, #0
 800e17c:	81fb      	strh	r3, [r7, #14]
 800e17e:	e009      	b.n	800e194 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e180:	89fb      	ldrh	r3, [r7, #14]
 800e182:	4a0d      	ldr	r2, [pc, #52]	; (800e1b8 <ff_convert+0x74>)
 800e184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e188:	88fa      	ldrh	r2, [r7, #6]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d006      	beq.n	800e19c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e18e:	89fb      	ldrh	r3, [r7, #14]
 800e190:	3301      	adds	r3, #1
 800e192:	81fb      	strh	r3, [r7, #14]
 800e194:	89fb      	ldrh	r3, [r7, #14]
 800e196:	2b7f      	cmp	r3, #127	; 0x7f
 800e198:	d9f2      	bls.n	800e180 <ff_convert+0x3c>
 800e19a:	e000      	b.n	800e19e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e19c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e19e:	89fb      	ldrh	r3, [r7, #14]
 800e1a0:	3380      	adds	r3, #128	; 0x80
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e1a8:	89fb      	ldrh	r3, [r7, #14]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	08013324 	.word	0x08013324

0800e1bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b087      	sub	sp, #28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e1c6:	88fb      	ldrh	r3, [r7, #6]
 800e1c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1cc:	d201      	bcs.n	800e1d2 <ff_wtoupper+0x16>
 800e1ce:	4b3e      	ldr	r3, [pc, #248]	; (800e2c8 <ff_wtoupper+0x10c>)
 800e1d0:	e000      	b.n	800e1d4 <ff_wtoupper+0x18>
 800e1d2:	4b3e      	ldr	r3, [pc, #248]	; (800e2cc <ff_wtoupper+0x110>)
 800e1d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	1c9a      	adds	r2, r3, #2
 800e1da:	617a      	str	r2, [r7, #20]
 800e1dc:	881b      	ldrh	r3, [r3, #0]
 800e1de:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e1e0:	8a7b      	ldrh	r3, [r7, #18]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d068      	beq.n	800e2b8 <ff_wtoupper+0xfc>
 800e1e6:	88fa      	ldrh	r2, [r7, #6]
 800e1e8:	8a7b      	ldrh	r3, [r7, #18]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d364      	bcc.n	800e2b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	1c9a      	adds	r2, r3, #2
 800e1f2:	617a      	str	r2, [r7, #20]
 800e1f4:	881b      	ldrh	r3, [r3, #0]
 800e1f6:	823b      	strh	r3, [r7, #16]
 800e1f8:	8a3b      	ldrh	r3, [r7, #16]
 800e1fa:	0a1b      	lsrs	r3, r3, #8
 800e1fc:	81fb      	strh	r3, [r7, #14]
 800e1fe:	8a3b      	ldrh	r3, [r7, #16]
 800e200:	b2db      	uxtb	r3, r3
 800e202:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e204:	88fa      	ldrh	r2, [r7, #6]
 800e206:	8a79      	ldrh	r1, [r7, #18]
 800e208:	8a3b      	ldrh	r3, [r7, #16]
 800e20a:	440b      	add	r3, r1
 800e20c:	429a      	cmp	r2, r3
 800e20e:	da49      	bge.n	800e2a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e210:	89fb      	ldrh	r3, [r7, #14]
 800e212:	2b08      	cmp	r3, #8
 800e214:	d84f      	bhi.n	800e2b6 <ff_wtoupper+0xfa>
 800e216:	a201      	add	r2, pc, #4	; (adr r2, 800e21c <ff_wtoupper+0x60>)
 800e218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e21c:	0800e241 	.word	0x0800e241
 800e220:	0800e253 	.word	0x0800e253
 800e224:	0800e269 	.word	0x0800e269
 800e228:	0800e271 	.word	0x0800e271
 800e22c:	0800e279 	.word	0x0800e279
 800e230:	0800e281 	.word	0x0800e281
 800e234:	0800e289 	.word	0x0800e289
 800e238:	0800e291 	.word	0x0800e291
 800e23c:	0800e299 	.word	0x0800e299
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e240:	88fa      	ldrh	r2, [r7, #6]
 800e242:	8a7b      	ldrh	r3, [r7, #18]
 800e244:	1ad3      	subs	r3, r2, r3
 800e246:	005b      	lsls	r3, r3, #1
 800e248:	697a      	ldr	r2, [r7, #20]
 800e24a:	4413      	add	r3, r2
 800e24c:	881b      	ldrh	r3, [r3, #0]
 800e24e:	80fb      	strh	r3, [r7, #6]
 800e250:	e027      	b.n	800e2a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e252:	88fa      	ldrh	r2, [r7, #6]
 800e254:	8a7b      	ldrh	r3, [r7, #18]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	b29b      	uxth	r3, r3
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	b29b      	uxth	r3, r3
 800e260:	88fa      	ldrh	r2, [r7, #6]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	80fb      	strh	r3, [r7, #6]
 800e266:	e01c      	b.n	800e2a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e268:	88fb      	ldrh	r3, [r7, #6]
 800e26a:	3b10      	subs	r3, #16
 800e26c:	80fb      	strh	r3, [r7, #6]
 800e26e:	e018      	b.n	800e2a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e270:	88fb      	ldrh	r3, [r7, #6]
 800e272:	3b20      	subs	r3, #32
 800e274:	80fb      	strh	r3, [r7, #6]
 800e276:	e014      	b.n	800e2a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e278:	88fb      	ldrh	r3, [r7, #6]
 800e27a:	3b30      	subs	r3, #48	; 0x30
 800e27c:	80fb      	strh	r3, [r7, #6]
 800e27e:	e010      	b.n	800e2a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e280:	88fb      	ldrh	r3, [r7, #6]
 800e282:	3b1a      	subs	r3, #26
 800e284:	80fb      	strh	r3, [r7, #6]
 800e286:	e00c      	b.n	800e2a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e288:	88fb      	ldrh	r3, [r7, #6]
 800e28a:	3308      	adds	r3, #8
 800e28c:	80fb      	strh	r3, [r7, #6]
 800e28e:	e008      	b.n	800e2a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e290:	88fb      	ldrh	r3, [r7, #6]
 800e292:	3b50      	subs	r3, #80	; 0x50
 800e294:	80fb      	strh	r3, [r7, #6]
 800e296:	e004      	b.n	800e2a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e298:	88fb      	ldrh	r3, [r7, #6]
 800e29a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e29e:	80fb      	strh	r3, [r7, #6]
 800e2a0:	bf00      	nop
			}
			break;
 800e2a2:	e008      	b.n	800e2b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e2a4:	89fb      	ldrh	r3, [r7, #14]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d195      	bne.n	800e1d6 <ff_wtoupper+0x1a>
 800e2aa:	8a3b      	ldrh	r3, [r7, #16]
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	697a      	ldr	r2, [r7, #20]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e2b4:	e78f      	b.n	800e1d6 <ff_wtoupper+0x1a>
			break;
 800e2b6:	bf00      	nop
	}

	return chr;
 800e2b8:	88fb      	ldrh	r3, [r7, #6]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	371c      	adds	r7, #28
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	08013424 	.word	0x08013424
 800e2cc:	08013618 	.word	0x08013618

0800e2d0 <__errno>:
 800e2d0:	4b01      	ldr	r3, [pc, #4]	; (800e2d8 <__errno+0x8>)
 800e2d2:	6818      	ldr	r0, [r3, #0]
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	2000000c 	.word	0x2000000c

0800e2dc <__libc_init_array>:
 800e2dc:	b570      	push	{r4, r5, r6, lr}
 800e2de:	4e0d      	ldr	r6, [pc, #52]	; (800e314 <__libc_init_array+0x38>)
 800e2e0:	4c0d      	ldr	r4, [pc, #52]	; (800e318 <__libc_init_array+0x3c>)
 800e2e2:	1ba4      	subs	r4, r4, r6
 800e2e4:	10a4      	asrs	r4, r4, #2
 800e2e6:	2500      	movs	r5, #0
 800e2e8:	42a5      	cmp	r5, r4
 800e2ea:	d109      	bne.n	800e300 <__libc_init_array+0x24>
 800e2ec:	4e0b      	ldr	r6, [pc, #44]	; (800e31c <__libc_init_array+0x40>)
 800e2ee:	4c0c      	ldr	r4, [pc, #48]	; (800e320 <__libc_init_array+0x44>)
 800e2f0:	f004 ff18 	bl	8013124 <_init>
 800e2f4:	1ba4      	subs	r4, r4, r6
 800e2f6:	10a4      	asrs	r4, r4, #2
 800e2f8:	2500      	movs	r5, #0
 800e2fa:	42a5      	cmp	r5, r4
 800e2fc:	d105      	bne.n	800e30a <__libc_init_array+0x2e>
 800e2fe:	bd70      	pop	{r4, r5, r6, pc}
 800e300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e304:	4798      	blx	r3
 800e306:	3501      	adds	r5, #1
 800e308:	e7ee      	b.n	800e2e8 <__libc_init_array+0xc>
 800e30a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e30e:	4798      	blx	r3
 800e310:	3501      	adds	r5, #1
 800e312:	e7f2      	b.n	800e2fa <__libc_init_array+0x1e>
 800e314:	08013a14 	.word	0x08013a14
 800e318:	08013a14 	.word	0x08013a14
 800e31c:	08013a14 	.word	0x08013a14
 800e320:	08013a1c 	.word	0x08013a1c

0800e324 <memset>:
 800e324:	4402      	add	r2, r0
 800e326:	4603      	mov	r3, r0
 800e328:	4293      	cmp	r3, r2
 800e32a:	d100      	bne.n	800e32e <memset+0xa>
 800e32c:	4770      	bx	lr
 800e32e:	f803 1b01 	strb.w	r1, [r3], #1
 800e332:	e7f9      	b.n	800e328 <memset+0x4>

0800e334 <__cvt>:
 800e334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e338:	ec55 4b10 	vmov	r4, r5, d0
 800e33c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e33e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e342:	2d00      	cmp	r5, #0
 800e344:	460e      	mov	r6, r1
 800e346:	4691      	mov	r9, r2
 800e348:	4619      	mov	r1, r3
 800e34a:	bfb8      	it	lt
 800e34c:	4622      	movlt	r2, r4
 800e34e:	462b      	mov	r3, r5
 800e350:	f027 0720 	bic.w	r7, r7, #32
 800e354:	bfbb      	ittet	lt
 800e356:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e35a:	461d      	movlt	r5, r3
 800e35c:	2300      	movge	r3, #0
 800e35e:	232d      	movlt	r3, #45	; 0x2d
 800e360:	bfb8      	it	lt
 800e362:	4614      	movlt	r4, r2
 800e364:	2f46      	cmp	r7, #70	; 0x46
 800e366:	700b      	strb	r3, [r1, #0]
 800e368:	d004      	beq.n	800e374 <__cvt+0x40>
 800e36a:	2f45      	cmp	r7, #69	; 0x45
 800e36c:	d100      	bne.n	800e370 <__cvt+0x3c>
 800e36e:	3601      	adds	r6, #1
 800e370:	2102      	movs	r1, #2
 800e372:	e000      	b.n	800e376 <__cvt+0x42>
 800e374:	2103      	movs	r1, #3
 800e376:	ab03      	add	r3, sp, #12
 800e378:	9301      	str	r3, [sp, #4]
 800e37a:	ab02      	add	r3, sp, #8
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	4632      	mov	r2, r6
 800e380:	4653      	mov	r3, sl
 800e382:	ec45 4b10 	vmov	d0, r4, r5
 800e386:	f001 ff93 	bl	80102b0 <_dtoa_r>
 800e38a:	2f47      	cmp	r7, #71	; 0x47
 800e38c:	4680      	mov	r8, r0
 800e38e:	d102      	bne.n	800e396 <__cvt+0x62>
 800e390:	f019 0f01 	tst.w	r9, #1
 800e394:	d026      	beq.n	800e3e4 <__cvt+0xb0>
 800e396:	2f46      	cmp	r7, #70	; 0x46
 800e398:	eb08 0906 	add.w	r9, r8, r6
 800e39c:	d111      	bne.n	800e3c2 <__cvt+0x8e>
 800e39e:	f898 3000 	ldrb.w	r3, [r8]
 800e3a2:	2b30      	cmp	r3, #48	; 0x30
 800e3a4:	d10a      	bne.n	800e3bc <__cvt+0x88>
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	f7f2 fba3 	bl	8000af8 <__aeabi_dcmpeq>
 800e3b2:	b918      	cbnz	r0, 800e3bc <__cvt+0x88>
 800e3b4:	f1c6 0601 	rsb	r6, r6, #1
 800e3b8:	f8ca 6000 	str.w	r6, [sl]
 800e3bc:	f8da 3000 	ldr.w	r3, [sl]
 800e3c0:	4499      	add	r9, r3
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	f7f2 fb95 	bl	8000af8 <__aeabi_dcmpeq>
 800e3ce:	b938      	cbnz	r0, 800e3e0 <__cvt+0xac>
 800e3d0:	2230      	movs	r2, #48	; 0x30
 800e3d2:	9b03      	ldr	r3, [sp, #12]
 800e3d4:	454b      	cmp	r3, r9
 800e3d6:	d205      	bcs.n	800e3e4 <__cvt+0xb0>
 800e3d8:	1c59      	adds	r1, r3, #1
 800e3da:	9103      	str	r1, [sp, #12]
 800e3dc:	701a      	strb	r2, [r3, #0]
 800e3de:	e7f8      	b.n	800e3d2 <__cvt+0x9e>
 800e3e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3e4:	9b03      	ldr	r3, [sp, #12]
 800e3e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3e8:	eba3 0308 	sub.w	r3, r3, r8
 800e3ec:	4640      	mov	r0, r8
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	b004      	add	sp, #16
 800e3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e3f6 <__exponent>:
 800e3f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3f8:	2900      	cmp	r1, #0
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	bfba      	itte	lt
 800e3fe:	4249      	neglt	r1, r1
 800e400:	232d      	movlt	r3, #45	; 0x2d
 800e402:	232b      	movge	r3, #43	; 0x2b
 800e404:	2909      	cmp	r1, #9
 800e406:	f804 2b02 	strb.w	r2, [r4], #2
 800e40a:	7043      	strb	r3, [r0, #1]
 800e40c:	dd20      	ble.n	800e450 <__exponent+0x5a>
 800e40e:	f10d 0307 	add.w	r3, sp, #7
 800e412:	461f      	mov	r7, r3
 800e414:	260a      	movs	r6, #10
 800e416:	fb91 f5f6 	sdiv	r5, r1, r6
 800e41a:	fb06 1115 	mls	r1, r6, r5, r1
 800e41e:	3130      	adds	r1, #48	; 0x30
 800e420:	2d09      	cmp	r5, #9
 800e422:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e426:	f103 32ff 	add.w	r2, r3, #4294967295
 800e42a:	4629      	mov	r1, r5
 800e42c:	dc09      	bgt.n	800e442 <__exponent+0x4c>
 800e42e:	3130      	adds	r1, #48	; 0x30
 800e430:	3b02      	subs	r3, #2
 800e432:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e436:	42bb      	cmp	r3, r7
 800e438:	4622      	mov	r2, r4
 800e43a:	d304      	bcc.n	800e446 <__exponent+0x50>
 800e43c:	1a10      	subs	r0, r2, r0
 800e43e:	b003      	add	sp, #12
 800e440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e442:	4613      	mov	r3, r2
 800e444:	e7e7      	b.n	800e416 <__exponent+0x20>
 800e446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e44a:	f804 2b01 	strb.w	r2, [r4], #1
 800e44e:	e7f2      	b.n	800e436 <__exponent+0x40>
 800e450:	2330      	movs	r3, #48	; 0x30
 800e452:	4419      	add	r1, r3
 800e454:	7083      	strb	r3, [r0, #2]
 800e456:	1d02      	adds	r2, r0, #4
 800e458:	70c1      	strb	r1, [r0, #3]
 800e45a:	e7ef      	b.n	800e43c <__exponent+0x46>

0800e45c <_printf_float>:
 800e45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e460:	b08d      	sub	sp, #52	; 0x34
 800e462:	460c      	mov	r4, r1
 800e464:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e468:	4616      	mov	r6, r2
 800e46a:	461f      	mov	r7, r3
 800e46c:	4605      	mov	r5, r0
 800e46e:	f003 f98b 	bl	8011788 <_localeconv_r>
 800e472:	6803      	ldr	r3, [r0, #0]
 800e474:	9304      	str	r3, [sp, #16]
 800e476:	4618      	mov	r0, r3
 800e478:	f7f1 fec2 	bl	8000200 <strlen>
 800e47c:	2300      	movs	r3, #0
 800e47e:	930a      	str	r3, [sp, #40]	; 0x28
 800e480:	f8d8 3000 	ldr.w	r3, [r8]
 800e484:	9005      	str	r0, [sp, #20]
 800e486:	3307      	adds	r3, #7
 800e488:	f023 0307 	bic.w	r3, r3, #7
 800e48c:	f103 0208 	add.w	r2, r3, #8
 800e490:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e494:	f8d4 b000 	ldr.w	fp, [r4]
 800e498:	f8c8 2000 	str.w	r2, [r8]
 800e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e4a4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e4a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4ac:	9307      	str	r3, [sp, #28]
 800e4ae:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b6:	4ba7      	ldr	r3, [pc, #668]	; (800e754 <_printf_float+0x2f8>)
 800e4b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4bc:	f7f2 fb4e 	bl	8000b5c <__aeabi_dcmpun>
 800e4c0:	bb70      	cbnz	r0, 800e520 <_printf_float+0xc4>
 800e4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c6:	4ba3      	ldr	r3, [pc, #652]	; (800e754 <_printf_float+0x2f8>)
 800e4c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4cc:	f7f2 fb28 	bl	8000b20 <__aeabi_dcmple>
 800e4d0:	bb30      	cbnz	r0, 800e520 <_printf_float+0xc4>
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4640      	mov	r0, r8
 800e4d8:	4649      	mov	r1, r9
 800e4da:	f7f2 fb17 	bl	8000b0c <__aeabi_dcmplt>
 800e4de:	b110      	cbz	r0, 800e4e6 <_printf_float+0x8a>
 800e4e0:	232d      	movs	r3, #45	; 0x2d
 800e4e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4e6:	4a9c      	ldr	r2, [pc, #624]	; (800e758 <_printf_float+0x2fc>)
 800e4e8:	4b9c      	ldr	r3, [pc, #624]	; (800e75c <_printf_float+0x300>)
 800e4ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e4ee:	bf8c      	ite	hi
 800e4f0:	4690      	movhi	r8, r2
 800e4f2:	4698      	movls	r8, r3
 800e4f4:	2303      	movs	r3, #3
 800e4f6:	f02b 0204 	bic.w	r2, fp, #4
 800e4fa:	6123      	str	r3, [r4, #16]
 800e4fc:	6022      	str	r2, [r4, #0]
 800e4fe:	f04f 0900 	mov.w	r9, #0
 800e502:	9700      	str	r7, [sp, #0]
 800e504:	4633      	mov	r3, r6
 800e506:	aa0b      	add	r2, sp, #44	; 0x2c
 800e508:	4621      	mov	r1, r4
 800e50a:	4628      	mov	r0, r5
 800e50c:	f000 f9e6 	bl	800e8dc <_printf_common>
 800e510:	3001      	adds	r0, #1
 800e512:	f040 808d 	bne.w	800e630 <_printf_float+0x1d4>
 800e516:	f04f 30ff 	mov.w	r0, #4294967295
 800e51a:	b00d      	add	sp, #52	; 0x34
 800e51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e520:	4642      	mov	r2, r8
 800e522:	464b      	mov	r3, r9
 800e524:	4640      	mov	r0, r8
 800e526:	4649      	mov	r1, r9
 800e528:	f7f2 fb18 	bl	8000b5c <__aeabi_dcmpun>
 800e52c:	b110      	cbz	r0, 800e534 <_printf_float+0xd8>
 800e52e:	4a8c      	ldr	r2, [pc, #560]	; (800e760 <_printf_float+0x304>)
 800e530:	4b8c      	ldr	r3, [pc, #560]	; (800e764 <_printf_float+0x308>)
 800e532:	e7da      	b.n	800e4ea <_printf_float+0x8e>
 800e534:	6861      	ldr	r1, [r4, #4]
 800e536:	1c4b      	adds	r3, r1, #1
 800e538:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e53c:	a80a      	add	r0, sp, #40	; 0x28
 800e53e:	d13e      	bne.n	800e5be <_printf_float+0x162>
 800e540:	2306      	movs	r3, #6
 800e542:	6063      	str	r3, [r4, #4]
 800e544:	2300      	movs	r3, #0
 800e546:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e54a:	ab09      	add	r3, sp, #36	; 0x24
 800e54c:	9300      	str	r3, [sp, #0]
 800e54e:	ec49 8b10 	vmov	d0, r8, r9
 800e552:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e556:	6022      	str	r2, [r4, #0]
 800e558:	f8cd a004 	str.w	sl, [sp, #4]
 800e55c:	6861      	ldr	r1, [r4, #4]
 800e55e:	4628      	mov	r0, r5
 800e560:	f7ff fee8 	bl	800e334 <__cvt>
 800e564:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e568:	2b47      	cmp	r3, #71	; 0x47
 800e56a:	4680      	mov	r8, r0
 800e56c:	d109      	bne.n	800e582 <_printf_float+0x126>
 800e56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e570:	1cd8      	adds	r0, r3, #3
 800e572:	db02      	blt.n	800e57a <_printf_float+0x11e>
 800e574:	6862      	ldr	r2, [r4, #4]
 800e576:	4293      	cmp	r3, r2
 800e578:	dd47      	ble.n	800e60a <_printf_float+0x1ae>
 800e57a:	f1aa 0a02 	sub.w	sl, sl, #2
 800e57e:	fa5f fa8a 	uxtb.w	sl, sl
 800e582:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e586:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e588:	d824      	bhi.n	800e5d4 <_printf_float+0x178>
 800e58a:	3901      	subs	r1, #1
 800e58c:	4652      	mov	r2, sl
 800e58e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e592:	9109      	str	r1, [sp, #36]	; 0x24
 800e594:	f7ff ff2f 	bl	800e3f6 <__exponent>
 800e598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e59a:	1813      	adds	r3, r2, r0
 800e59c:	2a01      	cmp	r2, #1
 800e59e:	4681      	mov	r9, r0
 800e5a0:	6123      	str	r3, [r4, #16]
 800e5a2:	dc02      	bgt.n	800e5aa <_printf_float+0x14e>
 800e5a4:	6822      	ldr	r2, [r4, #0]
 800e5a6:	07d1      	lsls	r1, r2, #31
 800e5a8:	d501      	bpl.n	800e5ae <_printf_float+0x152>
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	6123      	str	r3, [r4, #16]
 800e5ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d0a5      	beq.n	800e502 <_printf_float+0xa6>
 800e5b6:	232d      	movs	r3, #45	; 0x2d
 800e5b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5bc:	e7a1      	b.n	800e502 <_printf_float+0xa6>
 800e5be:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e5c2:	f000 8177 	beq.w	800e8b4 <_printf_float+0x458>
 800e5c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e5ca:	d1bb      	bne.n	800e544 <_printf_float+0xe8>
 800e5cc:	2900      	cmp	r1, #0
 800e5ce:	d1b9      	bne.n	800e544 <_printf_float+0xe8>
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e7b6      	b.n	800e542 <_printf_float+0xe6>
 800e5d4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e5d8:	d119      	bne.n	800e60e <_printf_float+0x1b2>
 800e5da:	2900      	cmp	r1, #0
 800e5dc:	6863      	ldr	r3, [r4, #4]
 800e5de:	dd0c      	ble.n	800e5fa <_printf_float+0x19e>
 800e5e0:	6121      	str	r1, [r4, #16]
 800e5e2:	b913      	cbnz	r3, 800e5ea <_printf_float+0x18e>
 800e5e4:	6822      	ldr	r2, [r4, #0]
 800e5e6:	07d2      	lsls	r2, r2, #31
 800e5e8:	d502      	bpl.n	800e5f0 <_printf_float+0x194>
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	440b      	add	r3, r1
 800e5ee:	6123      	str	r3, [r4, #16]
 800e5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5f2:	65a3      	str	r3, [r4, #88]	; 0x58
 800e5f4:	f04f 0900 	mov.w	r9, #0
 800e5f8:	e7d9      	b.n	800e5ae <_printf_float+0x152>
 800e5fa:	b913      	cbnz	r3, 800e602 <_printf_float+0x1a6>
 800e5fc:	6822      	ldr	r2, [r4, #0]
 800e5fe:	07d0      	lsls	r0, r2, #31
 800e600:	d501      	bpl.n	800e606 <_printf_float+0x1aa>
 800e602:	3302      	adds	r3, #2
 800e604:	e7f3      	b.n	800e5ee <_printf_float+0x192>
 800e606:	2301      	movs	r3, #1
 800e608:	e7f1      	b.n	800e5ee <_printf_float+0x192>
 800e60a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e60e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e612:	4293      	cmp	r3, r2
 800e614:	db05      	blt.n	800e622 <_printf_float+0x1c6>
 800e616:	6822      	ldr	r2, [r4, #0]
 800e618:	6123      	str	r3, [r4, #16]
 800e61a:	07d1      	lsls	r1, r2, #31
 800e61c:	d5e8      	bpl.n	800e5f0 <_printf_float+0x194>
 800e61e:	3301      	adds	r3, #1
 800e620:	e7e5      	b.n	800e5ee <_printf_float+0x192>
 800e622:	2b00      	cmp	r3, #0
 800e624:	bfd4      	ite	le
 800e626:	f1c3 0302 	rsble	r3, r3, #2
 800e62a:	2301      	movgt	r3, #1
 800e62c:	4413      	add	r3, r2
 800e62e:	e7de      	b.n	800e5ee <_printf_float+0x192>
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	055a      	lsls	r2, r3, #21
 800e634:	d407      	bmi.n	800e646 <_printf_float+0x1ea>
 800e636:	6923      	ldr	r3, [r4, #16]
 800e638:	4642      	mov	r2, r8
 800e63a:	4631      	mov	r1, r6
 800e63c:	4628      	mov	r0, r5
 800e63e:	47b8      	blx	r7
 800e640:	3001      	adds	r0, #1
 800e642:	d12b      	bne.n	800e69c <_printf_float+0x240>
 800e644:	e767      	b.n	800e516 <_printf_float+0xba>
 800e646:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e64a:	f240 80dc 	bls.w	800e806 <_printf_float+0x3aa>
 800e64e:	2200      	movs	r2, #0
 800e650:	2300      	movs	r3, #0
 800e652:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e656:	f7f2 fa4f 	bl	8000af8 <__aeabi_dcmpeq>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d033      	beq.n	800e6c6 <_printf_float+0x26a>
 800e65e:	2301      	movs	r3, #1
 800e660:	4a41      	ldr	r2, [pc, #260]	; (800e768 <_printf_float+0x30c>)
 800e662:	4631      	mov	r1, r6
 800e664:	4628      	mov	r0, r5
 800e666:	47b8      	blx	r7
 800e668:	3001      	adds	r0, #1
 800e66a:	f43f af54 	beq.w	800e516 <_printf_float+0xba>
 800e66e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e672:	429a      	cmp	r2, r3
 800e674:	db02      	blt.n	800e67c <_printf_float+0x220>
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	07d8      	lsls	r0, r3, #31
 800e67a:	d50f      	bpl.n	800e69c <_printf_float+0x240>
 800e67c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e680:	4631      	mov	r1, r6
 800e682:	4628      	mov	r0, r5
 800e684:	47b8      	blx	r7
 800e686:	3001      	adds	r0, #1
 800e688:	f43f af45 	beq.w	800e516 <_printf_float+0xba>
 800e68c:	f04f 0800 	mov.w	r8, #0
 800e690:	f104 091a 	add.w	r9, r4, #26
 800e694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e696:	3b01      	subs	r3, #1
 800e698:	4543      	cmp	r3, r8
 800e69a:	dc09      	bgt.n	800e6b0 <_printf_float+0x254>
 800e69c:	6823      	ldr	r3, [r4, #0]
 800e69e:	079b      	lsls	r3, r3, #30
 800e6a0:	f100 8103 	bmi.w	800e8aa <_printf_float+0x44e>
 800e6a4:	68e0      	ldr	r0, [r4, #12]
 800e6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6a8:	4298      	cmp	r0, r3
 800e6aa:	bfb8      	it	lt
 800e6ac:	4618      	movlt	r0, r3
 800e6ae:	e734      	b.n	800e51a <_printf_float+0xbe>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	464a      	mov	r2, r9
 800e6b4:	4631      	mov	r1, r6
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	47b8      	blx	r7
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	f43f af2b 	beq.w	800e516 <_printf_float+0xba>
 800e6c0:	f108 0801 	add.w	r8, r8, #1
 800e6c4:	e7e6      	b.n	800e694 <_printf_float+0x238>
 800e6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	dc2b      	bgt.n	800e724 <_printf_float+0x2c8>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	4a26      	ldr	r2, [pc, #152]	; (800e768 <_printf_float+0x30c>)
 800e6d0:	4631      	mov	r1, r6
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	47b8      	blx	r7
 800e6d6:	3001      	adds	r0, #1
 800e6d8:	f43f af1d 	beq.w	800e516 <_printf_float+0xba>
 800e6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6de:	b923      	cbnz	r3, 800e6ea <_printf_float+0x28e>
 800e6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6e2:	b913      	cbnz	r3, 800e6ea <_printf_float+0x28e>
 800e6e4:	6823      	ldr	r3, [r4, #0]
 800e6e6:	07d9      	lsls	r1, r3, #31
 800e6e8:	d5d8      	bpl.n	800e69c <_printf_float+0x240>
 800e6ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ee:	4631      	mov	r1, r6
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	47b8      	blx	r7
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	f43f af0e 	beq.w	800e516 <_printf_float+0xba>
 800e6fa:	f04f 0900 	mov.w	r9, #0
 800e6fe:	f104 0a1a 	add.w	sl, r4, #26
 800e702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e704:	425b      	negs	r3, r3
 800e706:	454b      	cmp	r3, r9
 800e708:	dc01      	bgt.n	800e70e <_printf_float+0x2b2>
 800e70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e70c:	e794      	b.n	800e638 <_printf_float+0x1dc>
 800e70e:	2301      	movs	r3, #1
 800e710:	4652      	mov	r2, sl
 800e712:	4631      	mov	r1, r6
 800e714:	4628      	mov	r0, r5
 800e716:	47b8      	blx	r7
 800e718:	3001      	adds	r0, #1
 800e71a:	f43f aefc 	beq.w	800e516 <_printf_float+0xba>
 800e71e:	f109 0901 	add.w	r9, r9, #1
 800e722:	e7ee      	b.n	800e702 <_printf_float+0x2a6>
 800e724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e728:	429a      	cmp	r2, r3
 800e72a:	bfa8      	it	ge
 800e72c:	461a      	movge	r2, r3
 800e72e:	2a00      	cmp	r2, #0
 800e730:	4691      	mov	r9, r2
 800e732:	dd07      	ble.n	800e744 <_printf_float+0x2e8>
 800e734:	4613      	mov	r3, r2
 800e736:	4631      	mov	r1, r6
 800e738:	4642      	mov	r2, r8
 800e73a:	4628      	mov	r0, r5
 800e73c:	47b8      	blx	r7
 800e73e:	3001      	adds	r0, #1
 800e740:	f43f aee9 	beq.w	800e516 <_printf_float+0xba>
 800e744:	f104 031a 	add.w	r3, r4, #26
 800e748:	f04f 0b00 	mov.w	fp, #0
 800e74c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e750:	9306      	str	r3, [sp, #24]
 800e752:	e015      	b.n	800e780 <_printf_float+0x324>
 800e754:	7fefffff 	.word	0x7fefffff
 800e758:	080136dc 	.word	0x080136dc
 800e75c:	080136d8 	.word	0x080136d8
 800e760:	080136e4 	.word	0x080136e4
 800e764:	080136e0 	.word	0x080136e0
 800e768:	08013903 	.word	0x08013903
 800e76c:	2301      	movs	r3, #1
 800e76e:	9a06      	ldr	r2, [sp, #24]
 800e770:	4631      	mov	r1, r6
 800e772:	4628      	mov	r0, r5
 800e774:	47b8      	blx	r7
 800e776:	3001      	adds	r0, #1
 800e778:	f43f aecd 	beq.w	800e516 <_printf_float+0xba>
 800e77c:	f10b 0b01 	add.w	fp, fp, #1
 800e780:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e784:	ebaa 0309 	sub.w	r3, sl, r9
 800e788:	455b      	cmp	r3, fp
 800e78a:	dcef      	bgt.n	800e76c <_printf_float+0x310>
 800e78c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e790:	429a      	cmp	r2, r3
 800e792:	44d0      	add	r8, sl
 800e794:	db15      	blt.n	800e7c2 <_printf_float+0x366>
 800e796:	6823      	ldr	r3, [r4, #0]
 800e798:	07da      	lsls	r2, r3, #31
 800e79a:	d412      	bmi.n	800e7c2 <_printf_float+0x366>
 800e79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e79e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7a0:	eba3 020a 	sub.w	r2, r3, sl
 800e7a4:	eba3 0a01 	sub.w	sl, r3, r1
 800e7a8:	4592      	cmp	sl, r2
 800e7aa:	bfa8      	it	ge
 800e7ac:	4692      	movge	sl, r2
 800e7ae:	f1ba 0f00 	cmp.w	sl, #0
 800e7b2:	dc0e      	bgt.n	800e7d2 <_printf_float+0x376>
 800e7b4:	f04f 0800 	mov.w	r8, #0
 800e7b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7bc:	f104 091a 	add.w	r9, r4, #26
 800e7c0:	e019      	b.n	800e7f6 <_printf_float+0x39a>
 800e7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7c6:	4631      	mov	r1, r6
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	47b8      	blx	r7
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	d1e5      	bne.n	800e79c <_printf_float+0x340>
 800e7d0:	e6a1      	b.n	800e516 <_printf_float+0xba>
 800e7d2:	4653      	mov	r3, sl
 800e7d4:	4642      	mov	r2, r8
 800e7d6:	4631      	mov	r1, r6
 800e7d8:	4628      	mov	r0, r5
 800e7da:	47b8      	blx	r7
 800e7dc:	3001      	adds	r0, #1
 800e7de:	d1e9      	bne.n	800e7b4 <_printf_float+0x358>
 800e7e0:	e699      	b.n	800e516 <_printf_float+0xba>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	464a      	mov	r2, r9
 800e7e6:	4631      	mov	r1, r6
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	47b8      	blx	r7
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	f43f ae92 	beq.w	800e516 <_printf_float+0xba>
 800e7f2:	f108 0801 	add.w	r8, r8, #1
 800e7f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7fa:	1a9b      	subs	r3, r3, r2
 800e7fc:	eba3 030a 	sub.w	r3, r3, sl
 800e800:	4543      	cmp	r3, r8
 800e802:	dcee      	bgt.n	800e7e2 <_printf_float+0x386>
 800e804:	e74a      	b.n	800e69c <_printf_float+0x240>
 800e806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e808:	2a01      	cmp	r2, #1
 800e80a:	dc01      	bgt.n	800e810 <_printf_float+0x3b4>
 800e80c:	07db      	lsls	r3, r3, #31
 800e80e:	d53a      	bpl.n	800e886 <_printf_float+0x42a>
 800e810:	2301      	movs	r3, #1
 800e812:	4642      	mov	r2, r8
 800e814:	4631      	mov	r1, r6
 800e816:	4628      	mov	r0, r5
 800e818:	47b8      	blx	r7
 800e81a:	3001      	adds	r0, #1
 800e81c:	f43f ae7b 	beq.w	800e516 <_printf_float+0xba>
 800e820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e824:	4631      	mov	r1, r6
 800e826:	4628      	mov	r0, r5
 800e828:	47b8      	blx	r7
 800e82a:	3001      	adds	r0, #1
 800e82c:	f108 0801 	add.w	r8, r8, #1
 800e830:	f43f ae71 	beq.w	800e516 <_printf_float+0xba>
 800e834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e836:	2200      	movs	r2, #0
 800e838:	f103 3aff 	add.w	sl, r3, #4294967295
 800e83c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e840:	2300      	movs	r3, #0
 800e842:	f7f2 f959 	bl	8000af8 <__aeabi_dcmpeq>
 800e846:	b9c8      	cbnz	r0, 800e87c <_printf_float+0x420>
 800e848:	4653      	mov	r3, sl
 800e84a:	4642      	mov	r2, r8
 800e84c:	4631      	mov	r1, r6
 800e84e:	4628      	mov	r0, r5
 800e850:	47b8      	blx	r7
 800e852:	3001      	adds	r0, #1
 800e854:	d10e      	bne.n	800e874 <_printf_float+0x418>
 800e856:	e65e      	b.n	800e516 <_printf_float+0xba>
 800e858:	2301      	movs	r3, #1
 800e85a:	4652      	mov	r2, sl
 800e85c:	4631      	mov	r1, r6
 800e85e:	4628      	mov	r0, r5
 800e860:	47b8      	blx	r7
 800e862:	3001      	adds	r0, #1
 800e864:	f43f ae57 	beq.w	800e516 <_printf_float+0xba>
 800e868:	f108 0801 	add.w	r8, r8, #1
 800e86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e86e:	3b01      	subs	r3, #1
 800e870:	4543      	cmp	r3, r8
 800e872:	dcf1      	bgt.n	800e858 <_printf_float+0x3fc>
 800e874:	464b      	mov	r3, r9
 800e876:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e87a:	e6de      	b.n	800e63a <_printf_float+0x1de>
 800e87c:	f04f 0800 	mov.w	r8, #0
 800e880:	f104 0a1a 	add.w	sl, r4, #26
 800e884:	e7f2      	b.n	800e86c <_printf_float+0x410>
 800e886:	2301      	movs	r3, #1
 800e888:	e7df      	b.n	800e84a <_printf_float+0x3ee>
 800e88a:	2301      	movs	r3, #1
 800e88c:	464a      	mov	r2, r9
 800e88e:	4631      	mov	r1, r6
 800e890:	4628      	mov	r0, r5
 800e892:	47b8      	blx	r7
 800e894:	3001      	adds	r0, #1
 800e896:	f43f ae3e 	beq.w	800e516 <_printf_float+0xba>
 800e89a:	f108 0801 	add.w	r8, r8, #1
 800e89e:	68e3      	ldr	r3, [r4, #12]
 800e8a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8a2:	1a9b      	subs	r3, r3, r2
 800e8a4:	4543      	cmp	r3, r8
 800e8a6:	dcf0      	bgt.n	800e88a <_printf_float+0x42e>
 800e8a8:	e6fc      	b.n	800e6a4 <_printf_float+0x248>
 800e8aa:	f04f 0800 	mov.w	r8, #0
 800e8ae:	f104 0919 	add.w	r9, r4, #25
 800e8b2:	e7f4      	b.n	800e89e <_printf_float+0x442>
 800e8b4:	2900      	cmp	r1, #0
 800e8b6:	f43f ae8b 	beq.w	800e5d0 <_printf_float+0x174>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e8c0:	ab09      	add	r3, sp, #36	; 0x24
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	ec49 8b10 	vmov	d0, r8, r9
 800e8c8:	6022      	str	r2, [r4, #0]
 800e8ca:	f8cd a004 	str.w	sl, [sp, #4]
 800e8ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e8d2:	4628      	mov	r0, r5
 800e8d4:	f7ff fd2e 	bl	800e334 <__cvt>
 800e8d8:	4680      	mov	r8, r0
 800e8da:	e648      	b.n	800e56e <_printf_float+0x112>

0800e8dc <_printf_common>:
 800e8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e0:	4691      	mov	r9, r2
 800e8e2:	461f      	mov	r7, r3
 800e8e4:	688a      	ldr	r2, [r1, #8]
 800e8e6:	690b      	ldr	r3, [r1, #16]
 800e8e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	bfb8      	it	lt
 800e8f0:	4613      	movlt	r3, r2
 800e8f2:	f8c9 3000 	str.w	r3, [r9]
 800e8f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	460c      	mov	r4, r1
 800e8fe:	b112      	cbz	r2, 800e906 <_printf_common+0x2a>
 800e900:	3301      	adds	r3, #1
 800e902:	f8c9 3000 	str.w	r3, [r9]
 800e906:	6823      	ldr	r3, [r4, #0]
 800e908:	0699      	lsls	r1, r3, #26
 800e90a:	bf42      	ittt	mi
 800e90c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e910:	3302      	addmi	r3, #2
 800e912:	f8c9 3000 	strmi.w	r3, [r9]
 800e916:	6825      	ldr	r5, [r4, #0]
 800e918:	f015 0506 	ands.w	r5, r5, #6
 800e91c:	d107      	bne.n	800e92e <_printf_common+0x52>
 800e91e:	f104 0a19 	add.w	sl, r4, #25
 800e922:	68e3      	ldr	r3, [r4, #12]
 800e924:	f8d9 2000 	ldr.w	r2, [r9]
 800e928:	1a9b      	subs	r3, r3, r2
 800e92a:	42ab      	cmp	r3, r5
 800e92c:	dc28      	bgt.n	800e980 <_printf_common+0xa4>
 800e92e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e932:	6822      	ldr	r2, [r4, #0]
 800e934:	3300      	adds	r3, #0
 800e936:	bf18      	it	ne
 800e938:	2301      	movne	r3, #1
 800e93a:	0692      	lsls	r2, r2, #26
 800e93c:	d42d      	bmi.n	800e99a <_printf_common+0xbe>
 800e93e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e942:	4639      	mov	r1, r7
 800e944:	4630      	mov	r0, r6
 800e946:	47c0      	blx	r8
 800e948:	3001      	adds	r0, #1
 800e94a:	d020      	beq.n	800e98e <_printf_common+0xb2>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	68e5      	ldr	r5, [r4, #12]
 800e950:	f8d9 2000 	ldr.w	r2, [r9]
 800e954:	f003 0306 	and.w	r3, r3, #6
 800e958:	2b04      	cmp	r3, #4
 800e95a:	bf08      	it	eq
 800e95c:	1aad      	subeq	r5, r5, r2
 800e95e:	68a3      	ldr	r3, [r4, #8]
 800e960:	6922      	ldr	r2, [r4, #16]
 800e962:	bf0c      	ite	eq
 800e964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e968:	2500      	movne	r5, #0
 800e96a:	4293      	cmp	r3, r2
 800e96c:	bfc4      	itt	gt
 800e96e:	1a9b      	subgt	r3, r3, r2
 800e970:	18ed      	addgt	r5, r5, r3
 800e972:	f04f 0900 	mov.w	r9, #0
 800e976:	341a      	adds	r4, #26
 800e978:	454d      	cmp	r5, r9
 800e97a:	d11a      	bne.n	800e9b2 <_printf_common+0xd6>
 800e97c:	2000      	movs	r0, #0
 800e97e:	e008      	b.n	800e992 <_printf_common+0xb6>
 800e980:	2301      	movs	r3, #1
 800e982:	4652      	mov	r2, sl
 800e984:	4639      	mov	r1, r7
 800e986:	4630      	mov	r0, r6
 800e988:	47c0      	blx	r8
 800e98a:	3001      	adds	r0, #1
 800e98c:	d103      	bne.n	800e996 <_printf_common+0xba>
 800e98e:	f04f 30ff 	mov.w	r0, #4294967295
 800e992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e996:	3501      	adds	r5, #1
 800e998:	e7c3      	b.n	800e922 <_printf_common+0x46>
 800e99a:	18e1      	adds	r1, r4, r3
 800e99c:	1c5a      	adds	r2, r3, #1
 800e99e:	2030      	movs	r0, #48	; 0x30
 800e9a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9a4:	4422      	add	r2, r4
 800e9a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9ae:	3302      	adds	r3, #2
 800e9b0:	e7c5      	b.n	800e93e <_printf_common+0x62>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	4622      	mov	r2, r4
 800e9b6:	4639      	mov	r1, r7
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	47c0      	blx	r8
 800e9bc:	3001      	adds	r0, #1
 800e9be:	d0e6      	beq.n	800e98e <_printf_common+0xb2>
 800e9c0:	f109 0901 	add.w	r9, r9, #1
 800e9c4:	e7d8      	b.n	800e978 <_printf_common+0x9c>
	...

0800e9c8 <_printf_i>:
 800e9c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	7e09      	ldrb	r1, [r1, #24]
 800e9d4:	b085      	sub	sp, #20
 800e9d6:	296e      	cmp	r1, #110	; 0x6e
 800e9d8:	4617      	mov	r7, r2
 800e9da:	4606      	mov	r6, r0
 800e9dc:	4698      	mov	r8, r3
 800e9de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9e0:	f000 80b3 	beq.w	800eb4a <_printf_i+0x182>
 800e9e4:	d822      	bhi.n	800ea2c <_printf_i+0x64>
 800e9e6:	2963      	cmp	r1, #99	; 0x63
 800e9e8:	d036      	beq.n	800ea58 <_printf_i+0x90>
 800e9ea:	d80a      	bhi.n	800ea02 <_printf_i+0x3a>
 800e9ec:	2900      	cmp	r1, #0
 800e9ee:	f000 80b9 	beq.w	800eb64 <_printf_i+0x19c>
 800e9f2:	2958      	cmp	r1, #88	; 0x58
 800e9f4:	f000 8083 	beq.w	800eafe <_printf_i+0x136>
 800e9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ea00:	e032      	b.n	800ea68 <_printf_i+0xa0>
 800ea02:	2964      	cmp	r1, #100	; 0x64
 800ea04:	d001      	beq.n	800ea0a <_printf_i+0x42>
 800ea06:	2969      	cmp	r1, #105	; 0x69
 800ea08:	d1f6      	bne.n	800e9f8 <_printf_i+0x30>
 800ea0a:	6820      	ldr	r0, [r4, #0]
 800ea0c:	6813      	ldr	r3, [r2, #0]
 800ea0e:	0605      	lsls	r5, r0, #24
 800ea10:	f103 0104 	add.w	r1, r3, #4
 800ea14:	d52a      	bpl.n	800ea6c <_printf_i+0xa4>
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	6011      	str	r1, [r2, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	da03      	bge.n	800ea26 <_printf_i+0x5e>
 800ea1e:	222d      	movs	r2, #45	; 0x2d
 800ea20:	425b      	negs	r3, r3
 800ea22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ea26:	486f      	ldr	r0, [pc, #444]	; (800ebe4 <_printf_i+0x21c>)
 800ea28:	220a      	movs	r2, #10
 800ea2a:	e039      	b.n	800eaa0 <_printf_i+0xd8>
 800ea2c:	2973      	cmp	r1, #115	; 0x73
 800ea2e:	f000 809d 	beq.w	800eb6c <_printf_i+0x1a4>
 800ea32:	d808      	bhi.n	800ea46 <_printf_i+0x7e>
 800ea34:	296f      	cmp	r1, #111	; 0x6f
 800ea36:	d020      	beq.n	800ea7a <_printf_i+0xb2>
 800ea38:	2970      	cmp	r1, #112	; 0x70
 800ea3a:	d1dd      	bne.n	800e9f8 <_printf_i+0x30>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	f043 0320 	orr.w	r3, r3, #32
 800ea42:	6023      	str	r3, [r4, #0]
 800ea44:	e003      	b.n	800ea4e <_printf_i+0x86>
 800ea46:	2975      	cmp	r1, #117	; 0x75
 800ea48:	d017      	beq.n	800ea7a <_printf_i+0xb2>
 800ea4a:	2978      	cmp	r1, #120	; 0x78
 800ea4c:	d1d4      	bne.n	800e9f8 <_printf_i+0x30>
 800ea4e:	2378      	movs	r3, #120	; 0x78
 800ea50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea54:	4864      	ldr	r0, [pc, #400]	; (800ebe8 <_printf_i+0x220>)
 800ea56:	e055      	b.n	800eb04 <_printf_i+0x13c>
 800ea58:	6813      	ldr	r3, [r2, #0]
 800ea5a:	1d19      	adds	r1, r3, #4
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	6011      	str	r1, [r2, #0]
 800ea60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea68:	2301      	movs	r3, #1
 800ea6a:	e08c      	b.n	800eb86 <_printf_i+0x1be>
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	6011      	str	r1, [r2, #0]
 800ea70:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ea74:	bf18      	it	ne
 800ea76:	b21b      	sxthne	r3, r3
 800ea78:	e7cf      	b.n	800ea1a <_printf_i+0x52>
 800ea7a:	6813      	ldr	r3, [r2, #0]
 800ea7c:	6825      	ldr	r5, [r4, #0]
 800ea7e:	1d18      	adds	r0, r3, #4
 800ea80:	6010      	str	r0, [r2, #0]
 800ea82:	0628      	lsls	r0, r5, #24
 800ea84:	d501      	bpl.n	800ea8a <_printf_i+0xc2>
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	e002      	b.n	800ea90 <_printf_i+0xc8>
 800ea8a:	0668      	lsls	r0, r5, #25
 800ea8c:	d5fb      	bpl.n	800ea86 <_printf_i+0xbe>
 800ea8e:	881b      	ldrh	r3, [r3, #0]
 800ea90:	4854      	ldr	r0, [pc, #336]	; (800ebe4 <_printf_i+0x21c>)
 800ea92:	296f      	cmp	r1, #111	; 0x6f
 800ea94:	bf14      	ite	ne
 800ea96:	220a      	movne	r2, #10
 800ea98:	2208      	moveq	r2, #8
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eaa0:	6865      	ldr	r5, [r4, #4]
 800eaa2:	60a5      	str	r5, [r4, #8]
 800eaa4:	2d00      	cmp	r5, #0
 800eaa6:	f2c0 8095 	blt.w	800ebd4 <_printf_i+0x20c>
 800eaaa:	6821      	ldr	r1, [r4, #0]
 800eaac:	f021 0104 	bic.w	r1, r1, #4
 800eab0:	6021      	str	r1, [r4, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d13d      	bne.n	800eb32 <_printf_i+0x16a>
 800eab6:	2d00      	cmp	r5, #0
 800eab8:	f040 808e 	bne.w	800ebd8 <_printf_i+0x210>
 800eabc:	4665      	mov	r5, ip
 800eabe:	2a08      	cmp	r2, #8
 800eac0:	d10b      	bne.n	800eada <_printf_i+0x112>
 800eac2:	6823      	ldr	r3, [r4, #0]
 800eac4:	07db      	lsls	r3, r3, #31
 800eac6:	d508      	bpl.n	800eada <_printf_i+0x112>
 800eac8:	6923      	ldr	r3, [r4, #16]
 800eaca:	6862      	ldr	r2, [r4, #4]
 800eacc:	429a      	cmp	r2, r3
 800eace:	bfde      	ittt	le
 800ead0:	2330      	movle	r3, #48	; 0x30
 800ead2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ead6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eada:	ebac 0305 	sub.w	r3, ip, r5
 800eade:	6123      	str	r3, [r4, #16]
 800eae0:	f8cd 8000 	str.w	r8, [sp]
 800eae4:	463b      	mov	r3, r7
 800eae6:	aa03      	add	r2, sp, #12
 800eae8:	4621      	mov	r1, r4
 800eaea:	4630      	mov	r0, r6
 800eaec:	f7ff fef6 	bl	800e8dc <_printf_common>
 800eaf0:	3001      	adds	r0, #1
 800eaf2:	d14d      	bne.n	800eb90 <_printf_i+0x1c8>
 800eaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf8:	b005      	add	sp, #20
 800eafa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eafe:	4839      	ldr	r0, [pc, #228]	; (800ebe4 <_printf_i+0x21c>)
 800eb00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800eb04:	6813      	ldr	r3, [r2, #0]
 800eb06:	6821      	ldr	r1, [r4, #0]
 800eb08:	1d1d      	adds	r5, r3, #4
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	6015      	str	r5, [r2, #0]
 800eb0e:	060a      	lsls	r2, r1, #24
 800eb10:	d50b      	bpl.n	800eb2a <_printf_i+0x162>
 800eb12:	07ca      	lsls	r2, r1, #31
 800eb14:	bf44      	itt	mi
 800eb16:	f041 0120 	orrmi.w	r1, r1, #32
 800eb1a:	6021      	strmi	r1, [r4, #0]
 800eb1c:	b91b      	cbnz	r3, 800eb26 <_printf_i+0x15e>
 800eb1e:	6822      	ldr	r2, [r4, #0]
 800eb20:	f022 0220 	bic.w	r2, r2, #32
 800eb24:	6022      	str	r2, [r4, #0]
 800eb26:	2210      	movs	r2, #16
 800eb28:	e7b7      	b.n	800ea9a <_printf_i+0xd2>
 800eb2a:	064d      	lsls	r5, r1, #25
 800eb2c:	bf48      	it	mi
 800eb2e:	b29b      	uxthmi	r3, r3
 800eb30:	e7ef      	b.n	800eb12 <_printf_i+0x14a>
 800eb32:	4665      	mov	r5, ip
 800eb34:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb38:	fb02 3311 	mls	r3, r2, r1, r3
 800eb3c:	5cc3      	ldrb	r3, [r0, r3]
 800eb3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eb42:	460b      	mov	r3, r1
 800eb44:	2900      	cmp	r1, #0
 800eb46:	d1f5      	bne.n	800eb34 <_printf_i+0x16c>
 800eb48:	e7b9      	b.n	800eabe <_printf_i+0xf6>
 800eb4a:	6813      	ldr	r3, [r2, #0]
 800eb4c:	6825      	ldr	r5, [r4, #0]
 800eb4e:	6961      	ldr	r1, [r4, #20]
 800eb50:	1d18      	adds	r0, r3, #4
 800eb52:	6010      	str	r0, [r2, #0]
 800eb54:	0628      	lsls	r0, r5, #24
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	d501      	bpl.n	800eb5e <_printf_i+0x196>
 800eb5a:	6019      	str	r1, [r3, #0]
 800eb5c:	e002      	b.n	800eb64 <_printf_i+0x19c>
 800eb5e:	066a      	lsls	r2, r5, #25
 800eb60:	d5fb      	bpl.n	800eb5a <_printf_i+0x192>
 800eb62:	8019      	strh	r1, [r3, #0]
 800eb64:	2300      	movs	r3, #0
 800eb66:	6123      	str	r3, [r4, #16]
 800eb68:	4665      	mov	r5, ip
 800eb6a:	e7b9      	b.n	800eae0 <_printf_i+0x118>
 800eb6c:	6813      	ldr	r3, [r2, #0]
 800eb6e:	1d19      	adds	r1, r3, #4
 800eb70:	6011      	str	r1, [r2, #0]
 800eb72:	681d      	ldr	r5, [r3, #0]
 800eb74:	6862      	ldr	r2, [r4, #4]
 800eb76:	2100      	movs	r1, #0
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f7f1 fb49 	bl	8000210 <memchr>
 800eb7e:	b108      	cbz	r0, 800eb84 <_printf_i+0x1bc>
 800eb80:	1b40      	subs	r0, r0, r5
 800eb82:	6060      	str	r0, [r4, #4]
 800eb84:	6863      	ldr	r3, [r4, #4]
 800eb86:	6123      	str	r3, [r4, #16]
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb8e:	e7a7      	b.n	800eae0 <_printf_i+0x118>
 800eb90:	6923      	ldr	r3, [r4, #16]
 800eb92:	462a      	mov	r2, r5
 800eb94:	4639      	mov	r1, r7
 800eb96:	4630      	mov	r0, r6
 800eb98:	47c0      	blx	r8
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	d0aa      	beq.n	800eaf4 <_printf_i+0x12c>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	079b      	lsls	r3, r3, #30
 800eba2:	d413      	bmi.n	800ebcc <_printf_i+0x204>
 800eba4:	68e0      	ldr	r0, [r4, #12]
 800eba6:	9b03      	ldr	r3, [sp, #12]
 800eba8:	4298      	cmp	r0, r3
 800ebaa:	bfb8      	it	lt
 800ebac:	4618      	movlt	r0, r3
 800ebae:	e7a3      	b.n	800eaf8 <_printf_i+0x130>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	464a      	mov	r2, r9
 800ebb4:	4639      	mov	r1, r7
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	47c0      	blx	r8
 800ebba:	3001      	adds	r0, #1
 800ebbc:	d09a      	beq.n	800eaf4 <_printf_i+0x12c>
 800ebbe:	3501      	adds	r5, #1
 800ebc0:	68e3      	ldr	r3, [r4, #12]
 800ebc2:	9a03      	ldr	r2, [sp, #12]
 800ebc4:	1a9b      	subs	r3, r3, r2
 800ebc6:	42ab      	cmp	r3, r5
 800ebc8:	dcf2      	bgt.n	800ebb0 <_printf_i+0x1e8>
 800ebca:	e7eb      	b.n	800eba4 <_printf_i+0x1dc>
 800ebcc:	2500      	movs	r5, #0
 800ebce:	f104 0919 	add.w	r9, r4, #25
 800ebd2:	e7f5      	b.n	800ebc0 <_printf_i+0x1f8>
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1ac      	bne.n	800eb32 <_printf_i+0x16a>
 800ebd8:	7803      	ldrb	r3, [r0, #0]
 800ebda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebe2:	e76c      	b.n	800eabe <_printf_i+0xf6>
 800ebe4:	080136e8 	.word	0x080136e8
 800ebe8:	080136f9 	.word	0x080136f9

0800ebec <_scanf_float>:
 800ebec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf0:	469a      	mov	sl, r3
 800ebf2:	688b      	ldr	r3, [r1, #8]
 800ebf4:	4616      	mov	r6, r2
 800ebf6:	1e5a      	subs	r2, r3, #1
 800ebf8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ebfc:	b087      	sub	sp, #28
 800ebfe:	bf83      	ittte	hi
 800ec00:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ec04:	189b      	addhi	r3, r3, r2
 800ec06:	9301      	strhi	r3, [sp, #4]
 800ec08:	2300      	movls	r3, #0
 800ec0a:	bf86      	itte	hi
 800ec0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ec10:	608b      	strhi	r3, [r1, #8]
 800ec12:	9301      	strls	r3, [sp, #4]
 800ec14:	680b      	ldr	r3, [r1, #0]
 800ec16:	4688      	mov	r8, r1
 800ec18:	f04f 0b00 	mov.w	fp, #0
 800ec1c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ec20:	f848 3b1c 	str.w	r3, [r8], #28
 800ec24:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ec28:	4607      	mov	r7, r0
 800ec2a:	460c      	mov	r4, r1
 800ec2c:	4645      	mov	r5, r8
 800ec2e:	465a      	mov	r2, fp
 800ec30:	46d9      	mov	r9, fp
 800ec32:	f8cd b008 	str.w	fp, [sp, #8]
 800ec36:	68a1      	ldr	r1, [r4, #8]
 800ec38:	b181      	cbz	r1, 800ec5c <_scanf_float+0x70>
 800ec3a:	6833      	ldr	r3, [r6, #0]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	2b49      	cmp	r3, #73	; 0x49
 800ec40:	d071      	beq.n	800ed26 <_scanf_float+0x13a>
 800ec42:	d84d      	bhi.n	800ece0 <_scanf_float+0xf4>
 800ec44:	2b39      	cmp	r3, #57	; 0x39
 800ec46:	d840      	bhi.n	800ecca <_scanf_float+0xde>
 800ec48:	2b31      	cmp	r3, #49	; 0x31
 800ec4a:	f080 8088 	bcs.w	800ed5e <_scanf_float+0x172>
 800ec4e:	2b2d      	cmp	r3, #45	; 0x2d
 800ec50:	f000 8090 	beq.w	800ed74 <_scanf_float+0x188>
 800ec54:	d815      	bhi.n	800ec82 <_scanf_float+0x96>
 800ec56:	2b2b      	cmp	r3, #43	; 0x2b
 800ec58:	f000 808c 	beq.w	800ed74 <_scanf_float+0x188>
 800ec5c:	f1b9 0f00 	cmp.w	r9, #0
 800ec60:	d003      	beq.n	800ec6a <_scanf_float+0x7e>
 800ec62:	6823      	ldr	r3, [r4, #0]
 800ec64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec68:	6023      	str	r3, [r4, #0]
 800ec6a:	3a01      	subs	r2, #1
 800ec6c:	2a01      	cmp	r2, #1
 800ec6e:	f200 80ea 	bhi.w	800ee46 <_scanf_float+0x25a>
 800ec72:	4545      	cmp	r5, r8
 800ec74:	f200 80dc 	bhi.w	800ee30 <_scanf_float+0x244>
 800ec78:	2601      	movs	r6, #1
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	b007      	add	sp, #28
 800ec7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec82:	2b2e      	cmp	r3, #46	; 0x2e
 800ec84:	f000 809f 	beq.w	800edc6 <_scanf_float+0x1da>
 800ec88:	2b30      	cmp	r3, #48	; 0x30
 800ec8a:	d1e7      	bne.n	800ec5c <_scanf_float+0x70>
 800ec8c:	6820      	ldr	r0, [r4, #0]
 800ec8e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ec92:	d064      	beq.n	800ed5e <_scanf_float+0x172>
 800ec94:	9b01      	ldr	r3, [sp, #4]
 800ec96:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ec9a:	6020      	str	r0, [r4, #0]
 800ec9c:	f109 0901 	add.w	r9, r9, #1
 800eca0:	b11b      	cbz	r3, 800ecaa <_scanf_float+0xbe>
 800eca2:	3b01      	subs	r3, #1
 800eca4:	3101      	adds	r1, #1
 800eca6:	9301      	str	r3, [sp, #4]
 800eca8:	60a1      	str	r1, [r4, #8]
 800ecaa:	68a3      	ldr	r3, [r4, #8]
 800ecac:	3b01      	subs	r3, #1
 800ecae:	60a3      	str	r3, [r4, #8]
 800ecb0:	6923      	ldr	r3, [r4, #16]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	6123      	str	r3, [r4, #16]
 800ecb6:	6873      	ldr	r3, [r6, #4]
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	6073      	str	r3, [r6, #4]
 800ecbe:	f340 80ac 	ble.w	800ee1a <_scanf_float+0x22e>
 800ecc2:	6833      	ldr	r3, [r6, #0]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	6033      	str	r3, [r6, #0]
 800ecc8:	e7b5      	b.n	800ec36 <_scanf_float+0x4a>
 800ecca:	2b45      	cmp	r3, #69	; 0x45
 800eccc:	f000 8085 	beq.w	800edda <_scanf_float+0x1ee>
 800ecd0:	2b46      	cmp	r3, #70	; 0x46
 800ecd2:	d06a      	beq.n	800edaa <_scanf_float+0x1be>
 800ecd4:	2b41      	cmp	r3, #65	; 0x41
 800ecd6:	d1c1      	bne.n	800ec5c <_scanf_float+0x70>
 800ecd8:	2a01      	cmp	r2, #1
 800ecda:	d1bf      	bne.n	800ec5c <_scanf_float+0x70>
 800ecdc:	2202      	movs	r2, #2
 800ecde:	e046      	b.n	800ed6e <_scanf_float+0x182>
 800ece0:	2b65      	cmp	r3, #101	; 0x65
 800ece2:	d07a      	beq.n	800edda <_scanf_float+0x1ee>
 800ece4:	d818      	bhi.n	800ed18 <_scanf_float+0x12c>
 800ece6:	2b54      	cmp	r3, #84	; 0x54
 800ece8:	d066      	beq.n	800edb8 <_scanf_float+0x1cc>
 800ecea:	d811      	bhi.n	800ed10 <_scanf_float+0x124>
 800ecec:	2b4e      	cmp	r3, #78	; 0x4e
 800ecee:	d1b5      	bne.n	800ec5c <_scanf_float+0x70>
 800ecf0:	2a00      	cmp	r2, #0
 800ecf2:	d146      	bne.n	800ed82 <_scanf_float+0x196>
 800ecf4:	f1b9 0f00 	cmp.w	r9, #0
 800ecf8:	d145      	bne.n	800ed86 <_scanf_float+0x19a>
 800ecfa:	6821      	ldr	r1, [r4, #0]
 800ecfc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ed00:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ed04:	d13f      	bne.n	800ed86 <_scanf_float+0x19a>
 800ed06:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ed0a:	6021      	str	r1, [r4, #0]
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	e02e      	b.n	800ed6e <_scanf_float+0x182>
 800ed10:	2b59      	cmp	r3, #89	; 0x59
 800ed12:	d01e      	beq.n	800ed52 <_scanf_float+0x166>
 800ed14:	2b61      	cmp	r3, #97	; 0x61
 800ed16:	e7de      	b.n	800ecd6 <_scanf_float+0xea>
 800ed18:	2b6e      	cmp	r3, #110	; 0x6e
 800ed1a:	d0e9      	beq.n	800ecf0 <_scanf_float+0x104>
 800ed1c:	d815      	bhi.n	800ed4a <_scanf_float+0x15e>
 800ed1e:	2b66      	cmp	r3, #102	; 0x66
 800ed20:	d043      	beq.n	800edaa <_scanf_float+0x1be>
 800ed22:	2b69      	cmp	r3, #105	; 0x69
 800ed24:	d19a      	bne.n	800ec5c <_scanf_float+0x70>
 800ed26:	f1bb 0f00 	cmp.w	fp, #0
 800ed2a:	d138      	bne.n	800ed9e <_scanf_float+0x1b2>
 800ed2c:	f1b9 0f00 	cmp.w	r9, #0
 800ed30:	d197      	bne.n	800ec62 <_scanf_float+0x76>
 800ed32:	6821      	ldr	r1, [r4, #0]
 800ed34:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ed38:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ed3c:	d195      	bne.n	800ec6a <_scanf_float+0x7e>
 800ed3e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ed42:	6021      	str	r1, [r4, #0]
 800ed44:	f04f 0b01 	mov.w	fp, #1
 800ed48:	e011      	b.n	800ed6e <_scanf_float+0x182>
 800ed4a:	2b74      	cmp	r3, #116	; 0x74
 800ed4c:	d034      	beq.n	800edb8 <_scanf_float+0x1cc>
 800ed4e:	2b79      	cmp	r3, #121	; 0x79
 800ed50:	d184      	bne.n	800ec5c <_scanf_float+0x70>
 800ed52:	f1bb 0f07 	cmp.w	fp, #7
 800ed56:	d181      	bne.n	800ec5c <_scanf_float+0x70>
 800ed58:	f04f 0b08 	mov.w	fp, #8
 800ed5c:	e007      	b.n	800ed6e <_scanf_float+0x182>
 800ed5e:	eb12 0f0b 	cmn.w	r2, fp
 800ed62:	f47f af7b 	bne.w	800ec5c <_scanf_float+0x70>
 800ed66:	6821      	ldr	r1, [r4, #0]
 800ed68:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ed6c:	6021      	str	r1, [r4, #0]
 800ed6e:	702b      	strb	r3, [r5, #0]
 800ed70:	3501      	adds	r5, #1
 800ed72:	e79a      	b.n	800ecaa <_scanf_float+0xbe>
 800ed74:	6821      	ldr	r1, [r4, #0]
 800ed76:	0608      	lsls	r0, r1, #24
 800ed78:	f57f af70 	bpl.w	800ec5c <_scanf_float+0x70>
 800ed7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ed80:	e7f4      	b.n	800ed6c <_scanf_float+0x180>
 800ed82:	2a02      	cmp	r2, #2
 800ed84:	d047      	beq.n	800ee16 <_scanf_float+0x22a>
 800ed86:	f1bb 0f01 	cmp.w	fp, #1
 800ed8a:	d003      	beq.n	800ed94 <_scanf_float+0x1a8>
 800ed8c:	f1bb 0f04 	cmp.w	fp, #4
 800ed90:	f47f af64 	bne.w	800ec5c <_scanf_float+0x70>
 800ed94:	f10b 0b01 	add.w	fp, fp, #1
 800ed98:	fa5f fb8b 	uxtb.w	fp, fp
 800ed9c:	e7e7      	b.n	800ed6e <_scanf_float+0x182>
 800ed9e:	f1bb 0f03 	cmp.w	fp, #3
 800eda2:	d0f7      	beq.n	800ed94 <_scanf_float+0x1a8>
 800eda4:	f1bb 0f05 	cmp.w	fp, #5
 800eda8:	e7f2      	b.n	800ed90 <_scanf_float+0x1a4>
 800edaa:	f1bb 0f02 	cmp.w	fp, #2
 800edae:	f47f af55 	bne.w	800ec5c <_scanf_float+0x70>
 800edb2:	f04f 0b03 	mov.w	fp, #3
 800edb6:	e7da      	b.n	800ed6e <_scanf_float+0x182>
 800edb8:	f1bb 0f06 	cmp.w	fp, #6
 800edbc:	f47f af4e 	bne.w	800ec5c <_scanf_float+0x70>
 800edc0:	f04f 0b07 	mov.w	fp, #7
 800edc4:	e7d3      	b.n	800ed6e <_scanf_float+0x182>
 800edc6:	6821      	ldr	r1, [r4, #0]
 800edc8:	0588      	lsls	r0, r1, #22
 800edca:	f57f af47 	bpl.w	800ec5c <_scanf_float+0x70>
 800edce:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800edd2:	6021      	str	r1, [r4, #0]
 800edd4:	f8cd 9008 	str.w	r9, [sp, #8]
 800edd8:	e7c9      	b.n	800ed6e <_scanf_float+0x182>
 800edda:	6821      	ldr	r1, [r4, #0]
 800eddc:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ede0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ede4:	d006      	beq.n	800edf4 <_scanf_float+0x208>
 800ede6:	0548      	lsls	r0, r1, #21
 800ede8:	f57f af38 	bpl.w	800ec5c <_scanf_float+0x70>
 800edec:	f1b9 0f00 	cmp.w	r9, #0
 800edf0:	f43f af3b 	beq.w	800ec6a <_scanf_float+0x7e>
 800edf4:	0588      	lsls	r0, r1, #22
 800edf6:	bf58      	it	pl
 800edf8:	9802      	ldrpl	r0, [sp, #8]
 800edfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800edfe:	bf58      	it	pl
 800ee00:	eba9 0000 	subpl.w	r0, r9, r0
 800ee04:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ee08:	bf58      	it	pl
 800ee0a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ee0e:	6021      	str	r1, [r4, #0]
 800ee10:	f04f 0900 	mov.w	r9, #0
 800ee14:	e7ab      	b.n	800ed6e <_scanf_float+0x182>
 800ee16:	2203      	movs	r2, #3
 800ee18:	e7a9      	b.n	800ed6e <_scanf_float+0x182>
 800ee1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ee1e:	9205      	str	r2, [sp, #20]
 800ee20:	4631      	mov	r1, r6
 800ee22:	4638      	mov	r0, r7
 800ee24:	4798      	blx	r3
 800ee26:	9a05      	ldr	r2, [sp, #20]
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	f43f af04 	beq.w	800ec36 <_scanf_float+0x4a>
 800ee2e:	e715      	b.n	800ec5c <_scanf_float+0x70>
 800ee30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee34:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ee38:	4632      	mov	r2, r6
 800ee3a:	4638      	mov	r0, r7
 800ee3c:	4798      	blx	r3
 800ee3e:	6923      	ldr	r3, [r4, #16]
 800ee40:	3b01      	subs	r3, #1
 800ee42:	6123      	str	r3, [r4, #16]
 800ee44:	e715      	b.n	800ec72 <_scanf_float+0x86>
 800ee46:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ee4a:	2b06      	cmp	r3, #6
 800ee4c:	d80a      	bhi.n	800ee64 <_scanf_float+0x278>
 800ee4e:	f1bb 0f02 	cmp.w	fp, #2
 800ee52:	d968      	bls.n	800ef26 <_scanf_float+0x33a>
 800ee54:	f1ab 0b03 	sub.w	fp, fp, #3
 800ee58:	fa5f fb8b 	uxtb.w	fp, fp
 800ee5c:	eba5 0b0b 	sub.w	fp, r5, fp
 800ee60:	455d      	cmp	r5, fp
 800ee62:	d14b      	bne.n	800eefc <_scanf_float+0x310>
 800ee64:	6823      	ldr	r3, [r4, #0]
 800ee66:	05da      	lsls	r2, r3, #23
 800ee68:	d51f      	bpl.n	800eeaa <_scanf_float+0x2be>
 800ee6a:	055b      	lsls	r3, r3, #21
 800ee6c:	d468      	bmi.n	800ef40 <_scanf_float+0x354>
 800ee6e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ee72:	6923      	ldr	r3, [r4, #16]
 800ee74:	2965      	cmp	r1, #101	; 0x65
 800ee76:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee7a:	f105 3bff 	add.w	fp, r5, #4294967295
 800ee7e:	6123      	str	r3, [r4, #16]
 800ee80:	d00d      	beq.n	800ee9e <_scanf_float+0x2b2>
 800ee82:	2945      	cmp	r1, #69	; 0x45
 800ee84:	d00b      	beq.n	800ee9e <_scanf_float+0x2b2>
 800ee86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee8a:	4632      	mov	r2, r6
 800ee8c:	4638      	mov	r0, r7
 800ee8e:	4798      	blx	r3
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ee96:	3b01      	subs	r3, #1
 800ee98:	f1a5 0b02 	sub.w	fp, r5, #2
 800ee9c:	6123      	str	r3, [r4, #16]
 800ee9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eea2:	4632      	mov	r2, r6
 800eea4:	4638      	mov	r0, r7
 800eea6:	4798      	blx	r3
 800eea8:	465d      	mov	r5, fp
 800eeaa:	6826      	ldr	r6, [r4, #0]
 800eeac:	f016 0610 	ands.w	r6, r6, #16
 800eeb0:	d17a      	bne.n	800efa8 <_scanf_float+0x3bc>
 800eeb2:	702e      	strb	r6, [r5, #0]
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800eeba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eebe:	d142      	bne.n	800ef46 <_scanf_float+0x35a>
 800eec0:	9b02      	ldr	r3, [sp, #8]
 800eec2:	eba9 0303 	sub.w	r3, r9, r3
 800eec6:	425a      	negs	r2, r3
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d149      	bne.n	800ef60 <_scanf_float+0x374>
 800eecc:	2200      	movs	r2, #0
 800eece:	4641      	mov	r1, r8
 800eed0:	4638      	mov	r0, r7
 800eed2:	f000 ffe1 	bl	800fe98 <_strtod_r>
 800eed6:	6825      	ldr	r5, [r4, #0]
 800eed8:	f8da 3000 	ldr.w	r3, [sl]
 800eedc:	f015 0f02 	tst.w	r5, #2
 800eee0:	f103 0204 	add.w	r2, r3, #4
 800eee4:	ec59 8b10 	vmov	r8, r9, d0
 800eee8:	f8ca 2000 	str.w	r2, [sl]
 800eeec:	d043      	beq.n	800ef76 <_scanf_float+0x38a>
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	e9c3 8900 	strd	r8, r9, [r3]
 800eef4:	68e3      	ldr	r3, [r4, #12]
 800eef6:	3301      	adds	r3, #1
 800eef8:	60e3      	str	r3, [r4, #12]
 800eefa:	e6be      	b.n	800ec7a <_scanf_float+0x8e>
 800eefc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ef04:	4632      	mov	r2, r6
 800ef06:	4638      	mov	r0, r7
 800ef08:	4798      	blx	r3
 800ef0a:	6923      	ldr	r3, [r4, #16]
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	6123      	str	r3, [r4, #16]
 800ef10:	e7a6      	b.n	800ee60 <_scanf_float+0x274>
 800ef12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef16:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ef1a:	4632      	mov	r2, r6
 800ef1c:	4638      	mov	r0, r7
 800ef1e:	4798      	blx	r3
 800ef20:	6923      	ldr	r3, [r4, #16]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	6123      	str	r3, [r4, #16]
 800ef26:	4545      	cmp	r5, r8
 800ef28:	d8f3      	bhi.n	800ef12 <_scanf_float+0x326>
 800ef2a:	e6a5      	b.n	800ec78 <_scanf_float+0x8c>
 800ef2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ef34:	4632      	mov	r2, r6
 800ef36:	4638      	mov	r0, r7
 800ef38:	4798      	blx	r3
 800ef3a:	6923      	ldr	r3, [r4, #16]
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	6123      	str	r3, [r4, #16]
 800ef40:	4545      	cmp	r5, r8
 800ef42:	d8f3      	bhi.n	800ef2c <_scanf_float+0x340>
 800ef44:	e698      	b.n	800ec78 <_scanf_float+0x8c>
 800ef46:	9b03      	ldr	r3, [sp, #12]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d0bf      	beq.n	800eecc <_scanf_float+0x2e0>
 800ef4c:	9904      	ldr	r1, [sp, #16]
 800ef4e:	230a      	movs	r3, #10
 800ef50:	4632      	mov	r2, r6
 800ef52:	3101      	adds	r1, #1
 800ef54:	4638      	mov	r0, r7
 800ef56:	f001 f82b 	bl	800ffb0 <_strtol_r>
 800ef5a:	9b03      	ldr	r3, [sp, #12]
 800ef5c:	9d04      	ldr	r5, [sp, #16]
 800ef5e:	1ac2      	subs	r2, r0, r3
 800ef60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ef64:	429d      	cmp	r5, r3
 800ef66:	bf28      	it	cs
 800ef68:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ef6c:	490f      	ldr	r1, [pc, #60]	; (800efac <_scanf_float+0x3c0>)
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f000 f8e8 	bl	800f144 <siprintf>
 800ef74:	e7aa      	b.n	800eecc <_scanf_float+0x2e0>
 800ef76:	f015 0504 	ands.w	r5, r5, #4
 800ef7a:	d1b8      	bne.n	800eeee <_scanf_float+0x302>
 800ef7c:	681f      	ldr	r7, [r3, #0]
 800ef7e:	ee10 2a10 	vmov	r2, s0
 800ef82:	464b      	mov	r3, r9
 800ef84:	ee10 0a10 	vmov	r0, s0
 800ef88:	4649      	mov	r1, r9
 800ef8a:	f7f1 fde7 	bl	8000b5c <__aeabi_dcmpun>
 800ef8e:	b128      	cbz	r0, 800ef9c <_scanf_float+0x3b0>
 800ef90:	4628      	mov	r0, r5
 800ef92:	f000 f89d 	bl	800f0d0 <nanf>
 800ef96:	ed87 0a00 	vstr	s0, [r7]
 800ef9a:	e7ab      	b.n	800eef4 <_scanf_float+0x308>
 800ef9c:	4640      	mov	r0, r8
 800ef9e:	4649      	mov	r1, r9
 800efa0:	f7f1 fe3a 	bl	8000c18 <__aeabi_d2f>
 800efa4:	6038      	str	r0, [r7, #0]
 800efa6:	e7a5      	b.n	800eef4 <_scanf_float+0x308>
 800efa8:	2600      	movs	r6, #0
 800efaa:	e666      	b.n	800ec7a <_scanf_float+0x8e>
 800efac:	0801370a 	.word	0x0801370a

0800efb0 <iprintf>:
 800efb0:	b40f      	push	{r0, r1, r2, r3}
 800efb2:	4b0a      	ldr	r3, [pc, #40]	; (800efdc <iprintf+0x2c>)
 800efb4:	b513      	push	{r0, r1, r4, lr}
 800efb6:	681c      	ldr	r4, [r3, #0]
 800efb8:	b124      	cbz	r4, 800efc4 <iprintf+0x14>
 800efba:	69a3      	ldr	r3, [r4, #24]
 800efbc:	b913      	cbnz	r3, 800efc4 <iprintf+0x14>
 800efbe:	4620      	mov	r0, r4
 800efc0:	f002 f81e 	bl	8011000 <__sinit>
 800efc4:	ab05      	add	r3, sp, #20
 800efc6:	9a04      	ldr	r2, [sp, #16]
 800efc8:	68a1      	ldr	r1, [r4, #8]
 800efca:	9301      	str	r3, [sp, #4]
 800efcc:	4620      	mov	r0, r4
 800efce:	f003 fc5f 	bl	8012890 <_vfiprintf_r>
 800efd2:	b002      	add	sp, #8
 800efd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efd8:	b004      	add	sp, #16
 800efda:	4770      	bx	lr
 800efdc:	2000000c 	.word	0x2000000c

0800efe0 <putchar>:
 800efe0:	b538      	push	{r3, r4, r5, lr}
 800efe2:	4b08      	ldr	r3, [pc, #32]	; (800f004 <putchar+0x24>)
 800efe4:	681c      	ldr	r4, [r3, #0]
 800efe6:	4605      	mov	r5, r0
 800efe8:	b124      	cbz	r4, 800eff4 <putchar+0x14>
 800efea:	69a3      	ldr	r3, [r4, #24]
 800efec:	b913      	cbnz	r3, 800eff4 <putchar+0x14>
 800efee:	4620      	mov	r0, r4
 800eff0:	f002 f806 	bl	8011000 <__sinit>
 800eff4:	68a2      	ldr	r2, [r4, #8]
 800eff6:	4629      	mov	r1, r5
 800eff8:	4620      	mov	r0, r4
 800effa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800effe:	f003 beb5 	b.w	8012d6c <_putc_r>
 800f002:	bf00      	nop
 800f004:	2000000c 	.word	0x2000000c

0800f008 <_puts_r>:
 800f008:	b570      	push	{r4, r5, r6, lr}
 800f00a:	460e      	mov	r6, r1
 800f00c:	4605      	mov	r5, r0
 800f00e:	b118      	cbz	r0, 800f018 <_puts_r+0x10>
 800f010:	6983      	ldr	r3, [r0, #24]
 800f012:	b90b      	cbnz	r3, 800f018 <_puts_r+0x10>
 800f014:	f001 fff4 	bl	8011000 <__sinit>
 800f018:	69ab      	ldr	r3, [r5, #24]
 800f01a:	68ac      	ldr	r4, [r5, #8]
 800f01c:	b913      	cbnz	r3, 800f024 <_puts_r+0x1c>
 800f01e:	4628      	mov	r0, r5
 800f020:	f001 ffee 	bl	8011000 <__sinit>
 800f024:	4b23      	ldr	r3, [pc, #140]	; (800f0b4 <_puts_r+0xac>)
 800f026:	429c      	cmp	r4, r3
 800f028:	d117      	bne.n	800f05a <_puts_r+0x52>
 800f02a:	686c      	ldr	r4, [r5, #4]
 800f02c:	89a3      	ldrh	r3, [r4, #12]
 800f02e:	071b      	lsls	r3, r3, #28
 800f030:	d51d      	bpl.n	800f06e <_puts_r+0x66>
 800f032:	6923      	ldr	r3, [r4, #16]
 800f034:	b1db      	cbz	r3, 800f06e <_puts_r+0x66>
 800f036:	3e01      	subs	r6, #1
 800f038:	68a3      	ldr	r3, [r4, #8]
 800f03a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f03e:	3b01      	subs	r3, #1
 800f040:	60a3      	str	r3, [r4, #8]
 800f042:	b9e9      	cbnz	r1, 800f080 <_puts_r+0x78>
 800f044:	2b00      	cmp	r3, #0
 800f046:	da2e      	bge.n	800f0a6 <_puts_r+0x9e>
 800f048:	4622      	mov	r2, r4
 800f04a:	210a      	movs	r1, #10
 800f04c:	4628      	mov	r0, r5
 800f04e:	f000 ffc1 	bl	800ffd4 <__swbuf_r>
 800f052:	3001      	adds	r0, #1
 800f054:	d011      	beq.n	800f07a <_puts_r+0x72>
 800f056:	200a      	movs	r0, #10
 800f058:	e011      	b.n	800f07e <_puts_r+0x76>
 800f05a:	4b17      	ldr	r3, [pc, #92]	; (800f0b8 <_puts_r+0xb0>)
 800f05c:	429c      	cmp	r4, r3
 800f05e:	d101      	bne.n	800f064 <_puts_r+0x5c>
 800f060:	68ac      	ldr	r4, [r5, #8]
 800f062:	e7e3      	b.n	800f02c <_puts_r+0x24>
 800f064:	4b15      	ldr	r3, [pc, #84]	; (800f0bc <_puts_r+0xb4>)
 800f066:	429c      	cmp	r4, r3
 800f068:	bf08      	it	eq
 800f06a:	68ec      	ldreq	r4, [r5, #12]
 800f06c:	e7de      	b.n	800f02c <_puts_r+0x24>
 800f06e:	4621      	mov	r1, r4
 800f070:	4628      	mov	r0, r5
 800f072:	f001 f813 	bl	801009c <__swsetup_r>
 800f076:	2800      	cmp	r0, #0
 800f078:	d0dd      	beq.n	800f036 <_puts_r+0x2e>
 800f07a:	f04f 30ff 	mov.w	r0, #4294967295
 800f07e:	bd70      	pop	{r4, r5, r6, pc}
 800f080:	2b00      	cmp	r3, #0
 800f082:	da04      	bge.n	800f08e <_puts_r+0x86>
 800f084:	69a2      	ldr	r2, [r4, #24]
 800f086:	429a      	cmp	r2, r3
 800f088:	dc06      	bgt.n	800f098 <_puts_r+0x90>
 800f08a:	290a      	cmp	r1, #10
 800f08c:	d004      	beq.n	800f098 <_puts_r+0x90>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	1c5a      	adds	r2, r3, #1
 800f092:	6022      	str	r2, [r4, #0]
 800f094:	7019      	strb	r1, [r3, #0]
 800f096:	e7cf      	b.n	800f038 <_puts_r+0x30>
 800f098:	4622      	mov	r2, r4
 800f09a:	4628      	mov	r0, r5
 800f09c:	f000 ff9a 	bl	800ffd4 <__swbuf_r>
 800f0a0:	3001      	adds	r0, #1
 800f0a2:	d1c9      	bne.n	800f038 <_puts_r+0x30>
 800f0a4:	e7e9      	b.n	800f07a <_puts_r+0x72>
 800f0a6:	6823      	ldr	r3, [r4, #0]
 800f0a8:	200a      	movs	r0, #10
 800f0aa:	1c5a      	adds	r2, r3, #1
 800f0ac:	6022      	str	r2, [r4, #0]
 800f0ae:	7018      	strb	r0, [r3, #0]
 800f0b0:	e7e5      	b.n	800f07e <_puts_r+0x76>
 800f0b2:	bf00      	nop
 800f0b4:	08013790 	.word	0x08013790
 800f0b8:	080137b0 	.word	0x080137b0
 800f0bc:	08013770 	.word	0x08013770

0800f0c0 <puts>:
 800f0c0:	4b02      	ldr	r3, [pc, #8]	; (800f0cc <puts+0xc>)
 800f0c2:	4601      	mov	r1, r0
 800f0c4:	6818      	ldr	r0, [r3, #0]
 800f0c6:	f7ff bf9f 	b.w	800f008 <_puts_r>
 800f0ca:	bf00      	nop
 800f0cc:	2000000c 	.word	0x2000000c

0800f0d0 <nanf>:
 800f0d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f0d8 <nanf+0x8>
 800f0d4:	4770      	bx	lr
 800f0d6:	bf00      	nop
 800f0d8:	7fc00000 	.word	0x7fc00000

0800f0dc <sniprintf>:
 800f0dc:	b40c      	push	{r2, r3}
 800f0de:	b530      	push	{r4, r5, lr}
 800f0e0:	4b17      	ldr	r3, [pc, #92]	; (800f140 <sniprintf+0x64>)
 800f0e2:	1e0c      	subs	r4, r1, #0
 800f0e4:	b09d      	sub	sp, #116	; 0x74
 800f0e6:	681d      	ldr	r5, [r3, #0]
 800f0e8:	da08      	bge.n	800f0fc <sniprintf+0x20>
 800f0ea:	238b      	movs	r3, #139	; 0x8b
 800f0ec:	602b      	str	r3, [r5, #0]
 800f0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f2:	b01d      	add	sp, #116	; 0x74
 800f0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0f8:	b002      	add	sp, #8
 800f0fa:	4770      	bx	lr
 800f0fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f100:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f104:	bf14      	ite	ne
 800f106:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f10a:	4623      	moveq	r3, r4
 800f10c:	9304      	str	r3, [sp, #16]
 800f10e:	9307      	str	r3, [sp, #28]
 800f110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f114:	9002      	str	r0, [sp, #8]
 800f116:	9006      	str	r0, [sp, #24]
 800f118:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f11c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f11e:	ab21      	add	r3, sp, #132	; 0x84
 800f120:	a902      	add	r1, sp, #8
 800f122:	4628      	mov	r0, r5
 800f124:	9301      	str	r3, [sp, #4]
 800f126:	f003 f8e7 	bl	80122f8 <_svfiprintf_r>
 800f12a:	1c43      	adds	r3, r0, #1
 800f12c:	bfbc      	itt	lt
 800f12e:	238b      	movlt	r3, #139	; 0x8b
 800f130:	602b      	strlt	r3, [r5, #0]
 800f132:	2c00      	cmp	r4, #0
 800f134:	d0dd      	beq.n	800f0f2 <sniprintf+0x16>
 800f136:	9b02      	ldr	r3, [sp, #8]
 800f138:	2200      	movs	r2, #0
 800f13a:	701a      	strb	r2, [r3, #0]
 800f13c:	e7d9      	b.n	800f0f2 <sniprintf+0x16>
 800f13e:	bf00      	nop
 800f140:	2000000c 	.word	0x2000000c

0800f144 <siprintf>:
 800f144:	b40e      	push	{r1, r2, r3}
 800f146:	b500      	push	{lr}
 800f148:	b09c      	sub	sp, #112	; 0x70
 800f14a:	ab1d      	add	r3, sp, #116	; 0x74
 800f14c:	9002      	str	r0, [sp, #8]
 800f14e:	9006      	str	r0, [sp, #24]
 800f150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f154:	4809      	ldr	r0, [pc, #36]	; (800f17c <siprintf+0x38>)
 800f156:	9107      	str	r1, [sp, #28]
 800f158:	9104      	str	r1, [sp, #16]
 800f15a:	4909      	ldr	r1, [pc, #36]	; (800f180 <siprintf+0x3c>)
 800f15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f160:	9105      	str	r1, [sp, #20]
 800f162:	6800      	ldr	r0, [r0, #0]
 800f164:	9301      	str	r3, [sp, #4]
 800f166:	a902      	add	r1, sp, #8
 800f168:	f003 f8c6 	bl	80122f8 <_svfiprintf_r>
 800f16c:	9b02      	ldr	r3, [sp, #8]
 800f16e:	2200      	movs	r2, #0
 800f170:	701a      	strb	r2, [r3, #0]
 800f172:	b01c      	add	sp, #112	; 0x70
 800f174:	f85d eb04 	ldr.w	lr, [sp], #4
 800f178:	b003      	add	sp, #12
 800f17a:	4770      	bx	lr
 800f17c:	2000000c 	.word	0x2000000c
 800f180:	ffff0208 	.word	0xffff0208

0800f184 <siscanf>:
 800f184:	b40e      	push	{r1, r2, r3}
 800f186:	b530      	push	{r4, r5, lr}
 800f188:	b09c      	sub	sp, #112	; 0x70
 800f18a:	ac1f      	add	r4, sp, #124	; 0x7c
 800f18c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f190:	f854 5b04 	ldr.w	r5, [r4], #4
 800f194:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f198:	9002      	str	r0, [sp, #8]
 800f19a:	9006      	str	r0, [sp, #24]
 800f19c:	f7f1 f830 	bl	8000200 <strlen>
 800f1a0:	4b0b      	ldr	r3, [pc, #44]	; (800f1d0 <siscanf+0x4c>)
 800f1a2:	9003      	str	r0, [sp, #12]
 800f1a4:	9007      	str	r0, [sp, #28]
 800f1a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1a8:	480a      	ldr	r0, [pc, #40]	; (800f1d4 <siscanf+0x50>)
 800f1aa:	9401      	str	r4, [sp, #4]
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1b0:	9314      	str	r3, [sp, #80]	; 0x50
 800f1b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f1ba:	462a      	mov	r2, r5
 800f1bc:	4623      	mov	r3, r4
 800f1be:	a902      	add	r1, sp, #8
 800f1c0:	6800      	ldr	r0, [r0, #0]
 800f1c2:	f003 f9eb 	bl	801259c <__ssvfiscanf_r>
 800f1c6:	b01c      	add	sp, #112	; 0x70
 800f1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1cc:	b003      	add	sp, #12
 800f1ce:	4770      	bx	lr
 800f1d0:	0800f1fb 	.word	0x0800f1fb
 800f1d4:	2000000c 	.word	0x2000000c

0800f1d8 <__sread>:
 800f1d8:	b510      	push	{r4, lr}
 800f1da:	460c      	mov	r4, r1
 800f1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e0:	f003 fdfa 	bl	8012dd8 <_read_r>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	bfab      	itete	ge
 800f1e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800f1ec:	181b      	addge	r3, r3, r0
 800f1ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f1f2:	bfac      	ite	ge
 800f1f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f1f6:	81a3      	strhlt	r3, [r4, #12]
 800f1f8:	bd10      	pop	{r4, pc}

0800f1fa <__seofread>:
 800f1fa:	2000      	movs	r0, #0
 800f1fc:	4770      	bx	lr

0800f1fe <__swrite>:
 800f1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f202:	461f      	mov	r7, r3
 800f204:	898b      	ldrh	r3, [r1, #12]
 800f206:	05db      	lsls	r3, r3, #23
 800f208:	4605      	mov	r5, r0
 800f20a:	460c      	mov	r4, r1
 800f20c:	4616      	mov	r6, r2
 800f20e:	d505      	bpl.n	800f21c <__swrite+0x1e>
 800f210:	2302      	movs	r3, #2
 800f212:	2200      	movs	r2, #0
 800f214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f218:	f002 fac4 	bl	80117a4 <_lseek_r>
 800f21c:	89a3      	ldrh	r3, [r4, #12]
 800f21e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f226:	81a3      	strh	r3, [r4, #12]
 800f228:	4632      	mov	r2, r6
 800f22a:	463b      	mov	r3, r7
 800f22c:	4628      	mov	r0, r5
 800f22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f232:	f000 bf21 	b.w	8010078 <_write_r>

0800f236 <__sseek>:
 800f236:	b510      	push	{r4, lr}
 800f238:	460c      	mov	r4, r1
 800f23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f23e:	f002 fab1 	bl	80117a4 <_lseek_r>
 800f242:	1c43      	adds	r3, r0, #1
 800f244:	89a3      	ldrh	r3, [r4, #12]
 800f246:	bf15      	itete	ne
 800f248:	6560      	strne	r0, [r4, #84]	; 0x54
 800f24a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f24e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f252:	81a3      	strheq	r3, [r4, #12]
 800f254:	bf18      	it	ne
 800f256:	81a3      	strhne	r3, [r4, #12]
 800f258:	bd10      	pop	{r4, pc}

0800f25a <__sclose>:
 800f25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f25e:	f000 bf8b 	b.w	8010178 <_close_r>

0800f262 <strcpy>:
 800f262:	4603      	mov	r3, r0
 800f264:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f268:	f803 2b01 	strb.w	r2, [r3], #1
 800f26c:	2a00      	cmp	r2, #0
 800f26e:	d1f9      	bne.n	800f264 <strcpy+0x2>
 800f270:	4770      	bx	lr

0800f272 <sulp>:
 800f272:	b570      	push	{r4, r5, r6, lr}
 800f274:	4604      	mov	r4, r0
 800f276:	460d      	mov	r5, r1
 800f278:	ec45 4b10 	vmov	d0, r4, r5
 800f27c:	4616      	mov	r6, r2
 800f27e:	f002 fdf7 	bl	8011e70 <__ulp>
 800f282:	ec51 0b10 	vmov	r0, r1, d0
 800f286:	b17e      	cbz	r6, 800f2a8 <sulp+0x36>
 800f288:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f28c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f290:	2b00      	cmp	r3, #0
 800f292:	dd09      	ble.n	800f2a8 <sulp+0x36>
 800f294:	051b      	lsls	r3, r3, #20
 800f296:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f29a:	2400      	movs	r4, #0
 800f29c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f2a0:	4622      	mov	r2, r4
 800f2a2:	462b      	mov	r3, r5
 800f2a4:	f7f1 f9c0 	bl	8000628 <__aeabi_dmul>
 800f2a8:	bd70      	pop	{r4, r5, r6, pc}
 800f2aa:	0000      	movs	r0, r0
 800f2ac:	0000      	movs	r0, r0
	...

0800f2b0 <_strtod_l>:
 800f2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b4:	461f      	mov	r7, r3
 800f2b6:	b0a1      	sub	sp, #132	; 0x84
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	4681      	mov	r9, r0
 800f2bc:	4638      	mov	r0, r7
 800f2be:	460e      	mov	r6, r1
 800f2c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800f2c2:	931c      	str	r3, [sp, #112]	; 0x70
 800f2c4:	f002 fa5e 	bl	8011784 <__localeconv_l>
 800f2c8:	4680      	mov	r8, r0
 800f2ca:	6800      	ldr	r0, [r0, #0]
 800f2cc:	f7f0 ff98 	bl	8000200 <strlen>
 800f2d0:	f04f 0a00 	mov.w	sl, #0
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	f04f 0b00 	mov.w	fp, #0
 800f2da:	961b      	str	r6, [sp, #108]	; 0x6c
 800f2dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f2de:	781a      	ldrb	r2, [r3, #0]
 800f2e0:	2a0d      	cmp	r2, #13
 800f2e2:	d832      	bhi.n	800f34a <_strtod_l+0x9a>
 800f2e4:	2a09      	cmp	r2, #9
 800f2e6:	d236      	bcs.n	800f356 <_strtod_l+0xa6>
 800f2e8:	2a00      	cmp	r2, #0
 800f2ea:	d03e      	beq.n	800f36a <_strtod_l+0xba>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	930d      	str	r3, [sp, #52]	; 0x34
 800f2f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f2f2:	782b      	ldrb	r3, [r5, #0]
 800f2f4:	2b30      	cmp	r3, #48	; 0x30
 800f2f6:	f040 80ac 	bne.w	800f452 <_strtod_l+0x1a2>
 800f2fa:	786b      	ldrb	r3, [r5, #1]
 800f2fc:	2b58      	cmp	r3, #88	; 0x58
 800f2fe:	d001      	beq.n	800f304 <_strtod_l+0x54>
 800f300:	2b78      	cmp	r3, #120	; 0x78
 800f302:	d167      	bne.n	800f3d4 <_strtod_l+0x124>
 800f304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f306:	9301      	str	r3, [sp, #4]
 800f308:	ab1c      	add	r3, sp, #112	; 0x70
 800f30a:	9300      	str	r3, [sp, #0]
 800f30c:	9702      	str	r7, [sp, #8]
 800f30e:	ab1d      	add	r3, sp, #116	; 0x74
 800f310:	4a88      	ldr	r2, [pc, #544]	; (800f534 <_strtod_l+0x284>)
 800f312:	a91b      	add	r1, sp, #108	; 0x6c
 800f314:	4648      	mov	r0, r9
 800f316:	f001 ff4c 	bl	80111b2 <__gethex>
 800f31a:	f010 0407 	ands.w	r4, r0, #7
 800f31e:	4606      	mov	r6, r0
 800f320:	d005      	beq.n	800f32e <_strtod_l+0x7e>
 800f322:	2c06      	cmp	r4, #6
 800f324:	d12b      	bne.n	800f37e <_strtod_l+0xce>
 800f326:	3501      	adds	r5, #1
 800f328:	2300      	movs	r3, #0
 800f32a:	951b      	str	r5, [sp, #108]	; 0x6c
 800f32c:	930d      	str	r3, [sp, #52]	; 0x34
 800f32e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f330:	2b00      	cmp	r3, #0
 800f332:	f040 859a 	bne.w	800fe6a <_strtod_l+0xbba>
 800f336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f338:	b1e3      	cbz	r3, 800f374 <_strtod_l+0xc4>
 800f33a:	4652      	mov	r2, sl
 800f33c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f340:	ec43 2b10 	vmov	d0, r2, r3
 800f344:	b021      	add	sp, #132	; 0x84
 800f346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34a:	2a2b      	cmp	r2, #43	; 0x2b
 800f34c:	d015      	beq.n	800f37a <_strtod_l+0xca>
 800f34e:	2a2d      	cmp	r2, #45	; 0x2d
 800f350:	d004      	beq.n	800f35c <_strtod_l+0xac>
 800f352:	2a20      	cmp	r2, #32
 800f354:	d1ca      	bne.n	800f2ec <_strtod_l+0x3c>
 800f356:	3301      	adds	r3, #1
 800f358:	931b      	str	r3, [sp, #108]	; 0x6c
 800f35a:	e7bf      	b.n	800f2dc <_strtod_l+0x2c>
 800f35c:	2201      	movs	r2, #1
 800f35e:	920d      	str	r2, [sp, #52]	; 0x34
 800f360:	1c5a      	adds	r2, r3, #1
 800f362:	921b      	str	r2, [sp, #108]	; 0x6c
 800f364:	785b      	ldrb	r3, [r3, #1]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1c2      	bne.n	800f2f0 <_strtod_l+0x40>
 800f36a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f36c:	961b      	str	r6, [sp, #108]	; 0x6c
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f040 8579 	bne.w	800fe66 <_strtod_l+0xbb6>
 800f374:	4652      	mov	r2, sl
 800f376:	465b      	mov	r3, fp
 800f378:	e7e2      	b.n	800f340 <_strtod_l+0x90>
 800f37a:	2200      	movs	r2, #0
 800f37c:	e7ef      	b.n	800f35e <_strtod_l+0xae>
 800f37e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f380:	b13a      	cbz	r2, 800f392 <_strtod_l+0xe2>
 800f382:	2135      	movs	r1, #53	; 0x35
 800f384:	a81e      	add	r0, sp, #120	; 0x78
 800f386:	f002 fe6b 	bl	8012060 <__copybits>
 800f38a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f38c:	4648      	mov	r0, r9
 800f38e:	f002 fad8 	bl	8011942 <_Bfree>
 800f392:	3c01      	subs	r4, #1
 800f394:	2c04      	cmp	r4, #4
 800f396:	d806      	bhi.n	800f3a6 <_strtod_l+0xf6>
 800f398:	e8df f004 	tbb	[pc, r4]
 800f39c:	1714030a 	.word	0x1714030a
 800f3a0:	0a          	.byte	0x0a
 800f3a1:	00          	.byte	0x00
 800f3a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800f3a6:	0730      	lsls	r0, r6, #28
 800f3a8:	d5c1      	bpl.n	800f32e <_strtod_l+0x7e>
 800f3aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f3ae:	e7be      	b.n	800f32e <_strtod_l+0x7e>
 800f3b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800f3b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f3b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f3ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f3be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f3c2:	e7f0      	b.n	800f3a6 <_strtod_l+0xf6>
 800f3c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800f538 <_strtod_l+0x288>
 800f3c8:	e7ed      	b.n	800f3a6 <_strtod_l+0xf6>
 800f3ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f3ce:	f04f 3aff 	mov.w	sl, #4294967295
 800f3d2:	e7e8      	b.n	800f3a6 <_strtod_l+0xf6>
 800f3d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3d6:	1c5a      	adds	r2, r3, #1
 800f3d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800f3da:	785b      	ldrb	r3, [r3, #1]
 800f3dc:	2b30      	cmp	r3, #48	; 0x30
 800f3de:	d0f9      	beq.n	800f3d4 <_strtod_l+0x124>
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d0a4      	beq.n	800f32e <_strtod_l+0x7e>
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	2500      	movs	r5, #0
 800f3e8:	9306      	str	r3, [sp, #24]
 800f3ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3ec:	9308      	str	r3, [sp, #32]
 800f3ee:	9507      	str	r5, [sp, #28]
 800f3f0:	9505      	str	r5, [sp, #20]
 800f3f2:	220a      	movs	r2, #10
 800f3f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f3f6:	7807      	ldrb	r7, [r0, #0]
 800f3f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f3fc:	b2d9      	uxtb	r1, r3
 800f3fe:	2909      	cmp	r1, #9
 800f400:	d929      	bls.n	800f456 <_strtod_l+0x1a6>
 800f402:	4622      	mov	r2, r4
 800f404:	f8d8 1000 	ldr.w	r1, [r8]
 800f408:	f003 fd3a 	bl	8012e80 <strncmp>
 800f40c:	2800      	cmp	r0, #0
 800f40e:	d031      	beq.n	800f474 <_strtod_l+0x1c4>
 800f410:	2000      	movs	r0, #0
 800f412:	9c05      	ldr	r4, [sp, #20]
 800f414:	9004      	str	r0, [sp, #16]
 800f416:	463b      	mov	r3, r7
 800f418:	4602      	mov	r2, r0
 800f41a:	2b65      	cmp	r3, #101	; 0x65
 800f41c:	d001      	beq.n	800f422 <_strtod_l+0x172>
 800f41e:	2b45      	cmp	r3, #69	; 0x45
 800f420:	d114      	bne.n	800f44c <_strtod_l+0x19c>
 800f422:	b924      	cbnz	r4, 800f42e <_strtod_l+0x17e>
 800f424:	b910      	cbnz	r0, 800f42c <_strtod_l+0x17c>
 800f426:	9b06      	ldr	r3, [sp, #24]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d09e      	beq.n	800f36a <_strtod_l+0xba>
 800f42c:	2400      	movs	r4, #0
 800f42e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f430:	1c73      	adds	r3, r6, #1
 800f432:	931b      	str	r3, [sp, #108]	; 0x6c
 800f434:	7873      	ldrb	r3, [r6, #1]
 800f436:	2b2b      	cmp	r3, #43	; 0x2b
 800f438:	d078      	beq.n	800f52c <_strtod_l+0x27c>
 800f43a:	2b2d      	cmp	r3, #45	; 0x2d
 800f43c:	d070      	beq.n	800f520 <_strtod_l+0x270>
 800f43e:	f04f 0c00 	mov.w	ip, #0
 800f442:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800f446:	2f09      	cmp	r7, #9
 800f448:	d97c      	bls.n	800f544 <_strtod_l+0x294>
 800f44a:	961b      	str	r6, [sp, #108]	; 0x6c
 800f44c:	f04f 0e00 	mov.w	lr, #0
 800f450:	e09a      	b.n	800f588 <_strtod_l+0x2d8>
 800f452:	2300      	movs	r3, #0
 800f454:	e7c7      	b.n	800f3e6 <_strtod_l+0x136>
 800f456:	9905      	ldr	r1, [sp, #20]
 800f458:	2908      	cmp	r1, #8
 800f45a:	bfdd      	ittte	le
 800f45c:	9907      	ldrle	r1, [sp, #28]
 800f45e:	fb02 3301 	mlale	r3, r2, r1, r3
 800f462:	9307      	strle	r3, [sp, #28]
 800f464:	fb02 3505 	mlagt	r5, r2, r5, r3
 800f468:	9b05      	ldr	r3, [sp, #20]
 800f46a:	3001      	adds	r0, #1
 800f46c:	3301      	adds	r3, #1
 800f46e:	9305      	str	r3, [sp, #20]
 800f470:	901b      	str	r0, [sp, #108]	; 0x6c
 800f472:	e7bf      	b.n	800f3f4 <_strtod_l+0x144>
 800f474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f476:	191a      	adds	r2, r3, r4
 800f478:	921b      	str	r2, [sp, #108]	; 0x6c
 800f47a:	9a05      	ldr	r2, [sp, #20]
 800f47c:	5d1b      	ldrb	r3, [r3, r4]
 800f47e:	2a00      	cmp	r2, #0
 800f480:	d037      	beq.n	800f4f2 <_strtod_l+0x242>
 800f482:	9c05      	ldr	r4, [sp, #20]
 800f484:	4602      	mov	r2, r0
 800f486:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f48a:	2909      	cmp	r1, #9
 800f48c:	d913      	bls.n	800f4b6 <_strtod_l+0x206>
 800f48e:	2101      	movs	r1, #1
 800f490:	9104      	str	r1, [sp, #16]
 800f492:	e7c2      	b.n	800f41a <_strtod_l+0x16a>
 800f494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	921b      	str	r2, [sp, #108]	; 0x6c
 800f49a:	785b      	ldrb	r3, [r3, #1]
 800f49c:	3001      	adds	r0, #1
 800f49e:	2b30      	cmp	r3, #48	; 0x30
 800f4a0:	d0f8      	beq.n	800f494 <_strtod_l+0x1e4>
 800f4a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f4a6:	2a08      	cmp	r2, #8
 800f4a8:	f200 84e4 	bhi.w	800fe74 <_strtod_l+0xbc4>
 800f4ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f4ae:	9208      	str	r2, [sp, #32]
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800f4ba:	f100 0101 	add.w	r1, r0, #1
 800f4be:	d012      	beq.n	800f4e6 <_strtod_l+0x236>
 800f4c0:	440a      	add	r2, r1
 800f4c2:	eb00 0c04 	add.w	ip, r0, r4
 800f4c6:	4621      	mov	r1, r4
 800f4c8:	270a      	movs	r7, #10
 800f4ca:	458c      	cmp	ip, r1
 800f4cc:	d113      	bne.n	800f4f6 <_strtod_l+0x246>
 800f4ce:	1821      	adds	r1, r4, r0
 800f4d0:	2908      	cmp	r1, #8
 800f4d2:	f104 0401 	add.w	r4, r4, #1
 800f4d6:	4404      	add	r4, r0
 800f4d8:	dc19      	bgt.n	800f50e <_strtod_l+0x25e>
 800f4da:	9b07      	ldr	r3, [sp, #28]
 800f4dc:	210a      	movs	r1, #10
 800f4de:	fb01 e303 	mla	r3, r1, r3, lr
 800f4e2:	9307      	str	r3, [sp, #28]
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4e8:	1c58      	adds	r0, r3, #1
 800f4ea:	901b      	str	r0, [sp, #108]	; 0x6c
 800f4ec:	785b      	ldrb	r3, [r3, #1]
 800f4ee:	4608      	mov	r0, r1
 800f4f0:	e7c9      	b.n	800f486 <_strtod_l+0x1d6>
 800f4f2:	9805      	ldr	r0, [sp, #20]
 800f4f4:	e7d3      	b.n	800f49e <_strtod_l+0x1ee>
 800f4f6:	2908      	cmp	r1, #8
 800f4f8:	f101 0101 	add.w	r1, r1, #1
 800f4fc:	dc03      	bgt.n	800f506 <_strtod_l+0x256>
 800f4fe:	9b07      	ldr	r3, [sp, #28]
 800f500:	437b      	muls	r3, r7
 800f502:	9307      	str	r3, [sp, #28]
 800f504:	e7e1      	b.n	800f4ca <_strtod_l+0x21a>
 800f506:	2910      	cmp	r1, #16
 800f508:	bfd8      	it	le
 800f50a:	437d      	mulle	r5, r7
 800f50c:	e7dd      	b.n	800f4ca <_strtod_l+0x21a>
 800f50e:	2c10      	cmp	r4, #16
 800f510:	bfdc      	itt	le
 800f512:	210a      	movle	r1, #10
 800f514:	fb01 e505 	mlale	r5, r1, r5, lr
 800f518:	e7e4      	b.n	800f4e4 <_strtod_l+0x234>
 800f51a:	2301      	movs	r3, #1
 800f51c:	9304      	str	r3, [sp, #16]
 800f51e:	e781      	b.n	800f424 <_strtod_l+0x174>
 800f520:	f04f 0c01 	mov.w	ip, #1
 800f524:	1cb3      	adds	r3, r6, #2
 800f526:	931b      	str	r3, [sp, #108]	; 0x6c
 800f528:	78b3      	ldrb	r3, [r6, #2]
 800f52a:	e78a      	b.n	800f442 <_strtod_l+0x192>
 800f52c:	f04f 0c00 	mov.w	ip, #0
 800f530:	e7f8      	b.n	800f524 <_strtod_l+0x274>
 800f532:	bf00      	nop
 800f534:	08013710 	.word	0x08013710
 800f538:	7ff00000 	.word	0x7ff00000
 800f53c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f53e:	1c5f      	adds	r7, r3, #1
 800f540:	971b      	str	r7, [sp, #108]	; 0x6c
 800f542:	785b      	ldrb	r3, [r3, #1]
 800f544:	2b30      	cmp	r3, #48	; 0x30
 800f546:	d0f9      	beq.n	800f53c <_strtod_l+0x28c>
 800f548:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800f54c:	2f08      	cmp	r7, #8
 800f54e:	f63f af7d 	bhi.w	800f44c <_strtod_l+0x19c>
 800f552:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f558:	930a      	str	r3, [sp, #40]	; 0x28
 800f55a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f55c:	1c5f      	adds	r7, r3, #1
 800f55e:	971b      	str	r7, [sp, #108]	; 0x6c
 800f560:	785b      	ldrb	r3, [r3, #1]
 800f562:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800f566:	f1b8 0f09 	cmp.w	r8, #9
 800f56a:	d937      	bls.n	800f5dc <_strtod_l+0x32c>
 800f56c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f56e:	1a7f      	subs	r7, r7, r1
 800f570:	2f08      	cmp	r7, #8
 800f572:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f576:	dc37      	bgt.n	800f5e8 <_strtod_l+0x338>
 800f578:	45be      	cmp	lr, r7
 800f57a:	bfa8      	it	ge
 800f57c:	46be      	movge	lr, r7
 800f57e:	f1bc 0f00 	cmp.w	ip, #0
 800f582:	d001      	beq.n	800f588 <_strtod_l+0x2d8>
 800f584:	f1ce 0e00 	rsb	lr, lr, #0
 800f588:	2c00      	cmp	r4, #0
 800f58a:	d151      	bne.n	800f630 <_strtod_l+0x380>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	f47f aece 	bne.w	800f32e <_strtod_l+0x7e>
 800f592:	9a06      	ldr	r2, [sp, #24]
 800f594:	2a00      	cmp	r2, #0
 800f596:	f47f aeca 	bne.w	800f32e <_strtod_l+0x7e>
 800f59a:	9a04      	ldr	r2, [sp, #16]
 800f59c:	2a00      	cmp	r2, #0
 800f59e:	f47f aee4 	bne.w	800f36a <_strtod_l+0xba>
 800f5a2:	2b4e      	cmp	r3, #78	; 0x4e
 800f5a4:	d027      	beq.n	800f5f6 <_strtod_l+0x346>
 800f5a6:	dc21      	bgt.n	800f5ec <_strtod_l+0x33c>
 800f5a8:	2b49      	cmp	r3, #73	; 0x49
 800f5aa:	f47f aede 	bne.w	800f36a <_strtod_l+0xba>
 800f5ae:	49a0      	ldr	r1, [pc, #640]	; (800f830 <_strtod_l+0x580>)
 800f5b0:	a81b      	add	r0, sp, #108	; 0x6c
 800f5b2:	f002 f831 	bl	8011618 <__match>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	f43f aed7 	beq.w	800f36a <_strtod_l+0xba>
 800f5bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5be:	499d      	ldr	r1, [pc, #628]	; (800f834 <_strtod_l+0x584>)
 800f5c0:	3b01      	subs	r3, #1
 800f5c2:	a81b      	add	r0, sp, #108	; 0x6c
 800f5c4:	931b      	str	r3, [sp, #108]	; 0x6c
 800f5c6:	f002 f827 	bl	8011618 <__match>
 800f5ca:	b910      	cbnz	r0, 800f5d2 <_strtod_l+0x322>
 800f5cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800f5d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800f848 <_strtod_l+0x598>
 800f5d6:	f04f 0a00 	mov.w	sl, #0
 800f5da:	e6a8      	b.n	800f32e <_strtod_l+0x7e>
 800f5dc:	210a      	movs	r1, #10
 800f5de:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f5e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f5e6:	e7b8      	b.n	800f55a <_strtod_l+0x2aa>
 800f5e8:	46be      	mov	lr, r7
 800f5ea:	e7c8      	b.n	800f57e <_strtod_l+0x2ce>
 800f5ec:	2b69      	cmp	r3, #105	; 0x69
 800f5ee:	d0de      	beq.n	800f5ae <_strtod_l+0x2fe>
 800f5f0:	2b6e      	cmp	r3, #110	; 0x6e
 800f5f2:	f47f aeba 	bne.w	800f36a <_strtod_l+0xba>
 800f5f6:	4990      	ldr	r1, [pc, #576]	; (800f838 <_strtod_l+0x588>)
 800f5f8:	a81b      	add	r0, sp, #108	; 0x6c
 800f5fa:	f002 f80d 	bl	8011618 <__match>
 800f5fe:	2800      	cmp	r0, #0
 800f600:	f43f aeb3 	beq.w	800f36a <_strtod_l+0xba>
 800f604:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	2b28      	cmp	r3, #40	; 0x28
 800f60a:	d10e      	bne.n	800f62a <_strtod_l+0x37a>
 800f60c:	aa1e      	add	r2, sp, #120	; 0x78
 800f60e:	498b      	ldr	r1, [pc, #556]	; (800f83c <_strtod_l+0x58c>)
 800f610:	a81b      	add	r0, sp, #108	; 0x6c
 800f612:	f002 f815 	bl	8011640 <__hexnan>
 800f616:	2805      	cmp	r0, #5
 800f618:	d107      	bne.n	800f62a <_strtod_l+0x37a>
 800f61a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f61c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800f620:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f624:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f628:	e681      	b.n	800f32e <_strtod_l+0x7e>
 800f62a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800f850 <_strtod_l+0x5a0>
 800f62e:	e7d2      	b.n	800f5d6 <_strtod_l+0x326>
 800f630:	ebae 0302 	sub.w	r3, lr, r2
 800f634:	9306      	str	r3, [sp, #24]
 800f636:	9b05      	ldr	r3, [sp, #20]
 800f638:	9807      	ldr	r0, [sp, #28]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	bf08      	it	eq
 800f63e:	4623      	moveq	r3, r4
 800f640:	2c10      	cmp	r4, #16
 800f642:	9305      	str	r3, [sp, #20]
 800f644:	46a0      	mov	r8, r4
 800f646:	bfa8      	it	ge
 800f648:	f04f 0810 	movge.w	r8, #16
 800f64c:	f7f0 ff72 	bl	8000534 <__aeabi_ui2d>
 800f650:	2c09      	cmp	r4, #9
 800f652:	4682      	mov	sl, r0
 800f654:	468b      	mov	fp, r1
 800f656:	dc13      	bgt.n	800f680 <_strtod_l+0x3d0>
 800f658:	9b06      	ldr	r3, [sp, #24]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f43f ae67 	beq.w	800f32e <_strtod_l+0x7e>
 800f660:	9b06      	ldr	r3, [sp, #24]
 800f662:	dd7a      	ble.n	800f75a <_strtod_l+0x4aa>
 800f664:	2b16      	cmp	r3, #22
 800f666:	dc61      	bgt.n	800f72c <_strtod_l+0x47c>
 800f668:	4a75      	ldr	r2, [pc, #468]	; (800f840 <_strtod_l+0x590>)
 800f66a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800f66e:	e9de 0100 	ldrd	r0, r1, [lr]
 800f672:	4652      	mov	r2, sl
 800f674:	465b      	mov	r3, fp
 800f676:	f7f0 ffd7 	bl	8000628 <__aeabi_dmul>
 800f67a:	4682      	mov	sl, r0
 800f67c:	468b      	mov	fp, r1
 800f67e:	e656      	b.n	800f32e <_strtod_l+0x7e>
 800f680:	4b6f      	ldr	r3, [pc, #444]	; (800f840 <_strtod_l+0x590>)
 800f682:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f686:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f68a:	f7f0 ffcd 	bl	8000628 <__aeabi_dmul>
 800f68e:	4606      	mov	r6, r0
 800f690:	4628      	mov	r0, r5
 800f692:	460f      	mov	r7, r1
 800f694:	f7f0 ff4e 	bl	8000534 <__aeabi_ui2d>
 800f698:	4602      	mov	r2, r0
 800f69a:	460b      	mov	r3, r1
 800f69c:	4630      	mov	r0, r6
 800f69e:	4639      	mov	r1, r7
 800f6a0:	f7f0 fe0c 	bl	80002bc <__adddf3>
 800f6a4:	2c0f      	cmp	r4, #15
 800f6a6:	4682      	mov	sl, r0
 800f6a8:	468b      	mov	fp, r1
 800f6aa:	ddd5      	ble.n	800f658 <_strtod_l+0x3a8>
 800f6ac:	9b06      	ldr	r3, [sp, #24]
 800f6ae:	eba4 0808 	sub.w	r8, r4, r8
 800f6b2:	4498      	add	r8, r3
 800f6b4:	f1b8 0f00 	cmp.w	r8, #0
 800f6b8:	f340 8096 	ble.w	800f7e8 <_strtod_l+0x538>
 800f6bc:	f018 030f 	ands.w	r3, r8, #15
 800f6c0:	d00a      	beq.n	800f6d8 <_strtod_l+0x428>
 800f6c2:	495f      	ldr	r1, [pc, #380]	; (800f840 <_strtod_l+0x590>)
 800f6c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f6c8:	4652      	mov	r2, sl
 800f6ca:	465b      	mov	r3, fp
 800f6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6d0:	f7f0 ffaa 	bl	8000628 <__aeabi_dmul>
 800f6d4:	4682      	mov	sl, r0
 800f6d6:	468b      	mov	fp, r1
 800f6d8:	f038 080f 	bics.w	r8, r8, #15
 800f6dc:	d073      	beq.n	800f7c6 <_strtod_l+0x516>
 800f6de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f6e2:	dd47      	ble.n	800f774 <_strtod_l+0x4c4>
 800f6e4:	2400      	movs	r4, #0
 800f6e6:	46a0      	mov	r8, r4
 800f6e8:	9407      	str	r4, [sp, #28]
 800f6ea:	9405      	str	r4, [sp, #20]
 800f6ec:	2322      	movs	r3, #34	; 0x22
 800f6ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f848 <_strtod_l+0x598>
 800f6f2:	f8c9 3000 	str.w	r3, [r9]
 800f6f6:	f04f 0a00 	mov.w	sl, #0
 800f6fa:	9b07      	ldr	r3, [sp, #28]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f43f ae16 	beq.w	800f32e <_strtod_l+0x7e>
 800f702:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f704:	4648      	mov	r0, r9
 800f706:	f002 f91c 	bl	8011942 <_Bfree>
 800f70a:	9905      	ldr	r1, [sp, #20]
 800f70c:	4648      	mov	r0, r9
 800f70e:	f002 f918 	bl	8011942 <_Bfree>
 800f712:	4641      	mov	r1, r8
 800f714:	4648      	mov	r0, r9
 800f716:	f002 f914 	bl	8011942 <_Bfree>
 800f71a:	9907      	ldr	r1, [sp, #28]
 800f71c:	4648      	mov	r0, r9
 800f71e:	f002 f910 	bl	8011942 <_Bfree>
 800f722:	4621      	mov	r1, r4
 800f724:	4648      	mov	r0, r9
 800f726:	f002 f90c 	bl	8011942 <_Bfree>
 800f72a:	e600      	b.n	800f32e <_strtod_l+0x7e>
 800f72c:	9a06      	ldr	r2, [sp, #24]
 800f72e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f732:	4293      	cmp	r3, r2
 800f734:	dbba      	blt.n	800f6ac <_strtod_l+0x3fc>
 800f736:	4d42      	ldr	r5, [pc, #264]	; (800f840 <_strtod_l+0x590>)
 800f738:	f1c4 040f 	rsb	r4, r4, #15
 800f73c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f740:	4652      	mov	r2, sl
 800f742:	465b      	mov	r3, fp
 800f744:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f748:	f7f0 ff6e 	bl	8000628 <__aeabi_dmul>
 800f74c:	9b06      	ldr	r3, [sp, #24]
 800f74e:	1b1c      	subs	r4, r3, r4
 800f750:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f754:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f758:	e78d      	b.n	800f676 <_strtod_l+0x3c6>
 800f75a:	f113 0f16 	cmn.w	r3, #22
 800f75e:	dba5      	blt.n	800f6ac <_strtod_l+0x3fc>
 800f760:	4a37      	ldr	r2, [pc, #220]	; (800f840 <_strtod_l+0x590>)
 800f762:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800f766:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f76a:	4650      	mov	r0, sl
 800f76c:	4659      	mov	r1, fp
 800f76e:	f7f1 f885 	bl	800087c <__aeabi_ddiv>
 800f772:	e782      	b.n	800f67a <_strtod_l+0x3ca>
 800f774:	2300      	movs	r3, #0
 800f776:	4e33      	ldr	r6, [pc, #204]	; (800f844 <_strtod_l+0x594>)
 800f778:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f77c:	4650      	mov	r0, sl
 800f77e:	4659      	mov	r1, fp
 800f780:	461d      	mov	r5, r3
 800f782:	f1b8 0f01 	cmp.w	r8, #1
 800f786:	dc21      	bgt.n	800f7cc <_strtod_l+0x51c>
 800f788:	b10b      	cbz	r3, 800f78e <_strtod_l+0x4de>
 800f78a:	4682      	mov	sl, r0
 800f78c:	468b      	mov	fp, r1
 800f78e:	4b2d      	ldr	r3, [pc, #180]	; (800f844 <_strtod_l+0x594>)
 800f790:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f794:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f798:	4652      	mov	r2, sl
 800f79a:	465b      	mov	r3, fp
 800f79c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f7a0:	f7f0 ff42 	bl	8000628 <__aeabi_dmul>
 800f7a4:	4b28      	ldr	r3, [pc, #160]	; (800f848 <_strtod_l+0x598>)
 800f7a6:	460a      	mov	r2, r1
 800f7a8:	400b      	ands	r3, r1
 800f7aa:	4928      	ldr	r1, [pc, #160]	; (800f84c <_strtod_l+0x59c>)
 800f7ac:	428b      	cmp	r3, r1
 800f7ae:	4682      	mov	sl, r0
 800f7b0:	d898      	bhi.n	800f6e4 <_strtod_l+0x434>
 800f7b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f7b6:	428b      	cmp	r3, r1
 800f7b8:	bf86      	itte	hi
 800f7ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f854 <_strtod_l+0x5a4>
 800f7be:	f04f 3aff 	movhi.w	sl, #4294967295
 800f7c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	9304      	str	r3, [sp, #16]
 800f7ca:	e077      	b.n	800f8bc <_strtod_l+0x60c>
 800f7cc:	f018 0f01 	tst.w	r8, #1
 800f7d0:	d006      	beq.n	800f7e0 <_strtod_l+0x530>
 800f7d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	f7f0 ff25 	bl	8000628 <__aeabi_dmul>
 800f7de:	2301      	movs	r3, #1
 800f7e0:	3501      	adds	r5, #1
 800f7e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f7e6:	e7cc      	b.n	800f782 <_strtod_l+0x4d2>
 800f7e8:	d0ed      	beq.n	800f7c6 <_strtod_l+0x516>
 800f7ea:	f1c8 0800 	rsb	r8, r8, #0
 800f7ee:	f018 020f 	ands.w	r2, r8, #15
 800f7f2:	d00a      	beq.n	800f80a <_strtod_l+0x55a>
 800f7f4:	4b12      	ldr	r3, [pc, #72]	; (800f840 <_strtod_l+0x590>)
 800f7f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7fa:	4650      	mov	r0, sl
 800f7fc:	4659      	mov	r1, fp
 800f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f802:	f7f1 f83b 	bl	800087c <__aeabi_ddiv>
 800f806:	4682      	mov	sl, r0
 800f808:	468b      	mov	fp, r1
 800f80a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f80e:	d0da      	beq.n	800f7c6 <_strtod_l+0x516>
 800f810:	f1b8 0f1f 	cmp.w	r8, #31
 800f814:	dd20      	ble.n	800f858 <_strtod_l+0x5a8>
 800f816:	2400      	movs	r4, #0
 800f818:	46a0      	mov	r8, r4
 800f81a:	9407      	str	r4, [sp, #28]
 800f81c:	9405      	str	r4, [sp, #20]
 800f81e:	2322      	movs	r3, #34	; 0x22
 800f820:	f04f 0a00 	mov.w	sl, #0
 800f824:	f04f 0b00 	mov.w	fp, #0
 800f828:	f8c9 3000 	str.w	r3, [r9]
 800f82c:	e765      	b.n	800f6fa <_strtod_l+0x44a>
 800f82e:	bf00      	nop
 800f830:	080136dd 	.word	0x080136dd
 800f834:	08013763 	.word	0x08013763
 800f838:	080136e5 	.word	0x080136e5
 800f83c:	08013724 	.word	0x08013724
 800f840:	08013808 	.word	0x08013808
 800f844:	080137e0 	.word	0x080137e0
 800f848:	7ff00000 	.word	0x7ff00000
 800f84c:	7ca00000 	.word	0x7ca00000
 800f850:	fff80000 	.word	0xfff80000
 800f854:	7fefffff 	.word	0x7fefffff
 800f858:	f018 0310 	ands.w	r3, r8, #16
 800f85c:	bf18      	it	ne
 800f85e:	236a      	movne	r3, #106	; 0x6a
 800f860:	4da0      	ldr	r5, [pc, #640]	; (800fae4 <_strtod_l+0x834>)
 800f862:	9304      	str	r3, [sp, #16]
 800f864:	4650      	mov	r0, sl
 800f866:	4659      	mov	r1, fp
 800f868:	2300      	movs	r3, #0
 800f86a:	f1b8 0f00 	cmp.w	r8, #0
 800f86e:	f300 810a 	bgt.w	800fa86 <_strtod_l+0x7d6>
 800f872:	b10b      	cbz	r3, 800f878 <_strtod_l+0x5c8>
 800f874:	4682      	mov	sl, r0
 800f876:	468b      	mov	fp, r1
 800f878:	9b04      	ldr	r3, [sp, #16]
 800f87a:	b1bb      	cbz	r3, 800f8ac <_strtod_l+0x5fc>
 800f87c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f880:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f884:	2b00      	cmp	r3, #0
 800f886:	4659      	mov	r1, fp
 800f888:	dd10      	ble.n	800f8ac <_strtod_l+0x5fc>
 800f88a:	2b1f      	cmp	r3, #31
 800f88c:	f340 8107 	ble.w	800fa9e <_strtod_l+0x7ee>
 800f890:	2b34      	cmp	r3, #52	; 0x34
 800f892:	bfde      	ittt	le
 800f894:	3b20      	suble	r3, #32
 800f896:	f04f 32ff 	movle.w	r2, #4294967295
 800f89a:	fa02 f303 	lslle.w	r3, r2, r3
 800f89e:	f04f 0a00 	mov.w	sl, #0
 800f8a2:	bfcc      	ite	gt
 800f8a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f8a8:	ea03 0b01 	andle.w	fp, r3, r1
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	4650      	mov	r0, sl
 800f8b2:	4659      	mov	r1, fp
 800f8b4:	f7f1 f920 	bl	8000af8 <__aeabi_dcmpeq>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d1ac      	bne.n	800f816 <_strtod_l+0x566>
 800f8bc:	9b07      	ldr	r3, [sp, #28]
 800f8be:	9300      	str	r3, [sp, #0]
 800f8c0:	9a05      	ldr	r2, [sp, #20]
 800f8c2:	9908      	ldr	r1, [sp, #32]
 800f8c4:	4623      	mov	r3, r4
 800f8c6:	4648      	mov	r0, r9
 800f8c8:	f002 f88d 	bl	80119e6 <__s2b>
 800f8cc:	9007      	str	r0, [sp, #28]
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	f43f af08 	beq.w	800f6e4 <_strtod_l+0x434>
 800f8d4:	9a06      	ldr	r2, [sp, #24]
 800f8d6:	9b06      	ldr	r3, [sp, #24]
 800f8d8:	2a00      	cmp	r2, #0
 800f8da:	f1c3 0300 	rsb	r3, r3, #0
 800f8de:	bfa8      	it	ge
 800f8e0:	2300      	movge	r3, #0
 800f8e2:	930e      	str	r3, [sp, #56]	; 0x38
 800f8e4:	2400      	movs	r4, #0
 800f8e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f8ea:	9316      	str	r3, [sp, #88]	; 0x58
 800f8ec:	46a0      	mov	r8, r4
 800f8ee:	9b07      	ldr	r3, [sp, #28]
 800f8f0:	4648      	mov	r0, r9
 800f8f2:	6859      	ldr	r1, [r3, #4]
 800f8f4:	f001 fff1 	bl	80118da <_Balloc>
 800f8f8:	9005      	str	r0, [sp, #20]
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	f43f aef6 	beq.w	800f6ec <_strtod_l+0x43c>
 800f900:	9b07      	ldr	r3, [sp, #28]
 800f902:	691a      	ldr	r2, [r3, #16]
 800f904:	3202      	adds	r2, #2
 800f906:	f103 010c 	add.w	r1, r3, #12
 800f90a:	0092      	lsls	r2, r2, #2
 800f90c:	300c      	adds	r0, #12
 800f90e:	f001 ffd9 	bl	80118c4 <memcpy>
 800f912:	aa1e      	add	r2, sp, #120	; 0x78
 800f914:	a91d      	add	r1, sp, #116	; 0x74
 800f916:	ec4b ab10 	vmov	d0, sl, fp
 800f91a:	4648      	mov	r0, r9
 800f91c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f920:	f002 fb1c 	bl	8011f5c <__d2b>
 800f924:	901c      	str	r0, [sp, #112]	; 0x70
 800f926:	2800      	cmp	r0, #0
 800f928:	f43f aee0 	beq.w	800f6ec <_strtod_l+0x43c>
 800f92c:	2101      	movs	r1, #1
 800f92e:	4648      	mov	r0, r9
 800f930:	f002 f8e5 	bl	8011afe <__i2b>
 800f934:	4680      	mov	r8, r0
 800f936:	2800      	cmp	r0, #0
 800f938:	f43f aed8 	beq.w	800f6ec <_strtod_l+0x43c>
 800f93c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f93e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f940:	2e00      	cmp	r6, #0
 800f942:	bfab      	itete	ge
 800f944:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f946:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f948:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800f94a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800f94c:	bfac      	ite	ge
 800f94e:	18f7      	addge	r7, r6, r3
 800f950:	1b9d      	sublt	r5, r3, r6
 800f952:	9b04      	ldr	r3, [sp, #16]
 800f954:	1af6      	subs	r6, r6, r3
 800f956:	4416      	add	r6, r2
 800f958:	4b63      	ldr	r3, [pc, #396]	; (800fae8 <_strtod_l+0x838>)
 800f95a:	3e01      	subs	r6, #1
 800f95c:	429e      	cmp	r6, r3
 800f95e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f962:	f280 80af 	bge.w	800fac4 <_strtod_l+0x814>
 800f966:	1b9b      	subs	r3, r3, r6
 800f968:	2b1f      	cmp	r3, #31
 800f96a:	eba2 0203 	sub.w	r2, r2, r3
 800f96e:	f04f 0101 	mov.w	r1, #1
 800f972:	f300 809b 	bgt.w	800faac <_strtod_l+0x7fc>
 800f976:	fa01 f303 	lsl.w	r3, r1, r3
 800f97a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f97c:	2300      	movs	r3, #0
 800f97e:	930a      	str	r3, [sp, #40]	; 0x28
 800f980:	18be      	adds	r6, r7, r2
 800f982:	9b04      	ldr	r3, [sp, #16]
 800f984:	42b7      	cmp	r7, r6
 800f986:	4415      	add	r5, r2
 800f988:	441d      	add	r5, r3
 800f98a:	463b      	mov	r3, r7
 800f98c:	bfa8      	it	ge
 800f98e:	4633      	movge	r3, r6
 800f990:	42ab      	cmp	r3, r5
 800f992:	bfa8      	it	ge
 800f994:	462b      	movge	r3, r5
 800f996:	2b00      	cmp	r3, #0
 800f998:	bfc2      	ittt	gt
 800f99a:	1af6      	subgt	r6, r6, r3
 800f99c:	1aed      	subgt	r5, r5, r3
 800f99e:	1aff      	subgt	r7, r7, r3
 800f9a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9a2:	b1bb      	cbz	r3, 800f9d4 <_strtod_l+0x724>
 800f9a4:	4641      	mov	r1, r8
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	4648      	mov	r0, r9
 800f9aa:	f002 f947 	bl	8011c3c <__pow5mult>
 800f9ae:	4680      	mov	r8, r0
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	f43f ae9b 	beq.w	800f6ec <_strtod_l+0x43c>
 800f9b6:	4601      	mov	r1, r0
 800f9b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f9ba:	4648      	mov	r0, r9
 800f9bc:	f002 f8a8 	bl	8011b10 <__multiply>
 800f9c0:	900c      	str	r0, [sp, #48]	; 0x30
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	f43f ae92 	beq.w	800f6ec <_strtod_l+0x43c>
 800f9c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f9ca:	4648      	mov	r0, r9
 800f9cc:	f001 ffb9 	bl	8011942 <_Bfree>
 800f9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9d2:	931c      	str	r3, [sp, #112]	; 0x70
 800f9d4:	2e00      	cmp	r6, #0
 800f9d6:	dc7a      	bgt.n	800face <_strtod_l+0x81e>
 800f9d8:	9b06      	ldr	r3, [sp, #24]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	dd08      	ble.n	800f9f0 <_strtod_l+0x740>
 800f9de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f9e0:	9905      	ldr	r1, [sp, #20]
 800f9e2:	4648      	mov	r0, r9
 800f9e4:	f002 f92a 	bl	8011c3c <__pow5mult>
 800f9e8:	9005      	str	r0, [sp, #20]
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	f43f ae7e 	beq.w	800f6ec <_strtod_l+0x43c>
 800f9f0:	2d00      	cmp	r5, #0
 800f9f2:	dd08      	ble.n	800fa06 <_strtod_l+0x756>
 800f9f4:	462a      	mov	r2, r5
 800f9f6:	9905      	ldr	r1, [sp, #20]
 800f9f8:	4648      	mov	r0, r9
 800f9fa:	f002 f96d 	bl	8011cd8 <__lshift>
 800f9fe:	9005      	str	r0, [sp, #20]
 800fa00:	2800      	cmp	r0, #0
 800fa02:	f43f ae73 	beq.w	800f6ec <_strtod_l+0x43c>
 800fa06:	2f00      	cmp	r7, #0
 800fa08:	dd08      	ble.n	800fa1c <_strtod_l+0x76c>
 800fa0a:	4641      	mov	r1, r8
 800fa0c:	463a      	mov	r2, r7
 800fa0e:	4648      	mov	r0, r9
 800fa10:	f002 f962 	bl	8011cd8 <__lshift>
 800fa14:	4680      	mov	r8, r0
 800fa16:	2800      	cmp	r0, #0
 800fa18:	f43f ae68 	beq.w	800f6ec <_strtod_l+0x43c>
 800fa1c:	9a05      	ldr	r2, [sp, #20]
 800fa1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fa20:	4648      	mov	r0, r9
 800fa22:	f002 f9c7 	bl	8011db4 <__mdiff>
 800fa26:	4604      	mov	r4, r0
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	f43f ae5f 	beq.w	800f6ec <_strtod_l+0x43c>
 800fa2e:	68c3      	ldr	r3, [r0, #12]
 800fa30:	930c      	str	r3, [sp, #48]	; 0x30
 800fa32:	2300      	movs	r3, #0
 800fa34:	60c3      	str	r3, [r0, #12]
 800fa36:	4641      	mov	r1, r8
 800fa38:	f002 f9a2 	bl	8011d80 <__mcmp>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	da55      	bge.n	800faec <_strtod_l+0x83c>
 800fa40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa42:	b9e3      	cbnz	r3, 800fa7e <_strtod_l+0x7ce>
 800fa44:	f1ba 0f00 	cmp.w	sl, #0
 800fa48:	d119      	bne.n	800fa7e <_strtod_l+0x7ce>
 800fa4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa4e:	b9b3      	cbnz	r3, 800fa7e <_strtod_l+0x7ce>
 800fa50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa54:	0d1b      	lsrs	r3, r3, #20
 800fa56:	051b      	lsls	r3, r3, #20
 800fa58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fa5c:	d90f      	bls.n	800fa7e <_strtod_l+0x7ce>
 800fa5e:	6963      	ldr	r3, [r4, #20]
 800fa60:	b913      	cbnz	r3, 800fa68 <_strtod_l+0x7b8>
 800fa62:	6923      	ldr	r3, [r4, #16]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	dd0a      	ble.n	800fa7e <_strtod_l+0x7ce>
 800fa68:	4621      	mov	r1, r4
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	4648      	mov	r0, r9
 800fa6e:	f002 f933 	bl	8011cd8 <__lshift>
 800fa72:	4641      	mov	r1, r8
 800fa74:	4604      	mov	r4, r0
 800fa76:	f002 f983 	bl	8011d80 <__mcmp>
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	dc67      	bgt.n	800fb4e <_strtod_l+0x89e>
 800fa7e:	9b04      	ldr	r3, [sp, #16]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d171      	bne.n	800fb68 <_strtod_l+0x8b8>
 800fa84:	e63d      	b.n	800f702 <_strtod_l+0x452>
 800fa86:	f018 0f01 	tst.w	r8, #1
 800fa8a:	d004      	beq.n	800fa96 <_strtod_l+0x7e6>
 800fa8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fa90:	f7f0 fdca 	bl	8000628 <__aeabi_dmul>
 800fa94:	2301      	movs	r3, #1
 800fa96:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fa9a:	3508      	adds	r5, #8
 800fa9c:	e6e5      	b.n	800f86a <_strtod_l+0x5ba>
 800fa9e:	f04f 32ff 	mov.w	r2, #4294967295
 800faa2:	fa02 f303 	lsl.w	r3, r2, r3
 800faa6:	ea03 0a0a 	and.w	sl, r3, sl
 800faaa:	e6ff      	b.n	800f8ac <_strtod_l+0x5fc>
 800faac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800fab0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800fab4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800fab8:	36e2      	adds	r6, #226	; 0xe2
 800faba:	fa01 f306 	lsl.w	r3, r1, r6
 800fabe:	930a      	str	r3, [sp, #40]	; 0x28
 800fac0:	910f      	str	r1, [sp, #60]	; 0x3c
 800fac2:	e75d      	b.n	800f980 <_strtod_l+0x6d0>
 800fac4:	2300      	movs	r3, #0
 800fac6:	930a      	str	r3, [sp, #40]	; 0x28
 800fac8:	2301      	movs	r3, #1
 800faca:	930f      	str	r3, [sp, #60]	; 0x3c
 800facc:	e758      	b.n	800f980 <_strtod_l+0x6d0>
 800face:	4632      	mov	r2, r6
 800fad0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fad2:	4648      	mov	r0, r9
 800fad4:	f002 f900 	bl	8011cd8 <__lshift>
 800fad8:	901c      	str	r0, [sp, #112]	; 0x70
 800fada:	2800      	cmp	r0, #0
 800fadc:	f47f af7c 	bne.w	800f9d8 <_strtod_l+0x728>
 800fae0:	e604      	b.n	800f6ec <_strtod_l+0x43c>
 800fae2:	bf00      	nop
 800fae4:	08013738 	.word	0x08013738
 800fae8:	fffffc02 	.word	0xfffffc02
 800faec:	465d      	mov	r5, fp
 800faee:	f040 8086 	bne.w	800fbfe <_strtod_l+0x94e>
 800faf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800faf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800faf8:	b32a      	cbz	r2, 800fb46 <_strtod_l+0x896>
 800fafa:	4aaf      	ldr	r2, [pc, #700]	; (800fdb8 <_strtod_l+0xb08>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d153      	bne.n	800fba8 <_strtod_l+0x8f8>
 800fb00:	9b04      	ldr	r3, [sp, #16]
 800fb02:	4650      	mov	r0, sl
 800fb04:	b1d3      	cbz	r3, 800fb3c <_strtod_l+0x88c>
 800fb06:	4aad      	ldr	r2, [pc, #692]	; (800fdbc <_strtod_l+0xb0c>)
 800fb08:	402a      	ands	r2, r5
 800fb0a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fb0e:	f04f 31ff 	mov.w	r1, #4294967295
 800fb12:	d816      	bhi.n	800fb42 <_strtod_l+0x892>
 800fb14:	0d12      	lsrs	r2, r2, #20
 800fb16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fb1a:	fa01 f303 	lsl.w	r3, r1, r3
 800fb1e:	4298      	cmp	r0, r3
 800fb20:	d142      	bne.n	800fba8 <_strtod_l+0x8f8>
 800fb22:	4ba7      	ldr	r3, [pc, #668]	; (800fdc0 <_strtod_l+0xb10>)
 800fb24:	429d      	cmp	r5, r3
 800fb26:	d102      	bne.n	800fb2e <_strtod_l+0x87e>
 800fb28:	3001      	adds	r0, #1
 800fb2a:	f43f addf 	beq.w	800f6ec <_strtod_l+0x43c>
 800fb2e:	4ba3      	ldr	r3, [pc, #652]	; (800fdbc <_strtod_l+0xb0c>)
 800fb30:	402b      	ands	r3, r5
 800fb32:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fb36:	f04f 0a00 	mov.w	sl, #0
 800fb3a:	e7a0      	b.n	800fa7e <_strtod_l+0x7ce>
 800fb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb40:	e7ed      	b.n	800fb1e <_strtod_l+0x86e>
 800fb42:	460b      	mov	r3, r1
 800fb44:	e7eb      	b.n	800fb1e <_strtod_l+0x86e>
 800fb46:	bb7b      	cbnz	r3, 800fba8 <_strtod_l+0x8f8>
 800fb48:	f1ba 0f00 	cmp.w	sl, #0
 800fb4c:	d12c      	bne.n	800fba8 <_strtod_l+0x8f8>
 800fb4e:	9904      	ldr	r1, [sp, #16]
 800fb50:	4a9a      	ldr	r2, [pc, #616]	; (800fdbc <_strtod_l+0xb0c>)
 800fb52:	465b      	mov	r3, fp
 800fb54:	b1f1      	cbz	r1, 800fb94 <_strtod_l+0x8e4>
 800fb56:	ea02 010b 	and.w	r1, r2, fp
 800fb5a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fb5e:	dc19      	bgt.n	800fb94 <_strtod_l+0x8e4>
 800fb60:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fb64:	f77f ae5b 	ble.w	800f81e <_strtod_l+0x56e>
 800fb68:	4a96      	ldr	r2, [pc, #600]	; (800fdc4 <_strtod_l+0xb14>)
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800fb70:	4650      	mov	r0, sl
 800fb72:	4659      	mov	r1, fp
 800fb74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fb78:	f7f0 fd56 	bl	8000628 <__aeabi_dmul>
 800fb7c:	4682      	mov	sl, r0
 800fb7e:	468b      	mov	fp, r1
 800fb80:	2900      	cmp	r1, #0
 800fb82:	f47f adbe 	bne.w	800f702 <_strtod_l+0x452>
 800fb86:	2800      	cmp	r0, #0
 800fb88:	f47f adbb 	bne.w	800f702 <_strtod_l+0x452>
 800fb8c:	2322      	movs	r3, #34	; 0x22
 800fb8e:	f8c9 3000 	str.w	r3, [r9]
 800fb92:	e5b6      	b.n	800f702 <_strtod_l+0x452>
 800fb94:	4013      	ands	r3, r2
 800fb96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fb9a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fb9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fba2:	f04f 3aff 	mov.w	sl, #4294967295
 800fba6:	e76a      	b.n	800fa7e <_strtod_l+0x7ce>
 800fba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbaa:	b193      	cbz	r3, 800fbd2 <_strtod_l+0x922>
 800fbac:	422b      	tst	r3, r5
 800fbae:	f43f af66 	beq.w	800fa7e <_strtod_l+0x7ce>
 800fbb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbb4:	9a04      	ldr	r2, [sp, #16]
 800fbb6:	4650      	mov	r0, sl
 800fbb8:	4659      	mov	r1, fp
 800fbba:	b173      	cbz	r3, 800fbda <_strtod_l+0x92a>
 800fbbc:	f7ff fb59 	bl	800f272 <sulp>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fbc8:	f7f0 fb78 	bl	80002bc <__adddf3>
 800fbcc:	4682      	mov	sl, r0
 800fbce:	468b      	mov	fp, r1
 800fbd0:	e755      	b.n	800fa7e <_strtod_l+0x7ce>
 800fbd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbd4:	ea13 0f0a 	tst.w	r3, sl
 800fbd8:	e7e9      	b.n	800fbae <_strtod_l+0x8fe>
 800fbda:	f7ff fb4a 	bl	800f272 <sulp>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fbe6:	f7f0 fb67 	bl	80002b8 <__aeabi_dsub>
 800fbea:	2200      	movs	r2, #0
 800fbec:	2300      	movs	r3, #0
 800fbee:	4682      	mov	sl, r0
 800fbf0:	468b      	mov	fp, r1
 800fbf2:	f7f0 ff81 	bl	8000af8 <__aeabi_dcmpeq>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	f47f ae11 	bne.w	800f81e <_strtod_l+0x56e>
 800fbfc:	e73f      	b.n	800fa7e <_strtod_l+0x7ce>
 800fbfe:	4641      	mov	r1, r8
 800fc00:	4620      	mov	r0, r4
 800fc02:	f002 f9fa 	bl	8011ffa <__ratio>
 800fc06:	ec57 6b10 	vmov	r6, r7, d0
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc10:	ee10 0a10 	vmov	r0, s0
 800fc14:	4639      	mov	r1, r7
 800fc16:	f7f0 ff83 	bl	8000b20 <__aeabi_dcmple>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	d077      	beq.n	800fd0e <_strtod_l+0xa5e>
 800fc1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d04a      	beq.n	800fcba <_strtod_l+0xa0a>
 800fc24:	4b68      	ldr	r3, [pc, #416]	; (800fdc8 <_strtod_l+0xb18>)
 800fc26:	2200      	movs	r2, #0
 800fc28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fc2c:	4f66      	ldr	r7, [pc, #408]	; (800fdc8 <_strtod_l+0xb18>)
 800fc2e:	2600      	movs	r6, #0
 800fc30:	4b62      	ldr	r3, [pc, #392]	; (800fdbc <_strtod_l+0xb0c>)
 800fc32:	402b      	ands	r3, r5
 800fc34:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc38:	4b64      	ldr	r3, [pc, #400]	; (800fdcc <_strtod_l+0xb1c>)
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	f040 80ce 	bne.w	800fddc <_strtod_l+0xb2c>
 800fc40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fc44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fc48:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800fc4c:	ec4b ab10 	vmov	d0, sl, fp
 800fc50:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800fc54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fc58:	f002 f90a 	bl	8011e70 <__ulp>
 800fc5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fc60:	ec53 2b10 	vmov	r2, r3, d0
 800fc64:	f7f0 fce0 	bl	8000628 <__aeabi_dmul>
 800fc68:	4652      	mov	r2, sl
 800fc6a:	465b      	mov	r3, fp
 800fc6c:	f7f0 fb26 	bl	80002bc <__adddf3>
 800fc70:	460b      	mov	r3, r1
 800fc72:	4952      	ldr	r1, [pc, #328]	; (800fdbc <_strtod_l+0xb0c>)
 800fc74:	4a56      	ldr	r2, [pc, #344]	; (800fdd0 <_strtod_l+0xb20>)
 800fc76:	4019      	ands	r1, r3
 800fc78:	4291      	cmp	r1, r2
 800fc7a:	4682      	mov	sl, r0
 800fc7c:	d95b      	bls.n	800fd36 <_strtod_l+0xa86>
 800fc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d103      	bne.n	800fc90 <_strtod_l+0x9e0>
 800fc88:	9b08      	ldr	r3, [sp, #32]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	f43f ad2e 	beq.w	800f6ec <_strtod_l+0x43c>
 800fc90:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800fdc0 <_strtod_l+0xb10>
 800fc94:	f04f 3aff 	mov.w	sl, #4294967295
 800fc98:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fc9a:	4648      	mov	r0, r9
 800fc9c:	f001 fe51 	bl	8011942 <_Bfree>
 800fca0:	9905      	ldr	r1, [sp, #20]
 800fca2:	4648      	mov	r0, r9
 800fca4:	f001 fe4d 	bl	8011942 <_Bfree>
 800fca8:	4641      	mov	r1, r8
 800fcaa:	4648      	mov	r0, r9
 800fcac:	f001 fe49 	bl	8011942 <_Bfree>
 800fcb0:	4621      	mov	r1, r4
 800fcb2:	4648      	mov	r0, r9
 800fcb4:	f001 fe45 	bl	8011942 <_Bfree>
 800fcb8:	e619      	b.n	800f8ee <_strtod_l+0x63e>
 800fcba:	f1ba 0f00 	cmp.w	sl, #0
 800fcbe:	d11a      	bne.n	800fcf6 <_strtod_l+0xa46>
 800fcc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcc4:	b9eb      	cbnz	r3, 800fd02 <_strtod_l+0xa52>
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	4b3f      	ldr	r3, [pc, #252]	; (800fdc8 <_strtod_l+0xb18>)
 800fcca:	4630      	mov	r0, r6
 800fccc:	4639      	mov	r1, r7
 800fcce:	f7f0 ff1d 	bl	8000b0c <__aeabi_dcmplt>
 800fcd2:	b9c8      	cbnz	r0, 800fd08 <_strtod_l+0xa58>
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	4639      	mov	r1, r7
 800fcd8:	2200      	movs	r2, #0
 800fcda:	4b3e      	ldr	r3, [pc, #248]	; (800fdd4 <_strtod_l+0xb24>)
 800fcdc:	f7f0 fca4 	bl	8000628 <__aeabi_dmul>
 800fce0:	4606      	mov	r6, r0
 800fce2:	460f      	mov	r7, r1
 800fce4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800fce8:	9618      	str	r6, [sp, #96]	; 0x60
 800fcea:	9319      	str	r3, [sp, #100]	; 0x64
 800fcec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800fcf0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fcf4:	e79c      	b.n	800fc30 <_strtod_l+0x980>
 800fcf6:	f1ba 0f01 	cmp.w	sl, #1
 800fcfa:	d102      	bne.n	800fd02 <_strtod_l+0xa52>
 800fcfc:	2d00      	cmp	r5, #0
 800fcfe:	f43f ad8e 	beq.w	800f81e <_strtod_l+0x56e>
 800fd02:	2200      	movs	r2, #0
 800fd04:	4b34      	ldr	r3, [pc, #208]	; (800fdd8 <_strtod_l+0xb28>)
 800fd06:	e78f      	b.n	800fc28 <_strtod_l+0x978>
 800fd08:	2600      	movs	r6, #0
 800fd0a:	4f32      	ldr	r7, [pc, #200]	; (800fdd4 <_strtod_l+0xb24>)
 800fd0c:	e7ea      	b.n	800fce4 <_strtod_l+0xa34>
 800fd0e:	4b31      	ldr	r3, [pc, #196]	; (800fdd4 <_strtod_l+0xb24>)
 800fd10:	4630      	mov	r0, r6
 800fd12:	4639      	mov	r1, r7
 800fd14:	2200      	movs	r2, #0
 800fd16:	f7f0 fc87 	bl	8000628 <__aeabi_dmul>
 800fd1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd1c:	4606      	mov	r6, r0
 800fd1e:	460f      	mov	r7, r1
 800fd20:	b933      	cbnz	r3, 800fd30 <_strtod_l+0xa80>
 800fd22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd26:	9010      	str	r0, [sp, #64]	; 0x40
 800fd28:	9311      	str	r3, [sp, #68]	; 0x44
 800fd2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fd2e:	e7df      	b.n	800fcf0 <_strtod_l+0xa40>
 800fd30:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800fd34:	e7f9      	b.n	800fd2a <_strtod_l+0xa7a>
 800fd36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fd3a:	9b04      	ldr	r3, [sp, #16]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1ab      	bne.n	800fc98 <_strtod_l+0x9e8>
 800fd40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd44:	0d1b      	lsrs	r3, r3, #20
 800fd46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd48:	051b      	lsls	r3, r3, #20
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	465d      	mov	r5, fp
 800fd4e:	d1a3      	bne.n	800fc98 <_strtod_l+0x9e8>
 800fd50:	4639      	mov	r1, r7
 800fd52:	4630      	mov	r0, r6
 800fd54:	f7f0 ff18 	bl	8000b88 <__aeabi_d2iz>
 800fd58:	f7f0 fbfc 	bl	8000554 <__aeabi_i2d>
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	4602      	mov	r2, r0
 800fd60:	4639      	mov	r1, r7
 800fd62:	4630      	mov	r0, r6
 800fd64:	f7f0 faa8 	bl	80002b8 <__aeabi_dsub>
 800fd68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	460f      	mov	r7, r1
 800fd6e:	b933      	cbnz	r3, 800fd7e <_strtod_l+0xace>
 800fd70:	f1ba 0f00 	cmp.w	sl, #0
 800fd74:	d103      	bne.n	800fd7e <_strtod_l+0xace>
 800fd76:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800fd7a:	2d00      	cmp	r5, #0
 800fd7c:	d06d      	beq.n	800fe5a <_strtod_l+0xbaa>
 800fd7e:	a30a      	add	r3, pc, #40	; (adr r3, 800fda8 <_strtod_l+0xaf8>)
 800fd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd84:	4630      	mov	r0, r6
 800fd86:	4639      	mov	r1, r7
 800fd88:	f7f0 fec0 	bl	8000b0c <__aeabi_dcmplt>
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	f47f acb8 	bne.w	800f702 <_strtod_l+0x452>
 800fd92:	a307      	add	r3, pc, #28	; (adr r3, 800fdb0 <_strtod_l+0xb00>)
 800fd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd98:	4630      	mov	r0, r6
 800fd9a:	4639      	mov	r1, r7
 800fd9c:	f7f0 fed4 	bl	8000b48 <__aeabi_dcmpgt>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	f43f af79 	beq.w	800fc98 <_strtod_l+0x9e8>
 800fda6:	e4ac      	b.n	800f702 <_strtod_l+0x452>
 800fda8:	94a03595 	.word	0x94a03595
 800fdac:	3fdfffff 	.word	0x3fdfffff
 800fdb0:	35afe535 	.word	0x35afe535
 800fdb4:	3fe00000 	.word	0x3fe00000
 800fdb8:	000fffff 	.word	0x000fffff
 800fdbc:	7ff00000 	.word	0x7ff00000
 800fdc0:	7fefffff 	.word	0x7fefffff
 800fdc4:	39500000 	.word	0x39500000
 800fdc8:	3ff00000 	.word	0x3ff00000
 800fdcc:	7fe00000 	.word	0x7fe00000
 800fdd0:	7c9fffff 	.word	0x7c9fffff
 800fdd4:	3fe00000 	.word	0x3fe00000
 800fdd8:	bff00000 	.word	0xbff00000
 800fddc:	9b04      	ldr	r3, [sp, #16]
 800fdde:	b333      	cbz	r3, 800fe2e <_strtod_l+0xb7e>
 800fde0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fde2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fde6:	d822      	bhi.n	800fe2e <_strtod_l+0xb7e>
 800fde8:	a327      	add	r3, pc, #156	; (adr r3, 800fe88 <_strtod_l+0xbd8>)
 800fdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdee:	4630      	mov	r0, r6
 800fdf0:	4639      	mov	r1, r7
 800fdf2:	f7f0 fe95 	bl	8000b20 <__aeabi_dcmple>
 800fdf6:	b1a0      	cbz	r0, 800fe22 <_strtod_l+0xb72>
 800fdf8:	4639      	mov	r1, r7
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	f7f0 feec 	bl	8000bd8 <__aeabi_d2uiz>
 800fe00:	2800      	cmp	r0, #0
 800fe02:	bf08      	it	eq
 800fe04:	2001      	moveq	r0, #1
 800fe06:	f7f0 fb95 	bl	8000534 <__aeabi_ui2d>
 800fe0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe0c:	4606      	mov	r6, r0
 800fe0e:	460f      	mov	r7, r1
 800fe10:	bb03      	cbnz	r3, 800fe54 <_strtod_l+0xba4>
 800fe12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe16:	9012      	str	r0, [sp, #72]	; 0x48
 800fe18:	9313      	str	r3, [sp, #76]	; 0x4c
 800fe1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fe1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fe22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe26:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fe2a:	1a9b      	subs	r3, r3, r2
 800fe2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe2e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800fe32:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800fe36:	f002 f81b 	bl	8011e70 <__ulp>
 800fe3a:	4650      	mov	r0, sl
 800fe3c:	ec53 2b10 	vmov	r2, r3, d0
 800fe40:	4659      	mov	r1, fp
 800fe42:	f7f0 fbf1 	bl	8000628 <__aeabi_dmul>
 800fe46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fe4a:	f7f0 fa37 	bl	80002bc <__adddf3>
 800fe4e:	4682      	mov	sl, r0
 800fe50:	468b      	mov	fp, r1
 800fe52:	e772      	b.n	800fd3a <_strtod_l+0xa8a>
 800fe54:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800fe58:	e7df      	b.n	800fe1a <_strtod_l+0xb6a>
 800fe5a:	a30d      	add	r3, pc, #52	; (adr r3, 800fe90 <_strtod_l+0xbe0>)
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	f7f0 fe54 	bl	8000b0c <__aeabi_dcmplt>
 800fe64:	e79c      	b.n	800fda0 <_strtod_l+0xaf0>
 800fe66:	2300      	movs	r3, #0
 800fe68:	930d      	str	r3, [sp, #52]	; 0x34
 800fe6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fe6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe6e:	6013      	str	r3, [r2, #0]
 800fe70:	f7ff ba61 	b.w	800f336 <_strtod_l+0x86>
 800fe74:	2b65      	cmp	r3, #101	; 0x65
 800fe76:	f04f 0200 	mov.w	r2, #0
 800fe7a:	f43f ab4e 	beq.w	800f51a <_strtod_l+0x26a>
 800fe7e:	2101      	movs	r1, #1
 800fe80:	4614      	mov	r4, r2
 800fe82:	9104      	str	r1, [sp, #16]
 800fe84:	f7ff bacb 	b.w	800f41e <_strtod_l+0x16e>
 800fe88:	ffc00000 	.word	0xffc00000
 800fe8c:	41dfffff 	.word	0x41dfffff
 800fe90:	94a03595 	.word	0x94a03595
 800fe94:	3fcfffff 	.word	0x3fcfffff

0800fe98 <_strtod_r>:
 800fe98:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <_strtod_r+0x18>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	b410      	push	{r4}
 800fe9e:	6a1b      	ldr	r3, [r3, #32]
 800fea0:	4c04      	ldr	r4, [pc, #16]	; (800feb4 <_strtod_r+0x1c>)
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	bf08      	it	eq
 800fea6:	4623      	moveq	r3, r4
 800fea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800feac:	f7ff ba00 	b.w	800f2b0 <_strtod_l>
 800feb0:	2000000c 	.word	0x2000000c
 800feb4:	20000070 	.word	0x20000070

0800feb8 <_strtol_l.isra.0>:
 800feb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800febc:	4680      	mov	r8, r0
 800febe:	4689      	mov	r9, r1
 800fec0:	4692      	mov	sl, r2
 800fec2:	461e      	mov	r6, r3
 800fec4:	460f      	mov	r7, r1
 800fec6:	463d      	mov	r5, r7
 800fec8:	9808      	ldr	r0, [sp, #32]
 800feca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fece:	f001 fc47 	bl	8011760 <__locale_ctype_ptr_l>
 800fed2:	4420      	add	r0, r4
 800fed4:	7843      	ldrb	r3, [r0, #1]
 800fed6:	f013 0308 	ands.w	r3, r3, #8
 800feda:	d132      	bne.n	800ff42 <_strtol_l.isra.0+0x8a>
 800fedc:	2c2d      	cmp	r4, #45	; 0x2d
 800fede:	d132      	bne.n	800ff46 <_strtol_l.isra.0+0x8e>
 800fee0:	787c      	ldrb	r4, [r7, #1]
 800fee2:	1cbd      	adds	r5, r7, #2
 800fee4:	2201      	movs	r2, #1
 800fee6:	2e00      	cmp	r6, #0
 800fee8:	d05d      	beq.n	800ffa6 <_strtol_l.isra.0+0xee>
 800feea:	2e10      	cmp	r6, #16
 800feec:	d109      	bne.n	800ff02 <_strtol_l.isra.0+0x4a>
 800feee:	2c30      	cmp	r4, #48	; 0x30
 800fef0:	d107      	bne.n	800ff02 <_strtol_l.isra.0+0x4a>
 800fef2:	782b      	ldrb	r3, [r5, #0]
 800fef4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fef8:	2b58      	cmp	r3, #88	; 0x58
 800fefa:	d14f      	bne.n	800ff9c <_strtol_l.isra.0+0xe4>
 800fefc:	786c      	ldrb	r4, [r5, #1]
 800fefe:	2610      	movs	r6, #16
 800ff00:	3502      	adds	r5, #2
 800ff02:	2a00      	cmp	r2, #0
 800ff04:	bf14      	ite	ne
 800ff06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ff0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ff0e:	2700      	movs	r7, #0
 800ff10:	fbb1 fcf6 	udiv	ip, r1, r6
 800ff14:	4638      	mov	r0, r7
 800ff16:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ff1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ff1e:	2b09      	cmp	r3, #9
 800ff20:	d817      	bhi.n	800ff52 <_strtol_l.isra.0+0x9a>
 800ff22:	461c      	mov	r4, r3
 800ff24:	42a6      	cmp	r6, r4
 800ff26:	dd23      	ble.n	800ff70 <_strtol_l.isra.0+0xb8>
 800ff28:	1c7b      	adds	r3, r7, #1
 800ff2a:	d007      	beq.n	800ff3c <_strtol_l.isra.0+0x84>
 800ff2c:	4584      	cmp	ip, r0
 800ff2e:	d31c      	bcc.n	800ff6a <_strtol_l.isra.0+0xb2>
 800ff30:	d101      	bne.n	800ff36 <_strtol_l.isra.0+0x7e>
 800ff32:	45a6      	cmp	lr, r4
 800ff34:	db19      	blt.n	800ff6a <_strtol_l.isra.0+0xb2>
 800ff36:	fb00 4006 	mla	r0, r0, r6, r4
 800ff3a:	2701      	movs	r7, #1
 800ff3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff40:	e7eb      	b.n	800ff1a <_strtol_l.isra.0+0x62>
 800ff42:	462f      	mov	r7, r5
 800ff44:	e7bf      	b.n	800fec6 <_strtol_l.isra.0+0xe>
 800ff46:	2c2b      	cmp	r4, #43	; 0x2b
 800ff48:	bf04      	itt	eq
 800ff4a:	1cbd      	addeq	r5, r7, #2
 800ff4c:	787c      	ldrbeq	r4, [r7, #1]
 800ff4e:	461a      	mov	r2, r3
 800ff50:	e7c9      	b.n	800fee6 <_strtol_l.isra.0+0x2e>
 800ff52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ff56:	2b19      	cmp	r3, #25
 800ff58:	d801      	bhi.n	800ff5e <_strtol_l.isra.0+0xa6>
 800ff5a:	3c37      	subs	r4, #55	; 0x37
 800ff5c:	e7e2      	b.n	800ff24 <_strtol_l.isra.0+0x6c>
 800ff5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ff62:	2b19      	cmp	r3, #25
 800ff64:	d804      	bhi.n	800ff70 <_strtol_l.isra.0+0xb8>
 800ff66:	3c57      	subs	r4, #87	; 0x57
 800ff68:	e7dc      	b.n	800ff24 <_strtol_l.isra.0+0x6c>
 800ff6a:	f04f 37ff 	mov.w	r7, #4294967295
 800ff6e:	e7e5      	b.n	800ff3c <_strtol_l.isra.0+0x84>
 800ff70:	1c7b      	adds	r3, r7, #1
 800ff72:	d108      	bne.n	800ff86 <_strtol_l.isra.0+0xce>
 800ff74:	2322      	movs	r3, #34	; 0x22
 800ff76:	f8c8 3000 	str.w	r3, [r8]
 800ff7a:	4608      	mov	r0, r1
 800ff7c:	f1ba 0f00 	cmp.w	sl, #0
 800ff80:	d107      	bne.n	800ff92 <_strtol_l.isra.0+0xda>
 800ff82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff86:	b102      	cbz	r2, 800ff8a <_strtol_l.isra.0+0xd2>
 800ff88:	4240      	negs	r0, r0
 800ff8a:	f1ba 0f00 	cmp.w	sl, #0
 800ff8e:	d0f8      	beq.n	800ff82 <_strtol_l.isra.0+0xca>
 800ff90:	b10f      	cbz	r7, 800ff96 <_strtol_l.isra.0+0xde>
 800ff92:	f105 39ff 	add.w	r9, r5, #4294967295
 800ff96:	f8ca 9000 	str.w	r9, [sl]
 800ff9a:	e7f2      	b.n	800ff82 <_strtol_l.isra.0+0xca>
 800ff9c:	2430      	movs	r4, #48	; 0x30
 800ff9e:	2e00      	cmp	r6, #0
 800ffa0:	d1af      	bne.n	800ff02 <_strtol_l.isra.0+0x4a>
 800ffa2:	2608      	movs	r6, #8
 800ffa4:	e7ad      	b.n	800ff02 <_strtol_l.isra.0+0x4a>
 800ffa6:	2c30      	cmp	r4, #48	; 0x30
 800ffa8:	d0a3      	beq.n	800fef2 <_strtol_l.isra.0+0x3a>
 800ffaa:	260a      	movs	r6, #10
 800ffac:	e7a9      	b.n	800ff02 <_strtol_l.isra.0+0x4a>
	...

0800ffb0 <_strtol_r>:
 800ffb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffb2:	4c06      	ldr	r4, [pc, #24]	; (800ffcc <_strtol_r+0x1c>)
 800ffb4:	4d06      	ldr	r5, [pc, #24]	; (800ffd0 <_strtol_r+0x20>)
 800ffb6:	6824      	ldr	r4, [r4, #0]
 800ffb8:	6a24      	ldr	r4, [r4, #32]
 800ffba:	2c00      	cmp	r4, #0
 800ffbc:	bf08      	it	eq
 800ffbe:	462c      	moveq	r4, r5
 800ffc0:	9400      	str	r4, [sp, #0]
 800ffc2:	f7ff ff79 	bl	800feb8 <_strtol_l.isra.0>
 800ffc6:	b003      	add	sp, #12
 800ffc8:	bd30      	pop	{r4, r5, pc}
 800ffca:	bf00      	nop
 800ffcc:	2000000c 	.word	0x2000000c
 800ffd0:	20000070 	.word	0x20000070

0800ffd4 <__swbuf_r>:
 800ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd6:	460e      	mov	r6, r1
 800ffd8:	4614      	mov	r4, r2
 800ffda:	4605      	mov	r5, r0
 800ffdc:	b118      	cbz	r0, 800ffe6 <__swbuf_r+0x12>
 800ffde:	6983      	ldr	r3, [r0, #24]
 800ffe0:	b90b      	cbnz	r3, 800ffe6 <__swbuf_r+0x12>
 800ffe2:	f001 f80d 	bl	8011000 <__sinit>
 800ffe6:	4b21      	ldr	r3, [pc, #132]	; (801006c <__swbuf_r+0x98>)
 800ffe8:	429c      	cmp	r4, r3
 800ffea:	d12a      	bne.n	8010042 <__swbuf_r+0x6e>
 800ffec:	686c      	ldr	r4, [r5, #4]
 800ffee:	69a3      	ldr	r3, [r4, #24]
 800fff0:	60a3      	str	r3, [r4, #8]
 800fff2:	89a3      	ldrh	r3, [r4, #12]
 800fff4:	071a      	lsls	r2, r3, #28
 800fff6:	d52e      	bpl.n	8010056 <__swbuf_r+0x82>
 800fff8:	6923      	ldr	r3, [r4, #16]
 800fffa:	b363      	cbz	r3, 8010056 <__swbuf_r+0x82>
 800fffc:	6923      	ldr	r3, [r4, #16]
 800fffe:	6820      	ldr	r0, [r4, #0]
 8010000:	1ac0      	subs	r0, r0, r3
 8010002:	6963      	ldr	r3, [r4, #20]
 8010004:	b2f6      	uxtb	r6, r6
 8010006:	4283      	cmp	r3, r0
 8010008:	4637      	mov	r7, r6
 801000a:	dc04      	bgt.n	8010016 <__swbuf_r+0x42>
 801000c:	4621      	mov	r1, r4
 801000e:	4628      	mov	r0, r5
 8010010:	f000 ff8c 	bl	8010f2c <_fflush_r>
 8010014:	bb28      	cbnz	r0, 8010062 <__swbuf_r+0x8e>
 8010016:	68a3      	ldr	r3, [r4, #8]
 8010018:	3b01      	subs	r3, #1
 801001a:	60a3      	str	r3, [r4, #8]
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	1c5a      	adds	r2, r3, #1
 8010020:	6022      	str	r2, [r4, #0]
 8010022:	701e      	strb	r6, [r3, #0]
 8010024:	6963      	ldr	r3, [r4, #20]
 8010026:	3001      	adds	r0, #1
 8010028:	4283      	cmp	r3, r0
 801002a:	d004      	beq.n	8010036 <__swbuf_r+0x62>
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	07db      	lsls	r3, r3, #31
 8010030:	d519      	bpl.n	8010066 <__swbuf_r+0x92>
 8010032:	2e0a      	cmp	r6, #10
 8010034:	d117      	bne.n	8010066 <__swbuf_r+0x92>
 8010036:	4621      	mov	r1, r4
 8010038:	4628      	mov	r0, r5
 801003a:	f000 ff77 	bl	8010f2c <_fflush_r>
 801003e:	b190      	cbz	r0, 8010066 <__swbuf_r+0x92>
 8010040:	e00f      	b.n	8010062 <__swbuf_r+0x8e>
 8010042:	4b0b      	ldr	r3, [pc, #44]	; (8010070 <__swbuf_r+0x9c>)
 8010044:	429c      	cmp	r4, r3
 8010046:	d101      	bne.n	801004c <__swbuf_r+0x78>
 8010048:	68ac      	ldr	r4, [r5, #8]
 801004a:	e7d0      	b.n	800ffee <__swbuf_r+0x1a>
 801004c:	4b09      	ldr	r3, [pc, #36]	; (8010074 <__swbuf_r+0xa0>)
 801004e:	429c      	cmp	r4, r3
 8010050:	bf08      	it	eq
 8010052:	68ec      	ldreq	r4, [r5, #12]
 8010054:	e7cb      	b.n	800ffee <__swbuf_r+0x1a>
 8010056:	4621      	mov	r1, r4
 8010058:	4628      	mov	r0, r5
 801005a:	f000 f81f 	bl	801009c <__swsetup_r>
 801005e:	2800      	cmp	r0, #0
 8010060:	d0cc      	beq.n	800fffc <__swbuf_r+0x28>
 8010062:	f04f 37ff 	mov.w	r7, #4294967295
 8010066:	4638      	mov	r0, r7
 8010068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801006a:	bf00      	nop
 801006c:	08013790 	.word	0x08013790
 8010070:	080137b0 	.word	0x080137b0
 8010074:	08013770 	.word	0x08013770

08010078 <_write_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4c07      	ldr	r4, [pc, #28]	; (8010098 <_write_r+0x20>)
 801007c:	4605      	mov	r5, r0
 801007e:	4608      	mov	r0, r1
 8010080:	4611      	mov	r1, r2
 8010082:	2200      	movs	r2, #0
 8010084:	6022      	str	r2, [r4, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	f7f1 ffc0 	bl	800200c <_write>
 801008c:	1c43      	adds	r3, r0, #1
 801008e:	d102      	bne.n	8010096 <_write_r+0x1e>
 8010090:	6823      	ldr	r3, [r4, #0]
 8010092:	b103      	cbz	r3, 8010096 <_write_r+0x1e>
 8010094:	602b      	str	r3, [r5, #0]
 8010096:	bd38      	pop	{r3, r4, r5, pc}
 8010098:	20004df8 	.word	0x20004df8

0801009c <__swsetup_r>:
 801009c:	4b32      	ldr	r3, [pc, #200]	; (8010168 <__swsetup_r+0xcc>)
 801009e:	b570      	push	{r4, r5, r6, lr}
 80100a0:	681d      	ldr	r5, [r3, #0]
 80100a2:	4606      	mov	r6, r0
 80100a4:	460c      	mov	r4, r1
 80100a6:	b125      	cbz	r5, 80100b2 <__swsetup_r+0x16>
 80100a8:	69ab      	ldr	r3, [r5, #24]
 80100aa:	b913      	cbnz	r3, 80100b2 <__swsetup_r+0x16>
 80100ac:	4628      	mov	r0, r5
 80100ae:	f000 ffa7 	bl	8011000 <__sinit>
 80100b2:	4b2e      	ldr	r3, [pc, #184]	; (801016c <__swsetup_r+0xd0>)
 80100b4:	429c      	cmp	r4, r3
 80100b6:	d10f      	bne.n	80100d8 <__swsetup_r+0x3c>
 80100b8:	686c      	ldr	r4, [r5, #4]
 80100ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100be:	b29a      	uxth	r2, r3
 80100c0:	0715      	lsls	r5, r2, #28
 80100c2:	d42c      	bmi.n	801011e <__swsetup_r+0x82>
 80100c4:	06d0      	lsls	r0, r2, #27
 80100c6:	d411      	bmi.n	80100ec <__swsetup_r+0x50>
 80100c8:	2209      	movs	r2, #9
 80100ca:	6032      	str	r2, [r6, #0]
 80100cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100d0:	81a3      	strh	r3, [r4, #12]
 80100d2:	f04f 30ff 	mov.w	r0, #4294967295
 80100d6:	e03e      	b.n	8010156 <__swsetup_r+0xba>
 80100d8:	4b25      	ldr	r3, [pc, #148]	; (8010170 <__swsetup_r+0xd4>)
 80100da:	429c      	cmp	r4, r3
 80100dc:	d101      	bne.n	80100e2 <__swsetup_r+0x46>
 80100de:	68ac      	ldr	r4, [r5, #8]
 80100e0:	e7eb      	b.n	80100ba <__swsetup_r+0x1e>
 80100e2:	4b24      	ldr	r3, [pc, #144]	; (8010174 <__swsetup_r+0xd8>)
 80100e4:	429c      	cmp	r4, r3
 80100e6:	bf08      	it	eq
 80100e8:	68ec      	ldreq	r4, [r5, #12]
 80100ea:	e7e6      	b.n	80100ba <__swsetup_r+0x1e>
 80100ec:	0751      	lsls	r1, r2, #29
 80100ee:	d512      	bpl.n	8010116 <__swsetup_r+0x7a>
 80100f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100f2:	b141      	cbz	r1, 8010106 <__swsetup_r+0x6a>
 80100f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100f8:	4299      	cmp	r1, r3
 80100fa:	d002      	beq.n	8010102 <__swsetup_r+0x66>
 80100fc:	4630      	mov	r0, r6
 80100fe:	f001 fff9 	bl	80120f4 <_free_r>
 8010102:	2300      	movs	r3, #0
 8010104:	6363      	str	r3, [r4, #52]	; 0x34
 8010106:	89a3      	ldrh	r3, [r4, #12]
 8010108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801010c:	81a3      	strh	r3, [r4, #12]
 801010e:	2300      	movs	r3, #0
 8010110:	6063      	str	r3, [r4, #4]
 8010112:	6923      	ldr	r3, [r4, #16]
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	89a3      	ldrh	r3, [r4, #12]
 8010118:	f043 0308 	orr.w	r3, r3, #8
 801011c:	81a3      	strh	r3, [r4, #12]
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	b94b      	cbnz	r3, 8010136 <__swsetup_r+0x9a>
 8010122:	89a3      	ldrh	r3, [r4, #12]
 8010124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801012c:	d003      	beq.n	8010136 <__swsetup_r+0x9a>
 801012e:	4621      	mov	r1, r4
 8010130:	4630      	mov	r0, r6
 8010132:	f001 fb6d 	bl	8011810 <__smakebuf_r>
 8010136:	89a2      	ldrh	r2, [r4, #12]
 8010138:	f012 0301 	ands.w	r3, r2, #1
 801013c:	d00c      	beq.n	8010158 <__swsetup_r+0xbc>
 801013e:	2300      	movs	r3, #0
 8010140:	60a3      	str	r3, [r4, #8]
 8010142:	6963      	ldr	r3, [r4, #20]
 8010144:	425b      	negs	r3, r3
 8010146:	61a3      	str	r3, [r4, #24]
 8010148:	6923      	ldr	r3, [r4, #16]
 801014a:	b953      	cbnz	r3, 8010162 <__swsetup_r+0xc6>
 801014c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010150:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010154:	d1ba      	bne.n	80100cc <__swsetup_r+0x30>
 8010156:	bd70      	pop	{r4, r5, r6, pc}
 8010158:	0792      	lsls	r2, r2, #30
 801015a:	bf58      	it	pl
 801015c:	6963      	ldrpl	r3, [r4, #20]
 801015e:	60a3      	str	r3, [r4, #8]
 8010160:	e7f2      	b.n	8010148 <__swsetup_r+0xac>
 8010162:	2000      	movs	r0, #0
 8010164:	e7f7      	b.n	8010156 <__swsetup_r+0xba>
 8010166:	bf00      	nop
 8010168:	2000000c 	.word	0x2000000c
 801016c:	08013790 	.word	0x08013790
 8010170:	080137b0 	.word	0x080137b0
 8010174:	08013770 	.word	0x08013770

08010178 <_close_r>:
 8010178:	b538      	push	{r3, r4, r5, lr}
 801017a:	4c06      	ldr	r4, [pc, #24]	; (8010194 <_close_r+0x1c>)
 801017c:	2300      	movs	r3, #0
 801017e:	4605      	mov	r5, r0
 8010180:	4608      	mov	r0, r1
 8010182:	6023      	str	r3, [r4, #0]
 8010184:	f7f3 fc2f 	bl	80039e6 <_close>
 8010188:	1c43      	adds	r3, r0, #1
 801018a:	d102      	bne.n	8010192 <_close_r+0x1a>
 801018c:	6823      	ldr	r3, [r4, #0]
 801018e:	b103      	cbz	r3, 8010192 <_close_r+0x1a>
 8010190:	602b      	str	r3, [r5, #0]
 8010192:	bd38      	pop	{r3, r4, r5, pc}
 8010194:	20004df8 	.word	0x20004df8

08010198 <quorem>:
 8010198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019c:	6903      	ldr	r3, [r0, #16]
 801019e:	690c      	ldr	r4, [r1, #16]
 80101a0:	42a3      	cmp	r3, r4
 80101a2:	4680      	mov	r8, r0
 80101a4:	f2c0 8082 	blt.w	80102ac <quorem+0x114>
 80101a8:	3c01      	subs	r4, #1
 80101aa:	f101 0714 	add.w	r7, r1, #20
 80101ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80101b2:	f100 0614 	add.w	r6, r0, #20
 80101b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80101ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80101be:	eb06 030c 	add.w	r3, r6, ip
 80101c2:	3501      	adds	r5, #1
 80101c4:	eb07 090c 	add.w	r9, r7, ip
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80101ce:	b395      	cbz	r5, 8010236 <quorem+0x9e>
 80101d0:	f04f 0a00 	mov.w	sl, #0
 80101d4:	4638      	mov	r0, r7
 80101d6:	46b6      	mov	lr, r6
 80101d8:	46d3      	mov	fp, sl
 80101da:	f850 2b04 	ldr.w	r2, [r0], #4
 80101de:	b293      	uxth	r3, r2
 80101e0:	fb05 a303 	mla	r3, r5, r3, sl
 80101e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	ebab 0303 	sub.w	r3, fp, r3
 80101ee:	0c12      	lsrs	r2, r2, #16
 80101f0:	f8de b000 	ldr.w	fp, [lr]
 80101f4:	fb05 a202 	mla	r2, r5, r2, sl
 80101f8:	fa13 f38b 	uxtah	r3, r3, fp
 80101fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010200:	fa1f fb82 	uxth.w	fp, r2
 8010204:	f8de 2000 	ldr.w	r2, [lr]
 8010208:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801020c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010210:	b29b      	uxth	r3, r3
 8010212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010216:	4581      	cmp	r9, r0
 8010218:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801021c:	f84e 3b04 	str.w	r3, [lr], #4
 8010220:	d2db      	bcs.n	80101da <quorem+0x42>
 8010222:	f856 300c 	ldr.w	r3, [r6, ip]
 8010226:	b933      	cbnz	r3, 8010236 <quorem+0x9e>
 8010228:	9b01      	ldr	r3, [sp, #4]
 801022a:	3b04      	subs	r3, #4
 801022c:	429e      	cmp	r6, r3
 801022e:	461a      	mov	r2, r3
 8010230:	d330      	bcc.n	8010294 <quorem+0xfc>
 8010232:	f8c8 4010 	str.w	r4, [r8, #16]
 8010236:	4640      	mov	r0, r8
 8010238:	f001 fda2 	bl	8011d80 <__mcmp>
 801023c:	2800      	cmp	r0, #0
 801023e:	db25      	blt.n	801028c <quorem+0xf4>
 8010240:	3501      	adds	r5, #1
 8010242:	4630      	mov	r0, r6
 8010244:	f04f 0c00 	mov.w	ip, #0
 8010248:	f857 2b04 	ldr.w	r2, [r7], #4
 801024c:	f8d0 e000 	ldr.w	lr, [r0]
 8010250:	b293      	uxth	r3, r2
 8010252:	ebac 0303 	sub.w	r3, ip, r3
 8010256:	0c12      	lsrs	r2, r2, #16
 8010258:	fa13 f38e 	uxtah	r3, r3, lr
 801025c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010264:	b29b      	uxth	r3, r3
 8010266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801026a:	45b9      	cmp	r9, r7
 801026c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010270:	f840 3b04 	str.w	r3, [r0], #4
 8010274:	d2e8      	bcs.n	8010248 <quorem+0xb0>
 8010276:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801027a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801027e:	b92a      	cbnz	r2, 801028c <quorem+0xf4>
 8010280:	3b04      	subs	r3, #4
 8010282:	429e      	cmp	r6, r3
 8010284:	461a      	mov	r2, r3
 8010286:	d30b      	bcc.n	80102a0 <quorem+0x108>
 8010288:	f8c8 4010 	str.w	r4, [r8, #16]
 801028c:	4628      	mov	r0, r5
 801028e:	b003      	add	sp, #12
 8010290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010294:	6812      	ldr	r2, [r2, #0]
 8010296:	3b04      	subs	r3, #4
 8010298:	2a00      	cmp	r2, #0
 801029a:	d1ca      	bne.n	8010232 <quorem+0x9a>
 801029c:	3c01      	subs	r4, #1
 801029e:	e7c5      	b.n	801022c <quorem+0x94>
 80102a0:	6812      	ldr	r2, [r2, #0]
 80102a2:	3b04      	subs	r3, #4
 80102a4:	2a00      	cmp	r2, #0
 80102a6:	d1ef      	bne.n	8010288 <quorem+0xf0>
 80102a8:	3c01      	subs	r4, #1
 80102aa:	e7ea      	b.n	8010282 <quorem+0xea>
 80102ac:	2000      	movs	r0, #0
 80102ae:	e7ee      	b.n	801028e <quorem+0xf6>

080102b0 <_dtoa_r>:
 80102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b4:	ec57 6b10 	vmov	r6, r7, d0
 80102b8:	b097      	sub	sp, #92	; 0x5c
 80102ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80102bc:	9106      	str	r1, [sp, #24]
 80102be:	4604      	mov	r4, r0
 80102c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80102c2:	9312      	str	r3, [sp, #72]	; 0x48
 80102c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80102c8:	e9cd 6700 	strd	r6, r7, [sp]
 80102cc:	b93d      	cbnz	r5, 80102de <_dtoa_r+0x2e>
 80102ce:	2010      	movs	r0, #16
 80102d0:	f001 fade 	bl	8011890 <malloc>
 80102d4:	6260      	str	r0, [r4, #36]	; 0x24
 80102d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80102da:	6005      	str	r5, [r0, #0]
 80102dc:	60c5      	str	r5, [r0, #12]
 80102de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102e0:	6819      	ldr	r1, [r3, #0]
 80102e2:	b151      	cbz	r1, 80102fa <_dtoa_r+0x4a>
 80102e4:	685a      	ldr	r2, [r3, #4]
 80102e6:	604a      	str	r2, [r1, #4]
 80102e8:	2301      	movs	r3, #1
 80102ea:	4093      	lsls	r3, r2
 80102ec:	608b      	str	r3, [r1, #8]
 80102ee:	4620      	mov	r0, r4
 80102f0:	f001 fb27 	bl	8011942 <_Bfree>
 80102f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102f6:	2200      	movs	r2, #0
 80102f8:	601a      	str	r2, [r3, #0]
 80102fa:	1e3b      	subs	r3, r7, #0
 80102fc:	bfbb      	ittet	lt
 80102fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010302:	9301      	strlt	r3, [sp, #4]
 8010304:	2300      	movge	r3, #0
 8010306:	2201      	movlt	r2, #1
 8010308:	bfac      	ite	ge
 801030a:	f8c8 3000 	strge.w	r3, [r8]
 801030e:	f8c8 2000 	strlt.w	r2, [r8]
 8010312:	4baf      	ldr	r3, [pc, #700]	; (80105d0 <_dtoa_r+0x320>)
 8010314:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010318:	ea33 0308 	bics.w	r3, r3, r8
 801031c:	d114      	bne.n	8010348 <_dtoa_r+0x98>
 801031e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010320:	f242 730f 	movw	r3, #9999	; 0x270f
 8010324:	6013      	str	r3, [r2, #0]
 8010326:	9b00      	ldr	r3, [sp, #0]
 8010328:	b923      	cbnz	r3, 8010334 <_dtoa_r+0x84>
 801032a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801032e:	2800      	cmp	r0, #0
 8010330:	f000 8542 	beq.w	8010db8 <_dtoa_r+0xb08>
 8010334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010336:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80105e4 <_dtoa_r+0x334>
 801033a:	2b00      	cmp	r3, #0
 801033c:	f000 8544 	beq.w	8010dc8 <_dtoa_r+0xb18>
 8010340:	f10b 0303 	add.w	r3, fp, #3
 8010344:	f000 bd3e 	b.w	8010dc4 <_dtoa_r+0xb14>
 8010348:	e9dd 6700 	ldrd	r6, r7, [sp]
 801034c:	2200      	movs	r2, #0
 801034e:	2300      	movs	r3, #0
 8010350:	4630      	mov	r0, r6
 8010352:	4639      	mov	r1, r7
 8010354:	f7f0 fbd0 	bl	8000af8 <__aeabi_dcmpeq>
 8010358:	4681      	mov	r9, r0
 801035a:	b168      	cbz	r0, 8010378 <_dtoa_r+0xc8>
 801035c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801035e:	2301      	movs	r3, #1
 8010360:	6013      	str	r3, [r2, #0]
 8010362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010364:	2b00      	cmp	r3, #0
 8010366:	f000 8524 	beq.w	8010db2 <_dtoa_r+0xb02>
 801036a:	4b9a      	ldr	r3, [pc, #616]	; (80105d4 <_dtoa_r+0x324>)
 801036c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801036e:	f103 3bff 	add.w	fp, r3, #4294967295
 8010372:	6013      	str	r3, [r2, #0]
 8010374:	f000 bd28 	b.w	8010dc8 <_dtoa_r+0xb18>
 8010378:	aa14      	add	r2, sp, #80	; 0x50
 801037a:	a915      	add	r1, sp, #84	; 0x54
 801037c:	ec47 6b10 	vmov	d0, r6, r7
 8010380:	4620      	mov	r0, r4
 8010382:	f001 fdeb 	bl	8011f5c <__d2b>
 8010386:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801038a:	9004      	str	r0, [sp, #16]
 801038c:	2d00      	cmp	r5, #0
 801038e:	d07c      	beq.n	801048a <_dtoa_r+0x1da>
 8010390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010394:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010398:	46b2      	mov	sl, r6
 801039a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801039e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80103a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80103a6:	2200      	movs	r2, #0
 80103a8:	4b8b      	ldr	r3, [pc, #556]	; (80105d8 <_dtoa_r+0x328>)
 80103aa:	4650      	mov	r0, sl
 80103ac:	4659      	mov	r1, fp
 80103ae:	f7ef ff83 	bl	80002b8 <__aeabi_dsub>
 80103b2:	a381      	add	r3, pc, #516	; (adr r3, 80105b8 <_dtoa_r+0x308>)
 80103b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b8:	f7f0 f936 	bl	8000628 <__aeabi_dmul>
 80103bc:	a380      	add	r3, pc, #512	; (adr r3, 80105c0 <_dtoa_r+0x310>)
 80103be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c2:	f7ef ff7b 	bl	80002bc <__adddf3>
 80103c6:	4606      	mov	r6, r0
 80103c8:	4628      	mov	r0, r5
 80103ca:	460f      	mov	r7, r1
 80103cc:	f7f0 f8c2 	bl	8000554 <__aeabi_i2d>
 80103d0:	a37d      	add	r3, pc, #500	; (adr r3, 80105c8 <_dtoa_r+0x318>)
 80103d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d6:	f7f0 f927 	bl	8000628 <__aeabi_dmul>
 80103da:	4602      	mov	r2, r0
 80103dc:	460b      	mov	r3, r1
 80103de:	4630      	mov	r0, r6
 80103e0:	4639      	mov	r1, r7
 80103e2:	f7ef ff6b 	bl	80002bc <__adddf3>
 80103e6:	4606      	mov	r6, r0
 80103e8:	460f      	mov	r7, r1
 80103ea:	f7f0 fbcd 	bl	8000b88 <__aeabi_d2iz>
 80103ee:	2200      	movs	r2, #0
 80103f0:	4682      	mov	sl, r0
 80103f2:	2300      	movs	r3, #0
 80103f4:	4630      	mov	r0, r6
 80103f6:	4639      	mov	r1, r7
 80103f8:	f7f0 fb88 	bl	8000b0c <__aeabi_dcmplt>
 80103fc:	b148      	cbz	r0, 8010412 <_dtoa_r+0x162>
 80103fe:	4650      	mov	r0, sl
 8010400:	f7f0 f8a8 	bl	8000554 <__aeabi_i2d>
 8010404:	4632      	mov	r2, r6
 8010406:	463b      	mov	r3, r7
 8010408:	f7f0 fb76 	bl	8000af8 <__aeabi_dcmpeq>
 801040c:	b908      	cbnz	r0, 8010412 <_dtoa_r+0x162>
 801040e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010412:	f1ba 0f16 	cmp.w	sl, #22
 8010416:	d859      	bhi.n	80104cc <_dtoa_r+0x21c>
 8010418:	4970      	ldr	r1, [pc, #448]	; (80105dc <_dtoa_r+0x32c>)
 801041a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801041e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010426:	f7f0 fb8f 	bl	8000b48 <__aeabi_dcmpgt>
 801042a:	2800      	cmp	r0, #0
 801042c:	d050      	beq.n	80104d0 <_dtoa_r+0x220>
 801042e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010432:	2300      	movs	r3, #0
 8010434:	930f      	str	r3, [sp, #60]	; 0x3c
 8010436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010438:	1b5d      	subs	r5, r3, r5
 801043a:	f1b5 0801 	subs.w	r8, r5, #1
 801043e:	bf49      	itett	mi
 8010440:	f1c5 0301 	rsbmi	r3, r5, #1
 8010444:	2300      	movpl	r3, #0
 8010446:	9305      	strmi	r3, [sp, #20]
 8010448:	f04f 0800 	movmi.w	r8, #0
 801044c:	bf58      	it	pl
 801044e:	9305      	strpl	r3, [sp, #20]
 8010450:	f1ba 0f00 	cmp.w	sl, #0
 8010454:	db3e      	blt.n	80104d4 <_dtoa_r+0x224>
 8010456:	2300      	movs	r3, #0
 8010458:	44d0      	add	r8, sl
 801045a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801045e:	9307      	str	r3, [sp, #28]
 8010460:	9b06      	ldr	r3, [sp, #24]
 8010462:	2b09      	cmp	r3, #9
 8010464:	f200 8090 	bhi.w	8010588 <_dtoa_r+0x2d8>
 8010468:	2b05      	cmp	r3, #5
 801046a:	bfc4      	itt	gt
 801046c:	3b04      	subgt	r3, #4
 801046e:	9306      	strgt	r3, [sp, #24]
 8010470:	9b06      	ldr	r3, [sp, #24]
 8010472:	f1a3 0302 	sub.w	r3, r3, #2
 8010476:	bfcc      	ite	gt
 8010478:	2500      	movgt	r5, #0
 801047a:	2501      	movle	r5, #1
 801047c:	2b03      	cmp	r3, #3
 801047e:	f200 808f 	bhi.w	80105a0 <_dtoa_r+0x2f0>
 8010482:	e8df f003 	tbb	[pc, r3]
 8010486:	7f7d      	.short	0x7f7d
 8010488:	7131      	.short	0x7131
 801048a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801048e:	441d      	add	r5, r3
 8010490:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010494:	2820      	cmp	r0, #32
 8010496:	dd13      	ble.n	80104c0 <_dtoa_r+0x210>
 8010498:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801049c:	9b00      	ldr	r3, [sp, #0]
 801049e:	fa08 f800 	lsl.w	r8, r8, r0
 80104a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80104a6:	fa23 f000 	lsr.w	r0, r3, r0
 80104aa:	ea48 0000 	orr.w	r0, r8, r0
 80104ae:	f7f0 f841 	bl	8000534 <__aeabi_ui2d>
 80104b2:	2301      	movs	r3, #1
 80104b4:	4682      	mov	sl, r0
 80104b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80104ba:	3d01      	subs	r5, #1
 80104bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80104be:	e772      	b.n	80103a6 <_dtoa_r+0xf6>
 80104c0:	9b00      	ldr	r3, [sp, #0]
 80104c2:	f1c0 0020 	rsb	r0, r0, #32
 80104c6:	fa03 f000 	lsl.w	r0, r3, r0
 80104ca:	e7f0      	b.n	80104ae <_dtoa_r+0x1fe>
 80104cc:	2301      	movs	r3, #1
 80104ce:	e7b1      	b.n	8010434 <_dtoa_r+0x184>
 80104d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80104d2:	e7b0      	b.n	8010436 <_dtoa_r+0x186>
 80104d4:	9b05      	ldr	r3, [sp, #20]
 80104d6:	eba3 030a 	sub.w	r3, r3, sl
 80104da:	9305      	str	r3, [sp, #20]
 80104dc:	f1ca 0300 	rsb	r3, sl, #0
 80104e0:	9307      	str	r3, [sp, #28]
 80104e2:	2300      	movs	r3, #0
 80104e4:	930e      	str	r3, [sp, #56]	; 0x38
 80104e6:	e7bb      	b.n	8010460 <_dtoa_r+0x1b0>
 80104e8:	2301      	movs	r3, #1
 80104ea:	930a      	str	r3, [sp, #40]	; 0x28
 80104ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	dd59      	ble.n	80105a6 <_dtoa_r+0x2f6>
 80104f2:	9302      	str	r3, [sp, #8]
 80104f4:	4699      	mov	r9, r3
 80104f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104f8:	2200      	movs	r2, #0
 80104fa:	6072      	str	r2, [r6, #4]
 80104fc:	2204      	movs	r2, #4
 80104fe:	f102 0014 	add.w	r0, r2, #20
 8010502:	4298      	cmp	r0, r3
 8010504:	6871      	ldr	r1, [r6, #4]
 8010506:	d953      	bls.n	80105b0 <_dtoa_r+0x300>
 8010508:	4620      	mov	r0, r4
 801050a:	f001 f9e6 	bl	80118da <_Balloc>
 801050e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010510:	6030      	str	r0, [r6, #0]
 8010512:	f1b9 0f0e 	cmp.w	r9, #14
 8010516:	f8d3 b000 	ldr.w	fp, [r3]
 801051a:	f200 80e6 	bhi.w	80106ea <_dtoa_r+0x43a>
 801051e:	2d00      	cmp	r5, #0
 8010520:	f000 80e3 	beq.w	80106ea <_dtoa_r+0x43a>
 8010524:	ed9d 7b00 	vldr	d7, [sp]
 8010528:	f1ba 0f00 	cmp.w	sl, #0
 801052c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010530:	dd74      	ble.n	801061c <_dtoa_r+0x36c>
 8010532:	4a2a      	ldr	r2, [pc, #168]	; (80105dc <_dtoa_r+0x32c>)
 8010534:	f00a 030f 	and.w	r3, sl, #15
 8010538:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801053c:	ed93 7b00 	vldr	d7, [r3]
 8010540:	ea4f 162a 	mov.w	r6, sl, asr #4
 8010544:	06f0      	lsls	r0, r6, #27
 8010546:	ed8d 7b08 	vstr	d7, [sp, #32]
 801054a:	d565      	bpl.n	8010618 <_dtoa_r+0x368>
 801054c:	4b24      	ldr	r3, [pc, #144]	; (80105e0 <_dtoa_r+0x330>)
 801054e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010552:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010556:	f7f0 f991 	bl	800087c <__aeabi_ddiv>
 801055a:	e9cd 0100 	strd	r0, r1, [sp]
 801055e:	f006 060f 	and.w	r6, r6, #15
 8010562:	2503      	movs	r5, #3
 8010564:	4f1e      	ldr	r7, [pc, #120]	; (80105e0 <_dtoa_r+0x330>)
 8010566:	e04c      	b.n	8010602 <_dtoa_r+0x352>
 8010568:	2301      	movs	r3, #1
 801056a:	930a      	str	r3, [sp, #40]	; 0x28
 801056c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801056e:	4453      	add	r3, sl
 8010570:	f103 0901 	add.w	r9, r3, #1
 8010574:	9302      	str	r3, [sp, #8]
 8010576:	464b      	mov	r3, r9
 8010578:	2b01      	cmp	r3, #1
 801057a:	bfb8      	it	lt
 801057c:	2301      	movlt	r3, #1
 801057e:	e7ba      	b.n	80104f6 <_dtoa_r+0x246>
 8010580:	2300      	movs	r3, #0
 8010582:	e7b2      	b.n	80104ea <_dtoa_r+0x23a>
 8010584:	2300      	movs	r3, #0
 8010586:	e7f0      	b.n	801056a <_dtoa_r+0x2ba>
 8010588:	2501      	movs	r5, #1
 801058a:	2300      	movs	r3, #0
 801058c:	9306      	str	r3, [sp, #24]
 801058e:	950a      	str	r5, [sp, #40]	; 0x28
 8010590:	f04f 33ff 	mov.w	r3, #4294967295
 8010594:	9302      	str	r3, [sp, #8]
 8010596:	4699      	mov	r9, r3
 8010598:	2200      	movs	r2, #0
 801059a:	2312      	movs	r3, #18
 801059c:	920b      	str	r2, [sp, #44]	; 0x2c
 801059e:	e7aa      	b.n	80104f6 <_dtoa_r+0x246>
 80105a0:	2301      	movs	r3, #1
 80105a2:	930a      	str	r3, [sp, #40]	; 0x28
 80105a4:	e7f4      	b.n	8010590 <_dtoa_r+0x2e0>
 80105a6:	2301      	movs	r3, #1
 80105a8:	9302      	str	r3, [sp, #8]
 80105aa:	4699      	mov	r9, r3
 80105ac:	461a      	mov	r2, r3
 80105ae:	e7f5      	b.n	801059c <_dtoa_r+0x2ec>
 80105b0:	3101      	adds	r1, #1
 80105b2:	6071      	str	r1, [r6, #4]
 80105b4:	0052      	lsls	r2, r2, #1
 80105b6:	e7a2      	b.n	80104fe <_dtoa_r+0x24e>
 80105b8:	636f4361 	.word	0x636f4361
 80105bc:	3fd287a7 	.word	0x3fd287a7
 80105c0:	8b60c8b3 	.word	0x8b60c8b3
 80105c4:	3fc68a28 	.word	0x3fc68a28
 80105c8:	509f79fb 	.word	0x509f79fb
 80105cc:	3fd34413 	.word	0x3fd34413
 80105d0:	7ff00000 	.word	0x7ff00000
 80105d4:	08013904 	.word	0x08013904
 80105d8:	3ff80000 	.word	0x3ff80000
 80105dc:	08013808 	.word	0x08013808
 80105e0:	080137e0 	.word	0x080137e0
 80105e4:	08013769 	.word	0x08013769
 80105e8:	07f1      	lsls	r1, r6, #31
 80105ea:	d508      	bpl.n	80105fe <_dtoa_r+0x34e>
 80105ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80105f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105f4:	f7f0 f818 	bl	8000628 <__aeabi_dmul>
 80105f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80105fc:	3501      	adds	r5, #1
 80105fe:	1076      	asrs	r6, r6, #1
 8010600:	3708      	adds	r7, #8
 8010602:	2e00      	cmp	r6, #0
 8010604:	d1f0      	bne.n	80105e8 <_dtoa_r+0x338>
 8010606:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801060a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801060e:	f7f0 f935 	bl	800087c <__aeabi_ddiv>
 8010612:	e9cd 0100 	strd	r0, r1, [sp]
 8010616:	e01a      	b.n	801064e <_dtoa_r+0x39e>
 8010618:	2502      	movs	r5, #2
 801061a:	e7a3      	b.n	8010564 <_dtoa_r+0x2b4>
 801061c:	f000 80a0 	beq.w	8010760 <_dtoa_r+0x4b0>
 8010620:	f1ca 0600 	rsb	r6, sl, #0
 8010624:	4b9f      	ldr	r3, [pc, #636]	; (80108a4 <_dtoa_r+0x5f4>)
 8010626:	4fa0      	ldr	r7, [pc, #640]	; (80108a8 <_dtoa_r+0x5f8>)
 8010628:	f006 020f 	and.w	r2, r6, #15
 801062c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010638:	f7ef fff6 	bl	8000628 <__aeabi_dmul>
 801063c:	e9cd 0100 	strd	r0, r1, [sp]
 8010640:	1136      	asrs	r6, r6, #4
 8010642:	2300      	movs	r3, #0
 8010644:	2502      	movs	r5, #2
 8010646:	2e00      	cmp	r6, #0
 8010648:	d17f      	bne.n	801074a <_dtoa_r+0x49a>
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1e1      	bne.n	8010612 <_dtoa_r+0x362>
 801064e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010650:	2b00      	cmp	r3, #0
 8010652:	f000 8087 	beq.w	8010764 <_dtoa_r+0x4b4>
 8010656:	e9dd 6700 	ldrd	r6, r7, [sp]
 801065a:	2200      	movs	r2, #0
 801065c:	4b93      	ldr	r3, [pc, #588]	; (80108ac <_dtoa_r+0x5fc>)
 801065e:	4630      	mov	r0, r6
 8010660:	4639      	mov	r1, r7
 8010662:	f7f0 fa53 	bl	8000b0c <__aeabi_dcmplt>
 8010666:	2800      	cmp	r0, #0
 8010668:	d07c      	beq.n	8010764 <_dtoa_r+0x4b4>
 801066a:	f1b9 0f00 	cmp.w	r9, #0
 801066e:	d079      	beq.n	8010764 <_dtoa_r+0x4b4>
 8010670:	9b02      	ldr	r3, [sp, #8]
 8010672:	2b00      	cmp	r3, #0
 8010674:	dd35      	ble.n	80106e2 <_dtoa_r+0x432>
 8010676:	f10a 33ff 	add.w	r3, sl, #4294967295
 801067a:	9308      	str	r3, [sp, #32]
 801067c:	4639      	mov	r1, r7
 801067e:	2200      	movs	r2, #0
 8010680:	4b8b      	ldr	r3, [pc, #556]	; (80108b0 <_dtoa_r+0x600>)
 8010682:	4630      	mov	r0, r6
 8010684:	f7ef ffd0 	bl	8000628 <__aeabi_dmul>
 8010688:	e9cd 0100 	strd	r0, r1, [sp]
 801068c:	9f02      	ldr	r7, [sp, #8]
 801068e:	3501      	adds	r5, #1
 8010690:	4628      	mov	r0, r5
 8010692:	f7ef ff5f 	bl	8000554 <__aeabi_i2d>
 8010696:	e9dd 2300 	ldrd	r2, r3, [sp]
 801069a:	f7ef ffc5 	bl	8000628 <__aeabi_dmul>
 801069e:	2200      	movs	r2, #0
 80106a0:	4b84      	ldr	r3, [pc, #528]	; (80108b4 <_dtoa_r+0x604>)
 80106a2:	f7ef fe0b 	bl	80002bc <__adddf3>
 80106a6:	4605      	mov	r5, r0
 80106a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80106ac:	2f00      	cmp	r7, #0
 80106ae:	d15d      	bne.n	801076c <_dtoa_r+0x4bc>
 80106b0:	2200      	movs	r2, #0
 80106b2:	4b81      	ldr	r3, [pc, #516]	; (80108b8 <_dtoa_r+0x608>)
 80106b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106b8:	f7ef fdfe 	bl	80002b8 <__aeabi_dsub>
 80106bc:	462a      	mov	r2, r5
 80106be:	4633      	mov	r3, r6
 80106c0:	e9cd 0100 	strd	r0, r1, [sp]
 80106c4:	f7f0 fa40 	bl	8000b48 <__aeabi_dcmpgt>
 80106c8:	2800      	cmp	r0, #0
 80106ca:	f040 8288 	bne.w	8010bde <_dtoa_r+0x92e>
 80106ce:	462a      	mov	r2, r5
 80106d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80106d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106d8:	f7f0 fa18 	bl	8000b0c <__aeabi_dcmplt>
 80106dc:	2800      	cmp	r0, #0
 80106de:	f040 827c 	bne.w	8010bda <_dtoa_r+0x92a>
 80106e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80106e6:	e9cd 2300 	strd	r2, r3, [sp]
 80106ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f2c0 8150 	blt.w	8010992 <_dtoa_r+0x6e2>
 80106f2:	f1ba 0f0e 	cmp.w	sl, #14
 80106f6:	f300 814c 	bgt.w	8010992 <_dtoa_r+0x6e2>
 80106fa:	4b6a      	ldr	r3, [pc, #424]	; (80108a4 <_dtoa_r+0x5f4>)
 80106fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010700:	ed93 7b00 	vldr	d7, [r3]
 8010704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010706:	2b00      	cmp	r3, #0
 8010708:	ed8d 7b02 	vstr	d7, [sp, #8]
 801070c:	f280 80d8 	bge.w	80108c0 <_dtoa_r+0x610>
 8010710:	f1b9 0f00 	cmp.w	r9, #0
 8010714:	f300 80d4 	bgt.w	80108c0 <_dtoa_r+0x610>
 8010718:	f040 825e 	bne.w	8010bd8 <_dtoa_r+0x928>
 801071c:	2200      	movs	r2, #0
 801071e:	4b66      	ldr	r3, [pc, #408]	; (80108b8 <_dtoa_r+0x608>)
 8010720:	ec51 0b17 	vmov	r0, r1, d7
 8010724:	f7ef ff80 	bl	8000628 <__aeabi_dmul>
 8010728:	e9dd 2300 	ldrd	r2, r3, [sp]
 801072c:	f7f0 fa02 	bl	8000b34 <__aeabi_dcmpge>
 8010730:	464f      	mov	r7, r9
 8010732:	464e      	mov	r6, r9
 8010734:	2800      	cmp	r0, #0
 8010736:	f040 8234 	bne.w	8010ba2 <_dtoa_r+0x8f2>
 801073a:	2331      	movs	r3, #49	; 0x31
 801073c:	f10b 0501 	add.w	r5, fp, #1
 8010740:	f88b 3000 	strb.w	r3, [fp]
 8010744:	f10a 0a01 	add.w	sl, sl, #1
 8010748:	e22f      	b.n	8010baa <_dtoa_r+0x8fa>
 801074a:	07f2      	lsls	r2, r6, #31
 801074c:	d505      	bpl.n	801075a <_dtoa_r+0x4aa>
 801074e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010752:	f7ef ff69 	bl	8000628 <__aeabi_dmul>
 8010756:	3501      	adds	r5, #1
 8010758:	2301      	movs	r3, #1
 801075a:	1076      	asrs	r6, r6, #1
 801075c:	3708      	adds	r7, #8
 801075e:	e772      	b.n	8010646 <_dtoa_r+0x396>
 8010760:	2502      	movs	r5, #2
 8010762:	e774      	b.n	801064e <_dtoa_r+0x39e>
 8010764:	f8cd a020 	str.w	sl, [sp, #32]
 8010768:	464f      	mov	r7, r9
 801076a:	e791      	b.n	8010690 <_dtoa_r+0x3e0>
 801076c:	4b4d      	ldr	r3, [pc, #308]	; (80108a4 <_dtoa_r+0x5f4>)
 801076e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010772:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010778:	2b00      	cmp	r3, #0
 801077a:	d047      	beq.n	801080c <_dtoa_r+0x55c>
 801077c:	4602      	mov	r2, r0
 801077e:	460b      	mov	r3, r1
 8010780:	2000      	movs	r0, #0
 8010782:	494e      	ldr	r1, [pc, #312]	; (80108bc <_dtoa_r+0x60c>)
 8010784:	f7f0 f87a 	bl	800087c <__aeabi_ddiv>
 8010788:	462a      	mov	r2, r5
 801078a:	4633      	mov	r3, r6
 801078c:	f7ef fd94 	bl	80002b8 <__aeabi_dsub>
 8010790:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010794:	465d      	mov	r5, fp
 8010796:	e9dd 0100 	ldrd	r0, r1, [sp]
 801079a:	f7f0 f9f5 	bl	8000b88 <__aeabi_d2iz>
 801079e:	4606      	mov	r6, r0
 80107a0:	f7ef fed8 	bl	8000554 <__aeabi_i2d>
 80107a4:	4602      	mov	r2, r0
 80107a6:	460b      	mov	r3, r1
 80107a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107ac:	f7ef fd84 	bl	80002b8 <__aeabi_dsub>
 80107b0:	3630      	adds	r6, #48	; 0x30
 80107b2:	f805 6b01 	strb.w	r6, [r5], #1
 80107b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80107ba:	e9cd 0100 	strd	r0, r1, [sp]
 80107be:	f7f0 f9a5 	bl	8000b0c <__aeabi_dcmplt>
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d163      	bne.n	801088e <_dtoa_r+0x5de>
 80107c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107ca:	2000      	movs	r0, #0
 80107cc:	4937      	ldr	r1, [pc, #220]	; (80108ac <_dtoa_r+0x5fc>)
 80107ce:	f7ef fd73 	bl	80002b8 <__aeabi_dsub>
 80107d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80107d6:	f7f0 f999 	bl	8000b0c <__aeabi_dcmplt>
 80107da:	2800      	cmp	r0, #0
 80107dc:	f040 80b7 	bne.w	801094e <_dtoa_r+0x69e>
 80107e0:	eba5 030b 	sub.w	r3, r5, fp
 80107e4:	429f      	cmp	r7, r3
 80107e6:	f77f af7c 	ble.w	80106e2 <_dtoa_r+0x432>
 80107ea:	2200      	movs	r2, #0
 80107ec:	4b30      	ldr	r3, [pc, #192]	; (80108b0 <_dtoa_r+0x600>)
 80107ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80107f2:	f7ef ff19 	bl	8000628 <__aeabi_dmul>
 80107f6:	2200      	movs	r2, #0
 80107f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80107fc:	4b2c      	ldr	r3, [pc, #176]	; (80108b0 <_dtoa_r+0x600>)
 80107fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010802:	f7ef ff11 	bl	8000628 <__aeabi_dmul>
 8010806:	e9cd 0100 	strd	r0, r1, [sp]
 801080a:	e7c4      	b.n	8010796 <_dtoa_r+0x4e6>
 801080c:	462a      	mov	r2, r5
 801080e:	4633      	mov	r3, r6
 8010810:	f7ef ff0a 	bl	8000628 <__aeabi_dmul>
 8010814:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010818:	eb0b 0507 	add.w	r5, fp, r7
 801081c:	465e      	mov	r6, fp
 801081e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010822:	f7f0 f9b1 	bl	8000b88 <__aeabi_d2iz>
 8010826:	4607      	mov	r7, r0
 8010828:	f7ef fe94 	bl	8000554 <__aeabi_i2d>
 801082c:	3730      	adds	r7, #48	; 0x30
 801082e:	4602      	mov	r2, r0
 8010830:	460b      	mov	r3, r1
 8010832:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010836:	f7ef fd3f 	bl	80002b8 <__aeabi_dsub>
 801083a:	f806 7b01 	strb.w	r7, [r6], #1
 801083e:	42ae      	cmp	r6, r5
 8010840:	e9cd 0100 	strd	r0, r1, [sp]
 8010844:	f04f 0200 	mov.w	r2, #0
 8010848:	d126      	bne.n	8010898 <_dtoa_r+0x5e8>
 801084a:	4b1c      	ldr	r3, [pc, #112]	; (80108bc <_dtoa_r+0x60c>)
 801084c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010850:	f7ef fd34 	bl	80002bc <__adddf3>
 8010854:	4602      	mov	r2, r0
 8010856:	460b      	mov	r3, r1
 8010858:	e9dd 0100 	ldrd	r0, r1, [sp]
 801085c:	f7f0 f974 	bl	8000b48 <__aeabi_dcmpgt>
 8010860:	2800      	cmp	r0, #0
 8010862:	d174      	bne.n	801094e <_dtoa_r+0x69e>
 8010864:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010868:	2000      	movs	r0, #0
 801086a:	4914      	ldr	r1, [pc, #80]	; (80108bc <_dtoa_r+0x60c>)
 801086c:	f7ef fd24 	bl	80002b8 <__aeabi_dsub>
 8010870:	4602      	mov	r2, r0
 8010872:	460b      	mov	r3, r1
 8010874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010878:	f7f0 f948 	bl	8000b0c <__aeabi_dcmplt>
 801087c:	2800      	cmp	r0, #0
 801087e:	f43f af30 	beq.w	80106e2 <_dtoa_r+0x432>
 8010882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010886:	2b30      	cmp	r3, #48	; 0x30
 8010888:	f105 32ff 	add.w	r2, r5, #4294967295
 801088c:	d002      	beq.n	8010894 <_dtoa_r+0x5e4>
 801088e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010892:	e04a      	b.n	801092a <_dtoa_r+0x67a>
 8010894:	4615      	mov	r5, r2
 8010896:	e7f4      	b.n	8010882 <_dtoa_r+0x5d2>
 8010898:	4b05      	ldr	r3, [pc, #20]	; (80108b0 <_dtoa_r+0x600>)
 801089a:	f7ef fec5 	bl	8000628 <__aeabi_dmul>
 801089e:	e9cd 0100 	strd	r0, r1, [sp]
 80108a2:	e7bc      	b.n	801081e <_dtoa_r+0x56e>
 80108a4:	08013808 	.word	0x08013808
 80108a8:	080137e0 	.word	0x080137e0
 80108ac:	3ff00000 	.word	0x3ff00000
 80108b0:	40240000 	.word	0x40240000
 80108b4:	401c0000 	.word	0x401c0000
 80108b8:	40140000 	.word	0x40140000
 80108bc:	3fe00000 	.word	0x3fe00000
 80108c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80108c4:	465d      	mov	r5, fp
 80108c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80108ca:	4630      	mov	r0, r6
 80108cc:	4639      	mov	r1, r7
 80108ce:	f7ef ffd5 	bl	800087c <__aeabi_ddiv>
 80108d2:	f7f0 f959 	bl	8000b88 <__aeabi_d2iz>
 80108d6:	4680      	mov	r8, r0
 80108d8:	f7ef fe3c 	bl	8000554 <__aeabi_i2d>
 80108dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80108e0:	f7ef fea2 	bl	8000628 <__aeabi_dmul>
 80108e4:	4602      	mov	r2, r0
 80108e6:	460b      	mov	r3, r1
 80108e8:	4630      	mov	r0, r6
 80108ea:	4639      	mov	r1, r7
 80108ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80108f0:	f7ef fce2 	bl	80002b8 <__aeabi_dsub>
 80108f4:	f805 6b01 	strb.w	r6, [r5], #1
 80108f8:	eba5 060b 	sub.w	r6, r5, fp
 80108fc:	45b1      	cmp	r9, r6
 80108fe:	4602      	mov	r2, r0
 8010900:	460b      	mov	r3, r1
 8010902:	d139      	bne.n	8010978 <_dtoa_r+0x6c8>
 8010904:	f7ef fcda 	bl	80002bc <__adddf3>
 8010908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801090c:	4606      	mov	r6, r0
 801090e:	460f      	mov	r7, r1
 8010910:	f7f0 f91a 	bl	8000b48 <__aeabi_dcmpgt>
 8010914:	b9c8      	cbnz	r0, 801094a <_dtoa_r+0x69a>
 8010916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801091a:	4630      	mov	r0, r6
 801091c:	4639      	mov	r1, r7
 801091e:	f7f0 f8eb 	bl	8000af8 <__aeabi_dcmpeq>
 8010922:	b110      	cbz	r0, 801092a <_dtoa_r+0x67a>
 8010924:	f018 0f01 	tst.w	r8, #1
 8010928:	d10f      	bne.n	801094a <_dtoa_r+0x69a>
 801092a:	9904      	ldr	r1, [sp, #16]
 801092c:	4620      	mov	r0, r4
 801092e:	f001 f808 	bl	8011942 <_Bfree>
 8010932:	2300      	movs	r3, #0
 8010934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010936:	702b      	strb	r3, [r5, #0]
 8010938:	f10a 0301 	add.w	r3, sl, #1
 801093c:	6013      	str	r3, [r2, #0]
 801093e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 8241 	beq.w	8010dc8 <_dtoa_r+0xb18>
 8010946:	601d      	str	r5, [r3, #0]
 8010948:	e23e      	b.n	8010dc8 <_dtoa_r+0xb18>
 801094a:	f8cd a020 	str.w	sl, [sp, #32]
 801094e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010952:	2a39      	cmp	r2, #57	; 0x39
 8010954:	f105 33ff 	add.w	r3, r5, #4294967295
 8010958:	d108      	bne.n	801096c <_dtoa_r+0x6bc>
 801095a:	459b      	cmp	fp, r3
 801095c:	d10a      	bne.n	8010974 <_dtoa_r+0x6c4>
 801095e:	9b08      	ldr	r3, [sp, #32]
 8010960:	3301      	adds	r3, #1
 8010962:	9308      	str	r3, [sp, #32]
 8010964:	2330      	movs	r3, #48	; 0x30
 8010966:	f88b 3000 	strb.w	r3, [fp]
 801096a:	465b      	mov	r3, fp
 801096c:	781a      	ldrb	r2, [r3, #0]
 801096e:	3201      	adds	r2, #1
 8010970:	701a      	strb	r2, [r3, #0]
 8010972:	e78c      	b.n	801088e <_dtoa_r+0x5de>
 8010974:	461d      	mov	r5, r3
 8010976:	e7ea      	b.n	801094e <_dtoa_r+0x69e>
 8010978:	2200      	movs	r2, #0
 801097a:	4b9b      	ldr	r3, [pc, #620]	; (8010be8 <_dtoa_r+0x938>)
 801097c:	f7ef fe54 	bl	8000628 <__aeabi_dmul>
 8010980:	2200      	movs	r2, #0
 8010982:	2300      	movs	r3, #0
 8010984:	4606      	mov	r6, r0
 8010986:	460f      	mov	r7, r1
 8010988:	f7f0 f8b6 	bl	8000af8 <__aeabi_dcmpeq>
 801098c:	2800      	cmp	r0, #0
 801098e:	d09a      	beq.n	80108c6 <_dtoa_r+0x616>
 8010990:	e7cb      	b.n	801092a <_dtoa_r+0x67a>
 8010992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010994:	2a00      	cmp	r2, #0
 8010996:	f000 808b 	beq.w	8010ab0 <_dtoa_r+0x800>
 801099a:	9a06      	ldr	r2, [sp, #24]
 801099c:	2a01      	cmp	r2, #1
 801099e:	dc6e      	bgt.n	8010a7e <_dtoa_r+0x7ce>
 80109a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80109a2:	2a00      	cmp	r2, #0
 80109a4:	d067      	beq.n	8010a76 <_dtoa_r+0x7c6>
 80109a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80109aa:	9f07      	ldr	r7, [sp, #28]
 80109ac:	9d05      	ldr	r5, [sp, #20]
 80109ae:	9a05      	ldr	r2, [sp, #20]
 80109b0:	2101      	movs	r1, #1
 80109b2:	441a      	add	r2, r3
 80109b4:	4620      	mov	r0, r4
 80109b6:	9205      	str	r2, [sp, #20]
 80109b8:	4498      	add	r8, r3
 80109ba:	f001 f8a0 	bl	8011afe <__i2b>
 80109be:	4606      	mov	r6, r0
 80109c0:	2d00      	cmp	r5, #0
 80109c2:	dd0c      	ble.n	80109de <_dtoa_r+0x72e>
 80109c4:	f1b8 0f00 	cmp.w	r8, #0
 80109c8:	dd09      	ble.n	80109de <_dtoa_r+0x72e>
 80109ca:	4545      	cmp	r5, r8
 80109cc:	9a05      	ldr	r2, [sp, #20]
 80109ce:	462b      	mov	r3, r5
 80109d0:	bfa8      	it	ge
 80109d2:	4643      	movge	r3, r8
 80109d4:	1ad2      	subs	r2, r2, r3
 80109d6:	9205      	str	r2, [sp, #20]
 80109d8:	1aed      	subs	r5, r5, r3
 80109da:	eba8 0803 	sub.w	r8, r8, r3
 80109de:	9b07      	ldr	r3, [sp, #28]
 80109e0:	b1eb      	cbz	r3, 8010a1e <_dtoa_r+0x76e>
 80109e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d067      	beq.n	8010ab8 <_dtoa_r+0x808>
 80109e8:	b18f      	cbz	r7, 8010a0e <_dtoa_r+0x75e>
 80109ea:	4631      	mov	r1, r6
 80109ec:	463a      	mov	r2, r7
 80109ee:	4620      	mov	r0, r4
 80109f0:	f001 f924 	bl	8011c3c <__pow5mult>
 80109f4:	9a04      	ldr	r2, [sp, #16]
 80109f6:	4601      	mov	r1, r0
 80109f8:	4606      	mov	r6, r0
 80109fa:	4620      	mov	r0, r4
 80109fc:	f001 f888 	bl	8011b10 <__multiply>
 8010a00:	9904      	ldr	r1, [sp, #16]
 8010a02:	9008      	str	r0, [sp, #32]
 8010a04:	4620      	mov	r0, r4
 8010a06:	f000 ff9c 	bl	8011942 <_Bfree>
 8010a0a:	9b08      	ldr	r3, [sp, #32]
 8010a0c:	9304      	str	r3, [sp, #16]
 8010a0e:	9b07      	ldr	r3, [sp, #28]
 8010a10:	1bda      	subs	r2, r3, r7
 8010a12:	d004      	beq.n	8010a1e <_dtoa_r+0x76e>
 8010a14:	9904      	ldr	r1, [sp, #16]
 8010a16:	4620      	mov	r0, r4
 8010a18:	f001 f910 	bl	8011c3c <__pow5mult>
 8010a1c:	9004      	str	r0, [sp, #16]
 8010a1e:	2101      	movs	r1, #1
 8010a20:	4620      	mov	r0, r4
 8010a22:	f001 f86c 	bl	8011afe <__i2b>
 8010a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a28:	4607      	mov	r7, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f000 81d0 	beq.w	8010dd0 <_dtoa_r+0xb20>
 8010a30:	461a      	mov	r2, r3
 8010a32:	4601      	mov	r1, r0
 8010a34:	4620      	mov	r0, r4
 8010a36:	f001 f901 	bl	8011c3c <__pow5mult>
 8010a3a:	9b06      	ldr	r3, [sp, #24]
 8010a3c:	2b01      	cmp	r3, #1
 8010a3e:	4607      	mov	r7, r0
 8010a40:	dc40      	bgt.n	8010ac4 <_dtoa_r+0x814>
 8010a42:	9b00      	ldr	r3, [sp, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d139      	bne.n	8010abc <_dtoa_r+0x80c>
 8010a48:	9b01      	ldr	r3, [sp, #4]
 8010a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d136      	bne.n	8010ac0 <_dtoa_r+0x810>
 8010a52:	9b01      	ldr	r3, [sp, #4]
 8010a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010a58:	0d1b      	lsrs	r3, r3, #20
 8010a5a:	051b      	lsls	r3, r3, #20
 8010a5c:	b12b      	cbz	r3, 8010a6a <_dtoa_r+0x7ba>
 8010a5e:	9b05      	ldr	r3, [sp, #20]
 8010a60:	3301      	adds	r3, #1
 8010a62:	9305      	str	r3, [sp, #20]
 8010a64:	f108 0801 	add.w	r8, r8, #1
 8010a68:	2301      	movs	r3, #1
 8010a6a:	9307      	str	r3, [sp, #28]
 8010a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d12a      	bne.n	8010ac8 <_dtoa_r+0x818>
 8010a72:	2001      	movs	r0, #1
 8010a74:	e030      	b.n	8010ad8 <_dtoa_r+0x828>
 8010a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a7c:	e795      	b.n	80109aa <_dtoa_r+0x6fa>
 8010a7e:	9b07      	ldr	r3, [sp, #28]
 8010a80:	f109 37ff 	add.w	r7, r9, #4294967295
 8010a84:	42bb      	cmp	r3, r7
 8010a86:	bfbf      	itttt	lt
 8010a88:	9b07      	ldrlt	r3, [sp, #28]
 8010a8a:	9707      	strlt	r7, [sp, #28]
 8010a8c:	1afa      	sublt	r2, r7, r3
 8010a8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010a90:	bfbb      	ittet	lt
 8010a92:	189b      	addlt	r3, r3, r2
 8010a94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010a96:	1bdf      	subge	r7, r3, r7
 8010a98:	2700      	movlt	r7, #0
 8010a9a:	f1b9 0f00 	cmp.w	r9, #0
 8010a9e:	bfb5      	itete	lt
 8010aa0:	9b05      	ldrlt	r3, [sp, #20]
 8010aa2:	9d05      	ldrge	r5, [sp, #20]
 8010aa4:	eba3 0509 	sublt.w	r5, r3, r9
 8010aa8:	464b      	movge	r3, r9
 8010aaa:	bfb8      	it	lt
 8010aac:	2300      	movlt	r3, #0
 8010aae:	e77e      	b.n	80109ae <_dtoa_r+0x6fe>
 8010ab0:	9f07      	ldr	r7, [sp, #28]
 8010ab2:	9d05      	ldr	r5, [sp, #20]
 8010ab4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010ab6:	e783      	b.n	80109c0 <_dtoa_r+0x710>
 8010ab8:	9a07      	ldr	r2, [sp, #28]
 8010aba:	e7ab      	b.n	8010a14 <_dtoa_r+0x764>
 8010abc:	2300      	movs	r3, #0
 8010abe:	e7d4      	b.n	8010a6a <_dtoa_r+0x7ba>
 8010ac0:	9b00      	ldr	r3, [sp, #0]
 8010ac2:	e7d2      	b.n	8010a6a <_dtoa_r+0x7ba>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	9307      	str	r3, [sp, #28]
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010ace:	6918      	ldr	r0, [r3, #16]
 8010ad0:	f000 ffc7 	bl	8011a62 <__hi0bits>
 8010ad4:	f1c0 0020 	rsb	r0, r0, #32
 8010ad8:	4440      	add	r0, r8
 8010ada:	f010 001f 	ands.w	r0, r0, #31
 8010ade:	d047      	beq.n	8010b70 <_dtoa_r+0x8c0>
 8010ae0:	f1c0 0320 	rsb	r3, r0, #32
 8010ae4:	2b04      	cmp	r3, #4
 8010ae6:	dd3b      	ble.n	8010b60 <_dtoa_r+0x8b0>
 8010ae8:	9b05      	ldr	r3, [sp, #20]
 8010aea:	f1c0 001c 	rsb	r0, r0, #28
 8010aee:	4403      	add	r3, r0
 8010af0:	9305      	str	r3, [sp, #20]
 8010af2:	4405      	add	r5, r0
 8010af4:	4480      	add	r8, r0
 8010af6:	9b05      	ldr	r3, [sp, #20]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	dd05      	ble.n	8010b08 <_dtoa_r+0x858>
 8010afc:	461a      	mov	r2, r3
 8010afe:	9904      	ldr	r1, [sp, #16]
 8010b00:	4620      	mov	r0, r4
 8010b02:	f001 f8e9 	bl	8011cd8 <__lshift>
 8010b06:	9004      	str	r0, [sp, #16]
 8010b08:	f1b8 0f00 	cmp.w	r8, #0
 8010b0c:	dd05      	ble.n	8010b1a <_dtoa_r+0x86a>
 8010b0e:	4639      	mov	r1, r7
 8010b10:	4642      	mov	r2, r8
 8010b12:	4620      	mov	r0, r4
 8010b14:	f001 f8e0 	bl	8011cd8 <__lshift>
 8010b18:	4607      	mov	r7, r0
 8010b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b1c:	b353      	cbz	r3, 8010b74 <_dtoa_r+0x8c4>
 8010b1e:	4639      	mov	r1, r7
 8010b20:	9804      	ldr	r0, [sp, #16]
 8010b22:	f001 f92d 	bl	8011d80 <__mcmp>
 8010b26:	2800      	cmp	r0, #0
 8010b28:	da24      	bge.n	8010b74 <_dtoa_r+0x8c4>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	220a      	movs	r2, #10
 8010b2e:	9904      	ldr	r1, [sp, #16]
 8010b30:	4620      	mov	r0, r4
 8010b32:	f000 ff1d 	bl	8011970 <__multadd>
 8010b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b38:	9004      	str	r0, [sp, #16]
 8010b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f000 814d 	beq.w	8010dde <_dtoa_r+0xb2e>
 8010b44:	2300      	movs	r3, #0
 8010b46:	4631      	mov	r1, r6
 8010b48:	220a      	movs	r2, #10
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f000 ff10 	bl	8011970 <__multadd>
 8010b50:	9b02      	ldr	r3, [sp, #8]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	4606      	mov	r6, r0
 8010b56:	dc4f      	bgt.n	8010bf8 <_dtoa_r+0x948>
 8010b58:	9b06      	ldr	r3, [sp, #24]
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	dd4c      	ble.n	8010bf8 <_dtoa_r+0x948>
 8010b5e:	e011      	b.n	8010b84 <_dtoa_r+0x8d4>
 8010b60:	d0c9      	beq.n	8010af6 <_dtoa_r+0x846>
 8010b62:	9a05      	ldr	r2, [sp, #20]
 8010b64:	331c      	adds	r3, #28
 8010b66:	441a      	add	r2, r3
 8010b68:	9205      	str	r2, [sp, #20]
 8010b6a:	441d      	add	r5, r3
 8010b6c:	4498      	add	r8, r3
 8010b6e:	e7c2      	b.n	8010af6 <_dtoa_r+0x846>
 8010b70:	4603      	mov	r3, r0
 8010b72:	e7f6      	b.n	8010b62 <_dtoa_r+0x8b2>
 8010b74:	f1b9 0f00 	cmp.w	r9, #0
 8010b78:	dc38      	bgt.n	8010bec <_dtoa_r+0x93c>
 8010b7a:	9b06      	ldr	r3, [sp, #24]
 8010b7c:	2b02      	cmp	r3, #2
 8010b7e:	dd35      	ble.n	8010bec <_dtoa_r+0x93c>
 8010b80:	f8cd 9008 	str.w	r9, [sp, #8]
 8010b84:	9b02      	ldr	r3, [sp, #8]
 8010b86:	b963      	cbnz	r3, 8010ba2 <_dtoa_r+0x8f2>
 8010b88:	4639      	mov	r1, r7
 8010b8a:	2205      	movs	r2, #5
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f000 feef 	bl	8011970 <__multadd>
 8010b92:	4601      	mov	r1, r0
 8010b94:	4607      	mov	r7, r0
 8010b96:	9804      	ldr	r0, [sp, #16]
 8010b98:	f001 f8f2 	bl	8011d80 <__mcmp>
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	f73f adcc 	bgt.w	801073a <_dtoa_r+0x48a>
 8010ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ba4:	465d      	mov	r5, fp
 8010ba6:	ea6f 0a03 	mvn.w	sl, r3
 8010baa:	f04f 0900 	mov.w	r9, #0
 8010bae:	4639      	mov	r1, r7
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f000 fec6 	bl	8011942 <_Bfree>
 8010bb6:	2e00      	cmp	r6, #0
 8010bb8:	f43f aeb7 	beq.w	801092a <_dtoa_r+0x67a>
 8010bbc:	f1b9 0f00 	cmp.w	r9, #0
 8010bc0:	d005      	beq.n	8010bce <_dtoa_r+0x91e>
 8010bc2:	45b1      	cmp	r9, r6
 8010bc4:	d003      	beq.n	8010bce <_dtoa_r+0x91e>
 8010bc6:	4649      	mov	r1, r9
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f000 feba 	bl	8011942 <_Bfree>
 8010bce:	4631      	mov	r1, r6
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f000 feb6 	bl	8011942 <_Bfree>
 8010bd6:	e6a8      	b.n	801092a <_dtoa_r+0x67a>
 8010bd8:	2700      	movs	r7, #0
 8010bda:	463e      	mov	r6, r7
 8010bdc:	e7e1      	b.n	8010ba2 <_dtoa_r+0x8f2>
 8010bde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010be2:	463e      	mov	r6, r7
 8010be4:	e5a9      	b.n	801073a <_dtoa_r+0x48a>
 8010be6:	bf00      	nop
 8010be8:	40240000 	.word	0x40240000
 8010bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bee:	f8cd 9008 	str.w	r9, [sp, #8]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	f000 80fa 	beq.w	8010dec <_dtoa_r+0xb3c>
 8010bf8:	2d00      	cmp	r5, #0
 8010bfa:	dd05      	ble.n	8010c08 <_dtoa_r+0x958>
 8010bfc:	4631      	mov	r1, r6
 8010bfe:	462a      	mov	r2, r5
 8010c00:	4620      	mov	r0, r4
 8010c02:	f001 f869 	bl	8011cd8 <__lshift>
 8010c06:	4606      	mov	r6, r0
 8010c08:	9b07      	ldr	r3, [sp, #28]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d04c      	beq.n	8010ca8 <_dtoa_r+0x9f8>
 8010c0e:	6871      	ldr	r1, [r6, #4]
 8010c10:	4620      	mov	r0, r4
 8010c12:	f000 fe62 	bl	80118da <_Balloc>
 8010c16:	6932      	ldr	r2, [r6, #16]
 8010c18:	3202      	adds	r2, #2
 8010c1a:	4605      	mov	r5, r0
 8010c1c:	0092      	lsls	r2, r2, #2
 8010c1e:	f106 010c 	add.w	r1, r6, #12
 8010c22:	300c      	adds	r0, #12
 8010c24:	f000 fe4e 	bl	80118c4 <memcpy>
 8010c28:	2201      	movs	r2, #1
 8010c2a:	4629      	mov	r1, r5
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f001 f853 	bl	8011cd8 <__lshift>
 8010c32:	9b00      	ldr	r3, [sp, #0]
 8010c34:	f8cd b014 	str.w	fp, [sp, #20]
 8010c38:	f003 0301 	and.w	r3, r3, #1
 8010c3c:	46b1      	mov	r9, r6
 8010c3e:	9307      	str	r3, [sp, #28]
 8010c40:	4606      	mov	r6, r0
 8010c42:	4639      	mov	r1, r7
 8010c44:	9804      	ldr	r0, [sp, #16]
 8010c46:	f7ff faa7 	bl	8010198 <quorem>
 8010c4a:	4649      	mov	r1, r9
 8010c4c:	4605      	mov	r5, r0
 8010c4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010c52:	9804      	ldr	r0, [sp, #16]
 8010c54:	f001 f894 	bl	8011d80 <__mcmp>
 8010c58:	4632      	mov	r2, r6
 8010c5a:	9000      	str	r0, [sp, #0]
 8010c5c:	4639      	mov	r1, r7
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f001 f8a8 	bl	8011db4 <__mdiff>
 8010c64:	68c3      	ldr	r3, [r0, #12]
 8010c66:	4602      	mov	r2, r0
 8010c68:	bb03      	cbnz	r3, 8010cac <_dtoa_r+0x9fc>
 8010c6a:	4601      	mov	r1, r0
 8010c6c:	9008      	str	r0, [sp, #32]
 8010c6e:	9804      	ldr	r0, [sp, #16]
 8010c70:	f001 f886 	bl	8011d80 <__mcmp>
 8010c74:	9a08      	ldr	r2, [sp, #32]
 8010c76:	4603      	mov	r3, r0
 8010c78:	4611      	mov	r1, r2
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	9308      	str	r3, [sp, #32]
 8010c7e:	f000 fe60 	bl	8011942 <_Bfree>
 8010c82:	9b08      	ldr	r3, [sp, #32]
 8010c84:	b9a3      	cbnz	r3, 8010cb0 <_dtoa_r+0xa00>
 8010c86:	9a06      	ldr	r2, [sp, #24]
 8010c88:	b992      	cbnz	r2, 8010cb0 <_dtoa_r+0xa00>
 8010c8a:	9a07      	ldr	r2, [sp, #28]
 8010c8c:	b982      	cbnz	r2, 8010cb0 <_dtoa_r+0xa00>
 8010c8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010c92:	d029      	beq.n	8010ce8 <_dtoa_r+0xa38>
 8010c94:	9b00      	ldr	r3, [sp, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	dd01      	ble.n	8010c9e <_dtoa_r+0x9ee>
 8010c9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010c9e:	9b05      	ldr	r3, [sp, #20]
 8010ca0:	1c5d      	adds	r5, r3, #1
 8010ca2:	f883 8000 	strb.w	r8, [r3]
 8010ca6:	e782      	b.n	8010bae <_dtoa_r+0x8fe>
 8010ca8:	4630      	mov	r0, r6
 8010caa:	e7c2      	b.n	8010c32 <_dtoa_r+0x982>
 8010cac:	2301      	movs	r3, #1
 8010cae:	e7e3      	b.n	8010c78 <_dtoa_r+0x9c8>
 8010cb0:	9a00      	ldr	r2, [sp, #0]
 8010cb2:	2a00      	cmp	r2, #0
 8010cb4:	db04      	blt.n	8010cc0 <_dtoa_r+0xa10>
 8010cb6:	d125      	bne.n	8010d04 <_dtoa_r+0xa54>
 8010cb8:	9a06      	ldr	r2, [sp, #24]
 8010cba:	bb1a      	cbnz	r2, 8010d04 <_dtoa_r+0xa54>
 8010cbc:	9a07      	ldr	r2, [sp, #28]
 8010cbe:	bb0a      	cbnz	r2, 8010d04 <_dtoa_r+0xa54>
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	ddec      	ble.n	8010c9e <_dtoa_r+0x9ee>
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	9904      	ldr	r1, [sp, #16]
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f001 f805 	bl	8011cd8 <__lshift>
 8010cce:	4639      	mov	r1, r7
 8010cd0:	9004      	str	r0, [sp, #16]
 8010cd2:	f001 f855 	bl	8011d80 <__mcmp>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	dc03      	bgt.n	8010ce2 <_dtoa_r+0xa32>
 8010cda:	d1e0      	bne.n	8010c9e <_dtoa_r+0x9ee>
 8010cdc:	f018 0f01 	tst.w	r8, #1
 8010ce0:	d0dd      	beq.n	8010c9e <_dtoa_r+0x9ee>
 8010ce2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010ce6:	d1d8      	bne.n	8010c9a <_dtoa_r+0x9ea>
 8010ce8:	9b05      	ldr	r3, [sp, #20]
 8010cea:	9a05      	ldr	r2, [sp, #20]
 8010cec:	1c5d      	adds	r5, r3, #1
 8010cee:	2339      	movs	r3, #57	; 0x39
 8010cf0:	7013      	strb	r3, [r2, #0]
 8010cf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cf6:	2b39      	cmp	r3, #57	; 0x39
 8010cf8:	f105 32ff 	add.w	r2, r5, #4294967295
 8010cfc:	d04f      	beq.n	8010d9e <_dtoa_r+0xaee>
 8010cfe:	3301      	adds	r3, #1
 8010d00:	7013      	strb	r3, [r2, #0]
 8010d02:	e754      	b.n	8010bae <_dtoa_r+0x8fe>
 8010d04:	9a05      	ldr	r2, [sp, #20]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	f102 0501 	add.w	r5, r2, #1
 8010d0c:	dd06      	ble.n	8010d1c <_dtoa_r+0xa6c>
 8010d0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010d12:	d0e9      	beq.n	8010ce8 <_dtoa_r+0xa38>
 8010d14:	f108 0801 	add.w	r8, r8, #1
 8010d18:	9b05      	ldr	r3, [sp, #20]
 8010d1a:	e7c2      	b.n	8010ca2 <_dtoa_r+0x9f2>
 8010d1c:	9a02      	ldr	r2, [sp, #8]
 8010d1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010d22:	eba5 030b 	sub.w	r3, r5, fp
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d021      	beq.n	8010d6e <_dtoa_r+0xabe>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	220a      	movs	r2, #10
 8010d2e:	9904      	ldr	r1, [sp, #16]
 8010d30:	4620      	mov	r0, r4
 8010d32:	f000 fe1d 	bl	8011970 <__multadd>
 8010d36:	45b1      	cmp	r9, r6
 8010d38:	9004      	str	r0, [sp, #16]
 8010d3a:	f04f 0300 	mov.w	r3, #0
 8010d3e:	f04f 020a 	mov.w	r2, #10
 8010d42:	4649      	mov	r1, r9
 8010d44:	4620      	mov	r0, r4
 8010d46:	d105      	bne.n	8010d54 <_dtoa_r+0xaa4>
 8010d48:	f000 fe12 	bl	8011970 <__multadd>
 8010d4c:	4681      	mov	r9, r0
 8010d4e:	4606      	mov	r6, r0
 8010d50:	9505      	str	r5, [sp, #20]
 8010d52:	e776      	b.n	8010c42 <_dtoa_r+0x992>
 8010d54:	f000 fe0c 	bl	8011970 <__multadd>
 8010d58:	4631      	mov	r1, r6
 8010d5a:	4681      	mov	r9, r0
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	220a      	movs	r2, #10
 8010d60:	4620      	mov	r0, r4
 8010d62:	f000 fe05 	bl	8011970 <__multadd>
 8010d66:	4606      	mov	r6, r0
 8010d68:	e7f2      	b.n	8010d50 <_dtoa_r+0xaa0>
 8010d6a:	f04f 0900 	mov.w	r9, #0
 8010d6e:	2201      	movs	r2, #1
 8010d70:	9904      	ldr	r1, [sp, #16]
 8010d72:	4620      	mov	r0, r4
 8010d74:	f000 ffb0 	bl	8011cd8 <__lshift>
 8010d78:	4639      	mov	r1, r7
 8010d7a:	9004      	str	r0, [sp, #16]
 8010d7c:	f001 f800 	bl	8011d80 <__mcmp>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	dcb6      	bgt.n	8010cf2 <_dtoa_r+0xa42>
 8010d84:	d102      	bne.n	8010d8c <_dtoa_r+0xadc>
 8010d86:	f018 0f01 	tst.w	r8, #1
 8010d8a:	d1b2      	bne.n	8010cf2 <_dtoa_r+0xa42>
 8010d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d90:	2b30      	cmp	r3, #48	; 0x30
 8010d92:	f105 32ff 	add.w	r2, r5, #4294967295
 8010d96:	f47f af0a 	bne.w	8010bae <_dtoa_r+0x8fe>
 8010d9a:	4615      	mov	r5, r2
 8010d9c:	e7f6      	b.n	8010d8c <_dtoa_r+0xadc>
 8010d9e:	4593      	cmp	fp, r2
 8010da0:	d105      	bne.n	8010dae <_dtoa_r+0xafe>
 8010da2:	2331      	movs	r3, #49	; 0x31
 8010da4:	f10a 0a01 	add.w	sl, sl, #1
 8010da8:	f88b 3000 	strb.w	r3, [fp]
 8010dac:	e6ff      	b.n	8010bae <_dtoa_r+0x8fe>
 8010dae:	4615      	mov	r5, r2
 8010db0:	e79f      	b.n	8010cf2 <_dtoa_r+0xa42>
 8010db2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010e18 <_dtoa_r+0xb68>
 8010db6:	e007      	b.n	8010dc8 <_dtoa_r+0xb18>
 8010db8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010e1c <_dtoa_r+0xb6c>
 8010dbe:	b11b      	cbz	r3, 8010dc8 <_dtoa_r+0xb18>
 8010dc0:	f10b 0308 	add.w	r3, fp, #8
 8010dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010dc6:	6013      	str	r3, [r2, #0]
 8010dc8:	4658      	mov	r0, fp
 8010dca:	b017      	add	sp, #92	; 0x5c
 8010dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dd0:	9b06      	ldr	r3, [sp, #24]
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	f77f ae35 	ble.w	8010a42 <_dtoa_r+0x792>
 8010dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dda:	9307      	str	r3, [sp, #28]
 8010ddc:	e649      	b.n	8010a72 <_dtoa_r+0x7c2>
 8010dde:	9b02      	ldr	r3, [sp, #8]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	dc03      	bgt.n	8010dec <_dtoa_r+0xb3c>
 8010de4:	9b06      	ldr	r3, [sp, #24]
 8010de6:	2b02      	cmp	r3, #2
 8010de8:	f73f aecc 	bgt.w	8010b84 <_dtoa_r+0x8d4>
 8010dec:	465d      	mov	r5, fp
 8010dee:	4639      	mov	r1, r7
 8010df0:	9804      	ldr	r0, [sp, #16]
 8010df2:	f7ff f9d1 	bl	8010198 <quorem>
 8010df6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010dfa:	f805 8b01 	strb.w	r8, [r5], #1
 8010dfe:	9a02      	ldr	r2, [sp, #8]
 8010e00:	eba5 030b 	sub.w	r3, r5, fp
 8010e04:	429a      	cmp	r2, r3
 8010e06:	ddb0      	ble.n	8010d6a <_dtoa_r+0xaba>
 8010e08:	2300      	movs	r3, #0
 8010e0a:	220a      	movs	r2, #10
 8010e0c:	9904      	ldr	r1, [sp, #16]
 8010e0e:	4620      	mov	r0, r4
 8010e10:	f000 fdae 	bl	8011970 <__multadd>
 8010e14:	9004      	str	r0, [sp, #16]
 8010e16:	e7ea      	b.n	8010dee <_dtoa_r+0xb3e>
 8010e18:	08013903 	.word	0x08013903
 8010e1c:	08013760 	.word	0x08013760

08010e20 <__sflush_r>:
 8010e20:	898a      	ldrh	r2, [r1, #12]
 8010e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e26:	4605      	mov	r5, r0
 8010e28:	0710      	lsls	r0, r2, #28
 8010e2a:	460c      	mov	r4, r1
 8010e2c:	d458      	bmi.n	8010ee0 <__sflush_r+0xc0>
 8010e2e:	684b      	ldr	r3, [r1, #4]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	dc05      	bgt.n	8010e40 <__sflush_r+0x20>
 8010e34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	dc02      	bgt.n	8010e40 <__sflush_r+0x20>
 8010e3a:	2000      	movs	r0, #0
 8010e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e42:	2e00      	cmp	r6, #0
 8010e44:	d0f9      	beq.n	8010e3a <__sflush_r+0x1a>
 8010e46:	2300      	movs	r3, #0
 8010e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e4c:	682f      	ldr	r7, [r5, #0]
 8010e4e:	6a21      	ldr	r1, [r4, #32]
 8010e50:	602b      	str	r3, [r5, #0]
 8010e52:	d032      	beq.n	8010eba <__sflush_r+0x9a>
 8010e54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e56:	89a3      	ldrh	r3, [r4, #12]
 8010e58:	075a      	lsls	r2, r3, #29
 8010e5a:	d505      	bpl.n	8010e68 <__sflush_r+0x48>
 8010e5c:	6863      	ldr	r3, [r4, #4]
 8010e5e:	1ac0      	subs	r0, r0, r3
 8010e60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e62:	b10b      	cbz	r3, 8010e68 <__sflush_r+0x48>
 8010e64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e66:	1ac0      	subs	r0, r0, r3
 8010e68:	2300      	movs	r3, #0
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e6e:	6a21      	ldr	r1, [r4, #32]
 8010e70:	4628      	mov	r0, r5
 8010e72:	47b0      	blx	r6
 8010e74:	1c43      	adds	r3, r0, #1
 8010e76:	89a3      	ldrh	r3, [r4, #12]
 8010e78:	d106      	bne.n	8010e88 <__sflush_r+0x68>
 8010e7a:	6829      	ldr	r1, [r5, #0]
 8010e7c:	291d      	cmp	r1, #29
 8010e7e:	d848      	bhi.n	8010f12 <__sflush_r+0xf2>
 8010e80:	4a29      	ldr	r2, [pc, #164]	; (8010f28 <__sflush_r+0x108>)
 8010e82:	40ca      	lsrs	r2, r1
 8010e84:	07d6      	lsls	r6, r2, #31
 8010e86:	d544      	bpl.n	8010f12 <__sflush_r+0xf2>
 8010e88:	2200      	movs	r2, #0
 8010e8a:	6062      	str	r2, [r4, #4]
 8010e8c:	04d9      	lsls	r1, r3, #19
 8010e8e:	6922      	ldr	r2, [r4, #16]
 8010e90:	6022      	str	r2, [r4, #0]
 8010e92:	d504      	bpl.n	8010e9e <__sflush_r+0x7e>
 8010e94:	1c42      	adds	r2, r0, #1
 8010e96:	d101      	bne.n	8010e9c <__sflush_r+0x7c>
 8010e98:	682b      	ldr	r3, [r5, #0]
 8010e9a:	b903      	cbnz	r3, 8010e9e <__sflush_r+0x7e>
 8010e9c:	6560      	str	r0, [r4, #84]	; 0x54
 8010e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ea0:	602f      	str	r7, [r5, #0]
 8010ea2:	2900      	cmp	r1, #0
 8010ea4:	d0c9      	beq.n	8010e3a <__sflush_r+0x1a>
 8010ea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010eaa:	4299      	cmp	r1, r3
 8010eac:	d002      	beq.n	8010eb4 <__sflush_r+0x94>
 8010eae:	4628      	mov	r0, r5
 8010eb0:	f001 f920 	bl	80120f4 <_free_r>
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	6360      	str	r0, [r4, #52]	; 0x34
 8010eb8:	e7c0      	b.n	8010e3c <__sflush_r+0x1c>
 8010eba:	2301      	movs	r3, #1
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	47b0      	blx	r6
 8010ec0:	1c41      	adds	r1, r0, #1
 8010ec2:	d1c8      	bne.n	8010e56 <__sflush_r+0x36>
 8010ec4:	682b      	ldr	r3, [r5, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d0c5      	beq.n	8010e56 <__sflush_r+0x36>
 8010eca:	2b1d      	cmp	r3, #29
 8010ecc:	d001      	beq.n	8010ed2 <__sflush_r+0xb2>
 8010ece:	2b16      	cmp	r3, #22
 8010ed0:	d101      	bne.n	8010ed6 <__sflush_r+0xb6>
 8010ed2:	602f      	str	r7, [r5, #0]
 8010ed4:	e7b1      	b.n	8010e3a <__sflush_r+0x1a>
 8010ed6:	89a3      	ldrh	r3, [r4, #12]
 8010ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010edc:	81a3      	strh	r3, [r4, #12]
 8010ede:	e7ad      	b.n	8010e3c <__sflush_r+0x1c>
 8010ee0:	690f      	ldr	r7, [r1, #16]
 8010ee2:	2f00      	cmp	r7, #0
 8010ee4:	d0a9      	beq.n	8010e3a <__sflush_r+0x1a>
 8010ee6:	0793      	lsls	r3, r2, #30
 8010ee8:	680e      	ldr	r6, [r1, #0]
 8010eea:	bf08      	it	eq
 8010eec:	694b      	ldreq	r3, [r1, #20]
 8010eee:	600f      	str	r7, [r1, #0]
 8010ef0:	bf18      	it	ne
 8010ef2:	2300      	movne	r3, #0
 8010ef4:	eba6 0807 	sub.w	r8, r6, r7
 8010ef8:	608b      	str	r3, [r1, #8]
 8010efa:	f1b8 0f00 	cmp.w	r8, #0
 8010efe:	dd9c      	ble.n	8010e3a <__sflush_r+0x1a>
 8010f00:	4643      	mov	r3, r8
 8010f02:	463a      	mov	r2, r7
 8010f04:	6a21      	ldr	r1, [r4, #32]
 8010f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f08:	4628      	mov	r0, r5
 8010f0a:	47b0      	blx	r6
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	dc06      	bgt.n	8010f1e <__sflush_r+0xfe>
 8010f10:	89a3      	ldrh	r3, [r4, #12]
 8010f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f16:	81a3      	strh	r3, [r4, #12]
 8010f18:	f04f 30ff 	mov.w	r0, #4294967295
 8010f1c:	e78e      	b.n	8010e3c <__sflush_r+0x1c>
 8010f1e:	4407      	add	r7, r0
 8010f20:	eba8 0800 	sub.w	r8, r8, r0
 8010f24:	e7e9      	b.n	8010efa <__sflush_r+0xda>
 8010f26:	bf00      	nop
 8010f28:	20400001 	.word	0x20400001

08010f2c <_fflush_r>:
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	690b      	ldr	r3, [r1, #16]
 8010f30:	4605      	mov	r5, r0
 8010f32:	460c      	mov	r4, r1
 8010f34:	b1db      	cbz	r3, 8010f6e <_fflush_r+0x42>
 8010f36:	b118      	cbz	r0, 8010f40 <_fflush_r+0x14>
 8010f38:	6983      	ldr	r3, [r0, #24]
 8010f3a:	b90b      	cbnz	r3, 8010f40 <_fflush_r+0x14>
 8010f3c:	f000 f860 	bl	8011000 <__sinit>
 8010f40:	4b0c      	ldr	r3, [pc, #48]	; (8010f74 <_fflush_r+0x48>)
 8010f42:	429c      	cmp	r4, r3
 8010f44:	d109      	bne.n	8010f5a <_fflush_r+0x2e>
 8010f46:	686c      	ldr	r4, [r5, #4]
 8010f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f4c:	b17b      	cbz	r3, 8010f6e <_fflush_r+0x42>
 8010f4e:	4621      	mov	r1, r4
 8010f50:	4628      	mov	r0, r5
 8010f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f56:	f7ff bf63 	b.w	8010e20 <__sflush_r>
 8010f5a:	4b07      	ldr	r3, [pc, #28]	; (8010f78 <_fflush_r+0x4c>)
 8010f5c:	429c      	cmp	r4, r3
 8010f5e:	d101      	bne.n	8010f64 <_fflush_r+0x38>
 8010f60:	68ac      	ldr	r4, [r5, #8]
 8010f62:	e7f1      	b.n	8010f48 <_fflush_r+0x1c>
 8010f64:	4b05      	ldr	r3, [pc, #20]	; (8010f7c <_fflush_r+0x50>)
 8010f66:	429c      	cmp	r4, r3
 8010f68:	bf08      	it	eq
 8010f6a:	68ec      	ldreq	r4, [r5, #12]
 8010f6c:	e7ec      	b.n	8010f48 <_fflush_r+0x1c>
 8010f6e:	2000      	movs	r0, #0
 8010f70:	bd38      	pop	{r3, r4, r5, pc}
 8010f72:	bf00      	nop
 8010f74:	08013790 	.word	0x08013790
 8010f78:	080137b0 	.word	0x080137b0
 8010f7c:	08013770 	.word	0x08013770

08010f80 <std>:
 8010f80:	2300      	movs	r3, #0
 8010f82:	b510      	push	{r4, lr}
 8010f84:	4604      	mov	r4, r0
 8010f86:	e9c0 3300 	strd	r3, r3, [r0]
 8010f8a:	6083      	str	r3, [r0, #8]
 8010f8c:	8181      	strh	r1, [r0, #12]
 8010f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8010f90:	81c2      	strh	r2, [r0, #14]
 8010f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f96:	6183      	str	r3, [r0, #24]
 8010f98:	4619      	mov	r1, r3
 8010f9a:	2208      	movs	r2, #8
 8010f9c:	305c      	adds	r0, #92	; 0x5c
 8010f9e:	f7fd f9c1 	bl	800e324 <memset>
 8010fa2:	4b05      	ldr	r3, [pc, #20]	; (8010fb8 <std+0x38>)
 8010fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8010fa6:	4b05      	ldr	r3, [pc, #20]	; (8010fbc <std+0x3c>)
 8010fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8010faa:	4b05      	ldr	r3, [pc, #20]	; (8010fc0 <std+0x40>)
 8010fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010fae:	4b05      	ldr	r3, [pc, #20]	; (8010fc4 <std+0x44>)
 8010fb0:	6224      	str	r4, [r4, #32]
 8010fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8010fb4:	bd10      	pop	{r4, pc}
 8010fb6:	bf00      	nop
 8010fb8:	0800f1d9 	.word	0x0800f1d9
 8010fbc:	0800f1ff 	.word	0x0800f1ff
 8010fc0:	0800f237 	.word	0x0800f237
 8010fc4:	0800f25b 	.word	0x0800f25b

08010fc8 <_cleanup_r>:
 8010fc8:	4901      	ldr	r1, [pc, #4]	; (8010fd0 <_cleanup_r+0x8>)
 8010fca:	f000 b885 	b.w	80110d8 <_fwalk_reent>
 8010fce:	bf00      	nop
 8010fd0:	08010f2d 	.word	0x08010f2d

08010fd4 <__sfmoreglue>:
 8010fd4:	b570      	push	{r4, r5, r6, lr}
 8010fd6:	1e4a      	subs	r2, r1, #1
 8010fd8:	2568      	movs	r5, #104	; 0x68
 8010fda:	4355      	muls	r5, r2
 8010fdc:	460e      	mov	r6, r1
 8010fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010fe2:	f001 f8d5 	bl	8012190 <_malloc_r>
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	b140      	cbz	r0, 8010ffc <__sfmoreglue+0x28>
 8010fea:	2100      	movs	r1, #0
 8010fec:	e9c0 1600 	strd	r1, r6, [r0]
 8010ff0:	300c      	adds	r0, #12
 8010ff2:	60a0      	str	r0, [r4, #8]
 8010ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010ff8:	f7fd f994 	bl	800e324 <memset>
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	bd70      	pop	{r4, r5, r6, pc}

08011000 <__sinit>:
 8011000:	6983      	ldr	r3, [r0, #24]
 8011002:	b510      	push	{r4, lr}
 8011004:	4604      	mov	r4, r0
 8011006:	bb33      	cbnz	r3, 8011056 <__sinit+0x56>
 8011008:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801100c:	6503      	str	r3, [r0, #80]	; 0x50
 801100e:	4b12      	ldr	r3, [pc, #72]	; (8011058 <__sinit+0x58>)
 8011010:	4a12      	ldr	r2, [pc, #72]	; (801105c <__sinit+0x5c>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	6282      	str	r2, [r0, #40]	; 0x28
 8011016:	4298      	cmp	r0, r3
 8011018:	bf04      	itt	eq
 801101a:	2301      	moveq	r3, #1
 801101c:	6183      	streq	r3, [r0, #24]
 801101e:	f000 f81f 	bl	8011060 <__sfp>
 8011022:	6060      	str	r0, [r4, #4]
 8011024:	4620      	mov	r0, r4
 8011026:	f000 f81b 	bl	8011060 <__sfp>
 801102a:	60a0      	str	r0, [r4, #8]
 801102c:	4620      	mov	r0, r4
 801102e:	f000 f817 	bl	8011060 <__sfp>
 8011032:	2200      	movs	r2, #0
 8011034:	60e0      	str	r0, [r4, #12]
 8011036:	2104      	movs	r1, #4
 8011038:	6860      	ldr	r0, [r4, #4]
 801103a:	f7ff ffa1 	bl	8010f80 <std>
 801103e:	2201      	movs	r2, #1
 8011040:	2109      	movs	r1, #9
 8011042:	68a0      	ldr	r0, [r4, #8]
 8011044:	f7ff ff9c 	bl	8010f80 <std>
 8011048:	2202      	movs	r2, #2
 801104a:	2112      	movs	r1, #18
 801104c:	68e0      	ldr	r0, [r4, #12]
 801104e:	f7ff ff97 	bl	8010f80 <std>
 8011052:	2301      	movs	r3, #1
 8011054:	61a3      	str	r3, [r4, #24]
 8011056:	bd10      	pop	{r4, pc}
 8011058:	080136d4 	.word	0x080136d4
 801105c:	08010fc9 	.word	0x08010fc9

08011060 <__sfp>:
 8011060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011062:	4b1b      	ldr	r3, [pc, #108]	; (80110d0 <__sfp+0x70>)
 8011064:	681e      	ldr	r6, [r3, #0]
 8011066:	69b3      	ldr	r3, [r6, #24]
 8011068:	4607      	mov	r7, r0
 801106a:	b913      	cbnz	r3, 8011072 <__sfp+0x12>
 801106c:	4630      	mov	r0, r6
 801106e:	f7ff ffc7 	bl	8011000 <__sinit>
 8011072:	3648      	adds	r6, #72	; 0x48
 8011074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011078:	3b01      	subs	r3, #1
 801107a:	d503      	bpl.n	8011084 <__sfp+0x24>
 801107c:	6833      	ldr	r3, [r6, #0]
 801107e:	b133      	cbz	r3, 801108e <__sfp+0x2e>
 8011080:	6836      	ldr	r6, [r6, #0]
 8011082:	e7f7      	b.n	8011074 <__sfp+0x14>
 8011084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011088:	b16d      	cbz	r5, 80110a6 <__sfp+0x46>
 801108a:	3468      	adds	r4, #104	; 0x68
 801108c:	e7f4      	b.n	8011078 <__sfp+0x18>
 801108e:	2104      	movs	r1, #4
 8011090:	4638      	mov	r0, r7
 8011092:	f7ff ff9f 	bl	8010fd4 <__sfmoreglue>
 8011096:	6030      	str	r0, [r6, #0]
 8011098:	2800      	cmp	r0, #0
 801109a:	d1f1      	bne.n	8011080 <__sfp+0x20>
 801109c:	230c      	movs	r3, #12
 801109e:	603b      	str	r3, [r7, #0]
 80110a0:	4604      	mov	r4, r0
 80110a2:	4620      	mov	r0, r4
 80110a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110a6:	4b0b      	ldr	r3, [pc, #44]	; (80110d4 <__sfp+0x74>)
 80110a8:	6665      	str	r5, [r4, #100]	; 0x64
 80110aa:	e9c4 5500 	strd	r5, r5, [r4]
 80110ae:	60a5      	str	r5, [r4, #8]
 80110b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80110b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80110b8:	2208      	movs	r2, #8
 80110ba:	4629      	mov	r1, r5
 80110bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80110c0:	f7fd f930 	bl	800e324 <memset>
 80110c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80110c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80110cc:	e7e9      	b.n	80110a2 <__sfp+0x42>
 80110ce:	bf00      	nop
 80110d0:	080136d4 	.word	0x080136d4
 80110d4:	ffff0001 	.word	0xffff0001

080110d8 <_fwalk_reent>:
 80110d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110dc:	4680      	mov	r8, r0
 80110de:	4689      	mov	r9, r1
 80110e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110e4:	2600      	movs	r6, #0
 80110e6:	b914      	cbnz	r4, 80110ee <_fwalk_reent+0x16>
 80110e8:	4630      	mov	r0, r6
 80110ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80110f2:	3f01      	subs	r7, #1
 80110f4:	d501      	bpl.n	80110fa <_fwalk_reent+0x22>
 80110f6:	6824      	ldr	r4, [r4, #0]
 80110f8:	e7f5      	b.n	80110e6 <_fwalk_reent+0xe>
 80110fa:	89ab      	ldrh	r3, [r5, #12]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d907      	bls.n	8011110 <_fwalk_reent+0x38>
 8011100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011104:	3301      	adds	r3, #1
 8011106:	d003      	beq.n	8011110 <_fwalk_reent+0x38>
 8011108:	4629      	mov	r1, r5
 801110a:	4640      	mov	r0, r8
 801110c:	47c8      	blx	r9
 801110e:	4306      	orrs	r6, r0
 8011110:	3568      	adds	r5, #104	; 0x68
 8011112:	e7ee      	b.n	80110f2 <_fwalk_reent+0x1a>

08011114 <rshift>:
 8011114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011116:	6906      	ldr	r6, [r0, #16]
 8011118:	114b      	asrs	r3, r1, #5
 801111a:	429e      	cmp	r6, r3
 801111c:	f100 0414 	add.w	r4, r0, #20
 8011120:	dd30      	ble.n	8011184 <rshift+0x70>
 8011122:	f011 011f 	ands.w	r1, r1, #31
 8011126:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801112a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801112e:	d108      	bne.n	8011142 <rshift+0x2e>
 8011130:	4621      	mov	r1, r4
 8011132:	42b2      	cmp	r2, r6
 8011134:	460b      	mov	r3, r1
 8011136:	d211      	bcs.n	801115c <rshift+0x48>
 8011138:	f852 3b04 	ldr.w	r3, [r2], #4
 801113c:	f841 3b04 	str.w	r3, [r1], #4
 8011140:	e7f7      	b.n	8011132 <rshift+0x1e>
 8011142:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8011146:	f1c1 0c20 	rsb	ip, r1, #32
 801114a:	40cd      	lsrs	r5, r1
 801114c:	3204      	adds	r2, #4
 801114e:	4623      	mov	r3, r4
 8011150:	42b2      	cmp	r2, r6
 8011152:	4617      	mov	r7, r2
 8011154:	d30c      	bcc.n	8011170 <rshift+0x5c>
 8011156:	601d      	str	r5, [r3, #0]
 8011158:	b105      	cbz	r5, 801115c <rshift+0x48>
 801115a:	3304      	adds	r3, #4
 801115c:	1b1a      	subs	r2, r3, r4
 801115e:	42a3      	cmp	r3, r4
 8011160:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011164:	bf08      	it	eq
 8011166:	2300      	moveq	r3, #0
 8011168:	6102      	str	r2, [r0, #16]
 801116a:	bf08      	it	eq
 801116c:	6143      	streq	r3, [r0, #20]
 801116e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011170:	683f      	ldr	r7, [r7, #0]
 8011172:	fa07 f70c 	lsl.w	r7, r7, ip
 8011176:	433d      	orrs	r5, r7
 8011178:	f843 5b04 	str.w	r5, [r3], #4
 801117c:	f852 5b04 	ldr.w	r5, [r2], #4
 8011180:	40cd      	lsrs	r5, r1
 8011182:	e7e5      	b.n	8011150 <rshift+0x3c>
 8011184:	4623      	mov	r3, r4
 8011186:	e7e9      	b.n	801115c <rshift+0x48>

08011188 <__hexdig_fun>:
 8011188:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801118c:	2b09      	cmp	r3, #9
 801118e:	d802      	bhi.n	8011196 <__hexdig_fun+0xe>
 8011190:	3820      	subs	r0, #32
 8011192:	b2c0      	uxtb	r0, r0
 8011194:	4770      	bx	lr
 8011196:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801119a:	2b05      	cmp	r3, #5
 801119c:	d801      	bhi.n	80111a2 <__hexdig_fun+0x1a>
 801119e:	3847      	subs	r0, #71	; 0x47
 80111a0:	e7f7      	b.n	8011192 <__hexdig_fun+0xa>
 80111a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80111a6:	2b05      	cmp	r3, #5
 80111a8:	d801      	bhi.n	80111ae <__hexdig_fun+0x26>
 80111aa:	3827      	subs	r0, #39	; 0x27
 80111ac:	e7f1      	b.n	8011192 <__hexdig_fun+0xa>
 80111ae:	2000      	movs	r0, #0
 80111b0:	4770      	bx	lr

080111b2 <__gethex>:
 80111b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b6:	b08b      	sub	sp, #44	; 0x2c
 80111b8:	468a      	mov	sl, r1
 80111ba:	9002      	str	r0, [sp, #8]
 80111bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80111be:	9306      	str	r3, [sp, #24]
 80111c0:	4690      	mov	r8, r2
 80111c2:	f000 fadf 	bl	8011784 <__localeconv_l>
 80111c6:	6803      	ldr	r3, [r0, #0]
 80111c8:	9303      	str	r3, [sp, #12]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7ef f818 	bl	8000200 <strlen>
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	9001      	str	r0, [sp, #4]
 80111d4:	4403      	add	r3, r0
 80111d6:	f04f 0b00 	mov.w	fp, #0
 80111da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80111de:	9307      	str	r3, [sp, #28]
 80111e0:	f8da 3000 	ldr.w	r3, [sl]
 80111e4:	3302      	adds	r3, #2
 80111e6:	461f      	mov	r7, r3
 80111e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80111ec:	2830      	cmp	r0, #48	; 0x30
 80111ee:	d06c      	beq.n	80112ca <__gethex+0x118>
 80111f0:	f7ff ffca 	bl	8011188 <__hexdig_fun>
 80111f4:	4604      	mov	r4, r0
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d16a      	bne.n	80112d0 <__gethex+0x11e>
 80111fa:	9a01      	ldr	r2, [sp, #4]
 80111fc:	9903      	ldr	r1, [sp, #12]
 80111fe:	4638      	mov	r0, r7
 8011200:	f001 fe3e 	bl	8012e80 <strncmp>
 8011204:	2800      	cmp	r0, #0
 8011206:	d166      	bne.n	80112d6 <__gethex+0x124>
 8011208:	9b01      	ldr	r3, [sp, #4]
 801120a:	5cf8      	ldrb	r0, [r7, r3]
 801120c:	18fe      	adds	r6, r7, r3
 801120e:	f7ff ffbb 	bl	8011188 <__hexdig_fun>
 8011212:	2800      	cmp	r0, #0
 8011214:	d062      	beq.n	80112dc <__gethex+0x12a>
 8011216:	4633      	mov	r3, r6
 8011218:	7818      	ldrb	r0, [r3, #0]
 801121a:	2830      	cmp	r0, #48	; 0x30
 801121c:	461f      	mov	r7, r3
 801121e:	f103 0301 	add.w	r3, r3, #1
 8011222:	d0f9      	beq.n	8011218 <__gethex+0x66>
 8011224:	f7ff ffb0 	bl	8011188 <__hexdig_fun>
 8011228:	fab0 f580 	clz	r5, r0
 801122c:	096d      	lsrs	r5, r5, #5
 801122e:	4634      	mov	r4, r6
 8011230:	f04f 0b01 	mov.w	fp, #1
 8011234:	463a      	mov	r2, r7
 8011236:	4616      	mov	r6, r2
 8011238:	3201      	adds	r2, #1
 801123a:	7830      	ldrb	r0, [r6, #0]
 801123c:	f7ff ffa4 	bl	8011188 <__hexdig_fun>
 8011240:	2800      	cmp	r0, #0
 8011242:	d1f8      	bne.n	8011236 <__gethex+0x84>
 8011244:	9a01      	ldr	r2, [sp, #4]
 8011246:	9903      	ldr	r1, [sp, #12]
 8011248:	4630      	mov	r0, r6
 801124a:	f001 fe19 	bl	8012e80 <strncmp>
 801124e:	b950      	cbnz	r0, 8011266 <__gethex+0xb4>
 8011250:	b954      	cbnz	r4, 8011268 <__gethex+0xb6>
 8011252:	9b01      	ldr	r3, [sp, #4]
 8011254:	18f4      	adds	r4, r6, r3
 8011256:	4622      	mov	r2, r4
 8011258:	4616      	mov	r6, r2
 801125a:	3201      	adds	r2, #1
 801125c:	7830      	ldrb	r0, [r6, #0]
 801125e:	f7ff ff93 	bl	8011188 <__hexdig_fun>
 8011262:	2800      	cmp	r0, #0
 8011264:	d1f8      	bne.n	8011258 <__gethex+0xa6>
 8011266:	b10c      	cbz	r4, 801126c <__gethex+0xba>
 8011268:	1ba4      	subs	r4, r4, r6
 801126a:	00a4      	lsls	r4, r4, #2
 801126c:	7833      	ldrb	r3, [r6, #0]
 801126e:	2b50      	cmp	r3, #80	; 0x50
 8011270:	d001      	beq.n	8011276 <__gethex+0xc4>
 8011272:	2b70      	cmp	r3, #112	; 0x70
 8011274:	d140      	bne.n	80112f8 <__gethex+0x146>
 8011276:	7873      	ldrb	r3, [r6, #1]
 8011278:	2b2b      	cmp	r3, #43	; 0x2b
 801127a:	d031      	beq.n	80112e0 <__gethex+0x12e>
 801127c:	2b2d      	cmp	r3, #45	; 0x2d
 801127e:	d033      	beq.n	80112e8 <__gethex+0x136>
 8011280:	1c71      	adds	r1, r6, #1
 8011282:	f04f 0900 	mov.w	r9, #0
 8011286:	7808      	ldrb	r0, [r1, #0]
 8011288:	f7ff ff7e 	bl	8011188 <__hexdig_fun>
 801128c:	1e43      	subs	r3, r0, #1
 801128e:	b2db      	uxtb	r3, r3
 8011290:	2b18      	cmp	r3, #24
 8011292:	d831      	bhi.n	80112f8 <__gethex+0x146>
 8011294:	f1a0 0210 	sub.w	r2, r0, #16
 8011298:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801129c:	f7ff ff74 	bl	8011188 <__hexdig_fun>
 80112a0:	1e43      	subs	r3, r0, #1
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	2b18      	cmp	r3, #24
 80112a6:	d922      	bls.n	80112ee <__gethex+0x13c>
 80112a8:	f1b9 0f00 	cmp.w	r9, #0
 80112ac:	d000      	beq.n	80112b0 <__gethex+0xfe>
 80112ae:	4252      	negs	r2, r2
 80112b0:	4414      	add	r4, r2
 80112b2:	f8ca 1000 	str.w	r1, [sl]
 80112b6:	b30d      	cbz	r5, 80112fc <__gethex+0x14a>
 80112b8:	f1bb 0f00 	cmp.w	fp, #0
 80112bc:	bf0c      	ite	eq
 80112be:	2706      	moveq	r7, #6
 80112c0:	2700      	movne	r7, #0
 80112c2:	4638      	mov	r0, r7
 80112c4:	b00b      	add	sp, #44	; 0x2c
 80112c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ca:	f10b 0b01 	add.w	fp, fp, #1
 80112ce:	e78a      	b.n	80111e6 <__gethex+0x34>
 80112d0:	2500      	movs	r5, #0
 80112d2:	462c      	mov	r4, r5
 80112d4:	e7ae      	b.n	8011234 <__gethex+0x82>
 80112d6:	463e      	mov	r6, r7
 80112d8:	2501      	movs	r5, #1
 80112da:	e7c7      	b.n	801126c <__gethex+0xba>
 80112dc:	4604      	mov	r4, r0
 80112de:	e7fb      	b.n	80112d8 <__gethex+0x126>
 80112e0:	f04f 0900 	mov.w	r9, #0
 80112e4:	1cb1      	adds	r1, r6, #2
 80112e6:	e7ce      	b.n	8011286 <__gethex+0xd4>
 80112e8:	f04f 0901 	mov.w	r9, #1
 80112ec:	e7fa      	b.n	80112e4 <__gethex+0x132>
 80112ee:	230a      	movs	r3, #10
 80112f0:	fb03 0202 	mla	r2, r3, r2, r0
 80112f4:	3a10      	subs	r2, #16
 80112f6:	e7cf      	b.n	8011298 <__gethex+0xe6>
 80112f8:	4631      	mov	r1, r6
 80112fa:	e7da      	b.n	80112b2 <__gethex+0x100>
 80112fc:	1bf3      	subs	r3, r6, r7
 80112fe:	3b01      	subs	r3, #1
 8011300:	4629      	mov	r1, r5
 8011302:	2b07      	cmp	r3, #7
 8011304:	dc49      	bgt.n	801139a <__gethex+0x1e8>
 8011306:	9802      	ldr	r0, [sp, #8]
 8011308:	f000 fae7 	bl	80118da <_Balloc>
 801130c:	9b01      	ldr	r3, [sp, #4]
 801130e:	f100 0914 	add.w	r9, r0, #20
 8011312:	f04f 0b00 	mov.w	fp, #0
 8011316:	f1c3 0301 	rsb	r3, r3, #1
 801131a:	4605      	mov	r5, r0
 801131c:	f8cd 9010 	str.w	r9, [sp, #16]
 8011320:	46da      	mov	sl, fp
 8011322:	9308      	str	r3, [sp, #32]
 8011324:	42b7      	cmp	r7, r6
 8011326:	d33b      	bcc.n	80113a0 <__gethex+0x1ee>
 8011328:	9804      	ldr	r0, [sp, #16]
 801132a:	f840 ab04 	str.w	sl, [r0], #4
 801132e:	eba0 0009 	sub.w	r0, r0, r9
 8011332:	1080      	asrs	r0, r0, #2
 8011334:	6128      	str	r0, [r5, #16]
 8011336:	0147      	lsls	r7, r0, #5
 8011338:	4650      	mov	r0, sl
 801133a:	f000 fb92 	bl	8011a62 <__hi0bits>
 801133e:	f8d8 6000 	ldr.w	r6, [r8]
 8011342:	1a3f      	subs	r7, r7, r0
 8011344:	42b7      	cmp	r7, r6
 8011346:	dd64      	ble.n	8011412 <__gethex+0x260>
 8011348:	1bbf      	subs	r7, r7, r6
 801134a:	4639      	mov	r1, r7
 801134c:	4628      	mov	r0, r5
 801134e:	f000 fea1 	bl	8012094 <__any_on>
 8011352:	4682      	mov	sl, r0
 8011354:	b178      	cbz	r0, 8011376 <__gethex+0x1c4>
 8011356:	1e7b      	subs	r3, r7, #1
 8011358:	1159      	asrs	r1, r3, #5
 801135a:	f003 021f 	and.w	r2, r3, #31
 801135e:	f04f 0a01 	mov.w	sl, #1
 8011362:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011366:	fa0a f202 	lsl.w	r2, sl, r2
 801136a:	420a      	tst	r2, r1
 801136c:	d003      	beq.n	8011376 <__gethex+0x1c4>
 801136e:	4553      	cmp	r3, sl
 8011370:	dc46      	bgt.n	8011400 <__gethex+0x24e>
 8011372:	f04f 0a02 	mov.w	sl, #2
 8011376:	4639      	mov	r1, r7
 8011378:	4628      	mov	r0, r5
 801137a:	f7ff fecb 	bl	8011114 <rshift>
 801137e:	443c      	add	r4, r7
 8011380:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011384:	42a3      	cmp	r3, r4
 8011386:	da52      	bge.n	801142e <__gethex+0x27c>
 8011388:	4629      	mov	r1, r5
 801138a:	9802      	ldr	r0, [sp, #8]
 801138c:	f000 fad9 	bl	8011942 <_Bfree>
 8011390:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011392:	2300      	movs	r3, #0
 8011394:	6013      	str	r3, [r2, #0]
 8011396:	27a3      	movs	r7, #163	; 0xa3
 8011398:	e793      	b.n	80112c2 <__gethex+0x110>
 801139a:	3101      	adds	r1, #1
 801139c:	105b      	asrs	r3, r3, #1
 801139e:	e7b0      	b.n	8011302 <__gethex+0x150>
 80113a0:	1e73      	subs	r3, r6, #1
 80113a2:	9305      	str	r3, [sp, #20]
 80113a4:	9a07      	ldr	r2, [sp, #28]
 80113a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d018      	beq.n	80113e0 <__gethex+0x22e>
 80113ae:	f1bb 0f20 	cmp.w	fp, #32
 80113b2:	d107      	bne.n	80113c4 <__gethex+0x212>
 80113b4:	9b04      	ldr	r3, [sp, #16]
 80113b6:	f8c3 a000 	str.w	sl, [r3]
 80113ba:	3304      	adds	r3, #4
 80113bc:	f04f 0a00 	mov.w	sl, #0
 80113c0:	9304      	str	r3, [sp, #16]
 80113c2:	46d3      	mov	fp, sl
 80113c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80113c8:	f7ff fede 	bl	8011188 <__hexdig_fun>
 80113cc:	f000 000f 	and.w	r0, r0, #15
 80113d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80113d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80113d8:	f10b 0b04 	add.w	fp, fp, #4
 80113dc:	9b05      	ldr	r3, [sp, #20]
 80113de:	e00d      	b.n	80113fc <__gethex+0x24a>
 80113e0:	9b05      	ldr	r3, [sp, #20]
 80113e2:	9a08      	ldr	r2, [sp, #32]
 80113e4:	4413      	add	r3, r2
 80113e6:	42bb      	cmp	r3, r7
 80113e8:	d3e1      	bcc.n	80113ae <__gethex+0x1fc>
 80113ea:	4618      	mov	r0, r3
 80113ec:	9a01      	ldr	r2, [sp, #4]
 80113ee:	9903      	ldr	r1, [sp, #12]
 80113f0:	9309      	str	r3, [sp, #36]	; 0x24
 80113f2:	f001 fd45 	bl	8012e80 <strncmp>
 80113f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113f8:	2800      	cmp	r0, #0
 80113fa:	d1d8      	bne.n	80113ae <__gethex+0x1fc>
 80113fc:	461e      	mov	r6, r3
 80113fe:	e791      	b.n	8011324 <__gethex+0x172>
 8011400:	1eb9      	subs	r1, r7, #2
 8011402:	4628      	mov	r0, r5
 8011404:	f000 fe46 	bl	8012094 <__any_on>
 8011408:	2800      	cmp	r0, #0
 801140a:	d0b2      	beq.n	8011372 <__gethex+0x1c0>
 801140c:	f04f 0a03 	mov.w	sl, #3
 8011410:	e7b1      	b.n	8011376 <__gethex+0x1c4>
 8011412:	da09      	bge.n	8011428 <__gethex+0x276>
 8011414:	1bf7      	subs	r7, r6, r7
 8011416:	4629      	mov	r1, r5
 8011418:	463a      	mov	r2, r7
 801141a:	9802      	ldr	r0, [sp, #8]
 801141c:	f000 fc5c 	bl	8011cd8 <__lshift>
 8011420:	1be4      	subs	r4, r4, r7
 8011422:	4605      	mov	r5, r0
 8011424:	f100 0914 	add.w	r9, r0, #20
 8011428:	f04f 0a00 	mov.w	sl, #0
 801142c:	e7a8      	b.n	8011380 <__gethex+0x1ce>
 801142e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011432:	42a0      	cmp	r0, r4
 8011434:	dd6a      	ble.n	801150c <__gethex+0x35a>
 8011436:	1b04      	subs	r4, r0, r4
 8011438:	42a6      	cmp	r6, r4
 801143a:	dc2e      	bgt.n	801149a <__gethex+0x2e8>
 801143c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011440:	2b02      	cmp	r3, #2
 8011442:	d022      	beq.n	801148a <__gethex+0x2d8>
 8011444:	2b03      	cmp	r3, #3
 8011446:	d024      	beq.n	8011492 <__gethex+0x2e0>
 8011448:	2b01      	cmp	r3, #1
 801144a:	d115      	bne.n	8011478 <__gethex+0x2c6>
 801144c:	42a6      	cmp	r6, r4
 801144e:	d113      	bne.n	8011478 <__gethex+0x2c6>
 8011450:	2e01      	cmp	r6, #1
 8011452:	dc0b      	bgt.n	801146c <__gethex+0x2ba>
 8011454:	9a06      	ldr	r2, [sp, #24]
 8011456:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801145a:	6013      	str	r3, [r2, #0]
 801145c:	2301      	movs	r3, #1
 801145e:	612b      	str	r3, [r5, #16]
 8011460:	f8c9 3000 	str.w	r3, [r9]
 8011464:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011466:	2762      	movs	r7, #98	; 0x62
 8011468:	601d      	str	r5, [r3, #0]
 801146a:	e72a      	b.n	80112c2 <__gethex+0x110>
 801146c:	1e71      	subs	r1, r6, #1
 801146e:	4628      	mov	r0, r5
 8011470:	f000 fe10 	bl	8012094 <__any_on>
 8011474:	2800      	cmp	r0, #0
 8011476:	d1ed      	bne.n	8011454 <__gethex+0x2a2>
 8011478:	4629      	mov	r1, r5
 801147a:	9802      	ldr	r0, [sp, #8]
 801147c:	f000 fa61 	bl	8011942 <_Bfree>
 8011480:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011482:	2300      	movs	r3, #0
 8011484:	6013      	str	r3, [r2, #0]
 8011486:	2750      	movs	r7, #80	; 0x50
 8011488:	e71b      	b.n	80112c2 <__gethex+0x110>
 801148a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801148c:	2b00      	cmp	r3, #0
 801148e:	d0e1      	beq.n	8011454 <__gethex+0x2a2>
 8011490:	e7f2      	b.n	8011478 <__gethex+0x2c6>
 8011492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011494:	2b00      	cmp	r3, #0
 8011496:	d1dd      	bne.n	8011454 <__gethex+0x2a2>
 8011498:	e7ee      	b.n	8011478 <__gethex+0x2c6>
 801149a:	1e67      	subs	r7, r4, #1
 801149c:	f1ba 0f00 	cmp.w	sl, #0
 80114a0:	d131      	bne.n	8011506 <__gethex+0x354>
 80114a2:	b127      	cbz	r7, 80114ae <__gethex+0x2fc>
 80114a4:	4639      	mov	r1, r7
 80114a6:	4628      	mov	r0, r5
 80114a8:	f000 fdf4 	bl	8012094 <__any_on>
 80114ac:	4682      	mov	sl, r0
 80114ae:	117a      	asrs	r2, r7, #5
 80114b0:	2301      	movs	r3, #1
 80114b2:	f007 071f 	and.w	r7, r7, #31
 80114b6:	fa03 f707 	lsl.w	r7, r3, r7
 80114ba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80114be:	4621      	mov	r1, r4
 80114c0:	421f      	tst	r7, r3
 80114c2:	4628      	mov	r0, r5
 80114c4:	bf18      	it	ne
 80114c6:	f04a 0a02 	orrne.w	sl, sl, #2
 80114ca:	1b36      	subs	r6, r6, r4
 80114cc:	f7ff fe22 	bl	8011114 <rshift>
 80114d0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80114d4:	2702      	movs	r7, #2
 80114d6:	f1ba 0f00 	cmp.w	sl, #0
 80114da:	d048      	beq.n	801156e <__gethex+0x3bc>
 80114dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80114e0:	2b02      	cmp	r3, #2
 80114e2:	d015      	beq.n	8011510 <__gethex+0x35e>
 80114e4:	2b03      	cmp	r3, #3
 80114e6:	d017      	beq.n	8011518 <__gethex+0x366>
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	d109      	bne.n	8011500 <__gethex+0x34e>
 80114ec:	f01a 0f02 	tst.w	sl, #2
 80114f0:	d006      	beq.n	8011500 <__gethex+0x34e>
 80114f2:	f8d9 3000 	ldr.w	r3, [r9]
 80114f6:	ea4a 0a03 	orr.w	sl, sl, r3
 80114fa:	f01a 0f01 	tst.w	sl, #1
 80114fe:	d10e      	bne.n	801151e <__gethex+0x36c>
 8011500:	f047 0710 	orr.w	r7, r7, #16
 8011504:	e033      	b.n	801156e <__gethex+0x3bc>
 8011506:	f04f 0a01 	mov.w	sl, #1
 801150a:	e7d0      	b.n	80114ae <__gethex+0x2fc>
 801150c:	2701      	movs	r7, #1
 801150e:	e7e2      	b.n	80114d6 <__gethex+0x324>
 8011510:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011512:	f1c3 0301 	rsb	r3, r3, #1
 8011516:	9315      	str	r3, [sp, #84]	; 0x54
 8011518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801151a:	2b00      	cmp	r3, #0
 801151c:	d0f0      	beq.n	8011500 <__gethex+0x34e>
 801151e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8011522:	f105 0314 	add.w	r3, r5, #20
 8011526:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801152a:	eb03 010a 	add.w	r1, r3, sl
 801152e:	f04f 0c00 	mov.w	ip, #0
 8011532:	4618      	mov	r0, r3
 8011534:	f853 2b04 	ldr.w	r2, [r3], #4
 8011538:	f1b2 3fff 	cmp.w	r2, #4294967295
 801153c:	d01c      	beq.n	8011578 <__gethex+0x3c6>
 801153e:	3201      	adds	r2, #1
 8011540:	6002      	str	r2, [r0, #0]
 8011542:	2f02      	cmp	r7, #2
 8011544:	f105 0314 	add.w	r3, r5, #20
 8011548:	d138      	bne.n	80115bc <__gethex+0x40a>
 801154a:	f8d8 2000 	ldr.w	r2, [r8]
 801154e:	3a01      	subs	r2, #1
 8011550:	42b2      	cmp	r2, r6
 8011552:	d10a      	bne.n	801156a <__gethex+0x3b8>
 8011554:	1171      	asrs	r1, r6, #5
 8011556:	2201      	movs	r2, #1
 8011558:	f006 061f 	and.w	r6, r6, #31
 801155c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011560:	fa02 f606 	lsl.w	r6, r2, r6
 8011564:	421e      	tst	r6, r3
 8011566:	bf18      	it	ne
 8011568:	4617      	movne	r7, r2
 801156a:	f047 0720 	orr.w	r7, r7, #32
 801156e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011570:	601d      	str	r5, [r3, #0]
 8011572:	9b06      	ldr	r3, [sp, #24]
 8011574:	601c      	str	r4, [r3, #0]
 8011576:	e6a4      	b.n	80112c2 <__gethex+0x110>
 8011578:	4299      	cmp	r1, r3
 801157a:	f843 cc04 	str.w	ip, [r3, #-4]
 801157e:	d8d8      	bhi.n	8011532 <__gethex+0x380>
 8011580:	68ab      	ldr	r3, [r5, #8]
 8011582:	4599      	cmp	r9, r3
 8011584:	db12      	blt.n	80115ac <__gethex+0x3fa>
 8011586:	6869      	ldr	r1, [r5, #4]
 8011588:	9802      	ldr	r0, [sp, #8]
 801158a:	3101      	adds	r1, #1
 801158c:	f000 f9a5 	bl	80118da <_Balloc>
 8011590:	692a      	ldr	r2, [r5, #16]
 8011592:	3202      	adds	r2, #2
 8011594:	f105 010c 	add.w	r1, r5, #12
 8011598:	4683      	mov	fp, r0
 801159a:	0092      	lsls	r2, r2, #2
 801159c:	300c      	adds	r0, #12
 801159e:	f000 f991 	bl	80118c4 <memcpy>
 80115a2:	4629      	mov	r1, r5
 80115a4:	9802      	ldr	r0, [sp, #8]
 80115a6:	f000 f9cc 	bl	8011942 <_Bfree>
 80115aa:	465d      	mov	r5, fp
 80115ac:	692b      	ldr	r3, [r5, #16]
 80115ae:	1c5a      	adds	r2, r3, #1
 80115b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80115b4:	612a      	str	r2, [r5, #16]
 80115b6:	2201      	movs	r2, #1
 80115b8:	615a      	str	r2, [r3, #20]
 80115ba:	e7c2      	b.n	8011542 <__gethex+0x390>
 80115bc:	692a      	ldr	r2, [r5, #16]
 80115be:	454a      	cmp	r2, r9
 80115c0:	dd0b      	ble.n	80115da <__gethex+0x428>
 80115c2:	2101      	movs	r1, #1
 80115c4:	4628      	mov	r0, r5
 80115c6:	f7ff fda5 	bl	8011114 <rshift>
 80115ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115ce:	3401      	adds	r4, #1
 80115d0:	42a3      	cmp	r3, r4
 80115d2:	f6ff aed9 	blt.w	8011388 <__gethex+0x1d6>
 80115d6:	2701      	movs	r7, #1
 80115d8:	e7c7      	b.n	801156a <__gethex+0x3b8>
 80115da:	f016 061f 	ands.w	r6, r6, #31
 80115de:	d0fa      	beq.n	80115d6 <__gethex+0x424>
 80115e0:	449a      	add	sl, r3
 80115e2:	f1c6 0620 	rsb	r6, r6, #32
 80115e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80115ea:	f000 fa3a 	bl	8011a62 <__hi0bits>
 80115ee:	42b0      	cmp	r0, r6
 80115f0:	dbe7      	blt.n	80115c2 <__gethex+0x410>
 80115f2:	e7f0      	b.n	80115d6 <__gethex+0x424>

080115f4 <L_shift>:
 80115f4:	f1c2 0208 	rsb	r2, r2, #8
 80115f8:	0092      	lsls	r2, r2, #2
 80115fa:	b570      	push	{r4, r5, r6, lr}
 80115fc:	f1c2 0620 	rsb	r6, r2, #32
 8011600:	6843      	ldr	r3, [r0, #4]
 8011602:	6804      	ldr	r4, [r0, #0]
 8011604:	fa03 f506 	lsl.w	r5, r3, r6
 8011608:	432c      	orrs	r4, r5
 801160a:	40d3      	lsrs	r3, r2
 801160c:	6004      	str	r4, [r0, #0]
 801160e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011612:	4288      	cmp	r0, r1
 8011614:	d3f4      	bcc.n	8011600 <L_shift+0xc>
 8011616:	bd70      	pop	{r4, r5, r6, pc}

08011618 <__match>:
 8011618:	b530      	push	{r4, r5, lr}
 801161a:	6803      	ldr	r3, [r0, #0]
 801161c:	3301      	adds	r3, #1
 801161e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011622:	b914      	cbnz	r4, 801162a <__match+0x12>
 8011624:	6003      	str	r3, [r0, #0]
 8011626:	2001      	movs	r0, #1
 8011628:	bd30      	pop	{r4, r5, pc}
 801162a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801162e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011632:	2d19      	cmp	r5, #25
 8011634:	bf98      	it	ls
 8011636:	3220      	addls	r2, #32
 8011638:	42a2      	cmp	r2, r4
 801163a:	d0f0      	beq.n	801161e <__match+0x6>
 801163c:	2000      	movs	r0, #0
 801163e:	e7f3      	b.n	8011628 <__match+0x10>

08011640 <__hexnan>:
 8011640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011644:	680b      	ldr	r3, [r1, #0]
 8011646:	6801      	ldr	r1, [r0, #0]
 8011648:	115f      	asrs	r7, r3, #5
 801164a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801164e:	f013 031f 	ands.w	r3, r3, #31
 8011652:	b087      	sub	sp, #28
 8011654:	bf18      	it	ne
 8011656:	3704      	addne	r7, #4
 8011658:	2500      	movs	r5, #0
 801165a:	1f3e      	subs	r6, r7, #4
 801165c:	4682      	mov	sl, r0
 801165e:	4690      	mov	r8, r2
 8011660:	9301      	str	r3, [sp, #4]
 8011662:	f847 5c04 	str.w	r5, [r7, #-4]
 8011666:	46b1      	mov	r9, r6
 8011668:	4634      	mov	r4, r6
 801166a:	9502      	str	r5, [sp, #8]
 801166c:	46ab      	mov	fp, r5
 801166e:	784a      	ldrb	r2, [r1, #1]
 8011670:	1c4b      	adds	r3, r1, #1
 8011672:	9303      	str	r3, [sp, #12]
 8011674:	b342      	cbz	r2, 80116c8 <__hexnan+0x88>
 8011676:	4610      	mov	r0, r2
 8011678:	9105      	str	r1, [sp, #20]
 801167a:	9204      	str	r2, [sp, #16]
 801167c:	f7ff fd84 	bl	8011188 <__hexdig_fun>
 8011680:	2800      	cmp	r0, #0
 8011682:	d143      	bne.n	801170c <__hexnan+0xcc>
 8011684:	9a04      	ldr	r2, [sp, #16]
 8011686:	9905      	ldr	r1, [sp, #20]
 8011688:	2a20      	cmp	r2, #32
 801168a:	d818      	bhi.n	80116be <__hexnan+0x7e>
 801168c:	9b02      	ldr	r3, [sp, #8]
 801168e:	459b      	cmp	fp, r3
 8011690:	dd13      	ble.n	80116ba <__hexnan+0x7a>
 8011692:	454c      	cmp	r4, r9
 8011694:	d206      	bcs.n	80116a4 <__hexnan+0x64>
 8011696:	2d07      	cmp	r5, #7
 8011698:	dc04      	bgt.n	80116a4 <__hexnan+0x64>
 801169a:	462a      	mov	r2, r5
 801169c:	4649      	mov	r1, r9
 801169e:	4620      	mov	r0, r4
 80116a0:	f7ff ffa8 	bl	80115f4 <L_shift>
 80116a4:	4544      	cmp	r4, r8
 80116a6:	d944      	bls.n	8011732 <__hexnan+0xf2>
 80116a8:	2300      	movs	r3, #0
 80116aa:	f1a4 0904 	sub.w	r9, r4, #4
 80116ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80116b2:	f8cd b008 	str.w	fp, [sp, #8]
 80116b6:	464c      	mov	r4, r9
 80116b8:	461d      	mov	r5, r3
 80116ba:	9903      	ldr	r1, [sp, #12]
 80116bc:	e7d7      	b.n	801166e <__hexnan+0x2e>
 80116be:	2a29      	cmp	r2, #41	; 0x29
 80116c0:	d14a      	bne.n	8011758 <__hexnan+0x118>
 80116c2:	3102      	adds	r1, #2
 80116c4:	f8ca 1000 	str.w	r1, [sl]
 80116c8:	f1bb 0f00 	cmp.w	fp, #0
 80116cc:	d044      	beq.n	8011758 <__hexnan+0x118>
 80116ce:	454c      	cmp	r4, r9
 80116d0:	d206      	bcs.n	80116e0 <__hexnan+0xa0>
 80116d2:	2d07      	cmp	r5, #7
 80116d4:	dc04      	bgt.n	80116e0 <__hexnan+0xa0>
 80116d6:	462a      	mov	r2, r5
 80116d8:	4649      	mov	r1, r9
 80116da:	4620      	mov	r0, r4
 80116dc:	f7ff ff8a 	bl	80115f4 <L_shift>
 80116e0:	4544      	cmp	r4, r8
 80116e2:	d928      	bls.n	8011736 <__hexnan+0xf6>
 80116e4:	4643      	mov	r3, r8
 80116e6:	f854 2b04 	ldr.w	r2, [r4], #4
 80116ea:	f843 2b04 	str.w	r2, [r3], #4
 80116ee:	42a6      	cmp	r6, r4
 80116f0:	d2f9      	bcs.n	80116e6 <__hexnan+0xa6>
 80116f2:	2200      	movs	r2, #0
 80116f4:	f843 2b04 	str.w	r2, [r3], #4
 80116f8:	429e      	cmp	r6, r3
 80116fa:	d2fb      	bcs.n	80116f4 <__hexnan+0xb4>
 80116fc:	6833      	ldr	r3, [r6, #0]
 80116fe:	b91b      	cbnz	r3, 8011708 <__hexnan+0xc8>
 8011700:	4546      	cmp	r6, r8
 8011702:	d127      	bne.n	8011754 <__hexnan+0x114>
 8011704:	2301      	movs	r3, #1
 8011706:	6033      	str	r3, [r6, #0]
 8011708:	2005      	movs	r0, #5
 801170a:	e026      	b.n	801175a <__hexnan+0x11a>
 801170c:	3501      	adds	r5, #1
 801170e:	2d08      	cmp	r5, #8
 8011710:	f10b 0b01 	add.w	fp, fp, #1
 8011714:	dd06      	ble.n	8011724 <__hexnan+0xe4>
 8011716:	4544      	cmp	r4, r8
 8011718:	d9cf      	bls.n	80116ba <__hexnan+0x7a>
 801171a:	2300      	movs	r3, #0
 801171c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011720:	2501      	movs	r5, #1
 8011722:	3c04      	subs	r4, #4
 8011724:	6822      	ldr	r2, [r4, #0]
 8011726:	f000 000f 	and.w	r0, r0, #15
 801172a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801172e:	6020      	str	r0, [r4, #0]
 8011730:	e7c3      	b.n	80116ba <__hexnan+0x7a>
 8011732:	2508      	movs	r5, #8
 8011734:	e7c1      	b.n	80116ba <__hexnan+0x7a>
 8011736:	9b01      	ldr	r3, [sp, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d0df      	beq.n	80116fc <__hexnan+0xbc>
 801173c:	f04f 32ff 	mov.w	r2, #4294967295
 8011740:	f1c3 0320 	rsb	r3, r3, #32
 8011744:	fa22 f303 	lsr.w	r3, r2, r3
 8011748:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801174c:	401a      	ands	r2, r3
 801174e:	f847 2c04 	str.w	r2, [r7, #-4]
 8011752:	e7d3      	b.n	80116fc <__hexnan+0xbc>
 8011754:	3e04      	subs	r6, #4
 8011756:	e7d1      	b.n	80116fc <__hexnan+0xbc>
 8011758:	2004      	movs	r0, #4
 801175a:	b007      	add	sp, #28
 801175c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011760 <__locale_ctype_ptr_l>:
 8011760:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011764:	4770      	bx	lr
	...

08011768 <__locale_ctype_ptr>:
 8011768:	4b04      	ldr	r3, [pc, #16]	; (801177c <__locale_ctype_ptr+0x14>)
 801176a:	4a05      	ldr	r2, [pc, #20]	; (8011780 <__locale_ctype_ptr+0x18>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	6a1b      	ldr	r3, [r3, #32]
 8011770:	2b00      	cmp	r3, #0
 8011772:	bf08      	it	eq
 8011774:	4613      	moveq	r3, r2
 8011776:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801177a:	4770      	bx	lr
 801177c:	2000000c 	.word	0x2000000c
 8011780:	20000070 	.word	0x20000070

08011784 <__localeconv_l>:
 8011784:	30f0      	adds	r0, #240	; 0xf0
 8011786:	4770      	bx	lr

08011788 <_localeconv_r>:
 8011788:	4b04      	ldr	r3, [pc, #16]	; (801179c <_localeconv_r+0x14>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	6a18      	ldr	r0, [r3, #32]
 801178e:	4b04      	ldr	r3, [pc, #16]	; (80117a0 <_localeconv_r+0x18>)
 8011790:	2800      	cmp	r0, #0
 8011792:	bf08      	it	eq
 8011794:	4618      	moveq	r0, r3
 8011796:	30f0      	adds	r0, #240	; 0xf0
 8011798:	4770      	bx	lr
 801179a:	bf00      	nop
 801179c:	2000000c 	.word	0x2000000c
 80117a0:	20000070 	.word	0x20000070

080117a4 <_lseek_r>:
 80117a4:	b538      	push	{r3, r4, r5, lr}
 80117a6:	4c07      	ldr	r4, [pc, #28]	; (80117c4 <_lseek_r+0x20>)
 80117a8:	4605      	mov	r5, r0
 80117aa:	4608      	mov	r0, r1
 80117ac:	4611      	mov	r1, r2
 80117ae:	2200      	movs	r2, #0
 80117b0:	6022      	str	r2, [r4, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	f7f2 f93e 	bl	8003a34 <_lseek>
 80117b8:	1c43      	adds	r3, r0, #1
 80117ba:	d102      	bne.n	80117c2 <_lseek_r+0x1e>
 80117bc:	6823      	ldr	r3, [r4, #0]
 80117be:	b103      	cbz	r3, 80117c2 <_lseek_r+0x1e>
 80117c0:	602b      	str	r3, [r5, #0]
 80117c2:	bd38      	pop	{r3, r4, r5, pc}
 80117c4:	20004df8 	.word	0x20004df8

080117c8 <__swhatbuf_r>:
 80117c8:	b570      	push	{r4, r5, r6, lr}
 80117ca:	460e      	mov	r6, r1
 80117cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117d0:	2900      	cmp	r1, #0
 80117d2:	b096      	sub	sp, #88	; 0x58
 80117d4:	4614      	mov	r4, r2
 80117d6:	461d      	mov	r5, r3
 80117d8:	da07      	bge.n	80117ea <__swhatbuf_r+0x22>
 80117da:	2300      	movs	r3, #0
 80117dc:	602b      	str	r3, [r5, #0]
 80117de:	89b3      	ldrh	r3, [r6, #12]
 80117e0:	061a      	lsls	r2, r3, #24
 80117e2:	d410      	bmi.n	8011806 <__swhatbuf_r+0x3e>
 80117e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117e8:	e00e      	b.n	8011808 <__swhatbuf_r+0x40>
 80117ea:	466a      	mov	r2, sp
 80117ec:	f001 fc2e 	bl	801304c <_fstat_r>
 80117f0:	2800      	cmp	r0, #0
 80117f2:	dbf2      	blt.n	80117da <__swhatbuf_r+0x12>
 80117f4:	9a01      	ldr	r2, [sp, #4]
 80117f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80117fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80117fe:	425a      	negs	r2, r3
 8011800:	415a      	adcs	r2, r3
 8011802:	602a      	str	r2, [r5, #0]
 8011804:	e7ee      	b.n	80117e4 <__swhatbuf_r+0x1c>
 8011806:	2340      	movs	r3, #64	; 0x40
 8011808:	2000      	movs	r0, #0
 801180a:	6023      	str	r3, [r4, #0]
 801180c:	b016      	add	sp, #88	; 0x58
 801180e:	bd70      	pop	{r4, r5, r6, pc}

08011810 <__smakebuf_r>:
 8011810:	898b      	ldrh	r3, [r1, #12]
 8011812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011814:	079d      	lsls	r5, r3, #30
 8011816:	4606      	mov	r6, r0
 8011818:	460c      	mov	r4, r1
 801181a:	d507      	bpl.n	801182c <__smakebuf_r+0x1c>
 801181c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011820:	6023      	str	r3, [r4, #0]
 8011822:	6123      	str	r3, [r4, #16]
 8011824:	2301      	movs	r3, #1
 8011826:	6163      	str	r3, [r4, #20]
 8011828:	b002      	add	sp, #8
 801182a:	bd70      	pop	{r4, r5, r6, pc}
 801182c:	ab01      	add	r3, sp, #4
 801182e:	466a      	mov	r2, sp
 8011830:	f7ff ffca 	bl	80117c8 <__swhatbuf_r>
 8011834:	9900      	ldr	r1, [sp, #0]
 8011836:	4605      	mov	r5, r0
 8011838:	4630      	mov	r0, r6
 801183a:	f000 fca9 	bl	8012190 <_malloc_r>
 801183e:	b948      	cbnz	r0, 8011854 <__smakebuf_r+0x44>
 8011840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011844:	059a      	lsls	r2, r3, #22
 8011846:	d4ef      	bmi.n	8011828 <__smakebuf_r+0x18>
 8011848:	f023 0303 	bic.w	r3, r3, #3
 801184c:	f043 0302 	orr.w	r3, r3, #2
 8011850:	81a3      	strh	r3, [r4, #12]
 8011852:	e7e3      	b.n	801181c <__smakebuf_r+0xc>
 8011854:	4b0d      	ldr	r3, [pc, #52]	; (801188c <__smakebuf_r+0x7c>)
 8011856:	62b3      	str	r3, [r6, #40]	; 0x28
 8011858:	89a3      	ldrh	r3, [r4, #12]
 801185a:	6020      	str	r0, [r4, #0]
 801185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011860:	81a3      	strh	r3, [r4, #12]
 8011862:	9b00      	ldr	r3, [sp, #0]
 8011864:	6163      	str	r3, [r4, #20]
 8011866:	9b01      	ldr	r3, [sp, #4]
 8011868:	6120      	str	r0, [r4, #16]
 801186a:	b15b      	cbz	r3, 8011884 <__smakebuf_r+0x74>
 801186c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011870:	4630      	mov	r0, r6
 8011872:	f001 fbfd 	bl	8013070 <_isatty_r>
 8011876:	b128      	cbz	r0, 8011884 <__smakebuf_r+0x74>
 8011878:	89a3      	ldrh	r3, [r4, #12]
 801187a:	f023 0303 	bic.w	r3, r3, #3
 801187e:	f043 0301 	orr.w	r3, r3, #1
 8011882:	81a3      	strh	r3, [r4, #12]
 8011884:	89a3      	ldrh	r3, [r4, #12]
 8011886:	431d      	orrs	r5, r3
 8011888:	81a5      	strh	r5, [r4, #12]
 801188a:	e7cd      	b.n	8011828 <__smakebuf_r+0x18>
 801188c:	08010fc9 	.word	0x08010fc9

08011890 <malloc>:
 8011890:	4b02      	ldr	r3, [pc, #8]	; (801189c <malloc+0xc>)
 8011892:	4601      	mov	r1, r0
 8011894:	6818      	ldr	r0, [r3, #0]
 8011896:	f000 bc7b 	b.w	8012190 <_malloc_r>
 801189a:	bf00      	nop
 801189c:	2000000c 	.word	0x2000000c

080118a0 <__ascii_mbtowc>:
 80118a0:	b082      	sub	sp, #8
 80118a2:	b901      	cbnz	r1, 80118a6 <__ascii_mbtowc+0x6>
 80118a4:	a901      	add	r1, sp, #4
 80118a6:	b142      	cbz	r2, 80118ba <__ascii_mbtowc+0x1a>
 80118a8:	b14b      	cbz	r3, 80118be <__ascii_mbtowc+0x1e>
 80118aa:	7813      	ldrb	r3, [r2, #0]
 80118ac:	600b      	str	r3, [r1, #0]
 80118ae:	7812      	ldrb	r2, [r2, #0]
 80118b0:	1c10      	adds	r0, r2, #0
 80118b2:	bf18      	it	ne
 80118b4:	2001      	movne	r0, #1
 80118b6:	b002      	add	sp, #8
 80118b8:	4770      	bx	lr
 80118ba:	4610      	mov	r0, r2
 80118bc:	e7fb      	b.n	80118b6 <__ascii_mbtowc+0x16>
 80118be:	f06f 0001 	mvn.w	r0, #1
 80118c2:	e7f8      	b.n	80118b6 <__ascii_mbtowc+0x16>

080118c4 <memcpy>:
 80118c4:	b510      	push	{r4, lr}
 80118c6:	1e43      	subs	r3, r0, #1
 80118c8:	440a      	add	r2, r1
 80118ca:	4291      	cmp	r1, r2
 80118cc:	d100      	bne.n	80118d0 <memcpy+0xc>
 80118ce:	bd10      	pop	{r4, pc}
 80118d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118d8:	e7f7      	b.n	80118ca <memcpy+0x6>

080118da <_Balloc>:
 80118da:	b570      	push	{r4, r5, r6, lr}
 80118dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80118de:	4604      	mov	r4, r0
 80118e0:	460e      	mov	r6, r1
 80118e2:	b93d      	cbnz	r5, 80118f4 <_Balloc+0x1a>
 80118e4:	2010      	movs	r0, #16
 80118e6:	f7ff ffd3 	bl	8011890 <malloc>
 80118ea:	6260      	str	r0, [r4, #36]	; 0x24
 80118ec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80118f0:	6005      	str	r5, [r0, #0]
 80118f2:	60c5      	str	r5, [r0, #12]
 80118f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80118f6:	68eb      	ldr	r3, [r5, #12]
 80118f8:	b183      	cbz	r3, 801191c <_Balloc+0x42>
 80118fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118fc:	68db      	ldr	r3, [r3, #12]
 80118fe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011902:	b9b8      	cbnz	r0, 8011934 <_Balloc+0x5a>
 8011904:	2101      	movs	r1, #1
 8011906:	fa01 f506 	lsl.w	r5, r1, r6
 801190a:	1d6a      	adds	r2, r5, #5
 801190c:	0092      	lsls	r2, r2, #2
 801190e:	4620      	mov	r0, r4
 8011910:	f000 fbe1 	bl	80120d6 <_calloc_r>
 8011914:	b160      	cbz	r0, 8011930 <_Balloc+0x56>
 8011916:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801191a:	e00e      	b.n	801193a <_Balloc+0x60>
 801191c:	2221      	movs	r2, #33	; 0x21
 801191e:	2104      	movs	r1, #4
 8011920:	4620      	mov	r0, r4
 8011922:	f000 fbd8 	bl	80120d6 <_calloc_r>
 8011926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011928:	60e8      	str	r0, [r5, #12]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d1e4      	bne.n	80118fa <_Balloc+0x20>
 8011930:	2000      	movs	r0, #0
 8011932:	bd70      	pop	{r4, r5, r6, pc}
 8011934:	6802      	ldr	r2, [r0, #0]
 8011936:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801193a:	2300      	movs	r3, #0
 801193c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011940:	e7f7      	b.n	8011932 <_Balloc+0x58>

08011942 <_Bfree>:
 8011942:	b570      	push	{r4, r5, r6, lr}
 8011944:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011946:	4606      	mov	r6, r0
 8011948:	460d      	mov	r5, r1
 801194a:	b93c      	cbnz	r4, 801195c <_Bfree+0x1a>
 801194c:	2010      	movs	r0, #16
 801194e:	f7ff ff9f 	bl	8011890 <malloc>
 8011952:	6270      	str	r0, [r6, #36]	; 0x24
 8011954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011958:	6004      	str	r4, [r0, #0]
 801195a:	60c4      	str	r4, [r0, #12]
 801195c:	b13d      	cbz	r5, 801196e <_Bfree+0x2c>
 801195e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011960:	686a      	ldr	r2, [r5, #4]
 8011962:	68db      	ldr	r3, [r3, #12]
 8011964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011968:	6029      	str	r1, [r5, #0]
 801196a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801196e:	bd70      	pop	{r4, r5, r6, pc}

08011970 <__multadd>:
 8011970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011974:	690d      	ldr	r5, [r1, #16]
 8011976:	461f      	mov	r7, r3
 8011978:	4606      	mov	r6, r0
 801197a:	460c      	mov	r4, r1
 801197c:	f101 0c14 	add.w	ip, r1, #20
 8011980:	2300      	movs	r3, #0
 8011982:	f8dc 0000 	ldr.w	r0, [ip]
 8011986:	b281      	uxth	r1, r0
 8011988:	fb02 7101 	mla	r1, r2, r1, r7
 801198c:	0c0f      	lsrs	r7, r1, #16
 801198e:	0c00      	lsrs	r0, r0, #16
 8011990:	fb02 7000 	mla	r0, r2, r0, r7
 8011994:	b289      	uxth	r1, r1
 8011996:	3301      	adds	r3, #1
 8011998:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801199c:	429d      	cmp	r5, r3
 801199e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80119a2:	f84c 1b04 	str.w	r1, [ip], #4
 80119a6:	dcec      	bgt.n	8011982 <__multadd+0x12>
 80119a8:	b1d7      	cbz	r7, 80119e0 <__multadd+0x70>
 80119aa:	68a3      	ldr	r3, [r4, #8]
 80119ac:	42ab      	cmp	r3, r5
 80119ae:	dc12      	bgt.n	80119d6 <__multadd+0x66>
 80119b0:	6861      	ldr	r1, [r4, #4]
 80119b2:	4630      	mov	r0, r6
 80119b4:	3101      	adds	r1, #1
 80119b6:	f7ff ff90 	bl	80118da <_Balloc>
 80119ba:	6922      	ldr	r2, [r4, #16]
 80119bc:	3202      	adds	r2, #2
 80119be:	f104 010c 	add.w	r1, r4, #12
 80119c2:	4680      	mov	r8, r0
 80119c4:	0092      	lsls	r2, r2, #2
 80119c6:	300c      	adds	r0, #12
 80119c8:	f7ff ff7c 	bl	80118c4 <memcpy>
 80119cc:	4621      	mov	r1, r4
 80119ce:	4630      	mov	r0, r6
 80119d0:	f7ff ffb7 	bl	8011942 <_Bfree>
 80119d4:	4644      	mov	r4, r8
 80119d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80119da:	3501      	adds	r5, #1
 80119dc:	615f      	str	r7, [r3, #20]
 80119de:	6125      	str	r5, [r4, #16]
 80119e0:	4620      	mov	r0, r4
 80119e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119e6 <__s2b>:
 80119e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119ea:	460c      	mov	r4, r1
 80119ec:	4615      	mov	r5, r2
 80119ee:	461f      	mov	r7, r3
 80119f0:	2209      	movs	r2, #9
 80119f2:	3308      	adds	r3, #8
 80119f4:	4606      	mov	r6, r0
 80119f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80119fa:	2100      	movs	r1, #0
 80119fc:	2201      	movs	r2, #1
 80119fe:	429a      	cmp	r2, r3
 8011a00:	db20      	blt.n	8011a44 <__s2b+0x5e>
 8011a02:	4630      	mov	r0, r6
 8011a04:	f7ff ff69 	bl	80118da <_Balloc>
 8011a08:	9b08      	ldr	r3, [sp, #32]
 8011a0a:	6143      	str	r3, [r0, #20]
 8011a0c:	2d09      	cmp	r5, #9
 8011a0e:	f04f 0301 	mov.w	r3, #1
 8011a12:	6103      	str	r3, [r0, #16]
 8011a14:	dd19      	ble.n	8011a4a <__s2b+0x64>
 8011a16:	f104 0809 	add.w	r8, r4, #9
 8011a1a:	46c1      	mov	r9, r8
 8011a1c:	442c      	add	r4, r5
 8011a1e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011a22:	4601      	mov	r1, r0
 8011a24:	3b30      	subs	r3, #48	; 0x30
 8011a26:	220a      	movs	r2, #10
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f7ff ffa1 	bl	8011970 <__multadd>
 8011a2e:	45a1      	cmp	r9, r4
 8011a30:	d1f5      	bne.n	8011a1e <__s2b+0x38>
 8011a32:	eb08 0405 	add.w	r4, r8, r5
 8011a36:	3c08      	subs	r4, #8
 8011a38:	1b2d      	subs	r5, r5, r4
 8011a3a:	1963      	adds	r3, r4, r5
 8011a3c:	42bb      	cmp	r3, r7
 8011a3e:	db07      	blt.n	8011a50 <__s2b+0x6a>
 8011a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a44:	0052      	lsls	r2, r2, #1
 8011a46:	3101      	adds	r1, #1
 8011a48:	e7d9      	b.n	80119fe <__s2b+0x18>
 8011a4a:	340a      	adds	r4, #10
 8011a4c:	2509      	movs	r5, #9
 8011a4e:	e7f3      	b.n	8011a38 <__s2b+0x52>
 8011a50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a54:	4601      	mov	r1, r0
 8011a56:	3b30      	subs	r3, #48	; 0x30
 8011a58:	220a      	movs	r2, #10
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	f7ff ff88 	bl	8011970 <__multadd>
 8011a60:	e7eb      	b.n	8011a3a <__s2b+0x54>

08011a62 <__hi0bits>:
 8011a62:	0c02      	lsrs	r2, r0, #16
 8011a64:	0412      	lsls	r2, r2, #16
 8011a66:	4603      	mov	r3, r0
 8011a68:	b9b2      	cbnz	r2, 8011a98 <__hi0bits+0x36>
 8011a6a:	0403      	lsls	r3, r0, #16
 8011a6c:	2010      	movs	r0, #16
 8011a6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011a72:	bf04      	itt	eq
 8011a74:	021b      	lsleq	r3, r3, #8
 8011a76:	3008      	addeq	r0, #8
 8011a78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011a7c:	bf04      	itt	eq
 8011a7e:	011b      	lsleq	r3, r3, #4
 8011a80:	3004      	addeq	r0, #4
 8011a82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011a86:	bf04      	itt	eq
 8011a88:	009b      	lsleq	r3, r3, #2
 8011a8a:	3002      	addeq	r0, #2
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	db06      	blt.n	8011a9e <__hi0bits+0x3c>
 8011a90:	005b      	lsls	r3, r3, #1
 8011a92:	d503      	bpl.n	8011a9c <__hi0bits+0x3a>
 8011a94:	3001      	adds	r0, #1
 8011a96:	4770      	bx	lr
 8011a98:	2000      	movs	r0, #0
 8011a9a:	e7e8      	b.n	8011a6e <__hi0bits+0xc>
 8011a9c:	2020      	movs	r0, #32
 8011a9e:	4770      	bx	lr

08011aa0 <__lo0bits>:
 8011aa0:	6803      	ldr	r3, [r0, #0]
 8011aa2:	f013 0207 	ands.w	r2, r3, #7
 8011aa6:	4601      	mov	r1, r0
 8011aa8:	d00b      	beq.n	8011ac2 <__lo0bits+0x22>
 8011aaa:	07da      	lsls	r2, r3, #31
 8011aac:	d423      	bmi.n	8011af6 <__lo0bits+0x56>
 8011aae:	0798      	lsls	r0, r3, #30
 8011ab0:	bf49      	itett	mi
 8011ab2:	085b      	lsrmi	r3, r3, #1
 8011ab4:	089b      	lsrpl	r3, r3, #2
 8011ab6:	2001      	movmi	r0, #1
 8011ab8:	600b      	strmi	r3, [r1, #0]
 8011aba:	bf5c      	itt	pl
 8011abc:	600b      	strpl	r3, [r1, #0]
 8011abe:	2002      	movpl	r0, #2
 8011ac0:	4770      	bx	lr
 8011ac2:	b298      	uxth	r0, r3
 8011ac4:	b9a8      	cbnz	r0, 8011af2 <__lo0bits+0x52>
 8011ac6:	0c1b      	lsrs	r3, r3, #16
 8011ac8:	2010      	movs	r0, #16
 8011aca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011ace:	bf04      	itt	eq
 8011ad0:	0a1b      	lsreq	r3, r3, #8
 8011ad2:	3008      	addeq	r0, #8
 8011ad4:	071a      	lsls	r2, r3, #28
 8011ad6:	bf04      	itt	eq
 8011ad8:	091b      	lsreq	r3, r3, #4
 8011ada:	3004      	addeq	r0, #4
 8011adc:	079a      	lsls	r2, r3, #30
 8011ade:	bf04      	itt	eq
 8011ae0:	089b      	lsreq	r3, r3, #2
 8011ae2:	3002      	addeq	r0, #2
 8011ae4:	07da      	lsls	r2, r3, #31
 8011ae6:	d402      	bmi.n	8011aee <__lo0bits+0x4e>
 8011ae8:	085b      	lsrs	r3, r3, #1
 8011aea:	d006      	beq.n	8011afa <__lo0bits+0x5a>
 8011aec:	3001      	adds	r0, #1
 8011aee:	600b      	str	r3, [r1, #0]
 8011af0:	4770      	bx	lr
 8011af2:	4610      	mov	r0, r2
 8011af4:	e7e9      	b.n	8011aca <__lo0bits+0x2a>
 8011af6:	2000      	movs	r0, #0
 8011af8:	4770      	bx	lr
 8011afa:	2020      	movs	r0, #32
 8011afc:	4770      	bx	lr

08011afe <__i2b>:
 8011afe:	b510      	push	{r4, lr}
 8011b00:	460c      	mov	r4, r1
 8011b02:	2101      	movs	r1, #1
 8011b04:	f7ff fee9 	bl	80118da <_Balloc>
 8011b08:	2201      	movs	r2, #1
 8011b0a:	6144      	str	r4, [r0, #20]
 8011b0c:	6102      	str	r2, [r0, #16]
 8011b0e:	bd10      	pop	{r4, pc}

08011b10 <__multiply>:
 8011b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b14:	4614      	mov	r4, r2
 8011b16:	690a      	ldr	r2, [r1, #16]
 8011b18:	6923      	ldr	r3, [r4, #16]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	bfb8      	it	lt
 8011b1e:	460b      	movlt	r3, r1
 8011b20:	4688      	mov	r8, r1
 8011b22:	bfbc      	itt	lt
 8011b24:	46a0      	movlt	r8, r4
 8011b26:	461c      	movlt	r4, r3
 8011b28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011b2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011b30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011b38:	eb07 0609 	add.w	r6, r7, r9
 8011b3c:	42b3      	cmp	r3, r6
 8011b3e:	bfb8      	it	lt
 8011b40:	3101      	addlt	r1, #1
 8011b42:	f7ff feca 	bl	80118da <_Balloc>
 8011b46:	f100 0514 	add.w	r5, r0, #20
 8011b4a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011b4e:	462b      	mov	r3, r5
 8011b50:	2200      	movs	r2, #0
 8011b52:	4573      	cmp	r3, lr
 8011b54:	d316      	bcc.n	8011b84 <__multiply+0x74>
 8011b56:	f104 0214 	add.w	r2, r4, #20
 8011b5a:	f108 0114 	add.w	r1, r8, #20
 8011b5e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011b62:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	9b00      	ldr	r3, [sp, #0]
 8011b6a:	9201      	str	r2, [sp, #4]
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	d80c      	bhi.n	8011b8a <__multiply+0x7a>
 8011b70:	2e00      	cmp	r6, #0
 8011b72:	dd03      	ble.n	8011b7c <__multiply+0x6c>
 8011b74:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d05d      	beq.n	8011c38 <__multiply+0x128>
 8011b7c:	6106      	str	r6, [r0, #16]
 8011b7e:	b003      	add	sp, #12
 8011b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b84:	f843 2b04 	str.w	r2, [r3], #4
 8011b88:	e7e3      	b.n	8011b52 <__multiply+0x42>
 8011b8a:	f8b2 b000 	ldrh.w	fp, [r2]
 8011b8e:	f1bb 0f00 	cmp.w	fp, #0
 8011b92:	d023      	beq.n	8011bdc <__multiply+0xcc>
 8011b94:	4689      	mov	r9, r1
 8011b96:	46ac      	mov	ip, r5
 8011b98:	f04f 0800 	mov.w	r8, #0
 8011b9c:	f859 4b04 	ldr.w	r4, [r9], #4
 8011ba0:	f8dc a000 	ldr.w	sl, [ip]
 8011ba4:	b2a3      	uxth	r3, r4
 8011ba6:	fa1f fa8a 	uxth.w	sl, sl
 8011baa:	fb0b a303 	mla	r3, fp, r3, sl
 8011bae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011bb2:	f8dc 4000 	ldr.w	r4, [ip]
 8011bb6:	4443      	add	r3, r8
 8011bb8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011bbc:	fb0b 840a 	mla	r4, fp, sl, r8
 8011bc0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011bc4:	46e2      	mov	sl, ip
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011bcc:	454f      	cmp	r7, r9
 8011bce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011bd2:	f84a 3b04 	str.w	r3, [sl], #4
 8011bd6:	d82b      	bhi.n	8011c30 <__multiply+0x120>
 8011bd8:	f8cc 8004 	str.w	r8, [ip, #4]
 8011bdc:	9b01      	ldr	r3, [sp, #4]
 8011bde:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011be2:	3204      	adds	r2, #4
 8011be4:	f1ba 0f00 	cmp.w	sl, #0
 8011be8:	d020      	beq.n	8011c2c <__multiply+0x11c>
 8011bea:	682b      	ldr	r3, [r5, #0]
 8011bec:	4689      	mov	r9, r1
 8011bee:	46a8      	mov	r8, r5
 8011bf0:	f04f 0b00 	mov.w	fp, #0
 8011bf4:	f8b9 c000 	ldrh.w	ip, [r9]
 8011bf8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011bfc:	fb0a 440c 	mla	r4, sl, ip, r4
 8011c00:	445c      	add	r4, fp
 8011c02:	46c4      	mov	ip, r8
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011c0a:	f84c 3b04 	str.w	r3, [ip], #4
 8011c0e:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c12:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011c16:	0c1b      	lsrs	r3, r3, #16
 8011c18:	fb0a b303 	mla	r3, sl, r3, fp
 8011c1c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011c20:	454f      	cmp	r7, r9
 8011c22:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011c26:	d805      	bhi.n	8011c34 <__multiply+0x124>
 8011c28:	f8c8 3004 	str.w	r3, [r8, #4]
 8011c2c:	3504      	adds	r5, #4
 8011c2e:	e79b      	b.n	8011b68 <__multiply+0x58>
 8011c30:	46d4      	mov	ip, sl
 8011c32:	e7b3      	b.n	8011b9c <__multiply+0x8c>
 8011c34:	46e0      	mov	r8, ip
 8011c36:	e7dd      	b.n	8011bf4 <__multiply+0xe4>
 8011c38:	3e01      	subs	r6, #1
 8011c3a:	e799      	b.n	8011b70 <__multiply+0x60>

08011c3c <__pow5mult>:
 8011c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c40:	4615      	mov	r5, r2
 8011c42:	f012 0203 	ands.w	r2, r2, #3
 8011c46:	4606      	mov	r6, r0
 8011c48:	460f      	mov	r7, r1
 8011c4a:	d007      	beq.n	8011c5c <__pow5mult+0x20>
 8011c4c:	3a01      	subs	r2, #1
 8011c4e:	4c21      	ldr	r4, [pc, #132]	; (8011cd4 <__pow5mult+0x98>)
 8011c50:	2300      	movs	r3, #0
 8011c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c56:	f7ff fe8b 	bl	8011970 <__multadd>
 8011c5a:	4607      	mov	r7, r0
 8011c5c:	10ad      	asrs	r5, r5, #2
 8011c5e:	d035      	beq.n	8011ccc <__pow5mult+0x90>
 8011c60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011c62:	b93c      	cbnz	r4, 8011c74 <__pow5mult+0x38>
 8011c64:	2010      	movs	r0, #16
 8011c66:	f7ff fe13 	bl	8011890 <malloc>
 8011c6a:	6270      	str	r0, [r6, #36]	; 0x24
 8011c6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c70:	6004      	str	r4, [r0, #0]
 8011c72:	60c4      	str	r4, [r0, #12]
 8011c74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011c78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c7c:	b94c      	cbnz	r4, 8011c92 <__pow5mult+0x56>
 8011c7e:	f240 2171 	movw	r1, #625	; 0x271
 8011c82:	4630      	mov	r0, r6
 8011c84:	f7ff ff3b 	bl	8011afe <__i2b>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c8e:	4604      	mov	r4, r0
 8011c90:	6003      	str	r3, [r0, #0]
 8011c92:	f04f 0800 	mov.w	r8, #0
 8011c96:	07eb      	lsls	r3, r5, #31
 8011c98:	d50a      	bpl.n	8011cb0 <__pow5mult+0x74>
 8011c9a:	4639      	mov	r1, r7
 8011c9c:	4622      	mov	r2, r4
 8011c9e:	4630      	mov	r0, r6
 8011ca0:	f7ff ff36 	bl	8011b10 <__multiply>
 8011ca4:	4639      	mov	r1, r7
 8011ca6:	4681      	mov	r9, r0
 8011ca8:	4630      	mov	r0, r6
 8011caa:	f7ff fe4a 	bl	8011942 <_Bfree>
 8011cae:	464f      	mov	r7, r9
 8011cb0:	106d      	asrs	r5, r5, #1
 8011cb2:	d00b      	beq.n	8011ccc <__pow5mult+0x90>
 8011cb4:	6820      	ldr	r0, [r4, #0]
 8011cb6:	b938      	cbnz	r0, 8011cc8 <__pow5mult+0x8c>
 8011cb8:	4622      	mov	r2, r4
 8011cba:	4621      	mov	r1, r4
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	f7ff ff27 	bl	8011b10 <__multiply>
 8011cc2:	6020      	str	r0, [r4, #0]
 8011cc4:	f8c0 8000 	str.w	r8, [r0]
 8011cc8:	4604      	mov	r4, r0
 8011cca:	e7e4      	b.n	8011c96 <__pow5mult+0x5a>
 8011ccc:	4638      	mov	r0, r7
 8011cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cd2:	bf00      	nop
 8011cd4:	080138d0 	.word	0x080138d0

08011cd8 <__lshift>:
 8011cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cdc:	460c      	mov	r4, r1
 8011cde:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ce2:	6923      	ldr	r3, [r4, #16]
 8011ce4:	6849      	ldr	r1, [r1, #4]
 8011ce6:	eb0a 0903 	add.w	r9, sl, r3
 8011cea:	68a3      	ldr	r3, [r4, #8]
 8011cec:	4607      	mov	r7, r0
 8011cee:	4616      	mov	r6, r2
 8011cf0:	f109 0501 	add.w	r5, r9, #1
 8011cf4:	42ab      	cmp	r3, r5
 8011cf6:	db32      	blt.n	8011d5e <__lshift+0x86>
 8011cf8:	4638      	mov	r0, r7
 8011cfa:	f7ff fdee 	bl	80118da <_Balloc>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	4680      	mov	r8, r0
 8011d02:	f100 0114 	add.w	r1, r0, #20
 8011d06:	461a      	mov	r2, r3
 8011d08:	4553      	cmp	r3, sl
 8011d0a:	db2b      	blt.n	8011d64 <__lshift+0x8c>
 8011d0c:	6920      	ldr	r0, [r4, #16]
 8011d0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d12:	f104 0314 	add.w	r3, r4, #20
 8011d16:	f016 021f 	ands.w	r2, r6, #31
 8011d1a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d1e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011d22:	d025      	beq.n	8011d70 <__lshift+0x98>
 8011d24:	f1c2 0e20 	rsb	lr, r2, #32
 8011d28:	2000      	movs	r0, #0
 8011d2a:	681e      	ldr	r6, [r3, #0]
 8011d2c:	468a      	mov	sl, r1
 8011d2e:	4096      	lsls	r6, r2
 8011d30:	4330      	orrs	r0, r6
 8011d32:	f84a 0b04 	str.w	r0, [sl], #4
 8011d36:	f853 0b04 	ldr.w	r0, [r3], #4
 8011d3a:	459c      	cmp	ip, r3
 8011d3c:	fa20 f00e 	lsr.w	r0, r0, lr
 8011d40:	d814      	bhi.n	8011d6c <__lshift+0x94>
 8011d42:	6048      	str	r0, [r1, #4]
 8011d44:	b108      	cbz	r0, 8011d4a <__lshift+0x72>
 8011d46:	f109 0502 	add.w	r5, r9, #2
 8011d4a:	3d01      	subs	r5, #1
 8011d4c:	4638      	mov	r0, r7
 8011d4e:	f8c8 5010 	str.w	r5, [r8, #16]
 8011d52:	4621      	mov	r1, r4
 8011d54:	f7ff fdf5 	bl	8011942 <_Bfree>
 8011d58:	4640      	mov	r0, r8
 8011d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d5e:	3101      	adds	r1, #1
 8011d60:	005b      	lsls	r3, r3, #1
 8011d62:	e7c7      	b.n	8011cf4 <__lshift+0x1c>
 8011d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011d68:	3301      	adds	r3, #1
 8011d6a:	e7cd      	b.n	8011d08 <__lshift+0x30>
 8011d6c:	4651      	mov	r1, sl
 8011d6e:	e7dc      	b.n	8011d2a <__lshift+0x52>
 8011d70:	3904      	subs	r1, #4
 8011d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d76:	f841 2f04 	str.w	r2, [r1, #4]!
 8011d7a:	459c      	cmp	ip, r3
 8011d7c:	d8f9      	bhi.n	8011d72 <__lshift+0x9a>
 8011d7e:	e7e4      	b.n	8011d4a <__lshift+0x72>

08011d80 <__mcmp>:
 8011d80:	6903      	ldr	r3, [r0, #16]
 8011d82:	690a      	ldr	r2, [r1, #16]
 8011d84:	1a9b      	subs	r3, r3, r2
 8011d86:	b530      	push	{r4, r5, lr}
 8011d88:	d10c      	bne.n	8011da4 <__mcmp+0x24>
 8011d8a:	0092      	lsls	r2, r2, #2
 8011d8c:	3014      	adds	r0, #20
 8011d8e:	3114      	adds	r1, #20
 8011d90:	1884      	adds	r4, r0, r2
 8011d92:	4411      	add	r1, r2
 8011d94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011d98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011d9c:	4295      	cmp	r5, r2
 8011d9e:	d003      	beq.n	8011da8 <__mcmp+0x28>
 8011da0:	d305      	bcc.n	8011dae <__mcmp+0x2e>
 8011da2:	2301      	movs	r3, #1
 8011da4:	4618      	mov	r0, r3
 8011da6:	bd30      	pop	{r4, r5, pc}
 8011da8:	42a0      	cmp	r0, r4
 8011daa:	d3f3      	bcc.n	8011d94 <__mcmp+0x14>
 8011dac:	e7fa      	b.n	8011da4 <__mcmp+0x24>
 8011dae:	f04f 33ff 	mov.w	r3, #4294967295
 8011db2:	e7f7      	b.n	8011da4 <__mcmp+0x24>

08011db4 <__mdiff>:
 8011db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011db8:	460d      	mov	r5, r1
 8011dba:	4607      	mov	r7, r0
 8011dbc:	4611      	mov	r1, r2
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	4614      	mov	r4, r2
 8011dc2:	f7ff ffdd 	bl	8011d80 <__mcmp>
 8011dc6:	1e06      	subs	r6, r0, #0
 8011dc8:	d108      	bne.n	8011ddc <__mdiff+0x28>
 8011dca:	4631      	mov	r1, r6
 8011dcc:	4638      	mov	r0, r7
 8011dce:	f7ff fd84 	bl	80118da <_Balloc>
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ddc:	bfa4      	itt	ge
 8011dde:	4623      	movge	r3, r4
 8011de0:	462c      	movge	r4, r5
 8011de2:	4638      	mov	r0, r7
 8011de4:	6861      	ldr	r1, [r4, #4]
 8011de6:	bfa6      	itte	ge
 8011de8:	461d      	movge	r5, r3
 8011dea:	2600      	movge	r6, #0
 8011dec:	2601      	movlt	r6, #1
 8011dee:	f7ff fd74 	bl	80118da <_Balloc>
 8011df2:	692b      	ldr	r3, [r5, #16]
 8011df4:	60c6      	str	r6, [r0, #12]
 8011df6:	6926      	ldr	r6, [r4, #16]
 8011df8:	f105 0914 	add.w	r9, r5, #20
 8011dfc:	f104 0214 	add.w	r2, r4, #20
 8011e00:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011e04:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011e08:	f100 0514 	add.w	r5, r0, #20
 8011e0c:	f04f 0e00 	mov.w	lr, #0
 8011e10:	f852 ab04 	ldr.w	sl, [r2], #4
 8011e14:	f859 4b04 	ldr.w	r4, [r9], #4
 8011e18:	fa1e f18a 	uxtah	r1, lr, sl
 8011e1c:	b2a3      	uxth	r3, r4
 8011e1e:	1ac9      	subs	r1, r1, r3
 8011e20:	0c23      	lsrs	r3, r4, #16
 8011e22:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011e26:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011e2a:	b289      	uxth	r1, r1
 8011e2c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011e30:	45c8      	cmp	r8, r9
 8011e32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011e36:	4694      	mov	ip, r2
 8011e38:	f845 3b04 	str.w	r3, [r5], #4
 8011e3c:	d8e8      	bhi.n	8011e10 <__mdiff+0x5c>
 8011e3e:	45bc      	cmp	ip, r7
 8011e40:	d304      	bcc.n	8011e4c <__mdiff+0x98>
 8011e42:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011e46:	b183      	cbz	r3, 8011e6a <__mdiff+0xb6>
 8011e48:	6106      	str	r6, [r0, #16]
 8011e4a:	e7c5      	b.n	8011dd8 <__mdiff+0x24>
 8011e4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011e50:	fa1e f381 	uxtah	r3, lr, r1
 8011e54:	141a      	asrs	r2, r3, #16
 8011e56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e60:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011e64:	f845 3b04 	str.w	r3, [r5], #4
 8011e68:	e7e9      	b.n	8011e3e <__mdiff+0x8a>
 8011e6a:	3e01      	subs	r6, #1
 8011e6c:	e7e9      	b.n	8011e42 <__mdiff+0x8e>
	...

08011e70 <__ulp>:
 8011e70:	4b12      	ldr	r3, [pc, #72]	; (8011ebc <__ulp+0x4c>)
 8011e72:	ee10 2a90 	vmov	r2, s1
 8011e76:	401a      	ands	r2, r3
 8011e78:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	dd04      	ble.n	8011e8a <__ulp+0x1a>
 8011e80:	2000      	movs	r0, #0
 8011e82:	4619      	mov	r1, r3
 8011e84:	ec41 0b10 	vmov	d0, r0, r1
 8011e88:	4770      	bx	lr
 8011e8a:	425b      	negs	r3, r3
 8011e8c:	151b      	asrs	r3, r3, #20
 8011e8e:	2b13      	cmp	r3, #19
 8011e90:	f04f 0000 	mov.w	r0, #0
 8011e94:	f04f 0100 	mov.w	r1, #0
 8011e98:	dc04      	bgt.n	8011ea4 <__ulp+0x34>
 8011e9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011e9e:	fa42 f103 	asr.w	r1, r2, r3
 8011ea2:	e7ef      	b.n	8011e84 <__ulp+0x14>
 8011ea4:	3b14      	subs	r3, #20
 8011ea6:	2b1e      	cmp	r3, #30
 8011ea8:	f04f 0201 	mov.w	r2, #1
 8011eac:	bfda      	itte	le
 8011eae:	f1c3 031f 	rsble	r3, r3, #31
 8011eb2:	fa02 f303 	lslle.w	r3, r2, r3
 8011eb6:	4613      	movgt	r3, r2
 8011eb8:	4618      	mov	r0, r3
 8011eba:	e7e3      	b.n	8011e84 <__ulp+0x14>
 8011ebc:	7ff00000 	.word	0x7ff00000

08011ec0 <__b2d>:
 8011ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ec2:	6905      	ldr	r5, [r0, #16]
 8011ec4:	f100 0714 	add.w	r7, r0, #20
 8011ec8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011ecc:	1f2e      	subs	r6, r5, #4
 8011ece:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f7ff fdc5 	bl	8011a62 <__hi0bits>
 8011ed8:	f1c0 0320 	rsb	r3, r0, #32
 8011edc:	280a      	cmp	r0, #10
 8011ede:	600b      	str	r3, [r1, #0]
 8011ee0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011f58 <__b2d+0x98>
 8011ee4:	dc14      	bgt.n	8011f10 <__b2d+0x50>
 8011ee6:	f1c0 0e0b 	rsb	lr, r0, #11
 8011eea:	fa24 f10e 	lsr.w	r1, r4, lr
 8011eee:	42b7      	cmp	r7, r6
 8011ef0:	ea41 030c 	orr.w	r3, r1, ip
 8011ef4:	bf34      	ite	cc
 8011ef6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011efa:	2100      	movcs	r1, #0
 8011efc:	3015      	adds	r0, #21
 8011efe:	fa04 f000 	lsl.w	r0, r4, r0
 8011f02:	fa21 f10e 	lsr.w	r1, r1, lr
 8011f06:	ea40 0201 	orr.w	r2, r0, r1
 8011f0a:	ec43 2b10 	vmov	d0, r2, r3
 8011f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f10:	42b7      	cmp	r7, r6
 8011f12:	bf3a      	itte	cc
 8011f14:	f1a5 0608 	subcc.w	r6, r5, #8
 8011f18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011f1c:	2100      	movcs	r1, #0
 8011f1e:	380b      	subs	r0, #11
 8011f20:	d015      	beq.n	8011f4e <__b2d+0x8e>
 8011f22:	4084      	lsls	r4, r0
 8011f24:	f1c0 0520 	rsb	r5, r0, #32
 8011f28:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011f2c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8011f30:	42be      	cmp	r6, r7
 8011f32:	fa21 fc05 	lsr.w	ip, r1, r5
 8011f36:	ea44 030c 	orr.w	r3, r4, ip
 8011f3a:	bf8c      	ite	hi
 8011f3c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011f40:	2400      	movls	r4, #0
 8011f42:	fa01 f000 	lsl.w	r0, r1, r0
 8011f46:	40ec      	lsrs	r4, r5
 8011f48:	ea40 0204 	orr.w	r2, r0, r4
 8011f4c:	e7dd      	b.n	8011f0a <__b2d+0x4a>
 8011f4e:	ea44 030c 	orr.w	r3, r4, ip
 8011f52:	460a      	mov	r2, r1
 8011f54:	e7d9      	b.n	8011f0a <__b2d+0x4a>
 8011f56:	bf00      	nop
 8011f58:	3ff00000 	.word	0x3ff00000

08011f5c <__d2b>:
 8011f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f60:	460e      	mov	r6, r1
 8011f62:	2101      	movs	r1, #1
 8011f64:	ec59 8b10 	vmov	r8, r9, d0
 8011f68:	4615      	mov	r5, r2
 8011f6a:	f7ff fcb6 	bl	80118da <_Balloc>
 8011f6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011f72:	4607      	mov	r7, r0
 8011f74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f78:	bb34      	cbnz	r4, 8011fc8 <__d2b+0x6c>
 8011f7a:	9301      	str	r3, [sp, #4]
 8011f7c:	f1b8 0300 	subs.w	r3, r8, #0
 8011f80:	d027      	beq.n	8011fd2 <__d2b+0x76>
 8011f82:	a802      	add	r0, sp, #8
 8011f84:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011f88:	f7ff fd8a 	bl	8011aa0 <__lo0bits>
 8011f8c:	9900      	ldr	r1, [sp, #0]
 8011f8e:	b1f0      	cbz	r0, 8011fce <__d2b+0x72>
 8011f90:	9a01      	ldr	r2, [sp, #4]
 8011f92:	f1c0 0320 	rsb	r3, r0, #32
 8011f96:	fa02 f303 	lsl.w	r3, r2, r3
 8011f9a:	430b      	orrs	r3, r1
 8011f9c:	40c2      	lsrs	r2, r0
 8011f9e:	617b      	str	r3, [r7, #20]
 8011fa0:	9201      	str	r2, [sp, #4]
 8011fa2:	9b01      	ldr	r3, [sp, #4]
 8011fa4:	61bb      	str	r3, [r7, #24]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	bf14      	ite	ne
 8011faa:	2102      	movne	r1, #2
 8011fac:	2101      	moveq	r1, #1
 8011fae:	6139      	str	r1, [r7, #16]
 8011fb0:	b1c4      	cbz	r4, 8011fe4 <__d2b+0x88>
 8011fb2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011fb6:	4404      	add	r4, r0
 8011fb8:	6034      	str	r4, [r6, #0]
 8011fba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011fbe:	6028      	str	r0, [r5, #0]
 8011fc0:	4638      	mov	r0, r7
 8011fc2:	b003      	add	sp, #12
 8011fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011fcc:	e7d5      	b.n	8011f7a <__d2b+0x1e>
 8011fce:	6179      	str	r1, [r7, #20]
 8011fd0:	e7e7      	b.n	8011fa2 <__d2b+0x46>
 8011fd2:	a801      	add	r0, sp, #4
 8011fd4:	f7ff fd64 	bl	8011aa0 <__lo0bits>
 8011fd8:	9b01      	ldr	r3, [sp, #4]
 8011fda:	617b      	str	r3, [r7, #20]
 8011fdc:	2101      	movs	r1, #1
 8011fde:	6139      	str	r1, [r7, #16]
 8011fe0:	3020      	adds	r0, #32
 8011fe2:	e7e5      	b.n	8011fb0 <__d2b+0x54>
 8011fe4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011fe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011fec:	6030      	str	r0, [r6, #0]
 8011fee:	6918      	ldr	r0, [r3, #16]
 8011ff0:	f7ff fd37 	bl	8011a62 <__hi0bits>
 8011ff4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011ff8:	e7e1      	b.n	8011fbe <__d2b+0x62>

08011ffa <__ratio>:
 8011ffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ffe:	4688      	mov	r8, r1
 8012000:	4669      	mov	r1, sp
 8012002:	4681      	mov	r9, r0
 8012004:	f7ff ff5c 	bl	8011ec0 <__b2d>
 8012008:	a901      	add	r1, sp, #4
 801200a:	4640      	mov	r0, r8
 801200c:	ec57 6b10 	vmov	r6, r7, d0
 8012010:	f7ff ff56 	bl	8011ec0 <__b2d>
 8012014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012018:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801201c:	eba3 0c02 	sub.w	ip, r3, r2
 8012020:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012024:	1a9b      	subs	r3, r3, r2
 8012026:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801202a:	ec5b ab10 	vmov	sl, fp, d0
 801202e:	2b00      	cmp	r3, #0
 8012030:	bfce      	itee	gt
 8012032:	463a      	movgt	r2, r7
 8012034:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012038:	465a      	movle	r2, fp
 801203a:	4659      	mov	r1, fp
 801203c:	463d      	mov	r5, r7
 801203e:	bfd4      	ite	le
 8012040:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8012044:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8012048:	4630      	mov	r0, r6
 801204a:	ee10 2a10 	vmov	r2, s0
 801204e:	460b      	mov	r3, r1
 8012050:	4629      	mov	r1, r5
 8012052:	f7ee fc13 	bl	800087c <__aeabi_ddiv>
 8012056:	ec41 0b10 	vmov	d0, r0, r1
 801205a:	b003      	add	sp, #12
 801205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012060 <__copybits>:
 8012060:	3901      	subs	r1, #1
 8012062:	b510      	push	{r4, lr}
 8012064:	1149      	asrs	r1, r1, #5
 8012066:	6914      	ldr	r4, [r2, #16]
 8012068:	3101      	adds	r1, #1
 801206a:	f102 0314 	add.w	r3, r2, #20
 801206e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012072:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012076:	42a3      	cmp	r3, r4
 8012078:	4602      	mov	r2, r0
 801207a:	d303      	bcc.n	8012084 <__copybits+0x24>
 801207c:	2300      	movs	r3, #0
 801207e:	428a      	cmp	r2, r1
 8012080:	d305      	bcc.n	801208e <__copybits+0x2e>
 8012082:	bd10      	pop	{r4, pc}
 8012084:	f853 2b04 	ldr.w	r2, [r3], #4
 8012088:	f840 2b04 	str.w	r2, [r0], #4
 801208c:	e7f3      	b.n	8012076 <__copybits+0x16>
 801208e:	f842 3b04 	str.w	r3, [r2], #4
 8012092:	e7f4      	b.n	801207e <__copybits+0x1e>

08012094 <__any_on>:
 8012094:	f100 0214 	add.w	r2, r0, #20
 8012098:	6900      	ldr	r0, [r0, #16]
 801209a:	114b      	asrs	r3, r1, #5
 801209c:	4298      	cmp	r0, r3
 801209e:	b510      	push	{r4, lr}
 80120a0:	db11      	blt.n	80120c6 <__any_on+0x32>
 80120a2:	dd0a      	ble.n	80120ba <__any_on+0x26>
 80120a4:	f011 011f 	ands.w	r1, r1, #31
 80120a8:	d007      	beq.n	80120ba <__any_on+0x26>
 80120aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80120ae:	fa24 f001 	lsr.w	r0, r4, r1
 80120b2:	fa00 f101 	lsl.w	r1, r0, r1
 80120b6:	428c      	cmp	r4, r1
 80120b8:	d10b      	bne.n	80120d2 <__any_on+0x3e>
 80120ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80120be:	4293      	cmp	r3, r2
 80120c0:	d803      	bhi.n	80120ca <__any_on+0x36>
 80120c2:	2000      	movs	r0, #0
 80120c4:	bd10      	pop	{r4, pc}
 80120c6:	4603      	mov	r3, r0
 80120c8:	e7f7      	b.n	80120ba <__any_on+0x26>
 80120ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80120ce:	2900      	cmp	r1, #0
 80120d0:	d0f5      	beq.n	80120be <__any_on+0x2a>
 80120d2:	2001      	movs	r0, #1
 80120d4:	e7f6      	b.n	80120c4 <__any_on+0x30>

080120d6 <_calloc_r>:
 80120d6:	b538      	push	{r3, r4, r5, lr}
 80120d8:	fb02 f401 	mul.w	r4, r2, r1
 80120dc:	4621      	mov	r1, r4
 80120de:	f000 f857 	bl	8012190 <_malloc_r>
 80120e2:	4605      	mov	r5, r0
 80120e4:	b118      	cbz	r0, 80120ee <_calloc_r+0x18>
 80120e6:	4622      	mov	r2, r4
 80120e8:	2100      	movs	r1, #0
 80120ea:	f7fc f91b 	bl	800e324 <memset>
 80120ee:	4628      	mov	r0, r5
 80120f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080120f4 <_free_r>:
 80120f4:	b538      	push	{r3, r4, r5, lr}
 80120f6:	4605      	mov	r5, r0
 80120f8:	2900      	cmp	r1, #0
 80120fa:	d045      	beq.n	8012188 <_free_r+0x94>
 80120fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012100:	1f0c      	subs	r4, r1, #4
 8012102:	2b00      	cmp	r3, #0
 8012104:	bfb8      	it	lt
 8012106:	18e4      	addlt	r4, r4, r3
 8012108:	f000 ffdb 	bl	80130c2 <__malloc_lock>
 801210c:	4a1f      	ldr	r2, [pc, #124]	; (801218c <_free_r+0x98>)
 801210e:	6813      	ldr	r3, [r2, #0]
 8012110:	4610      	mov	r0, r2
 8012112:	b933      	cbnz	r3, 8012122 <_free_r+0x2e>
 8012114:	6063      	str	r3, [r4, #4]
 8012116:	6014      	str	r4, [r2, #0]
 8012118:	4628      	mov	r0, r5
 801211a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801211e:	f000 bfd1 	b.w	80130c4 <__malloc_unlock>
 8012122:	42a3      	cmp	r3, r4
 8012124:	d90c      	bls.n	8012140 <_free_r+0x4c>
 8012126:	6821      	ldr	r1, [r4, #0]
 8012128:	1862      	adds	r2, r4, r1
 801212a:	4293      	cmp	r3, r2
 801212c:	bf04      	itt	eq
 801212e:	681a      	ldreq	r2, [r3, #0]
 8012130:	685b      	ldreq	r3, [r3, #4]
 8012132:	6063      	str	r3, [r4, #4]
 8012134:	bf04      	itt	eq
 8012136:	1852      	addeq	r2, r2, r1
 8012138:	6022      	streq	r2, [r4, #0]
 801213a:	6004      	str	r4, [r0, #0]
 801213c:	e7ec      	b.n	8012118 <_free_r+0x24>
 801213e:	4613      	mov	r3, r2
 8012140:	685a      	ldr	r2, [r3, #4]
 8012142:	b10a      	cbz	r2, 8012148 <_free_r+0x54>
 8012144:	42a2      	cmp	r2, r4
 8012146:	d9fa      	bls.n	801213e <_free_r+0x4a>
 8012148:	6819      	ldr	r1, [r3, #0]
 801214a:	1858      	adds	r0, r3, r1
 801214c:	42a0      	cmp	r0, r4
 801214e:	d10b      	bne.n	8012168 <_free_r+0x74>
 8012150:	6820      	ldr	r0, [r4, #0]
 8012152:	4401      	add	r1, r0
 8012154:	1858      	adds	r0, r3, r1
 8012156:	4282      	cmp	r2, r0
 8012158:	6019      	str	r1, [r3, #0]
 801215a:	d1dd      	bne.n	8012118 <_free_r+0x24>
 801215c:	6810      	ldr	r0, [r2, #0]
 801215e:	6852      	ldr	r2, [r2, #4]
 8012160:	605a      	str	r2, [r3, #4]
 8012162:	4401      	add	r1, r0
 8012164:	6019      	str	r1, [r3, #0]
 8012166:	e7d7      	b.n	8012118 <_free_r+0x24>
 8012168:	d902      	bls.n	8012170 <_free_r+0x7c>
 801216a:	230c      	movs	r3, #12
 801216c:	602b      	str	r3, [r5, #0]
 801216e:	e7d3      	b.n	8012118 <_free_r+0x24>
 8012170:	6820      	ldr	r0, [r4, #0]
 8012172:	1821      	adds	r1, r4, r0
 8012174:	428a      	cmp	r2, r1
 8012176:	bf04      	itt	eq
 8012178:	6811      	ldreq	r1, [r2, #0]
 801217a:	6852      	ldreq	r2, [r2, #4]
 801217c:	6062      	str	r2, [r4, #4]
 801217e:	bf04      	itt	eq
 8012180:	1809      	addeq	r1, r1, r0
 8012182:	6021      	streq	r1, [r4, #0]
 8012184:	605c      	str	r4, [r3, #4]
 8012186:	e7c7      	b.n	8012118 <_free_r+0x24>
 8012188:	bd38      	pop	{r3, r4, r5, pc}
 801218a:	bf00      	nop
 801218c:	20000528 	.word	0x20000528

08012190 <_malloc_r>:
 8012190:	b570      	push	{r4, r5, r6, lr}
 8012192:	1ccd      	adds	r5, r1, #3
 8012194:	f025 0503 	bic.w	r5, r5, #3
 8012198:	3508      	adds	r5, #8
 801219a:	2d0c      	cmp	r5, #12
 801219c:	bf38      	it	cc
 801219e:	250c      	movcc	r5, #12
 80121a0:	2d00      	cmp	r5, #0
 80121a2:	4606      	mov	r6, r0
 80121a4:	db01      	blt.n	80121aa <_malloc_r+0x1a>
 80121a6:	42a9      	cmp	r1, r5
 80121a8:	d903      	bls.n	80121b2 <_malloc_r+0x22>
 80121aa:	230c      	movs	r3, #12
 80121ac:	6033      	str	r3, [r6, #0]
 80121ae:	2000      	movs	r0, #0
 80121b0:	bd70      	pop	{r4, r5, r6, pc}
 80121b2:	f000 ff86 	bl	80130c2 <__malloc_lock>
 80121b6:	4a21      	ldr	r2, [pc, #132]	; (801223c <_malloc_r+0xac>)
 80121b8:	6814      	ldr	r4, [r2, #0]
 80121ba:	4621      	mov	r1, r4
 80121bc:	b991      	cbnz	r1, 80121e4 <_malloc_r+0x54>
 80121be:	4c20      	ldr	r4, [pc, #128]	; (8012240 <_malloc_r+0xb0>)
 80121c0:	6823      	ldr	r3, [r4, #0]
 80121c2:	b91b      	cbnz	r3, 80121cc <_malloc_r+0x3c>
 80121c4:	4630      	mov	r0, r6
 80121c6:	f000 fe19 	bl	8012dfc <_sbrk_r>
 80121ca:	6020      	str	r0, [r4, #0]
 80121cc:	4629      	mov	r1, r5
 80121ce:	4630      	mov	r0, r6
 80121d0:	f000 fe14 	bl	8012dfc <_sbrk_r>
 80121d4:	1c43      	adds	r3, r0, #1
 80121d6:	d124      	bne.n	8012222 <_malloc_r+0x92>
 80121d8:	230c      	movs	r3, #12
 80121da:	6033      	str	r3, [r6, #0]
 80121dc:	4630      	mov	r0, r6
 80121de:	f000 ff71 	bl	80130c4 <__malloc_unlock>
 80121e2:	e7e4      	b.n	80121ae <_malloc_r+0x1e>
 80121e4:	680b      	ldr	r3, [r1, #0]
 80121e6:	1b5b      	subs	r3, r3, r5
 80121e8:	d418      	bmi.n	801221c <_malloc_r+0x8c>
 80121ea:	2b0b      	cmp	r3, #11
 80121ec:	d90f      	bls.n	801220e <_malloc_r+0x7e>
 80121ee:	600b      	str	r3, [r1, #0]
 80121f0:	50cd      	str	r5, [r1, r3]
 80121f2:	18cc      	adds	r4, r1, r3
 80121f4:	4630      	mov	r0, r6
 80121f6:	f000 ff65 	bl	80130c4 <__malloc_unlock>
 80121fa:	f104 000b 	add.w	r0, r4, #11
 80121fe:	1d23      	adds	r3, r4, #4
 8012200:	f020 0007 	bic.w	r0, r0, #7
 8012204:	1ac3      	subs	r3, r0, r3
 8012206:	d0d3      	beq.n	80121b0 <_malloc_r+0x20>
 8012208:	425a      	negs	r2, r3
 801220a:	50e2      	str	r2, [r4, r3]
 801220c:	e7d0      	b.n	80121b0 <_malloc_r+0x20>
 801220e:	428c      	cmp	r4, r1
 8012210:	684b      	ldr	r3, [r1, #4]
 8012212:	bf16      	itet	ne
 8012214:	6063      	strne	r3, [r4, #4]
 8012216:	6013      	streq	r3, [r2, #0]
 8012218:	460c      	movne	r4, r1
 801221a:	e7eb      	b.n	80121f4 <_malloc_r+0x64>
 801221c:	460c      	mov	r4, r1
 801221e:	6849      	ldr	r1, [r1, #4]
 8012220:	e7cc      	b.n	80121bc <_malloc_r+0x2c>
 8012222:	1cc4      	adds	r4, r0, #3
 8012224:	f024 0403 	bic.w	r4, r4, #3
 8012228:	42a0      	cmp	r0, r4
 801222a:	d005      	beq.n	8012238 <_malloc_r+0xa8>
 801222c:	1a21      	subs	r1, r4, r0
 801222e:	4630      	mov	r0, r6
 8012230:	f000 fde4 	bl	8012dfc <_sbrk_r>
 8012234:	3001      	adds	r0, #1
 8012236:	d0cf      	beq.n	80121d8 <_malloc_r+0x48>
 8012238:	6025      	str	r5, [r4, #0]
 801223a:	e7db      	b.n	80121f4 <_malloc_r+0x64>
 801223c:	20000528 	.word	0x20000528
 8012240:	2000052c 	.word	0x2000052c

08012244 <__ssputs_r>:
 8012244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012248:	688e      	ldr	r6, [r1, #8]
 801224a:	429e      	cmp	r6, r3
 801224c:	4682      	mov	sl, r0
 801224e:	460c      	mov	r4, r1
 8012250:	4690      	mov	r8, r2
 8012252:	4699      	mov	r9, r3
 8012254:	d837      	bhi.n	80122c6 <__ssputs_r+0x82>
 8012256:	898a      	ldrh	r2, [r1, #12]
 8012258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801225c:	d031      	beq.n	80122c2 <__ssputs_r+0x7e>
 801225e:	6825      	ldr	r5, [r4, #0]
 8012260:	6909      	ldr	r1, [r1, #16]
 8012262:	1a6f      	subs	r7, r5, r1
 8012264:	6965      	ldr	r5, [r4, #20]
 8012266:	2302      	movs	r3, #2
 8012268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801226c:	fb95 f5f3 	sdiv	r5, r5, r3
 8012270:	f109 0301 	add.w	r3, r9, #1
 8012274:	443b      	add	r3, r7
 8012276:	429d      	cmp	r5, r3
 8012278:	bf38      	it	cc
 801227a:	461d      	movcc	r5, r3
 801227c:	0553      	lsls	r3, r2, #21
 801227e:	d530      	bpl.n	80122e2 <__ssputs_r+0x9e>
 8012280:	4629      	mov	r1, r5
 8012282:	f7ff ff85 	bl	8012190 <_malloc_r>
 8012286:	4606      	mov	r6, r0
 8012288:	b950      	cbnz	r0, 80122a0 <__ssputs_r+0x5c>
 801228a:	230c      	movs	r3, #12
 801228c:	f8ca 3000 	str.w	r3, [sl]
 8012290:	89a3      	ldrh	r3, [r4, #12]
 8012292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012296:	81a3      	strh	r3, [r4, #12]
 8012298:	f04f 30ff 	mov.w	r0, #4294967295
 801229c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122a0:	463a      	mov	r2, r7
 80122a2:	6921      	ldr	r1, [r4, #16]
 80122a4:	f7ff fb0e 	bl	80118c4 <memcpy>
 80122a8:	89a3      	ldrh	r3, [r4, #12]
 80122aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80122ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122b2:	81a3      	strh	r3, [r4, #12]
 80122b4:	6126      	str	r6, [r4, #16]
 80122b6:	6165      	str	r5, [r4, #20]
 80122b8:	443e      	add	r6, r7
 80122ba:	1bed      	subs	r5, r5, r7
 80122bc:	6026      	str	r6, [r4, #0]
 80122be:	60a5      	str	r5, [r4, #8]
 80122c0:	464e      	mov	r6, r9
 80122c2:	454e      	cmp	r6, r9
 80122c4:	d900      	bls.n	80122c8 <__ssputs_r+0x84>
 80122c6:	464e      	mov	r6, r9
 80122c8:	4632      	mov	r2, r6
 80122ca:	4641      	mov	r1, r8
 80122cc:	6820      	ldr	r0, [r4, #0]
 80122ce:	f000 fedf 	bl	8013090 <memmove>
 80122d2:	68a3      	ldr	r3, [r4, #8]
 80122d4:	1b9b      	subs	r3, r3, r6
 80122d6:	60a3      	str	r3, [r4, #8]
 80122d8:	6823      	ldr	r3, [r4, #0]
 80122da:	441e      	add	r6, r3
 80122dc:	6026      	str	r6, [r4, #0]
 80122de:	2000      	movs	r0, #0
 80122e0:	e7dc      	b.n	801229c <__ssputs_r+0x58>
 80122e2:	462a      	mov	r2, r5
 80122e4:	f000 feef 	bl	80130c6 <_realloc_r>
 80122e8:	4606      	mov	r6, r0
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d1e2      	bne.n	80122b4 <__ssputs_r+0x70>
 80122ee:	6921      	ldr	r1, [r4, #16]
 80122f0:	4650      	mov	r0, sl
 80122f2:	f7ff feff 	bl	80120f4 <_free_r>
 80122f6:	e7c8      	b.n	801228a <__ssputs_r+0x46>

080122f8 <_svfiprintf_r>:
 80122f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122fc:	461d      	mov	r5, r3
 80122fe:	898b      	ldrh	r3, [r1, #12]
 8012300:	061f      	lsls	r7, r3, #24
 8012302:	b09d      	sub	sp, #116	; 0x74
 8012304:	4680      	mov	r8, r0
 8012306:	460c      	mov	r4, r1
 8012308:	4616      	mov	r6, r2
 801230a:	d50f      	bpl.n	801232c <_svfiprintf_r+0x34>
 801230c:	690b      	ldr	r3, [r1, #16]
 801230e:	b96b      	cbnz	r3, 801232c <_svfiprintf_r+0x34>
 8012310:	2140      	movs	r1, #64	; 0x40
 8012312:	f7ff ff3d 	bl	8012190 <_malloc_r>
 8012316:	6020      	str	r0, [r4, #0]
 8012318:	6120      	str	r0, [r4, #16]
 801231a:	b928      	cbnz	r0, 8012328 <_svfiprintf_r+0x30>
 801231c:	230c      	movs	r3, #12
 801231e:	f8c8 3000 	str.w	r3, [r8]
 8012322:	f04f 30ff 	mov.w	r0, #4294967295
 8012326:	e0c8      	b.n	80124ba <_svfiprintf_r+0x1c2>
 8012328:	2340      	movs	r3, #64	; 0x40
 801232a:	6163      	str	r3, [r4, #20]
 801232c:	2300      	movs	r3, #0
 801232e:	9309      	str	r3, [sp, #36]	; 0x24
 8012330:	2320      	movs	r3, #32
 8012332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012336:	2330      	movs	r3, #48	; 0x30
 8012338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801233c:	9503      	str	r5, [sp, #12]
 801233e:	f04f 0b01 	mov.w	fp, #1
 8012342:	4637      	mov	r7, r6
 8012344:	463d      	mov	r5, r7
 8012346:	f815 3b01 	ldrb.w	r3, [r5], #1
 801234a:	b10b      	cbz	r3, 8012350 <_svfiprintf_r+0x58>
 801234c:	2b25      	cmp	r3, #37	; 0x25
 801234e:	d13e      	bne.n	80123ce <_svfiprintf_r+0xd6>
 8012350:	ebb7 0a06 	subs.w	sl, r7, r6
 8012354:	d00b      	beq.n	801236e <_svfiprintf_r+0x76>
 8012356:	4653      	mov	r3, sl
 8012358:	4632      	mov	r2, r6
 801235a:	4621      	mov	r1, r4
 801235c:	4640      	mov	r0, r8
 801235e:	f7ff ff71 	bl	8012244 <__ssputs_r>
 8012362:	3001      	adds	r0, #1
 8012364:	f000 80a4 	beq.w	80124b0 <_svfiprintf_r+0x1b8>
 8012368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801236a:	4453      	add	r3, sl
 801236c:	9309      	str	r3, [sp, #36]	; 0x24
 801236e:	783b      	ldrb	r3, [r7, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	f000 809d 	beq.w	80124b0 <_svfiprintf_r+0x1b8>
 8012376:	2300      	movs	r3, #0
 8012378:	f04f 32ff 	mov.w	r2, #4294967295
 801237c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012380:	9304      	str	r3, [sp, #16]
 8012382:	9307      	str	r3, [sp, #28]
 8012384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012388:	931a      	str	r3, [sp, #104]	; 0x68
 801238a:	462f      	mov	r7, r5
 801238c:	2205      	movs	r2, #5
 801238e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012392:	4850      	ldr	r0, [pc, #320]	; (80124d4 <_svfiprintf_r+0x1dc>)
 8012394:	f7ed ff3c 	bl	8000210 <memchr>
 8012398:	9b04      	ldr	r3, [sp, #16]
 801239a:	b9d0      	cbnz	r0, 80123d2 <_svfiprintf_r+0xda>
 801239c:	06d9      	lsls	r1, r3, #27
 801239e:	bf44      	itt	mi
 80123a0:	2220      	movmi	r2, #32
 80123a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80123a6:	071a      	lsls	r2, r3, #28
 80123a8:	bf44      	itt	mi
 80123aa:	222b      	movmi	r2, #43	; 0x2b
 80123ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80123b0:	782a      	ldrb	r2, [r5, #0]
 80123b2:	2a2a      	cmp	r2, #42	; 0x2a
 80123b4:	d015      	beq.n	80123e2 <_svfiprintf_r+0xea>
 80123b6:	9a07      	ldr	r2, [sp, #28]
 80123b8:	462f      	mov	r7, r5
 80123ba:	2000      	movs	r0, #0
 80123bc:	250a      	movs	r5, #10
 80123be:	4639      	mov	r1, r7
 80123c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123c4:	3b30      	subs	r3, #48	; 0x30
 80123c6:	2b09      	cmp	r3, #9
 80123c8:	d94d      	bls.n	8012466 <_svfiprintf_r+0x16e>
 80123ca:	b1b8      	cbz	r0, 80123fc <_svfiprintf_r+0x104>
 80123cc:	e00f      	b.n	80123ee <_svfiprintf_r+0xf6>
 80123ce:	462f      	mov	r7, r5
 80123d0:	e7b8      	b.n	8012344 <_svfiprintf_r+0x4c>
 80123d2:	4a40      	ldr	r2, [pc, #256]	; (80124d4 <_svfiprintf_r+0x1dc>)
 80123d4:	1a80      	subs	r0, r0, r2
 80123d6:	fa0b f000 	lsl.w	r0, fp, r0
 80123da:	4318      	orrs	r0, r3
 80123dc:	9004      	str	r0, [sp, #16]
 80123de:	463d      	mov	r5, r7
 80123e0:	e7d3      	b.n	801238a <_svfiprintf_r+0x92>
 80123e2:	9a03      	ldr	r2, [sp, #12]
 80123e4:	1d11      	adds	r1, r2, #4
 80123e6:	6812      	ldr	r2, [r2, #0]
 80123e8:	9103      	str	r1, [sp, #12]
 80123ea:	2a00      	cmp	r2, #0
 80123ec:	db01      	blt.n	80123f2 <_svfiprintf_r+0xfa>
 80123ee:	9207      	str	r2, [sp, #28]
 80123f0:	e004      	b.n	80123fc <_svfiprintf_r+0x104>
 80123f2:	4252      	negs	r2, r2
 80123f4:	f043 0302 	orr.w	r3, r3, #2
 80123f8:	9207      	str	r2, [sp, #28]
 80123fa:	9304      	str	r3, [sp, #16]
 80123fc:	783b      	ldrb	r3, [r7, #0]
 80123fe:	2b2e      	cmp	r3, #46	; 0x2e
 8012400:	d10c      	bne.n	801241c <_svfiprintf_r+0x124>
 8012402:	787b      	ldrb	r3, [r7, #1]
 8012404:	2b2a      	cmp	r3, #42	; 0x2a
 8012406:	d133      	bne.n	8012470 <_svfiprintf_r+0x178>
 8012408:	9b03      	ldr	r3, [sp, #12]
 801240a:	1d1a      	adds	r2, r3, #4
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	9203      	str	r2, [sp, #12]
 8012410:	2b00      	cmp	r3, #0
 8012412:	bfb8      	it	lt
 8012414:	f04f 33ff 	movlt.w	r3, #4294967295
 8012418:	3702      	adds	r7, #2
 801241a:	9305      	str	r3, [sp, #20]
 801241c:	4d2e      	ldr	r5, [pc, #184]	; (80124d8 <_svfiprintf_r+0x1e0>)
 801241e:	7839      	ldrb	r1, [r7, #0]
 8012420:	2203      	movs	r2, #3
 8012422:	4628      	mov	r0, r5
 8012424:	f7ed fef4 	bl	8000210 <memchr>
 8012428:	b138      	cbz	r0, 801243a <_svfiprintf_r+0x142>
 801242a:	2340      	movs	r3, #64	; 0x40
 801242c:	1b40      	subs	r0, r0, r5
 801242e:	fa03 f000 	lsl.w	r0, r3, r0
 8012432:	9b04      	ldr	r3, [sp, #16]
 8012434:	4303      	orrs	r3, r0
 8012436:	3701      	adds	r7, #1
 8012438:	9304      	str	r3, [sp, #16]
 801243a:	7839      	ldrb	r1, [r7, #0]
 801243c:	4827      	ldr	r0, [pc, #156]	; (80124dc <_svfiprintf_r+0x1e4>)
 801243e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012442:	2206      	movs	r2, #6
 8012444:	1c7e      	adds	r6, r7, #1
 8012446:	f7ed fee3 	bl	8000210 <memchr>
 801244a:	2800      	cmp	r0, #0
 801244c:	d038      	beq.n	80124c0 <_svfiprintf_r+0x1c8>
 801244e:	4b24      	ldr	r3, [pc, #144]	; (80124e0 <_svfiprintf_r+0x1e8>)
 8012450:	bb13      	cbnz	r3, 8012498 <_svfiprintf_r+0x1a0>
 8012452:	9b03      	ldr	r3, [sp, #12]
 8012454:	3307      	adds	r3, #7
 8012456:	f023 0307 	bic.w	r3, r3, #7
 801245a:	3308      	adds	r3, #8
 801245c:	9303      	str	r3, [sp, #12]
 801245e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012460:	444b      	add	r3, r9
 8012462:	9309      	str	r3, [sp, #36]	; 0x24
 8012464:	e76d      	b.n	8012342 <_svfiprintf_r+0x4a>
 8012466:	fb05 3202 	mla	r2, r5, r2, r3
 801246a:	2001      	movs	r0, #1
 801246c:	460f      	mov	r7, r1
 801246e:	e7a6      	b.n	80123be <_svfiprintf_r+0xc6>
 8012470:	2300      	movs	r3, #0
 8012472:	3701      	adds	r7, #1
 8012474:	9305      	str	r3, [sp, #20]
 8012476:	4619      	mov	r1, r3
 8012478:	250a      	movs	r5, #10
 801247a:	4638      	mov	r0, r7
 801247c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012480:	3a30      	subs	r2, #48	; 0x30
 8012482:	2a09      	cmp	r2, #9
 8012484:	d903      	bls.n	801248e <_svfiprintf_r+0x196>
 8012486:	2b00      	cmp	r3, #0
 8012488:	d0c8      	beq.n	801241c <_svfiprintf_r+0x124>
 801248a:	9105      	str	r1, [sp, #20]
 801248c:	e7c6      	b.n	801241c <_svfiprintf_r+0x124>
 801248e:	fb05 2101 	mla	r1, r5, r1, r2
 8012492:	2301      	movs	r3, #1
 8012494:	4607      	mov	r7, r0
 8012496:	e7f0      	b.n	801247a <_svfiprintf_r+0x182>
 8012498:	ab03      	add	r3, sp, #12
 801249a:	9300      	str	r3, [sp, #0]
 801249c:	4622      	mov	r2, r4
 801249e:	4b11      	ldr	r3, [pc, #68]	; (80124e4 <_svfiprintf_r+0x1ec>)
 80124a0:	a904      	add	r1, sp, #16
 80124a2:	4640      	mov	r0, r8
 80124a4:	f7fb ffda 	bl	800e45c <_printf_float>
 80124a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80124ac:	4681      	mov	r9, r0
 80124ae:	d1d6      	bne.n	801245e <_svfiprintf_r+0x166>
 80124b0:	89a3      	ldrh	r3, [r4, #12]
 80124b2:	065b      	lsls	r3, r3, #25
 80124b4:	f53f af35 	bmi.w	8012322 <_svfiprintf_r+0x2a>
 80124b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124ba:	b01d      	add	sp, #116	; 0x74
 80124bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c0:	ab03      	add	r3, sp, #12
 80124c2:	9300      	str	r3, [sp, #0]
 80124c4:	4622      	mov	r2, r4
 80124c6:	4b07      	ldr	r3, [pc, #28]	; (80124e4 <_svfiprintf_r+0x1ec>)
 80124c8:	a904      	add	r1, sp, #16
 80124ca:	4640      	mov	r0, r8
 80124cc:	f7fc fa7c 	bl	800e9c8 <_printf_i>
 80124d0:	e7ea      	b.n	80124a8 <_svfiprintf_r+0x1b0>
 80124d2:	bf00      	nop
 80124d4:	080138dc 	.word	0x080138dc
 80124d8:	080138e2 	.word	0x080138e2
 80124dc:	080138e6 	.word	0x080138e6
 80124e0:	0800e45d 	.word	0x0800e45d
 80124e4:	08012245 	.word	0x08012245

080124e8 <_sungetc_r>:
 80124e8:	b538      	push	{r3, r4, r5, lr}
 80124ea:	1c4b      	adds	r3, r1, #1
 80124ec:	4614      	mov	r4, r2
 80124ee:	d103      	bne.n	80124f8 <_sungetc_r+0x10>
 80124f0:	f04f 35ff 	mov.w	r5, #4294967295
 80124f4:	4628      	mov	r0, r5
 80124f6:	bd38      	pop	{r3, r4, r5, pc}
 80124f8:	8993      	ldrh	r3, [r2, #12]
 80124fa:	f023 0320 	bic.w	r3, r3, #32
 80124fe:	8193      	strh	r3, [r2, #12]
 8012500:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012502:	6852      	ldr	r2, [r2, #4]
 8012504:	b2cd      	uxtb	r5, r1
 8012506:	b18b      	cbz	r3, 801252c <_sungetc_r+0x44>
 8012508:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801250a:	4293      	cmp	r3, r2
 801250c:	dd08      	ble.n	8012520 <_sungetc_r+0x38>
 801250e:	6823      	ldr	r3, [r4, #0]
 8012510:	1e5a      	subs	r2, r3, #1
 8012512:	6022      	str	r2, [r4, #0]
 8012514:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012518:	6863      	ldr	r3, [r4, #4]
 801251a:	3301      	adds	r3, #1
 801251c:	6063      	str	r3, [r4, #4]
 801251e:	e7e9      	b.n	80124f4 <_sungetc_r+0xc>
 8012520:	4621      	mov	r1, r4
 8012522:	f000 fd4b 	bl	8012fbc <__submore>
 8012526:	2800      	cmp	r0, #0
 8012528:	d0f1      	beq.n	801250e <_sungetc_r+0x26>
 801252a:	e7e1      	b.n	80124f0 <_sungetc_r+0x8>
 801252c:	6921      	ldr	r1, [r4, #16]
 801252e:	6823      	ldr	r3, [r4, #0]
 8012530:	b151      	cbz	r1, 8012548 <_sungetc_r+0x60>
 8012532:	4299      	cmp	r1, r3
 8012534:	d208      	bcs.n	8012548 <_sungetc_r+0x60>
 8012536:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801253a:	42a9      	cmp	r1, r5
 801253c:	d104      	bne.n	8012548 <_sungetc_r+0x60>
 801253e:	3b01      	subs	r3, #1
 8012540:	3201      	adds	r2, #1
 8012542:	6023      	str	r3, [r4, #0]
 8012544:	6062      	str	r2, [r4, #4]
 8012546:	e7d5      	b.n	80124f4 <_sungetc_r+0xc>
 8012548:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801254c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012550:	6363      	str	r3, [r4, #52]	; 0x34
 8012552:	2303      	movs	r3, #3
 8012554:	63a3      	str	r3, [r4, #56]	; 0x38
 8012556:	4623      	mov	r3, r4
 8012558:	f803 5f46 	strb.w	r5, [r3, #70]!
 801255c:	6023      	str	r3, [r4, #0]
 801255e:	2301      	movs	r3, #1
 8012560:	e7dc      	b.n	801251c <_sungetc_r+0x34>

08012562 <__ssrefill_r>:
 8012562:	b510      	push	{r4, lr}
 8012564:	460c      	mov	r4, r1
 8012566:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012568:	b169      	cbz	r1, 8012586 <__ssrefill_r+0x24>
 801256a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801256e:	4299      	cmp	r1, r3
 8012570:	d001      	beq.n	8012576 <__ssrefill_r+0x14>
 8012572:	f7ff fdbf 	bl	80120f4 <_free_r>
 8012576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012578:	6063      	str	r3, [r4, #4]
 801257a:	2000      	movs	r0, #0
 801257c:	6360      	str	r0, [r4, #52]	; 0x34
 801257e:	b113      	cbz	r3, 8012586 <__ssrefill_r+0x24>
 8012580:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012582:	6023      	str	r3, [r4, #0]
 8012584:	bd10      	pop	{r4, pc}
 8012586:	6923      	ldr	r3, [r4, #16]
 8012588:	6023      	str	r3, [r4, #0]
 801258a:	2300      	movs	r3, #0
 801258c:	6063      	str	r3, [r4, #4]
 801258e:	89a3      	ldrh	r3, [r4, #12]
 8012590:	f043 0320 	orr.w	r3, r3, #32
 8012594:	81a3      	strh	r3, [r4, #12]
 8012596:	f04f 30ff 	mov.w	r0, #4294967295
 801259a:	e7f3      	b.n	8012584 <__ssrefill_r+0x22>

0801259c <__ssvfiscanf_r>:
 801259c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80125a4:	460c      	mov	r4, r1
 80125a6:	2100      	movs	r1, #0
 80125a8:	9144      	str	r1, [sp, #272]	; 0x110
 80125aa:	9145      	str	r1, [sp, #276]	; 0x114
 80125ac:	499f      	ldr	r1, [pc, #636]	; (801282c <__ssvfiscanf_r+0x290>)
 80125ae:	91a0      	str	r1, [sp, #640]	; 0x280
 80125b0:	f10d 0804 	add.w	r8, sp, #4
 80125b4:	499e      	ldr	r1, [pc, #632]	; (8012830 <__ssvfiscanf_r+0x294>)
 80125b6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8012834 <__ssvfiscanf_r+0x298>
 80125ba:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80125be:	4606      	mov	r6, r0
 80125c0:	4692      	mov	sl, r2
 80125c2:	91a1      	str	r1, [sp, #644]	; 0x284
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	270a      	movs	r7, #10
 80125c8:	f89a 3000 	ldrb.w	r3, [sl]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	f000 812a 	beq.w	8012826 <__ssvfiscanf_r+0x28a>
 80125d2:	4655      	mov	r5, sl
 80125d4:	f7ff f8c8 	bl	8011768 <__locale_ctype_ptr>
 80125d8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80125dc:	4458      	add	r0, fp
 80125de:	7843      	ldrb	r3, [r0, #1]
 80125e0:	f013 0308 	ands.w	r3, r3, #8
 80125e4:	d01c      	beq.n	8012620 <__ssvfiscanf_r+0x84>
 80125e6:	6863      	ldr	r3, [r4, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	dd12      	ble.n	8012612 <__ssvfiscanf_r+0x76>
 80125ec:	f7ff f8bc 	bl	8011768 <__locale_ctype_ptr>
 80125f0:	6823      	ldr	r3, [r4, #0]
 80125f2:	781a      	ldrb	r2, [r3, #0]
 80125f4:	4410      	add	r0, r2
 80125f6:	7842      	ldrb	r2, [r0, #1]
 80125f8:	0712      	lsls	r2, r2, #28
 80125fa:	d401      	bmi.n	8012600 <__ssvfiscanf_r+0x64>
 80125fc:	46aa      	mov	sl, r5
 80125fe:	e7e3      	b.n	80125c8 <__ssvfiscanf_r+0x2c>
 8012600:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012602:	3201      	adds	r2, #1
 8012604:	9245      	str	r2, [sp, #276]	; 0x114
 8012606:	6862      	ldr	r2, [r4, #4]
 8012608:	3301      	adds	r3, #1
 801260a:	3a01      	subs	r2, #1
 801260c:	6062      	str	r2, [r4, #4]
 801260e:	6023      	str	r3, [r4, #0]
 8012610:	e7e9      	b.n	80125e6 <__ssvfiscanf_r+0x4a>
 8012612:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012614:	4621      	mov	r1, r4
 8012616:	4630      	mov	r0, r6
 8012618:	4798      	blx	r3
 801261a:	2800      	cmp	r0, #0
 801261c:	d0e6      	beq.n	80125ec <__ssvfiscanf_r+0x50>
 801261e:	e7ed      	b.n	80125fc <__ssvfiscanf_r+0x60>
 8012620:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8012624:	f040 8082 	bne.w	801272c <__ssvfiscanf_r+0x190>
 8012628:	9343      	str	r3, [sp, #268]	; 0x10c
 801262a:	9341      	str	r3, [sp, #260]	; 0x104
 801262c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8012630:	2b2a      	cmp	r3, #42	; 0x2a
 8012632:	d103      	bne.n	801263c <__ssvfiscanf_r+0xa0>
 8012634:	2310      	movs	r3, #16
 8012636:	9341      	str	r3, [sp, #260]	; 0x104
 8012638:	f10a 0502 	add.w	r5, sl, #2
 801263c:	46aa      	mov	sl, r5
 801263e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8012642:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012646:	2a09      	cmp	r2, #9
 8012648:	d922      	bls.n	8012690 <__ssvfiscanf_r+0xf4>
 801264a:	2203      	movs	r2, #3
 801264c:	4879      	ldr	r0, [pc, #484]	; (8012834 <__ssvfiscanf_r+0x298>)
 801264e:	f7ed fddf 	bl	8000210 <memchr>
 8012652:	b138      	cbz	r0, 8012664 <__ssvfiscanf_r+0xc8>
 8012654:	eba0 0309 	sub.w	r3, r0, r9
 8012658:	2001      	movs	r0, #1
 801265a:	4098      	lsls	r0, r3
 801265c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801265e:	4318      	orrs	r0, r3
 8012660:	9041      	str	r0, [sp, #260]	; 0x104
 8012662:	46aa      	mov	sl, r5
 8012664:	f89a 3000 	ldrb.w	r3, [sl]
 8012668:	2b67      	cmp	r3, #103	; 0x67
 801266a:	f10a 0501 	add.w	r5, sl, #1
 801266e:	d82b      	bhi.n	80126c8 <__ssvfiscanf_r+0x12c>
 8012670:	2b65      	cmp	r3, #101	; 0x65
 8012672:	f080 809f 	bcs.w	80127b4 <__ssvfiscanf_r+0x218>
 8012676:	2b47      	cmp	r3, #71	; 0x47
 8012678:	d810      	bhi.n	801269c <__ssvfiscanf_r+0x100>
 801267a:	2b45      	cmp	r3, #69	; 0x45
 801267c:	f080 809a 	bcs.w	80127b4 <__ssvfiscanf_r+0x218>
 8012680:	2b00      	cmp	r3, #0
 8012682:	d06c      	beq.n	801275e <__ssvfiscanf_r+0x1c2>
 8012684:	2b25      	cmp	r3, #37	; 0x25
 8012686:	d051      	beq.n	801272c <__ssvfiscanf_r+0x190>
 8012688:	2303      	movs	r3, #3
 801268a:	9347      	str	r3, [sp, #284]	; 0x11c
 801268c:	9742      	str	r7, [sp, #264]	; 0x108
 801268e:	e027      	b.n	80126e0 <__ssvfiscanf_r+0x144>
 8012690:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012692:	fb07 1303 	mla	r3, r7, r3, r1
 8012696:	3b30      	subs	r3, #48	; 0x30
 8012698:	9343      	str	r3, [sp, #268]	; 0x10c
 801269a:	e7cf      	b.n	801263c <__ssvfiscanf_r+0xa0>
 801269c:	2b5b      	cmp	r3, #91	; 0x5b
 801269e:	d06a      	beq.n	8012776 <__ssvfiscanf_r+0x1da>
 80126a0:	d80c      	bhi.n	80126bc <__ssvfiscanf_r+0x120>
 80126a2:	2b58      	cmp	r3, #88	; 0x58
 80126a4:	d1f0      	bne.n	8012688 <__ssvfiscanf_r+0xec>
 80126a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80126a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80126ac:	9241      	str	r2, [sp, #260]	; 0x104
 80126ae:	2210      	movs	r2, #16
 80126b0:	9242      	str	r2, [sp, #264]	; 0x108
 80126b2:	2b6e      	cmp	r3, #110	; 0x6e
 80126b4:	bf8c      	ite	hi
 80126b6:	2304      	movhi	r3, #4
 80126b8:	2303      	movls	r3, #3
 80126ba:	e010      	b.n	80126de <__ssvfiscanf_r+0x142>
 80126bc:	2b63      	cmp	r3, #99	; 0x63
 80126be:	d065      	beq.n	801278c <__ssvfiscanf_r+0x1f0>
 80126c0:	2b64      	cmp	r3, #100	; 0x64
 80126c2:	d1e1      	bne.n	8012688 <__ssvfiscanf_r+0xec>
 80126c4:	9742      	str	r7, [sp, #264]	; 0x108
 80126c6:	e7f4      	b.n	80126b2 <__ssvfiscanf_r+0x116>
 80126c8:	2b70      	cmp	r3, #112	; 0x70
 80126ca:	d04b      	beq.n	8012764 <__ssvfiscanf_r+0x1c8>
 80126cc:	d826      	bhi.n	801271c <__ssvfiscanf_r+0x180>
 80126ce:	2b6e      	cmp	r3, #110	; 0x6e
 80126d0:	d062      	beq.n	8012798 <__ssvfiscanf_r+0x1fc>
 80126d2:	d84c      	bhi.n	801276e <__ssvfiscanf_r+0x1d2>
 80126d4:	2b69      	cmp	r3, #105	; 0x69
 80126d6:	d1d7      	bne.n	8012688 <__ssvfiscanf_r+0xec>
 80126d8:	2300      	movs	r3, #0
 80126da:	9342      	str	r3, [sp, #264]	; 0x108
 80126dc:	2303      	movs	r3, #3
 80126de:	9347      	str	r3, [sp, #284]	; 0x11c
 80126e0:	6863      	ldr	r3, [r4, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	dd68      	ble.n	80127b8 <__ssvfiscanf_r+0x21c>
 80126e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80126e8:	0659      	lsls	r1, r3, #25
 80126ea:	d407      	bmi.n	80126fc <__ssvfiscanf_r+0x160>
 80126ec:	f7ff f83c 	bl	8011768 <__locale_ctype_ptr>
 80126f0:	6823      	ldr	r3, [r4, #0]
 80126f2:	781a      	ldrb	r2, [r3, #0]
 80126f4:	4410      	add	r0, r2
 80126f6:	7842      	ldrb	r2, [r0, #1]
 80126f8:	0712      	lsls	r2, r2, #28
 80126fa:	d464      	bmi.n	80127c6 <__ssvfiscanf_r+0x22a>
 80126fc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80126fe:	2b02      	cmp	r3, #2
 8012700:	dc73      	bgt.n	80127ea <__ssvfiscanf_r+0x24e>
 8012702:	466b      	mov	r3, sp
 8012704:	4622      	mov	r2, r4
 8012706:	a941      	add	r1, sp, #260	; 0x104
 8012708:	4630      	mov	r0, r6
 801270a:	f000 f9d7 	bl	8012abc <_scanf_chars>
 801270e:	2801      	cmp	r0, #1
 8012710:	f000 8089 	beq.w	8012826 <__ssvfiscanf_r+0x28a>
 8012714:	2802      	cmp	r0, #2
 8012716:	f47f af71 	bne.w	80125fc <__ssvfiscanf_r+0x60>
 801271a:	e01d      	b.n	8012758 <__ssvfiscanf_r+0x1bc>
 801271c:	2b75      	cmp	r3, #117	; 0x75
 801271e:	d0d1      	beq.n	80126c4 <__ssvfiscanf_r+0x128>
 8012720:	2b78      	cmp	r3, #120	; 0x78
 8012722:	d0c0      	beq.n	80126a6 <__ssvfiscanf_r+0x10a>
 8012724:	2b73      	cmp	r3, #115	; 0x73
 8012726:	d1af      	bne.n	8012688 <__ssvfiscanf_r+0xec>
 8012728:	2302      	movs	r3, #2
 801272a:	e7d8      	b.n	80126de <__ssvfiscanf_r+0x142>
 801272c:	6863      	ldr	r3, [r4, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	dd0c      	ble.n	801274c <__ssvfiscanf_r+0x1b0>
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	781a      	ldrb	r2, [r3, #0]
 8012736:	455a      	cmp	r2, fp
 8012738:	d175      	bne.n	8012826 <__ssvfiscanf_r+0x28a>
 801273a:	3301      	adds	r3, #1
 801273c:	6862      	ldr	r2, [r4, #4]
 801273e:	6023      	str	r3, [r4, #0]
 8012740:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012742:	3a01      	subs	r2, #1
 8012744:	3301      	adds	r3, #1
 8012746:	6062      	str	r2, [r4, #4]
 8012748:	9345      	str	r3, [sp, #276]	; 0x114
 801274a:	e757      	b.n	80125fc <__ssvfiscanf_r+0x60>
 801274c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801274e:	4621      	mov	r1, r4
 8012750:	4630      	mov	r0, r6
 8012752:	4798      	blx	r3
 8012754:	2800      	cmp	r0, #0
 8012756:	d0ec      	beq.n	8012732 <__ssvfiscanf_r+0x196>
 8012758:	9844      	ldr	r0, [sp, #272]	; 0x110
 801275a:	2800      	cmp	r0, #0
 801275c:	d159      	bne.n	8012812 <__ssvfiscanf_r+0x276>
 801275e:	f04f 30ff 	mov.w	r0, #4294967295
 8012762:	e05c      	b.n	801281e <__ssvfiscanf_r+0x282>
 8012764:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012766:	f042 0220 	orr.w	r2, r2, #32
 801276a:	9241      	str	r2, [sp, #260]	; 0x104
 801276c:	e79b      	b.n	80126a6 <__ssvfiscanf_r+0x10a>
 801276e:	2308      	movs	r3, #8
 8012770:	9342      	str	r3, [sp, #264]	; 0x108
 8012772:	2304      	movs	r3, #4
 8012774:	e7b3      	b.n	80126de <__ssvfiscanf_r+0x142>
 8012776:	4629      	mov	r1, r5
 8012778:	4640      	mov	r0, r8
 801277a:	f000 fb4f 	bl	8012e1c <__sccl>
 801277e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012784:	9341      	str	r3, [sp, #260]	; 0x104
 8012786:	4605      	mov	r5, r0
 8012788:	2301      	movs	r3, #1
 801278a:	e7a8      	b.n	80126de <__ssvfiscanf_r+0x142>
 801278c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801278e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012792:	9341      	str	r3, [sp, #260]	; 0x104
 8012794:	2300      	movs	r3, #0
 8012796:	e7a2      	b.n	80126de <__ssvfiscanf_r+0x142>
 8012798:	9841      	ldr	r0, [sp, #260]	; 0x104
 801279a:	06c3      	lsls	r3, r0, #27
 801279c:	f53f af2e 	bmi.w	80125fc <__ssvfiscanf_r+0x60>
 80127a0:	9b00      	ldr	r3, [sp, #0]
 80127a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80127a4:	1d19      	adds	r1, r3, #4
 80127a6:	9100      	str	r1, [sp, #0]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	07c0      	lsls	r0, r0, #31
 80127ac:	bf4c      	ite	mi
 80127ae:	801a      	strhmi	r2, [r3, #0]
 80127b0:	601a      	strpl	r2, [r3, #0]
 80127b2:	e723      	b.n	80125fc <__ssvfiscanf_r+0x60>
 80127b4:	2305      	movs	r3, #5
 80127b6:	e792      	b.n	80126de <__ssvfiscanf_r+0x142>
 80127b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80127ba:	4621      	mov	r1, r4
 80127bc:	4630      	mov	r0, r6
 80127be:	4798      	blx	r3
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d090      	beq.n	80126e6 <__ssvfiscanf_r+0x14a>
 80127c4:	e7c8      	b.n	8012758 <__ssvfiscanf_r+0x1bc>
 80127c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80127c8:	3201      	adds	r2, #1
 80127ca:	9245      	str	r2, [sp, #276]	; 0x114
 80127cc:	6862      	ldr	r2, [r4, #4]
 80127ce:	3a01      	subs	r2, #1
 80127d0:	2a00      	cmp	r2, #0
 80127d2:	6062      	str	r2, [r4, #4]
 80127d4:	dd02      	ble.n	80127dc <__ssvfiscanf_r+0x240>
 80127d6:	3301      	adds	r3, #1
 80127d8:	6023      	str	r3, [r4, #0]
 80127da:	e787      	b.n	80126ec <__ssvfiscanf_r+0x150>
 80127dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80127de:	4621      	mov	r1, r4
 80127e0:	4630      	mov	r0, r6
 80127e2:	4798      	blx	r3
 80127e4:	2800      	cmp	r0, #0
 80127e6:	d081      	beq.n	80126ec <__ssvfiscanf_r+0x150>
 80127e8:	e7b6      	b.n	8012758 <__ssvfiscanf_r+0x1bc>
 80127ea:	2b04      	cmp	r3, #4
 80127ec:	dc06      	bgt.n	80127fc <__ssvfiscanf_r+0x260>
 80127ee:	466b      	mov	r3, sp
 80127f0:	4622      	mov	r2, r4
 80127f2:	a941      	add	r1, sp, #260	; 0x104
 80127f4:	4630      	mov	r0, r6
 80127f6:	f000 f9c5 	bl	8012b84 <_scanf_i>
 80127fa:	e788      	b.n	801270e <__ssvfiscanf_r+0x172>
 80127fc:	4b0e      	ldr	r3, [pc, #56]	; (8012838 <__ssvfiscanf_r+0x29c>)
 80127fe:	2b00      	cmp	r3, #0
 8012800:	f43f aefc 	beq.w	80125fc <__ssvfiscanf_r+0x60>
 8012804:	466b      	mov	r3, sp
 8012806:	4622      	mov	r2, r4
 8012808:	a941      	add	r1, sp, #260	; 0x104
 801280a:	4630      	mov	r0, r6
 801280c:	f7fc f9ee 	bl	800ebec <_scanf_float>
 8012810:	e77d      	b.n	801270e <__ssvfiscanf_r+0x172>
 8012812:	89a3      	ldrh	r3, [r4, #12]
 8012814:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012818:	bf18      	it	ne
 801281a:	f04f 30ff 	movne.w	r0, #4294967295
 801281e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012826:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012828:	e7f9      	b.n	801281e <__ssvfiscanf_r+0x282>
 801282a:	bf00      	nop
 801282c:	080124e9 	.word	0x080124e9
 8012830:	08012563 	.word	0x08012563
 8012834:	080138e2 	.word	0x080138e2
 8012838:	0800ebed 	.word	0x0800ebed

0801283c <__sfputc_r>:
 801283c:	6893      	ldr	r3, [r2, #8]
 801283e:	3b01      	subs	r3, #1
 8012840:	2b00      	cmp	r3, #0
 8012842:	b410      	push	{r4}
 8012844:	6093      	str	r3, [r2, #8]
 8012846:	da08      	bge.n	801285a <__sfputc_r+0x1e>
 8012848:	6994      	ldr	r4, [r2, #24]
 801284a:	42a3      	cmp	r3, r4
 801284c:	db01      	blt.n	8012852 <__sfputc_r+0x16>
 801284e:	290a      	cmp	r1, #10
 8012850:	d103      	bne.n	801285a <__sfputc_r+0x1e>
 8012852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012856:	f7fd bbbd 	b.w	800ffd4 <__swbuf_r>
 801285a:	6813      	ldr	r3, [r2, #0]
 801285c:	1c58      	adds	r0, r3, #1
 801285e:	6010      	str	r0, [r2, #0]
 8012860:	7019      	strb	r1, [r3, #0]
 8012862:	4608      	mov	r0, r1
 8012864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012868:	4770      	bx	lr

0801286a <__sfputs_r>:
 801286a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801286c:	4606      	mov	r6, r0
 801286e:	460f      	mov	r7, r1
 8012870:	4614      	mov	r4, r2
 8012872:	18d5      	adds	r5, r2, r3
 8012874:	42ac      	cmp	r4, r5
 8012876:	d101      	bne.n	801287c <__sfputs_r+0x12>
 8012878:	2000      	movs	r0, #0
 801287a:	e007      	b.n	801288c <__sfputs_r+0x22>
 801287c:	463a      	mov	r2, r7
 801287e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012882:	4630      	mov	r0, r6
 8012884:	f7ff ffda 	bl	801283c <__sfputc_r>
 8012888:	1c43      	adds	r3, r0, #1
 801288a:	d1f3      	bne.n	8012874 <__sfputs_r+0xa>
 801288c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012890 <_vfiprintf_r>:
 8012890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012894:	460c      	mov	r4, r1
 8012896:	b09d      	sub	sp, #116	; 0x74
 8012898:	4617      	mov	r7, r2
 801289a:	461d      	mov	r5, r3
 801289c:	4606      	mov	r6, r0
 801289e:	b118      	cbz	r0, 80128a8 <_vfiprintf_r+0x18>
 80128a0:	6983      	ldr	r3, [r0, #24]
 80128a2:	b90b      	cbnz	r3, 80128a8 <_vfiprintf_r+0x18>
 80128a4:	f7fe fbac 	bl	8011000 <__sinit>
 80128a8:	4b7c      	ldr	r3, [pc, #496]	; (8012a9c <_vfiprintf_r+0x20c>)
 80128aa:	429c      	cmp	r4, r3
 80128ac:	d158      	bne.n	8012960 <_vfiprintf_r+0xd0>
 80128ae:	6874      	ldr	r4, [r6, #4]
 80128b0:	89a3      	ldrh	r3, [r4, #12]
 80128b2:	0718      	lsls	r0, r3, #28
 80128b4:	d55e      	bpl.n	8012974 <_vfiprintf_r+0xe4>
 80128b6:	6923      	ldr	r3, [r4, #16]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d05b      	beq.n	8012974 <_vfiprintf_r+0xe4>
 80128bc:	2300      	movs	r3, #0
 80128be:	9309      	str	r3, [sp, #36]	; 0x24
 80128c0:	2320      	movs	r3, #32
 80128c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128c6:	2330      	movs	r3, #48	; 0x30
 80128c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128cc:	9503      	str	r5, [sp, #12]
 80128ce:	f04f 0b01 	mov.w	fp, #1
 80128d2:	46b8      	mov	r8, r7
 80128d4:	4645      	mov	r5, r8
 80128d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80128da:	b10b      	cbz	r3, 80128e0 <_vfiprintf_r+0x50>
 80128dc:	2b25      	cmp	r3, #37	; 0x25
 80128de:	d154      	bne.n	801298a <_vfiprintf_r+0xfa>
 80128e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80128e4:	d00b      	beq.n	80128fe <_vfiprintf_r+0x6e>
 80128e6:	4653      	mov	r3, sl
 80128e8:	463a      	mov	r2, r7
 80128ea:	4621      	mov	r1, r4
 80128ec:	4630      	mov	r0, r6
 80128ee:	f7ff ffbc 	bl	801286a <__sfputs_r>
 80128f2:	3001      	adds	r0, #1
 80128f4:	f000 80c2 	beq.w	8012a7c <_vfiprintf_r+0x1ec>
 80128f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128fa:	4453      	add	r3, sl
 80128fc:	9309      	str	r3, [sp, #36]	; 0x24
 80128fe:	f898 3000 	ldrb.w	r3, [r8]
 8012902:	2b00      	cmp	r3, #0
 8012904:	f000 80ba 	beq.w	8012a7c <_vfiprintf_r+0x1ec>
 8012908:	2300      	movs	r3, #0
 801290a:	f04f 32ff 	mov.w	r2, #4294967295
 801290e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012912:	9304      	str	r3, [sp, #16]
 8012914:	9307      	str	r3, [sp, #28]
 8012916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801291a:	931a      	str	r3, [sp, #104]	; 0x68
 801291c:	46a8      	mov	r8, r5
 801291e:	2205      	movs	r2, #5
 8012920:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012924:	485e      	ldr	r0, [pc, #376]	; (8012aa0 <_vfiprintf_r+0x210>)
 8012926:	f7ed fc73 	bl	8000210 <memchr>
 801292a:	9b04      	ldr	r3, [sp, #16]
 801292c:	bb78      	cbnz	r0, 801298e <_vfiprintf_r+0xfe>
 801292e:	06d9      	lsls	r1, r3, #27
 8012930:	bf44      	itt	mi
 8012932:	2220      	movmi	r2, #32
 8012934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012938:	071a      	lsls	r2, r3, #28
 801293a:	bf44      	itt	mi
 801293c:	222b      	movmi	r2, #43	; 0x2b
 801293e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012942:	782a      	ldrb	r2, [r5, #0]
 8012944:	2a2a      	cmp	r2, #42	; 0x2a
 8012946:	d02a      	beq.n	801299e <_vfiprintf_r+0x10e>
 8012948:	9a07      	ldr	r2, [sp, #28]
 801294a:	46a8      	mov	r8, r5
 801294c:	2000      	movs	r0, #0
 801294e:	250a      	movs	r5, #10
 8012950:	4641      	mov	r1, r8
 8012952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012956:	3b30      	subs	r3, #48	; 0x30
 8012958:	2b09      	cmp	r3, #9
 801295a:	d969      	bls.n	8012a30 <_vfiprintf_r+0x1a0>
 801295c:	b360      	cbz	r0, 80129b8 <_vfiprintf_r+0x128>
 801295e:	e024      	b.n	80129aa <_vfiprintf_r+0x11a>
 8012960:	4b50      	ldr	r3, [pc, #320]	; (8012aa4 <_vfiprintf_r+0x214>)
 8012962:	429c      	cmp	r4, r3
 8012964:	d101      	bne.n	801296a <_vfiprintf_r+0xda>
 8012966:	68b4      	ldr	r4, [r6, #8]
 8012968:	e7a2      	b.n	80128b0 <_vfiprintf_r+0x20>
 801296a:	4b4f      	ldr	r3, [pc, #316]	; (8012aa8 <_vfiprintf_r+0x218>)
 801296c:	429c      	cmp	r4, r3
 801296e:	bf08      	it	eq
 8012970:	68f4      	ldreq	r4, [r6, #12]
 8012972:	e79d      	b.n	80128b0 <_vfiprintf_r+0x20>
 8012974:	4621      	mov	r1, r4
 8012976:	4630      	mov	r0, r6
 8012978:	f7fd fb90 	bl	801009c <__swsetup_r>
 801297c:	2800      	cmp	r0, #0
 801297e:	d09d      	beq.n	80128bc <_vfiprintf_r+0x2c>
 8012980:	f04f 30ff 	mov.w	r0, #4294967295
 8012984:	b01d      	add	sp, #116	; 0x74
 8012986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801298a:	46a8      	mov	r8, r5
 801298c:	e7a2      	b.n	80128d4 <_vfiprintf_r+0x44>
 801298e:	4a44      	ldr	r2, [pc, #272]	; (8012aa0 <_vfiprintf_r+0x210>)
 8012990:	1a80      	subs	r0, r0, r2
 8012992:	fa0b f000 	lsl.w	r0, fp, r0
 8012996:	4318      	orrs	r0, r3
 8012998:	9004      	str	r0, [sp, #16]
 801299a:	4645      	mov	r5, r8
 801299c:	e7be      	b.n	801291c <_vfiprintf_r+0x8c>
 801299e:	9a03      	ldr	r2, [sp, #12]
 80129a0:	1d11      	adds	r1, r2, #4
 80129a2:	6812      	ldr	r2, [r2, #0]
 80129a4:	9103      	str	r1, [sp, #12]
 80129a6:	2a00      	cmp	r2, #0
 80129a8:	db01      	blt.n	80129ae <_vfiprintf_r+0x11e>
 80129aa:	9207      	str	r2, [sp, #28]
 80129ac:	e004      	b.n	80129b8 <_vfiprintf_r+0x128>
 80129ae:	4252      	negs	r2, r2
 80129b0:	f043 0302 	orr.w	r3, r3, #2
 80129b4:	9207      	str	r2, [sp, #28]
 80129b6:	9304      	str	r3, [sp, #16]
 80129b8:	f898 3000 	ldrb.w	r3, [r8]
 80129bc:	2b2e      	cmp	r3, #46	; 0x2e
 80129be:	d10e      	bne.n	80129de <_vfiprintf_r+0x14e>
 80129c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80129c4:	2b2a      	cmp	r3, #42	; 0x2a
 80129c6:	d138      	bne.n	8012a3a <_vfiprintf_r+0x1aa>
 80129c8:	9b03      	ldr	r3, [sp, #12]
 80129ca:	1d1a      	adds	r2, r3, #4
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	9203      	str	r2, [sp, #12]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	bfb8      	it	lt
 80129d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80129d8:	f108 0802 	add.w	r8, r8, #2
 80129dc:	9305      	str	r3, [sp, #20]
 80129de:	4d33      	ldr	r5, [pc, #204]	; (8012aac <_vfiprintf_r+0x21c>)
 80129e0:	f898 1000 	ldrb.w	r1, [r8]
 80129e4:	2203      	movs	r2, #3
 80129e6:	4628      	mov	r0, r5
 80129e8:	f7ed fc12 	bl	8000210 <memchr>
 80129ec:	b140      	cbz	r0, 8012a00 <_vfiprintf_r+0x170>
 80129ee:	2340      	movs	r3, #64	; 0x40
 80129f0:	1b40      	subs	r0, r0, r5
 80129f2:	fa03 f000 	lsl.w	r0, r3, r0
 80129f6:	9b04      	ldr	r3, [sp, #16]
 80129f8:	4303      	orrs	r3, r0
 80129fa:	f108 0801 	add.w	r8, r8, #1
 80129fe:	9304      	str	r3, [sp, #16]
 8012a00:	f898 1000 	ldrb.w	r1, [r8]
 8012a04:	482a      	ldr	r0, [pc, #168]	; (8012ab0 <_vfiprintf_r+0x220>)
 8012a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a0a:	2206      	movs	r2, #6
 8012a0c:	f108 0701 	add.w	r7, r8, #1
 8012a10:	f7ed fbfe 	bl	8000210 <memchr>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	d037      	beq.n	8012a88 <_vfiprintf_r+0x1f8>
 8012a18:	4b26      	ldr	r3, [pc, #152]	; (8012ab4 <_vfiprintf_r+0x224>)
 8012a1a:	bb1b      	cbnz	r3, 8012a64 <_vfiprintf_r+0x1d4>
 8012a1c:	9b03      	ldr	r3, [sp, #12]
 8012a1e:	3307      	adds	r3, #7
 8012a20:	f023 0307 	bic.w	r3, r3, #7
 8012a24:	3308      	adds	r3, #8
 8012a26:	9303      	str	r3, [sp, #12]
 8012a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a2a:	444b      	add	r3, r9
 8012a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a2e:	e750      	b.n	80128d2 <_vfiprintf_r+0x42>
 8012a30:	fb05 3202 	mla	r2, r5, r2, r3
 8012a34:	2001      	movs	r0, #1
 8012a36:	4688      	mov	r8, r1
 8012a38:	e78a      	b.n	8012950 <_vfiprintf_r+0xc0>
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	f108 0801 	add.w	r8, r8, #1
 8012a40:	9305      	str	r3, [sp, #20]
 8012a42:	4619      	mov	r1, r3
 8012a44:	250a      	movs	r5, #10
 8012a46:	4640      	mov	r0, r8
 8012a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a4c:	3a30      	subs	r2, #48	; 0x30
 8012a4e:	2a09      	cmp	r2, #9
 8012a50:	d903      	bls.n	8012a5a <_vfiprintf_r+0x1ca>
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d0c3      	beq.n	80129de <_vfiprintf_r+0x14e>
 8012a56:	9105      	str	r1, [sp, #20]
 8012a58:	e7c1      	b.n	80129de <_vfiprintf_r+0x14e>
 8012a5a:	fb05 2101 	mla	r1, r5, r1, r2
 8012a5e:	2301      	movs	r3, #1
 8012a60:	4680      	mov	r8, r0
 8012a62:	e7f0      	b.n	8012a46 <_vfiprintf_r+0x1b6>
 8012a64:	ab03      	add	r3, sp, #12
 8012a66:	9300      	str	r3, [sp, #0]
 8012a68:	4622      	mov	r2, r4
 8012a6a:	4b13      	ldr	r3, [pc, #76]	; (8012ab8 <_vfiprintf_r+0x228>)
 8012a6c:	a904      	add	r1, sp, #16
 8012a6e:	4630      	mov	r0, r6
 8012a70:	f7fb fcf4 	bl	800e45c <_printf_float>
 8012a74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012a78:	4681      	mov	r9, r0
 8012a7a:	d1d5      	bne.n	8012a28 <_vfiprintf_r+0x198>
 8012a7c:	89a3      	ldrh	r3, [r4, #12]
 8012a7e:	065b      	lsls	r3, r3, #25
 8012a80:	f53f af7e 	bmi.w	8012980 <_vfiprintf_r+0xf0>
 8012a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a86:	e77d      	b.n	8012984 <_vfiprintf_r+0xf4>
 8012a88:	ab03      	add	r3, sp, #12
 8012a8a:	9300      	str	r3, [sp, #0]
 8012a8c:	4622      	mov	r2, r4
 8012a8e:	4b0a      	ldr	r3, [pc, #40]	; (8012ab8 <_vfiprintf_r+0x228>)
 8012a90:	a904      	add	r1, sp, #16
 8012a92:	4630      	mov	r0, r6
 8012a94:	f7fb ff98 	bl	800e9c8 <_printf_i>
 8012a98:	e7ec      	b.n	8012a74 <_vfiprintf_r+0x1e4>
 8012a9a:	bf00      	nop
 8012a9c:	08013790 	.word	0x08013790
 8012aa0:	080138dc 	.word	0x080138dc
 8012aa4:	080137b0 	.word	0x080137b0
 8012aa8:	08013770 	.word	0x08013770
 8012aac:	080138e2 	.word	0x080138e2
 8012ab0:	080138e6 	.word	0x080138e6
 8012ab4:	0800e45d 	.word	0x0800e45d
 8012ab8:	0801286b 	.word	0x0801286b

08012abc <_scanf_chars>:
 8012abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ac0:	4615      	mov	r5, r2
 8012ac2:	688a      	ldr	r2, [r1, #8]
 8012ac4:	4680      	mov	r8, r0
 8012ac6:	460c      	mov	r4, r1
 8012ac8:	b932      	cbnz	r2, 8012ad8 <_scanf_chars+0x1c>
 8012aca:	698a      	ldr	r2, [r1, #24]
 8012acc:	2a00      	cmp	r2, #0
 8012ace:	bf14      	ite	ne
 8012ad0:	f04f 32ff 	movne.w	r2, #4294967295
 8012ad4:	2201      	moveq	r2, #1
 8012ad6:	608a      	str	r2, [r1, #8]
 8012ad8:	6822      	ldr	r2, [r4, #0]
 8012ada:	06d1      	lsls	r1, r2, #27
 8012adc:	bf5f      	itttt	pl
 8012ade:	681a      	ldrpl	r2, [r3, #0]
 8012ae0:	1d11      	addpl	r1, r2, #4
 8012ae2:	6019      	strpl	r1, [r3, #0]
 8012ae4:	6817      	ldrpl	r7, [r2, #0]
 8012ae6:	2600      	movs	r6, #0
 8012ae8:	69a3      	ldr	r3, [r4, #24]
 8012aea:	b1db      	cbz	r3, 8012b24 <_scanf_chars+0x68>
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d107      	bne.n	8012b00 <_scanf_chars+0x44>
 8012af0:	682b      	ldr	r3, [r5, #0]
 8012af2:	6962      	ldr	r2, [r4, #20]
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	5cd3      	ldrb	r3, [r2, r3]
 8012af8:	b9a3      	cbnz	r3, 8012b24 <_scanf_chars+0x68>
 8012afa:	2e00      	cmp	r6, #0
 8012afc:	d132      	bne.n	8012b64 <_scanf_chars+0xa8>
 8012afe:	e006      	b.n	8012b0e <_scanf_chars+0x52>
 8012b00:	2b02      	cmp	r3, #2
 8012b02:	d007      	beq.n	8012b14 <_scanf_chars+0x58>
 8012b04:	2e00      	cmp	r6, #0
 8012b06:	d12d      	bne.n	8012b64 <_scanf_chars+0xa8>
 8012b08:	69a3      	ldr	r3, [r4, #24]
 8012b0a:	2b01      	cmp	r3, #1
 8012b0c:	d12a      	bne.n	8012b64 <_scanf_chars+0xa8>
 8012b0e:	2001      	movs	r0, #1
 8012b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b14:	f7fe fe28 	bl	8011768 <__locale_ctype_ptr>
 8012b18:	682b      	ldr	r3, [r5, #0]
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	4418      	add	r0, r3
 8012b1e:	7843      	ldrb	r3, [r0, #1]
 8012b20:	071b      	lsls	r3, r3, #28
 8012b22:	d4ef      	bmi.n	8012b04 <_scanf_chars+0x48>
 8012b24:	6823      	ldr	r3, [r4, #0]
 8012b26:	06da      	lsls	r2, r3, #27
 8012b28:	bf5e      	ittt	pl
 8012b2a:	682b      	ldrpl	r3, [r5, #0]
 8012b2c:	781b      	ldrbpl	r3, [r3, #0]
 8012b2e:	703b      	strbpl	r3, [r7, #0]
 8012b30:	682a      	ldr	r2, [r5, #0]
 8012b32:	686b      	ldr	r3, [r5, #4]
 8012b34:	f102 0201 	add.w	r2, r2, #1
 8012b38:	602a      	str	r2, [r5, #0]
 8012b3a:	68a2      	ldr	r2, [r4, #8]
 8012b3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8012b40:	f102 32ff 	add.w	r2, r2, #4294967295
 8012b44:	606b      	str	r3, [r5, #4]
 8012b46:	f106 0601 	add.w	r6, r6, #1
 8012b4a:	bf58      	it	pl
 8012b4c:	3701      	addpl	r7, #1
 8012b4e:	60a2      	str	r2, [r4, #8]
 8012b50:	b142      	cbz	r2, 8012b64 <_scanf_chars+0xa8>
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	dcc8      	bgt.n	8012ae8 <_scanf_chars+0x2c>
 8012b56:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012b5a:	4629      	mov	r1, r5
 8012b5c:	4640      	mov	r0, r8
 8012b5e:	4798      	blx	r3
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d0c1      	beq.n	8012ae8 <_scanf_chars+0x2c>
 8012b64:	6823      	ldr	r3, [r4, #0]
 8012b66:	f013 0310 	ands.w	r3, r3, #16
 8012b6a:	d105      	bne.n	8012b78 <_scanf_chars+0xbc>
 8012b6c:	68e2      	ldr	r2, [r4, #12]
 8012b6e:	3201      	adds	r2, #1
 8012b70:	60e2      	str	r2, [r4, #12]
 8012b72:	69a2      	ldr	r2, [r4, #24]
 8012b74:	b102      	cbz	r2, 8012b78 <_scanf_chars+0xbc>
 8012b76:	703b      	strb	r3, [r7, #0]
 8012b78:	6923      	ldr	r3, [r4, #16]
 8012b7a:	441e      	add	r6, r3
 8012b7c:	6126      	str	r6, [r4, #16]
 8012b7e:	2000      	movs	r0, #0
 8012b80:	e7c6      	b.n	8012b10 <_scanf_chars+0x54>
	...

08012b84 <_scanf_i>:
 8012b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b88:	469a      	mov	sl, r3
 8012b8a:	4b74      	ldr	r3, [pc, #464]	; (8012d5c <_scanf_i+0x1d8>)
 8012b8c:	460c      	mov	r4, r1
 8012b8e:	4683      	mov	fp, r0
 8012b90:	4616      	mov	r6, r2
 8012b92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b96:	b087      	sub	sp, #28
 8012b98:	ab03      	add	r3, sp, #12
 8012b9a:	68a7      	ldr	r7, [r4, #8]
 8012b9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012ba0:	4b6f      	ldr	r3, [pc, #444]	; (8012d60 <_scanf_i+0x1dc>)
 8012ba2:	69a1      	ldr	r1, [r4, #24]
 8012ba4:	4a6f      	ldr	r2, [pc, #444]	; (8012d64 <_scanf_i+0x1e0>)
 8012ba6:	2903      	cmp	r1, #3
 8012ba8:	bf08      	it	eq
 8012baa:	461a      	moveq	r2, r3
 8012bac:	1e7b      	subs	r3, r7, #1
 8012bae:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8012bb2:	bf84      	itt	hi
 8012bb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012bb8:	60a3      	strhi	r3, [r4, #8]
 8012bba:	6823      	ldr	r3, [r4, #0]
 8012bbc:	9200      	str	r2, [sp, #0]
 8012bbe:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012bc2:	bf88      	it	hi
 8012bc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012bc8:	f104 091c 	add.w	r9, r4, #28
 8012bcc:	6023      	str	r3, [r4, #0]
 8012bce:	bf8c      	ite	hi
 8012bd0:	197f      	addhi	r7, r7, r5
 8012bd2:	2700      	movls	r7, #0
 8012bd4:	464b      	mov	r3, r9
 8012bd6:	f04f 0800 	mov.w	r8, #0
 8012bda:	9301      	str	r3, [sp, #4]
 8012bdc:	6831      	ldr	r1, [r6, #0]
 8012bde:	ab03      	add	r3, sp, #12
 8012be0:	2202      	movs	r2, #2
 8012be2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012be6:	7809      	ldrb	r1, [r1, #0]
 8012be8:	f7ed fb12 	bl	8000210 <memchr>
 8012bec:	9b01      	ldr	r3, [sp, #4]
 8012bee:	b330      	cbz	r0, 8012c3e <_scanf_i+0xba>
 8012bf0:	f1b8 0f01 	cmp.w	r8, #1
 8012bf4:	d15a      	bne.n	8012cac <_scanf_i+0x128>
 8012bf6:	6862      	ldr	r2, [r4, #4]
 8012bf8:	b92a      	cbnz	r2, 8012c06 <_scanf_i+0x82>
 8012bfa:	6822      	ldr	r2, [r4, #0]
 8012bfc:	2108      	movs	r1, #8
 8012bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c02:	6061      	str	r1, [r4, #4]
 8012c04:	6022      	str	r2, [r4, #0]
 8012c06:	6822      	ldr	r2, [r4, #0]
 8012c08:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012c0c:	6022      	str	r2, [r4, #0]
 8012c0e:	68a2      	ldr	r2, [r4, #8]
 8012c10:	1e51      	subs	r1, r2, #1
 8012c12:	60a1      	str	r1, [r4, #8]
 8012c14:	b19a      	cbz	r2, 8012c3e <_scanf_i+0xba>
 8012c16:	6832      	ldr	r2, [r6, #0]
 8012c18:	1c51      	adds	r1, r2, #1
 8012c1a:	6031      	str	r1, [r6, #0]
 8012c1c:	7812      	ldrb	r2, [r2, #0]
 8012c1e:	701a      	strb	r2, [r3, #0]
 8012c20:	1c5d      	adds	r5, r3, #1
 8012c22:	6873      	ldr	r3, [r6, #4]
 8012c24:	3b01      	subs	r3, #1
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	6073      	str	r3, [r6, #4]
 8012c2a:	dc07      	bgt.n	8012c3c <_scanf_i+0xb8>
 8012c2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012c30:	4631      	mov	r1, r6
 8012c32:	4658      	mov	r0, fp
 8012c34:	4798      	blx	r3
 8012c36:	2800      	cmp	r0, #0
 8012c38:	f040 8086 	bne.w	8012d48 <_scanf_i+0x1c4>
 8012c3c:	462b      	mov	r3, r5
 8012c3e:	f108 0801 	add.w	r8, r8, #1
 8012c42:	f1b8 0f03 	cmp.w	r8, #3
 8012c46:	d1c8      	bne.n	8012bda <_scanf_i+0x56>
 8012c48:	6862      	ldr	r2, [r4, #4]
 8012c4a:	b90a      	cbnz	r2, 8012c50 <_scanf_i+0xcc>
 8012c4c:	220a      	movs	r2, #10
 8012c4e:	6062      	str	r2, [r4, #4]
 8012c50:	6862      	ldr	r2, [r4, #4]
 8012c52:	4945      	ldr	r1, [pc, #276]	; (8012d68 <_scanf_i+0x1e4>)
 8012c54:	6960      	ldr	r0, [r4, #20]
 8012c56:	9301      	str	r3, [sp, #4]
 8012c58:	1a89      	subs	r1, r1, r2
 8012c5a:	f000 f8df 	bl	8012e1c <__sccl>
 8012c5e:	9b01      	ldr	r3, [sp, #4]
 8012c60:	f04f 0800 	mov.w	r8, #0
 8012c64:	461d      	mov	r5, r3
 8012c66:	68a3      	ldr	r3, [r4, #8]
 8012c68:	6822      	ldr	r2, [r4, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d03a      	beq.n	8012ce4 <_scanf_i+0x160>
 8012c6e:	6831      	ldr	r1, [r6, #0]
 8012c70:	6960      	ldr	r0, [r4, #20]
 8012c72:	f891 c000 	ldrb.w	ip, [r1]
 8012c76:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012c7a:	2800      	cmp	r0, #0
 8012c7c:	d032      	beq.n	8012ce4 <_scanf_i+0x160>
 8012c7e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012c82:	d121      	bne.n	8012cc8 <_scanf_i+0x144>
 8012c84:	0510      	lsls	r0, r2, #20
 8012c86:	d51f      	bpl.n	8012cc8 <_scanf_i+0x144>
 8012c88:	f108 0801 	add.w	r8, r8, #1
 8012c8c:	b117      	cbz	r7, 8012c94 <_scanf_i+0x110>
 8012c8e:	3301      	adds	r3, #1
 8012c90:	3f01      	subs	r7, #1
 8012c92:	60a3      	str	r3, [r4, #8]
 8012c94:	6873      	ldr	r3, [r6, #4]
 8012c96:	3b01      	subs	r3, #1
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	6073      	str	r3, [r6, #4]
 8012c9c:	dd1b      	ble.n	8012cd6 <_scanf_i+0x152>
 8012c9e:	6833      	ldr	r3, [r6, #0]
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	6033      	str	r3, [r6, #0]
 8012ca4:	68a3      	ldr	r3, [r4, #8]
 8012ca6:	3b01      	subs	r3, #1
 8012ca8:	60a3      	str	r3, [r4, #8]
 8012caa:	e7dc      	b.n	8012c66 <_scanf_i+0xe2>
 8012cac:	f1b8 0f02 	cmp.w	r8, #2
 8012cb0:	d1ad      	bne.n	8012c0e <_scanf_i+0x8a>
 8012cb2:	6822      	ldr	r2, [r4, #0]
 8012cb4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012cb8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012cbc:	d1bf      	bne.n	8012c3e <_scanf_i+0xba>
 8012cbe:	2110      	movs	r1, #16
 8012cc0:	6061      	str	r1, [r4, #4]
 8012cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012cc6:	e7a1      	b.n	8012c0c <_scanf_i+0x88>
 8012cc8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012ccc:	6022      	str	r2, [r4, #0]
 8012cce:	780b      	ldrb	r3, [r1, #0]
 8012cd0:	702b      	strb	r3, [r5, #0]
 8012cd2:	3501      	adds	r5, #1
 8012cd4:	e7de      	b.n	8012c94 <_scanf_i+0x110>
 8012cd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012cda:	4631      	mov	r1, r6
 8012cdc:	4658      	mov	r0, fp
 8012cde:	4798      	blx	r3
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d0df      	beq.n	8012ca4 <_scanf_i+0x120>
 8012ce4:	6823      	ldr	r3, [r4, #0]
 8012ce6:	05d9      	lsls	r1, r3, #23
 8012ce8:	d50c      	bpl.n	8012d04 <_scanf_i+0x180>
 8012cea:	454d      	cmp	r5, r9
 8012cec:	d908      	bls.n	8012d00 <_scanf_i+0x17c>
 8012cee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012cf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012cf6:	4632      	mov	r2, r6
 8012cf8:	4658      	mov	r0, fp
 8012cfa:	4798      	blx	r3
 8012cfc:	1e6f      	subs	r7, r5, #1
 8012cfe:	463d      	mov	r5, r7
 8012d00:	454d      	cmp	r5, r9
 8012d02:	d029      	beq.n	8012d58 <_scanf_i+0x1d4>
 8012d04:	6822      	ldr	r2, [r4, #0]
 8012d06:	f012 0210 	ands.w	r2, r2, #16
 8012d0a:	d113      	bne.n	8012d34 <_scanf_i+0x1b0>
 8012d0c:	702a      	strb	r2, [r5, #0]
 8012d0e:	6863      	ldr	r3, [r4, #4]
 8012d10:	9e00      	ldr	r6, [sp, #0]
 8012d12:	4649      	mov	r1, r9
 8012d14:	4658      	mov	r0, fp
 8012d16:	47b0      	blx	r6
 8012d18:	f8da 3000 	ldr.w	r3, [sl]
 8012d1c:	6821      	ldr	r1, [r4, #0]
 8012d1e:	1d1a      	adds	r2, r3, #4
 8012d20:	f8ca 2000 	str.w	r2, [sl]
 8012d24:	f011 0f20 	tst.w	r1, #32
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	d010      	beq.n	8012d4e <_scanf_i+0x1ca>
 8012d2c:	6018      	str	r0, [r3, #0]
 8012d2e:	68e3      	ldr	r3, [r4, #12]
 8012d30:	3301      	adds	r3, #1
 8012d32:	60e3      	str	r3, [r4, #12]
 8012d34:	eba5 0509 	sub.w	r5, r5, r9
 8012d38:	44a8      	add	r8, r5
 8012d3a:	6925      	ldr	r5, [r4, #16]
 8012d3c:	4445      	add	r5, r8
 8012d3e:	6125      	str	r5, [r4, #16]
 8012d40:	2000      	movs	r0, #0
 8012d42:	b007      	add	sp, #28
 8012d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d48:	f04f 0800 	mov.w	r8, #0
 8012d4c:	e7ca      	b.n	8012ce4 <_scanf_i+0x160>
 8012d4e:	07ca      	lsls	r2, r1, #31
 8012d50:	bf4c      	ite	mi
 8012d52:	8018      	strhmi	r0, [r3, #0]
 8012d54:	6018      	strpl	r0, [r3, #0]
 8012d56:	e7ea      	b.n	8012d2e <_scanf_i+0x1aa>
 8012d58:	2001      	movs	r0, #1
 8012d5a:	e7f2      	b.n	8012d42 <_scanf_i+0x1be>
 8012d5c:	08013254 	.word	0x08013254
 8012d60:	0800ffb1 	.word	0x0800ffb1
 8012d64:	08012f99 	.word	0x08012f99
 8012d68:	080138fd 	.word	0x080138fd

08012d6c <_putc_r>:
 8012d6c:	b570      	push	{r4, r5, r6, lr}
 8012d6e:	460d      	mov	r5, r1
 8012d70:	4614      	mov	r4, r2
 8012d72:	4606      	mov	r6, r0
 8012d74:	b118      	cbz	r0, 8012d7e <_putc_r+0x12>
 8012d76:	6983      	ldr	r3, [r0, #24]
 8012d78:	b90b      	cbnz	r3, 8012d7e <_putc_r+0x12>
 8012d7a:	f7fe f941 	bl	8011000 <__sinit>
 8012d7e:	4b13      	ldr	r3, [pc, #76]	; (8012dcc <_putc_r+0x60>)
 8012d80:	429c      	cmp	r4, r3
 8012d82:	d112      	bne.n	8012daa <_putc_r+0x3e>
 8012d84:	6874      	ldr	r4, [r6, #4]
 8012d86:	68a3      	ldr	r3, [r4, #8]
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	60a3      	str	r3, [r4, #8]
 8012d8e:	da16      	bge.n	8012dbe <_putc_r+0x52>
 8012d90:	69a2      	ldr	r2, [r4, #24]
 8012d92:	4293      	cmp	r3, r2
 8012d94:	db02      	blt.n	8012d9c <_putc_r+0x30>
 8012d96:	b2eb      	uxtb	r3, r5
 8012d98:	2b0a      	cmp	r3, #10
 8012d9a:	d110      	bne.n	8012dbe <_putc_r+0x52>
 8012d9c:	4622      	mov	r2, r4
 8012d9e:	4629      	mov	r1, r5
 8012da0:	4630      	mov	r0, r6
 8012da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012da6:	f7fd b915 	b.w	800ffd4 <__swbuf_r>
 8012daa:	4b09      	ldr	r3, [pc, #36]	; (8012dd0 <_putc_r+0x64>)
 8012dac:	429c      	cmp	r4, r3
 8012dae:	d101      	bne.n	8012db4 <_putc_r+0x48>
 8012db0:	68b4      	ldr	r4, [r6, #8]
 8012db2:	e7e8      	b.n	8012d86 <_putc_r+0x1a>
 8012db4:	4b07      	ldr	r3, [pc, #28]	; (8012dd4 <_putc_r+0x68>)
 8012db6:	429c      	cmp	r4, r3
 8012db8:	bf08      	it	eq
 8012dba:	68f4      	ldreq	r4, [r6, #12]
 8012dbc:	e7e3      	b.n	8012d86 <_putc_r+0x1a>
 8012dbe:	6823      	ldr	r3, [r4, #0]
 8012dc0:	1c5a      	adds	r2, r3, #1
 8012dc2:	6022      	str	r2, [r4, #0]
 8012dc4:	701d      	strb	r5, [r3, #0]
 8012dc6:	b2e8      	uxtb	r0, r5
 8012dc8:	bd70      	pop	{r4, r5, r6, pc}
 8012dca:	bf00      	nop
 8012dcc:	08013790 	.word	0x08013790
 8012dd0:	080137b0 	.word	0x080137b0
 8012dd4:	08013770 	.word	0x08013770

08012dd8 <_read_r>:
 8012dd8:	b538      	push	{r3, r4, r5, lr}
 8012dda:	4c07      	ldr	r4, [pc, #28]	; (8012df8 <_read_r+0x20>)
 8012ddc:	4605      	mov	r5, r0
 8012dde:	4608      	mov	r0, r1
 8012de0:	4611      	mov	r1, r2
 8012de2:	2200      	movs	r2, #0
 8012de4:	6022      	str	r2, [r4, #0]
 8012de6:	461a      	mov	r2, r3
 8012de8:	f7f0 fde0 	bl	80039ac <_read>
 8012dec:	1c43      	adds	r3, r0, #1
 8012dee:	d102      	bne.n	8012df6 <_read_r+0x1e>
 8012df0:	6823      	ldr	r3, [r4, #0]
 8012df2:	b103      	cbz	r3, 8012df6 <_read_r+0x1e>
 8012df4:	602b      	str	r3, [r5, #0]
 8012df6:	bd38      	pop	{r3, r4, r5, pc}
 8012df8:	20004df8 	.word	0x20004df8

08012dfc <_sbrk_r>:
 8012dfc:	b538      	push	{r3, r4, r5, lr}
 8012dfe:	4c06      	ldr	r4, [pc, #24]	; (8012e18 <_sbrk_r+0x1c>)
 8012e00:	2300      	movs	r3, #0
 8012e02:	4605      	mov	r5, r0
 8012e04:	4608      	mov	r0, r1
 8012e06:	6023      	str	r3, [r4, #0]
 8012e08:	f7f0 fe22 	bl	8003a50 <_sbrk>
 8012e0c:	1c43      	adds	r3, r0, #1
 8012e0e:	d102      	bne.n	8012e16 <_sbrk_r+0x1a>
 8012e10:	6823      	ldr	r3, [r4, #0]
 8012e12:	b103      	cbz	r3, 8012e16 <_sbrk_r+0x1a>
 8012e14:	602b      	str	r3, [r5, #0]
 8012e16:	bd38      	pop	{r3, r4, r5, pc}
 8012e18:	20004df8 	.word	0x20004df8

08012e1c <__sccl>:
 8012e1c:	b570      	push	{r4, r5, r6, lr}
 8012e1e:	780b      	ldrb	r3, [r1, #0]
 8012e20:	2b5e      	cmp	r3, #94	; 0x5e
 8012e22:	bf13      	iteet	ne
 8012e24:	1c4a      	addne	r2, r1, #1
 8012e26:	1c8a      	addeq	r2, r1, #2
 8012e28:	784b      	ldrbeq	r3, [r1, #1]
 8012e2a:	2100      	movne	r1, #0
 8012e2c:	bf08      	it	eq
 8012e2e:	2101      	moveq	r1, #1
 8012e30:	1e44      	subs	r4, r0, #1
 8012e32:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8012e36:	f804 1f01 	strb.w	r1, [r4, #1]!
 8012e3a:	42ac      	cmp	r4, r5
 8012e3c:	d1fb      	bne.n	8012e36 <__sccl+0x1a>
 8012e3e:	b913      	cbnz	r3, 8012e46 <__sccl+0x2a>
 8012e40:	3a01      	subs	r2, #1
 8012e42:	4610      	mov	r0, r2
 8012e44:	bd70      	pop	{r4, r5, r6, pc}
 8012e46:	f081 0401 	eor.w	r4, r1, #1
 8012e4a:	54c4      	strb	r4, [r0, r3]
 8012e4c:	1c51      	adds	r1, r2, #1
 8012e4e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8012e52:	2d2d      	cmp	r5, #45	; 0x2d
 8012e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8012e58:	460a      	mov	r2, r1
 8012e5a:	d006      	beq.n	8012e6a <__sccl+0x4e>
 8012e5c:	2d5d      	cmp	r5, #93	; 0x5d
 8012e5e:	d0f0      	beq.n	8012e42 <__sccl+0x26>
 8012e60:	b90d      	cbnz	r5, 8012e66 <__sccl+0x4a>
 8012e62:	4632      	mov	r2, r6
 8012e64:	e7ed      	b.n	8012e42 <__sccl+0x26>
 8012e66:	462b      	mov	r3, r5
 8012e68:	e7ef      	b.n	8012e4a <__sccl+0x2e>
 8012e6a:	780e      	ldrb	r6, [r1, #0]
 8012e6c:	2e5d      	cmp	r6, #93	; 0x5d
 8012e6e:	d0fa      	beq.n	8012e66 <__sccl+0x4a>
 8012e70:	42b3      	cmp	r3, r6
 8012e72:	dcf8      	bgt.n	8012e66 <__sccl+0x4a>
 8012e74:	3301      	adds	r3, #1
 8012e76:	429e      	cmp	r6, r3
 8012e78:	54c4      	strb	r4, [r0, r3]
 8012e7a:	dcfb      	bgt.n	8012e74 <__sccl+0x58>
 8012e7c:	3102      	adds	r1, #2
 8012e7e:	e7e6      	b.n	8012e4e <__sccl+0x32>

08012e80 <strncmp>:
 8012e80:	b510      	push	{r4, lr}
 8012e82:	b16a      	cbz	r2, 8012ea0 <strncmp+0x20>
 8012e84:	3901      	subs	r1, #1
 8012e86:	1884      	adds	r4, r0, r2
 8012e88:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012e8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012e90:	4293      	cmp	r3, r2
 8012e92:	d103      	bne.n	8012e9c <strncmp+0x1c>
 8012e94:	42a0      	cmp	r0, r4
 8012e96:	d001      	beq.n	8012e9c <strncmp+0x1c>
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d1f5      	bne.n	8012e88 <strncmp+0x8>
 8012e9c:	1a98      	subs	r0, r3, r2
 8012e9e:	bd10      	pop	{r4, pc}
 8012ea0:	4610      	mov	r0, r2
 8012ea2:	e7fc      	b.n	8012e9e <strncmp+0x1e>

08012ea4 <_strtoul_l.isra.0>:
 8012ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ea8:	4680      	mov	r8, r0
 8012eaa:	4689      	mov	r9, r1
 8012eac:	4692      	mov	sl, r2
 8012eae:	461e      	mov	r6, r3
 8012eb0:	460f      	mov	r7, r1
 8012eb2:	463d      	mov	r5, r7
 8012eb4:	9808      	ldr	r0, [sp, #32]
 8012eb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012eba:	f7fe fc51 	bl	8011760 <__locale_ctype_ptr_l>
 8012ebe:	4420      	add	r0, r4
 8012ec0:	7843      	ldrb	r3, [r0, #1]
 8012ec2:	f013 0308 	ands.w	r3, r3, #8
 8012ec6:	d130      	bne.n	8012f2a <_strtoul_l.isra.0+0x86>
 8012ec8:	2c2d      	cmp	r4, #45	; 0x2d
 8012eca:	d130      	bne.n	8012f2e <_strtoul_l.isra.0+0x8a>
 8012ecc:	787c      	ldrb	r4, [r7, #1]
 8012ece:	1cbd      	adds	r5, r7, #2
 8012ed0:	2101      	movs	r1, #1
 8012ed2:	2e00      	cmp	r6, #0
 8012ed4:	d05c      	beq.n	8012f90 <_strtoul_l.isra.0+0xec>
 8012ed6:	2e10      	cmp	r6, #16
 8012ed8:	d109      	bne.n	8012eee <_strtoul_l.isra.0+0x4a>
 8012eda:	2c30      	cmp	r4, #48	; 0x30
 8012edc:	d107      	bne.n	8012eee <_strtoul_l.isra.0+0x4a>
 8012ede:	782b      	ldrb	r3, [r5, #0]
 8012ee0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012ee4:	2b58      	cmp	r3, #88	; 0x58
 8012ee6:	d14e      	bne.n	8012f86 <_strtoul_l.isra.0+0xe2>
 8012ee8:	786c      	ldrb	r4, [r5, #1]
 8012eea:	2610      	movs	r6, #16
 8012eec:	3502      	adds	r5, #2
 8012eee:	f04f 32ff 	mov.w	r2, #4294967295
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	fbb2 f2f6 	udiv	r2, r2, r6
 8012ef8:	fb06 fc02 	mul.w	ip, r6, r2
 8012efc:	ea6f 0c0c 	mvn.w	ip, ip
 8012f00:	4618      	mov	r0, r3
 8012f02:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012f06:	2f09      	cmp	r7, #9
 8012f08:	d817      	bhi.n	8012f3a <_strtoul_l.isra.0+0x96>
 8012f0a:	463c      	mov	r4, r7
 8012f0c:	42a6      	cmp	r6, r4
 8012f0e:	dd23      	ble.n	8012f58 <_strtoul_l.isra.0+0xb4>
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	db1e      	blt.n	8012f52 <_strtoul_l.isra.0+0xae>
 8012f14:	4282      	cmp	r2, r0
 8012f16:	d31c      	bcc.n	8012f52 <_strtoul_l.isra.0+0xae>
 8012f18:	d101      	bne.n	8012f1e <_strtoul_l.isra.0+0x7a>
 8012f1a:	45a4      	cmp	ip, r4
 8012f1c:	db19      	blt.n	8012f52 <_strtoul_l.isra.0+0xae>
 8012f1e:	fb00 4006 	mla	r0, r0, r6, r4
 8012f22:	2301      	movs	r3, #1
 8012f24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f28:	e7eb      	b.n	8012f02 <_strtoul_l.isra.0+0x5e>
 8012f2a:	462f      	mov	r7, r5
 8012f2c:	e7c1      	b.n	8012eb2 <_strtoul_l.isra.0+0xe>
 8012f2e:	2c2b      	cmp	r4, #43	; 0x2b
 8012f30:	bf04      	itt	eq
 8012f32:	1cbd      	addeq	r5, r7, #2
 8012f34:	787c      	ldrbeq	r4, [r7, #1]
 8012f36:	4619      	mov	r1, r3
 8012f38:	e7cb      	b.n	8012ed2 <_strtoul_l.isra.0+0x2e>
 8012f3a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012f3e:	2f19      	cmp	r7, #25
 8012f40:	d801      	bhi.n	8012f46 <_strtoul_l.isra.0+0xa2>
 8012f42:	3c37      	subs	r4, #55	; 0x37
 8012f44:	e7e2      	b.n	8012f0c <_strtoul_l.isra.0+0x68>
 8012f46:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012f4a:	2f19      	cmp	r7, #25
 8012f4c:	d804      	bhi.n	8012f58 <_strtoul_l.isra.0+0xb4>
 8012f4e:	3c57      	subs	r4, #87	; 0x57
 8012f50:	e7dc      	b.n	8012f0c <_strtoul_l.isra.0+0x68>
 8012f52:	f04f 33ff 	mov.w	r3, #4294967295
 8012f56:	e7e5      	b.n	8012f24 <_strtoul_l.isra.0+0x80>
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	da09      	bge.n	8012f70 <_strtoul_l.isra.0+0xcc>
 8012f5c:	2322      	movs	r3, #34	; 0x22
 8012f5e:	f8c8 3000 	str.w	r3, [r8]
 8012f62:	f04f 30ff 	mov.w	r0, #4294967295
 8012f66:	f1ba 0f00 	cmp.w	sl, #0
 8012f6a:	d107      	bne.n	8012f7c <_strtoul_l.isra.0+0xd8>
 8012f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f70:	b101      	cbz	r1, 8012f74 <_strtoul_l.isra.0+0xd0>
 8012f72:	4240      	negs	r0, r0
 8012f74:	f1ba 0f00 	cmp.w	sl, #0
 8012f78:	d0f8      	beq.n	8012f6c <_strtoul_l.isra.0+0xc8>
 8012f7a:	b10b      	cbz	r3, 8012f80 <_strtoul_l.isra.0+0xdc>
 8012f7c:	f105 39ff 	add.w	r9, r5, #4294967295
 8012f80:	f8ca 9000 	str.w	r9, [sl]
 8012f84:	e7f2      	b.n	8012f6c <_strtoul_l.isra.0+0xc8>
 8012f86:	2430      	movs	r4, #48	; 0x30
 8012f88:	2e00      	cmp	r6, #0
 8012f8a:	d1b0      	bne.n	8012eee <_strtoul_l.isra.0+0x4a>
 8012f8c:	2608      	movs	r6, #8
 8012f8e:	e7ae      	b.n	8012eee <_strtoul_l.isra.0+0x4a>
 8012f90:	2c30      	cmp	r4, #48	; 0x30
 8012f92:	d0a4      	beq.n	8012ede <_strtoul_l.isra.0+0x3a>
 8012f94:	260a      	movs	r6, #10
 8012f96:	e7aa      	b.n	8012eee <_strtoul_l.isra.0+0x4a>

08012f98 <_strtoul_r>:
 8012f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f9a:	4c06      	ldr	r4, [pc, #24]	; (8012fb4 <_strtoul_r+0x1c>)
 8012f9c:	4d06      	ldr	r5, [pc, #24]	; (8012fb8 <_strtoul_r+0x20>)
 8012f9e:	6824      	ldr	r4, [r4, #0]
 8012fa0:	6a24      	ldr	r4, [r4, #32]
 8012fa2:	2c00      	cmp	r4, #0
 8012fa4:	bf08      	it	eq
 8012fa6:	462c      	moveq	r4, r5
 8012fa8:	9400      	str	r4, [sp, #0]
 8012faa:	f7ff ff7b 	bl	8012ea4 <_strtoul_l.isra.0>
 8012fae:	b003      	add	sp, #12
 8012fb0:	bd30      	pop	{r4, r5, pc}
 8012fb2:	bf00      	nop
 8012fb4:	2000000c 	.word	0x2000000c
 8012fb8:	20000070 	.word	0x20000070

08012fbc <__submore>:
 8012fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc0:	460c      	mov	r4, r1
 8012fc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012fc8:	4299      	cmp	r1, r3
 8012fca:	d11d      	bne.n	8013008 <__submore+0x4c>
 8012fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012fd0:	f7ff f8de 	bl	8012190 <_malloc_r>
 8012fd4:	b918      	cbnz	r0, 8012fde <__submore+0x22>
 8012fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8012fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fe2:	63a3      	str	r3, [r4, #56]	; 0x38
 8012fe4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8012fea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8012fee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012ff2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012ff6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012ffa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8012ffe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013002:	6020      	str	r0, [r4, #0]
 8013004:	2000      	movs	r0, #0
 8013006:	e7e8      	b.n	8012fda <__submore+0x1e>
 8013008:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801300a:	0077      	lsls	r7, r6, #1
 801300c:	463a      	mov	r2, r7
 801300e:	f000 f85a 	bl	80130c6 <_realloc_r>
 8013012:	4605      	mov	r5, r0
 8013014:	2800      	cmp	r0, #0
 8013016:	d0de      	beq.n	8012fd6 <__submore+0x1a>
 8013018:	eb00 0806 	add.w	r8, r0, r6
 801301c:	4601      	mov	r1, r0
 801301e:	4632      	mov	r2, r6
 8013020:	4640      	mov	r0, r8
 8013022:	f7fe fc4f 	bl	80118c4 <memcpy>
 8013026:	f8c4 8000 	str.w	r8, [r4]
 801302a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801302e:	e7e9      	b.n	8013004 <__submore+0x48>

08013030 <__ascii_wctomb>:
 8013030:	b149      	cbz	r1, 8013046 <__ascii_wctomb+0x16>
 8013032:	2aff      	cmp	r2, #255	; 0xff
 8013034:	bf85      	ittet	hi
 8013036:	238a      	movhi	r3, #138	; 0x8a
 8013038:	6003      	strhi	r3, [r0, #0]
 801303a:	700a      	strbls	r2, [r1, #0]
 801303c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013040:	bf98      	it	ls
 8013042:	2001      	movls	r0, #1
 8013044:	4770      	bx	lr
 8013046:	4608      	mov	r0, r1
 8013048:	4770      	bx	lr
	...

0801304c <_fstat_r>:
 801304c:	b538      	push	{r3, r4, r5, lr}
 801304e:	4c07      	ldr	r4, [pc, #28]	; (801306c <_fstat_r+0x20>)
 8013050:	2300      	movs	r3, #0
 8013052:	4605      	mov	r5, r0
 8013054:	4608      	mov	r0, r1
 8013056:	4611      	mov	r1, r2
 8013058:	6023      	str	r3, [r4, #0]
 801305a:	f7f0 fcd0 	bl	80039fe <_fstat>
 801305e:	1c43      	adds	r3, r0, #1
 8013060:	d102      	bne.n	8013068 <_fstat_r+0x1c>
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	b103      	cbz	r3, 8013068 <_fstat_r+0x1c>
 8013066:	602b      	str	r3, [r5, #0]
 8013068:	bd38      	pop	{r3, r4, r5, pc}
 801306a:	bf00      	nop
 801306c:	20004df8 	.word	0x20004df8

08013070 <_isatty_r>:
 8013070:	b538      	push	{r3, r4, r5, lr}
 8013072:	4c06      	ldr	r4, [pc, #24]	; (801308c <_isatty_r+0x1c>)
 8013074:	2300      	movs	r3, #0
 8013076:	4605      	mov	r5, r0
 8013078:	4608      	mov	r0, r1
 801307a:	6023      	str	r3, [r4, #0]
 801307c:	f7f0 fccf 	bl	8003a1e <_isatty>
 8013080:	1c43      	adds	r3, r0, #1
 8013082:	d102      	bne.n	801308a <_isatty_r+0x1a>
 8013084:	6823      	ldr	r3, [r4, #0]
 8013086:	b103      	cbz	r3, 801308a <_isatty_r+0x1a>
 8013088:	602b      	str	r3, [r5, #0]
 801308a:	bd38      	pop	{r3, r4, r5, pc}
 801308c:	20004df8 	.word	0x20004df8

08013090 <memmove>:
 8013090:	4288      	cmp	r0, r1
 8013092:	b510      	push	{r4, lr}
 8013094:	eb01 0302 	add.w	r3, r1, r2
 8013098:	d807      	bhi.n	80130aa <memmove+0x1a>
 801309a:	1e42      	subs	r2, r0, #1
 801309c:	4299      	cmp	r1, r3
 801309e:	d00a      	beq.n	80130b6 <memmove+0x26>
 80130a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80130a8:	e7f8      	b.n	801309c <memmove+0xc>
 80130aa:	4283      	cmp	r3, r0
 80130ac:	d9f5      	bls.n	801309a <memmove+0xa>
 80130ae:	1881      	adds	r1, r0, r2
 80130b0:	1ad2      	subs	r2, r2, r3
 80130b2:	42d3      	cmn	r3, r2
 80130b4:	d100      	bne.n	80130b8 <memmove+0x28>
 80130b6:	bd10      	pop	{r4, pc}
 80130b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80130bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80130c0:	e7f7      	b.n	80130b2 <memmove+0x22>

080130c2 <__malloc_lock>:
 80130c2:	4770      	bx	lr

080130c4 <__malloc_unlock>:
 80130c4:	4770      	bx	lr

080130c6 <_realloc_r>:
 80130c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c8:	4607      	mov	r7, r0
 80130ca:	4614      	mov	r4, r2
 80130cc:	460e      	mov	r6, r1
 80130ce:	b921      	cbnz	r1, 80130da <_realloc_r+0x14>
 80130d0:	4611      	mov	r1, r2
 80130d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80130d6:	f7ff b85b 	b.w	8012190 <_malloc_r>
 80130da:	b922      	cbnz	r2, 80130e6 <_realloc_r+0x20>
 80130dc:	f7ff f80a 	bl	80120f4 <_free_r>
 80130e0:	4625      	mov	r5, r4
 80130e2:	4628      	mov	r0, r5
 80130e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130e6:	f000 f814 	bl	8013112 <_malloc_usable_size_r>
 80130ea:	42a0      	cmp	r0, r4
 80130ec:	d20f      	bcs.n	801310e <_realloc_r+0x48>
 80130ee:	4621      	mov	r1, r4
 80130f0:	4638      	mov	r0, r7
 80130f2:	f7ff f84d 	bl	8012190 <_malloc_r>
 80130f6:	4605      	mov	r5, r0
 80130f8:	2800      	cmp	r0, #0
 80130fa:	d0f2      	beq.n	80130e2 <_realloc_r+0x1c>
 80130fc:	4631      	mov	r1, r6
 80130fe:	4622      	mov	r2, r4
 8013100:	f7fe fbe0 	bl	80118c4 <memcpy>
 8013104:	4631      	mov	r1, r6
 8013106:	4638      	mov	r0, r7
 8013108:	f7fe fff4 	bl	80120f4 <_free_r>
 801310c:	e7e9      	b.n	80130e2 <_realloc_r+0x1c>
 801310e:	4635      	mov	r5, r6
 8013110:	e7e7      	b.n	80130e2 <_realloc_r+0x1c>

08013112 <_malloc_usable_size_r>:
 8013112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013116:	1f18      	subs	r0, r3, #4
 8013118:	2b00      	cmp	r3, #0
 801311a:	bfbc      	itt	lt
 801311c:	580b      	ldrlt	r3, [r1, r0]
 801311e:	18c0      	addlt	r0, r0, r3
 8013120:	4770      	bx	lr
	...

08013124 <_init>:
 8013124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013126:	bf00      	nop
 8013128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801312a:	bc08      	pop	{r3}
 801312c:	469e      	mov	lr, r3
 801312e:	4770      	bx	lr

08013130 <_fini>:
 8013130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013132:	bf00      	nop
 8013134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013136:	bc08      	pop	{r3}
 8013138:	469e      	mov	lr, r3
 801313a:	4770      	bx	lr
