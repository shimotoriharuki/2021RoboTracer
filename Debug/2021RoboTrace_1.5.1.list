
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ab8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  08018c78  08018c78  00028c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080197f4  080197f4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080197f4  080197f4  000297f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080197fc  080197fc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080197fc  080197fc  000297fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019804  08019804  00029804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019808  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c90  200001e0  080199e4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e70  080199e4  00030e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000390bb  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007942  00000000  00000000  000692c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a8  00000000  00000000  00070c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fe8  00000000  00000000  00072eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035241  00000000  00000000  00074ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025ba8  00000000  00000000  000aa0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110c17  00000000  00000000  000cfc89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e08a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4e4  00000000  00000000  001e091c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018c60 	.word	0x08018c60

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018c60 	.word	0x08018c60

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 fae6 	bl	800a5a8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e968 	.word	0x2003e968

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 face 	bl	800a5a8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e968 	.word	0x2003e968

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 f96f 	bl	800a304 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 fed6 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 fed0 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 feca 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 fec4 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 febe 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 feb8 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 feb2 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 feac 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 fea6 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 fea0 	bl	8008dd8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 fe94 	bl	8008dd8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 fe8e 	bl	8008dd8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 f96d 	bl	8016408 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00d f88e 	bl	800e2d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00d f88a 	bl	800e2d8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003ebbc 	.word	0x2003ebbc
 80011e0:	2003e8a0 	.word	0x2003e8a0
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f011 fc1e 	bl	8012d8c <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003d7ac 	.word	0x2003d7ac

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f013 ffe9 	bl	8015570 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f011 fc62 	bl	8012e74 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f011 fc5d 	bl	8012e74 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f011 f9cb 	bl	8012962 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08018c78 	.word	0x08018c78
 80015f8:	2003d71c 	.word	0x2003d71c
 80015fc:	2003d7ac 	.word	0x2003d7ac
 8001600:	2003d79c 	.word	0x2003d79c

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f011 fbd9 	bl	8012de0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f011 fe44 	bl	80132bc <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f011 fbd3 	bl	8012de0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f013 ff84 	bl	8015570 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f011 fc00 	bl	8012e74 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f011 f96e 	bl	8012962 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f011 fb72 	bl	8012d8c <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003d61c 	.word	0x2003d61c
 80016b8:	2003c4dc 	.word	0x2003c4dc
 80016bc:	08018c94 	.word	0x08018c94
 80016c0:	08018c78 	.word	0x08018c78
 80016c4:	2003d71c 	.word	0x2003d71c
 80016c8:	2003d7ac 	.word	0x2003d7ac
 80016cc:	2003d79c 	.word	0x2003d79c

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f013 ff87 	bl	8015618 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f011 ffa2 	bl	8013678 <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f011 fb24 	bl	8012d8c <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08018c84 	.word	0x08018c84
 8001754:	2003d71c 	.word	0x2003d71c
 8001758:	2003d7ac 	.word	0x2003d7ac

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f013 ff41 	bl	8015618 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 ff5c 	bl	8013678 <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f011 fade 	bl	8012d8c <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08018c90 	.word	0x08018c90
 80017e0:	2003d71c 	.word	0x2003d71c
 80017e4:	2003d7ac 	.word	0x2003d7ac

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f010 fd40 	bl	801227c <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08018ca0 	.word	0x08018ca0
 800181c:	2003c5dc 	.word	0x2003c5dc

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f013 ff1f 	bl	8015670 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f013 ff1b 	bl	8015670 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003d61c 	.word	0x2003d61c
 8001848:	2003c4dc 	.word	0x2003c4dc

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f011 fdf5 	bl	8013440 <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f011 fac2 	bl	8012de0 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f010 fd51 	bl	8012308 <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f011 faba 	bl	8012de0 <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003d61c 	.word	0x2003d61c
 8001874:	2003c4dc 	.word	0x2003c4dc
 8001878:	2003d7ac 	.word	0x2003d7ac
 800187c:	08018c94 	.word	0x08018c94

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003d71c 	.word	0x2003d71c

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f008 fd18 	bl	800a304 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00b fec1 	bl	800d664 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00b ffee 	bl	800d8cc <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f008 fd04 	bl	800a304 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003e848 	.word	0x2003e848

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f008 fce7 	bl	800a304 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00b fe90 	bl	800d664 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00b fe8a 	bl	800d664 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f008 fcd4 	bl	800a304 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003e848 	.word	0x2003e848

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003e7e4 	.word	0x2003e7e4
 8001a2c:	2003e7e2 	.word	0x2003e7e2
 8001a30:	2003e7dc 	.word	0x2003e7dc

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f007 f992 	bl	8008dd8 <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08018ca4 	.word	0x08018ca4
 8001ac0:	08018cb0 	.word	0x08018cb0
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003e7e4 	.word	0x2003e7e4
 8001b6c:	2003e7e2 	.word	0x2003e7e2
 8001b70:	2003e7dc 	.word	0x2003e7dc
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f007 f8dc 	bl	8008dd8 <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f007 f886 	bl	8008dd8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08018cb4 	.word	0x08018cb4
 8001d34:	08018cc0 	.word	0x08018cc0

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f008 fc27 	bl	800a5a8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f008 fd1b 	bl	800a7a4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003e9fc 	.word	0x2003e9fc

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f008 fbef 	bl	800a5a8 <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003e9fc 	.word	0x2003e9fc

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f008 fa45 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f008 fa35 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f008 fa24 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f008 fa14 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f008 fa04 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f008 f9f5 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f008 f9ef 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f008 f9e9 	bl	800a304 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f008 f9df 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f008 f9d9 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f008 f9d3 	bl	800a304 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f008 f9c9 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f008 f9c3 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f008 f9bd 	bl	800a304 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f008 f9b3 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f008 f9ad 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f008 f9a7 	bl	800a304 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f008 f99d 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f008 f997 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f008 f991 	bl	800a304 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f008 f987 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f008 f981 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f008 f97b 	bl	800a304 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f008 f971 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f008 f96b 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f008 f965 	bl	800a304 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f008 f95b 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f008 f955 	bl	800a304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f008 f94f 	bl	800a304 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f008 f936 	bl	800a304 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f008 f92b 	bl	800a304 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f008 f921 	bl	800a304 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f008 f916 	bl	800a304 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f006 fe6e 	bl	8008ea4 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003e920 	.word	0x2003e920

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f006 fccb 	bl	8008dd8 <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fc3e 	bl	8004e0c <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08018ccc 	.word	0x08018ccc
 800266c:	08018cd8 	.word	0x08018cd8
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), correction_check_cnt_(0)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027d2:	3350      	adds	r3, #80	; 0x50
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e0:	3314      	adds	r3, #20
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027ec:	3316      	adds	r3, #22
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027f8:	3318      	adds	r3, #24
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002804:	334c      	adds	r3, #76	; 0x4c
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002810:	334e      	adds	r3, #78	; 0x4e
 8002812:	2200      	movs	r2, #0
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800281c:	3350      	adds	r3, #80	; 0x50
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002828:	3351      	adds	r3, #81	; 0x51
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002834:	3352      	adds	r3, #82	; 0x52
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002840:	3354      	adds	r3, #84	; 0x54
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800284e:	3358      	adds	r3, #88	; 0x58
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800285c:	335c      	adds	r3, #92	; 0x5c
 800285e:	2200      	movs	r2, #0
 8002860:	801a      	strh	r2, [r3, #0]

{
	motor_ = motor;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002884:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288a:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002890:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002892:	2300      	movs	r3, #0
 8002894:	82fb      	strh	r3, [r7, #22]
 8002896:	8afb      	ldrh	r3, [r7, #22]
 8002898:	f241 726f 	movw	r2, #5999	; 0x176f
 800289c:	4293      	cmp	r3, r2
 800289e:	d80e      	bhi.n	80028be <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x17e>
		velocity_table_[i] = 0;
 80028a0:	8afb      	ldrh	r3, [r7, #22]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80028a8:	3314      	adds	r3, #20
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028b6:	8afb      	ldrh	r3, [r7, #22]
 80028b8:	3301      	adds	r3, #1
 80028ba:	82fb      	strh	r3, [r7, #22]
 80028bc:	e7eb      	b.n	8002896 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x156>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028be:	2300      	movs	r3, #0
 80028c0:	82bb      	strh	r3, [r7, #20]
 80028c2:	8abb      	ldrh	r3, [r7, #20]
 80028c4:	2b63      	cmp	r3, #99	; 0x63
 80028c6:	d80e      	bhi.n	80028e6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
		crossline_distance_[i] = 0;
 80028c8:	8abb      	ldrh	r3, [r7, #20]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028d0:	3306      	adds	r3, #6
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028de:	8abb      	ldrh	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	82bb      	strh	r3, [r7, #20]
 80028e4:	e7ed      	b.n	80028c2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x182>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	827b      	strh	r3, [r7, #18]
 80028ea:	8a7b      	ldrh	r3, [r7, #18]
 80028ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f0:	d20e      	bcs.n	8002910 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d0>
		sideline_distance_[i] = 0;
 80028f2:	8a7b      	ldrh	r3, [r7, #18]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028fa:	332a      	adds	r3, #42	; 0x2a
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002908:	8a7b      	ldrh	r3, [r7, #18]
 800290a:	3301      	adds	r3, #1
 800290c:	827b      	strh	r3, [r7, #18]
 800290e:	e7ec      	b.n	80028ea <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1aa>
	}
}
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002974:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80029a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80029ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029cc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <_ZN9LineTrace9calcErrorEv+0x130>)
 80029d4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdcd 	bl	8000578 <__aeabi_f2d>
 80029de:	a318      	add	r3, pc, #96	; (adr r3, 8002a40 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe20 	bl	8000628 <__aeabi_dmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	4625      	mov	r5, r4
 80029ee:	461c      	mov	r4, r3
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fdbf 	bl	8000578 <__aeabi_f2d>
 80029fa:	a313      	add	r3, pc, #76	; (adr r3, 8002a48 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fe12 	bl	8000628 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc56 	bl	80002bc <__adddf3>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	4618      	mov	r0, r3
 8002a16:	4621      	mov	r1, r4
 8002a18:	f7fe f8fe 	bl	8000c18 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a24:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a2a:	6013      	str	r3, [r2, #0]

	return diff;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	ee07 3a90 	vmov	s15, r3

}
 8002a32:	eeb0 0a67 	vmov.f32	s0, s15
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	f3af 8000 	nop.w
 8002a40:	47ae147b 	.word	0x47ae147b
 8002a44:	3fb47ae1 	.word	0x3fb47ae1
 8002a48:	d70a3d71 	.word	0xd70a3d71
 8002a4c:	3fed70a3 	.word	0x3fed70a3
 8002a50:	2000025c 	.word	0x2000025c
 8002a54:	20000280 	.word	0x20000280
 8002a58:	20000260 	.word	0x20000260
 8002a5c:	00000000 	.word	0x00000000

08002a60 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff59 	bl	8002920 <_ZN9LineTrace9calcErrorEv>
 8002a6e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a7c:	4b3c      	ldr	r3, [pc, #240]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	edd7 6a05 	vldr	s13, [r7, #20]
 8002aae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	ee17 0a90 	vmov	r0, s15
 8002aba:	f7fd fd5d 	bl	8000578 <__aeabi_f2d>
 8002abe:	a32a      	add	r3, pc, #168	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd feda 	bl	800087c <__aeabi_ddiv>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	4618      	mov	r0, r3
 8002ace:	4621      	mov	r1, r4
 8002ad0:	f7fe f8a2 	bl	8000c18 <__aeabi_d2f>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd4b 	bl	8000578 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f7fd fd3e 	bl	8000578 <__aeabi_f2d>
 8002afc:	a31a      	add	r3, pc, #104	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fd91 	bl	8000628 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fbd5 	bl	80002bc <__adddf3>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	4618      	mov	r0, r3
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f7fe f87d 	bl	8000c18 <__aeabi_d2f>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b22:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002b24:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b48:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	4610      	mov	r0, r2
 8002b52:	f002 fd3d 	bl	80055d0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6013      	str	r3, [r2, #0]

}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	f3af 8000 	nop.w
 8002b68:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b6c:	3f50624d 	.word	0x3f50624d
 8002b70:	20000288 	.word	0x20000288
 8002b74:	20000284 	.word	0x20000284

08002b78 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fc8f 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 fffe 	bl	8004b90 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 fd29 	bl	80045f0 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 fd8e 	bl	80046dc <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c00:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c2c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c30:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c3c:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f083 0301 	eor.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d044      	beq.n	8002cd4 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	d50f      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c60:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	d506      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d94d      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ca2:	3352      	adds	r3, #82	; 0x52
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002cae:	3318      	adds	r3, #24
 8002cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 f97b 	bl	8003fb4 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002cbe:	e032      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 f9e7 	bl	8004094 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	2200      	movs	r2, #0
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	e028      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cd8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	dd0f      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
 8002ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	dd06      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d02:	801a      	strh	r2, [r3, #0]
 8002d04:	e002      	b.n	8002d0c <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d908      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000268 	.word	0x20000268
 8002d38:	2000026c 	.word	0x2000026c
 8002d3c:	2000028f 	.word	0x2000028f
 8002d40:	44160000 	.word	0x44160000
 8002d44:	2000028c 	.word	0x2000028c
 8002d48:	2000028e 	.word	0x2000028e
 8002d4c:	43fa0000 	.word	0x43fa0000

08002d50 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d62:	3318      	adds	r3, #24
 8002d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d133      	bne.n	8002dd4 <_ZN9LineTrace15radius2VelocityEf+0x84>
		if(radius < 130) velocity = 1.3;
 8002d6c:	edd7 7a00 	vldr	s15, [r7]
 8002d70:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002ed0 <_ZN9LineTrace15radius2VelocityEf+0x180>
 8002d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	d501      	bpl.n	8002d82 <_ZN9LineTrace15radius2VelocityEf+0x32>
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <_ZN9LineTrace15radius2VelocityEf+0x184>)
 8002d80:	60fb      	str	r3, [r7, #12]
		if(radius < 500) velocity = 1.6;
 8002d82:	edd7 7a00 	vldr	s15, [r7]
 8002d86:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002ed8 <_ZN9LineTrace15radius2VelocityEf+0x188>
 8002d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	d502      	bpl.n	8002d9a <_ZN9LineTrace15radius2VelocityEf+0x4a>
 8002d94:	4b51      	ldr	r3, [pc, #324]	; (8002edc <_ZN9LineTrace15radius2VelocityEf+0x18c>)
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e08f      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 1500) velocity = 1.8;
 8002d9a:	edd7 7a00 	vldr	s15, [r7]
 8002d9e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x190>
 8002da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	d502      	bpl.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0x62>
 8002dac:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <_ZN9LineTrace15radius2VelocityEf+0x194>)
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e083      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 2000) velocity = 2.0;
 8002db2:	edd7 7a00 	vldr	s15, [r7]
 8002db6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002ee8 <_ZN9LineTrace15radius2VelocityEf+0x198>
 8002dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	d503      	bpl.n	8002dcc <_ZN9LineTrace15radius2VelocityEf+0x7c>
 8002dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e076      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else velocity = max_velocity_;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e072      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dda:	3318      	adds	r3, #24
 8002ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d168      	bne.n	8002eb6 <_ZN9LineTrace15radius2VelocityEf+0x166>
		if(radius < 100) velocity = min_velocity2_;
 8002de4:	edd7 7a00 	vldr	s15, [r7]
 8002de8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002eec <_ZN9LineTrace15radius2VelocityEf+0x19c>
 8002dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	d504      	bpl.n	8002e00 <_ZN9LineTrace15radius2VelocityEf+0xb0>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e05c      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 150) velocity = 1.4;
 8002e00:	edd7 7a00 	vldr	s15, [r7]
 8002e04:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002ef0 <_ZN9LineTrace15radius2VelocityEf+0x1a0>
 8002e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e10:	d502      	bpl.n	8002e18 <_ZN9LineTrace15radius2VelocityEf+0xc8>
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <_ZN9LineTrace15radius2VelocityEf+0x1a4>)
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e050      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 300) velocity = 1.5;
 8002e18:	edd7 7a00 	vldr	s15, [r7]
 8002e1c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002ef8 <_ZN9LineTrace15radius2VelocityEf+0x1a8>
 8002e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	d503      	bpl.n	8002e32 <_ZN9LineTrace15radius2VelocityEf+0xe2>
 8002e2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e043      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 500) velocity = 1.7;
 8002e32:	edd7 7a00 	vldr	s15, [r7]
 8002e36:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002ed8 <_ZN9LineTrace15radius2VelocityEf+0x188>
 8002e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	d502      	bpl.n	8002e4a <_ZN9LineTrace15radius2VelocityEf+0xfa>
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <_ZN9LineTrace15radius2VelocityEf+0x1ac>)
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e037      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 800) velocity = 1.8;
 8002e4a:	edd7 7a00 	vldr	s15, [r7]
 8002e4e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002f00 <_ZN9LineTrace15radius2VelocityEf+0x1b0>
 8002e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	d502      	bpl.n	8002e62 <_ZN9LineTrace15radius2VelocityEf+0x112>
 8002e5c:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <_ZN9LineTrace15radius2VelocityEf+0x194>)
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e02b      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 1000) velocity = 2.0;
 8002e62:	edd7 7a00 	vldr	s15, [r7]
 8002e66:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002f04 <_ZN9LineTrace15radius2VelocityEf+0x1b4>
 8002e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d503      	bpl.n	8002e7c <_ZN9LineTrace15radius2VelocityEf+0x12c>
 8002e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e01e      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 1500) velocity = 2.2;
 8002e7c:	edd7 7a00 	vldr	s15, [r7]
 8002e80:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x190>
 8002e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8c:	d502      	bpl.n	8002e94 <_ZN9LineTrace15radius2VelocityEf+0x144>
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <_ZN9LineTrace15radius2VelocityEf+0x1b8>)
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e012      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 2000) velocity = 2.4;
 8002e94:	edd7 7a00 	vldr	s15, [r7]
 8002e98:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002ee8 <_ZN9LineTrace15radius2VelocityEf+0x198>
 8002e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	d502      	bpl.n	8002eac <_ZN9LineTrace15radius2VelocityEf+0x15c>
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <_ZN9LineTrace15radius2VelocityEf+0x1bc>)
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e006      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else velocity = max_velocity2_;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e001      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
	}
	else velocity = 1.3;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <_ZN9LineTrace15radius2VelocityEf+0x184>)
 8002eb8:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	ee07 3a90 	vmov	s15, r3
}
 8002ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	43020000 	.word	0x43020000
 8002ed4:	3fa66666 	.word	0x3fa66666
 8002ed8:	43fa0000 	.word	0x43fa0000
 8002edc:	3fcccccd 	.word	0x3fcccccd
 8002ee0:	44bb8000 	.word	0x44bb8000
 8002ee4:	3fe66666 	.word	0x3fe66666
 8002ee8:	44fa0000 	.word	0x44fa0000
 8002eec:	42c80000 	.word	0x42c80000
 8002ef0:	43160000 	.word	0x43160000
 8002ef4:	3fb33333 	.word	0x3fb33333
 8002ef8:	43960000 	.word	0x43960000
 8002efc:	3fd9999a 	.word	0x3fd9999a
 8002f00:	44480000 	.word	0x44480000
 8002f04:	447a0000 	.word	0x447a0000
 8002f08:	400ccccd 	.word	0x400ccccd
 8002f0c:	4019999a 	.word	0x4019999a

08002f10 <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b08b      	sub	sp, #44	; 0x2c
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 fac2 	bl	80044a6 <_ZN6Logger23getDistanceArrayPointerEv>
 8002f22:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 fac8 	bl	80044be <_ZN6Logger20getThetaArrayPointerEv>
 8002f2e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f30:	2300      	movs	r3, #0
 8002f32:	837b      	strh	r3, [r7, #26]
 8002f34:	8b7b      	ldrh	r3, [r7, #26]
 8002f36:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d84b      	bhi.n	8002fd6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002f3e:	8b7b      	ldrh	r3, [r7, #26]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f4a:	8b7b      	ldrh	r3, [r7, #26]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f56:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f62:	d101      	bne.n	8002f68 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002f64:	4b30      	ldr	r3, [pc, #192]	; (8003028 <_ZN9LineTrace20createVelocityTabeleEv+0x118>)
 8002f66:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f74:	eeb0 0a66 	vmov.f32	s0, s13
 8002f78:	f7ff fbd2 	bl	8002720 <_ZSt3absf>
 8002f7c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f84:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800302c <_ZN9LineTrace20createVelocityTabeleEv+0x11c>
 8002f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	db01      	blt.n	8002f96 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002f92:	4b27      	ldr	r3, [pc, #156]	; (8003030 <_ZN9LineTrace20createVelocityTabeleEv+0x120>)
 8002f94:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002f96:	8b7c      	ldrh	r4, [r7, #26]
 8002f98:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fed7 	bl	8002d50 <_ZN9LineTrace15radius2VelocityEf>
 8002fa2:	eef0 7a40 	vmov.f32	s15, s0
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002fac:	3314      	adds	r3, #20
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002fb8:	8b7b      	ldrh	r3, [r7, #26]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	441a      	add	r2, r3
 8002fc0:	8b7b      	ldrh	r3, [r7, #26]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	3324      	adds	r3, #36	; 0x24
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002fce:	8b7b      	ldrh	r3, [r7, #26]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	837b      	strh	r3, [r7, #26]
 8002fd4:	e7ae      	b.n	8002f34 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fdc:	3358      	adds	r3, #88	; 0x58
 8002fde:	edd3 7a00 	vldr	s15, [r3]
 8002fe2:	6939      	ldr	r1, [r7, #16]
 8002fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f8e1 	bl	80031b0 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ff4:	3354      	adds	r3, #84	; 0x54
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	6939      	ldr	r1, [r7, #16]
 8002ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f97d 	bl	8003300 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800300c:	3354      	adds	r3, #84	; 0x54
 800300e:	2200      	movs	r2, #0
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	f241 7270 	movw	r2, #6000	; 0x1770
 8003016:	4907      	ldr	r1, [pc, #28]	; (8003034 <_ZN9LineTrace20createVelocityTabeleEv+0x124>)
 8003018:	4807      	ldr	r0, [pc, #28]	; (8003038 <_ZN9LineTrace20createVelocityTabeleEv+0x128>)
 800301a:	f7fe faf3 	bl	8001604 <sd_write_array_float>

}
 800301e:	bf00      	nop
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	bf00      	nop
 8003028:	3727c5ac 	.word	0x3727c5ac
 800302c:	459c4000 	.word	0x459c4000
 8003030:	459c4000 	.word	0x459c4000
 8003034:	08018d1c 	.word	0x08018d1c
 8003038:	08018d2c 	.word	0x08018d2c

0800303c <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b08b      	sub	sp, #44	; 0x2c
 8003040:	af02      	add	r7, sp, #8
 8003042:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69d8      	ldr	r0, [r3, #28]
 8003048:	4b4f      	ldr	r3, [pc, #316]	; (8003188 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>)
 800304a:	4a50      	ldr	r2, [pc, #320]	; (800318c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x150>)
 800304c:	4950      	ldr	r1, [pc, #320]	; (8003190 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 800304e:	f001 fab2 	bl	80045b6 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003058:	331c      	adds	r3, #28
 800305a:	2264      	movs	r2, #100	; 0x64
 800305c:	494d      	ldr	r1, [pc, #308]	; (8003194 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x158>)
 800305e:	484c      	ldr	r0, [pc, #304]	; (8003190 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 8003060:	f7fe fb36 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800306a:	33ac      	adds	r3, #172	; 0xac
 800306c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003070:	4949      	ldr	r1, [pc, #292]	; (8003198 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x15c>)
 8003072:	4847      	ldr	r0, [pc, #284]	; (8003190 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 8003074:	f7fe fb2c 	bl	80016d0 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fa12 	bl	80044a6 <_ZN6Logger23getDistanceArrayPointerEv>
 8003082:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4618      	mov	r0, r3
 800308a:	f001 fa18 	bl	80044be <_ZN6Logger20getThetaArrayPointerEv>
 800308e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003090:	2300      	movs	r3, #0
 8003092:	837b      	strh	r3, [r7, #26]
 8003094:	8b7b      	ldrh	r3, [r7, #26]
 8003096:	f241 726f 	movw	r2, #5999	; 0x176f
 800309a:	4293      	cmp	r3, r2
 800309c:	d84b      	bhi.n	8003136 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>
		temp_distance = p_distance[i];
 800309e:	8b7b      	ldrh	r3, [r7, #26]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4413      	add	r3, r2
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80030aa:	8b7b      	ldrh	r3, [r7, #26]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80030b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80030ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c2:	d101      	bne.n	80030c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80030c4:	4b35      	ldr	r3, [pc, #212]	; (800319c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x160>)
 80030c6:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80030c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80030cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80030d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030d4:	eeb0 0a66 	vmov.f32	s0, s13
 80030d8:	f7ff fb22 	bl	8002720 <_ZSt3absf>
 80030dc:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80030e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030e4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80031a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x164>
 80030e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f0:	db01      	blt.n	80030f6 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80030f2:	4b2c      	ldr	r3, [pc, #176]	; (80031a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x168>)
 80030f4:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80030f6:	8b7c      	ldrh	r4, [r7, #26]
 80030f8:	ed97 0a05 	vldr	s0, [r7, #20]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fe27 	bl	8002d50 <_ZN9LineTrace15radius2VelocityEf>
 8003102:	eef0 7a40 	vmov.f32	s15, s0
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800310c:	3314      	adds	r3, #20
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003118:	8b7b      	ldrh	r3, [r7, #26]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	441a      	add	r2, r3
 8003120:	8b7b      	ldrh	r3, [r7, #26]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	3324      	adds	r3, #36	; 0x24
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800312e:	8b7b      	ldrh	r3, [r7, #26]
 8003130:	3301      	adds	r3, #1
 8003132:	837b      	strh	r3, [r7, #26]
 8003134:	e7ae      	b.n	8003094 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800313c:	3358      	adds	r3, #88	; 0x58
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	6939      	ldr	r1, [r7, #16]
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f831 	bl	80031b0 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003154:	3354      	adds	r3, #84	; 0x54
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	6939      	ldr	r1, [r7, #16]
 800315c:	eeb0 0a67 	vmov.f32	s0, s15
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f8cd 	bl	8003300 <_ZN9LineTrace20accelerateProcessingEfPKf>


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800316c:	3354      	adds	r3, #84	; 0x54
 800316e:	2200      	movs	r2, #0
 8003170:	9200      	str	r2, [sp, #0]
 8003172:	f241 7270 	movw	r2, #6000	; 0x1770
 8003176:	490c      	ldr	r1, [pc, #48]	; (80031a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x16c>)
 8003178:	4805      	ldr	r0, [pc, #20]	; (8003190 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 800317a:	f7fe fa43 	bl	8001604 <sd_write_array_float>

}
 800317e:	bf00      	nop
 8003180:	3724      	adds	r7, #36	; 0x24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd90      	pop	{r4, r7, pc}
 8003186:	bf00      	nop
 8003188:	08018d38 	.word	0x08018d38
 800318c:	08018d44 	.word	0x08018d44
 8003190:	08018d2c 	.word	0x08018d2c
 8003194:	08018d54 	.word	0x08018d54
 8003198:	08018d64 	.word	0x08018d64
 800319c:	3727c5ac 	.word	0x3727c5ac
 80031a0:	459c4000 	.word	0x459c4000
 80031a4:	459c4000 	.word	0x459c4000
 80031a8:	08018d1c 	.word	0x08018d1c
 80031ac:	00000000 	.word	0x00000000

080031b0 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80031bc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80031be:	f241 736f 	movw	r3, #5999	; 0x176f
 80031c2:	83fb      	strh	r3, [r7, #30]
 80031c4:	8bfb      	ldrh	r3, [r7, #30]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8091 	beq.w	80032ee <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80031cc:	8bfb      	ldrh	r3, [r7, #30]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80031d6:	3314      	adds	r3, #20
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	3304      	adds	r3, #4
 80031de:	ed93 7a00 	vldr	s14, [r3]
 80031e2:	8bfb      	ldrh	r3, [r7, #30]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80031ea:	3314      	adds	r3, #20
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	3304      	adds	r3, #4
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fa:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80031fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320a:	dd6c      	ble.n	80032e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 800320c:	8bfb      	ldrh	r3, [r7, #30]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f9ae 	bl	8000578 <__aeabi_f2d>
 800321c:	a336      	add	r3, pc, #216	; (adr r3, 80032f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f7fd fa01 	bl	8000628 <__aeabi_dmul>
 8003226:	4603      	mov	r3, r0
 8003228:	460c      	mov	r4, r1
 800322a:	4625      	mov	r5, r4
 800322c:	461c      	mov	r4, r3
 800322e:	69b8      	ldr	r0, [r7, #24]
 8003230:	f7fd f9a2 	bl	8000578 <__aeabi_f2d>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4620      	mov	r0, r4
 800323a:	4629      	mov	r1, r5
 800323c:	f7fd fb1e 	bl	800087c <__aeabi_ddiv>
 8003240:	4603      	mov	r3, r0
 8003242:	460c      	mov	r4, r1
 8003244:	4618      	mov	r0, r3
 8003246:	4621      	mov	r1, r4
 8003248:	f7fd fce6 	bl	8000c18 <__aeabi_d2f>
 800324c:	4603      	mov	r3, r0
 800324e:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003250:	edd7 6a06 	vldr	s13, [r7, #24]
 8003254:	ed97 7a05 	vldr	s14, [r7, #20]
 8003258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800325c:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003260:	ed97 7a04 	vldr	s14, [r7, #16]
 8003264:	edd7 7a02 	vldr	s15, [r7, #8]
 8003268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	dd39      	ble.n	80032e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003272:	8bfb      	ldrh	r3, [r7, #30]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800327a:	3314      	adds	r3, #20
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f977 	bl	8000578 <__aeabi_f2d>
 800328a:	4604      	mov	r4, r0
 800328c:	460d      	mov	r5, r1
 800328e:	8bfb      	ldrh	r3, [r7, #30]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	ed93 7a00 	vldr	s14, [r3]
 800329a:	edd7 7a02 	vldr	s15, [r7, #8]
 800329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a2:	ee17 0a90 	vmov	r0, s15
 80032a6:	f7fd f967 	bl	8000578 <__aeabi_f2d>
 80032aa:	a313      	add	r3, pc, #76	; (adr r3, 80032f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f7fd f9ba 	bl	8000628 <__aeabi_dmul>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4620      	mov	r0, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fc fffe 	bl	80002bc <__adddf3>
 80032c0:	4603      	mov	r3, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	4619      	mov	r1, r3
 80032c6:	4622      	mov	r2, r4
 80032c8:	8bfb      	ldrh	r3, [r7, #30]
 80032ca:	1e5c      	subs	r4, r3, #1
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	f7fd fca2 	bl	8000c18 <__aeabi_d2f>
 80032d4:	4601      	mov	r1, r0
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80032dc:	3314      	adds	r3, #20
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032e6:	8bfb      	ldrh	r3, [r7, #30]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	83fb      	strh	r3, [r7, #30]
 80032ec:	e76a      	b.n	80031c4 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80032ee:	bf00      	nop
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bdb0      	pop	{r4, r5, r7, pc}
 80032f6:	bf00      	nop
 80032f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80032fc:	3f50624d 	.word	0x3f50624d

08003300 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003300:	b5b0      	push	{r4, r5, r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	ed87 0a02 	vstr	s0, [r7, #8]
 800330c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800330e:	2300      	movs	r3, #0
 8003310:	83fb      	strh	r3, [r7, #30]
 8003312:	8bfb      	ldrh	r3, [r7, #30]
 8003314:	f241 726f 	movw	r2, #5999	; 0x176f
 8003318:	4293      	cmp	r3, r2
 800331a:	f200 8091 	bhi.w	8003440 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800331e:	8bfb      	ldrh	r3, [r7, #30]
 8003320:	3301      	adds	r3, #1
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003328:	3314      	adds	r3, #20
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	ed93 7a00 	vldr	s14, [r3]
 8003334:	8bfb      	ldrh	r3, [r7, #30]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800333c:	3314      	adds	r3, #20
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	3304      	adds	r3, #4
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800334c:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003350:	edd7 7a06 	vldr	s15, [r7, #24]
 8003354:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335c:	dd6c      	ble.n	8003438 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 800335e:	8bfb      	ldrh	r3, [r7, #30]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f905 	bl	8000578 <__aeabi_f2d>
 800336e:	a336      	add	r3, pc, #216	; (adr r3, 8003448 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f7fd f958 	bl	8000628 <__aeabi_dmul>
 8003378:	4603      	mov	r3, r0
 800337a:	460c      	mov	r4, r1
 800337c:	4625      	mov	r5, r4
 800337e:	461c      	mov	r4, r3
 8003380:	69b8      	ldr	r0, [r7, #24]
 8003382:	f7fd f8f9 	bl	8000578 <__aeabi_f2d>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4620      	mov	r0, r4
 800338c:	4629      	mov	r1, r5
 800338e:	f7fd fa75 	bl	800087c <__aeabi_ddiv>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	4618      	mov	r0, r3
 8003398:	4621      	mov	r1, r4
 800339a:	f7fd fc3d 	bl	8000c18 <__aeabi_d2f>
 800339e:	4603      	mov	r3, r0
 80033a0:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80033a2:	edd7 6a06 	vldr	s13, [r7, #24]
 80033a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80033aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ae:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80033b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80033b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c2:	dd39      	ble.n	8003438 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80033c4:	8bfb      	ldrh	r3, [r7, #30]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80033cc:	3314      	adds	r3, #20
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd f8ce 	bl	8000578 <__aeabi_f2d>
 80033dc:	4604      	mov	r4, r0
 80033de:	460d      	mov	r5, r1
 80033e0:	8bfb      	ldrh	r3, [r7, #30]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	ed93 7a00 	vldr	s14, [r3]
 80033ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80033f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f4:	ee17 0a90 	vmov	r0, s15
 80033f8:	f7fd f8be 	bl	8000578 <__aeabi_f2d>
 80033fc:	a312      	add	r3, pc, #72	; (adr r3, 8003448 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 80033fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003402:	f7fd f911 	bl	8000628 <__aeabi_dmul>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4620      	mov	r0, r4
 800340c:	4629      	mov	r1, r5
 800340e:	f7fc ff55 	bl	80002bc <__adddf3>
 8003412:	4603      	mov	r3, r0
 8003414:	460c      	mov	r4, r1
 8003416:	4619      	mov	r1, r3
 8003418:	4622      	mov	r2, r4
 800341a:	8bfb      	ldrh	r3, [r7, #30]
 800341c:	1c5c      	adds	r4, r3, #1
 800341e:	4608      	mov	r0, r1
 8003420:	4611      	mov	r1, r2
 8003422:	f7fd fbf9 	bl	8000c18 <__aeabi_d2f>
 8003426:	4601      	mov	r1, r0
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800342e:	3314      	adds	r3, #20
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	3304      	adds	r3, #4
 8003436:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003438:	8bfb      	ldrh	r3, [r7, #30]
 800343a:	3301      	adds	r3, #1
 800343c:	83fb      	strh	r3, [r7, #30]
 800343e:	e768      	b.n	8003312 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003440:	bf00      	nop
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bdb0      	pop	{r4, r5, r7, pc}
 8003448:	d2f1a9fc 	.word	0xd2f1a9fc
 800344c:	3f50624d 	.word	0x3f50624d

08003450 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800345e:	3314      	adds	r3, #20
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8087 	beq.w	8003576 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd fffd 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003472:	eeb0 7a40 	vmov.f32	s14, s0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800347c:	3350      	adds	r3, #80	; 0x50
 800347e:	edd3 7a00 	vldr	s15, [r3]
 8003482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348a:	bfac      	ite	ge
 800348c:	2301      	movge	r3, #1
 800348e:	2300      	movlt	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d025      	beq.n	80034e2 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800349c:	3350      	adds	r3, #80	; 0x50
 800349e:	ed93 7a00 	vldr	s14, [r3]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034a8:	3316      	adds	r3, #22
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	3324      	adds	r3, #36	; 0x24
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80034c2:	3350      	adds	r3, #80	; 0x50
 80034c4:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034ce:	3316      	adds	r3, #22
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034dc:	3316      	adds	r3, #22
 80034de:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80034e0:	e7c2      	b.n	8003468 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034e8:	3316      	adds	r3, #22
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f241 726f 	movw	r2, #5999	; 0x176f
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d906      	bls.n	8003502 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034fa:	3316      	adds	r3, #22
 80034fc:	f241 726f 	movw	r2, #5999	; 0x176f
 8003500:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003508:	3350      	adds	r3, #80	; 0x50
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800350e:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd ffa9 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800351a:	eef0 7a40 	vmov.f32	s15, s0
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003520:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800352a:	3316      	adds	r3, #22
 800352c:	881a      	ldrh	r2, [r3, #0]
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 8003530:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003538:	3316      	adds	r3, #22
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003542:	3314      	adds	r3, #20
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	3304      	adds	r3, #4
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	eeb0 0a67 	vmov.f32	s0, s15
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f985 	bl	8003862 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800355e:	3316      	adds	r3, #22
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003568:	3314      	adds	r3, #20
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a06      	ldr	r2, [pc, #24]	; (800358c <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 8003574:	6013      	str	r3, [r2, #0]

	}
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000270 	.word	0x20000270
 8003584:	20000274 	.word	0x20000274
 8003588:	20000278 	.word	0x20000278
 800358c:	2000027c 	.word	0x2000027c

08003590 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003598:	2300      	movs	r3, #0
 800359a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd ff54 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 80035a6:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 fadd 	bl	8004b6e <_ZN8Odometry8getThetaEv>
 80035b4:	ec54 3b10 	vmov	r3, r4, d0
 80035b8:	4618      	mov	r0, r3
 80035ba:	4621      	mov	r1, r4
 80035bc:	f7fd fb2c 	bl	8000c18 <__aeabi_d2f>
 80035c0:	4603      	mov	r3, r0
 80035c2:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80035c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80035c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d0:	d101      	bne.n	80035d6 <_ZN9LineTrace8isStableEv+0x46>
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <_ZN9LineTrace8isStableEv+0xd0>)
 80035d4:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80035d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80035da:	edd7 7a04 	vldr	s15, [r7, #16]
 80035de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035e2:	eeb0 0a66 	vmov.f32	s0, s13
 80035e6:	f7ff f89b 	bl	8002720 <_ZSt3absf>
 80035ea:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80035ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80035f2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003664 <_ZN9LineTrace8isStableEv+0xd4>
 80035f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fe:	db01      	blt.n	8003604 <_ZN9LineTrace8isStableEv+0x74>
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <_ZN9LineTrace8isStableEv+0xd8>)
 8003602:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800360a:	3352      	adds	r3, #82	; 0x52
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <_ZN9LineTrace8isStableEv+0xdc>)
 8003614:	2200      	movs	r2, #0
 8003616:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800361e:	3352      	adds	r3, #82	; 0x52
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003624:	edd7 7a03 	vldr	s15, [r7, #12]
 8003628:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003670 <_ZN9LineTrace8isStableEv+0xe0>
 800362c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003634:	db06      	blt.n	8003644 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <_ZN9LineTrace8isStableEv+0xdc>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <_ZN9LineTrace8isStableEv+0xdc>)
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	e002      	b.n	800364a <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <_ZN9LineTrace8isStableEv+0xdc>)
 8003646:	2200      	movs	r2, #0
 8003648:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <_ZN9LineTrace8isStableEv+0xdc>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	2b16      	cmp	r3, #22
 8003650:	d901      	bls.n	8003656 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
}
 8003658:	4618      	mov	r0, r3
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bd90      	pop	{r4, r7, pc}
 8003660:	3727c5ac 	.word	0x3727c5ac
 8003664:	459c4000 	.word	0x459c4000
 8003668:	459c4000 	.word	0x459c4000
 800366c:	20000290 	.word	0x20000290
 8003670:	44fa0000 	.word	0x44fa0000

08003674 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	; 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800367c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003680:	2201      	movs	r2, #1
 8003682:	4942      	ldr	r1, [pc, #264]	; (800378c <_ZN9LineTrace4initEv+0x118>)
 8003684:	4842      	ldr	r0, [pc, #264]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 8003686:	f7fe f823 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800368a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800368e:	2201      	movs	r2, #1
 8003690:	4940      	ldr	r1, [pc, #256]	; (8003794 <_ZN9LineTrace4initEv+0x120>)
 8003692:	483f      	ldr	r0, [pc, #252]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 8003694:	f7fe f81c 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369c:	2201      	movs	r2, #1
 800369e:	493e      	ldr	r1, [pc, #248]	; (8003798 <_ZN9LineTrace4initEv+0x124>)
 80036a0:	483b      	ldr	r0, [pc, #236]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 80036a2:	f7fe f815 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80036a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80036ae:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80036b2:	eeb0 1a66 	vmov.f32	s2, s13
 80036b6:	eef0 0a47 	vmov.f32	s1, s14
 80036ba:	eeb0 0a67 	vmov.f32	s0, s15
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f87a 	bl	80037b8 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80036c4:	f107 0320 	add.w	r3, r7, #32
 80036c8:	2201      	movs	r2, #1
 80036ca:	4934      	ldr	r1, [pc, #208]	; (800379c <_ZN9LineTrace4initEv+0x128>)
 80036cc:	4830      	ldr	r0, [pc, #192]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 80036ce:	f7fd ffff 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80036d2:	f107 031c 	add.w	r3, r7, #28
 80036d6:	2201      	movs	r2, #1
 80036d8:	4931      	ldr	r1, [pc, #196]	; (80037a0 <_ZN9LineTrace4initEv+0x12c>)
 80036da:	482d      	ldr	r0, [pc, #180]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 80036dc:	f7fd fff8 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80036e0:	f107 0318 	add.w	r3, r7, #24
 80036e4:	2201      	movs	r2, #1
 80036e6:	492f      	ldr	r1, [pc, #188]	; (80037a4 <_ZN9LineTrace4initEv+0x130>)
 80036e8:	4829      	ldr	r0, [pc, #164]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 80036ea:	f7fd fff1 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	2201      	movs	r2, #1
 80036f4:	492c      	ldr	r1, [pc, #176]	; (80037a8 <_ZN9LineTrace4initEv+0x134>)
 80036f6:	4826      	ldr	r0, [pc, #152]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 80036f8:	f7fd ffea 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 80036fc:	f107 0310 	add.w	r3, r7, #16
 8003700:	2201      	movs	r2, #1
 8003702:	492a      	ldr	r1, [pc, #168]	; (80037ac <_ZN9LineTrace4initEv+0x138>)
 8003704:	4822      	ldr	r0, [pc, #136]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 8003706:	f7fd ffe3 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 800370a:	edd7 7a08 	vldr	s15, [r7, #32]
 800370e:	eeb0 0a67 	vmov.f32	s0, s15
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8a5 	bl	8003862 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003718:	edd7 7a07 	vldr	s15, [r7, #28]
 800371c:	eeb0 0a67 	vmov.f32	s0, s15
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8ad 	bl	8003880 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003726:	edd7 7a06 	vldr	s15, [r7, #24]
 800372a:	eeb0 0a67 	vmov.f32	s0, s15
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8b5 	bl	800389e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003734:	edd7 7a05 	vldr	s15, [r7, #20]
 8003738:	eeb0 0a67 	vmov.f32	s0, s15
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8be 	bl	80038be <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003742:	edd7 7a04 	vldr	s15, [r7, #16]
 8003746:	eeb0 0a67 	vmov.f32	s0, s15
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8c7 	bl	80038de <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	2201      	movs	r2, #1
 8003756:	4916      	ldr	r1, [pc, #88]	; (80037b0 <_ZN9LineTrace4initEv+0x13c>)
 8003758:	480d      	ldr	r0, [pc, #52]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 800375a:	f7fd ffb9 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 800375e:	f107 0308 	add.w	r3, r7, #8
 8003762:	2201      	movs	r2, #1
 8003764:	4913      	ldr	r1, [pc, #76]	; (80037b4 <_ZN9LineTrace4initEv+0x140>)
 8003766:	480a      	ldr	r0, [pc, #40]	; (8003790 <_ZN9LineTrace4initEv+0x11c>)
 8003768:	f7fd ffb2 	bl	80016d0 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 800376c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003770:	ed97 7a02 	vldr	s14, [r7, #8]
 8003774:	eef0 0a47 	vmov.f32	s1, s14
 8003778:	eeb0 0a67 	vmov.f32	s0, s15
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f90c 	bl	800399a <_ZN9LineTrace12setMaxAccDecEff>
}
 8003782:	bf00      	nop
 8003784:	3730      	adds	r7, #48	; 0x30
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	08018d70 	.word	0x08018d70
 8003790:	08018d78 	.word	0x08018d78
 8003794:	08018d80 	.word	0x08018d80
 8003798:	08018d88 	.word	0x08018d88
 800379c:	08018d90 	.word	0x08018d90
 80037a0:	08018d9c 	.word	0x08018d9c
 80037a4:	08018da8 	.word	0x08018da8
 80037a8:	08018db4 	.word	0x08018db4
 80037ac:	08018dc0 	.word	0x08018dc0
 80037b0:	08018dcc 	.word	0x08018dcc
 80037b4:	08018dd4 	.word	0x08018dd4

080037b8 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80037c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80037c8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
	return kp_;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	ee07 3a90 	vmov	s15, r3
}
 80037fa:	eeb0 0a67 	vmov.f32	s0, s15
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	return ki_;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	ee07 3a90 	vmov	s15, r3
}
 8003818:	eeb0 0a67 	vmov.f32	s0, s15
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
	return kd_;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	ee07 3a90 	vmov	s15, r3
}
 8003836:	eeb0 0a67 	vmov.f32	s0, s15
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800390a:	ee07 3a90 	vmov	s15, r3
}
 800390e:	eeb0 0a67 	vmov.f32	s0, s15
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003928:	ee07 3a90 	vmov	s15, r3
}
 800392c:	eeb0 0a67 	vmov.f32	s0, s15
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003948:	ee07 3a90 	vmov	s15, r3
}
 800394c:	eeb0 0a67 	vmov.f32	s0, s15
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003968:	ee07 3a90 	vmov	s15, r3
}
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	ee07 3a90 	vmov	s15, r3
}
 800398c:	eeb0 0a67 	vmov.f32	s0, s15
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80039a6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039b0:	3354      	adds	r3, #84	; 0x54
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039bc:	3358      	adds	r3, #88	; 0x58
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	601a      	str	r2, [r3, #0]
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
	return max_acc_;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039dc:	3354      	adds	r3, #84	; 0x54
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	ee07 3a90 	vmov	s15, r3
}
 80039e4:	eeb0 0a67 	vmov.f32	s0, s15
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
	return max_dec_;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a00:	3358      	adds	r3, #88	; 0x58
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	ee07 3a90 	vmov	s15, r3
}
 8003a08:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80fc 	beq.w	8003c24 <_ZN9LineTrace4flipEv+0x20c>
		// ---- line following processing -----//
		pidTrace();
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff f817 	bl	8002a60 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003a32:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa9a 	bl	8003f70 <_ZN9LineTrace16isTargetDistanceEf>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d028      	beq.n	8003a94 <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f9f8 	bl	8003e38 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fda1 	bl	8003590 <_ZN9LineTrace8isStableEv>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00c      	beq.n	8003a6e <_ZN9LineTrace4flipEv+0x56>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 fb27 	bl	80050ac <_ZN10SideSensor9getStatusEv>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	43db      	mvns	r3, r3
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d101      	bne.n	8003a6e <_ZN9LineTrace4flipEv+0x56>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <_ZN9LineTrace4flipEv+0x58>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <_ZN9LineTrace4flipEv+0x68>
				stable_flag_ = true;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a7a:	3351      	adds	r3, #81	; 0x51
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd fd0f 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 f87e 	bl	8004b90 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fcdb 	bl	8003450 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff f898 	bl	8002bd0 <_ZN9LineTrace11isCrossLineEv>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 fb26 	bl	80050fc <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd fd22 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 fb36 	bl	8005130 <_ZN10SideSensor13getIgnoreFlagEv>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00f      	beq.n	8003aea <_ZN9LineTrace4flipEv+0xd2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fd06 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003ad4:	eeb0 7a40 	vmov.f32	s14, s0
 8003ad8:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003c2c <_ZN9LineTrace4flipEv+0x214>
 8003adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	db01      	blt.n	8003aea <_ZN9LineTrace4flipEv+0xd2>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <_ZN9LineTrace4flipEv+0xd4>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 fb0e 	bl	8005116 <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b00:	3351      	adds	r3, #81	; 0x51
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <_ZN9LineTrace4flipEv+0x108>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 facd 	bl	80050ac <_ZN10SideSensor9getStatusEv>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d101      	bne.n	8003b20 <_ZN9LineTrace4flipEv+0x108>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <_ZN9LineTrace4flipEv+0x10a>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d020      	beq.n	8003b68 <_ZN9LineTrace4flipEv+0x150>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003b2c:	3318      	adds	r3, #24
 8003b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fa73 	bl	8004022 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003b3c:	e008      	b.n	8003b50 <_ZN9LineTrace4flipEv+0x138>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fade 	bl	8004100 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b4a:	335c      	adds	r3, #92	; 0x5c
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b56:	3351      	adds	r3, #81	; 0x51
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b62:	3352      	adds	r3, #82	; 0x52
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b6e:	3351      	adds	r3, #81	; 0x51
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <_ZN9LineTrace4flipEv+0x170>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fa77 	bl	8002074 <_ZN3LED2LREaa>
 8003b86:	e007      	b.n	8003b98 <_ZN9LineTrace4flipEv+0x180>
		else led_.LR(-1, 0);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f04f 31ff 	mov.w	r1, #4294967295
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fa6e 	bl	8002074 <_ZN3LED2LREaa>

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fd69 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <_ZN9LineTrace4flipEv+0x1a2>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003c30 <_ZN9LineTrace4flipEv+0x218>
 8003bb0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003c30 <_ZN9LineTrace4flipEv+0x218>
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 fd0b 	bl	80055d0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bc0:	335c      	adds	r3, #92	; 0x5c
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bce:	335c      	adds	r3, #92	; 0x5c
 8003bd0:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bd8:	335c      	adds	r3, #92	; 0x5c
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f242 720f 	movw	r2, #9999	; 0x270f
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d906      	bls.n	8003bf2 <_ZN9LineTrace4flipEv+0x1da>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bea:	335c      	adds	r3, #92	; 0x5c
 8003bec:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bf0:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 500) led_.LR(-1, 1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bf8:	335c      	adds	r3, #92	; 0x5c
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c00:	d808      	bhi.n	8003c14 <_ZN9LineTrace4flipEv+0x1fc>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	330c      	adds	r3, #12
 8003c06:	2201      	movs	r2, #1
 8003c08:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe fa31 	bl	8002074 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003c12:	e007      	b.n	8003c24 <_ZN9LineTrace4flipEv+0x20c>
		else led_.LR(-1, 0);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	330c      	adds	r3, #12
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fa28 	bl	8002074 <_ZN3LED2LREaa>
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	43480000 	.word	0x43480000
 8003c30:	00000000 	.word	0x00000000

08003c34 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 fd16 	bl	8005682 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 fa3e 	bl	80050dc <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c66:	334c      	adds	r3, #76	; 0x4c
 8003c68:	2200      	movs	r2, #0
 8003c6a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c72:	334e      	adds	r3, #78	; 0x4e
 8003c74:	2200      	movs	r2, #0
 8003c76:	801a      	strh	r2, [r3, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fd07 	bl	80056a8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe f9e5 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d107      	bne.n	8003cca <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69d8      	ldr	r0, [r3, #28]
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <_ZN9LineTrace4stopEv+0xb4>)
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <_ZN9LineTrace4stopEv+0xb8>)
 8003cc2:	491e      	ldr	r1, [pc, #120]	; (8003d3c <_ZN9LineTrace4stopEv+0xbc>)
 8003cc4:	f000 fc30 	bl	8004528 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003cc8:	e006      	b.n	8003cd8 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69d8      	ldr	r0, [r3, #28]
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <_ZN9LineTrace4stopEv+0xc0>)
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <_ZN9LineTrace4stopEv+0xc4>)
 8003cd2:	491a      	ldr	r1, [pc, #104]	; (8003d3c <_ZN9LineTrace4stopEv+0xbc>)
 8003cd4:	f000 fc4b 	bl	800456e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003cde:	331c      	adds	r3, #28
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	9200      	str	r2, [sp, #0]
 8003ce4:	2264      	movs	r2, #100	; 0x64
 8003ce6:	4918      	ldr	r1, [pc, #96]	; (8003d48 <_ZN9LineTrace4stopEv+0xc8>)
 8003ce8:	4814      	ldr	r0, [pc, #80]	; (8003d3c <_ZN9LineTrace4stopEv+0xbc>)
 8003cea:	f7fd fc8b 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003cf4:	33ac      	adds	r3, #172	; 0xac
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	9200      	str	r2, [sp, #0]
 8003cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cfe:	4913      	ldr	r1, [pc, #76]	; (8003d4c <_ZN9LineTrace4stopEv+0xcc>)
 8003d00:	480e      	ldr	r0, [pc, #56]	; (8003d3c <_ZN9LineTrace4stopEv+0xbc>)
 8003d02:	f7fd fc7f 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe f9af 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fcb5 	bl	800468a <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fc63 	bl	80045f0 <_ZN6Logger10resetLogs2Ev>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	08018d38 	.word	0x08018d38
 8003d38:	08018d44 	.word	0x08018d44
 8003d3c:	08018d2c 	.word	0x08018d2c
 8003d40:	08018ddc 	.word	0x08018ddc
 8003d44:	08018de8 	.word	0x08018de8
 8003d48:	08018d54 	.word	0x08018d54
 8003d4c:	08018d64 	.word	0x08018d64

08003d50 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	737b      	strb	r3, [r7, #13]
	start();
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff67 	bl	8003c34 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003d66:	7b7b      	ldrb	r3, [r7, #13]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d15b      	bne.n	8003e24 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003d6c:	89fb      	ldrh	r3, [r7, #14]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <_ZN9LineTrace7runningEv+0x28>
 8003d72:	2b0a      	cmp	r3, #10
 8003d74:	d030      	beq.n	8003dd8 <_ZN9LineTrace7runningEv+0x88>
 8003d76:	e054      	b.n	8003e22 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 f9a1 	bl	80050c4 <_ZN10SideSensor16getWhiteLineCntREv>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d044      	beq.n	8003e1c <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fe fef0 	bl	8002b78 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d9e:	3318      	adds	r3, #24
 8003da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f89f 	bl	8003eec <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd fba3 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fd fb81 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe f951 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 8003dd2:	230a      	movs	r3, #10
 8003dd4:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003dd6:	e021      	b.n	8003e1c <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 f971 	bl	80050c4 <_ZN10SideSensor16getWhiteLineCntREv>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fe fedb 	bl	8002bae <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f88a 	bl	8003f12 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003dfe:	2064      	movs	r0, #100	; 0x64
 8003e00:	f004 ffea 	bl	8008dd8 <HAL_Delay>

				setTargetVelocity(0);
 8003e04:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003e34 <_ZN9LineTrace7runningEv+0xe4>
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff fd2a 	bl	8003862 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003e0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e12:	f004 ffe1 	bl	8008dd8 <HAL_Delay>

				goal_flag = true;
 8003e16:	2301      	movs	r3, #1
 8003e18:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003e1a:	e001      	b.n	8003e20 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003e1c:	bf00      	nop
 8003e1e:	e7a2      	b.n	8003d66 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003e20:	bf00      	nop
	while(goal_flag == false){
 8003e22:	e7a0      	b.n	8003d66 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ff2b 	bl	8003c80 <_ZN9LineTrace4stopEv>
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	00000000 	.word	0x00000000

08003e38 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	ed2d 8b02 	vpush	{d8}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d046      	beq.n	8003edc <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e54:	3318      	adds	r3, #24
 8003e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11c      	bne.n	8003e98 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69dc      	ldr	r4, [r3, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd faf1 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003e6c:	eeb0 8a40 	vmov.f32	s16, s0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fe7a 	bl	8004b6e <_ZN8Odometry8getThetaEv>
 8003e7a:	ec53 2b10 	vmov	r2, r3, d0
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7fc fec9 	bl	8000c18 <__aeabi_d2f>
 8003e86:	4603      	mov	r3, r0
 8003e88:	ee00 3a90 	vmov	s1, r3
 8003e8c:	eeb0 0a48 	vmov.f32	s0, s16
 8003e90:	4620      	mov	r0, r4
 8003e92:	f000 fa78 	bl	8004386 <_ZN6Logger21storeDistanceAndThetaEff>
 8003e96:	e01b      	b.n	8003ed0 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69dc      	ldr	r4, [r3, #28]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 fc1d 	bl	80056e0 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fe5d 	bl	8004b6e <_ZN8Odometry8getThetaEv>
 8003eb4:	ec53 2b10 	vmov	r2, r3, d0
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f7fc feac 	bl	8000c18 <__aeabi_d2f>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	ee00 3a90 	vmov	s1, r3
 8003ec6:	eeb0 0a48 	vmov.f32	s0, s16
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 faa2 	bl	8004414 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003eda:	801a      	strh	r2, [r3, #0]
	}
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	ecbd 8b02 	vpop	{d8}
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	20000264 	.word	0x20000264

08003eec <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fd fae3 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f04:	3314      	adds	r3, #20
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f20:	3314      	adds	r3, #20
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f2c:	3316      	adds	r3, #22
 8003f2e:	2200      	movs	r2, #0
 8003f30:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003f38:	3350      	adds	r3, #80	; 0x50
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f5e:	3318      	adds	r3, #24
 8003f60:	887a      	ldrh	r2, [r7, #2]
 8003f62:	801a      	strh	r2, [r3, #0]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd fa62 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003f8a:	eeb0 7a40 	vmov.f32	s14, s0
 8003f8e:	edd7 7a00 	vldr	s15, [r7]
 8003f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9a:	bf94      	ite	ls
 8003f9c:	2301      	movls	r3, #1
 8003f9e:	2300      	movhi	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fc6:	334c      	adds	r3, #76	; 0x4c
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	461c      	mov	r4, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fd fa4d 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003fd2:	eef0 7a40 	vmov.f32	s15, s0
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003fdc:	3306      	adds	r3, #6
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fee:	334c      	adds	r3, #76	; 0x4c
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ffc:	334c      	adds	r3, #76	; 0x4c
 8003ffe:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004006:	334c      	adds	r3, #76	; 0x4c
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	2b63      	cmp	r3, #99	; 0x63
 800400c:	d905      	bls.n	800401a <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004014:	334c      	adds	r3, #76	; 0x4c
 8004016:	2263      	movs	r2, #99	; 0x63
 8004018:	801a      	strh	r2, [r3, #0]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bd90      	pop	{r4, r7, pc}

08004022 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8004022:	b590      	push	{r4, r7, lr}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004034:	334e      	adds	r3, #78	; 0x4e
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	461c      	mov	r4, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f7fd fa16 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004040:	eef0 7a40 	vmov.f32	s15, s0
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 800404a:	332a      	adds	r3, #42	; 0x2a
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800405c:	334e      	adds	r3, #78	; 0x4e
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800406a:	334e      	adds	r3, #78	; 0x4e
 800406c:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004074:	334e      	adds	r3, #78	; 0x4e
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407c:	d306      	bcc.n	800408c <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004084:	334e      	adds	r3, #78	; 0x4e
 8004086:	f240 32e7 	movw	r2, #999	; 0x3e7
 800408a:	801a      	strh	r2, [r3, #0]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bd90      	pop	{r4, r7, pc}

08004094 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6959      	ldr	r1, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040a6:	334c      	adds	r3, #76	; 0x4c
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80040b0:	3306      	adds	r3, #6
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	eeb0 0a67 	vmov.f32	s0, s15
 80040c0:	4608      	mov	r0, r1
 80040c2:	f7fd f9e2 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040cc:	334c      	adds	r3, #76	; 0x4c
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040da:	334c      	adds	r3, #76	; 0x4c
 80040dc:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040e4:	334c      	adds	r3, #76	; 0x4c
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	2b63      	cmp	r3, #99	; 0x63
 80040ea:	d905      	bls.n	80040f8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040f2:	334c      	adds	r3, #76	; 0x4c
 80040f4:	2263      	movs	r2, #99	; 0x63
 80040f6:	801a      	strh	r2, [r3, #0]

}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004108:	2300      	movs	r3, #0
 800410a:	82fb      	strh	r3, [r7, #22]
 800410c:	8afb      	ldrh	r3, [r7, #22]
 800410e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004112:	d239      	bcs.n	8004188 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8004114:	8afb      	ldrh	r3, [r7, #22]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800411c:	332a      	adds	r3, #42	; 0x2a
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	3304      	adds	r3, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fd f99d 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004132:	eeb0 7a40 	vmov.f32	s14, s0
 8004136:	edd7 7a04 	vldr	s15, [r7, #16]
 800413a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800413e:	eeb0 0a67 	vmov.f32	s0, s15
 8004142:	f7fe faed 	bl	8002720 <_ZSt3absf>
 8004146:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 800414a:	edd7 7a03 	vldr	s15, [r7, #12]
 800414e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80041b0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8004152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415a:	d811      	bhi.n	8004180 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6959      	ldr	r1, [r3, #20]
 8004160:	8afb      	ldrh	r3, [r7, #22]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004168:	332a      	adds	r3, #42	; 0x2a
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	3304      	adds	r3, #4
 8004170:	edd3 7a00 	vldr	s15, [r3]
 8004174:	eeb0 0a67 	vmov.f32	s0, s15
 8004178:	4608      	mov	r0, r1
 800417a:	f7fd f986 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 800417e:	e003      	b.n	8004188 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004180:	8afb      	ldrh	r3, [r7, #22]
 8004182:	3301      	adds	r3, #1
 8004184:	82fb      	strh	r3, [r7, #22]
 8004186:	e7c1      	b.n	800410c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800418e:	334e      	adds	r3, #78	; 0x4e
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004196:	d306      	bcc.n	80041a6 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800419e:	334e      	adds	r3, #78	; 0x4e
 80041a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041a4:	801a      	strh	r2, [r3, #0]

}
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	42a00000 	.word	0x42a00000

080041b4 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041c2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041d0:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80041d4:	2200      	movs	r2, #0
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041de:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80041e2:	2200      	movs	r2, #0
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041ec:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041f0:	2200      	movs	r2, #0
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800420c:	2300      	movs	r3, #0
 800420e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004210:	f7fd faea 	bl	80017e8 <sd_mount>
 8004214:	4603      	mov	r3, r0
 8004216:	2b01      	cmp	r3, #1
 8004218:	bf0c      	ite	eq
 800421a:	2301      	moveq	r3, #1
 800421c:	2300      	movne	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d016      	beq.n	8004252 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004224:	f7fc ff3c 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004228:	2100      	movs	r1, #0
 800422a:	2000      	movs	r0, #0
 800422c:	f7fc ff48 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004230:	4815      	ldr	r0, [pc, #84]	; (8004288 <_ZN6Logger10sdCardInitEv+0x84>)
 8004232:	f7fc ff6f 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004236:	2101      	movs	r1, #1
 8004238:	2000      	movs	r0, #0
 800423a:	f7fc ff41 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800423e:	4813      	ldr	r0, [pc, #76]	; (800428c <_ZN6Logger10sdCardInitEv+0x88>)
 8004240:	f7fc ff68 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004248:	f004 fdc6 	bl	8008dd8 <HAL_Delay>

	  ret = true;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e015      	b.n	800427e <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004252:	f7fc ff25 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004256:	2100      	movs	r1, #0
 8004258:	2000      	movs	r0, #0
 800425a:	f7fc ff31 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800425e:	480a      	ldr	r0, [pc, #40]	; (8004288 <_ZN6Logger10sdCardInitEv+0x84>)
 8004260:	f7fc ff58 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004264:	2101      	movs	r1, #1
 8004266:	2000      	movs	r0, #0
 8004268:	f7fc ff2a 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 800426c:	4808      	ldr	r0, [pc, #32]	; (8004290 <_ZN6Logger10sdCardInitEv+0x8c>)
 800426e:	f7fc ff51 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004276:	f004 fdaf 	bl	8008dd8 <HAL_Delay>

	  ret = false;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	08018df8 	.word	0x08018df8
 800428c:	08018e04 	.word	0x08018e04
 8004290:	08018e0c 	.word	0x08018e0c

08004294 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042a6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d027      	beq.n	8004300 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042b6:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042cc:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042dc:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80042e0:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042e8:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <_ZN6Logger8storeLogEf+0x6c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042f8:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80042fc:	2200      	movs	r2, #0
 80042fe:	801a      	strh	r2, [r3, #0]
	}
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800431e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d028      	beq.n	800437a <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800432e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	3304      	adds	r3, #4
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004346:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004356:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800435a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004362:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d006      	beq.n	800437a <_ZN6Logger9storeLog2Ef+0x6e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004372:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004376:	2200      	movs	r2, #0
 8004378:	801a      	strh	r2, [r3, #0]
	}
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004392:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800439c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	3302      	adds	r3, #2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043b4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80043c0:	3312      	adds	r3, #18
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043d0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043e0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043e4:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043ec:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	f241 726f 	movw	r2, #5999	; 0x176f
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d906      	bls.n	8004408 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004400:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004404:	2200      	movs	r2, #0
 8004406:	801a      	strh	r2, [r3, #0]
	//}
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004420:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800442a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004436:	3322      	adds	r3, #34	; 0x22
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004446:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004452:	3352      	adds	r3, #82	; 0x52
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004462:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004472:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004476:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800447e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	f241 726f 	movw	r2, #5999	; 0x176f
 8004488:	4293      	cmp	r3, r2
 800448a:	d906      	bls.n	800449a <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004492:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004496:	2200      	movs	r2, #0
 8004498:	801a      	strh	r2, [r3, #0]
	//}
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
	return store_distance_;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3308      	adds	r3, #8
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
	return store_theta_;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80044cc:	3348      	adds	r3, #72	; 0x48
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	2300      	movs	r3, #0
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	2201      	movs	r2, #1
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	68b8      	ldr	r0, [r7, #8]
 80044f4:	f7fd f886 	bl	8001604 <sd_write_array_float>
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1d1a      	adds	r2, r3, #4
 8004510:	2300      	movs	r3, #0
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	2201      	movs	r2, #1
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	68b8      	ldr	r0, [r7, #8]
 800451c:	f7fd f872 	bl	8001604 <sd_write_array_float>
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f103 0208 	add.w	r2, r3, #8
 800453c:	2300      	movs	r3, #0
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	f241 7270 	movw	r2, #6000	; 0x1770
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	68b8      	ldr	r0, [r7, #8]
 800454a:	f7fd f85b 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004554:	3348      	adds	r3, #72	; 0x48
 8004556:	2200      	movs	r2, #0
 8004558:	9200      	str	r2, [sp, #0]
 800455a:	f241 7270 	movw	r2, #6000	; 0x1770
 800455e:	6839      	ldr	r1, [r7, #0]
 8004560:	68b8      	ldr	r0, [r7, #8]
 8004562:	f7fd f84f 	bl	8001604 <sd_write_array_float>
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af02      	add	r7, sp, #8
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004582:	3388      	adds	r3, #136	; 0x88
 8004584:	2200      	movs	r2, #0
 8004586:	9200      	str	r2, [sp, #0]
 8004588:	f241 7270 	movw	r2, #6000	; 0x1770
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	68b8      	ldr	r0, [r7, #8]
 8004590:	f7fd f838 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800459a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800459e:	2200      	movs	r2, #0
 80045a0:	9200      	str	r2, [sp, #0]
 80045a2:	f241 7270 	movw	r2, #6000	; 0x1770
 80045a6:	6839      	ldr	r1, [r7, #0]
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	f7fd f82b 	bl	8001604 <sd_write_array_float>
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3308      	adds	r3, #8
 80045c8:	f241 7270 	movw	r2, #6000	; 0x1770
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	68b8      	ldr	r0, [r7, #8]
 80045d0:	f7fd f87e 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80045da:	3348      	adds	r3, #72	; 0x48
 80045dc:	f241 7270 	movw	r2, #6000	; 0x1770
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	68b8      	ldr	r0, [r7, #8]
 80045e4:	f7fd f874 	bl	80016d0 <sd_read_array_float>
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 80045f0:	b480      	push	{r7}
 80045f2:	b08b      	sub	sp, #44	; 0x2c
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80045fe:	3388      	adds	r3, #136	; 0x88
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800460c:	3340      	adds	r3, #64	; 0x40
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	429a      	cmp	r2, r3
 8004616:	d009      	beq.n	800462c <_ZN6Logger10resetLogs2Ev+0x3c>
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	617b      	str	r3, [r7, #20]
		log = 0;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	3304      	adds	r3, #4
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
 800462a:	e7f1      	b.n	8004610 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004632:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004642:	3340      	adds	r3, #64	; 0x40
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	6a3a      	ldr	r2, [r7, #32]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	429a      	cmp	r2, r3
 800464c:	d009      	beq.n	8004662 <_ZN6Logger10resetLogs2Ev+0x72>
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	3304      	adds	r3, #4
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	e7f1      	b.n	8004646 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004668:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800466c:	2200      	movs	r2, #0
 800466e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004676:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800467a:	2200      	movs	r2, #0
 800467c:	801a      	strh	r2, [r3, #0]
}
 800467e:	bf00      	nop
 8004680:	372c      	adds	r7, #44	; 0x2c
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004698:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800469c:	2200      	movs	r2, #0
 800469e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046a6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80046aa:	2200      	movs	r2, #0
 80046ac:	801a      	strh	r2, [r3, #0]
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <_ZN6Logger5startEv>:

void Logger::start()
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046c8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80046cc:	2201      	movs	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046ea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	805a      	strh	r2, [r3, #2]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004728:	2108      	movs	r1, #8
 800472a:	4805      	ldr	r0, [pc, #20]	; (8004740 <_ZN5Motor4initEv+0x20>)
 800472c:	f009 fd04 	bl	800e138 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004730:	210c      	movs	r1, #12
 8004732:	4803      	ldr	r0, [pc, #12]	; (8004740 <_ZN5Motor4initEv+0x20>)
 8004734:	f009 fd00 	bl	800e138 <HAL_TIM_PWM_Start>

}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	2003e8e0 	.word	0x2003e8e0

08004744 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004752:	2b00      	cmp	r3, #0
 8004754:	da0d      	bge.n	8004772 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004756:	2200      	movs	r2, #0
 8004758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800475c:	481f      	ldr	r0, [pc, #124]	; (80047dc <_ZN5Motor9motorCtrlEv+0x98>)
 800475e:	f005 fdd1 	bl	800a304 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004768:	b29b      	uxth	r3, r3
 800476a:	425b      	negs	r3, r3
 800476c:	b29b      	uxth	r3, r3
 800476e:	81fb      	strh	r3, [r7, #14]
 8004770:	e00a      	b.n	8004788 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004772:	2201      	movs	r2, #1
 8004774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004778:	4818      	ldr	r0, [pc, #96]	; (80047dc <_ZN5Motor9motorCtrlEv+0x98>)
 800477a:	f005 fdc3 	bl	800a304 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004784:	b29b      	uxth	r3, r3
 8004786:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800478e:	2b00      	cmp	r3, #0
 8004790:	da0d      	bge.n	80047ae <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004792:	2201      	movs	r2, #1
 8004794:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004798:	4810      	ldr	r0, [pc, #64]	; (80047dc <_ZN5Motor9motorCtrlEv+0x98>)
 800479a:	f005 fdb3 	bl	800a304 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	425b      	negs	r3, r3
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	81bb      	strh	r3, [r7, #12]
 80047ac:	e00a      	b.n	80047c4 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80047ae:	2200      	movs	r2, #0
 80047b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047b4:	4809      	ldr	r0, [pc, #36]	; (80047dc <_ZN5Motor9motorCtrlEv+0x98>)
 80047b6:	f005 fda5 	bl	800a304 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80047c4:	89fa      	ldrh	r2, [r7, #14]
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <_ZN5Motor9motorCtrlEv+0x9c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80047cc:	89ba      	ldrh	r2, [r7, #12]
 80047ce:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <_ZN5Motor9motorCtrlEv+0x9c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40020c00 	.word	0x40020c00
 80047e0:	2003e8e0 	.word	0x2003e8e0

080047e4 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80047e4:	b590      	push	{r4, r7, lr}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6178      	str	r0, [r7, #20]
 80047ec:	ed87 0b02 	vstr	d0, [r7, #8]
 80047f0:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	4b30      	ldr	r3, [pc, #192]	; (80048bc <_ZN5Motor8setRatioEdd+0xd8>)
 80047fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047fe:	f7fc f9a3 	bl	8000b48 <__aeabi_dcmpgt>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <_ZN5Motor8setRatioEdd+0x30>
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	4c2b      	ldr	r4, [pc, #172]	; (80048bc <_ZN5Motor8setRatioEdd+0xd8>)
 800480e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004812:	e00e      	b.n	8004832 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <_ZN5Motor8setRatioEdd+0xdc>)
 800481a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800481e:	f7fc f975 	bl	8000b0c <__aeabi_dcmplt>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <_ZN5Motor8setRatioEdd+0x4e>
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	4c24      	ldr	r4, [pc, #144]	; (80048c0 <_ZN5Motor8setRatioEdd+0xdc>)
 800482e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	4b21      	ldr	r3, [pc, #132]	; (80048bc <_ZN5Motor8setRatioEdd+0xd8>)
 8004838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800483c:	f7fc f984 	bl	8000b48 <__aeabi_dcmpgt>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <_ZN5Motor8setRatioEdd+0x6e>
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	4c1c      	ldr	r4, [pc, #112]	; (80048bc <_ZN5Motor8setRatioEdd+0xd8>)
 800484c:	e9c7 3400 	strd	r3, r4, [r7]
 8004850:	e00e      	b.n	8004870 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <_ZN5Motor8setRatioEdd+0xdc>)
 8004858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800485c:	f7fc f956 	bl	8000b0c <__aeabi_dcmplt>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <_ZN5Motor8setRatioEdd+0x8c>
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	4c15      	ldr	r4, [pc, #84]	; (80048c0 <_ZN5Motor8setRatioEdd+0xdc>)
 800486c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <_ZN5Motor8setRatioEdd+0xe0>)
 8004876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800487a:	f7fb fed5 	bl	8000628 <__aeabi_dmul>
 800487e:	4603      	mov	r3, r0
 8004880:	460c      	mov	r4, r1
 8004882:	4618      	mov	r0, r3
 8004884:	4621      	mov	r1, r4
 8004886:	f7fc f97f 	bl	8000b88 <__aeabi_d2iz>
 800488a:	4603      	mov	r3, r0
 800488c:	b21a      	sxth	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <_ZN5Motor8setRatioEdd+0xe0>)
 8004898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800489c:	f7fb fec4 	bl	8000628 <__aeabi_dmul>
 80048a0:	4603      	mov	r3, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	4618      	mov	r0, r3
 80048a6:	4621      	mov	r1, r4
 80048a8:	f7fc f96e 	bl	8000b88 <__aeabi_d2iz>
 80048ac:	4603      	mov	r3, r0
 80048ae:	b21a      	sxth	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	805a      	strh	r2, [r3, #2]

}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}
 80048bc:	3ff00000 	.word	0x3ff00000
 80048c0:	bff00000 	.word	0xbff00000
 80048c4:	409c2000 	.word	0x409c2000

080048c8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80048c8:	b490      	push	{r4, r7}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	f04f 0400 	mov.w	r4, #0
 80048e0:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	f04f 0400 	mov.w	r4, #0
 80048ee:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	f04f 0400 	mov.w	r4, #0
 80048fc:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	f04f 0400 	mov.w	r4, #0
 800490a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	f04f 0400 	mov.w	r4, #0
 8004918:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	609a      	str	r2, [r3, #8]
}
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bc90      	pop	{r4, r7}
 8004938:	4770      	bx	lr
 800493a:	0000      	movs	r0, r0
 800493c:	0000      	movs	r0, r0
	...

08004940 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004944:	b086      	sub	sp, #24
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fd f912 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 8004954:	ee10 3a10 	vmov	r3, s0
 8004958:	4618      	mov	r0, r3
 800495a:	f7fb fe0d 	bl	8000578 <__aeabi_f2d>
 800495e:	4603      	mov	r3, r0
 8004960:	460c      	mov	r4, r1
 8004962:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc fd60 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004970:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004974:	a376      	add	r3, pc, #472	; (adr r3, 8004b50 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800497e:	f7fb fe53 	bl	8000628 <__aeabi_dmul>
 8004982:	4603      	mov	r3, r0
 8004984:	460c      	mov	r4, r1
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7fb fdf0 	bl	8000578 <__aeabi_f2d>
 8004998:	4682      	mov	sl, r0
 800499a:	468b      	mov	fp, r1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049b0:	f7fb ff64 	bl	800087c <__aeabi_ddiv>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4640      	mov	r0, r8
 80049ba:	4649      	mov	r1, r9
 80049bc:	f7fb fc7e 	bl	80002bc <__adddf3>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	ec43 2b17 	vmov	d7, r2, r3
 80049c8:	eeb0 0a47 	vmov.f32	s0, s14
 80049cc:	eef0 0a67 	vmov.f32	s1, s15
 80049d0:	f00e fef6 	bl	80137c0 <cos>
 80049d4:	ec53 2b10 	vmov	r2, r3, d0
 80049d8:	4650      	mov	r0, sl
 80049da:	4659      	mov	r1, fp
 80049dc:	f7fb fe24 	bl	8000628 <__aeabi_dmul>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4620      	mov	r0, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	f7fb fc68 	bl	80002bc <__adddf3>
 80049ec:	4603      	mov	r3, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7fb fdbb 	bl	8000578 <__aeabi_f2d>
 8004a02:	4682      	mov	sl, r0
 8004a04:	468b      	mov	fp, r1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a1a:	f7fb ff2f 	bl	800087c <__aeabi_ddiv>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4640      	mov	r0, r8
 8004a24:	4649      	mov	r1, r9
 8004a26:	f7fb fc49 	bl	80002bc <__adddf3>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	ec43 2b17 	vmov	d7, r2, r3
 8004a32:	eeb0 0a47 	vmov.f32	s0, s14
 8004a36:	eef0 0a67 	vmov.f32	s1, s15
 8004a3a:	f00e ff05 	bl	8013848 <sin>
 8004a3e:	ec53 2b10 	vmov	r2, r3, d0
 8004a42:	4650      	mov	r0, sl
 8004a44:	4659      	mov	r1, fp
 8004a46:	f7fb fdef 	bl	8000628 <__aeabi_dmul>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f7fb fc33 	bl	80002bc <__adddf3>
 8004a56:	4603      	mov	r3, r0
 8004a58:	460c      	mov	r4, r1
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4623      	mov	r3, r4
 8004a70:	f7fb fc24 	bl	80002bc <__adddf3>
 8004a74:	4603      	mov	r3, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	ed93 7b08 	vldr	d7, [r3, #32]
 8004a8a:	eeb0 0a47 	vmov.f32	s0, s14
 8004a8e:	eef0 0a67 	vmov.f32	s1, s15
 8004a92:	f00e fe95 	bl	80137c0 <cos>
 8004a96:	ec51 0b10 	vmov	r0, r1, d0
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004aa0:	f7fb fdc2 	bl	8000628 <__aeabi_dmul>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7fb fc06 	bl	80002bc <__adddf3>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	ed93 7b08 	vldr	d7, [r3, #32]
 8004ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aca:	eef0 0a67 	vmov.f32	s1, s15
 8004ace:	f00e febb 	bl	8013848 <sin>
 8004ad2:	ec51 0b10 	vmov	r0, r1, d0
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004adc:	f7fb fda4 	bl	8000628 <__aeabi_dmul>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7fb fbe8 	bl	80002bc <__adddf3>
 8004aec:	4603      	mov	r3, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004afc:	4618      	mov	r0, r3
 8004afe:	4621      	mov	r1, r4
 8004b00:	f7fc f88a 	bl	8000c18 <__aeabi_d2f>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004b08:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004b10:	4618      	mov	r0, r3
 8004b12:	4621      	mov	r1, r4
 8004b14:	f7fc f880 	bl	8000c18 <__aeabi_d2f>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004b1c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004b24:	4618      	mov	r0, r3
 8004b26:	4621      	mov	r1, r4
 8004b28:	f7fc f876 	bl	8000c18 <__aeabi_d2f>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004b30:	601a      	str	r2, [r3, #0]
}
 8004b32:	bf00      	nop
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3c:	f3af 8000 	nop.w
 8004b40:	405b8000 	.word	0x405b8000
 8004b44:	20000294 	.word	0x20000294
 8004b48:	20000298 	.word	0x20000298
 8004b4c:	2000029c 	.word	0x2000029c
 8004b50:	d2f1a9fc 	.word	0xd2f1a9fc
 8004b54:	3f50624d 	.word	0x3f50624d

08004b58 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff feed 	bl	8004940 <_ZN8Odometry12calcPotitionEv>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004b6e:	b490      	push	{r4, r7}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
	return theta_;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004b7c:	ec44 3b17 	vmov	d7, r3, r4
}
 8004b80:	eeb0 0a47 	vmov.f32	s0, s14
 8004b84:	eef0 0a67 	vmov.f32	s1, s15
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc90      	pop	{r4, r7}
 8004b8e:	4770      	bx	lr

08004b90 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004b90:	b490      	push	{r4, r7}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	f04f 0400 	mov.w	r4, #0
 8004ba2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	f04f 0400 	mov.w	r4, #0
 8004bbe:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc90      	pop	{r4, r7}
 8004bca:	4770      	bx	lr

08004bcc <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004bcc:	b490      	push	{r4, r7}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	f04f 0400 	mov.w	r4, #0
 8004be4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	f04f 0400 	mov.w	r4, #0
 8004bf2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	f04f 0400 	mov.w	r4, #0
 8004c00:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c0a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004c0e:	2200      	movs	r2, #0
 8004c10:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004c12:	4a29      	ldr	r2, [pc, #164]	; (8004cb8 <_ZN13PathFollowingC1Ev+0xec>)
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	f04f 0400 	mov.w	r4, #0
 8004c1c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004c20:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <_ZN13PathFollowingC1Ev+0xec>)
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	f04f 0400 	mov.w	r4, #0
 8004c2a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004c2e:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <_ZN13PathFollowingC1Ev+0xec>)
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	f04f 0400 	mov.w	r4, #0
 8004c38:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	f04f 0400 	mov.w	r4, #0
 8004c46:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	f04f 0400 	mov.w	r4, #0
 8004c54:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004c58:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	f04f 0400 	mov.w	r4, #0
 8004c62:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004c66:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	f04f 0400 	mov.w	r4, #0
 8004c70:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004c74:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	f04f 0400 	mov.w	r4, #0
 8004c7e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	f04f 0400 	mov.w	r4, #0
 8004c8c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004c90:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	f04f 0400 	mov.w	r4, #0
 8004c9a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004c9e:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	f04f 0400 	mov.w	r4, #0
 8004ca8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc90      	pop	{r4, r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	2003ede0 	.word	0x2003ede0
 8004cbc:	2003ed70 	.word	0x2003ed70
 8004cc0:	2003edd0 	.word	0x2003edd0

08004cc4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004ccc:	f001 fc92 	bl	80065f4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004cd0:	f107 0318 	add.w	r3, r7, #24
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	4915      	ldr	r1, [pc, #84]	; (8004d2c <_ZN13PathFollowing4initEv+0x68>)
 8004cd8:	4815      	ldr	r0, [pc, #84]	; (8004d30 <_ZN13PathFollowing4initEv+0x6c>)
 8004cda:	f7fc fd3f 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004cde:	f107 0310 	add.w	r3, r7, #16
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	4913      	ldr	r1, [pc, #76]	; (8004d34 <_ZN13PathFollowing4initEv+0x70>)
 8004ce6:	4812      	ldr	r0, [pc, #72]	; (8004d30 <_ZN13PathFollowing4initEv+0x6c>)
 8004ce8:	f7fc fd38 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004cec:	f107 0308 	add.w	r3, r7, #8
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4911      	ldr	r1, [pc, #68]	; (8004d38 <_ZN13PathFollowing4initEv+0x74>)
 8004cf4:	480e      	ldr	r0, [pc, #56]	; (8004d30 <_ZN13PathFollowing4initEv+0x6c>)
 8004cf6:	f7fc fd31 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004cfa:	ed97 7b06 	vldr	d7, [r7, #24]
 8004cfe:	ed97 6b04 	vldr	d6, [r7, #16]
 8004d02:	ed97 5b02 	vldr	d5, [r7, #8]
 8004d06:	eeb0 2a45 	vmov.f32	s4, s10
 8004d0a:	eef0 2a65 	vmov.f32	s5, s11
 8004d0e:	eeb0 1a46 	vmov.f32	s2, s12
 8004d12:	eef0 1a66 	vmov.f32	s3, s13
 8004d16:	eeb0 0a47 	vmov.f32	s0, s14
 8004d1a:	eef0 0a67 	vmov.f32	s1, s15
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f80c 	bl	8004d3c <_ZN13PathFollowing7setGainEddd>
}
 8004d24:	bf00      	nop
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	08018e14 	.word	0x08018e14
 8004d30:	08018e1c 	.word	0x08018e1c
 8004d34:	08018e24 	.word	0x08018e24
 8004d38:	08018e2c 	.word	0x08018e2c

08004d3c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004d3c:	b490      	push	{r4, r7}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	61f8      	str	r0, [r7, #28]
 8004d44:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d48:	ed87 1b02 	vstr	d1, [r7, #8]
 8004d4c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004d50:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004d52:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004d56:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004d5a:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004d5c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004d60:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004d64:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004d66:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d6a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004d6e:	bf00      	nop
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc90      	pop	{r4, r7}
 8004d76:	4770      	bx	lr
 8004d78:	2003ede0 	.word	0x2003ede0

08004d7c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004d84:	2088      	movs	r0, #136	; 0x88
 8004d86:	f7fd f83a 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004d8a:	2080      	movs	r0, #128	; 0x80
 8004d8c:	f7fd f837 	bl	8001dfe <INA260_init>
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004da0:	2188      	movs	r1, #136	; 0x88
 8004da2:	2002      	movs	r0, #2
 8004da4:	f7fc ffc8 	bl	8001d38 <INA260_read>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fb fbd2 	bl	8000554 <__aeabi_i2d>
 8004db0:	a30c      	add	r3, pc, #48	; (adr r3, 8004de4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fc37 	bl	8000628 <__aeabi_dmul>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	f7fb ff29 	bl	8000c18 <__aeabi_d2f>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4a03      	ldr	r2, [pc, #12]	; (8004de0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd90      	pop	{r4, r7, pc}
 8004ddc:	f3af 8000 	nop.w
 8004de0:	200002a0 	.word	0x200002a0
 8004de4:	47ae147b 	.word	0x47ae147b
 8004de8:	3f547ae1 	.word	0x3f547ae1

08004dec <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	ee07 3a90 	vmov	s15, r3

}
 8004dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004e18:	2102      	movs	r1, #2
 8004e1a:	4822      	ldr	r0, [pc, #136]	; (8004ea4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e1c:	f005 fa5a 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bf0c      	ite	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	2300      	movne	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004e30:	89fb      	ldrh	r3, [r7, #14]
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004e38:	2108      	movs	r1, #8
 8004e3a:	481a      	ldr	r0, [pc, #104]	; (8004ea4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e3c:	f005 fa4a 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004e50:	89fb      	ldrh	r3, [r7, #14]
 8004e52:	f043 0302 	orr.w	r3, r3, #2
 8004e56:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004e58:	2110      	movs	r1, #16
 8004e5a:	4812      	ldr	r0, [pc, #72]	; (8004ea4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e5c:	f005 fa3a 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf0c      	ite	eq
 8004e66:	2301      	moveq	r3, #1
 8004e68:	2300      	movne	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004e70:	89fb      	ldrh	r3, [r7, #14]
 8004e72:	f043 0304 	orr.w	r3, r3, #4
 8004e76:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004e78:	2180      	movs	r1, #128	; 0x80
 8004e7a:	480a      	ldr	r0, [pc, #40]	; (8004ea4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e7c:	f005 fa2a 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	f043 0308 	orr.w	r3, r3, #8
 8004e96:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004e98:	89fb      	ldrh	r3, [r7, #14]

}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40020c00 	.word	0x40020c00

08004ea8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	801a      	strh	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	805a      	strh	r2, [r3, #2]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	809a      	strh	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	719a      	strb	r2, [r3, #6]
{

}
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	799b      	ldrb	r3, [r3, #6]
 8004ee4:	f083 0301 	eor.w	r3, r3, #1
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80c7 	beq.w	800507e <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004ef0:	4b65      	ldr	r3, [pc, #404]	; (8005088 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f083 0301 	eor.w	r3, r3, #1
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d027      	beq.n	8004f4e <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004efe:	2104      	movs	r1, #4
 8004f00:	4862      	ldr	r0, [pc, #392]	; (800508c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004f02:	f005 f9e7 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bf0c      	ite	eq
 8004f0c:	2301      	moveq	r3, #1
 8004f0e:	2300      	movne	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004f16:	4b5e      	ldr	r3, [pc, #376]	; (8005090 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	4b5c      	ldr	r3, [pc, #368]	; (8005090 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004f24:	4b5a      	ldr	r3, [pc, #360]	; (8005090 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004f2a:	4b59      	ldr	r3, [pc, #356]	; (8005090 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d93f      	bls.n	8004fb2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004f40:	4b51      	ldr	r3, [pc, #324]	; (8005088 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004f46:	4b52      	ldr	r3, [pc, #328]	; (8005090 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e031      	b.n	8004fb2 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004f4e:	4b4e      	ldr	r3, [pc, #312]	; (8005088 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d02d      	beq.n	8004fb2 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004f56:	2104      	movs	r1, #4
 8004f58:	484c      	ldr	r0, [pc, #304]	; (800508c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004f5a:	f005 f9bb 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d006      	beq.n	8004f7c <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004f6e:	4b48      	ldr	r3, [pc, #288]	; (8005090 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	4b46      	ldr	r3, [pc, #280]	; (8005090 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004f7c:	4b44      	ldr	r3, [pc, #272]	; (8005090 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004f82:	4b43      	ldr	r3, [pc, #268]	; (8005090 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d913      	bls.n	8004fb2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	f083 0301 	eor.w	r3, r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004f98:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	889b      	ldrh	r3, [r3, #4]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	889a      	ldrh	r2, [r3, #4]
 8004fae:	4b39      	ldr	r3, [pc, #228]	; (8005094 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004fb0:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004fb2:	4b39      	ldr	r3, [pc, #228]	; (8005098 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	f083 0301 	eor.w	r3, r3, #1
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d027      	beq.n	8005010 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fc4:	4835      	ldr	r0, [pc, #212]	; (800509c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004fc6:	f005 f985 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004fda:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	e002      	b.n	8004fee <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004fe8:	4b2d      	ldr	r3, [pc, #180]	; (80050a0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004fee:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d90c      	bls.n	8005010 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	f043 0302 	orr.w	r3, r3, #2
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800500a:	4b25      	ldr	r3, [pc, #148]	; (80050a0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800500c:	2200      	movs	r2, #0
 800500e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005010:	4b21      	ldr	r3, [pc, #132]	; (8005098 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02e      	beq.n	8005076 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800501c:	481f      	ldr	r0, [pc, #124]	; (800509c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800501e:	f005 f959 	bl	800a2d4 <HAL_GPIO_ReadPin>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d006      	beq.n	8005040 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8005032:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800503c:	801a      	strh	r2, [r3, #0]
 800503e:	e002      	b.n	8005046 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005042:	2200      	movs	r2, #0
 8005044:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005046:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	2b04      	cmp	r3, #4
 800504c:	d913      	bls.n	8005076 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	f083 0302 	eor.w	r3, r3, #2
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	885b      	ldrh	r3, [r3, #2]
 8005066:	3301      	adds	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	885a      	ldrh	r2, [r3, #2]
 8005072:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8005074:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 800507c:	801a      	strh	r2, [r3, #0]
	}

}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	200002aa 	.word	0x200002aa
 800508c:	40021000 	.word	0x40021000
 8005090:	200002ae 	.word	0x200002ae
 8005094:	200002a8 	.word	0x200002a8
 8005098:	200002ab 	.word	0x200002ab
 800509c:	40020c00 	.word	0x40020c00
 80050a0:	200002ac 	.word	0x200002ac
 80050a4:	200002a6 	.word	0x200002a6
 80050a8:	200002a4 	.word	0x200002a4

080050ac <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	return status_;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	881b      	ldrh	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	889b      	ldrh	r3, [r3, #4]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	809a      	strh	r2, [r3, #4]
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	719a      	strb	r2, [r3, #6]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	719a      	strb	r2, [r3, #6]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	799b      	ldrb	r3, [r3, #6]
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a10      	ldr	r2, [pc, #64]	; (8005198 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8005158:	3308      	adds	r3, #8
 800515a:	4611      	mov	r1, r2
 800515c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005160:	4618      	mov	r0, r3
 8005162:	f00f fbad 	bl	80148c0 <memcpy>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	08018e50 	.word	0x08018e50

0800519c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d010      	beq.n	80051d4 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	ed97 0a00 	vldr	s0, [r7]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff f86a 	bl	8004294 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80051ca:	eeb0 0a67 	vmov.f32	s0, s15
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7ff f89c 	bl	800430c <_ZN6Logger9storeLog2Ef>
	}

}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a07      	ldr	r2, [pc, #28]	; (8005208 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 80051ea:	4908      	ldr	r1, [pc, #32]	; (800520c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff f974 	bl	80044da <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a06      	ldr	r2, [pc, #24]	; (8005210 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 80051f8:	4904      	ldr	r1, [pc, #16]	; (800520c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff f980 	bl	8004500 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	08019044 	.word	0x08019044
 800520c:	08019050 	.word	0x08019050
 8005210:	0801905c 	.word	0x0801905c

08005214 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8005214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005222:	2b00      	cmp	r3, #0
 8005224:	d046      	beq.n	80052b4 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3204      	adds	r2, #4
 8005238:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005254:	3301      	adds	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8005266:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800526e:	2bf9      	cmp	r3, #249	; 0xf9
 8005270:	d903      	bls.n	800527a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	22fa      	movs	r2, #250	; 0xfa
 8005276:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685c      	ldr	r4, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005284:	4618      	mov	r0, r3
 8005286:	f7fb f977 	bl	8000578 <__aeabi_f2d>
 800528a:	4605      	mov	r5, r0
 800528c:	460e      	mov	r6, r1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005294:	eef1 7a67 	vneg.f32	s15, s15
 8005298:	ee17 3a90 	vmov	r3, s15
 800529c:	4618      	mov	r0, r3
 800529e:	f7fb f96b 	bl	8000578 <__aeabi_f2d>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	ec43 2b11 	vmov	d1, r2, r3
 80052aa:	ec46 5b10 	vmov	d0, r5, r6
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7ff fa98 	bl	80047e4 <_ZN5Motor8setRatioEdd>

	}

}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052bc:	200002b0 	.word	0x200002b0

080052c0 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff f9e4 	bl	80046ba <_ZN6Logger5startEv>
	processing_flag_ = true;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	0000      	movs	r0, r0
 8005304:	0000      	movs	r0, r0
	...

08005308 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff f9e1 	bl	80046dc <_ZN6Logger4stopEv>
	processing_flag_ = false;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005348 <_ZN20SystemIdentification4stopEv+0x40>
 8005332:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005348 <_ZN20SystemIdentification4stopEv+0x40>
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fa54 	bl	80047e4 <_ZN5Motor8setRatioEdd>
}
 800533c:	bf00      	nop
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	f3af 8000 	nop.w
	...

08005350 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	611a      	str	r2, [r3, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	615a      	str	r2, [r3, #20]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	619a      	str	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	61da      	str	r2, [r3, #28]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	621a      	str	r2, [r3, #32]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38

}
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	f107 020c 	add.w	r2, r7, #12
 80053f8:	f107 0110 	add.w	r1, r7, #16
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fc f803 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005402:	ed97 7a04 	vldr	s14, [r7, #16]
 8005406:	edd7 7a03 	vldr	s15, [r7, #12]
 800540a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800540e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005416:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	f7fb f8ac 	bl	8000578 <__aeabi_f2d>
 8005420:	a30b      	add	r3, pc, #44	; (adr r3, 8005450 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fb f8ff 	bl	8000628 <__aeabi_dmul>
 800542a:	4603      	mov	r3, r0
 800542c:	460c      	mov	r4, r1
 800542e:	4618      	mov	r0, r3
 8005430:	4621      	mov	r1, r4
 8005432:	f7fb fbf1 	bl	8000c18 <__aeabi_d2f>
 8005436:	4602      	mov	r2, r0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	ee07 3a90 	vmov	s15, r3
}
 8005444:	eeb0 0a67 	vmov.f32	s0, s15
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	bd90      	pop	{r4, r7, pc}
 800544e:	bf00      	nop
 8005450:	1ab1d998 	.word	0x1ab1d998
 8005454:	3f7830b5 	.word	0x3f7830b5

08005458 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	ed93 7a00 	vldr	s14, [r3]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	edd3 7a02 	vldr	s15, [r3, #8]
 800546c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005470:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 800547e:	4b48      	ldr	r3, [pc, #288]	; (80055a0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	edd3 7a04 	vldr	s15, [r3, #16]
 8005494:	ed97 7a05 	vldr	s14, [r7, #20]
 8005498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80054a0:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb f867 	bl	8000578 <__aeabi_f2d>
 80054aa:	4604      	mov	r4, r0
 80054ac:	460d      	mov	r5, r1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	ed93 7a06 	vldr	s14, [r3, #24]
 80054b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80054b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054bc:	ee17 0a90 	vmov	r0, s15
 80054c0:	f7fb f85a 	bl	8000578 <__aeabi_f2d>
 80054c4:	a334      	add	r3, pc, #208	; (adr r3, 8005598 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	f7fb f8ad 	bl	8000628 <__aeabi_dmul>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4620      	mov	r0, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	f7fa fef1 	bl	80002bc <__adddf3>
 80054da:	4603      	mov	r3, r0
 80054dc:	460c      	mov	r4, r1
 80054de:	4618      	mov	r0, r3
 80054e0:	4621      	mov	r1, r4
 80054e2:	f7fb fb99 	bl	8000c18 <__aeabi_d2f>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4b2d      	ldr	r3, [pc, #180]	; (80055a0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80054ea:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	ed93 7a05 	vldr	s14, [r3, #20]
 80054f2:	4b2c      	ldr	r3, [pc, #176]	; (80055a4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80054f4:	edd3 7a00 	vldr	s15, [r3]
 80054f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80054fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005504:	ee17 0a90 	vmov	r0, s15
 8005508:	f7fb f836 	bl	8000578 <__aeabi_f2d>
 800550c:	a322      	add	r3, pc, #136	; (adr r3, 8005598 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f7fb f9b3 	bl	800087c <__aeabi_ddiv>
 8005516:	4603      	mov	r3, r0
 8005518:	460c      	mov	r4, r1
 800551a:	4618      	mov	r0, r3
 800551c:	4621      	mov	r1, r4
 800551e:	f7fb fb7b 	bl	8000c18 <__aeabi_d2f>
 8005522:	4603      	mov	r3, r0
 8005524:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005526:	ed97 7a04 	vldr	s14, [r7, #16]
 800552a:	edd7 7a03 	vldr	s15, [r7, #12]
 800552e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005532:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005534:	edd3 7a00 	vldr	s15, [r3]
 8005538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800553c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800554a:	edd7 7a02 	vldr	s15, [r7, #8]
 800554e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005552:	ee17 0a90 	vmov	r0, s15
 8005556:	f7fb f80f 	bl	8000578 <__aeabi_f2d>
 800555a:	4605      	mov	r5, r0
 800555c:	460e      	mov	r6, r1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005564:	ed97 7a02 	vldr	s14, [r7, #8]
 8005568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800556c:	ee17 0a90 	vmov	r0, s15
 8005570:	f7fb f802 	bl	8000578 <__aeabi_f2d>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	ec43 2b11 	vmov	d1, r2, r3
 800557c:	ec46 5b10 	vmov	d0, r5, r6
 8005580:	4620      	mov	r0, r4
 8005582:	f7ff f92f 	bl	80047e4 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005586:	4a07      	ldr	r2, [pc, #28]	; (80055a4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	6013      	str	r3, [r2, #0]
}
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005594:	f3af 8000 	nop.w
 8005598:	d2f1a9fc 	.word	0xd2f1a9fc
 800559c:	3f50624d 	.word	0x3f50624d
 80055a0:	200002b8 	.word	0x200002b8
 80055a4:	200002b4 	.word	0x200002b4

080055a8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80055b4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	605a      	str	r2, [r3, #4]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80055dc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	ed87 0a02 	vstr	s0, [r7, #8]
 8005604:	edc7 0a01 	vstr	s1, [r7, #4]
 8005608:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	615a      	str	r2, [r3, #20]
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	ed87 0a02 	vstr	s0, [r7, #8]
 8005636:	edc7 0a01 	vstr	s1, [r7, #4]
 800563a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff febf 	bl	80053e8 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff feef 	bl	8005458 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80056d8 <_ZN12VelocityCtrl4stopEv+0x30>
 80056c0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80056d8 <_ZN12VelocityCtrl4stopEv+0x30>
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff f88d 	bl	80047e4 <_ZN5Motor8setRatioEdd>

}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	f3af 8000 	nop.w
	...

080056e0 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	ee07 3a90 	vmov	s15, r3
}
 80056f0:	eeb0 0a67 	vmov.f32	s0, s15
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005712:	f001 fe27 	bl	8007364 <cppFlip100ns>

		tim7_timer++;
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3301      	adds	r3, #1
 800571c:	4a1b      	ldr	r2, [pc, #108]	; (800578c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800571e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005720:	4b1a      	ldr	r3, [pc, #104]	; (800578c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1a      	ldr	r2, [pc, #104]	; (8005790 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d902      	bls.n	8005730 <HAL_TIM_PeriodElapsedCallback+0x30>
 800572a:	4b18      	ldr	r3, [pc, #96]	; (800578c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a17      	ldr	r2, [pc, #92]	; (8005794 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d10e      	bne.n	8005758 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800573a:	f001 fdc9 	bl	80072d0 <cppFlip1ms>

		tim6_timer++;
 800573e:	4b16      	ldr	r3, [pc, #88]	; (8005798 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	4a14      	ldr	r2, [pc, #80]	; (8005798 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005746:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a10      	ldr	r2, [pc, #64]	; (8005790 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d902      	bls.n	8005758 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005752:	4b11      	ldr	r3, [pc, #68]	; (8005798 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a0f      	ldr	r2, [pc, #60]	; (800579c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d10e      	bne.n	8005780 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005762:	f001 fe09 	bl	8007378 <cppFlip10ms>

		tim13_timer++;
 8005766:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800576e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a06      	ldr	r2, [pc, #24]	; (8005790 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d902      	bls.n	8005780 <HAL_TIM_PeriodElapsedCallback+0x80>
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
	}

}
 8005780:	bf00      	nop
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40001400 	.word	0x40001400
 800578c:	2003ea94 	.word	0x2003ea94
 8005790:	0001869f 	.word	0x0001869f
 8005794:	40001000 	.word	0x40001000
 8005798:	2003ea50 	.word	0x2003ea50
 800579c:	40001c00 	.word	0x40001c00
 80057a0:	2003ea98 	.word	0x2003ea98

080057a4 <init>:

void init()
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80057a8:	2201      	movs	r2, #1
 80057aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057ae:	4808      	ldr	r0, [pc, #32]	; (80057d0 <init+0x2c>)
 80057b0:	f004 fda8 	bl	800a304 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80057b4:	4807      	ldr	r0, [pc, #28]	; (80057d4 <init+0x30>)
 80057b6:	f008 fc70 	bl	800e09a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80057ba:	4807      	ldr	r0, [pc, #28]	; (80057d8 <init+0x34>)
 80057bc:	f008 fc6d 	bl	800e09a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80057c0:	4806      	ldr	r0, [pc, #24]	; (80057dc <init+0x38>)
 80057c2:	f008 fc6a 	bl	800e09a <HAL_TIM_Base_Start_IT>

	cppInit();
 80057c6:	f001 fce3 	bl	8007190 <cppInit>

	//path_following_initialize();

}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40021000 	.word	0x40021000
 80057d4:	2003eb7c 	.word	0x2003eb7c
 80057d8:	2003ed20 	.word	0x2003ed20
 80057dc:	2003ea9c 	.word	0x2003ea9c

080057e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057e4:	f003 fa86 	bl	8008cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057e8:	f000 f82a 	bl	8005840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80057ec:	f000 fdbc 	bl	8006368 <MX_GPIO_Init>
  MX_DMA_Init();
 80057f0:	f000 fd8a 	bl	8006308 <MX_DMA_Init>
  MX_I2C2_Init();
 80057f4:	f000 f9e8 	bl	8005bc8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80057f8:	f000 fa14 	bl	8005c24 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80057fc:	f000 fa32 	bl	8005c64 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005800:	f000 fa66 	bl	8005cd0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005804:	f000 fb70 	bl	8005ee8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005808:	f000 fc3c 	bl	8006084 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800580c:	f000 fd52 	bl	80062b4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005810:	f00a fc16 	bl	8010040 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005814:	f000 fbcc 	bl	8005fb0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005818:	f000 f9a8 	bl	8005b6c <MX_I2C1_Init>
  MX_TIM3_Init();
 800581c:	f000 fb00 	bl	8005e20 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005820:	f000 fc88 	bl	8006134 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005824:	f000 fcd4 	bl	80061d0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005828:	f000 f898 	bl	800595c <MX_ADC2_Init>
  MX_TIM7_Init();
 800582c:	f000 fbf6 	bl	800601c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005830:	f000 fd1c 	bl	800626c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005834:	f7ff ffb6 	bl	80057a4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005838:	f001 fdb6 	bl	80073a8 <cppLoop>
 800583c:	e7fc      	b.n	8005838 <main+0x58>
	...

08005840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b0a4      	sub	sp, #144	; 0x90
 8005844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005846:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800584a:	2234      	movs	r2, #52	; 0x34
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f00f f841 	bl	80148d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005854:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005864:	f107 030c 	add.w	r3, r7, #12
 8005868:	223c      	movs	r2, #60	; 0x3c
 800586a:	2100      	movs	r1, #0
 800586c:	4618      	mov	r0, r3
 800586e:	f00f f832 	bl	80148d6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005872:	2300      	movs	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	4b37      	ldr	r3, [pc, #220]	; (8005954 <SystemClock_Config+0x114>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	4a36      	ldr	r2, [pc, #216]	; (8005954 <SystemClock_Config+0x114>)
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005880:	6413      	str	r3, [r2, #64]	; 0x40
 8005882:	4b34      	ldr	r3, [pc, #208]	; (8005954 <SystemClock_Config+0x114>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800588e:	2300      	movs	r3, #0
 8005890:	607b      	str	r3, [r7, #4]
 8005892:	4b31      	ldr	r3, [pc, #196]	; (8005958 <SystemClock_Config+0x118>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a30      	ldr	r2, [pc, #192]	; (8005958 <SystemClock_Config+0x118>)
 8005898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	4b2e      	ldr	r3, [pc, #184]	; (8005958 <SystemClock_Config+0x118>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058a6:	607b      	str	r3, [r7, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058aa:	2301      	movs	r3, #1
 80058ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058b4:	2302      	movs	r3, #2
 80058b6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058bc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80058be:	2308      	movs	r3, #8
 80058c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80058c2:	23b4      	movs	r3, #180	; 0xb4
 80058c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058c8:	2302      	movs	r3, #2
 80058ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80058ce:	2308      	movs	r3, #8
 80058d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80058d4:	2302      	movs	r3, #2
 80058d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80058de:	4618      	mov	r0, r3
 80058e0:	f006 f932 	bl	800bb48 <HAL_RCC_OscConfig>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80058ea:	f000 fe7f 	bl	80065ec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80058ee:	f005 fcad 	bl	800b24c <HAL_PWREx_EnableOverDrive>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80058f8:	f000 fe78 	bl	80065ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058fc:	230f      	movs	r3, #15
 80058fe:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005900:	2302      	movs	r3, #2
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005904:	2300      	movs	r3, #0
 8005906:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005908:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800590c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800590e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005912:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005914:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005918:	2105      	movs	r1, #5
 800591a:	4618      	mov	r0, r3
 800591c:	f005 fce6 	bl	800b2ec <HAL_RCC_ClockConfig>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005926:	f000 fe61 	bl	80065ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800592a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800592e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005930:	2300      	movs	r3, #0
 8005932:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005934:	2300      	movs	r3, #0
 8005936:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005938:	f107 030c 	add.w	r3, r7, #12
 800593c:	4618      	mov	r0, r3
 800593e:	f005 fec5 	bl	800b6cc <HAL_RCCEx_PeriphCLKConfig>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005948:	f000 fe50 	bl	80065ec <Error_Handler>
  }
}
 800594c:	bf00      	nop
 800594e:	3790      	adds	r7, #144	; 0x90
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40023800 	.word	0x40023800
 8005958:	40007000 	.word	0x40007000

0800595c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005962:	463b      	mov	r3, r7
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	609a      	str	r2, [r3, #8]
 800596c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800596e:	4b7c      	ldr	r3, [pc, #496]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005970:	4a7c      	ldr	r2, [pc, #496]	; (8005b64 <MX_ADC2_Init+0x208>)
 8005972:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005974:	4b7a      	ldr	r3, [pc, #488]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005976:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800597a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800597c:	4b78      	ldr	r3, [pc, #480]	; (8005b60 <MX_ADC2_Init+0x204>)
 800597e:	2200      	movs	r2, #0
 8005980:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005982:	4b77      	ldr	r3, [pc, #476]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005984:	2201      	movs	r2, #1
 8005986:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005988:	4b75      	ldr	r3, [pc, #468]	; (8005b60 <MX_ADC2_Init+0x204>)
 800598a:	2201      	movs	r2, #1
 800598c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800598e:	4b74      	ldr	r3, [pc, #464]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005996:	4b72      	ldr	r3, [pc, #456]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005998:	2200      	movs	r2, #0
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800599c:	4b70      	ldr	r3, [pc, #448]	; (8005b60 <MX_ADC2_Init+0x204>)
 800599e:	4a72      	ldr	r2, [pc, #456]	; (8005b68 <MX_ADC2_Init+0x20c>)
 80059a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80059a2:	4b6f      	ldr	r3, [pc, #444]	; (8005b60 <MX_ADC2_Init+0x204>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80059a8:	4b6d      	ldr	r3, [pc, #436]	; (8005b60 <MX_ADC2_Init+0x204>)
 80059aa:	220e      	movs	r2, #14
 80059ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80059ae:	4b6c      	ldr	r3, [pc, #432]	; (8005b60 <MX_ADC2_Init+0x204>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80059b6:	4b6a      	ldr	r3, [pc, #424]	; (8005b60 <MX_ADC2_Init+0x204>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80059bc:	4868      	ldr	r0, [pc, #416]	; (8005b60 <MX_ADC2_Init+0x204>)
 80059be:	f003 fa2d 	bl	8008e1c <HAL_ADC_Init>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80059c8:	f000 fe10 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80059cc:	230a      	movs	r3, #10
 80059ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80059d0:	2301      	movs	r3, #1
 80059d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80059d4:	2306      	movs	r3, #6
 80059d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059d8:	463b      	mov	r3, r7
 80059da:	4619      	mov	r1, r3
 80059dc:	4860      	ldr	r0, [pc, #384]	; (8005b60 <MX_ADC2_Init+0x204>)
 80059de:	f003 fb71 	bl	80090c4 <HAL_ADC_ConfigChannel>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80059e8:	f000 fe00 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80059ec:	230b      	movs	r3, #11
 80059ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80059f0:	2302      	movs	r3, #2
 80059f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059f4:	463b      	mov	r3, r7
 80059f6:	4619      	mov	r1, r3
 80059f8:	4859      	ldr	r0, [pc, #356]	; (8005b60 <MX_ADC2_Init+0x204>)
 80059fa:	f003 fb63 	bl	80090c4 <HAL_ADC_ConfigChannel>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005a04:	f000 fdf2 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005a08:	230c      	movs	r3, #12
 8005a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a10:	463b      	mov	r3, r7
 8005a12:	4619      	mov	r1, r3
 8005a14:	4852      	ldr	r0, [pc, #328]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005a16:	f003 fb55 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005a20:	f000 fde4 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005a24:	230d      	movs	r3, #13
 8005a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005a28:	2304      	movs	r3, #4
 8005a2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	4619      	mov	r1, r3
 8005a30:	484b      	ldr	r0, [pc, #300]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005a32:	f003 fb47 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005a3c:	f000 fdd6 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005a44:	2305      	movs	r3, #5
 8005a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a48:	463b      	mov	r3, r7
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4844      	ldr	r0, [pc, #272]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005a4e:	f003 fb39 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005a58:	f000 fdc8 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005a60:	2306      	movs	r3, #6
 8005a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a64:	463b      	mov	r3, r7
 8005a66:	4619      	mov	r1, r3
 8005a68:	483d      	ldr	r0, [pc, #244]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005a6a:	f003 fb2b 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005a74:	f000 fdba 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005a7c:	2307      	movs	r3, #7
 8005a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a80:	463b      	mov	r3, r7
 8005a82:	4619      	mov	r1, r3
 8005a84:	4836      	ldr	r0, [pc, #216]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005a86:	f003 fb1d 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005a90:	f000 fdac 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005a94:	2303      	movs	r3, #3
 8005a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005a98:	2308      	movs	r3, #8
 8005a9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	482f      	ldr	r0, [pc, #188]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005aa2:	f003 fb0f 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005aac:	f000 fd9e 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005ab4:	2309      	movs	r3, #9
 8005ab6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ab8:	463b      	mov	r3, r7
 8005aba:	4619      	mov	r1, r3
 8005abc:	4828      	ldr	r0, [pc, #160]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005abe:	f003 fb01 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005ac8:	f000 fd90 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005acc:	2305      	movs	r3, #5
 8005ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005ad0:	230a      	movs	r3, #10
 8005ad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4821      	ldr	r0, [pc, #132]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005ada:	f003 faf3 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005ae4:	f000 fd82 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005ae8:	2306      	movs	r3, #6
 8005aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005aec:	230b      	movs	r3, #11
 8005aee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005af0:	463b      	mov	r3, r7
 8005af2:	4619      	mov	r1, r3
 8005af4:	481a      	ldr	r0, [pc, #104]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005af6:	f003 fae5 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005b00:	f000 fd74 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005b04:	2307      	movs	r3, #7
 8005b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005b08:	230c      	movs	r3, #12
 8005b0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4813      	ldr	r0, [pc, #76]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005b12:	f003 fad7 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005b1c:	f000 fd66 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005b20:	2308      	movs	r3, #8
 8005b22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005b24:	230d      	movs	r3, #13
 8005b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b28:	463b      	mov	r3, r7
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	480c      	ldr	r0, [pc, #48]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005b2e:	f003 fac9 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005b38:	f000 fd58 	bl	80065ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005b3c:	2309      	movs	r3, #9
 8005b3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005b40:	230e      	movs	r3, #14
 8005b42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b44:	463b      	mov	r3, r7
 8005b46:	4619      	mov	r1, r3
 8005b48:	4805      	ldr	r0, [pc, #20]	; (8005b60 <MX_ADC2_Init+0x204>)
 8005b4a:	f003 fabb 	bl	80090c4 <HAL_ADC_ConfigChannel>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005b54:	f000 fd4a 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	2003e920 	.word	0x2003e920
 8005b64:	40012100 	.word	0x40012100
 8005b68:	0f000001 	.word	0x0f000001

08005b6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b70:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <MX_I2C1_Init+0x54>)
 8005b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005b78:	4a12      	ldr	r2, [pc, #72]	; (8005bc4 <MX_I2C1_Init+0x58>)
 8005b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005b82:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b9c:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005ba2:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005ba4:	2280      	movs	r2, #128	; 0x80
 8005ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ba8:	4804      	ldr	r0, [pc, #16]	; (8005bbc <MX_I2C1_Init+0x50>)
 8005baa:	f004 fbc5 	bl	800a338 <HAL_I2C_Init>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005bb4:	f000 fd1a 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005bb8:	bf00      	nop
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	2003e968 	.word	0x2003e968
 8005bc0:	40005400 	.word	0x40005400
 8005bc4:	000186a0 	.word	0x000186a0

08005bc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005bcc:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005bce:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <MX_I2C2_Init+0x54>)
 8005bd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005bd2:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005bd4:	4a12      	ldr	r2, [pc, #72]	; (8005c20 <MX_I2C2_Init+0x58>)
 8005bd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005bde:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005be4:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005be6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bf8:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005c00:	2280      	movs	r2, #128	; 0x80
 8005c02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c04:	4804      	ldr	r0, [pc, #16]	; (8005c18 <MX_I2C2_Init+0x50>)
 8005c06:	f004 fb97 	bl	800a338 <HAL_I2C_Init>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005c10:	f000 fcec 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005c14:	bf00      	nop
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	2003e9fc 	.word	0x2003e9fc
 8005c1c:	40005800 	.word	0x40005800
 8005c20:	000186a0 	.word	0x000186a0

08005c24 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005c28:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <MX_SDIO_SD_Init+0x38>)
 8005c2a:	4a0d      	ldr	r2, [pc, #52]	; (8005c60 <MX_SDIO_SD_Init+0x3c>)
 8005c2c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <MX_SDIO_SD_Init+0x38>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005c34:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <MX_SDIO_SD_Init+0x38>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005c3a:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <MX_SDIO_SD_Init+0x38>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <MX_SDIO_SD_Init+0x38>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <MX_SDIO_SD_Init+0x38>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <MX_SDIO_SD_Init+0x38>)
 8005c4e:	2202      	movs	r2, #2
 8005c50:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005c52:	bf00      	nop
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	2003ebfc 	.word	0x2003ebfc
 8005c60:	40012c00 	.word	0x40012c00

08005c64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005c68:	4b17      	ldr	r3, [pc, #92]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <MX_SPI2_Init+0x68>)
 8005c6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005c6e:	4b16      	ldr	r3, [pc, #88]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c7c:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005c82:	4b11      	ldr	r3, [pc, #68]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005c84:	2202      	movs	r2, #2
 8005c86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005c8e:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005c96:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005c98:	2228      	movs	r2, #40	; 0x28
 8005c9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ca2:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca8:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005cb0:	220a      	movs	r2, #10
 8005cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005cb4:	4804      	ldr	r0, [pc, #16]	; (8005cc8 <MX_SPI2_Init+0x64>)
 8005cb6:	f007 fc71 	bl	800d59c <HAL_SPI_Init>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005cc0:	f000 fc94 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005cc4:	bf00      	nop
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	2003e848 	.word	0x2003e848
 8005ccc:	40003800 	.word	0x40003800

08005cd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b09a      	sub	sp, #104	; 0x68
 8005cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005cd6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005cda:	2224      	movs	r2, #36	; 0x24
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f00e fdf9 	bl	80148d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ce4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005cee:	f107 0320 	add.w	r3, r7, #32
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	609a      	str	r2, [r3, #8]
 8005cfa:	60da      	str	r2, [r3, #12]
 8005cfc:	611a      	str	r2, [r3, #16]
 8005cfe:	615a      	str	r2, [r3, #20]
 8005d00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d02:	463b      	mov	r3, r7
 8005d04:	2220      	movs	r2, #32
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f00e fde4 	bl	80148d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d0e:	4b42      	ldr	r3, [pc, #264]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d10:	4a42      	ldr	r2, [pc, #264]	; (8005e1c <MX_TIM1_Init+0x14c>)
 8005d12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005d14:	4b40      	ldr	r3, [pc, #256]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d1a:	4b3f      	ldr	r3, [pc, #252]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005d20:	4b3d      	ldr	r3, [pc, #244]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d28:	4b3b      	ldr	r3, [pc, #236]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d2e:	4b3a      	ldr	r3, [pc, #232]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d34:	4b38      	ldr	r3, [pc, #224]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005d3a:	4837      	ldr	r0, [pc, #220]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d3c:	f008 f9d1 	bl	800e0e2 <HAL_TIM_PWM_Init>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005d46:	f000 fc51 	bl	80065ec <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d52:	2301      	movs	r3, #1
 8005d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d56:	2300      	movs	r3, #0
 8005d58:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d62:	2301      	movs	r3, #1
 8005d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d66:	2300      	movs	r3, #0
 8005d68:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005d6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d72:	4619      	mov	r1, r3
 8005d74:	4828      	ldr	r0, [pc, #160]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d76:	f008 fa1d 	bl	800e1b4 <HAL_TIM_Encoder_Init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005d80:	f000 fc34 	bl	80065ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d84:	2300      	movs	r3, #0
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d90:	4619      	mov	r1, r3
 8005d92:	4821      	ldr	r0, [pc, #132]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005d94:	f008 ff44 	bl	800ec20 <HAL_TIMEx_MasterConfigSynchronization>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005d9e:	f000 fc25 	bl	80065ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005da2:	2360      	movs	r3, #96	; 0x60
 8005da4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005daa:	2300      	movs	r3, #0
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005dae:	2300      	movs	r3, #0
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005dbe:	f107 0320 	add.w	r3, r7, #32
 8005dc2:	2208      	movs	r2, #8
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4814      	ldr	r0, [pc, #80]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005dc8:	f008 fbc6 	bl	800e558 <HAL_TIM_PWM_ConfigChannel>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005dd2:	f000 fc0b 	bl	80065ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005df4:	463b      	mov	r3, r7
 8005df6:	4619      	mov	r1, r3
 8005df8:	4807      	ldr	r0, [pc, #28]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005dfa:	f008 ff8d 	bl	800ed18 <HAL_TIMEx_ConfigBreakDeadTime>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005e04:	f000 fbf2 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005e08:	4803      	ldr	r0, [pc, #12]	; (8005e18 <MX_TIM1_Init+0x148>)
 8005e0a:	f000 ffdf 	bl	8006dcc <HAL_TIM_MspPostInit>

}
 8005e0e:	bf00      	nop
 8005e10:	3768      	adds	r7, #104	; 0x68
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	2003ebbc 	.word	0x2003ebbc
 8005e1c:	40010000 	.word	0x40010000

08005e20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e26:	f107 0320 	add.w	r3, r7, #32
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	611a      	str	r2, [r3, #16]
 8005e3e:	615a      	str	r2, [r3, #20]
 8005e40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005e42:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005e44:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <MX_TIM3_Init+0xc4>)
 8005e46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005e48:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e4e:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005e54:	4b22      	ldr	r3, [pc, #136]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e5c:	4b20      	ldr	r3, [pc, #128]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e62:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e68:	481d      	ldr	r0, [pc, #116]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005e6a:	f008 f93a 	bl	800e0e2 <HAL_TIM_PWM_Init>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005e74:	f000 fbba 	bl	80065ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e80:	f107 0320 	add.w	r3, r7, #32
 8005e84:	4619      	mov	r1, r3
 8005e86:	4816      	ldr	r0, [pc, #88]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005e88:	f008 feca 	bl	800ec20 <HAL_TIMEx_MasterConfigSynchronization>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005e92:	f000 fbab 	bl	80065ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e96:	2360      	movs	r3, #96	; 0x60
 8005e98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4619      	mov	r1, r3
 8005eac:	480c      	ldr	r0, [pc, #48]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005eae:	f008 fb53 	bl	800e558 <HAL_TIM_PWM_ConfigChannel>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005eb8:	f000 fb98 	bl	80065ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ebc:	1d3b      	adds	r3, r7, #4
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4807      	ldr	r0, [pc, #28]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005ec4:	f008 fb48 	bl	800e558 <HAL_TIM_PWM_ConfigChannel>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005ece:	f000 fb8d 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005ed2:	4803      	ldr	r0, [pc, #12]	; (8005ee0 <MX_TIM3_Init+0xc0>)
 8005ed4:	f000 ff7a 	bl	8006dcc <HAL_TIM_MspPostInit>

}
 8005ed8:	bf00      	nop
 8005eda:	3728      	adds	r7, #40	; 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	2003ea54 	.word	0x2003ea54
 8005ee4:	40000400 	.word	0x40000400

08005ee8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005eee:	f107 0320 	add.w	r3, r7, #32
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ef8:	1d3b      	adds	r3, r7, #4
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	605a      	str	r2, [r3, #4]
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	60da      	str	r2, [r3, #12]
 8005f04:	611a      	str	r2, [r3, #16]
 8005f06:	615a      	str	r2, [r3, #20]
 8005f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005f0a:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f0c:	4a27      	ldr	r2, [pc, #156]	; (8005fac <MX_TIM4_Init+0xc4>)
 8005f0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005f10:	4b25      	ldr	r3, [pc, #148]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005f1c:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f1e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005f22:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f24:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f2a:	4b1f      	ldr	r3, [pc, #124]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005f30:	481d      	ldr	r0, [pc, #116]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f32:	f008 f8d6 	bl	800e0e2 <HAL_TIM_PWM_Init>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005f3c:	f000 fb56 	bl	80065ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f40:	2300      	movs	r3, #0
 8005f42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f48:	f107 0320 	add.w	r3, r7, #32
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4816      	ldr	r0, [pc, #88]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f50:	f008 fe66 	bl	800ec20 <HAL_TIMEx_MasterConfigSynchronization>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005f5a:	f000 fb47 	bl	80065ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f5e:	2360      	movs	r3, #96	; 0x60
 8005f60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	2208      	movs	r2, #8
 8005f72:	4619      	mov	r1, r3
 8005f74:	480c      	ldr	r0, [pc, #48]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f76:	f008 faef 	bl	800e558 <HAL_TIM_PWM_ConfigChannel>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005f80:	f000 fb34 	bl	80065ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	220c      	movs	r2, #12
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4807      	ldr	r0, [pc, #28]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f8c:	f008 fae4 	bl	800e558 <HAL_TIM_PWM_ConfigChannel>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005f96:	f000 fb29 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005f9a:	4803      	ldr	r0, [pc, #12]	; (8005fa8 <MX_TIM4_Init+0xc0>)
 8005f9c:	f000 ff16 	bl	8006dcc <HAL_TIM_MspPostInit>

}
 8005fa0:	bf00      	nop
 8005fa2:	3728      	adds	r7, #40	; 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	2003e8e0 	.word	0x2003e8e0
 8005fac:	40000800 	.word	0x40000800

08005fb0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005fbe:	4b15      	ldr	r3, [pc, #84]	; (8006014 <MX_TIM6_Init+0x64>)
 8005fc0:	4a15      	ldr	r2, [pc, #84]	; (8006018 <MX_TIM6_Init+0x68>)
 8005fc2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005fc4:	4b13      	ldr	r3, [pc, #76]	; (8006014 <MX_TIM6_Init+0x64>)
 8005fc6:	2259      	movs	r2, #89	; 0x59
 8005fc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fca:	4b12      	ldr	r3, [pc, #72]	; (8006014 <MX_TIM6_Init+0x64>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <MX_TIM6_Init+0x64>)
 8005fd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005fd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fd8:	4b0e      	ldr	r3, [pc, #56]	; (8006014 <MX_TIM6_Init+0x64>)
 8005fda:	2280      	movs	r2, #128	; 0x80
 8005fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005fde:	480d      	ldr	r0, [pc, #52]	; (8006014 <MX_TIM6_Init+0x64>)
 8005fe0:	f008 f830 	bl	800e044 <HAL_TIM_Base_Init>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005fea:	f000 faff 	bl	80065ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4806      	ldr	r0, [pc, #24]	; (8006014 <MX_TIM6_Init+0x64>)
 8005ffc:	f008 fe10 	bl	800ec20 <HAL_TIMEx_MasterConfigSynchronization>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006006:	f000 faf1 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800600a:	bf00      	nop
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	2003eb7c 	.word	0x2003eb7c
 8006018:	40001000 	.word	0x40001000

0800601c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006022:	463b      	mov	r3, r7
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800602a:	4b14      	ldr	r3, [pc, #80]	; (800607c <MX_TIM7_Init+0x60>)
 800602c:	4a14      	ldr	r2, [pc, #80]	; (8006080 <MX_TIM7_Init+0x64>)
 800602e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006030:	4b12      	ldr	r3, [pc, #72]	; (800607c <MX_TIM7_Init+0x60>)
 8006032:	22b3      	movs	r2, #179	; 0xb3
 8006034:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006036:	4b11      	ldr	r3, [pc, #68]	; (800607c <MX_TIM7_Init+0x60>)
 8006038:	2200      	movs	r2, #0
 800603a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800603c:	4b0f      	ldr	r3, [pc, #60]	; (800607c <MX_TIM7_Init+0x60>)
 800603e:	2231      	movs	r2, #49	; 0x31
 8006040:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006042:	4b0e      	ldr	r3, [pc, #56]	; (800607c <MX_TIM7_Init+0x60>)
 8006044:	2280      	movs	r2, #128	; 0x80
 8006046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006048:	480c      	ldr	r0, [pc, #48]	; (800607c <MX_TIM7_Init+0x60>)
 800604a:	f007 fffb 	bl	800e044 <HAL_TIM_Base_Init>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006054:	f000 faca 	bl	80065ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006058:	2300      	movs	r3, #0
 800605a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800605c:	2300      	movs	r3, #0
 800605e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006060:	463b      	mov	r3, r7
 8006062:	4619      	mov	r1, r3
 8006064:	4805      	ldr	r0, [pc, #20]	; (800607c <MX_TIM7_Init+0x60>)
 8006066:	f008 fddb 	bl	800ec20 <HAL_TIMEx_MasterConfigSynchronization>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006070:	f000 fabc 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006074:	bf00      	nop
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	2003ed20 	.word	0x2003ed20
 8006080:	40001400 	.word	0x40001400

08006084 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08c      	sub	sp, #48	; 0x30
 8006088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800608a:	f107 030c 	add.w	r3, r7, #12
 800608e:	2224      	movs	r2, #36	; 0x24
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f00e fc1f 	bl	80148d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80060a0:	4b22      	ldr	r3, [pc, #136]	; (800612c <MX_TIM8_Init+0xa8>)
 80060a2:	4a23      	ldr	r2, [pc, #140]	; (8006130 <MX_TIM8_Init+0xac>)
 80060a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80060a6:	4b21      	ldr	r3, [pc, #132]	; (800612c <MX_TIM8_Init+0xa8>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80060ac:	4b1f      	ldr	r3, [pc, #124]	; (800612c <MX_TIM8_Init+0xa8>)
 80060ae:	2210      	movs	r2, #16
 80060b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80060b2:	4b1e      	ldr	r3, [pc, #120]	; (800612c <MX_TIM8_Init+0xa8>)
 80060b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060ba:	4b1c      	ldr	r3, [pc, #112]	; (800612c <MX_TIM8_Init+0xa8>)
 80060bc:	2200      	movs	r2, #0
 80060be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80060c0:	4b1a      	ldr	r3, [pc, #104]	; (800612c <MX_TIM8_Init+0xa8>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060c6:	4b19      	ldr	r3, [pc, #100]	; (800612c <MX_TIM8_Init+0xa8>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80060cc:	2303      	movs	r3, #3
 80060ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80060d0:	2300      	movs	r3, #0
 80060d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80060d4:	2301      	movs	r3, #1
 80060d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80060d8:	2300      	movs	r3, #0
 80060da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80060e0:	2300      	movs	r3, #0
 80060e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80060e4:	2301      	movs	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80060e8:	2300      	movs	r3, #0
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80060f0:	f107 030c 	add.w	r3, r7, #12
 80060f4:	4619      	mov	r1, r3
 80060f6:	480d      	ldr	r0, [pc, #52]	; (800612c <MX_TIM8_Init+0xa8>)
 80060f8:	f008 f85c 	bl	800e1b4 <HAL_TIM_Encoder_Init>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006102:	f000 fa73 	bl	80065ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006106:	2300      	movs	r3, #0
 8006108:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800610a:	2300      	movs	r3, #0
 800610c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800610e:	1d3b      	adds	r3, r7, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4806      	ldr	r0, [pc, #24]	; (800612c <MX_TIM8_Init+0xa8>)
 8006114:	f008 fd84 	bl	800ec20 <HAL_TIMEx_MasterConfigSynchronization>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800611e:	f000 fa65 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006122:	bf00      	nop
 8006124:	3730      	adds	r7, #48	; 0x30
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	2003e8a0 	.word	0x2003e8a0
 8006130:	40010400 	.word	0x40010400

08006134 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800613a:	1d3b      	adds	r3, r7, #4
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	611a      	str	r2, [r3, #16]
 8006148:	615a      	str	r2, [r3, #20]
 800614a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800614c:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <MX_TIM10_Init+0x94>)
 800614e:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <MX_TIM10_Init+0x98>)
 8006150:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8006152:	4b1d      	ldr	r3, [pc, #116]	; (80061c8 <MX_TIM10_Init+0x94>)
 8006154:	2200      	movs	r2, #0
 8006156:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006158:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <MX_TIM10_Init+0x94>)
 800615a:	2200      	movs	r2, #0
 800615c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <MX_TIM10_Init+0x94>)
 8006160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006164:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006166:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <MX_TIM10_Init+0x94>)
 8006168:	2200      	movs	r2, #0
 800616a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800616c:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <MX_TIM10_Init+0x94>)
 800616e:	2200      	movs	r2, #0
 8006170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006172:	4815      	ldr	r0, [pc, #84]	; (80061c8 <MX_TIM10_Init+0x94>)
 8006174:	f007 ff66 	bl	800e044 <HAL_TIM_Base_Init>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800617e:	f000 fa35 	bl	80065ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006182:	4811      	ldr	r0, [pc, #68]	; (80061c8 <MX_TIM10_Init+0x94>)
 8006184:	f007 ffad 	bl	800e0e2 <HAL_TIM_PWM_Init>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800618e:	f000 fa2d 	bl	80065ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006192:	2360      	movs	r3, #96	; 0x60
 8006194:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	2200      	movs	r2, #0
 80061a6:	4619      	mov	r1, r3
 80061a8:	4807      	ldr	r0, [pc, #28]	; (80061c8 <MX_TIM10_Init+0x94>)
 80061aa:	f008 f9d5 	bl	800e558 <HAL_TIM_PWM_ConfigChannel>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80061b4:	f000 fa1a 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80061b8:	4803      	ldr	r0, [pc, #12]	; (80061c8 <MX_TIM10_Init+0x94>)
 80061ba:	f000 fe07 	bl	8006dcc <HAL_TIM_MspPostInit>

}
 80061be:	bf00      	nop
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	2003e9bc 	.word	0x2003e9bc
 80061cc:	40014400 	.word	0x40014400

080061d0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	609a      	str	r2, [r3, #8]
 80061e0:	60da      	str	r2, [r3, #12]
 80061e2:	611a      	str	r2, [r3, #16]
 80061e4:	615a      	str	r2, [r3, #20]
 80061e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <MX_TIM11_Init+0x94>)
 80061ea:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <MX_TIM11_Init+0x98>)
 80061ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80061ee:	4b1d      	ldr	r3, [pc, #116]	; (8006264 <MX_TIM11_Init+0x94>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061f4:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <MX_TIM11_Init+0x94>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80061fa:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <MX_TIM11_Init+0x94>)
 80061fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006200:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006202:	4b18      	ldr	r3, [pc, #96]	; (8006264 <MX_TIM11_Init+0x94>)
 8006204:	2200      	movs	r2, #0
 8006206:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006208:	4b16      	ldr	r3, [pc, #88]	; (8006264 <MX_TIM11_Init+0x94>)
 800620a:	2200      	movs	r2, #0
 800620c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800620e:	4815      	ldr	r0, [pc, #84]	; (8006264 <MX_TIM11_Init+0x94>)
 8006210:	f007 ff18 	bl	800e044 <HAL_TIM_Base_Init>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800621a:	f000 f9e7 	bl	80065ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800621e:	4811      	ldr	r0, [pc, #68]	; (8006264 <MX_TIM11_Init+0x94>)
 8006220:	f007 ff5f 	bl	800e0e2 <HAL_TIM_PWM_Init>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800622a:	f000 f9df 	bl	80065ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800622e:	2360      	movs	r3, #96	; 0x60
 8006230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	2200      	movs	r2, #0
 8006242:	4619      	mov	r1, r3
 8006244:	4807      	ldr	r0, [pc, #28]	; (8006264 <MX_TIM11_Init+0x94>)
 8006246:	f008 f987 	bl	800e558 <HAL_TIM_PWM_ConfigChannel>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006250:	f000 f9cc 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006254:	4803      	ldr	r0, [pc, #12]	; (8006264 <MX_TIM11_Init+0x94>)
 8006256:	f000 fdb9 	bl	8006dcc <HAL_TIM_MspPostInit>

}
 800625a:	bf00      	nop
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	2003eadc 	.word	0x2003eadc
 8006268:	40014800 	.word	0x40014800

0800626c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006270:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <MX_TIM13_Init+0x40>)
 8006272:	4a0f      	ldr	r2, [pc, #60]	; (80062b0 <MX_TIM13_Init+0x44>)
 8006274:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006276:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <MX_TIM13_Init+0x40>)
 8006278:	2259      	movs	r2, #89	; 0x59
 800627a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <MX_TIM13_Init+0x40>)
 800627e:	2200      	movs	r2, #0
 8006280:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006282:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <MX_TIM13_Init+0x40>)
 8006284:	f242 720f 	movw	r2, #9999	; 0x270f
 8006288:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <MX_TIM13_Init+0x40>)
 800628c:	2200      	movs	r2, #0
 800628e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006290:	4b06      	ldr	r3, [pc, #24]	; (80062ac <MX_TIM13_Init+0x40>)
 8006292:	2280      	movs	r2, #128	; 0x80
 8006294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006296:	4805      	ldr	r0, [pc, #20]	; (80062ac <MX_TIM13_Init+0x40>)
 8006298:	f007 fed4 	bl	800e044 <HAL_TIM_Base_Init>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80062a2:	f000 f9a3 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80062a6:	bf00      	nop
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	2003ea9c 	.word	0x2003ea9c
 80062b0:	40001c00 	.word	0x40001c00

080062b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062b8:	4b11      	ldr	r3, [pc, #68]	; (8006300 <MX_USART2_UART_Init+0x4c>)
 80062ba:	4a12      	ldr	r2, [pc, #72]	; (8006304 <MX_USART2_UART_Init+0x50>)
 80062bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80062be:	4b10      	ldr	r3, [pc, #64]	; (8006300 <MX_USART2_UART_Init+0x4c>)
 80062c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062c6:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <MX_USART2_UART_Init+0x4c>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062cc:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <MX_USART2_UART_Init+0x4c>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062d2:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <MX_USART2_UART_Init+0x4c>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062d8:	4b09      	ldr	r3, [pc, #36]	; (8006300 <MX_USART2_UART_Init+0x4c>)
 80062da:	220c      	movs	r2, #12
 80062dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <MX_USART2_UART_Init+0x4c>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062e4:	4b06      	ldr	r3, [pc, #24]	; (8006300 <MX_USART2_UART_Init+0x4c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80062ea:	4805      	ldr	r0, [pc, #20]	; (8006300 <MX_USART2_UART_Init+0x4c>)
 80062ec:	f008 fd7a 	bl	800ede4 <HAL_UART_Init>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80062f6:	f000 f979 	bl	80065ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	2003ec80 	.word	0x2003ec80
 8006304:	40004400 	.word	0x40004400

08006308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800630e:	2300      	movs	r3, #0
 8006310:	607b      	str	r3, [r7, #4]
 8006312:	4b14      	ldr	r3, [pc, #80]	; (8006364 <MX_DMA_Init+0x5c>)
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	4a13      	ldr	r2, [pc, #76]	; (8006364 <MX_DMA_Init+0x5c>)
 8006318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800631c:	6313      	str	r3, [r2, #48]	; 0x30
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <MX_DMA_Init+0x5c>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006326:	607b      	str	r3, [r7, #4]
 8006328:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800632a:	2200      	movs	r2, #0
 800632c:	2100      	movs	r1, #0
 800632e:	203a      	movs	r0, #58	; 0x3a
 8006330:	f003 fa53 	bl	80097da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006334:	203a      	movs	r0, #58	; 0x3a
 8006336:	f003 fa6c 	bl	8009812 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800633a:	2200      	movs	r2, #0
 800633c:	2100      	movs	r1, #0
 800633e:	203b      	movs	r0, #59	; 0x3b
 8006340:	f003 fa4b 	bl	80097da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006344:	203b      	movs	r0, #59	; 0x3b
 8006346:	f003 fa64 	bl	8009812 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	2045      	movs	r0, #69	; 0x45
 8006350:	f003 fa43 	bl	80097da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006354:	2045      	movs	r0, #69	; 0x45
 8006356:	f003 fa5c 	bl	8009812 <HAL_NVIC_EnableIRQ>

}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800

08006368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	; 0x30
 800636c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800636e:	f107 031c 	add.w	r3, r7, #28
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	605a      	str	r2, [r3, #4]
 8006378:	609a      	str	r2, [r3, #8]
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	4b94      	ldr	r3, [pc, #592]	; (80065d4 <MX_GPIO_Init+0x26c>)
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	4a93      	ldr	r2, [pc, #588]	; (80065d4 <MX_GPIO_Init+0x26c>)
 8006388:	f043 0310 	orr.w	r3, r3, #16
 800638c:	6313      	str	r3, [r2, #48]	; 0x30
 800638e:	4b91      	ldr	r3, [pc, #580]	; (80065d4 <MX_GPIO_Init+0x26c>)
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	4b8d      	ldr	r3, [pc, #564]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	4a8c      	ldr	r2, [pc, #560]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a8:	6313      	str	r3, [r2, #48]	; 0x30
 80063aa:	4b8a      	ldr	r3, [pc, #552]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	4b86      	ldr	r3, [pc, #536]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	4a85      	ldr	r2, [pc, #532]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063c0:	f043 0304 	orr.w	r3, r3, #4
 80063c4:	6313      	str	r3, [r2, #48]	; 0x30
 80063c6:	4b83      	ldr	r3, [pc, #524]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	4b7f      	ldr	r3, [pc, #508]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	4a7e      	ldr	r2, [pc, #504]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	6313      	str	r3, [r2, #48]	; 0x30
 80063e2:	4b7c      	ldr	r3, [pc, #496]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]
 80063f2:	4b78      	ldr	r3, [pc, #480]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	4a77      	ldr	r2, [pc, #476]	; (80065d4 <MX_GPIO_Init+0x26c>)
 80063f8:	f043 0302 	orr.w	r3, r3, #2
 80063fc:	6313      	str	r3, [r2, #48]	; 0x30
 80063fe:	4b75      	ldr	r3, [pc, #468]	; (80065d4 <MX_GPIO_Init+0x26c>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	60bb      	str	r3, [r7, #8]
 8006408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800640a:	2300      	movs	r3, #0
 800640c:	607b      	str	r3, [r7, #4]
 800640e:	4b71      	ldr	r3, [pc, #452]	; (80065d4 <MX_GPIO_Init+0x26c>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	4a70      	ldr	r2, [pc, #448]	; (80065d4 <MX_GPIO_Init+0x26c>)
 8006414:	f043 0308 	orr.w	r3, r3, #8
 8006418:	6313      	str	r3, [r2, #48]	; 0x30
 800641a:	4b6e      	ldr	r3, [pc, #440]	; (80065d4 <MX_GPIO_Init+0x26c>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006426:	2200      	movs	r2, #0
 8006428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800642c:	486a      	ldr	r0, [pc, #424]	; (80065d8 <MX_GPIO_Init+0x270>)
 800642e:	f003 ff69 	bl	800a304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006432:	2200      	movs	r2, #0
 8006434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006438:	4868      	ldr	r0, [pc, #416]	; (80065dc <MX_GPIO_Init+0x274>)
 800643a:	f003 ff63 	bl	800a304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800643e:	2200      	movs	r2, #0
 8006440:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006444:	4866      	ldr	r0, [pc, #408]	; (80065e0 <MX_GPIO_Init+0x278>)
 8006446:	f003 ff5d 	bl	800a304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800644a:	2200      	movs	r2, #0
 800644c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006450:	4864      	ldr	r0, [pc, #400]	; (80065e4 <MX_GPIO_Init+0x27c>)
 8006452:	f003 ff57 	bl	800a304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006456:	2304      	movs	r3, #4
 8006458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800645a:	2300      	movs	r3, #0
 800645c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006462:	f107 031c 	add.w	r3, r7, #28
 8006466:	4619      	mov	r1, r3
 8006468:	485b      	ldr	r0, [pc, #364]	; (80065d8 <MX_GPIO_Init+0x270>)
 800646a:	f003 fd89 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800646e:	230f      	movs	r3, #15
 8006470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006472:	2303      	movs	r3, #3
 8006474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006476:	2300      	movs	r3, #0
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800647a:	f107 031c 	add.w	r3, r7, #28
 800647e:	4619      	mov	r1, r3
 8006480:	4859      	ldr	r0, [pc, #356]	; (80065e8 <MX_GPIO_Init+0x280>)
 8006482:	f003 fd7d 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006486:	23e1      	movs	r3, #225	; 0xe1
 8006488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800648a:	2303      	movs	r3, #3
 800648c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800648e:	2300      	movs	r3, #0
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006492:	f107 031c 	add.w	r3, r7, #28
 8006496:	4619      	mov	r1, r3
 8006498:	4852      	ldr	r0, [pc, #328]	; (80065e4 <MX_GPIO_Init+0x27c>)
 800649a:	f003 fd71 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800649e:	2303      	movs	r3, #3
 80064a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064a2:	2303      	movs	r3, #3
 80064a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064aa:	f107 031c 	add.w	r3, r7, #28
 80064ae:	4619      	mov	r1, r3
 80064b0:	484a      	ldr	r0, [pc, #296]	; (80065dc <MX_GPIO_Init+0x274>)
 80064b2:	f003 fd65 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80064b6:	2304      	movs	r3, #4
 80064b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064ba:	2300      	movs	r3, #0
 80064bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064be:	2301      	movs	r3, #1
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064c2:	f107 031c 	add.w	r3, r7, #28
 80064c6:	4619      	mov	r1, r3
 80064c8:	4844      	ldr	r0, [pc, #272]	; (80065dc <MX_GPIO_Init+0x274>)
 80064ca:	f003 fd59 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80064ce:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80064d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064d4:	2300      	movs	r3, #0
 80064d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064d8:	2301      	movs	r3, #1
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064dc:	f107 031c 	add.w	r3, r7, #28
 80064e0:	4619      	mov	r1, r3
 80064e2:	483d      	ldr	r0, [pc, #244]	; (80065d8 <MX_GPIO_Init+0x270>)
 80064e4:	f003 fd4c 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80064e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064ee:	2301      	movs	r3, #1
 80064f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064f6:	2300      	movs	r3, #0
 80064f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064fa:	f107 031c 	add.w	r3, r7, #28
 80064fe:	4619      	mov	r1, r3
 8006500:	4835      	ldr	r0, [pc, #212]	; (80065d8 <MX_GPIO_Init+0x270>)
 8006502:	f003 fd3d 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800650a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800650c:	2301      	movs	r3, #1
 800650e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006510:	2300      	movs	r3, #0
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006514:	2300      	movs	r3, #0
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006518:	f107 031c 	add.w	r3, r7, #28
 800651c:	4619      	mov	r1, r3
 800651e:	482f      	ldr	r0, [pc, #188]	; (80065dc <MX_GPIO_Init+0x274>)
 8006520:	f003 fd2e 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800652a:	2300      	movs	r3, #0
 800652c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652e:	2300      	movs	r3, #0
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006532:	f107 031c 	add.w	r3, r7, #28
 8006536:	4619      	mov	r1, r3
 8006538:	4829      	ldr	r0, [pc, #164]	; (80065e0 <MX_GPIO_Init+0x278>)
 800653a:	f003 fd21 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800653e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006544:	2301      	movs	r3, #1
 8006546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006548:	2300      	movs	r3, #0
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800654c:	2300      	movs	r3, #0
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006550:	f107 031c 	add.w	r3, r7, #28
 8006554:	4619      	mov	r1, r3
 8006556:	4822      	ldr	r0, [pc, #136]	; (80065e0 <MX_GPIO_Init+0x278>)
 8006558:	f003 fd12 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800655c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006562:	2301      	movs	r3, #1
 8006564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006566:	2301      	movs	r3, #1
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800656a:	2300      	movs	r3, #0
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800656e:	f107 031c 	add.w	r3, r7, #28
 8006572:	4619      	mov	r1, r3
 8006574:	481a      	ldr	r0, [pc, #104]	; (80065e0 <MX_GPIO_Init+0x278>)
 8006576:	f003 fd03 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800657a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800657e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006580:	2301      	movs	r3, #1
 8006582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006584:	2300      	movs	r3, #0
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006588:	2300      	movs	r3, #0
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800658c:	f107 031c 	add.w	r3, r7, #28
 8006590:	4619      	mov	r1, r3
 8006592:	4814      	ldr	r0, [pc, #80]	; (80065e4 <MX_GPIO_Init+0x27c>)
 8006594:	f003 fcf4 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800659c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800659e:	2300      	movs	r3, #0
 80065a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065a6:	f107 031c 	add.w	r3, r7, #28
 80065aa:	4619      	mov	r1, r3
 80065ac:	480d      	ldr	r0, [pc, #52]	; (80065e4 <MX_GPIO_Init+0x27c>)
 80065ae:	f003 fce7 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80065b2:	239b      	movs	r3, #155	; 0x9b
 80065b4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065b6:	2300      	movs	r3, #0
 80065b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065ba:	2301      	movs	r3, #1
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065be:	f107 031c 	add.w	r3, r7, #28
 80065c2:	4619      	mov	r1, r3
 80065c4:	4806      	ldr	r0, [pc, #24]	; (80065e0 <MX_GPIO_Init+0x278>)
 80065c6:	f003 fcdb 	bl	8009f80 <HAL_GPIO_Init>

}
 80065ca:	bf00      	nop
 80065cc:	3730      	adds	r7, #48	; 0x30
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40023800 	.word	0x40023800
 80065d8:	40021000 	.word	0x40021000
 80065dc:	40020400 	.word	0x40020400
 80065e0:	40020c00 	.word	0x40020c00
 80065e4:	40020000 	.word	0x40020000
 80065e8:	40020800 	.word	0x40020800

080065ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80065f2:	e7fe      	b.n	80065f2 <Error_Handler+0x6>

080065f4 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 80065f8:	bf00      	nop
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800660a:	2300      	movs	r3, #0
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	4b10      	ldr	r3, [pc, #64]	; (8006650 <HAL_MspInit+0x4c>)
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	4a0f      	ldr	r2, [pc, #60]	; (8006650 <HAL_MspInit+0x4c>)
 8006614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006618:	6453      	str	r3, [r2, #68]	; 0x44
 800661a:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <HAL_MspInit+0x4c>)
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006622:	607b      	str	r3, [r7, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006626:	2300      	movs	r3, #0
 8006628:	603b      	str	r3, [r7, #0]
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <HAL_MspInit+0x4c>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	4a08      	ldr	r2, [pc, #32]	; (8006650 <HAL_MspInit+0x4c>)
 8006630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006634:	6413      	str	r3, [r2, #64]	; 0x40
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <HAL_MspInit+0x4c>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40023800 	.word	0x40023800

08006654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08c      	sub	sp, #48	; 0x30
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800665c:	f107 031c 	add.w	r3, r7, #28
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	609a      	str	r2, [r3, #8]
 8006668:	60da      	str	r2, [r3, #12]
 800666a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a4a      	ldr	r2, [pc, #296]	; (800679c <HAL_ADC_MspInit+0x148>)
 8006672:	4293      	cmp	r3, r2
 8006674:	f040 808e 	bne.w	8006794 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006678:	2300      	movs	r3, #0
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	4b48      	ldr	r3, [pc, #288]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	4a47      	ldr	r2, [pc, #284]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 8006682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006686:	6453      	str	r3, [r2, #68]	; 0x44
 8006688:	4b45      	ldr	r3, [pc, #276]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	4b41      	ldr	r3, [pc, #260]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669c:	4a40      	ldr	r2, [pc, #256]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 800669e:	f043 0304 	orr.w	r3, r3, #4
 80066a2:	6313      	str	r3, [r2, #48]	; 0x30
 80066a4:	4b3e      	ldr	r3, [pc, #248]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066b0:	2300      	movs	r3, #0
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	4b3a      	ldr	r3, [pc, #232]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	4a39      	ldr	r2, [pc, #228]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	6313      	str	r3, [r2, #48]	; 0x30
 80066c0:	4b37      	ldr	r3, [pc, #220]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	4b33      	ldr	r3, [pc, #204]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	4a32      	ldr	r2, [pc, #200]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 80066d6:	f043 0302 	orr.w	r3, r3, #2
 80066da:	6313      	str	r3, [r2, #48]	; 0x30
 80066dc:	4b30      	ldr	r3, [pc, #192]	; (80067a0 <HAL_ADC_MspInit+0x14c>)
 80066de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80066e8:	230f      	movs	r3, #15
 80066ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066ec:	2303      	movs	r3, #3
 80066ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f0:	2300      	movs	r3, #0
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066f4:	f107 031c 	add.w	r3, r7, #28
 80066f8:	4619      	mov	r1, r3
 80066fa:	482a      	ldr	r0, [pc, #168]	; (80067a4 <HAL_ADC_MspInit+0x150>)
 80066fc:	f003 fc40 	bl	8009f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006700:	23ff      	movs	r3, #255	; 0xff
 8006702:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006704:	2303      	movs	r3, #3
 8006706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006708:	2300      	movs	r3, #0
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800670c:	f107 031c 	add.w	r3, r7, #28
 8006710:	4619      	mov	r1, r3
 8006712:	4825      	ldr	r0, [pc, #148]	; (80067a8 <HAL_ADC_MspInit+0x154>)
 8006714:	f003 fc34 	bl	8009f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006718:	2303      	movs	r3, #3
 800671a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800671c:	2303      	movs	r3, #3
 800671e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006720:	2300      	movs	r3, #0
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006724:	f107 031c 	add.w	r3, r7, #28
 8006728:	4619      	mov	r1, r3
 800672a:	4820      	ldr	r0, [pc, #128]	; (80067ac <HAL_ADC_MspInit+0x158>)
 800672c:	f003 fc28 	bl	8009f80 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006730:	4b1f      	ldr	r3, [pc, #124]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 8006732:	4a20      	ldr	r2, [pc, #128]	; (80067b4 <HAL_ADC_MspInit+0x160>)
 8006734:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 8006738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800673c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800673e:	4b1c      	ldr	r3, [pc, #112]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 8006740:	2200      	movs	r2, #0
 8006742:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006744:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 8006746:	2200      	movs	r2, #0
 8006748:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800674a:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 800674c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006750:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 8006754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006758:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800675a:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 800675c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006760:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006762:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 8006764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006768:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800676a:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 800676c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006770:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006772:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 8006774:	2200      	movs	r2, #0
 8006776:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006778:	480d      	ldr	r0, [pc, #52]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 800677a:	f003 f865 	bl	8009848 <HAL_DMA_Init>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006784:	f7ff ff32 	bl	80065ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
 800678e:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <HAL_ADC_MspInit+0x15c>)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006794:	bf00      	nop
 8006796:	3730      	adds	r7, #48	; 0x30
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	40012100 	.word	0x40012100
 80067a0:	40023800 	.word	0x40023800
 80067a4:	40020800 	.word	0x40020800
 80067a8:	40020000 	.word	0x40020000
 80067ac:	40020400 	.word	0x40020400
 80067b0:	2003ecc0 	.word	0x2003ecc0
 80067b4:	40026440 	.word	0x40026440

080067b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08c      	sub	sp, #48	; 0x30
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067c0:	f107 031c 	add.w	r3, r7, #28
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	605a      	str	r2, [r3, #4]
 80067ca:	609a      	str	r2, [r3, #8]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a32      	ldr	r2, [pc, #200]	; (80068a0 <HAL_I2C_MspInit+0xe8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d12c      	bne.n	8006834 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067da:	2300      	movs	r3, #0
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	4b31      	ldr	r3, [pc, #196]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	4a30      	ldr	r2, [pc, #192]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 80067e4:	f043 0302 	orr.w	r3, r3, #2
 80067e8:	6313      	str	r3, [r2, #48]	; 0x30
 80067ea:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80067f6:	23c0      	movs	r3, #192	; 0xc0
 80067f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067fa:	2312      	movs	r3, #18
 80067fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067fe:	2301      	movs	r3, #1
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006802:	2303      	movs	r3, #3
 8006804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006806:	2304      	movs	r3, #4
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800680a:	f107 031c 	add.w	r3, r7, #28
 800680e:	4619      	mov	r1, r3
 8006810:	4825      	ldr	r0, [pc, #148]	; (80068a8 <HAL_I2C_MspInit+0xf0>)
 8006812:	f003 fbb5 	bl	8009f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	4b22      	ldr	r3, [pc, #136]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	4a21      	ldr	r2, [pc, #132]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 8006820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006824:	6413      	str	r3, [r2, #64]	; 0x40
 8006826:	4b1f      	ldr	r3, [pc, #124]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006832:	e031      	b.n	8006898 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1c      	ldr	r2, [pc, #112]	; (80068ac <HAL_I2C_MspInit+0xf4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d12c      	bne.n	8006898 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	4b18      	ldr	r3, [pc, #96]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	4a17      	ldr	r2, [pc, #92]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 8006848:	f043 0302 	orr.w	r3, r3, #2
 800684c:	6313      	str	r3, [r2, #48]	; 0x30
 800684e:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800685a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800685e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006860:	2312      	movs	r3, #18
 8006862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006864:	2301      	movs	r3, #1
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006868:	2303      	movs	r3, #3
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800686c:	2304      	movs	r3, #4
 800686e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006870:	f107 031c 	add.w	r3, r7, #28
 8006874:	4619      	mov	r1, r3
 8006876:	480c      	ldr	r0, [pc, #48]	; (80068a8 <HAL_I2C_MspInit+0xf0>)
 8006878:	f003 fb82 	bl	8009f80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	4a07      	ldr	r2, [pc, #28]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 8006886:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800688a:	6413      	str	r3, [r2, #64]	; 0x40
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <HAL_I2C_MspInit+0xec>)
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	68fb      	ldr	r3, [r7, #12]
}
 8006898:	bf00      	nop
 800689a:	3730      	adds	r7, #48	; 0x30
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40005400 	.word	0x40005400
 80068a4:	40023800 	.word	0x40023800
 80068a8:	40020400 	.word	0x40020400
 80068ac:	40005800 	.word	0x40005800

080068b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	; 0x28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a69      	ldr	r2, [pc, #420]	; (8006a74 <HAL_SD_MspInit+0x1c4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	f040 80cb 	bne.w	8006a6a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	4b67      	ldr	r3, [pc, #412]	; (8006a78 <HAL_SD_MspInit+0x1c8>)
 80068da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068dc:	4a66      	ldr	r2, [pc, #408]	; (8006a78 <HAL_SD_MspInit+0x1c8>)
 80068de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068e2:	6453      	str	r3, [r2, #68]	; 0x44
 80068e4:	4b64      	ldr	r3, [pc, #400]	; (8006a78 <HAL_SD_MspInit+0x1c8>)
 80068e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	4b60      	ldr	r3, [pc, #384]	; (8006a78 <HAL_SD_MspInit+0x1c8>)
 80068f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f8:	4a5f      	ldr	r2, [pc, #380]	; (8006a78 <HAL_SD_MspInit+0x1c8>)
 80068fa:	f043 0304 	orr.w	r3, r3, #4
 80068fe:	6313      	str	r3, [r2, #48]	; 0x30
 8006900:	4b5d      	ldr	r3, [pc, #372]	; (8006a78 <HAL_SD_MspInit+0x1c8>)
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800690c:	2300      	movs	r3, #0
 800690e:	60bb      	str	r3, [r7, #8]
 8006910:	4b59      	ldr	r3, [pc, #356]	; (8006a78 <HAL_SD_MspInit+0x1c8>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	4a58      	ldr	r2, [pc, #352]	; (8006a78 <HAL_SD_MspInit+0x1c8>)
 8006916:	f043 0308 	orr.w	r3, r3, #8
 800691a:	6313      	str	r3, [r2, #48]	; 0x30
 800691c:	4b56      	ldr	r3, [pc, #344]	; (8006a78 <HAL_SD_MspInit+0x1c8>)
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006928:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800692c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800692e:	2302      	movs	r3, #2
 8006930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006936:	2303      	movs	r3, #3
 8006938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800693a:	230c      	movs	r3, #12
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800693e:	f107 0314 	add.w	r3, r7, #20
 8006942:	4619      	mov	r1, r3
 8006944:	484d      	ldr	r0, [pc, #308]	; (8006a7c <HAL_SD_MspInit+0x1cc>)
 8006946:	f003 fb1b 	bl	8009f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800694a:	2304      	movs	r3, #4
 800694c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800694e:	2302      	movs	r3, #2
 8006950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006956:	2303      	movs	r3, #3
 8006958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800695a:	230c      	movs	r3, #12
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800695e:	f107 0314 	add.w	r3, r7, #20
 8006962:	4619      	mov	r1, r3
 8006964:	4846      	ldr	r0, [pc, #280]	; (8006a80 <HAL_SD_MspInit+0x1d0>)
 8006966:	f003 fb0b 	bl	8009f80 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800696a:	4b46      	ldr	r3, [pc, #280]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 800696c:	4a46      	ldr	r2, [pc, #280]	; (8006a88 <HAL_SD_MspInit+0x1d8>)
 800696e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006970:	4b44      	ldr	r3, [pc, #272]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 8006972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006976:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006978:	4b42      	ldr	r3, [pc, #264]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 800697a:	2200      	movs	r2, #0
 800697c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800697e:	4b41      	ldr	r3, [pc, #260]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 8006980:	2200      	movs	r2, #0
 8006982:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006984:	4b3f      	ldr	r3, [pc, #252]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 8006986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800698a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800698c:	4b3d      	ldr	r3, [pc, #244]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 800698e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006992:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006994:	4b3b      	ldr	r3, [pc, #236]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 8006996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800699a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800699c:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 800699e:	2220      	movs	r2, #32
 80069a0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069a2:	4b38      	ldr	r3, [pc, #224]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 80069a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80069a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 80069ac:	2204      	movs	r2, #4
 80069ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80069b0:	4b34      	ldr	r3, [pc, #208]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 80069b2:	2203      	movs	r2, #3
 80069b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80069b6:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 80069b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80069bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80069be:	4b31      	ldr	r3, [pc, #196]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 80069c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80069c6:	482f      	ldr	r0, [pc, #188]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 80069c8:	f002 ff3e 	bl	8009848 <HAL_DMA_Init>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80069d2:	f7ff fe0b 	bl	80065ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 80069da:	641a      	str	r2, [r3, #64]	; 0x40
 80069dc:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <HAL_SD_MspInit+0x1d4>)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80069e2:	4b2a      	ldr	r3, [pc, #168]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 80069e4:	4a2a      	ldr	r2, [pc, #168]	; (8006a90 <HAL_SD_MspInit+0x1e0>)
 80069e6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80069e8:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 80069ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069ee:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069f0:	4b26      	ldr	r3, [pc, #152]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 80069f2:	2240      	movs	r2, #64	; 0x40
 80069f4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069f6:	4b25      	ldr	r3, [pc, #148]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069fc:	4b23      	ldr	r3, [pc, #140]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 80069fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a02:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a04:	4b21      	ldr	r3, [pc, #132]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a0a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a12:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006a14:	4b1d      	ldr	r3, [pc, #116]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a16:	2220      	movs	r2, #32
 8006a18:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006a1a:	4b1c      	ldr	r3, [pc, #112]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006a20:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a22:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a24:	2204      	movs	r2, #4
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a28:	4b18      	ldr	r3, [pc, #96]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006a2e:	4b17      	ldr	r3, [pc, #92]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a34:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006a36:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006a3e:	4813      	ldr	r0, [pc, #76]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a40:	f002 ff02 	bl	8009848 <HAL_DMA_Init>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006a4a:	f7ff fdcf 	bl	80065ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a0e      	ldr	r2, [pc, #56]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a52:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a54:	4a0d      	ldr	r2, [pc, #52]	; (8006a8c <HAL_SD_MspInit+0x1dc>)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	2031      	movs	r0, #49	; 0x31
 8006a60:	f002 febb 	bl	80097da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006a64:	2031      	movs	r0, #49	; 0x31
 8006a66:	f002 fed4 	bl	8009812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006a6a:	bf00      	nop
 8006a6c:	3728      	adds	r7, #40	; 0x28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40023800 	.word	0x40023800
 8006a7c:	40020800 	.word	0x40020800
 8006a80:	40020c00 	.word	0x40020c00
 8006a84:	2003e7e8 	.word	0x2003e7e8
 8006a88:	40026458 	.word	0x40026458
 8006a8c:	2003eb1c 	.word	0x2003eb1c
 8006a90:	400264a0 	.word	0x400264a0

08006a94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a9c:	f107 0314 	add.w	r3, r7, #20
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	605a      	str	r2, [r3, #4]
 8006aa6:	609a      	str	r2, [r3, #8]
 8006aa8:	60da      	str	r2, [r3, #12]
 8006aaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <HAL_SPI_MspInit+0x84>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d12c      	bne.n	8006b10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	4b18      	ldr	r3, [pc, #96]	; (8006b1c <HAL_SPI_MspInit+0x88>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	4a17      	ldr	r2, [pc, #92]	; (8006b1c <HAL_SPI_MspInit+0x88>)
 8006ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ac6:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <HAL_SPI_MspInit+0x88>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <HAL_SPI_MspInit+0x88>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	4a10      	ldr	r2, [pc, #64]	; (8006b1c <HAL_SPI_MspInit+0x88>)
 8006adc:	f043 0302 	orr.w	r3, r3, #2
 8006ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <HAL_SPI_MspInit+0x88>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006aee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af4:	2302      	movs	r3, #2
 8006af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006afc:	2303      	movs	r3, #3
 8006afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b00:	2305      	movs	r3, #5
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4805      	ldr	r0, [pc, #20]	; (8006b20 <HAL_SPI_MspInit+0x8c>)
 8006b0c:	f003 fa38 	bl	8009f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006b10:	bf00      	nop
 8006b12:	3728      	adds	r7, #40	; 0x28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40003800 	.word	0x40003800
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	40020400 	.word	0x40020400

08006b24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08c      	sub	sp, #48	; 0x30
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b2c:	f107 031c 	add.w	r3, r7, #28
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	605a      	str	r2, [r3, #4]
 8006b36:	609a      	str	r2, [r3, #8]
 8006b38:	60da      	str	r2, [r3, #12]
 8006b3a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d12d      	bne.n	8006ba2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006b46:	2300      	movs	r3, #0
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	4b2c      	ldr	r3, [pc, #176]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	4a2b      	ldr	r2, [pc, #172]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	6453      	str	r3, [r2, #68]	; 0x44
 8006b56:	4b29      	ldr	r3, [pc, #164]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	4b25      	ldr	r3, [pc, #148]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	4a24      	ldr	r2, [pc, #144]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006b6c:	f043 0310 	orr.w	r3, r3, #16
 8006b70:	6313      	str	r3, [r2, #48]	; 0x30
 8006b72:	4b22      	ldr	r3, [pc, #136]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	f003 0310 	and.w	r3, r3, #16
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006b7e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b84:	2302      	movs	r3, #2
 8006b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006b90:	2301      	movs	r3, #1
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b94:	f107 031c 	add.w	r3, r7, #28
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4819      	ldr	r0, [pc, #100]	; (8006c00 <HAL_TIM_PWM_MspInit+0xdc>)
 8006b9c:	f003 f9f0 	bl	8009f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006ba0:	e026      	b.n	8006bf0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a17      	ldr	r2, [pc, #92]	; (8006c04 <HAL_TIM_PWM_MspInit+0xe0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d10e      	bne.n	8006bca <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	4b12      	ldr	r3, [pc, #72]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006bb6:	f043 0302 	orr.w	r3, r3, #2
 8006bba:	6413      	str	r3, [r2, #64]	; 0x40
 8006bbc:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	613b      	str	r3, [r7, #16]
 8006bc6:	693b      	ldr	r3, [r7, #16]
}
 8006bc8:	e012      	b.n	8006bf0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a0e      	ldr	r2, [pc, #56]	; (8006c08 <HAL_TIM_PWM_MspInit+0xe4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d10d      	bne.n	8006bf0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	4a07      	ldr	r2, [pc, #28]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006bde:	f043 0304 	orr.w	r3, r3, #4
 8006be2:	6413      	str	r3, [r2, #64]	; 0x40
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	68fb      	ldr	r3, [r7, #12]
}
 8006bf0:	bf00      	nop
 8006bf2:	3730      	adds	r7, #48	; 0x30
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40023800 	.word	0x40023800
 8006c00:	40021000 	.word	0x40021000
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800

08006c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a3e      	ldr	r2, [pc, #248]	; (8006d14 <HAL_TIM_Base_MspInit+0x108>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d116      	bne.n	8006c4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	4b3d      	ldr	r3, [pc, #244]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	4a3c      	ldr	r2, [pc, #240]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006c28:	f043 0310 	orr.w	r3, r3, #16
 8006c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c2e:	4b3a      	ldr	r3, [pc, #232]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	2036      	movs	r0, #54	; 0x36
 8006c40:	f002 fdcb 	bl	80097da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006c44:	2036      	movs	r0, #54	; 0x36
 8006c46:	f002 fde4 	bl	8009812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006c4a:	e05e      	b.n	8006d0a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a32      	ldr	r2, [pc, #200]	; (8006d1c <HAL_TIM_Base_MspInit+0x110>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d116      	bne.n	8006c84 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006c56:	2300      	movs	r3, #0
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	4b2f      	ldr	r3, [pc, #188]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	4a2e      	ldr	r2, [pc, #184]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006c60:	f043 0320 	orr.w	r3, r3, #32
 8006c64:	6413      	str	r3, [r2, #64]	; 0x40
 8006c66:	4b2c      	ldr	r3, [pc, #176]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	61bb      	str	r3, [r7, #24]
 8006c70:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006c72:	2200      	movs	r2, #0
 8006c74:	2100      	movs	r1, #0
 8006c76:	2037      	movs	r0, #55	; 0x37
 8006c78:	f002 fdaf 	bl	80097da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006c7c:	2037      	movs	r0, #55	; 0x37
 8006c7e:	f002 fdc8 	bl	8009812 <HAL_NVIC_EnableIRQ>
}
 8006c82:	e042      	b.n	8006d0a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a25      	ldr	r2, [pc, #148]	; (8006d20 <HAL_TIM_Base_MspInit+0x114>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d10e      	bne.n	8006cac <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c8e:	2300      	movs	r3, #0
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	4b21      	ldr	r3, [pc, #132]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	697b      	ldr	r3, [r7, #20]
}
 8006caa:	e02e      	b.n	8006d0a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1c      	ldr	r2, [pc, #112]	; (8006d24 <HAL_TIM_Base_MspInit+0x118>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d10e      	bne.n	8006cd4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	4a16      	ldr	r2, [pc, #88]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	693b      	ldr	r3, [r7, #16]
}
 8006cd2:	e01a      	b.n	8006d0a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <HAL_TIM_Base_MspInit+0x11c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d115      	bne.n	8006d0a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	4a0c      	ldr	r2, [pc, #48]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	6413      	str	r3, [r2, #64]	; 0x40
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <HAL_TIM_Base_MspInit+0x10c>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	202c      	movs	r0, #44	; 0x2c
 8006d00:	f002 fd6b 	bl	80097da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006d04:	202c      	movs	r0, #44	; 0x2c
 8006d06:	f002 fd84 	bl	8009812 <HAL_NVIC_EnableIRQ>
}
 8006d0a:	bf00      	nop
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40001000 	.word	0x40001000
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	40001400 	.word	0x40001400
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800
 8006d28:	40001c00 	.word	0x40001c00

08006d2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d34:	f107 0314 	add.w	r3, r7, #20
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	609a      	str	r2, [r3, #8]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a1d      	ldr	r2, [pc, #116]	; (8006dc0 <HAL_TIM_Encoder_MspInit+0x94>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d133      	bne.n	8006db6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d56:	4a1b      	ldr	r2, [pc, #108]	; (8006dc4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d58:	f043 0302 	orr.w	r3, r3, #2
 8006d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d5e:	4b19      	ldr	r3, [pc, #100]	; (8006dc4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	4b15      	ldr	r3, [pc, #84]	; (8006dc4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	4a14      	ldr	r2, [pc, #80]	; (8006dc4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d74:	f043 0304 	orr.w	r3, r3, #4
 8006d78:	6313      	str	r3, [r2, #48]	; 0x30
 8006d7a:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d86:	23c0      	movs	r3, #192	; 0xc0
 8006d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d92:	2300      	movs	r3, #0
 8006d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006d96:	2303      	movs	r3, #3
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d9a:	f107 0314 	add.w	r3, r7, #20
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4809      	ldr	r0, [pc, #36]	; (8006dc8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006da2:	f003 f8ed 	bl	8009f80 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006da6:	2200      	movs	r2, #0
 8006da8:	2100      	movs	r1, #0
 8006daa:	202c      	movs	r0, #44	; 0x2c
 8006dac:	f002 fd15 	bl	80097da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006db0:	202c      	movs	r0, #44	; 0x2c
 8006db2:	f002 fd2e 	bl	8009812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006db6:	bf00      	nop
 8006db8:	3728      	adds	r7, #40	; 0x28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40010400 	.word	0x40010400
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	40020800 	.word	0x40020800

08006dcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08c      	sub	sp, #48	; 0x30
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd4:	f107 031c 	add.w	r3, r7, #28
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	605a      	str	r2, [r3, #4]
 8006dde:	609a      	str	r2, [r3, #8]
 8006de0:	60da      	str	r2, [r3, #12]
 8006de2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a5c      	ldr	r2, [pc, #368]	; (8006f5c <HAL_TIM_MspPostInit+0x190>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d11f      	bne.n	8006e2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dee:	2300      	movs	r3, #0
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	4b5b      	ldr	r3, [pc, #364]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	4a5a      	ldr	r2, [pc, #360]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006df8:	f043 0310 	orr.w	r3, r3, #16
 8006dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006dfe:	4b58      	ldr	r3, [pc, #352]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e10:	2302      	movs	r3, #2
 8006e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e20:	f107 031c 	add.w	r3, r7, #28
 8006e24:	4619      	mov	r1, r3
 8006e26:	484f      	ldr	r0, [pc, #316]	; (8006f64 <HAL_TIM_MspPostInit+0x198>)
 8006e28:	f003 f8aa 	bl	8009f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006e2c:	e091      	b.n	8006f52 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a4d      	ldr	r2, [pc, #308]	; (8006f68 <HAL_TIM_MspPostInit+0x19c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d11e      	bne.n	8006e76 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	4b48      	ldr	r3, [pc, #288]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	4a47      	ldr	r2, [pc, #284]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006e42:	f043 0302 	orr.w	r3, r3, #2
 8006e46:	6313      	str	r3, [r2, #48]	; 0x30
 8006e48:	4b45      	ldr	r3, [pc, #276]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006e54:	2330      	movs	r3, #48	; 0x30
 8006e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e60:	2300      	movs	r3, #0
 8006e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006e64:	2302      	movs	r3, #2
 8006e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e68:	f107 031c 	add.w	r3, r7, #28
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	483f      	ldr	r0, [pc, #252]	; (8006f6c <HAL_TIM_MspPostInit+0x1a0>)
 8006e70:	f003 f886 	bl	8009f80 <HAL_GPIO_Init>
}
 8006e74:	e06d      	b.n	8006f52 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a3d      	ldr	r2, [pc, #244]	; (8006f70 <HAL_TIM_MspPostInit+0x1a4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d11f      	bne.n	8006ec0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]
 8006e84:	4b36      	ldr	r3, [pc, #216]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	4a35      	ldr	r2, [pc, #212]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006e8a:	f043 0308 	orr.w	r3, r3, #8
 8006e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e90:	4b33      	ldr	r3, [pc, #204]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006e9c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006eb2:	f107 031c 	add.w	r3, r7, #28
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	482e      	ldr	r0, [pc, #184]	; (8006f74 <HAL_TIM_MspPostInit+0x1a8>)
 8006eba:	f003 f861 	bl	8009f80 <HAL_GPIO_Init>
}
 8006ebe:	e048      	b.n	8006f52 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2c      	ldr	r2, [pc, #176]	; (8006f78 <HAL_TIM_MspPostInit+0x1ac>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d11f      	bne.n	8006f0a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	4b24      	ldr	r3, [pc, #144]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	4a23      	ldr	r2, [pc, #140]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006ed4:	f043 0302 	orr.w	r3, r3, #2
 8006ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eda:	4b21      	ldr	r3, [pc, #132]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eec:	2302      	movs	r3, #2
 8006eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006efc:	f107 031c 	add.w	r3, r7, #28
 8006f00:	4619      	mov	r1, r3
 8006f02:	481a      	ldr	r0, [pc, #104]	; (8006f6c <HAL_TIM_MspPostInit+0x1a0>)
 8006f04:	f003 f83c 	bl	8009f80 <HAL_GPIO_Init>
}
 8006f08:	e023      	b.n	8006f52 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1b      	ldr	r2, [pc, #108]	; (8006f7c <HAL_TIM_MspPostInit+0x1b0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d11e      	bne.n	8006f52 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f14:	2300      	movs	r3, #0
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	4a10      	ldr	r2, [pc, #64]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006f1e:	f043 0302 	orr.w	r3, r3, #2
 8006f22:	6313      	str	r3, [r2, #48]	; 0x30
 8006f24:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <HAL_TIM_MspPostInit+0x194>)
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	60bb      	str	r3, [r7, #8]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f36:	2302      	movs	r3, #2
 8006f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006f42:	2303      	movs	r3, #3
 8006f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f46:	f107 031c 	add.w	r3, r7, #28
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4807      	ldr	r0, [pc, #28]	; (8006f6c <HAL_TIM_MspPostInit+0x1a0>)
 8006f4e:	f003 f817 	bl	8009f80 <HAL_GPIO_Init>
}
 8006f52:	bf00      	nop
 8006f54:	3730      	adds	r7, #48	; 0x30
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40023800 	.word	0x40023800
 8006f64:	40021000 	.word	0x40021000
 8006f68:	40000400 	.word	0x40000400
 8006f6c:	40020400 	.word	0x40020400
 8006f70:	40000800 	.word	0x40000800
 8006f74:	40020c00 	.word	0x40020c00
 8006f78:	40014400 	.word	0x40014400
 8006f7c:	40014800 	.word	0x40014800

08006f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	; 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f88:	f107 0314 	add.w	r3, r7, #20
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	605a      	str	r2, [r3, #4]
 8006f92:	609a      	str	r2, [r3, #8]
 8006f94:	60da      	str	r2, [r3, #12]
 8006f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	; (8007004 <HAL_UART_MspInit+0x84>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d12b      	bne.n	8006ffa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	4b18      	ldr	r3, [pc, #96]	; (8007008 <HAL_UART_MspInit+0x88>)
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	4a17      	ldr	r2, [pc, #92]	; (8007008 <HAL_UART_MspInit+0x88>)
 8006fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fb2:	4b15      	ldr	r3, [pc, #84]	; (8007008 <HAL_UART_MspInit+0x88>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <HAL_UART_MspInit+0x88>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	4a10      	ldr	r2, [pc, #64]	; (8007008 <HAL_UART_MspInit+0x88>)
 8006fc8:	f043 0308 	orr.w	r3, r3, #8
 8006fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fce:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <HAL_UART_MspInit+0x88>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006fda:	2360      	movs	r3, #96	; 0x60
 8006fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006fea:	2307      	movs	r3, #7
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fee:	f107 0314 	add.w	r3, r7, #20
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4805      	ldr	r0, [pc, #20]	; (800700c <HAL_UART_MspInit+0x8c>)
 8006ff6:	f002 ffc3 	bl	8009f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006ffa:	bf00      	nop
 8006ffc:	3728      	adds	r7, #40	; 0x28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40004400 	.word	0x40004400
 8007008:	40023800 	.word	0x40023800
 800700c:	40020c00 	.word	0x40020c00

08007010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007014:	e7fe      	b.n	8007014 <NMI_Handler+0x4>

08007016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007016:	b480      	push	{r7}
 8007018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800701a:	e7fe      	b.n	800701a <HardFault_Handler+0x4>

0800701c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007020:	e7fe      	b.n	8007020 <MemManage_Handler+0x4>

08007022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007022:	b480      	push	{r7}
 8007024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007026:	e7fe      	b.n	8007026 <BusFault_Handler+0x4>

08007028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800702c:	e7fe      	b.n	800702c <UsageFault_Handler+0x4>

0800702e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800702e:	b480      	push	{r7}
 8007030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007032:	bf00      	nop
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007040:	bf00      	nop
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800704a:	b480      	push	{r7}
 800704c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800704e:	bf00      	nop
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800705c:	f001 fe9c 	bl	8008d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007060:	bf00      	nop
 8007062:	bd80      	pop	{r7, pc}

08007064 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007068:	4803      	ldr	r0, [pc, #12]	; (8007078 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800706a:	f007 f96c 	bl	800e346 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800706e:	4803      	ldr	r0, [pc, #12]	; (800707c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007070:	f007 f969 	bl	800e346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007074:	bf00      	nop
 8007076:	bd80      	pop	{r7, pc}
 8007078:	2003e8a0 	.word	0x2003e8a0
 800707c:	2003ea9c 	.word	0x2003ea9c

08007080 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007084:	4802      	ldr	r0, [pc, #8]	; (8007090 <SDIO_IRQHandler+0x10>)
 8007086:	f005 fa05 	bl	800c494 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	2003ebfc 	.word	0x2003ebfc

08007094 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007098:	4802      	ldr	r0, [pc, #8]	; (80070a4 <TIM6_DAC_IRQHandler+0x10>)
 800709a:	f007 f954 	bl	800e346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800709e:	bf00      	nop
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	2003eb7c 	.word	0x2003eb7c

080070a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80070ac:	4802      	ldr	r0, [pc, #8]	; (80070b8 <TIM7_IRQHandler+0x10>)
 80070ae:	f007 f94a 	bl	800e346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80070b2:	bf00      	nop
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	2003ed20 	.word	0x2003ed20

080070bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80070c0:	4802      	ldr	r0, [pc, #8]	; (80070cc <DMA2_Stream2_IRQHandler+0x10>)
 80070c2:	f002 fce9 	bl	8009a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80070c6:	bf00      	nop
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	2003ecc0 	.word	0x2003ecc0

080070d0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80070d4:	4802      	ldr	r0, [pc, #8]	; (80070e0 <DMA2_Stream3_IRQHandler+0x10>)
 80070d6:	f002 fcdf 	bl	8009a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	2003e7e8 	.word	0x2003e7e8

080070e4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80070e8:	4802      	ldr	r0, [pc, #8]	; (80070f4 <DMA2_Stream6_IRQHandler+0x10>)
 80070ea:	f002 fcd5 	bl	8009a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80070ee:	bf00      	nop
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	2003eb1c 	.word	0x2003eb1c

080070f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007100:	4a14      	ldr	r2, [pc, #80]	; (8007154 <_sbrk+0x5c>)
 8007102:	4b15      	ldr	r3, [pc, #84]	; (8007158 <_sbrk+0x60>)
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800710c:	4b13      	ldr	r3, [pc, #76]	; (800715c <_sbrk+0x64>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007114:	4b11      	ldr	r3, [pc, #68]	; (800715c <_sbrk+0x64>)
 8007116:	4a12      	ldr	r2, [pc, #72]	; (8007160 <_sbrk+0x68>)
 8007118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800711a:	4b10      	ldr	r3, [pc, #64]	; (800715c <_sbrk+0x64>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4413      	add	r3, r2
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	429a      	cmp	r2, r3
 8007126:	d207      	bcs.n	8007138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007128:	f00d fba0 	bl	801486c <__errno>
 800712c:	4602      	mov	r2, r0
 800712e:	230c      	movs	r3, #12
 8007130:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007132:	f04f 33ff 	mov.w	r3, #4294967295
 8007136:	e009      	b.n	800714c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007138:	4b08      	ldr	r3, [pc, #32]	; (800715c <_sbrk+0x64>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800713e:	4b07      	ldr	r3, [pc, #28]	; (800715c <_sbrk+0x64>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4413      	add	r3, r2
 8007146:	4a05      	ldr	r2, [pc, #20]	; (800715c <_sbrk+0x64>)
 8007148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800714a:	68fb      	ldr	r3, [r7, #12]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20050000 	.word	0x20050000
 8007158:	00000800 	.word	0x00000800
 800715c:	200002bc 	.word	0x200002bc
 8007160:	20040e70 	.word	0x20040e70

08007164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007168:	4b08      	ldr	r3, [pc, #32]	; (800718c <SystemInit+0x28>)
 800716a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716e:	4a07      	ldr	r2, [pc, #28]	; (800718c <SystemInit+0x28>)
 8007170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007178:	4b04      	ldr	r3, [pc, #16]	; (800718c <SystemInit+0x28>)
 800717a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800717e:	609a      	str	r2, [r3, #8]
#endif
}
 8007180:	bf00      	nop
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	e000ed00 	.word	0xe000ed00

08007190 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007190:	b598      	push	{r3, r4, r7, lr}
 8007192:	af00      	add	r7, sp, #0
	lcd_init();
 8007194:	f7f9 ff40 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007198:	483a      	ldr	r0, [pc, #232]	; (8007284 <cppInit+0xf4>)
 800719a:	f7fd fdef 	bl	8004d7c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800719e:	2064      	movs	r0, #100	; 0x64
 80071a0:	f001 fe1a 	bl	8008dd8 <HAL_Delay>
	power_sensor.updateValues();
 80071a4:	4837      	ldr	r0, [pc, #220]	; (8007284 <cppInit+0xf4>)
 80071a6:	f7fd fdf7 	bl	8004d98 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80071aa:	f7f9 ff79 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80071ae:	2100      	movs	r1, #0
 80071b0:	2000      	movs	r0, #0
 80071b2:	f7f9 ff85 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80071b6:	4834      	ldr	r0, [pc, #208]	; (8007288 <cppInit+0xf8>)
 80071b8:	f7f9 ffac 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80071bc:	2101      	movs	r1, #1
 80071be:	2000      	movs	r0, #0
 80071c0:	f7f9 ff7e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80071c4:	482f      	ldr	r0, [pc, #188]	; (8007284 <cppInit+0xf4>)
 80071c6:	f7fd fe11 	bl	8004dec <_ZN11PowerSensor17getButteryVoltageEv>
 80071ca:	ee10 3a10 	vmov	r3, s0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7f9 f9d2 	bl	8000578 <__aeabi_f2d>
 80071d4:	4603      	mov	r3, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	461a      	mov	r2, r3
 80071da:	4623      	mov	r3, r4
 80071dc:	482b      	ldr	r0, [pc, #172]	; (800728c <cppInit+0xfc>)
 80071de:	f7f9 ff99 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80071e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071e6:	f001 fdf7 	bl	8008dd8 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80071ea:	4829      	ldr	r0, [pc, #164]	; (8007290 <cppInit+0x100>)
 80071ec:	f7fd f80a 	bl	8004204 <_ZN6Logger10sdCardInitEv>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <cppInit+0x76>
		led.fullColor('G');
 80071f6:	2147      	movs	r1, #71	; 0x47
 80071f8:	4826      	ldr	r0, [pc, #152]	; (8007294 <cppInit+0x104>)
 80071fa:	f7fa fe7f 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80071fe:	2064      	movs	r0, #100	; 0x64
 8007200:	f001 fdea 	bl	8008dd8 <HAL_Delay>
 8007204:	e006      	b.n	8007214 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007206:	2152      	movs	r1, #82	; 0x52
 8007208:	4822      	ldr	r0, [pc, #136]	; (8007294 <cppInit+0x104>)
 800720a:	f7fa fe77 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800720e:	2064      	movs	r0, #100	; 0x64
 8007210:	f001 fde2 	bl	8008dd8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007214:	4820      	ldr	r0, [pc, #128]	; (8007298 <cppInit+0x108>)
 8007216:	f7fa ffcd 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800721a:	4820      	ldr	r0, [pc, #128]	; (800729c <cppInit+0x10c>)
 800721c:	f7fd fa80 	bl	8004720 <_ZN5Motor4initEv>
	encoder.init();
 8007220:	481f      	ldr	r0, [pc, #124]	; (80072a0 <cppInit+0x110>)
 8007222:	f7f9 ffc3 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8007226:	481f      	ldr	r0, [pc, #124]	; (80072a4 <cppInit+0x114>)
 8007228:	f7fa fc26 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 800722c:	481e      	ldr	r0, [pc, #120]	; (80072a8 <cppInit+0x118>)
 800722e:	f7fc fa21 	bl	8003674 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007232:	4819      	ldr	r0, [pc, #100]	; (8007298 <cppInit+0x108>)
 8007234:	f7fb f8fe 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800723c:	f001 fdcc 	bl	8008dd8 <HAL_Delay>

	led.fullColor('M');
 8007240:	214d      	movs	r1, #77	; 0x4d
 8007242:	4814      	ldr	r0, [pc, #80]	; (8007294 <cppInit+0x104>)
 8007244:	f7fa fe5a 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 8007248:	4816      	ldr	r0, [pc, #88]	; (80072a4 <cppInit+0x114>)
 800724a:	f7fa fcdf 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 800724e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80072ac <cppInit+0x11c>
 8007252:	eddf 0a17 	vldr	s1, [pc, #92]	; 80072b0 <cppInit+0x120>
 8007256:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80072b4 <cppInit+0x124>
 800725a:	4817      	ldr	r0, [pc, #92]	; (80072b8 <cppInit+0x128>)
 800725c:	f7fe f9cc 	bl	80055f8 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8007260:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80072bc <cppInit+0x12c>
 8007264:	eddf 0a16 	vldr	s1, [pc, #88]	; 80072c0 <cppInit+0x130>
 8007268:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80072c4 <cppInit+0x134>
 800726c:	4812      	ldr	r0, [pc, #72]	; (80072b8 <cppInit+0x128>)
 800726e:	f7fe f9dc 	bl	800562a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8007272:	4815      	ldr	r0, [pc, #84]	; (80072c8 <cppInit+0x138>)
 8007274:	f7fd fc8c 	bl	8004b90 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007278:	4814      	ldr	r0, [pc, #80]	; (80072cc <cppInit+0x13c>)
 800727a:	f7fd fd23 	bl	8004cc4 <_ZN13PathFollowing4initEv>

}
 800727e:	bf00      	nop
 8007280:	bd98      	pop	{r3, r4, r7, pc}
 8007282:	bf00      	nop
 8007284:	200005d0 	.word	0x200005d0
 8007288:	08019074 	.word	0x08019074
 800728c:	0801907c 	.word	0x0801907c
 8007290:	200005f0 	.word	0x200005f0
 8007294:	200005cc 	.word	0x200005cc
 8007298:	200002c0 	.word	0x200002c0
 800729c:	200005c8 	.word	0x200005c8
 80072a0:	20017d00 	.word	0x20017d00
 80072a4:	200005dc 	.word	0x200005dc
 80072a8:	20017da0 	.word	0x20017da0
 80072ac:	3cceca68 	.word	0x3cceca68
 80072b0:	4180f06f 	.word	0x4180f06f
 80072b4:	3fea2d0e 	.word	0x3fea2d0e
 80072b8:	20017d20 	.word	0x20017d20
 80072bc:	3ab7dacd 	.word	0x3ab7dacd
 80072c0:	3f5e3fbc 	.word	0x3f5e3fbc
 80072c4:	3d8eefa2 	.word	0x3d8eefa2
 80072c8:	20017d60 	.word	0x20017d60
 80072cc:	20024d10 	.word	0x20024d10

080072d0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80072d4:	4819      	ldr	r0, [pc, #100]	; (800733c <cppFlip1ms+0x6c>)
 80072d6:	f7fa ffcb 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80072da:	4819      	ldr	r0, [pc, #100]	; (8007340 <cppFlip1ms+0x70>)
 80072dc:	f7fa fbf4 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 80072e0:	4818      	ldr	r0, [pc, #96]	; (8007344 <cppFlip1ms+0x74>)
 80072e2:	f7f9 ff85 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 80072e6:	4818      	ldr	r0, [pc, #96]	; (8007348 <cppFlip1ms+0x78>)
 80072e8:	f7fc fb96 	bl	8003a18 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80072ec:	4817      	ldr	r0, [pc, #92]	; (800734c <cppFlip1ms+0x7c>)
 80072ee:	f7fe f9b5 	bl	800565c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80072f2:	4817      	ldr	r0, [pc, #92]	; (8007350 <cppFlip1ms+0x80>)
 80072f4:	f7fd fc30 	bl	8004b58 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80072f8:	4816      	ldr	r0, [pc, #88]	; (8007354 <cppFlip1ms+0x84>)
 80072fa:	f7fd fded 	bl	8004ed8 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80072fe:	4816      	ldr	r0, [pc, #88]	; (8007358 <cppFlip1ms+0x88>)
 8007300:	f7fd fa20 	bl	8004744 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007304:	4b15      	ldr	r3, [pc, #84]	; (800735c <cppFlip1ms+0x8c>)
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <cppFlip1ms+0x8c>)
 800730e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007310:	4b12      	ldr	r3, [pc, #72]	; (800735c <cppFlip1ms+0x8c>)
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d90c      	bls.n	8007332 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007318:	4809      	ldr	r0, [pc, #36]	; (8007340 <cppFlip1ms+0x70>)
 800731a:	f7fa fc2d 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 800731e:	eef0 7a40 	vmov.f32	s15, s0
 8007322:	eeb0 0a67 	vmov.f32	s0, s15
 8007326:	480e      	ldr	r0, [pc, #56]	; (8007360 <cppFlip1ms+0x90>)
 8007328:	f7fd ff38 	bl	800519c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800732c:	4b0b      	ldr	r3, [pc, #44]	; (800735c <cppFlip1ms+0x8c>)
 800732e:	2200      	movs	r2, #0
 8007330:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007332:	4804      	ldr	r0, [pc, #16]	; (8007344 <cppFlip1ms+0x74>)
 8007334:	f7fa f846 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007338:	bf00      	nop
 800733a:	bd80      	pop	{r7, pc}
 800733c:	200002c0 	.word	0x200002c0
 8007340:	200005dc 	.word	0x200005dc
 8007344:	20017d00 	.word	0x20017d00
 8007348:	20017da0 	.word	0x20017da0
 800734c:	20017d20 	.word	0x20017d20
 8007350:	20017d60 	.word	0x20017d60
 8007354:	200005b8 	.word	0x200005b8
 8007358:	200005c8 	.word	0x200005c8
 800735c:	2003c438 	.word	0x2003c438
 8007360:	20024b00 	.word	0x20024b00

08007364 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007368:	4802      	ldr	r0, [pc, #8]	; (8007374 <cppFlip100ns+0x10>)
 800736a:	f7fa ff33 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 800736e:	bf00      	nop
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	200002c0 	.word	0x200002c0

08007378 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 800737c:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <cppFlip10ms+0x28>)
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	b29a      	uxth	r2, r3
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <cppFlip10ms+0x28>)
 8007386:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <cppFlip10ms+0x28>)
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	2b06      	cmp	r3, #6
 800738e:	d905      	bls.n	800739c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007390:	4804      	ldr	r0, [pc, #16]	; (80073a4 <cppFlip10ms+0x2c>)
 8007392:	f7fd ff3f 	bl	8005214 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007396:	4b02      	ldr	r3, [pc, #8]	; (80073a0 <cppFlip10ms+0x28>)
 8007398:	2200      	movs	r2, #0
 800739a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800739c:	bf00      	nop
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	2003c43a 	.word	0x2003c43a
 80073a4:	20024b00 	.word	0x20024b00

080073a8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80073a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 80073ae:	4baf      	ldr	r3, [pc, #700]	; (800766c <cppLoop+0x2c4>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f3bf 8f5b 	dmb	ish
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bf0c      	ite	eq
 80073c0:	2301      	moveq	r3, #1
 80073c2:	2300      	movne	r3, #0
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d015      	beq.n	80073f6 <cppLoop+0x4e>
 80073ca:	48a8      	ldr	r0, [pc, #672]	; (800766c <cppLoop+0x2c4>)
 80073cc:	f00c f9e9 	bl	80137a2 <__cxa_guard_acquire>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	bf14      	ite	ne
 80073d6:	2301      	movne	r3, #1
 80073d8:	2300      	moveq	r3, #0
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <cppLoop+0x4e>
 80073e0:	48a3      	ldr	r0, [pc, #652]	; (8007670 <cppLoop+0x2c8>)
 80073e2:	f7fc fa02 	bl	80037ea <_ZN9LineTrace5getKpEv>
 80073e6:	eef0 7a40 	vmov.f32	s15, s0
 80073ea:	4ba2      	ldr	r3, [pc, #648]	; (8007674 <cppLoop+0x2cc>)
 80073ec:	edc3 7a00 	vstr	s15, [r3]
 80073f0:	489e      	ldr	r0, [pc, #632]	; (800766c <cppLoop+0x2c4>)
 80073f2:	f00c f9e2 	bl	80137ba <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 80073f6:	4ba0      	ldr	r3, [pc, #640]	; (8007678 <cppLoop+0x2d0>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f3bf 8f5b 	dmb	ish
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d015      	beq.n	800743e <cppLoop+0x96>
 8007412:	4899      	ldr	r0, [pc, #612]	; (8007678 <cppLoop+0x2d0>)
 8007414:	f00c f9c5 	bl	80137a2 <__cxa_guard_acquire>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	bf14      	ite	ne
 800741e:	2301      	movne	r3, #1
 8007420:	2300      	moveq	r3, #0
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <cppLoop+0x96>
 8007428:	4891      	ldr	r0, [pc, #580]	; (8007670 <cppLoop+0x2c8>)
 800742a:	f7fc f9ed 	bl	8003808 <_ZN9LineTrace5getKiEv>
 800742e:	eef0 7a40 	vmov.f32	s15, s0
 8007432:	4b92      	ldr	r3, [pc, #584]	; (800767c <cppLoop+0x2d4>)
 8007434:	edc3 7a00 	vstr	s15, [r3]
 8007438:	488f      	ldr	r0, [pc, #572]	; (8007678 <cppLoop+0x2d0>)
 800743a:	f00c f9be 	bl	80137ba <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 800743e:	4b90      	ldr	r3, [pc, #576]	; (8007680 <cppLoop+0x2d8>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	f3bf 8f5b 	dmb	ish
 8007446:	b2db      	uxtb	r3, r3
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	bf0c      	ite	eq
 8007450:	2301      	moveq	r3, #1
 8007452:	2300      	movne	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d015      	beq.n	8007486 <cppLoop+0xde>
 800745a:	4889      	ldr	r0, [pc, #548]	; (8007680 <cppLoop+0x2d8>)
 800745c:	f00c f9a1 	bl	80137a2 <__cxa_guard_acquire>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	bf14      	ite	ne
 8007466:	2301      	movne	r3, #1
 8007468:	2300      	moveq	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00a      	beq.n	8007486 <cppLoop+0xde>
 8007470:	487f      	ldr	r0, [pc, #508]	; (8007670 <cppLoop+0x2c8>)
 8007472:	f7fc f9d8 	bl	8003826 <_ZN9LineTrace5getKdEv>
 8007476:	eef0 7a40 	vmov.f32	s15, s0
 800747a:	4b82      	ldr	r3, [pc, #520]	; (8007684 <cppLoop+0x2dc>)
 800747c:	edc3 7a00 	vstr	s15, [r3]
 8007480:	487f      	ldr	r0, [pc, #508]	; (8007680 <cppLoop+0x2d8>)
 8007482:	f00c f99a 	bl	80137ba <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007486:	4b80      	ldr	r3, [pc, #512]	; (8007688 <cppLoop+0x2e0>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f3bf 8f5b 	dmb	ish
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	bf0c      	ite	eq
 8007498:	2301      	moveq	r3, #1
 800749a:	2300      	movne	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d015      	beq.n	80074ce <cppLoop+0x126>
 80074a2:	4879      	ldr	r0, [pc, #484]	; (8007688 <cppLoop+0x2e0>)
 80074a4:	f00c f97d 	bl	80137a2 <__cxa_guard_acquire>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bf14      	ite	ne
 80074ae:	2301      	movne	r3, #1
 80074b0:	2300      	moveq	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <cppLoop+0x126>
 80074b8:	486d      	ldr	r0, [pc, #436]	; (8007670 <cppLoop+0x2c8>)
 80074ba:	f7fc fa20 	bl	80038fe <_ZN9LineTrace17getTargetVelocityEv>
 80074be:	eef0 7a40 	vmov.f32	s15, s0
 80074c2:	4b72      	ldr	r3, [pc, #456]	; (800768c <cppLoop+0x2e4>)
 80074c4:	edc3 7a00 	vstr	s15, [r3]
 80074c8:	486f      	ldr	r0, [pc, #444]	; (8007688 <cppLoop+0x2e0>)
 80074ca:	f00c f976 	bl	80137ba <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 80074ce:	4b70      	ldr	r3, [pc, #448]	; (8007690 <cppLoop+0x2e8>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	f3bf 8f5b 	dmb	ish
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bf0c      	ite	eq
 80074e0:	2301      	moveq	r3, #1
 80074e2:	2300      	movne	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d015      	beq.n	8007516 <cppLoop+0x16e>
 80074ea:	4869      	ldr	r0, [pc, #420]	; (8007690 <cppLoop+0x2e8>)
 80074ec:	f00c f959 	bl	80137a2 <__cxa_guard_acquire>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bf14      	ite	ne
 80074f6:	2301      	movne	r3, #1
 80074f8:	2300      	moveq	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <cppLoop+0x16e>
 8007500:	485b      	ldr	r0, [pc, #364]	; (8007670 <cppLoop+0x2c8>)
 8007502:	f7fc fa0b 	bl	800391c <_ZN9LineTrace14getMaxVelocityEv>
 8007506:	eef0 7a40 	vmov.f32	s15, s0
 800750a:	4b62      	ldr	r3, [pc, #392]	; (8007694 <cppLoop+0x2ec>)
 800750c:	edc3 7a00 	vstr	s15, [r3]
 8007510:	485f      	ldr	r0, [pc, #380]	; (8007690 <cppLoop+0x2e8>)
 8007512:	f00c f952 	bl	80137ba <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007516:	4b60      	ldr	r3, [pc, #384]	; (8007698 <cppLoop+0x2f0>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	f3bf 8f5b 	dmb	ish
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	bf0c      	ite	eq
 8007528:	2301      	moveq	r3, #1
 800752a:	2300      	movne	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d015      	beq.n	800755e <cppLoop+0x1b6>
 8007532:	4859      	ldr	r0, [pc, #356]	; (8007698 <cppLoop+0x2f0>)
 8007534:	f00c f935 	bl	80137a2 <__cxa_guard_acquire>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	bf14      	ite	ne
 800753e:	2301      	movne	r3, #1
 8007540:	2300      	moveq	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <cppLoop+0x1b6>
 8007548:	4849      	ldr	r0, [pc, #292]	; (8007670 <cppLoop+0x2c8>)
 800754a:	f7fc f9f6 	bl	800393a <_ZN9LineTrace15getMaxVelocity2Ev>
 800754e:	eef0 7a40 	vmov.f32	s15, s0
 8007552:	4b52      	ldr	r3, [pc, #328]	; (800769c <cppLoop+0x2f4>)
 8007554:	edc3 7a00 	vstr	s15, [r3]
 8007558:	484f      	ldr	r0, [pc, #316]	; (8007698 <cppLoop+0x2f0>)
 800755a:	f00c f92e 	bl	80137ba <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 800755e:	4b50      	ldr	r3, [pc, #320]	; (80076a0 <cppLoop+0x2f8>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f3bf 8f5b 	dmb	ish
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d015      	beq.n	80075a6 <cppLoop+0x1fe>
 800757a:	4849      	ldr	r0, [pc, #292]	; (80076a0 <cppLoop+0x2f8>)
 800757c:	f00c f911 	bl	80137a2 <__cxa_guard_acquire>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	bf14      	ite	ne
 8007586:	2301      	movne	r3, #1
 8007588:	2300      	moveq	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00a      	beq.n	80075a6 <cppLoop+0x1fe>
 8007590:	4837      	ldr	r0, [pc, #220]	; (8007670 <cppLoop+0x2c8>)
 8007592:	f7fc f9e2 	bl	800395a <_ZN9LineTrace14getMinVelocityEv>
 8007596:	eef0 7a40 	vmov.f32	s15, s0
 800759a:	4b42      	ldr	r3, [pc, #264]	; (80076a4 <cppLoop+0x2fc>)
 800759c:	edc3 7a00 	vstr	s15, [r3]
 80075a0:	483f      	ldr	r0, [pc, #252]	; (80076a0 <cppLoop+0x2f8>)
 80075a2:	f00c f90a 	bl	80137ba <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 80075a6:	4b40      	ldr	r3, [pc, #256]	; (80076a8 <cppLoop+0x300>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f3bf 8f5b 	dmb	ish
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bf0c      	ite	eq
 80075b8:	2301      	moveq	r3, #1
 80075ba:	2300      	movne	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d015      	beq.n	80075ee <cppLoop+0x246>
 80075c2:	4839      	ldr	r0, [pc, #228]	; (80076a8 <cppLoop+0x300>)
 80075c4:	f00c f8ed 	bl	80137a2 <__cxa_guard_acquire>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bf14      	ite	ne
 80075ce:	2301      	movne	r3, #1
 80075d0:	2300      	moveq	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <cppLoop+0x246>
 80075d8:	4825      	ldr	r0, [pc, #148]	; (8007670 <cppLoop+0x2c8>)
 80075da:	f7fc f9ce 	bl	800397a <_ZN9LineTrace15getMinVelocity2Ev>
 80075de:	eef0 7a40 	vmov.f32	s15, s0
 80075e2:	4b32      	ldr	r3, [pc, #200]	; (80076ac <cppLoop+0x304>)
 80075e4:	edc3 7a00 	vstr	s15, [r3]
 80075e8:	482f      	ldr	r0, [pc, #188]	; (80076a8 <cppLoop+0x300>)
 80075ea:	f00c f8e6 	bl	80137ba <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 80075ee:	4b30      	ldr	r3, [pc, #192]	; (80076b0 <cppLoop+0x308>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f3bf 8f5b 	dmb	ish
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d015      	beq.n	8007636 <cppLoop+0x28e>
 800760a:	4829      	ldr	r0, [pc, #164]	; (80076b0 <cppLoop+0x308>)
 800760c:	f00c f8c9 	bl	80137a2 <__cxa_guard_acquire>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	bf14      	ite	ne
 8007616:	2301      	movne	r3, #1
 8007618:	2300      	moveq	r3, #0
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <cppLoop+0x28e>
 8007620:	4813      	ldr	r0, [pc, #76]	; (8007670 <cppLoop+0x2c8>)
 8007622:	f7fc f9d4 	bl	80039ce <_ZN9LineTrace9getMaxAccEv>
 8007626:	eef0 7a40 	vmov.f32	s15, s0
 800762a:	4b22      	ldr	r3, [pc, #136]	; (80076b4 <cppLoop+0x30c>)
 800762c:	edc3 7a00 	vstr	s15, [r3]
 8007630:	481f      	ldr	r0, [pc, #124]	; (80076b0 <cppLoop+0x308>)
 8007632:	f00c f8c2 	bl	80137ba <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007636:	4b20      	ldr	r3, [pc, #128]	; (80076b8 <cppLoop+0x310>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	f3bf 8f5b 	dmb	ish
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	bf0c      	ite	eq
 8007648:	2301      	moveq	r3, #1
 800764a:	2300      	movne	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d03f      	beq.n	80076d2 <cppLoop+0x32a>
 8007652:	4819      	ldr	r0, [pc, #100]	; (80076b8 <cppLoop+0x310>)
 8007654:	f00c f8a5 	bl	80137a2 <__cxa_guard_acquire>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf14      	ite	ne
 800765e:	2301      	movne	r3, #1
 8007660:	2300      	moveq	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d034      	beq.n	80076d2 <cppLoop+0x32a>
 8007668:	e028      	b.n	80076bc <cppLoop+0x314>
 800766a:	bf00      	nop
 800766c:	2003c448 	.word	0x2003c448
 8007670:	20017da0 	.word	0x20017da0
 8007674:	2003c444 	.word	0x2003c444
 8007678:	2003c450 	.word	0x2003c450
 800767c:	2003c44c 	.word	0x2003c44c
 8007680:	2003c458 	.word	0x2003c458
 8007684:	2003c454 	.word	0x2003c454
 8007688:	2003c460 	.word	0x2003c460
 800768c:	2003c45c 	.word	0x2003c45c
 8007690:	2003c468 	.word	0x2003c468
 8007694:	2003c464 	.word	0x2003c464
 8007698:	2003c470 	.word	0x2003c470
 800769c:	2003c46c 	.word	0x2003c46c
 80076a0:	2003c478 	.word	0x2003c478
 80076a4:	2003c474 	.word	0x2003c474
 80076a8:	2003c480 	.word	0x2003c480
 80076ac:	2003c47c 	.word	0x2003c47c
 80076b0:	2003c488 	.word	0x2003c488
 80076b4:	2003c484 	.word	0x2003c484
 80076b8:	2003c490 	.word	0x2003c490
 80076bc:	48c0      	ldr	r0, [pc, #768]	; (80079c0 <cppLoop+0x618>)
 80076be:	f7fc f998 	bl	80039f2 <_ZN9LineTrace9getMaxDecEv>
 80076c2:	eef0 7a40 	vmov.f32	s15, s0
 80076c6:	4bbf      	ldr	r3, [pc, #764]	; (80079c4 <cppLoop+0x61c>)
 80076c8:	edc3 7a00 	vstr	s15, [r3]
 80076cc:	48be      	ldr	r0, [pc, #760]	; (80079c8 <cppLoop+0x620>)
 80076ce:	f00c f874 	bl	80137ba <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 80076d2:	48be      	ldr	r0, [pc, #760]	; (80079cc <cppLoop+0x624>)
 80076d4:	f7fd fb9a 	bl	8004e0c <_ZN12RotarySwitch8getValueEv>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b0f      	cmp	r3, #15
 80076dc:	f201 823f 	bhi.w	8008b5e <cppLoop+0x17b6>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <cppLoop+0x340>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	08007729 	.word	0x08007729
 80076ec:	08007b1f 	.word	0x08007b1f
 80076f0:	08007bb3 	.word	0x08007bb3
 80076f4:	08007d4d 	.word	0x08007d4d
 80076f8:	08007e19 	.word	0x08007e19
 80076fc:	08008099 	.word	0x08008099
 8007700:	08008165 	.word	0x08008165
 8007704:	080083f7 	.word	0x080083f7
 8007708:	0800867d 	.word	0x0800867d
 800770c:	080086a7 	.word	0x080086a7
 8007710:	08008763 	.word	0x08008763
 8007714:	080087d3 	.word	0x080087d3
 8007718:	0800886f 	.word	0x0800886f
 800771c:	08008909 	.word	0x08008909
 8007720:	08008a11 	.word	0x08008a11
 8007724:	08008ab9 	.word	0x08008ab9
	case 0:
		led.fullColor('W');
 8007728:	2157      	movs	r1, #87	; 0x57
 800772a:	48a9      	ldr	r0, [pc, #676]	; (80079d0 <cppLoop+0x628>)
 800772c:	f7fa fbe6 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007730:	f7f9 fcb6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007734:	2100      	movs	r1, #0
 8007736:	2000      	movs	r0, #0
 8007738:	f7f9 fcc2 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 800773c:	48a0      	ldr	r0, [pc, #640]	; (80079c0 <cppLoop+0x618>)
 800773e:	f7fc f854 	bl	80037ea <_ZN9LineTrace5getKpEv>
 8007742:	eeb0 7a40 	vmov.f32	s14, s0
 8007746:	eddf 7aa3 	vldr	s15, [pc, #652]	; 80079d4 <cppLoop+0x62c>
 800774a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774e:	ee17 0a90 	vmov	r0, s15
 8007752:	f7f8 ff11 	bl	8000578 <__aeabi_f2d>
 8007756:	4603      	mov	r3, r0
 8007758:	460c      	mov	r4, r1
 800775a:	461a      	mov	r2, r3
 800775c:	4623      	mov	r3, r4
 800775e:	489e      	ldr	r0, [pc, #632]	; (80079d8 <cppLoop+0x630>)
 8007760:	f7f9 fcd8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007764:	2101      	movs	r1, #1
 8007766:	2000      	movs	r0, #0
 8007768:	f7f9 fcaa 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 800776c:	4894      	ldr	r0, [pc, #592]	; (80079c0 <cppLoop+0x618>)
 800776e:	f7fc f84b 	bl	8003808 <_ZN9LineTrace5getKiEv>
 8007772:	eeb0 7a40 	vmov.f32	s14, s0
 8007776:	eddf 7a99 	vldr	s15, [pc, #612]	; 80079dc <cppLoop+0x634>
 800777a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777e:	ee17 0a90 	vmov	r0, s15
 8007782:	f7f8 fef9 	bl	8000578 <__aeabi_f2d>
 8007786:	4605      	mov	r5, r0
 8007788:	460e      	mov	r6, r1
 800778a:	488d      	ldr	r0, [pc, #564]	; (80079c0 <cppLoop+0x618>)
 800778c:	f7fc f84b 	bl	8003826 <_ZN9LineTrace5getKdEv>
 8007790:	eeb0 7a40 	vmov.f32	s14, s0
 8007794:	eddf 7a92 	vldr	s15, [pc, #584]	; 80079e0 <cppLoop+0x638>
 8007798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779c:	ee17 0a90 	vmov	r0, s15
 80077a0:	f7f8 feea 	bl	8000578 <__aeabi_f2d>
 80077a4:	4603      	mov	r3, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	e9cd 3400 	strd	r3, r4, [sp]
 80077ac:	462a      	mov	r2, r5
 80077ae:	4633      	mov	r3, r6
 80077b0:	488c      	ldr	r0, [pc, #560]	; (80079e4 <cppLoop+0x63c>)
 80077b2:	f7f9 fcaf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80077b6:	488c      	ldr	r0, [pc, #560]	; (80079e8 <cppLoop+0x640>)
 80077b8:	f7fa fb3c 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b08      	cmp	r3, #8
 80077c0:	bf0c      	ite	eq
 80077c2:	2301      	moveq	r3, #1
 80077c4:	2300      	movne	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d022      	beq.n	8007812 <cppLoop+0x46a>
			led.LR(-1, 1);
 80077cc:	2201      	movs	r2, #1
 80077ce:	f04f 31ff 	mov.w	r1, #4294967295
 80077d2:	487f      	ldr	r0, [pc, #508]	; (80079d0 <cppLoop+0x628>)
 80077d4:	f7fa fc4e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80077d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80077dc:	f001 fafc 	bl	8008dd8 <HAL_Delay>

			selector++;
 80077e0:	4b82      	ldr	r3, [pc, #520]	; (80079ec <cppLoop+0x644>)
 80077e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3301      	adds	r3, #1
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	b21a      	sxth	r2, r3
 80077ee:	4b7f      	ldr	r3, [pc, #508]	; (80079ec <cppLoop+0x644>)
 80077f0:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80077f2:	4b7e      	ldr	r3, [pc, #504]	; (80079ec <cppLoop+0x644>)
 80077f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	dd02      	ble.n	8007802 <cppLoop+0x45a>
 80077fc:	4b7b      	ldr	r3, [pc, #492]	; (80079ec <cppLoop+0x644>)
 80077fe:	2200      	movs	r2, #0
 8007800:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007802:	2200      	movs	r2, #0
 8007804:	f04f 31ff 	mov.w	r1, #4294967295
 8007808:	4871      	ldr	r0, [pc, #452]	; (80079d0 <cppLoop+0x628>)
 800780a:	f7fa fc33 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 800780e:	f001 b9a8 	b.w	8008b62 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_R){
 8007812:	4875      	ldr	r0, [pc, #468]	; (80079e8 <cppLoop+0x640>)
 8007814:	f7fa fb0e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007818:	4603      	mov	r3, r0
 800781a:	2b10      	cmp	r3, #16
 800781c:	bf0c      	ite	eq
 800781e:	2301      	moveq	r3, #1
 8007820:	2300      	movne	r3, #0
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d059      	beq.n	80078dc <cppLoop+0x534>
			led.LR(-1, 1);
 8007828:	2201      	movs	r2, #1
 800782a:	f04f 31ff 	mov.w	r1, #4294967295
 800782e:	4868      	ldr	r0, [pc, #416]	; (80079d0 <cppLoop+0x628>)
 8007830:	f7fa fc20 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007834:	2064      	movs	r0, #100	; 0x64
 8007836:	f001 facf 	bl	8008dd8 <HAL_Delay>
			if(selector == 0){
 800783a:	4b6c      	ldr	r3, [pc, #432]	; (80079ec <cppLoop+0x644>)
 800783c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d113      	bne.n	800786c <cppLoop+0x4c4>
				adj_kp = adj_kp + 0.00001;
 8007844:	4b6a      	ldr	r3, [pc, #424]	; (80079f0 <cppLoop+0x648>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f7f8 fe95 	bl	8000578 <__aeabi_f2d>
 800784e:	a356      	add	r3, pc, #344	; (adr r3, 80079a8 <cppLoop+0x600>)
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	f7f8 fd32 	bl	80002bc <__adddf3>
 8007858:	4603      	mov	r3, r0
 800785a:	460c      	mov	r4, r1
 800785c:	4618      	mov	r0, r3
 800785e:	4621      	mov	r1, r4
 8007860:	f7f9 f9da 	bl	8000c18 <__aeabi_d2f>
 8007864:	4602      	mov	r2, r0
 8007866:	4b62      	ldr	r3, [pc, #392]	; (80079f0 <cppLoop+0x648>)
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e02b      	b.n	80078c4 <cppLoop+0x51c>
			else if(selector == 1){
 800786c:	4b5f      	ldr	r3, [pc, #380]	; (80079ec <cppLoop+0x644>)
 800786e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d113      	bne.n	800789e <cppLoop+0x4f6>
				adj_ki = adj_ki + 0.0001;
 8007876:	4b5f      	ldr	r3, [pc, #380]	; (80079f4 <cppLoop+0x64c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4618      	mov	r0, r3
 800787c:	f7f8 fe7c 	bl	8000578 <__aeabi_f2d>
 8007880:	a34b      	add	r3, pc, #300	; (adr r3, 80079b0 <cppLoop+0x608>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f8 fd19 	bl	80002bc <__adddf3>
 800788a:	4603      	mov	r3, r0
 800788c:	460c      	mov	r4, r1
 800788e:	4618      	mov	r0, r3
 8007890:	4621      	mov	r1, r4
 8007892:	f7f9 f9c1 	bl	8000c18 <__aeabi_d2f>
 8007896:	4602      	mov	r2, r0
 8007898:	4b56      	ldr	r3, [pc, #344]	; (80079f4 <cppLoop+0x64c>)
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	e012      	b.n	80078c4 <cppLoop+0x51c>
				adj_kd = adj_kd + 0.000001;
 800789e:	4b56      	ldr	r3, [pc, #344]	; (80079f8 <cppLoop+0x650>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7f8 fe68 	bl	8000578 <__aeabi_f2d>
 80078a8:	a343      	add	r3, pc, #268	; (adr r3, 80079b8 <cppLoop+0x610>)
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f7f8 fd05 	bl	80002bc <__adddf3>
 80078b2:	4603      	mov	r3, r0
 80078b4:	460c      	mov	r4, r1
 80078b6:	4618      	mov	r0, r3
 80078b8:	4621      	mov	r1, r4
 80078ba:	f7f9 f9ad 	bl	8000c18 <__aeabi_d2f>
 80078be:	4602      	mov	r2, r0
 80078c0:	4b4d      	ldr	r3, [pc, #308]	; (80079f8 <cppLoop+0x650>)
 80078c2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80078c4:	2152      	movs	r1, #82	; 0x52
 80078c6:	4842      	ldr	r0, [pc, #264]	; (80079d0 <cppLoop+0x628>)
 80078c8:	f7fa fb18 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80078cc:	2200      	movs	r2, #0
 80078ce:	f04f 31ff 	mov.w	r1, #4294967295
 80078d2:	483f      	ldr	r0, [pc, #252]	; (80079d0 <cppLoop+0x628>)
 80078d4:	f7fa fbce 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80078d8:	f001 b943 	b.w	8008b62 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_L){
 80078dc:	4842      	ldr	r0, [pc, #264]	; (80079e8 <cppLoop+0x640>)
 80078de:	f7fa faa9 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	bf0c      	ite	eq
 80078e8:	2301      	moveq	r3, #1
 80078ea:	2300      	movne	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 8084 	beq.w	80079fc <cppLoop+0x654>
			led.LR(-1, 1);
 80078f4:	2201      	movs	r2, #1
 80078f6:	f04f 31ff 	mov.w	r1, #4294967295
 80078fa:	4835      	ldr	r0, [pc, #212]	; (80079d0 <cppLoop+0x628>)
 80078fc:	f7fa fbba 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007900:	2064      	movs	r0, #100	; 0x64
 8007902:	f001 fa69 	bl	8008dd8 <HAL_Delay>
			if(selector == 0){
 8007906:	4b39      	ldr	r3, [pc, #228]	; (80079ec <cppLoop+0x644>)
 8007908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d113      	bne.n	8007938 <cppLoop+0x590>
				adj_kp = adj_kp - 0.00001;
 8007910:	4b37      	ldr	r3, [pc, #220]	; (80079f0 <cppLoop+0x648>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4618      	mov	r0, r3
 8007916:	f7f8 fe2f 	bl	8000578 <__aeabi_f2d>
 800791a:	a323      	add	r3, pc, #140	; (adr r3, 80079a8 <cppLoop+0x600>)
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f7f8 fcca 	bl	80002b8 <__aeabi_dsub>
 8007924:	4603      	mov	r3, r0
 8007926:	460c      	mov	r4, r1
 8007928:	4618      	mov	r0, r3
 800792a:	4621      	mov	r1, r4
 800792c:	f7f9 f974 	bl	8000c18 <__aeabi_d2f>
 8007930:	4602      	mov	r2, r0
 8007932:	4b2f      	ldr	r3, [pc, #188]	; (80079f0 <cppLoop+0x648>)
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	e02b      	b.n	8007990 <cppLoop+0x5e8>
			else if(selector == 1){
 8007938:	4b2c      	ldr	r3, [pc, #176]	; (80079ec <cppLoop+0x644>)
 800793a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d113      	bne.n	800796a <cppLoop+0x5c2>
				adj_ki = adj_ki - 0.0001;
 8007942:	4b2c      	ldr	r3, [pc, #176]	; (80079f4 <cppLoop+0x64c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f7f8 fe16 	bl	8000578 <__aeabi_f2d>
 800794c:	a318      	add	r3, pc, #96	; (adr r3, 80079b0 <cppLoop+0x608>)
 800794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007952:	f7f8 fcb1 	bl	80002b8 <__aeabi_dsub>
 8007956:	4603      	mov	r3, r0
 8007958:	460c      	mov	r4, r1
 800795a:	4618      	mov	r0, r3
 800795c:	4621      	mov	r1, r4
 800795e:	f7f9 f95b 	bl	8000c18 <__aeabi_d2f>
 8007962:	4602      	mov	r2, r0
 8007964:	4b23      	ldr	r3, [pc, #140]	; (80079f4 <cppLoop+0x64c>)
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	e012      	b.n	8007990 <cppLoop+0x5e8>
				adj_kd = adj_kd - 0.000001;
 800796a:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <cppLoop+0x650>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7f8 fe02 	bl	8000578 <__aeabi_f2d>
 8007974:	a310      	add	r3, pc, #64	; (adr r3, 80079b8 <cppLoop+0x610>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 fc9d 	bl	80002b8 <__aeabi_dsub>
 800797e:	4603      	mov	r3, r0
 8007980:	460c      	mov	r4, r1
 8007982:	4618      	mov	r0, r3
 8007984:	4621      	mov	r1, r4
 8007986:	f7f9 f947 	bl	8000c18 <__aeabi_d2f>
 800798a:	4602      	mov	r2, r0
 800798c:	4b1a      	ldr	r3, [pc, #104]	; (80079f8 <cppLoop+0x650>)
 800798e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007990:	2152      	movs	r1, #82	; 0x52
 8007992:	480f      	ldr	r0, [pc, #60]	; (80079d0 <cppLoop+0x628>)
 8007994:	f7fa fab2 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007998:	2200      	movs	r2, #0
 800799a:	f04f 31ff 	mov.w	r1, #4294967295
 800799e:	480c      	ldr	r0, [pc, #48]	; (80079d0 <cppLoop+0x628>)
 80079a0:	f7fa fb68 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80079a4:	f001 b8dd 	b.w	8008b62 <cppLoop+0x17ba>
 80079a8:	88e368f1 	.word	0x88e368f1
 80079ac:	3ee4f8b5 	.word	0x3ee4f8b5
 80079b0:	eb1c432d 	.word	0xeb1c432d
 80079b4:	3f1a36e2 	.word	0x3f1a36e2
 80079b8:	a0b5ed8d 	.word	0xa0b5ed8d
 80079bc:	3eb0c6f7 	.word	0x3eb0c6f7
 80079c0:	20017da0 	.word	0x20017da0
 80079c4:	2003c48c 	.word	0x2003c48c
 80079c8:	2003c490 	.word	0x2003c490
 80079cc:	200005c4 	.word	0x200005c4
 80079d0:	200005cc 	.word	0x200005cc
 80079d4:	447a0000 	.word	0x447a0000
 80079d8:	08019080 	.word	0x08019080
 80079dc:	42c80000 	.word	0x42c80000
 80079e0:	461c4000 	.word	0x461c4000
 80079e4:	0801908c 	.word	0x0801908c
 80079e8:	200005c0 	.word	0x200005c0
 80079ec:	2003c43c 	.word	0x2003c43c
 80079f0:	2003c444 	.word	0x2003c444
 80079f4:	2003c44c 	.word	0x2003c44c
 80079f8:	2003c454 	.word	0x2003c454
		else if(joy_stick.getValue() == JOY_D){
 80079fc:	48c4      	ldr	r0, [pc, #784]	; (8007d10 <cppLoop+0x968>)
 80079fe:	f7fa fa19 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	bf0c      	ite	eq
 8007a08:	2301      	moveq	r3, #1
 8007a0a:	2300      	movne	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d03d      	beq.n	8007a8e <cppLoop+0x6e6>
			led.LR(-1, 1);
 8007a12:	2201      	movs	r2, #1
 8007a14:	f04f 31ff 	mov.w	r1, #4294967295
 8007a18:	48be      	ldr	r0, [pc, #760]	; (8007d14 <cppLoop+0x96c>)
 8007a1a:	f7fa fb2b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007a1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007a22:	f001 f9d9 	bl	8008dd8 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8007a26:	f107 030c 	add.w	r3, r7, #12
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	49ba      	ldr	r1, [pc, #744]	; (8007d18 <cppLoop+0x970>)
 8007a2e:	48bb      	ldr	r0, [pc, #748]	; (8007d1c <cppLoop+0x974>)
 8007a30:	f7f9 fe4e 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8007a34:	f107 0308 	add.w	r3, r7, #8
 8007a38:	2201      	movs	r2, #1
 8007a3a:	49b9      	ldr	r1, [pc, #740]	; (8007d20 <cppLoop+0x978>)
 8007a3c:	48b7      	ldr	r0, [pc, #732]	; (8007d1c <cppLoop+0x974>)
 8007a3e:	f7f9 fe47 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8007a42:	1d3b      	adds	r3, r7, #4
 8007a44:	2201      	movs	r2, #1
 8007a46:	49b7      	ldr	r1, [pc, #732]	; (8007d24 <cppLoop+0x97c>)
 8007a48:	48b4      	ldr	r0, [pc, #720]	; (8007d1c <cppLoop+0x974>)
 8007a4a:	f7f9 fe41 	bl	80016d0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8007a4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a52:	ed97 7a02 	vldr	s14, [r7, #8]
 8007a56:	edd7 6a01 	vldr	s13, [r7, #4]
 8007a5a:	eeb0 1a66 	vmov.f32	s2, s13
 8007a5e:	eef0 0a47 	vmov.f32	s1, s14
 8007a62:	eeb0 0a67 	vmov.f32	s0, s15
 8007a66:	48b0      	ldr	r0, [pc, #704]	; (8007d28 <cppLoop+0x980>)
 8007a68:	f7fb fea6 	bl	80037b8 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4aaf      	ldr	r2, [pc, #700]	; (8007d2c <cppLoop+0x984>)
 8007a70:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4aae      	ldr	r2, [pc, #696]	; (8007d30 <cppLoop+0x988>)
 8007a76:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4aae      	ldr	r2, [pc, #696]	; (8007d34 <cppLoop+0x98c>)
 8007a7c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f04f 31ff 	mov.w	r1, #4294967295
 8007a84:	48a3      	ldr	r0, [pc, #652]	; (8007d14 <cppLoop+0x96c>)
 8007a86:	f7fa faf5 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007a8a:	f001 b86a 	b.w	8008b62 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_C){
 8007a8e:	48a0      	ldr	r0, [pc, #640]	; (8007d10 <cppLoop+0x968>)
 8007a90:	f7fa f9d0 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	bf0c      	ite	eq
 8007a9a:	2301      	moveq	r3, #1
 8007a9c:	2300      	movne	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f001 805e 	beq.w	8008b62 <cppLoop+0x17ba>
			led.LR(-1, 1);
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8007aac:	4899      	ldr	r0, [pc, #612]	; (8007d14 <cppLoop+0x96c>)
 8007aae:	f7fa fae1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007ab2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ab6:	f001 f98f 	bl	8008dd8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007aba:	2300      	movs	r3, #0
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	4b9b      	ldr	r3, [pc, #620]	; (8007d2c <cppLoop+0x984>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	4995      	ldr	r1, [pc, #596]	; (8007d18 <cppLoop+0x970>)
 8007ac4:	4895      	ldr	r0, [pc, #596]	; (8007d1c <cppLoop+0x974>)
 8007ac6:	f7f9 fd9d 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007aca:	2300      	movs	r3, #0
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	4b98      	ldr	r3, [pc, #608]	; (8007d30 <cppLoop+0x988>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	4993      	ldr	r1, [pc, #588]	; (8007d20 <cppLoop+0x978>)
 8007ad4:	4891      	ldr	r0, [pc, #580]	; (8007d1c <cppLoop+0x974>)
 8007ad6:	f7f9 fd95 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007ada:	2300      	movs	r3, #0
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	4b95      	ldr	r3, [pc, #596]	; (8007d34 <cppLoop+0x98c>)
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	4990      	ldr	r1, [pc, #576]	; (8007d24 <cppLoop+0x97c>)
 8007ae4:	488d      	ldr	r0, [pc, #564]	; (8007d1c <cppLoop+0x974>)
 8007ae6:	f7f9 fd8d 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007aea:	4b90      	ldr	r3, [pc, #576]	; (8007d2c <cppLoop+0x984>)
 8007aec:	edd3 7a00 	vldr	s15, [r3]
 8007af0:	4b8f      	ldr	r3, [pc, #572]	; (8007d30 <cppLoop+0x988>)
 8007af2:	ed93 7a00 	vldr	s14, [r3]
 8007af6:	4b8f      	ldr	r3, [pc, #572]	; (8007d34 <cppLoop+0x98c>)
 8007af8:	edd3 6a00 	vldr	s13, [r3]
 8007afc:	eeb0 1a66 	vmov.f32	s2, s13
 8007b00:	eef0 0a47 	vmov.f32	s1, s14
 8007b04:	eeb0 0a67 	vmov.f32	s0, s15
 8007b08:	4887      	ldr	r0, [pc, #540]	; (8007d28 <cppLoop+0x980>)
 8007b0a:	f7fb fe55 	bl	80037b8 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f04f 31ff 	mov.w	r1, #4294967295
 8007b14:	487f      	ldr	r0, [pc, #508]	; (8007d14 <cppLoop+0x96c>)
 8007b16:	f7fa faad 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007b1a:	f001 b822 	b.w	8008b62 <cppLoop+0x17ba>

	case 1:
		led.fullColor('C');
 8007b1e:	2143      	movs	r1, #67	; 0x43
 8007b20:	487c      	ldr	r0, [pc, #496]	; (8007d14 <cppLoop+0x96c>)
 8007b22:	f7fa f9eb 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b26:	f7f9 fabb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f7f9 fac7 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007b32:	4881      	ldr	r0, [pc, #516]	; (8007d38 <cppLoop+0x990>)
 8007b34:	f7f9 faee 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007b38:	2101      	movs	r1, #1
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	f7f9 fac0 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007b40:	4b7e      	ldr	r3, [pc, #504]	; (8007d3c <cppLoop+0x994>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7f8 fd17 	bl	8000578 <__aeabi_f2d>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	461a      	mov	r2, r3
 8007b50:	4623      	mov	r3, r4
 8007b52:	487b      	ldr	r0, [pc, #492]	; (8007d40 <cppLoop+0x998>)
 8007b54:	f7f9 fade 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007b58:	486d      	ldr	r0, [pc, #436]	; (8007d10 <cppLoop+0x968>)
 8007b5a:	f7fa f96b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	bf0c      	ite	eq
 8007b64:	2301      	moveq	r3, #1
 8007b66:	2300      	movne	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 87fb 	beq.w	8008b66 <cppLoop+0x17be>
			HAL_Delay(500);
 8007b70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b74:	f001 f930 	bl	8008dd8 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007b78:	4b70      	ldr	r3, [pc, #448]	; (8007d3c <cppLoop+0x994>)
 8007b7a:	edd3 7a00 	vldr	s15, [r3]
 8007b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8007b82:	4869      	ldr	r0, [pc, #420]	; (8007d28 <cppLoop+0x980>)
 8007b84:	f7fb fe6d 	bl	8003862 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	4861      	ldr	r0, [pc, #388]	; (8007d14 <cppLoop+0x96c>)
 8007b90:	f7fa fa70 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007b94:	2100      	movs	r1, #0
 8007b96:	4864      	ldr	r0, [pc, #400]	; (8007d28 <cppLoop+0x980>)
 8007b98:	f7fc f9d8 	bl	8003f4c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007b9c:	4862      	ldr	r0, [pc, #392]	; (8007d28 <cppLoop+0x980>)
 8007b9e:	f7fc f8d7 	bl	8003d50 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	485a      	ldr	r0, [pc, #360]	; (8007d14 <cppLoop+0x96c>)
 8007baa:	f7fa fa63 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007bae:	f000 bfda 	b.w	8008b66 <cppLoop+0x17be>

	case 2:
		led.fullColor('B');
 8007bb2:	2142      	movs	r1, #66	; 0x42
 8007bb4:	4857      	ldr	r0, [pc, #348]	; (8007d14 <cppLoop+0x96c>)
 8007bb6:	f7fa f9a1 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007bba:	f7f9 fa71 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	f7f9 fa7d 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007bc6:	485c      	ldr	r0, [pc, #368]	; (8007d38 <cppLoop+0x990>)
 8007bc8:	f7f9 faa4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007bcc:	2101      	movs	r1, #1
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f7f9 fa76 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007bd4:	4b59      	ldr	r3, [pc, #356]	; (8007d3c <cppLoop+0x994>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7f8 fccd 	bl	8000578 <__aeabi_f2d>
 8007bde:	4603      	mov	r3, r0
 8007be0:	460c      	mov	r4, r1
 8007be2:	461a      	mov	r2, r3
 8007be4:	4623      	mov	r3, r4
 8007be6:	4857      	ldr	r0, [pc, #348]	; (8007d44 <cppLoop+0x99c>)
 8007be8:	f7f9 fa94 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007bec:	4848      	ldr	r0, [pc, #288]	; (8007d10 <cppLoop+0x968>)
 8007bee:	f7fa f921 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b10      	cmp	r3, #16
 8007bf6:	bf0c      	ite	eq
 8007bf8:	2301      	moveq	r3, #1
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d023      	beq.n	8007c4a <cppLoop+0x8a2>
			led.LR(-1, 1);
 8007c02:	2201      	movs	r2, #1
 8007c04:	f04f 31ff 	mov.w	r1, #4294967295
 8007c08:	4842      	ldr	r0, [pc, #264]	; (8007d14 <cppLoop+0x96c>)
 8007c0a:	f7fa fa33 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007c0e:	2064      	movs	r0, #100	; 0x64
 8007c10:	f001 f8e2 	bl	8008dd8 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007c14:	4b49      	ldr	r3, [pc, #292]	; (8007d3c <cppLoop+0x994>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7f8 fcad 	bl	8000578 <__aeabi_f2d>
 8007c1e:	a33a      	add	r3, pc, #232	; (adr r3, 8007d08 <cppLoop+0x960>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f7f8 fb4a 	bl	80002bc <__adddf3>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	4621      	mov	r1, r4
 8007c30:	f7f8 fff2 	bl	8000c18 <__aeabi_d2f>
 8007c34:	4602      	mov	r2, r0
 8007c36:	4b41      	ldr	r3, [pc, #260]	; (8007d3c <cppLoop+0x994>)
 8007c38:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c40:	4834      	ldr	r0, [pc, #208]	; (8007d14 <cppLoop+0x96c>)
 8007c42:	f7fa fa17 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8007c46:	f000 bf90 	b.w	8008b6a <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_L){
 8007c4a:	4831      	ldr	r0, [pc, #196]	; (8007d10 <cppLoop+0x968>)
 8007c4c:	f7fa f8f2 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	bf0c      	ite	eq
 8007c56:	2301      	moveq	r3, #1
 8007c58:	2300      	movne	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d023      	beq.n	8007ca8 <cppLoop+0x900>
			led.LR(-1, 1);
 8007c60:	2201      	movs	r2, #1
 8007c62:	f04f 31ff 	mov.w	r1, #4294967295
 8007c66:	482b      	ldr	r0, [pc, #172]	; (8007d14 <cppLoop+0x96c>)
 8007c68:	f7fa fa04 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007c6c:	2064      	movs	r0, #100	; 0x64
 8007c6e:	f001 f8b3 	bl	8008dd8 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007c72:	4b32      	ldr	r3, [pc, #200]	; (8007d3c <cppLoop+0x994>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7f8 fc7e 	bl	8000578 <__aeabi_f2d>
 8007c7c:	a322      	add	r3, pc, #136	; (adr r3, 8007d08 <cppLoop+0x960>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fb19 	bl	80002b8 <__aeabi_dsub>
 8007c86:	4603      	mov	r3, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	f7f8 ffc3 	bl	8000c18 <__aeabi_d2f>
 8007c92:	4602      	mov	r2, r0
 8007c94:	4b29      	ldr	r3, [pc, #164]	; (8007d3c <cppLoop+0x994>)
 8007c96:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f04f 31ff 	mov.w	r1, #4294967295
 8007c9e:	481d      	ldr	r0, [pc, #116]	; (8007d14 <cppLoop+0x96c>)
 8007ca0:	f7fa f9e8 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007ca4:	f000 bf61 	b.w	8008b6a <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_C){
 8007ca8:	4819      	ldr	r0, [pc, #100]	; (8007d10 <cppLoop+0x968>)
 8007caa:	f7fa f8c3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	bf0c      	ite	eq
 8007cb4:	2301      	moveq	r3, #1
 8007cb6:	2300      	movne	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 8755 	beq.w	8008b6a <cppLoop+0x17c2>
			led.LR(-1, 1);
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8007cc6:	4813      	ldr	r0, [pc, #76]	; (8007d14 <cppLoop+0x96c>)
 8007cc8:	f7fa f9d4 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007ccc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007cd0:	f001 f882 	bl	8008dd8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4b18      	ldr	r3, [pc, #96]	; (8007d3c <cppLoop+0x994>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	491a      	ldr	r1, [pc, #104]	; (8007d48 <cppLoop+0x9a0>)
 8007cde:	480f      	ldr	r0, [pc, #60]	; (8007d1c <cppLoop+0x974>)
 8007ce0:	f7f9 fc90 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007ce4:	4b15      	ldr	r3, [pc, #84]	; (8007d3c <cppLoop+0x994>)
 8007ce6:	edd3 7a00 	vldr	s15, [r3]
 8007cea:	eeb0 0a67 	vmov.f32	s0, s15
 8007cee:	480e      	ldr	r0, [pc, #56]	; (8007d28 <cppLoop+0x980>)
 8007cf0:	f7fb fdb7 	bl	8003862 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8007cfa:	4806      	ldr	r0, [pc, #24]	; (8007d14 <cppLoop+0x96c>)
 8007cfc:	f7fa f9ba 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007d00:	f000 bf33 	b.w	8008b6a <cppLoop+0x17c2>
 8007d04:	f3af 8000 	nop.w
 8007d08:	9999999a 	.word	0x9999999a
 8007d0c:	3fb99999 	.word	0x3fb99999
 8007d10:	200005c0 	.word	0x200005c0
 8007d14:	200005cc 	.word	0x200005cc
 8007d18:	0801909c 	.word	0x0801909c
 8007d1c:	080190a4 	.word	0x080190a4
 8007d20:	080190ac 	.word	0x080190ac
 8007d24:	080190b4 	.word	0x080190b4
 8007d28:	20017da0 	.word	0x20017da0
 8007d2c:	2003c444 	.word	0x2003c444
 8007d30:	2003c44c 	.word	0x2003c44c
 8007d34:	2003c454 	.word	0x2003c454
 8007d38:	080190bc 	.word	0x080190bc
 8007d3c:	2003c45c 	.word	0x2003c45c
 8007d40:	080190c8 	.word	0x080190c8
 8007d44:	080190d4 	.word	0x080190d4
 8007d48:	080190e0 	.word	0x080190e0

	case 3:
		led.fullColor('Y');
 8007d4c:	2159      	movs	r1, #89	; 0x59
 8007d4e:	48aa      	ldr	r0, [pc, #680]	; (8007ff8 <cppLoop+0xc50>)
 8007d50:	f7fa f8d4 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d54:	f7f9 f9a4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d58:	2100      	movs	r1, #0
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f7f9 f9b0 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8007d60:	4ba6      	ldr	r3, [pc, #664]	; (8007ffc <cppLoop+0xc54>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7f8 fc07 	bl	8000578 <__aeabi_f2d>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	461a      	mov	r2, r3
 8007d70:	4623      	mov	r3, r4
 8007d72:	48a3      	ldr	r0, [pc, #652]	; (8008000 <cppLoop+0xc58>)
 8007d74:	f7f9 f9ce 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d78:	2101      	movs	r1, #1
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f7f9 f9a0 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8007d80:	4ba0      	ldr	r3, [pc, #640]	; (8008004 <cppLoop+0xc5c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7f8 fbf7 	bl	8000578 <__aeabi_f2d>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4623      	mov	r3, r4
 8007d92:	489d      	ldr	r0, [pc, #628]	; (8008008 <cppLoop+0xc60>)
 8007d94:	f7f9 f9be 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007d98:	489c      	ldr	r0, [pc, #624]	; (800800c <cppLoop+0xc64>)
 8007d9a:	f7fa f84b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	bf0c      	ite	eq
 8007da4:	2301      	moveq	r3, #1
 8007da6:	2300      	movne	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 86df 	beq.w	8008b6e <cppLoop+0x17c6>
			HAL_Delay(500);
 8007db0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007db4:	f001 f810 	bl	8008dd8 <HAL_Delay>

			led.LR(1, -1);
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	488e      	ldr	r0, [pc, #568]	; (8007ff8 <cppLoop+0xc50>)
 8007dc0:	f7fa f958 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	4892      	ldr	r0, [pc, #584]	; (8008010 <cppLoop+0xc68>)
 8007dc8:	f7fc f8c0 	bl	8003f4c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8007dcc:	4b8d      	ldr	r3, [pc, #564]	; (8008004 <cppLoop+0xc5c>)
 8007dce:	edd3 7a00 	vldr	s15, [r3]
 8007dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8007dd6:	488e      	ldr	r0, [pc, #568]	; (8008010 <cppLoop+0xc68>)
 8007dd8:	f7fb fd43 	bl	8003862 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007ddc:	4b87      	ldr	r3, [pc, #540]	; (8007ffc <cppLoop+0xc54>)
 8007dde:	edd3 7a00 	vldr	s15, [r3]
 8007de2:	eeb0 0a67 	vmov.f32	s0, s15
 8007de6:	488a      	ldr	r0, [pc, #552]	; (8008010 <cppLoop+0xc68>)
 8007de8:	f7fb fd4a 	bl	8003880 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8007dec:	4b85      	ldr	r3, [pc, #532]	; (8008004 <cppLoop+0xc5c>)
 8007dee:	edd3 7a00 	vldr	s15, [r3]
 8007df2:	eeb0 0a67 	vmov.f32	s0, s15
 8007df6:	4886      	ldr	r0, [pc, #536]	; (8008010 <cppLoop+0xc68>)
 8007df8:	f7fb fd61 	bl	80038be <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8007dfc:	4884      	ldr	r0, [pc, #528]	; (8008010 <cppLoop+0xc68>)
 8007dfe:	f7fb f887 	bl	8002f10 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007e02:	4883      	ldr	r0, [pc, #524]	; (8008010 <cppLoop+0xc68>)
 8007e04:	f7fb ffa4 	bl	8003d50 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007e08:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	487a      	ldr	r0, [pc, #488]	; (8007ff8 <cppLoop+0xc50>)
 8007e10:	f7fa f930 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007e14:	f000 beab 	b.w	8008b6e <cppLoop+0x17c6>

	case 4:
		led.fullColor('G');
 8007e18:	2147      	movs	r1, #71	; 0x47
 8007e1a:	4877      	ldr	r0, [pc, #476]	; (8007ff8 <cppLoop+0xc50>)
 8007e1c:	f7fa f86e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e20:	f7f9 f93e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e24:	2100      	movs	r1, #0
 8007e26:	2000      	movs	r0, #0
 8007e28:	f7f9 f94a 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8007e2c:	4878      	ldr	r0, [pc, #480]	; (8008010 <cppLoop+0xc68>)
 8007e2e:	f7fb fd75 	bl	800391c <_ZN9LineTrace14getMaxVelocityEv>
 8007e32:	ee10 3a10 	vmov	r3, s0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7f8 fb9e 	bl	8000578 <__aeabi_f2d>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	460c      	mov	r4, r1
 8007e40:	461a      	mov	r2, r3
 8007e42:	4623      	mov	r3, r4
 8007e44:	486e      	ldr	r0, [pc, #440]	; (8008000 <cppLoop+0xc58>)
 8007e46:	f7f9 f965 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	f7f9 f937 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8007e52:	486f      	ldr	r0, [pc, #444]	; (8008010 <cppLoop+0xc68>)
 8007e54:	f7fb fd81 	bl	800395a <_ZN9LineTrace14getMinVelocityEv>
 8007e58:	ee10 3a10 	vmov	r3, s0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7f8 fb8b 	bl	8000578 <__aeabi_f2d>
 8007e62:	4603      	mov	r3, r0
 8007e64:	460c      	mov	r4, r1
 8007e66:	461a      	mov	r2, r3
 8007e68:	4623      	mov	r3, r4
 8007e6a:	486a      	ldr	r0, [pc, #424]	; (8008014 <cppLoop+0xc6c>)
 8007e6c:	f7f9 f952 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007e70:	4866      	ldr	r0, [pc, #408]	; (800800c <cppLoop+0xc64>)
 8007e72:	f7f9 ffdf 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	bf0c      	ite	eq
 8007e7c:	2301      	moveq	r3, #1
 8007e7e:	2300      	movne	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d022      	beq.n	8007ecc <cppLoop+0xb24>
			led.LR(-1, 1);
 8007e86:	2201      	movs	r2, #1
 8007e88:	f04f 31ff 	mov.w	r1, #4294967295
 8007e8c:	485a      	ldr	r0, [pc, #360]	; (8007ff8 <cppLoop+0xc50>)
 8007e8e:	f7fa f8f1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e96:	f000 ff9f 	bl	8008dd8 <HAL_Delay>

			selector_vel++;
 8007e9a:	4b5f      	ldr	r3, [pc, #380]	; (8008018 <cppLoop+0xc70>)
 8007e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	b21a      	sxth	r2, r3
 8007ea8:	4b5b      	ldr	r3, [pc, #364]	; (8008018 <cppLoop+0xc70>)
 8007eaa:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8007eac:	4b5a      	ldr	r3, [pc, #360]	; (8008018 <cppLoop+0xc70>)
 8007eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	dd02      	ble.n	8007ebc <cppLoop+0xb14>
 8007eb6:	4b58      	ldr	r3, [pc, #352]	; (8008018 <cppLoop+0xc70>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8007ec2:	484d      	ldr	r0, [pc, #308]	; (8007ff8 <cppLoop+0xc50>)
 8007ec4:	f7fa f8d6 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8007ec8:	f000 be53 	b.w	8008b72 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_R){
 8007ecc:	484f      	ldr	r0, [pc, #316]	; (800800c <cppLoop+0xc64>)
 8007ece:	f7f9 ffb1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b10      	cmp	r3, #16
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2301      	moveq	r3, #1
 8007eda:	2300      	movne	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d03c      	beq.n	8007f5c <cppLoop+0xbb4>
			led.LR(-1, 1);
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8007ee8:	4843      	ldr	r0, [pc, #268]	; (8007ff8 <cppLoop+0xc50>)
 8007eea:	f7fa f8c3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007eee:	2064      	movs	r0, #100	; 0x64
 8007ef0:	f000 ff72 	bl	8008dd8 <HAL_Delay>
			if(selector_vel == 0)
 8007ef4:	4b48      	ldr	r3, [pc, #288]	; (8008018 <cppLoop+0xc70>)
 8007ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d113      	bne.n	8007f26 <cppLoop+0xb7e>
				adj_max_velocity = adj_max_velocity + 0.1;
 8007efe:	4b3f      	ldr	r3, [pc, #252]	; (8007ffc <cppLoop+0xc54>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f8 fb38 	bl	8000578 <__aeabi_f2d>
 8007f08:	a339      	add	r3, pc, #228	; (adr r3, 8007ff0 <cppLoop+0xc48>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f7f8 f9d5 	bl	80002bc <__adddf3>
 8007f12:	4603      	mov	r3, r0
 8007f14:	460c      	mov	r4, r1
 8007f16:	4618      	mov	r0, r3
 8007f18:	4621      	mov	r1, r4
 8007f1a:	f7f8 fe7d 	bl	8000c18 <__aeabi_d2f>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	4b36      	ldr	r3, [pc, #216]	; (8007ffc <cppLoop+0xc54>)
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e012      	b.n	8007f4c <cppLoop+0xba4>
				adj_min_velocity = adj_min_velocity + 0.1;
 8007f26:	4b37      	ldr	r3, [pc, #220]	; (8008004 <cppLoop+0xc5c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f8 fb24 	bl	8000578 <__aeabi_f2d>
 8007f30:	a32f      	add	r3, pc, #188	; (adr r3, 8007ff0 <cppLoop+0xc48>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 f9c1 	bl	80002bc <__adddf3>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	4618      	mov	r0, r3
 8007f40:	4621      	mov	r1, r4
 8007f42:	f7f8 fe69 	bl	8000c18 <__aeabi_d2f>
 8007f46:	4602      	mov	r2, r0
 8007f48:	4b2e      	ldr	r3, [pc, #184]	; (8008004 <cppLoop+0xc5c>)
 8007f4a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f04f 31ff 	mov.w	r1, #4294967295
 8007f52:	4829      	ldr	r0, [pc, #164]	; (8007ff8 <cppLoop+0xc50>)
 8007f54:	f7fa f88e 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007f58:	f000 be0b 	b.w	8008b72 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_L){
 8007f5c:	482b      	ldr	r0, [pc, #172]	; (800800c <cppLoop+0xc64>)
 8007f5e:	f7f9 ff69 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	bf0c      	ite	eq
 8007f68:	2301      	moveq	r3, #1
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d054      	beq.n	800801c <cppLoop+0xc74>
			led.LR(-1, 1);
 8007f72:	2201      	movs	r2, #1
 8007f74:	f04f 31ff 	mov.w	r1, #4294967295
 8007f78:	481f      	ldr	r0, [pc, #124]	; (8007ff8 <cppLoop+0xc50>)
 8007f7a:	f7fa f87b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f7e:	2064      	movs	r0, #100	; 0x64
 8007f80:	f000 ff2a 	bl	8008dd8 <HAL_Delay>
			if(selector_vel == 0)
 8007f84:	4b24      	ldr	r3, [pc, #144]	; (8008018 <cppLoop+0xc70>)
 8007f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d113      	bne.n	8007fb6 <cppLoop+0xc0e>
				adj_max_velocity = adj_max_velocity - 0.1;
 8007f8e:	4b1b      	ldr	r3, [pc, #108]	; (8007ffc <cppLoop+0xc54>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7f8 faf0 	bl	8000578 <__aeabi_f2d>
 8007f98:	a315      	add	r3, pc, #84	; (adr r3, 8007ff0 <cppLoop+0xc48>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 f98b 	bl	80002b8 <__aeabi_dsub>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	4621      	mov	r1, r4
 8007faa:	f7f8 fe35 	bl	8000c18 <__aeabi_d2f>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <cppLoop+0xc54>)
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	e012      	b.n	8007fdc <cppLoop+0xc34>
				adj_min_velocity = adj_min_velocity - 0.1;
 8007fb6:	4b13      	ldr	r3, [pc, #76]	; (8008004 <cppLoop+0xc5c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7f8 fadc 	bl	8000578 <__aeabi_f2d>
 8007fc0:	a30b      	add	r3, pc, #44	; (adr r3, 8007ff0 <cppLoop+0xc48>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f7f8 f977 	bl	80002b8 <__aeabi_dsub>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	4618      	mov	r0, r3
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	f7f8 fe21 	bl	8000c18 <__aeabi_d2f>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <cppLoop+0xc5c>)
 8007fda:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f04f 31ff 	mov.w	r1, #4294967295
 8007fe2:	4805      	ldr	r0, [pc, #20]	; (8007ff8 <cppLoop+0xc50>)
 8007fe4:	f7fa f846 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007fe8:	f000 bdc3 	b.w	8008b72 <cppLoop+0x17ca>
 8007fec:	f3af 8000 	nop.w
 8007ff0:	9999999a 	.word	0x9999999a
 8007ff4:	3fb99999 	.word	0x3fb99999
 8007ff8:	200005cc 	.word	0x200005cc
 8007ffc:	2003c464 	.word	0x2003c464
 8008000:	080190ec 	.word	0x080190ec
 8008004:	2003c474 	.word	0x2003c474
 8008008:	080190c8 	.word	0x080190c8
 800800c:	200005c0 	.word	0x200005c0
 8008010:	20017da0 	.word	0x20017da0
 8008014:	080190d4 	.word	0x080190d4
 8008018:	2003c440 	.word	0x2003c440
		else if(joy_stick.getValue() == JOY_C){
 800801c:	48bc      	ldr	r0, [pc, #752]	; (8008310 <cppLoop+0xf68>)
 800801e:	f7f9 ff09 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008022:	4603      	mov	r3, r0
 8008024:	2b02      	cmp	r3, #2
 8008026:	bf0c      	ite	eq
 8008028:	2301      	moveq	r3, #1
 800802a:	2300      	movne	r3, #0
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 859f 	beq.w	8008b72 <cppLoop+0x17ca>
			led.LR(-1, 1);
 8008034:	2201      	movs	r2, #1
 8008036:	f04f 31ff 	mov.w	r1, #4294967295
 800803a:	48b6      	ldr	r0, [pc, #728]	; (8008314 <cppLoop+0xf6c>)
 800803c:	f7fa f81a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008040:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008044:	f000 fec8 	bl	8008dd8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008048:	2300      	movs	r3, #0
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	4bb2      	ldr	r3, [pc, #712]	; (8008318 <cppLoop+0xf70>)
 800804e:	2201      	movs	r2, #1
 8008050:	49b2      	ldr	r1, [pc, #712]	; (800831c <cppLoop+0xf74>)
 8008052:	48b3      	ldr	r0, [pc, #716]	; (8008320 <cppLoop+0xf78>)
 8008054:	f7f9 fad6 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008058:	2300      	movs	r3, #0
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	4bb1      	ldr	r3, [pc, #708]	; (8008324 <cppLoop+0xf7c>)
 800805e:	2201      	movs	r2, #1
 8008060:	49b1      	ldr	r1, [pc, #708]	; (8008328 <cppLoop+0xf80>)
 8008062:	48af      	ldr	r0, [pc, #700]	; (8008320 <cppLoop+0xf78>)
 8008064:	f7f9 face 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008068:	4bab      	ldr	r3, [pc, #684]	; (8008318 <cppLoop+0xf70>)
 800806a:	edd3 7a00 	vldr	s15, [r3]
 800806e:	eeb0 0a67 	vmov.f32	s0, s15
 8008072:	48ae      	ldr	r0, [pc, #696]	; (800832c <cppLoop+0xf84>)
 8008074:	f7fb fc04 	bl	8003880 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008078:	4baa      	ldr	r3, [pc, #680]	; (8008324 <cppLoop+0xf7c>)
 800807a:	edd3 7a00 	vldr	s15, [r3]
 800807e:	eeb0 0a67 	vmov.f32	s0, s15
 8008082:	48aa      	ldr	r0, [pc, #680]	; (800832c <cppLoop+0xf84>)
 8008084:	f7fb fc1b 	bl	80038be <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008088:	2200      	movs	r2, #0
 800808a:	f04f 31ff 	mov.w	r1, #4294967295
 800808e:	48a1      	ldr	r0, [pc, #644]	; (8008314 <cppLoop+0xf6c>)
 8008090:	f7f9 fff0 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008094:	f000 bd6d 	b.w	8008b72 <cppLoop+0x17ca>

	case 5:
		led.fullColor('M');
 8008098:	214d      	movs	r1, #77	; 0x4d
 800809a:	489e      	ldr	r0, [pc, #632]	; (8008314 <cppLoop+0xf6c>)
 800809c:	f7f9 ff2e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80080a0:	f7f8 fffe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80080a4:	2100      	movs	r1, #0
 80080a6:	2000      	movs	r0, #0
 80080a8:	f7f9 f80a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80080ac:	4ba0      	ldr	r3, [pc, #640]	; (8008330 <cppLoop+0xf88>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7f8 fa61 	bl	8000578 <__aeabi_f2d>
 80080b6:	4603      	mov	r3, r0
 80080b8:	460c      	mov	r4, r1
 80080ba:	461a      	mov	r2, r3
 80080bc:	4623      	mov	r3, r4
 80080be:	489d      	ldr	r0, [pc, #628]	; (8008334 <cppLoop+0xf8c>)
 80080c0:	f7f9 f828 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080c4:	2101      	movs	r1, #1
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7f8 fffa 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80080cc:	4b9a      	ldr	r3, [pc, #616]	; (8008338 <cppLoop+0xf90>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f8 fa51 	bl	8000578 <__aeabi_f2d>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	461a      	mov	r2, r3
 80080dc:	4623      	mov	r3, r4
 80080de:	4897      	ldr	r0, [pc, #604]	; (800833c <cppLoop+0xf94>)
 80080e0:	f7f9 f818 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80080e4:	488a      	ldr	r0, [pc, #552]	; (8008310 <cppLoop+0xf68>)
 80080e6:	f7f9 fea5 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	bf0c      	ite	eq
 80080f0:	2301      	moveq	r3, #1
 80080f2:	2300      	movne	r3, #0
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 853d 	beq.w	8008b76 <cppLoop+0x17ce>
			HAL_Delay(500);
 80080fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008100:	f000 fe6a 	bl	8008dd8 <HAL_Delay>

			led.LR(1, -1);
 8008104:	f04f 32ff 	mov.w	r2, #4294967295
 8008108:	2101      	movs	r1, #1
 800810a:	4882      	ldr	r0, [pc, #520]	; (8008314 <cppLoop+0xf6c>)
 800810c:	f7f9 ffb2 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008110:	2102      	movs	r1, #2
 8008112:	4886      	ldr	r0, [pc, #536]	; (800832c <cppLoop+0xf84>)
 8008114:	f7fb ff1a 	bl	8003f4c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008118:	4b87      	ldr	r3, [pc, #540]	; (8008338 <cppLoop+0xf90>)
 800811a:	edd3 7a00 	vldr	s15, [r3]
 800811e:	eeb0 0a67 	vmov.f32	s0, s15
 8008122:	4882      	ldr	r0, [pc, #520]	; (800832c <cppLoop+0xf84>)
 8008124:	f7fb fb9d 	bl	8003862 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008128:	4b81      	ldr	r3, [pc, #516]	; (8008330 <cppLoop+0xf88>)
 800812a:	edd3 7a00 	vldr	s15, [r3]
 800812e:	eeb0 0a67 	vmov.f32	s0, s15
 8008132:	487e      	ldr	r0, [pc, #504]	; (800832c <cppLoop+0xf84>)
 8008134:	f7fb fbb3 	bl	800389e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008138:	4b7f      	ldr	r3, [pc, #508]	; (8008338 <cppLoop+0xf90>)
 800813a:	edd3 7a00 	vldr	s15, [r3]
 800813e:	eeb0 0a67 	vmov.f32	s0, s15
 8008142:	487a      	ldr	r0, [pc, #488]	; (800832c <cppLoop+0xf84>)
 8008144:	f7fb fbcb 	bl	80038de <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008148:	4878      	ldr	r0, [pc, #480]	; (800832c <cppLoop+0xf84>)
 800814a:	f7fa fee1 	bl	8002f10 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800814e:	4877      	ldr	r0, [pc, #476]	; (800832c <cppLoop+0xf84>)
 8008150:	f7fb fdfe 	bl	8003d50 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008154:	f04f 32ff 	mov.w	r2, #4294967295
 8008158:	2100      	movs	r1, #0
 800815a:	486e      	ldr	r0, [pc, #440]	; (8008314 <cppLoop+0xf6c>)
 800815c:	f7f9 ff8a 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008160:	f000 bd09 	b.w	8008b76 <cppLoop+0x17ce>

	case 6:
		led.fullColor('R');
 8008164:	2152      	movs	r1, #82	; 0x52
 8008166:	486b      	ldr	r0, [pc, #428]	; (8008314 <cppLoop+0xf6c>)
 8008168:	f7f9 fec8 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800816c:	f7f8 ff98 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008170:	2100      	movs	r1, #0
 8008172:	2000      	movs	r0, #0
 8008174:	f7f8 ffa4 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008178:	486c      	ldr	r0, [pc, #432]	; (800832c <cppLoop+0xf84>)
 800817a:	f7fb fbde 	bl	800393a <_ZN9LineTrace15getMaxVelocity2Ev>
 800817e:	ee10 3a10 	vmov	r3, s0
 8008182:	4618      	mov	r0, r3
 8008184:	f7f8 f9f8 	bl	8000578 <__aeabi_f2d>
 8008188:	4603      	mov	r3, r0
 800818a:	460c      	mov	r4, r1
 800818c:	461a      	mov	r2, r3
 800818e:	4623      	mov	r3, r4
 8008190:	4868      	ldr	r0, [pc, #416]	; (8008334 <cppLoop+0xf8c>)
 8008192:	f7f8 ffbf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008196:	2101      	movs	r1, #1
 8008198:	2000      	movs	r0, #0
 800819a:	f7f8 ff91 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 800819e:	4863      	ldr	r0, [pc, #396]	; (800832c <cppLoop+0xf84>)
 80081a0:	f7fb fbeb 	bl	800397a <_ZN9LineTrace15getMinVelocity2Ev>
 80081a4:	ee10 3a10 	vmov	r3, s0
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7f8 f9e5 	bl	8000578 <__aeabi_f2d>
 80081ae:	4603      	mov	r3, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	461a      	mov	r2, r3
 80081b4:	4623      	mov	r3, r4
 80081b6:	4862      	ldr	r0, [pc, #392]	; (8008340 <cppLoop+0xf98>)
 80081b8:	f7f8 ffac 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80081bc:	4854      	ldr	r0, [pc, #336]	; (8008310 <cppLoop+0xf68>)
 80081be:	f7f9 fe39 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	bf0c      	ite	eq
 80081c8:	2301      	moveq	r3, #1
 80081ca:	2300      	movne	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d022      	beq.n	8008218 <cppLoop+0xe70>
			led.LR(-1, 1);
 80081d2:	2201      	movs	r2, #1
 80081d4:	f04f 31ff 	mov.w	r1, #4294967295
 80081d8:	484e      	ldr	r0, [pc, #312]	; (8008314 <cppLoop+0xf6c>)
 80081da:	f7f9 ff4b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80081de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80081e2:	f000 fdf9 	bl	8008dd8 <HAL_Delay>

			selector_vel2++;
 80081e6:	4b57      	ldr	r3, [pc, #348]	; (8008344 <cppLoop+0xf9c>)
 80081e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3301      	adds	r3, #1
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	b21a      	sxth	r2, r3
 80081f4:	4b53      	ldr	r3, [pc, #332]	; (8008344 <cppLoop+0xf9c>)
 80081f6:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80081f8:	4b52      	ldr	r3, [pc, #328]	; (8008344 <cppLoop+0xf9c>)
 80081fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	dd02      	ble.n	8008208 <cppLoop+0xe60>
 8008202:	4b50      	ldr	r3, [pc, #320]	; (8008344 <cppLoop+0xf9c>)
 8008204:	2200      	movs	r2, #0
 8008206:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008208:	2200      	movs	r2, #0
 800820a:	f04f 31ff 	mov.w	r1, #4294967295
 800820e:	4841      	ldr	r0, [pc, #260]	; (8008314 <cppLoop+0xf6c>)
 8008210:	f7f9 ff30 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008214:	f000 bcb1 	b.w	8008b7a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_R){
 8008218:	483d      	ldr	r0, [pc, #244]	; (8008310 <cppLoop+0xf68>)
 800821a:	f7f9 fe0b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800821e:	4603      	mov	r3, r0
 8008220:	2b10      	cmp	r3, #16
 8008222:	bf0c      	ite	eq
 8008224:	2301      	moveq	r3, #1
 8008226:	2300      	movne	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d03c      	beq.n	80082a8 <cppLoop+0xf00>
			led.LR(-1, 1);
 800822e:	2201      	movs	r2, #1
 8008230:	f04f 31ff 	mov.w	r1, #4294967295
 8008234:	4837      	ldr	r0, [pc, #220]	; (8008314 <cppLoop+0xf6c>)
 8008236:	f7f9 ff1d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800823a:	2064      	movs	r0, #100	; 0x64
 800823c:	f000 fdcc 	bl	8008dd8 <HAL_Delay>
			if(selector_vel2 == 0)
 8008240:	4b40      	ldr	r3, [pc, #256]	; (8008344 <cppLoop+0xf9c>)
 8008242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d113      	bne.n	8008272 <cppLoop+0xeca>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800824a:	4b39      	ldr	r3, [pc, #228]	; (8008330 <cppLoop+0xf88>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f7f8 f992 	bl	8000578 <__aeabi_f2d>
 8008254:	a32c      	add	r3, pc, #176	; (adr r3, 8008308 <cppLoop+0xf60>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f7f8 f82f 	bl	80002bc <__adddf3>
 800825e:	4603      	mov	r3, r0
 8008260:	460c      	mov	r4, r1
 8008262:	4618      	mov	r0, r3
 8008264:	4621      	mov	r1, r4
 8008266:	f7f8 fcd7 	bl	8000c18 <__aeabi_d2f>
 800826a:	4602      	mov	r2, r0
 800826c:	4b30      	ldr	r3, [pc, #192]	; (8008330 <cppLoop+0xf88>)
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	e012      	b.n	8008298 <cppLoop+0xef0>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008272:	4b31      	ldr	r3, [pc, #196]	; (8008338 <cppLoop+0xf90>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f7f8 f97e 	bl	8000578 <__aeabi_f2d>
 800827c:	a322      	add	r3, pc, #136	; (adr r3, 8008308 <cppLoop+0xf60>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	f7f8 f81b 	bl	80002bc <__adddf3>
 8008286:	4603      	mov	r3, r0
 8008288:	460c      	mov	r4, r1
 800828a:	4618      	mov	r0, r3
 800828c:	4621      	mov	r1, r4
 800828e:	f7f8 fcc3 	bl	8000c18 <__aeabi_d2f>
 8008292:	4602      	mov	r2, r0
 8008294:	4b28      	ldr	r3, [pc, #160]	; (8008338 <cppLoop+0xf90>)
 8008296:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008298:	2200      	movs	r2, #0
 800829a:	f04f 31ff 	mov.w	r1, #4294967295
 800829e:	481d      	ldr	r0, [pc, #116]	; (8008314 <cppLoop+0xf6c>)
 80082a0:	f7f9 fee8 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80082a4:	f000 bc69 	b.w	8008b7a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_L){
 80082a8:	4819      	ldr	r0, [pc, #100]	; (8008310 <cppLoop+0xf68>)
 80082aa:	f7f9 fdc3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	bf0c      	ite	eq
 80082b4:	2301      	moveq	r3, #1
 80082b6:	2300      	movne	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d05e      	beq.n	800837c <cppLoop+0xfd4>
			led.LR(-1, 1);
 80082be:	2201      	movs	r2, #1
 80082c0:	f04f 31ff 	mov.w	r1, #4294967295
 80082c4:	4813      	ldr	r0, [pc, #76]	; (8008314 <cppLoop+0xf6c>)
 80082c6:	f7f9 fed5 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082ca:	2064      	movs	r0, #100	; 0x64
 80082cc:	f000 fd84 	bl	8008dd8 <HAL_Delay>
			if(selector_vel2 == 0)
 80082d0:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <cppLoop+0xf9c>)
 80082d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d136      	bne.n	8008348 <cppLoop+0xfa0>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80082da:	4b15      	ldr	r3, [pc, #84]	; (8008330 <cppLoop+0xf88>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f7f8 f94a 	bl	8000578 <__aeabi_f2d>
 80082e4:	a308      	add	r3, pc, #32	; (adr r3, 8008308 <cppLoop+0xf60>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f7 ffe5 	bl	80002b8 <__aeabi_dsub>
 80082ee:	4603      	mov	r3, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	4618      	mov	r0, r3
 80082f4:	4621      	mov	r1, r4
 80082f6:	f7f8 fc8f 	bl	8000c18 <__aeabi_d2f>
 80082fa:	4602      	mov	r2, r0
 80082fc:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <cppLoop+0xf88>)
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	e035      	b.n	800836e <cppLoop+0xfc6>
 8008302:	bf00      	nop
 8008304:	f3af 8000 	nop.w
 8008308:	9999999a 	.word	0x9999999a
 800830c:	3fb99999 	.word	0x3fb99999
 8008310:	200005c0 	.word	0x200005c0
 8008314:	200005cc 	.word	0x200005cc
 8008318:	2003c464 	.word	0x2003c464
 800831c:	080190f8 	.word	0x080190f8
 8008320:	080190a4 	.word	0x080190a4
 8008324:	2003c474 	.word	0x2003c474
 8008328:	08019104 	.word	0x08019104
 800832c:	20017da0 	.word	0x20017da0
 8008330:	2003c46c 	.word	0x2003c46c
 8008334:	08019110 	.word	0x08019110
 8008338:	2003c47c 	.word	0x2003c47c
 800833c:	080190c8 	.word	0x080190c8
 8008340:	080190d4 	.word	0x080190d4
 8008344:	2003c442 	.word	0x2003c442
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008348:	4bbd      	ldr	r3, [pc, #756]	; (8008640 <cppLoop+0x1298>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f7f8 f913 	bl	8000578 <__aeabi_f2d>
 8008352:	a3b9      	add	r3, pc, #740	; (adr r3, 8008638 <cppLoop+0x1290>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f7f7 ffae 	bl	80002b8 <__aeabi_dsub>
 800835c:	4603      	mov	r3, r0
 800835e:	460c      	mov	r4, r1
 8008360:	4618      	mov	r0, r3
 8008362:	4621      	mov	r1, r4
 8008364:	f7f8 fc58 	bl	8000c18 <__aeabi_d2f>
 8008368:	4602      	mov	r2, r0
 800836a:	4bb5      	ldr	r3, [pc, #724]	; (8008640 <cppLoop+0x1298>)
 800836c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800836e:	2200      	movs	r2, #0
 8008370:	f04f 31ff 	mov.w	r1, #4294967295
 8008374:	48b3      	ldr	r0, [pc, #716]	; (8008644 <cppLoop+0x129c>)
 8008376:	f7f9 fe7d 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800837a:	e3fe      	b.n	8008b7a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_C){
 800837c:	48b2      	ldr	r0, [pc, #712]	; (8008648 <cppLoop+0x12a0>)
 800837e:	f7f9 fd59 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008382:	4603      	mov	r3, r0
 8008384:	2b02      	cmp	r3, #2
 8008386:	bf0c      	ite	eq
 8008388:	2301      	moveq	r3, #1
 800838a:	2300      	movne	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 83f3 	beq.w	8008b7a <cppLoop+0x17d2>
			led.LR(-1, 1);
 8008394:	2201      	movs	r2, #1
 8008396:	f04f 31ff 	mov.w	r1, #4294967295
 800839a:	48aa      	ldr	r0, [pc, #680]	; (8008644 <cppLoop+0x129c>)
 800839c:	f7f9 fe6a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80083a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80083a4:	f000 fd18 	bl	8008dd8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80083a8:	2300      	movs	r3, #0
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	4ba7      	ldr	r3, [pc, #668]	; (800864c <cppLoop+0x12a4>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	49a7      	ldr	r1, [pc, #668]	; (8008650 <cppLoop+0x12a8>)
 80083b2:	48a8      	ldr	r0, [pc, #672]	; (8008654 <cppLoop+0x12ac>)
 80083b4:	f7f9 f926 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80083b8:	2300      	movs	r3, #0
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	4ba0      	ldr	r3, [pc, #640]	; (8008640 <cppLoop+0x1298>)
 80083be:	2201      	movs	r2, #1
 80083c0:	49a5      	ldr	r1, [pc, #660]	; (8008658 <cppLoop+0x12b0>)
 80083c2:	48a4      	ldr	r0, [pc, #656]	; (8008654 <cppLoop+0x12ac>)
 80083c4:	f7f9 f91e 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80083c8:	4ba0      	ldr	r3, [pc, #640]	; (800864c <cppLoop+0x12a4>)
 80083ca:	edd3 7a00 	vldr	s15, [r3]
 80083ce:	eeb0 0a67 	vmov.f32	s0, s15
 80083d2:	48a2      	ldr	r0, [pc, #648]	; (800865c <cppLoop+0x12b4>)
 80083d4:	f7fb fa63 	bl	800389e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80083d8:	4b99      	ldr	r3, [pc, #612]	; (8008640 <cppLoop+0x1298>)
 80083da:	edd3 7a00 	vldr	s15, [r3]
 80083de:	eeb0 0a67 	vmov.f32	s0, s15
 80083e2:	489e      	ldr	r0, [pc, #632]	; (800865c <cppLoop+0x12b4>)
 80083e4:	f7fb fa7b 	bl	80038de <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 80083e8:	2200      	movs	r2, #0
 80083ea:	f04f 31ff 	mov.w	r1, #4294967295
 80083ee:	4895      	ldr	r0, [pc, #596]	; (8008644 <cppLoop+0x129c>)
 80083f0:	f7f9 fe40 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80083f4:	e3c1      	b.n	8008b7a <cppLoop+0x17d2>

	case 7:
		led.fullColor('W');
 80083f6:	2157      	movs	r1, #87	; 0x57
 80083f8:	4892      	ldr	r0, [pc, #584]	; (8008644 <cppLoop+0x129c>)
 80083fa:	f7f9 fd7f 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80083fe:	f7f8 fe4f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008402:	2100      	movs	r1, #0
 8008404:	2000      	movs	r0, #0
 8008406:	f7f8 fe5b 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 800840a:	4894      	ldr	r0, [pc, #592]	; (800865c <cppLoop+0x12b4>)
 800840c:	f7fb fadf 	bl	80039ce <_ZN9LineTrace9getMaxAccEv>
 8008410:	ee10 3a10 	vmov	r3, s0
 8008414:	4618      	mov	r0, r3
 8008416:	f7f8 f8af 	bl	8000578 <__aeabi_f2d>
 800841a:	4603      	mov	r3, r0
 800841c:	460c      	mov	r4, r1
 800841e:	461a      	mov	r2, r3
 8008420:	4623      	mov	r3, r4
 8008422:	488f      	ldr	r0, [pc, #572]	; (8008660 <cppLoop+0x12b8>)
 8008424:	f7f8 fe76 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008428:	2101      	movs	r1, #1
 800842a:	2000      	movs	r0, #0
 800842c:	f7f8 fe48 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008430:	488a      	ldr	r0, [pc, #552]	; (800865c <cppLoop+0x12b4>)
 8008432:	f7fb fade 	bl	80039f2 <_ZN9LineTrace9getMaxDecEv>
 8008436:	ee10 3a10 	vmov	r3, s0
 800843a:	4618      	mov	r0, r3
 800843c:	f7f8 f89c 	bl	8000578 <__aeabi_f2d>
 8008440:	4603      	mov	r3, r0
 8008442:	460c      	mov	r4, r1
 8008444:	461a      	mov	r2, r3
 8008446:	4623      	mov	r3, r4
 8008448:	4886      	ldr	r0, [pc, #536]	; (8008664 <cppLoop+0x12bc>)
 800844a:	f7f8 fe63 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800844e:	487e      	ldr	r0, [pc, #504]	; (8008648 <cppLoop+0x12a0>)
 8008450:	f7f9 fcf0 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008454:	4603      	mov	r3, r0
 8008456:	2b08      	cmp	r3, #8
 8008458:	bf0c      	ite	eq
 800845a:	2301      	moveq	r3, #1
 800845c:	2300      	movne	r3, #0
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d021      	beq.n	80084a8 <cppLoop+0x1100>
			led.LR(-1, 1);
 8008464:	2201      	movs	r2, #1
 8008466:	f04f 31ff 	mov.w	r1, #4294967295
 800846a:	4876      	ldr	r0, [pc, #472]	; (8008644 <cppLoop+0x129c>)
 800846c:	f7f9 fe02 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008470:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008474:	f000 fcb0 	bl	8008dd8 <HAL_Delay>

			selector_acc++;
 8008478:	4b7b      	ldr	r3, [pc, #492]	; (8008668 <cppLoop+0x12c0>)
 800847a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800847e:	b29b      	uxth	r3, r3
 8008480:	3301      	adds	r3, #1
 8008482:	b29b      	uxth	r3, r3
 8008484:	b21a      	sxth	r2, r3
 8008486:	4b78      	ldr	r3, [pc, #480]	; (8008668 <cppLoop+0x12c0>)
 8008488:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800848a:	4b77      	ldr	r3, [pc, #476]	; (8008668 <cppLoop+0x12c0>)
 800848c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008490:	2b01      	cmp	r3, #1
 8008492:	dd02      	ble.n	800849a <cppLoop+0x10f2>
 8008494:	4b74      	ldr	r3, [pc, #464]	; (8008668 <cppLoop+0x12c0>)
 8008496:	2200      	movs	r2, #0
 8008498:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800849a:	2200      	movs	r2, #0
 800849c:	f04f 31ff 	mov.w	r1, #4294967295
 80084a0:	4868      	ldr	r0, [pc, #416]	; (8008644 <cppLoop+0x129c>)
 80084a2:	f7f9 fde7 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80084a6:	e36a      	b.n	8008b7e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_R){
 80084a8:	4867      	ldr	r0, [pc, #412]	; (8008648 <cppLoop+0x12a0>)
 80084aa:	f7f9 fcc3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b10      	cmp	r3, #16
 80084b2:	bf0c      	ite	eq
 80084b4:	2301      	moveq	r3, #1
 80084b6:	2300      	movne	r3, #0
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d03b      	beq.n	8008536 <cppLoop+0x118e>
			led.LR(-1, 1);
 80084be:	2201      	movs	r2, #1
 80084c0:	f04f 31ff 	mov.w	r1, #4294967295
 80084c4:	485f      	ldr	r0, [pc, #380]	; (8008644 <cppLoop+0x129c>)
 80084c6:	f7f9 fdd5 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80084ca:	2064      	movs	r0, #100	; 0x64
 80084cc:	f000 fc84 	bl	8008dd8 <HAL_Delay>
			if(selector_acc == 0){
 80084d0:	4b65      	ldr	r3, [pc, #404]	; (8008668 <cppLoop+0x12c0>)
 80084d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d113      	bne.n	8008502 <cppLoop+0x115a>
				adj_acc = adj_acc + 0.1;
 80084da:	4b64      	ldr	r3, [pc, #400]	; (800866c <cppLoop+0x12c4>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7f8 f84a 	bl	8000578 <__aeabi_f2d>
 80084e4:	a354      	add	r3, pc, #336	; (adr r3, 8008638 <cppLoop+0x1290>)
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f7f7 fee7 	bl	80002bc <__adddf3>
 80084ee:	4603      	mov	r3, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	4618      	mov	r0, r3
 80084f4:	4621      	mov	r1, r4
 80084f6:	f7f8 fb8f 	bl	8000c18 <__aeabi_d2f>
 80084fa:	4602      	mov	r2, r0
 80084fc:	4b5b      	ldr	r3, [pc, #364]	; (800866c <cppLoop+0x12c4>)
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	e012      	b.n	8008528 <cppLoop+0x1180>
				adj_dec = adj_dec + 0.1;
 8008502:	4b5b      	ldr	r3, [pc, #364]	; (8008670 <cppLoop+0x12c8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4618      	mov	r0, r3
 8008508:	f7f8 f836 	bl	8000578 <__aeabi_f2d>
 800850c:	a34a      	add	r3, pc, #296	; (adr r3, 8008638 <cppLoop+0x1290>)
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	f7f7 fed3 	bl	80002bc <__adddf3>
 8008516:	4603      	mov	r3, r0
 8008518:	460c      	mov	r4, r1
 800851a:	4618      	mov	r0, r3
 800851c:	4621      	mov	r1, r4
 800851e:	f7f8 fb7b 	bl	8000c18 <__aeabi_d2f>
 8008522:	4602      	mov	r2, r0
 8008524:	4b52      	ldr	r3, [pc, #328]	; (8008670 <cppLoop+0x12c8>)
 8008526:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008528:	2200      	movs	r2, #0
 800852a:	f04f 31ff 	mov.w	r1, #4294967295
 800852e:	4845      	ldr	r0, [pc, #276]	; (8008644 <cppLoop+0x129c>)
 8008530:	f7f9 fda0 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008534:	e323      	b.n	8008b7e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_L){
 8008536:	4844      	ldr	r0, [pc, #272]	; (8008648 <cppLoop+0x12a0>)
 8008538:	f7f9 fc7c 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800853c:	4603      	mov	r3, r0
 800853e:	2b01      	cmp	r3, #1
 8008540:	bf0c      	ite	eq
 8008542:	2301      	moveq	r3, #1
 8008544:	2300      	movne	r3, #0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d03b      	beq.n	80085c4 <cppLoop+0x121c>
			led.LR(-1, 1);
 800854c:	2201      	movs	r2, #1
 800854e:	f04f 31ff 	mov.w	r1, #4294967295
 8008552:	483c      	ldr	r0, [pc, #240]	; (8008644 <cppLoop+0x129c>)
 8008554:	f7f9 fd8e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008558:	2064      	movs	r0, #100	; 0x64
 800855a:	f000 fc3d 	bl	8008dd8 <HAL_Delay>
			if(selector_acc == 0){
 800855e:	4b42      	ldr	r3, [pc, #264]	; (8008668 <cppLoop+0x12c0>)
 8008560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d113      	bne.n	8008590 <cppLoop+0x11e8>
				adj_acc = adj_acc - 0.1;
 8008568:	4b40      	ldr	r3, [pc, #256]	; (800866c <cppLoop+0x12c4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f7f8 f803 	bl	8000578 <__aeabi_f2d>
 8008572:	a331      	add	r3, pc, #196	; (adr r3, 8008638 <cppLoop+0x1290>)
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	f7f7 fe9e 	bl	80002b8 <__aeabi_dsub>
 800857c:	4603      	mov	r3, r0
 800857e:	460c      	mov	r4, r1
 8008580:	4618      	mov	r0, r3
 8008582:	4621      	mov	r1, r4
 8008584:	f7f8 fb48 	bl	8000c18 <__aeabi_d2f>
 8008588:	4602      	mov	r2, r0
 800858a:	4b38      	ldr	r3, [pc, #224]	; (800866c <cppLoop+0x12c4>)
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	e012      	b.n	80085b6 <cppLoop+0x120e>
				adj_dec = adj_dec - 0.1;
 8008590:	4b37      	ldr	r3, [pc, #220]	; (8008670 <cppLoop+0x12c8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7f7 ffef 	bl	8000578 <__aeabi_f2d>
 800859a:	a327      	add	r3, pc, #156	; (adr r3, 8008638 <cppLoop+0x1290>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f7f7 fe8a 	bl	80002b8 <__aeabi_dsub>
 80085a4:	4603      	mov	r3, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	4618      	mov	r0, r3
 80085aa:	4621      	mov	r1, r4
 80085ac:	f7f8 fb34 	bl	8000c18 <__aeabi_d2f>
 80085b0:	4602      	mov	r2, r0
 80085b2:	4b2f      	ldr	r3, [pc, #188]	; (8008670 <cppLoop+0x12c8>)
 80085b4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80085b6:	2200      	movs	r2, #0
 80085b8:	f04f 31ff 	mov.w	r1, #4294967295
 80085bc:	4821      	ldr	r0, [pc, #132]	; (8008644 <cppLoop+0x129c>)
 80085be:	f7f9 fd59 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80085c2:	e2dc      	b.n	8008b7e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_C){
 80085c4:	4820      	ldr	r0, [pc, #128]	; (8008648 <cppLoop+0x12a0>)
 80085c6:	f7f9 fc35 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	bf0c      	ite	eq
 80085d0:	2301      	moveq	r3, #1
 80085d2:	2300      	movne	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 82d1 	beq.w	8008b7e <cppLoop+0x17d6>
			led.LR(-1, 1);
 80085dc:	2201      	movs	r2, #1
 80085de:	f04f 31ff 	mov.w	r1, #4294967295
 80085e2:	4818      	ldr	r0, [pc, #96]	; (8008644 <cppLoop+0x129c>)
 80085e4:	f7f9 fd46 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085ec:	f000 fbf4 	bl	8008dd8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 80085f0:	2300      	movs	r3, #0
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	4b1d      	ldr	r3, [pc, #116]	; (800866c <cppLoop+0x12c4>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	491e      	ldr	r1, [pc, #120]	; (8008674 <cppLoop+0x12cc>)
 80085fa:	4816      	ldr	r0, [pc, #88]	; (8008654 <cppLoop+0x12ac>)
 80085fc:	f7f9 f802 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008600:	2300      	movs	r3, #0
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <cppLoop+0x12c8>)
 8008606:	2201      	movs	r2, #1
 8008608:	491b      	ldr	r1, [pc, #108]	; (8008678 <cppLoop+0x12d0>)
 800860a:	4812      	ldr	r0, [pc, #72]	; (8008654 <cppLoop+0x12ac>)
 800860c:	f7f8 fffa 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008610:	4b16      	ldr	r3, [pc, #88]	; (800866c <cppLoop+0x12c4>)
 8008612:	edd3 7a00 	vldr	s15, [r3]
 8008616:	4b16      	ldr	r3, [pc, #88]	; (8008670 <cppLoop+0x12c8>)
 8008618:	ed93 7a00 	vldr	s14, [r3]
 800861c:	eef0 0a47 	vmov.f32	s1, s14
 8008620:	eeb0 0a67 	vmov.f32	s0, s15
 8008624:	480d      	ldr	r0, [pc, #52]	; (800865c <cppLoop+0x12b4>)
 8008626:	f7fb f9b8 	bl	800399a <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800862a:	2200      	movs	r2, #0
 800862c:	f04f 31ff 	mov.w	r1, #4294967295
 8008630:	4804      	ldr	r0, [pc, #16]	; (8008644 <cppLoop+0x129c>)
 8008632:	f7f9 fd1f 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008636:	e2a2      	b.n	8008b7e <cppLoop+0x17d6>
 8008638:	9999999a 	.word	0x9999999a
 800863c:	3fb99999 	.word	0x3fb99999
 8008640:	2003c47c 	.word	0x2003c47c
 8008644:	200005cc 	.word	0x200005cc
 8008648:	200005c0 	.word	0x200005c0
 800864c:	2003c46c 	.word	0x2003c46c
 8008650:	0801911c 	.word	0x0801911c
 8008654:	080190a4 	.word	0x080190a4
 8008658:	08019128 	.word	0x08019128
 800865c:	20017da0 	.word	0x20017da0
 8008660:	08019134 	.word	0x08019134
 8008664:	08019140 	.word	0x08019140
 8008668:	2003c43e 	.word	0x2003c43e
 800866c:	2003c484 	.word	0x2003c484
 8008670:	2003c48c 	.word	0x2003c48c
 8008674:	0801914c 	.word	0x0801914c
 8008678:	08019154 	.word	0x08019154

	case 8:
		led.fullColor('~');
 800867c:	217e      	movs	r1, #126	; 0x7e
 800867e:	48ca      	ldr	r0, [pc, #808]	; (80089a8 <cppLoop+0x1600>)
 8008680:	f7f9 fc3c 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008684:	f7f8 fd0c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008688:	2100      	movs	r1, #0
 800868a:	2000      	movs	r0, #0
 800868c:	f7f8 fd18 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 8008690:	48c6      	ldr	r0, [pc, #792]	; (80089ac <cppLoop+0x1604>)
 8008692:	f7f8 fd3f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008696:	2101      	movs	r1, #1
 8008698:	2000      	movs	r0, #0
 800869a:	f7f8 fd11 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800869e:	48c4      	ldr	r0, [pc, #784]	; (80089b0 <cppLoop+0x1608>)
 80086a0:	f7f8 fd38 	bl	8001114 <lcd_printf>

		break;
 80086a4:	e27a      	b.n	8008b9c <cppLoop+0x17f4>

	case 9:
		led.fullColor('~');
 80086a6:	217e      	movs	r1, #126	; 0x7e
 80086a8:	48bf      	ldr	r0, [pc, #764]	; (80089a8 <cppLoop+0x1600>)
 80086aa:	f7f9 fc27 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80086ae:	f7f8 fcf7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086b2:	2100      	movs	r1, #0
 80086b4:	2000      	movs	r0, #0
 80086b6:	f7f8 fd03 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80086ba:	48be      	ldr	r0, [pc, #760]	; (80089b4 <cppLoop+0x160c>)
 80086bc:	f7f8 fd2a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086c0:	2101      	movs	r1, #1
 80086c2:	2000      	movs	r0, #0
 80086c4:	f7f8 fcfc 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80086c8:	48bb      	ldr	r0, [pc, #748]	; (80089b8 <cppLoop+0x1610>)
 80086ca:	f7f8 fd23 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80086ce:	48bb      	ldr	r0, [pc, #748]	; (80089bc <cppLoop+0x1614>)
 80086d0:	f7f9 fbb0 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	bf0c      	ite	eq
 80086da:	2301      	moveq	r3, #1
 80086dc:	2300      	movne	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 824e 	beq.w	8008b82 <cppLoop+0x17da>
			led.LR(-1, 1);
 80086e6:	2201      	movs	r2, #1
 80086e8:	f04f 31ff 	mov.w	r1, #4294967295
 80086ec:	48ae      	ldr	r0, [pc, #696]	; (80089a8 <cppLoop+0x1600>)
 80086ee:	f7f9 fcc1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80086f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086f6:	f000 fb6f 	bl	8008dd8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80086fa:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80089c0 <cppLoop+0x1618>
 80086fe:	48b1      	ldr	r0, [pc, #708]	; (80089c4 <cppLoop+0x161c>)
 8008700:	f7fb f8a0 	bl	8003844 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008704:	48af      	ldr	r0, [pc, #700]	; (80089c4 <cppLoop+0x161c>)
 8008706:	f7fb fa95 	bl	8003c34 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800870a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800870e:	f000 fb63 	bl	8008dd8 <HAL_Delay>

			led.fullColor('R');
 8008712:	2152      	movs	r1, #82	; 0x52
 8008714:	48a4      	ldr	r0, [pc, #656]	; (80089a8 <cppLoop+0x1600>)
 8008716:	f7f9 fbf1 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800871a:	48ab      	ldr	r0, [pc, #684]	; (80089c8 <cppLoop+0x1620>)
 800871c:	f7f8 fec4 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008720:	f242 7010 	movw	r0, #10000	; 0x2710
 8008724:	f000 fb58 	bl	8008dd8 <HAL_Delay>

			line_trace.stop();
 8008728:	48a6      	ldr	r0, [pc, #664]	; (80089c4 <cppLoop+0x161c>)
 800872a:	f7fb faa9 	bl	8003c80 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800872e:	49a7      	ldr	r1, [pc, #668]	; (80089cc <cppLoop+0x1624>)
 8008730:	48a7      	ldr	r0, [pc, #668]	; (80089d0 <cppLoop+0x1628>)
 8008732:	f7f8 fef2 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 8008736:	48a4      	ldr	r0, [pc, #656]	; (80089c8 <cppLoop+0x1620>)
 8008738:	f7f8 fe7a 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 800873c:	eef0 7a40 	vmov.f32	s15, s0
 8008740:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 8008744:	463b      	mov	r3, r7
 8008746:	2201      	movs	r2, #1
 8008748:	4619      	mov	r1, r3
 800874a:	2001      	movs	r0, #1
 800874c:	f7f8 ff08 	bl	8001560 <sd_write_float>
			user_fclose();
 8008750:	f7f8 fef6 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 8008754:	2200      	movs	r2, #0
 8008756:	f04f 31ff 	mov.w	r1, #4294967295
 800875a:	4893      	ldr	r0, [pc, #588]	; (80089a8 <cppLoop+0x1600>)
 800875c:	f7f9 fc8a 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008760:	e20f      	b.n	8008b82 <cppLoop+0x17da>

	case 10:
		led.fullColor('~');
 8008762:	217e      	movs	r1, #126	; 0x7e
 8008764:	4890      	ldr	r0, [pc, #576]	; (80089a8 <cppLoop+0x1600>)
 8008766:	f7f9 fbc9 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800876a:	f7f8 fc99 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800876e:	2100      	movs	r1, #0
 8008770:	2000      	movs	r0, #0
 8008772:	f7f8 fca5 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008776:	4897      	ldr	r0, [pc, #604]	; (80089d4 <cppLoop+0x162c>)
 8008778:	f7f8 fccc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800877c:	2101      	movs	r1, #1
 800877e:	2000      	movs	r0, #0
 8008780:	f7f8 fc9e 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8008784:	4894      	ldr	r0, [pc, #592]	; (80089d8 <cppLoop+0x1630>)
 8008786:	f7f8 fcc5 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800878a:	488c      	ldr	r0, [pc, #560]	; (80089bc <cppLoop+0x1614>)
 800878c:	f7f9 fb52 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008790:	4603      	mov	r3, r0
 8008792:	2b02      	cmp	r3, #2
 8008794:	bf0c      	ite	eq
 8008796:	2301      	moveq	r3, #1
 8008798:	2300      	movne	r3, #0
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 81f2 	beq.w	8008b86 <cppLoop+0x17de>
			HAL_Delay(500);
 80087a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087a6:	f000 fb17 	bl	8008dd8 <HAL_Delay>
			led.LR(-1, 1);
 80087aa:	2201      	movs	r2, #1
 80087ac:	f04f 31ff 	mov.w	r1, #4294967295
 80087b0:	487d      	ldr	r0, [pc, #500]	; (80089a8 <cppLoop+0x1600>)
 80087b2:	f7f9 fc5f 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 80087b6:	2101      	movs	r1, #1
 80087b8:	4882      	ldr	r0, [pc, #520]	; (80089c4 <cppLoop+0x161c>)
 80087ba:	f7fb fbc7 	bl	8003f4c <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 80087be:	4881      	ldr	r0, [pc, #516]	; (80089c4 <cppLoop+0x161c>)
 80087c0:	f7fa fc3c 	bl	800303c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80087c4:	2200      	movs	r2, #0
 80087c6:	f04f 31ff 	mov.w	r1, #4294967295
 80087ca:	4877      	ldr	r0, [pc, #476]	; (80089a8 <cppLoop+0x1600>)
 80087cc:	f7f9 fc52 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 80087d0:	e1d9      	b.n	8008b86 <cppLoop+0x17de>

	case 11:
		led.fullColor('~');
 80087d2:	217e      	movs	r1, #126	; 0x7e
 80087d4:	4874      	ldr	r0, [pc, #464]	; (80089a8 <cppLoop+0x1600>)
 80087d6:	f7f9 fb91 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80087da:	f7f8 fc61 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087de:	2100      	movs	r1, #0
 80087e0:	2000      	movs	r0, #0
 80087e2:	f7f8 fc6d 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80087e6:	487d      	ldr	r0, [pc, #500]	; (80089dc <cppLoop+0x1634>)
 80087e8:	f7f8 fc94 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087ec:	2101      	movs	r1, #1
 80087ee:	2000      	movs	r0, #0
 80087f0:	f7f8 fc66 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80087f4:	487a      	ldr	r0, [pc, #488]	; (80089e0 <cppLoop+0x1638>)
 80087f6:	f7f8 fc8d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80087fa:	4870      	ldr	r0, [pc, #448]	; (80089bc <cppLoop+0x1614>)
 80087fc:	f7f9 fb1a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008800:	4603      	mov	r3, r0
 8008802:	2b02      	cmp	r3, #2
 8008804:	bf0c      	ite	eq
 8008806:	2301      	moveq	r3, #1
 8008808:	2300      	movne	r3, #0
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 81bc 	beq.w	8008b8a <cppLoop+0x17e2>
			HAL_Delay(1500);
 8008812:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008816:	f000 fadf 	bl	8008dd8 <HAL_Delay>
			led.LR(-1, 1);
 800881a:	2201      	movs	r2, #1
 800881c:	f04f 31ff 	mov.w	r1, #4294967295
 8008820:	4861      	ldr	r0, [pc, #388]	; (80089a8 <cppLoop+0x1600>)
 8008822:	f7f9 fc27 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8008826:	486f      	ldr	r0, [pc, #444]	; (80089e4 <cppLoop+0x163c>)
 8008828:	f7fb ff47 	bl	80046ba <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 800882c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8008990 <cppLoop+0x15e8>
 8008830:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8008998 <cppLoop+0x15f0>
 8008834:	486c      	ldr	r0, [pc, #432]	; (80089e8 <cppLoop+0x1640>)
 8008836:	f7fb ffd5 	bl	80047e4 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 800883a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800883e:	f000 facb 	bl	8008dd8 <HAL_Delay>

			logger.stop();
 8008842:	4868      	ldr	r0, [pc, #416]	; (80089e4 <cppLoop+0x163c>)
 8008844:	f7fb ff4a 	bl	80046dc <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8008848:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80089a0 <cppLoop+0x15f8>
 800884c:	ed9f 0b54 	vldr	d0, [pc, #336]	; 80089a0 <cppLoop+0x15f8>
 8008850:	4865      	ldr	r0, [pc, #404]	; (80089e8 <cppLoop+0x1640>)
 8008852:	f7fb ffc7 	bl	80047e4 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8008856:	4a65      	ldr	r2, [pc, #404]	; (80089ec <cppLoop+0x1644>)
 8008858:	4965      	ldr	r1, [pc, #404]	; (80089f0 <cppLoop+0x1648>)
 800885a:	4862      	ldr	r0, [pc, #392]	; (80089e4 <cppLoop+0x163c>)
 800885c:	f7fb fe3d 	bl	80044da <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008860:	2200      	movs	r2, #0
 8008862:	f04f 31ff 	mov.w	r1, #4294967295
 8008866:	4850      	ldr	r0, [pc, #320]	; (80089a8 <cppLoop+0x1600>)
 8008868:	f7f9 fc04 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 800886c:	e18d      	b.n	8008b8a <cppLoop+0x17e2>

	case 12:
		led.fullColor('~');
 800886e:	217e      	movs	r1, #126	; 0x7e
 8008870:	484d      	ldr	r0, [pc, #308]	; (80089a8 <cppLoop+0x1600>)
 8008872:	f7f9 fb43 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008876:	f7f8 fc13 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800887a:	2100      	movs	r1, #0
 800887c:	2000      	movs	r0, #0
 800887e:	f7f8 fc1f 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8008882:	485c      	ldr	r0, [pc, #368]	; (80089f4 <cppLoop+0x164c>)
 8008884:	f7f8 fc46 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008888:	2101      	movs	r1, #1
 800888a:	2000      	movs	r0, #0
 800888c:	f7f8 fc18 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8008890:	4859      	ldr	r0, [pc, #356]	; (80089f8 <cppLoop+0x1650>)
 8008892:	f7f8 fc3f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008896:	4849      	ldr	r0, [pc, #292]	; (80089bc <cppLoop+0x1614>)
 8008898:	f7f9 facc 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800889c:	4603      	mov	r3, r0
 800889e:	2b02      	cmp	r3, #2
 80088a0:	bf0c      	ite	eq
 80088a2:	2301      	moveq	r3, #1
 80088a4:	2300      	movne	r3, #0
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 8170 	beq.w	8008b8e <cppLoop+0x17e6>
			HAL_Delay(1500);
 80088ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80088b2:	f000 fa91 	bl	8008dd8 <HAL_Delay>
			led.LR(-1, 1);
 80088b6:	2201      	movs	r2, #1
 80088b8:	f04f 31ff 	mov.w	r1, #4294967295
 80088bc:	483a      	ldr	r0, [pc, #232]	; (80089a8 <cppLoop+0x1600>)
 80088be:	f7f9 fbd9 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 80088c2:	4848      	ldr	r0, [pc, #288]	; (80089e4 <cppLoop+0x163c>)
 80088c4:	f7fb fef9 	bl	80046ba <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80088c8:	484c      	ldr	r0, [pc, #304]	; (80089fc <cppLoop+0x1654>)
 80088ca:	f7fc feda 	bl	8005682 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80088ce:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80089c0 <cppLoop+0x1618>
 80088d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80088d6:	4849      	ldr	r0, [pc, #292]	; (80089fc <cppLoop+0x1654>)
 80088d8:	f7fc fe66 	bl	80055a8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80088dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088e0:	f000 fa7a 	bl	8008dd8 <HAL_Delay>

			logger.stop();
 80088e4:	483f      	ldr	r0, [pc, #252]	; (80089e4 <cppLoop+0x163c>)
 80088e6:	f7fb fef9 	bl	80046dc <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80088ea:	4844      	ldr	r0, [pc, #272]	; (80089fc <cppLoop+0x1654>)
 80088ec:	f7fc fedc 	bl	80056a8 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80088f0:	4a43      	ldr	r2, [pc, #268]	; (8008a00 <cppLoop+0x1658>)
 80088f2:	493f      	ldr	r1, [pc, #252]	; (80089f0 <cppLoop+0x1648>)
 80088f4:	483b      	ldr	r0, [pc, #236]	; (80089e4 <cppLoop+0x163c>)
 80088f6:	f7fb fdf0 	bl	80044da <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80088fa:	2200      	movs	r2, #0
 80088fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008900:	4829      	ldr	r0, [pc, #164]	; (80089a8 <cppLoop+0x1600>)
 8008902:	f7f9 fbb7 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008906:	e142      	b.n	8008b8e <cppLoop+0x17e6>

	case 13:
		led.fullColor('~');
 8008908:	217e      	movs	r1, #126	; 0x7e
 800890a:	4827      	ldr	r0, [pc, #156]	; (80089a8 <cppLoop+0x1600>)
 800890c:	f7f9 faf6 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008910:	f7f8 fbc6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008914:	2100      	movs	r1, #0
 8008916:	2000      	movs	r0, #0
 8008918:	f7f8 fbd2 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800891c:	4839      	ldr	r0, [pc, #228]	; (8008a04 <cppLoop+0x165c>)
 800891e:	f7f8 fbf9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008922:	2101      	movs	r1, #1
 8008924:	2000      	movs	r0, #0
 8008926:	f7f8 fbcb 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800892a:	482d      	ldr	r0, [pc, #180]	; (80089e0 <cppLoop+0x1638>)
 800892c:	f7f8 fbf2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008930:	4822      	ldr	r0, [pc, #136]	; (80089bc <cppLoop+0x1614>)
 8008932:	f7f9 fa7f 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008936:	4603      	mov	r3, r0
 8008938:	2b02      	cmp	r3, #2
 800893a:	bf0c      	ite	eq
 800893c:	2301      	moveq	r3, #1
 800893e:	2300      	movne	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 8125 	beq.w	8008b92 <cppLoop+0x17ea>
			led.LR(-1, 1);
 8008948:	2201      	movs	r2, #1
 800894a:	f04f 31ff 	mov.w	r1, #4294967295
 800894e:	4816      	ldr	r0, [pc, #88]	; (80089a8 <cppLoop+0x1600>)
 8008950:	f7f9 fb90 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8008954:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008958:	f000 fa3e 	bl	8008dd8 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 800895c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008a08 <cppLoop+0x1660>
 8008960:	482a      	ldr	r0, [pc, #168]	; (8008a0c <cppLoop+0x1664>)
 8008962:	f7fc fcad 	bl	80052c0 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8008966:	4829      	ldr	r0, [pc, #164]	; (8008a0c <cppLoop+0x1664>)
 8008968:	f7fc fcba 	bl	80052e0 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 800896c:	f244 405c 	movw	r0, #17500	; 0x445c
 8008970:	f000 fa32 	bl	8008dd8 <HAL_Delay>
			sys_ident.stop();
 8008974:	4825      	ldr	r0, [pc, #148]	; (8008a0c <cppLoop+0x1664>)
 8008976:	f7fc fcc7 	bl	8005308 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 800897a:	4824      	ldr	r0, [pc, #144]	; (8008a0c <cppLoop+0x1664>)
 800897c:	f7fc fc2e 	bl	80051dc <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8008980:	2200      	movs	r2, #0
 8008982:	f04f 31ff 	mov.w	r1, #4294967295
 8008986:	4808      	ldr	r0, [pc, #32]	; (80089a8 <cppLoop+0x1600>)
 8008988:	f7f9 fb74 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 800898c:	e101      	b.n	8008b92 <cppLoop+0x17ea>
 800898e:	bf00      	nop
 8008990:	33333333 	.word	0x33333333
 8008994:	bfd33333 	.word	0xbfd33333
 8008998:	33333333 	.word	0x33333333
 800899c:	3fd33333 	.word	0x3fd33333
	...
 80089a8:	200005cc 	.word	0x200005cc
 80089ac:	0801915c 	.word	0x0801915c
 80089b0:	08019168 	.word	0x08019168
 80089b4:	08019174 	.word	0x08019174
 80089b8:	0801917c 	.word	0x0801917c
 80089bc:	200005c0 	.word	0x200005c0
 80089c0:	00000000 	.word	0x00000000
 80089c4:	20017da0 	.word	0x20017da0
 80089c8:	20017d00 	.word	0x20017d00
 80089cc:	08019188 	.word	0x08019188
 80089d0:	08019190 	.word	0x08019190
 80089d4:	0801919c 	.word	0x0801919c
 80089d8:	080191a8 	.word	0x080191a8
 80089dc:	080191b4 	.word	0x080191b4
 80089e0:	080191bc 	.word	0x080191bc
 80089e4:	200005f0 	.word	0x200005f0
 80089e8:	200005c8 	.word	0x200005c8
 80089ec:	080191c4 	.word	0x080191c4
 80089f0:	080191d0 	.word	0x080191d0
 80089f4:	080191dc 	.word	0x080191dc
 80089f8:	080191e0 	.word	0x080191e0
 80089fc:	20017d20 	.word	0x20017d20
 8008a00:	080191ec 	.word	0x080191ec
 8008a04:	080191f8 	.word	0x080191f8
 8008a08:	3e99999a 	.word	0x3e99999a
 8008a0c:	20024b00 	.word	0x20024b00

	case 14:
		led.fullColor('W');
 8008a10:	2157      	movs	r1, #87	; 0x57
 8008a12:	4866      	ldr	r0, [pc, #408]	; (8008bac <cppLoop+0x1804>)
 8008a14:	f7f9 fa72 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a18:	f7f8 fb42 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	2000      	movs	r0, #0
 8008a20:	f7f8 fb4e 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8008a24:	4862      	ldr	r0, [pc, #392]	; (8008bb0 <cppLoop+0x1808>)
 8008a26:	f7f8 fb75 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	f7f8 fb47 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8008a32:	4b60      	ldr	r3, [pc, #384]	; (8008bb4 <cppLoop+0x180c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f7 fd9e 	bl	8000578 <__aeabi_f2d>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	461a      	mov	r2, r3
 8008a42:	4623      	mov	r3, r4
 8008a44:	485c      	ldr	r0, [pc, #368]	; (8008bb8 <cppLoop+0x1810>)
 8008a46:	f7f8 fb65 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008a4a:	485c      	ldr	r0, [pc, #368]	; (8008bbc <cppLoop+0x1814>)
 8008a4c:	f7f9 f9f2 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	bf0c      	ite	eq
 8008a56:	2301      	moveq	r3, #1
 8008a58:	2300      	movne	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 809a 	beq.w	8008b96 <cppLoop+0x17ee>
			HAL_Delay(500);
 8008a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a66:	f000 f9b7 	bl	8008dd8 <HAL_Delay>

			led.LR(1, -1);
 8008a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a6e:	2101      	movs	r1, #1
 8008a70:	484e      	ldr	r0, [pc, #312]	; (8008bac <cppLoop+0x1804>)
 8008a72:	f7f9 faff 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008a76:	2102      	movs	r1, #2
 8008a78:	4851      	ldr	r0, [pc, #324]	; (8008bc0 <cppLoop+0x1818>)
 8008a7a:	f7fb fa67 	bl	8003f4c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008a7e:	4b4d      	ldr	r3, [pc, #308]	; (8008bb4 <cppLoop+0x180c>)
 8008a80:	edd3 7a00 	vldr	s15, [r3]
 8008a84:	eeb0 0a67 	vmov.f32	s0, s15
 8008a88:	484d      	ldr	r0, [pc, #308]	; (8008bc0 <cppLoop+0x1818>)
 8008a8a:	f7fa feea 	bl	8003862 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008a8e:	4b49      	ldr	r3, [pc, #292]	; (8008bb4 <cppLoop+0x180c>)
 8008a90:	edd3 7a00 	vldr	s15, [r3]
 8008a94:	eeb0 0a67 	vmov.f32	s0, s15
 8008a98:	4849      	ldr	r0, [pc, #292]	; (8008bc0 <cppLoop+0x1818>)
 8008a9a:	f7fa fef1 	bl	8003880 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008a9e:	4848      	ldr	r0, [pc, #288]	; (8008bc0 <cppLoop+0x1818>)
 8008aa0:	f7fa facc 	bl	800303c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008aa4:	4846      	ldr	r0, [pc, #280]	; (8008bc0 <cppLoop+0x1818>)
 8008aa6:	f7fb f953 	bl	8003d50 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008aae:	2100      	movs	r1, #0
 8008ab0:	483e      	ldr	r0, [pc, #248]	; (8008bac <cppLoop+0x1804>)
 8008ab2:	f7f9 fadf 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008ab6:	e06e      	b.n	8008b96 <cppLoop+0x17ee>

	case 15:
		led.fullColor('W');
 8008ab8:	2157      	movs	r1, #87	; 0x57
 8008aba:	483c      	ldr	r0, [pc, #240]	; (8008bac <cppLoop+0x1804>)
 8008abc:	f7f9 fa1e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ac0:	f7f8 faee 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	f7f8 fafa 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8008acc:	483d      	ldr	r0, [pc, #244]	; (8008bc4 <cppLoop+0x181c>)
 8008ace:	f7f8 fb21 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f7f8 faf3 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8008ada:	4b3b      	ldr	r3, [pc, #236]	; (8008bc8 <cppLoop+0x1820>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f7 fd4a 	bl	8000578 <__aeabi_f2d>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4623      	mov	r3, r4
 8008aec:	4832      	ldr	r0, [pc, #200]	; (8008bb8 <cppLoop+0x1810>)
 8008aee:	f7f8 fb11 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008af2:	4832      	ldr	r0, [pc, #200]	; (8008bbc <cppLoop+0x1814>)
 8008af4:	f7f9 f99e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	bf0c      	ite	eq
 8008afe:	2301      	moveq	r3, #1
 8008b00:	2300      	movne	r3, #0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d048      	beq.n	8008b9a <cppLoop+0x17f2>
			HAL_Delay(500);
 8008b08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b0c:	f000 f964 	bl	8008dd8 <HAL_Delay>

			led.LR(1, -1);
 8008b10:	f04f 32ff 	mov.w	r2, #4294967295
 8008b14:	2101      	movs	r1, #1
 8008b16:	4825      	ldr	r0, [pc, #148]	; (8008bac <cppLoop+0x1804>)
 8008b18:	f7f9 faac 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	4828      	ldr	r0, [pc, #160]	; (8008bc0 <cppLoop+0x1818>)
 8008b20:	f7fb fa14 	bl	8003f4c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8008b24:	4b28      	ldr	r3, [pc, #160]	; (8008bc8 <cppLoop+0x1820>)
 8008b26:	edd3 7a00 	vldr	s15, [r3]
 8008b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b2e:	4824      	ldr	r0, [pc, #144]	; (8008bc0 <cppLoop+0x1818>)
 8008b30:	f7fa fe97 	bl	8003862 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008b34:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <cppLoop+0x1820>)
 8008b36:	edd3 7a00 	vldr	s15, [r3]
 8008b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b3e:	4820      	ldr	r0, [pc, #128]	; (8008bc0 <cppLoop+0x1818>)
 8008b40:	f7fa fe9e 	bl	8003880 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008b44:	481e      	ldr	r0, [pc, #120]	; (8008bc0 <cppLoop+0x1818>)
 8008b46:	f7fa fa79 	bl	800303c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008b4a:	481d      	ldr	r0, [pc, #116]	; (8008bc0 <cppLoop+0x1818>)
 8008b4c:	f7fb f900 	bl	8003d50 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	2100      	movs	r1, #0
 8008b56:	4815      	ldr	r0, [pc, #84]	; (8008bac <cppLoop+0x1804>)
 8008b58:	f7f9 fa8c 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008b5c:	e01d      	b.n	8008b9a <cppLoop+0x17f2>

	default:
		break;
 8008b5e:	bf00      	nop
 8008b60:	e01c      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b62:	bf00      	nop
 8008b64:	e01a      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b66:	bf00      	nop
 8008b68:	e018      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b6a:	bf00      	nop
 8008b6c:	e016      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b6e:	bf00      	nop
 8008b70:	e014      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b72:	bf00      	nop
 8008b74:	e012      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b76:	bf00      	nop
 8008b78:	e010      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b7a:	bf00      	nop
 8008b7c:	e00e      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b7e:	bf00      	nop
 8008b80:	e00c      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b82:	bf00      	nop
 8008b84:	e00a      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b86:	bf00      	nop
 8008b88:	e008      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b8a:	bf00      	nop
 8008b8c:	e006      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b8e:	bf00      	nop
 8008b90:	e004      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b92:	bf00      	nop
 8008b94:	e002      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b96:	bf00      	nop
 8008b98:	e000      	b.n	8008b9c <cppLoop+0x17f4>
		break;
 8008b9a:	bf00      	nop

	}

	HAL_Delay(30);
 8008b9c:	201e      	movs	r0, #30
 8008b9e:	f000 f91b 	bl	8008dd8 <HAL_Delay>

}
 8008ba2:	bf00      	nop
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008baa:	bf00      	nop
 8008bac:	200005cc 	.word	0x200005cc
 8008bb0:	08019200 	.word	0x08019200
 8008bb4:	2003c46c 	.word	0x2003c46c
 8008bb8:	080190c8 	.word	0x080190c8
 8008bbc:	200005c0 	.word	0x200005c0
 8008bc0:	20017da0 	.word	0x20017da0
 8008bc4:	0801920c 	.word	0x0801920c
 8008bc8:	2003c464 	.word	0x2003c464

08008bcc <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af06      	add	r7, sp, #24
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d13d      	bne.n	8008c58 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d138      	bne.n	8008c58 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8008be6:	481e      	ldr	r0, [pc, #120]	; (8008c60 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008be8:	f7f9 fa7c 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8008bec:	481d      	ldr	r0, [pc, #116]	; (8008c64 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008bee:	f7fc f95b 	bl	8004ea8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8008bf2:	481d      	ldr	r0, [pc, #116]	; (8008c68 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008bf4:	f7f9 f912 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 8008bf8:	481c      	ldr	r0, [pc, #112]	; (8008c6c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008bfa:	f7fb fd80 	bl	80046fe <_ZN5MotorC1Ev>
IMU imu;
 8008bfe:	481c      	ldr	r0, [pc, #112]	; (8008c70 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c00:	f7f8 ff18 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 8008c04:	481b      	ldr	r0, [pc, #108]	; (8008c74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008c06:	f7fb fad5 	bl	80041b4 <_ZN6LoggerC1Ev>
Encoder encoder;
 8008c0a:	481b      	ldr	r0, [pc, #108]	; (8008c78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c0c:	f7f8 faa2 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8008c10:	4b17      	ldr	r3, [pc, #92]	; (8008c70 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c12:	4a19      	ldr	r2, [pc, #100]	; (8008c78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c14:	4915      	ldr	r1, [pc, #84]	; (8008c6c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008c16:	4819      	ldr	r0, [pc, #100]	; (8008c7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008c18:	f7fc fb9a 	bl	8005350 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8008c1c:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008c1e:	4a14      	ldr	r2, [pc, #80]	; (8008c70 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c20:	4915      	ldr	r1, [pc, #84]	; (8008c78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c22:	4817      	ldr	r0, [pc, #92]	; (8008c80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008c24:	f7fb fe50 	bl	80048c8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8008c28:	4b11      	ldr	r3, [pc, #68]	; (8008c70 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008c2e:	9303      	str	r3, [sp, #12]
 8008c30:	4b13      	ldr	r3, [pc, #76]	; (8008c80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008c32:	9302      	str	r3, [sp, #8]
 8008c34:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008c3e:	4a08      	ldr	r2, [pc, #32]	; (8008c60 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008c40:	490a      	ldr	r1, [pc, #40]	; (8008c6c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008c42:	4810      	ldr	r0, [pc, #64]	; (8008c84 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8008c44:	f7f9 fd7c 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8008c48:	4a08      	ldr	r2, [pc, #32]	; (8008c6c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008c4a:	490a      	ldr	r1, [pc, #40]	; (8008c74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008c4c:	480e      	ldr	r0, [pc, #56]	; (8008c88 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8008c4e:	f7fc fa7b 	bl	8005148 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8008c52:	480e      	ldr	r0, [pc, #56]	; (8008c8c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008c54:	f7fb ffba 	bl	8004bcc <_ZN13PathFollowingC1Ev>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	200002c0 	.word	0x200002c0
 8008c64:	200005b8 	.word	0x200005b8
 8008c68:	200005c0 	.word	0x200005c0
 8008c6c:	200005c8 	.word	0x200005c8
 8008c70:	200005dc 	.word	0x200005dc
 8008c74:	200005f0 	.word	0x200005f0
 8008c78:	20017d00 	.word	0x20017d00
 8008c7c:	20017d20 	.word	0x20017d20
 8008c80:	20017d60 	.word	0x20017d60
 8008c84:	20017da0 	.word	0x20017da0
 8008c88:	20024b00 	.word	0x20024b00
 8008c8c:	20024d10 	.word	0x20024d10

08008c90 <_GLOBAL__sub_I_line_sensor>:
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008c98:	2001      	movs	r0, #1
 8008c9a:	f7ff ff97 	bl	8008bcc <_Z41__static_initialization_and_destruction_0ii>
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008ca6:	e003      	b.n	8008cb0 <LoopCopyDataInit>

08008ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008ca8:	4b0c      	ldr	r3, [pc, #48]	; (8008cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008cae:	3104      	adds	r1, #4

08008cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008cb0:	480b      	ldr	r0, [pc, #44]	; (8008ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008cb8:	d3f6      	bcc.n	8008ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8008cba:	4a0b      	ldr	r2, [pc, #44]	; (8008ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008cbc:	e002      	b.n	8008cc4 <LoopFillZerobss>

08008cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008cc0:	f842 3b04 	str.w	r3, [r2], #4

08008cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008cc4:	4b09      	ldr	r3, [pc, #36]	; (8008cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008cc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008cc8:	d3f9      	bcc.n	8008cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008cca:	f7fe fa4b 	bl	8007164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008cce:	f00b fdd3 	bl	8014878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008cd2:	f7fc fd85 	bl	80057e0 <main>
  bx  lr    
 8008cd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008cd8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008cdc:	08019808 	.word	0x08019808
  ldr  r0, =_sdata
 8008ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008ce4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008ce8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008cec:	20040e70 	.word	0x20040e70

08008cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008cf0:	e7fe      	b.n	8008cf0 <ADC_IRQHandler>
	...

08008cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <HAL_Init+0x40>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a0d      	ldr	r2, [pc, #52]	; (8008d34 <HAL_Init+0x40>)
 8008cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d04:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <HAL_Init+0x40>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a0a      	ldr	r2, [pc, #40]	; (8008d34 <HAL_Init+0x40>)
 8008d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d10:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <HAL_Init+0x40>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a07      	ldr	r2, [pc, #28]	; (8008d34 <HAL_Init+0x40>)
 8008d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d1c:	2003      	movs	r0, #3
 8008d1e:	f000 fd51 	bl	80097c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d22:	2000      	movs	r0, #0
 8008d24:	f000 f808 	bl	8008d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d28:	f7fd fc6c 	bl	8006604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40023c00 	.word	0x40023c00

08008d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d40:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <HAL_InitTick+0x54>)
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <HAL_InitTick+0x58>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fd69 	bl	800982e <HAL_SYSTICK_Config>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e00e      	b.n	8008d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b0f      	cmp	r3, #15
 8008d6a:	d80a      	bhi.n	8008d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	f000 fd31 	bl	80097da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d78:	4a06      	ldr	r2, [pc, #24]	; (8008d94 <HAL_InitTick+0x5c>)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e000      	b.n	8008d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20000000 	.word	0x20000000
 8008d90:	20000008 	.word	0x20000008
 8008d94:	20000004 	.word	0x20000004

08008d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <HAL_IncTick+0x20>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <HAL_IncTick+0x24>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4413      	add	r3, r2
 8008da8:	4a04      	ldr	r2, [pc, #16]	; (8008dbc <HAL_IncTick+0x24>)
 8008daa:	6013      	str	r3, [r2, #0]
}
 8008dac:	bf00      	nop
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	20000008 	.word	0x20000008
 8008dbc:	2003edf8 	.word	0x2003edf8

08008dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8008dc4:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <HAL_GetTick+0x14>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	2003edf8 	.word	0x2003edf8

08008dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008de0:	f7ff ffee 	bl	8008dc0 <HAL_GetTick>
 8008de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d005      	beq.n	8008dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008df2:	4b09      	ldr	r3, [pc, #36]	; (8008e18 <HAL_Delay+0x40>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008dfe:	bf00      	nop
 8008e00:	f7ff ffde 	bl	8008dc0 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d8f7      	bhi.n	8008e00 <HAL_Delay+0x28>
  {
  }
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000008 	.word	0x20000008

08008e1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e033      	b.n	8008e9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7fd fc0a 	bl	8006654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e52:	f003 0310 	and.w	r3, r3, #16
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d118      	bne.n	8008e8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e62:	f023 0302 	bic.w	r3, r3, #2
 8008e66:	f043 0202 	orr.w	r2, r3, #2
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fa5a 	bl	8009328 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	f043 0201 	orr.w	r2, r3, #1
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	641a      	str	r2, [r3, #64]	; 0x40
 8008e8a:	e001      	b.n	8008e90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_ADC_Start_DMA+0x1e>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e0cc      	b.n	800905c <HAL_ADC_Start_DMA+0x1b8>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d018      	beq.n	8008f0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008ee8:	4b5e      	ldr	r3, [pc, #376]	; (8009064 <HAL_ADC_Start_DMA+0x1c0>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a5e      	ldr	r2, [pc, #376]	; (8009068 <HAL_ADC_Start_DMA+0x1c4>)
 8008eee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef2:	0c9a      	lsrs	r2, r3, #18
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	4413      	add	r3, r2
 8008efa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008efc:	e002      	b.n	8008f04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f9      	bne.n	8008efe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	f040 80a0 	bne.w	800905a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f22:	f023 0301 	bic.w	r3, r3, #1
 8008f26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d007      	beq.n	8008f4c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008f44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f58:	d106      	bne.n	8008f68 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	f023 0206 	bic.w	r2, r3, #6
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	645a      	str	r2, [r3, #68]	; 0x44
 8008f66:	e002      	b.n	8008f6e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008f76:	4b3d      	ldr	r3, [pc, #244]	; (800906c <HAL_ADC_Start_DMA+0x1c8>)
 8008f78:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7e:	4a3c      	ldr	r2, [pc, #240]	; (8009070 <HAL_ADC_Start_DMA+0x1cc>)
 8008f80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	4a3b      	ldr	r2, [pc, #236]	; (8009074 <HAL_ADC_Start_DMA+0x1d0>)
 8008f88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	4a3a      	ldr	r2, [pc, #232]	; (8009078 <HAL_ADC_Start_DMA+0x1d4>)
 8008f90:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008f9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008faa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689a      	ldr	r2, [r3, #8]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	334c      	adds	r3, #76	; 0x4c
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f000 fcea 	bl	80099a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f003 031f 	and.w	r3, r3, #31
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d12a      	bne.n	8009032 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a26      	ldr	r2, [pc, #152]	; (800907c <HAL_ADC_Start_DMA+0x1d8>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d015      	beq.n	8009012 <HAL_ADC_Start_DMA+0x16e>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a25      	ldr	r2, [pc, #148]	; (8009080 <HAL_ADC_Start_DMA+0x1dc>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d105      	bne.n	8008ffc <HAL_ADC_Start_DMA+0x158>
 8008ff0:	4b1e      	ldr	r3, [pc, #120]	; (800906c <HAL_ADC_Start_DMA+0x1c8>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f003 031f 	and.w	r3, r3, #31
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00a      	beq.n	8009012 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a20      	ldr	r2, [pc, #128]	; (8009084 <HAL_ADC_Start_DMA+0x1e0>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d129      	bne.n	800905a <HAL_ADC_Start_DMA+0x1b6>
 8009006:	4b19      	ldr	r3, [pc, #100]	; (800906c <HAL_ADC_Start_DMA+0x1c8>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f003 031f 	and.w	r3, r3, #31
 800900e:	2b0f      	cmp	r3, #15
 8009010:	d823      	bhi.n	800905a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d11c      	bne.n	800905a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800902e:	609a      	str	r2, [r3, #8]
 8009030:	e013      	b.n	800905a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a11      	ldr	r2, [pc, #68]	; (800907c <HAL_ADC_Start_DMA+0x1d8>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d10e      	bne.n	800905a <HAL_ADC_Start_DMA+0x1b6>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d107      	bne.n	800905a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009058:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000000 	.word	0x20000000
 8009068:	431bde83 	.word	0x431bde83
 800906c:	40012300 	.word	0x40012300
 8009070:	08009521 	.word	0x08009521
 8009074:	080095db 	.word	0x080095db
 8009078:	080095f7 	.word	0x080095f7
 800907c:	40012000 	.word	0x40012000
 8009080:	40012100 	.word	0x40012100
 8009084:	40012200 	.word	0x40012200

08009088 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d101      	bne.n	80090e0 <HAL_ADC_ConfigChannel+0x1c>
 80090dc:	2302      	movs	r3, #2
 80090de:	e113      	b.n	8009308 <HAL_ADC_ConfigChannel+0x244>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b09      	cmp	r3, #9
 80090ee:	d925      	bls.n	800913c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68d9      	ldr	r1, [r3, #12]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	4613      	mov	r3, r2
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	4413      	add	r3, r2
 8009104:	3b1e      	subs	r3, #30
 8009106:	2207      	movs	r2, #7
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	43da      	mvns	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	400a      	ands	r2, r1
 8009114:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68d9      	ldr	r1, [r3, #12]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	4618      	mov	r0, r3
 8009128:	4603      	mov	r3, r0
 800912a:	005b      	lsls	r3, r3, #1
 800912c:	4403      	add	r3, r0
 800912e:	3b1e      	subs	r3, #30
 8009130:	409a      	lsls	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	60da      	str	r2, [r3, #12]
 800913a:	e022      	b.n	8009182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6919      	ldr	r1, [r3, #16]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	b29b      	uxth	r3, r3
 8009148:	461a      	mov	r2, r3
 800914a:	4613      	mov	r3, r2
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	4413      	add	r3, r2
 8009150:	2207      	movs	r2, #7
 8009152:	fa02 f303 	lsl.w	r3, r2, r3
 8009156:	43da      	mvns	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	400a      	ands	r2, r1
 800915e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6919      	ldr	r1, [r3, #16]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	b29b      	uxth	r3, r3
 8009170:	4618      	mov	r0, r3
 8009172:	4603      	mov	r3, r0
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	4403      	add	r3, r0
 8009178:	409a      	lsls	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2b06      	cmp	r3, #6
 8009188:	d824      	bhi.n	80091d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	4613      	mov	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	3b05      	subs	r3, #5
 800919c:	221f      	movs	r2, #31
 800919e:	fa02 f303 	lsl.w	r3, r2, r3
 80091a2:	43da      	mvns	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	400a      	ands	r2, r1
 80091aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	4618      	mov	r0, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	3b05      	subs	r3, #5
 80091c6:	fa00 f203 	lsl.w	r2, r0, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	635a      	str	r2, [r3, #52]	; 0x34
 80091d2:	e04c      	b.n	800926e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	2b0c      	cmp	r3, #12
 80091da:	d824      	bhi.n	8009226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	3b23      	subs	r3, #35	; 0x23
 80091ee:	221f      	movs	r2, #31
 80091f0:	fa02 f303 	lsl.w	r3, r2, r3
 80091f4:	43da      	mvns	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	400a      	ands	r2, r1
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	b29b      	uxth	r3, r3
 800920a:	4618      	mov	r0, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	3b23      	subs	r3, #35	; 0x23
 8009218:	fa00 f203 	lsl.w	r2, r0, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	631a      	str	r2, [r3, #48]	; 0x30
 8009224:	e023      	b.n	800926e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	4613      	mov	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	3b41      	subs	r3, #65	; 0x41
 8009238:	221f      	movs	r2, #31
 800923a:	fa02 f303 	lsl.w	r3, r2, r3
 800923e:	43da      	mvns	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	400a      	ands	r2, r1
 8009246:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	b29b      	uxth	r3, r3
 8009254:	4618      	mov	r0, r3
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	4613      	mov	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	3b41      	subs	r3, #65	; 0x41
 8009262:	fa00 f203 	lsl.w	r2, r0, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800926e:	4b29      	ldr	r3, [pc, #164]	; (8009314 <HAL_ADC_ConfigChannel+0x250>)
 8009270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a28      	ldr	r2, [pc, #160]	; (8009318 <HAL_ADC_ConfigChannel+0x254>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d10f      	bne.n	800929c <HAL_ADC_ConfigChannel+0x1d8>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b12      	cmp	r3, #18
 8009282:	d10b      	bne.n	800929c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1d      	ldr	r2, [pc, #116]	; (8009318 <HAL_ADC_ConfigChannel+0x254>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d12b      	bne.n	80092fe <HAL_ADC_ConfigChannel+0x23a>
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a1c      	ldr	r2, [pc, #112]	; (800931c <HAL_ADC_ConfigChannel+0x258>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <HAL_ADC_ConfigChannel+0x1f4>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b11      	cmp	r3, #17
 80092b6:	d122      	bne.n	80092fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a11      	ldr	r2, [pc, #68]	; (800931c <HAL_ADC_ConfigChannel+0x258>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d111      	bne.n	80092fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80092da:	4b11      	ldr	r3, [pc, #68]	; (8009320 <HAL_ADC_ConfigChannel+0x25c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a11      	ldr	r2, [pc, #68]	; (8009324 <HAL_ADC_ConfigChannel+0x260>)
 80092e0:	fba2 2303 	umull	r2, r3, r2, r3
 80092e4:	0c9a      	lsrs	r2, r3, #18
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80092f0:	e002      	b.n	80092f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1f9      	bne.n	80092f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	40012300 	.word	0x40012300
 8009318:	40012000 	.word	0x40012000
 800931c:	10000012 	.word	0x10000012
 8009320:	20000000 	.word	0x20000000
 8009324:	431bde83 	.word	0x431bde83

08009328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009330:	4b79      	ldr	r3, [pc, #484]	; (8009518 <ADC_Init+0x1f0>)
 8009332:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	431a      	orrs	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800935c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6859      	ldr	r1, [r3, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	021a      	lsls	r2, r3, #8
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6859      	ldr	r1, [r3, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689a      	ldr	r2, [r3, #8]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6899      	ldr	r1, [r3, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ba:	4a58      	ldr	r2, [pc, #352]	; (800951c <ADC_Init+0x1f4>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d022      	beq.n	8009406 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6899      	ldr	r1, [r3, #8]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80093f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6899      	ldr	r1, [r3, #8]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	609a      	str	r2, [r3, #8]
 8009404:	e00f      	b.n	8009426 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0202 	bic.w	r2, r2, #2
 8009434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6899      	ldr	r1, [r3, #8]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	7e1b      	ldrb	r3, [r3, #24]
 8009440:	005a      	lsls	r2, r3, #1
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01b      	beq.n	800948c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6859      	ldr	r1, [r3, #4]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	3b01      	subs	r3, #1
 8009480:	035a      	lsls	r2, r3, #13
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	e007      	b.n	800949c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800949a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80094aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	051a      	lsls	r2, r3, #20
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6899      	ldr	r1, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094de:	025a      	lsls	r2, r3, #9
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689a      	ldr	r2, [r3, #8]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6899      	ldr	r1, [r3, #8]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	029a      	lsls	r2, r3, #10
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	609a      	str	r2, [r3, #8]
}
 800950c:	bf00      	nop
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	40012300 	.word	0x40012300
 800951c:	0f000001 	.word	0x0f000001

08009520 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009536:	2b00      	cmp	r3, #0
 8009538:	d13c      	bne.n	80095b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d12b      	bne.n	80095ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009558:	2b00      	cmp	r3, #0
 800955a:	d127      	bne.n	80095ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009562:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009566:	2b00      	cmp	r3, #0
 8009568:	d006      	beq.n	8009578 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009574:	2b00      	cmp	r3, #0
 8009576:	d119      	bne.n	80095ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 0220 	bic.w	r2, r2, #32
 8009586:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d105      	bne.n	80095ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a4:	f043 0201 	orr.w	r2, r3, #1
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f7ff fd6b 	bl	8009088 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80095b2:	e00e      	b.n	80095d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	f003 0310 	and.w	r3, r3, #16
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff fd75 	bl	80090b0 <HAL_ADC_ErrorCallback>
}
 80095c6:	e004      	b.n	80095d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	4798      	blx	r3
}
 80095d2:	bf00      	nop
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f7ff fd57 	bl	800909c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2240      	movs	r2, #64	; 0x40
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960e:	f043 0204 	orr.w	r2, r3, #4
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7ff fd4a 	bl	80090b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800961c:	bf00      	nop
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f003 0307 	and.w	r3, r3, #7
 8009632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <__NVIC_SetPriorityGrouping+0x44>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009640:	4013      	ands	r3, r2
 8009642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800964c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009656:	4a04      	ldr	r2, [pc, #16]	; (8009668 <__NVIC_SetPriorityGrouping+0x44>)
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	60d3      	str	r3, [r2, #12]
}
 800965c:	bf00      	nop
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	e000ed00 	.word	0xe000ed00

0800966c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009670:	4b04      	ldr	r3, [pc, #16]	; (8009684 <__NVIC_GetPriorityGrouping+0x18>)
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	0a1b      	lsrs	r3, r3, #8
 8009676:	f003 0307 	and.w	r3, r3, #7
}
 800967a:	4618      	mov	r0, r3
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	e000ed00 	.word	0xe000ed00

08009688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009696:	2b00      	cmp	r3, #0
 8009698:	db0b      	blt.n	80096b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	f003 021f 	and.w	r2, r3, #31
 80096a0:	4907      	ldr	r1, [pc, #28]	; (80096c0 <__NVIC_EnableIRQ+0x38>)
 80096a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096a6:	095b      	lsrs	r3, r3, #5
 80096a8:	2001      	movs	r0, #1
 80096aa:	fa00 f202 	lsl.w	r2, r0, r2
 80096ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	e000e100 	.word	0xe000e100

080096c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	6039      	str	r1, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	db0a      	blt.n	80096ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	490c      	ldr	r1, [pc, #48]	; (8009710 <__NVIC_SetPriority+0x4c>)
 80096de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096e2:	0112      	lsls	r2, r2, #4
 80096e4:	b2d2      	uxtb	r2, r2
 80096e6:	440b      	add	r3, r1
 80096e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80096ec:	e00a      	b.n	8009704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	4908      	ldr	r1, [pc, #32]	; (8009714 <__NVIC_SetPriority+0x50>)
 80096f4:	79fb      	ldrb	r3, [r7, #7]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	3b04      	subs	r3, #4
 80096fc:	0112      	lsls	r2, r2, #4
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	440b      	add	r3, r1
 8009702:	761a      	strb	r2, [r3, #24]
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	e000e100 	.word	0xe000e100
 8009714:	e000ed00 	.word	0xe000ed00

08009718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009718:	b480      	push	{r7}
 800971a:	b089      	sub	sp, #36	; 0x24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f1c3 0307 	rsb	r3, r3, #7
 8009732:	2b04      	cmp	r3, #4
 8009734:	bf28      	it	cs
 8009736:	2304      	movcs	r3, #4
 8009738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	3304      	adds	r3, #4
 800973e:	2b06      	cmp	r3, #6
 8009740:	d902      	bls.n	8009748 <NVIC_EncodePriority+0x30>
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	3b03      	subs	r3, #3
 8009746:	e000      	b.n	800974a <NVIC_EncodePriority+0x32>
 8009748:	2300      	movs	r3, #0
 800974a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800974c:	f04f 32ff 	mov.w	r2, #4294967295
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	fa02 f303 	lsl.w	r3, r2, r3
 8009756:	43da      	mvns	r2, r3
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	401a      	ands	r2, r3
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009760:	f04f 31ff 	mov.w	r1, #4294967295
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	fa01 f303 	lsl.w	r3, r1, r3
 800976a:	43d9      	mvns	r1, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009770:	4313      	orrs	r3, r2
         );
}
 8009772:	4618      	mov	r0, r3
 8009774:	3724      	adds	r7, #36	; 0x24
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3b01      	subs	r3, #1
 800978c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009790:	d301      	bcc.n	8009796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009792:	2301      	movs	r3, #1
 8009794:	e00f      	b.n	80097b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009796:	4a0a      	ldr	r2, [pc, #40]	; (80097c0 <SysTick_Config+0x40>)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3b01      	subs	r3, #1
 800979c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800979e:	210f      	movs	r1, #15
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295
 80097a4:	f7ff ff8e 	bl	80096c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80097a8:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <SysTick_Config+0x40>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80097ae:	4b04      	ldr	r3, [pc, #16]	; (80097c0 <SysTick_Config+0x40>)
 80097b0:	2207      	movs	r2, #7
 80097b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	e000e010 	.word	0xe000e010

080097c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7ff ff29 	bl	8009624 <__NVIC_SetPriorityGrouping>
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80097da:	b580      	push	{r7, lr}
 80097dc:	b086      	sub	sp, #24
 80097de:	af00      	add	r7, sp, #0
 80097e0:	4603      	mov	r3, r0
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80097ec:	f7ff ff3e 	bl	800966c <__NVIC_GetPriorityGrouping>
 80097f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	68b9      	ldr	r1, [r7, #8]
 80097f6:	6978      	ldr	r0, [r7, #20]
 80097f8:	f7ff ff8e 	bl	8009718 <NVIC_EncodePriority>
 80097fc:	4602      	mov	r2, r0
 80097fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff ff5d 	bl	80096c4 <__NVIC_SetPriority>
}
 800980a:	bf00      	nop
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b082      	sub	sp, #8
 8009816:	af00      	add	r7, sp, #0
 8009818:	4603      	mov	r3, r0
 800981a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800981c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff ff31 	bl	8009688 <__NVIC_EnableIRQ>
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff ffa2 	bl	8009780 <SysTick_Config>
 800983c:	4603      	mov	r3, r0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009854:	f7ff fab4 	bl	8008dc0 <HAL_GetTick>
 8009858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e099      	b.n	8009998 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0201 	bic.w	r2, r2, #1
 8009882:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009884:	e00f      	b.n	80098a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009886:	f7ff fa9b 	bl	8008dc0 <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	2b05      	cmp	r3, #5
 8009892:	d908      	bls.n	80098a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2203      	movs	r2, #3
 800989e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e078      	b.n	8009998 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e8      	bne.n	8009886 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4b38      	ldr	r3, [pc, #224]	; (80099a0 <HAL_DMA_Init+0x158>)
 80098c0:	4013      	ands	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80098d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d107      	bne.n	8009910 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009908:	4313      	orrs	r3, r2
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f023 0307 	bic.w	r3, r3, #7
 8009926:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	4313      	orrs	r3, r2
 8009930:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	2b04      	cmp	r3, #4
 8009938:	d117      	bne.n	800996a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	4313      	orrs	r3, r2
 8009942:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00e      	beq.n	800996a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fa9d 	bl	8009e8c <DMA_CheckFifoParam>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d008      	beq.n	800996a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2240      	movs	r2, #64	; 0x40
 800995c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009966:	2301      	movs	r3, #1
 8009968:	e016      	b.n	8009998 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fa54 	bl	8009e20 <DMA_CalcBaseAndBitshift>
 8009978:	4603      	mov	r3, r0
 800997a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009980:	223f      	movs	r2, #63	; 0x3f
 8009982:	409a      	lsls	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	f010803f 	.word	0xf010803f

080099a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d101      	bne.n	80099ca <HAL_DMA_Start_IT+0x26>
 80099c6:	2302      	movs	r3, #2
 80099c8:	e040      	b.n	8009a4c <HAL_DMA_Start_IT+0xa8>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d12f      	bne.n	8009a3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2202      	movs	r2, #2
 80099e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 f9e6 	bl	8009dc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099fc:	223f      	movs	r2, #63	; 0x3f
 80099fe:	409a      	lsls	r2, r3
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f042 0216 	orr.w	r2, r2, #22
 8009a12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d007      	beq.n	8009a2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f042 0208 	orr.w	r2, r2, #8
 8009a2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0201 	orr.w	r2, r2, #1
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e005      	b.n	8009a4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009a46:	2302      	movs	r3, #2
 8009a48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d004      	beq.n	8009a72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2280      	movs	r2, #128	; 0x80
 8009a6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e00c      	b.n	8009a8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2205      	movs	r2, #5
 8009a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0201 	bic.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009aa4:	4b92      	ldr	r3, [pc, #584]	; (8009cf0 <HAL_DMA_IRQHandler+0x258>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a92      	ldr	r2, [pc, #584]	; (8009cf4 <HAL_DMA_IRQHandler+0x25c>)
 8009aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009aae:	0a9b      	lsrs	r3, r3, #10
 8009ab0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ac2:	2208      	movs	r2, #8
 8009ac4:	409a      	lsls	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4013      	ands	r3, r2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d01a      	beq.n	8009b04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d013      	beq.n	8009b04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f022 0204 	bic.w	r2, r2, #4
 8009aea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af0:	2208      	movs	r2, #8
 8009af2:	409a      	lsls	r2, r3
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afc:	f043 0201 	orr.w	r2, r3, #1
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b08:	2201      	movs	r2, #1
 8009b0a:	409a      	lsls	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4013      	ands	r3, r2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d012      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00b      	beq.n	8009b3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b26:	2201      	movs	r2, #1
 8009b28:	409a      	lsls	r2, r3
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b32:	f043 0202 	orr.w	r2, r3, #2
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b3e:	2204      	movs	r2, #4
 8009b40:	409a      	lsls	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4013      	ands	r3, r2
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d012      	beq.n	8009b70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b5c:	2204      	movs	r2, #4
 8009b5e:	409a      	lsls	r2, r3
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b68:	f043 0204 	orr.w	r2, r3, #4
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b74:	2210      	movs	r2, #16
 8009b76:	409a      	lsls	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d043      	beq.n	8009c08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0308 	and.w	r3, r3, #8
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d03c      	beq.n	8009c08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b92:	2210      	movs	r2, #16
 8009b94:	409a      	lsls	r2, r3
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d018      	beq.n	8009bda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d108      	bne.n	8009bc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d024      	beq.n	8009c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	4798      	blx	r3
 8009bc6:	e01f      	b.n	8009c08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d01b      	beq.n	8009c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	4798      	blx	r3
 8009bd8:	e016      	b.n	8009c08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d107      	bne.n	8009bf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f022 0208 	bic.w	r2, r2, #8
 8009bf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	409a      	lsls	r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4013      	ands	r3, r2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 808e 	beq.w	8009d36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0310 	and.w	r3, r3, #16
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 8086 	beq.w	8009d36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c2e:	2220      	movs	r2, #32
 8009c30:	409a      	lsls	r2, r3
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	d136      	bne.n	8009cb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f022 0216 	bic.w	r2, r2, #22
 8009c50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	695a      	ldr	r2, [r3, #20]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d103      	bne.n	8009c72 <HAL_DMA_IRQHandler+0x1da>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d007      	beq.n	8009c82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0208 	bic.w	r2, r2, #8
 8009c80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c86:	223f      	movs	r2, #63	; 0x3f
 8009c88:	409a      	lsls	r2, r3
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d07d      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
        }
        return;
 8009cae:	e078      	b.n	8009da2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d01c      	beq.n	8009cf8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d108      	bne.n	8009cde <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d030      	beq.n	8009d36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	4798      	blx	r3
 8009cdc:	e02b      	b.n	8009d36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d027      	beq.n	8009d36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	4798      	blx	r3
 8009cee:	e022      	b.n	8009d36 <HAL_DMA_IRQHandler+0x29e>
 8009cf0:	20000000 	.word	0x20000000
 8009cf4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10f      	bne.n	8009d26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 0210 	bic.w	r2, r2, #16
 8009d14:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d032      	beq.n	8009da4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d022      	beq.n	8009d90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2205      	movs	r2, #5
 8009d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f022 0201 	bic.w	r2, r2, #1
 8009d60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	3301      	adds	r3, #1
 8009d66:	60bb      	str	r3, [r7, #8]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d307      	bcc.n	8009d7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1f2      	bne.n	8009d62 <HAL_DMA_IRQHandler+0x2ca>
 8009d7c:	e000      	b.n	8009d80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009d7e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d005      	beq.n	8009da4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	4798      	blx	r3
 8009da0:	e000      	b.n	8009da4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009da2:	bf00      	nop
    }
  }
}
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop

08009dac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009de0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	2b40      	cmp	r3, #64	; 0x40
 8009df0:	d108      	bne.n	8009e04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009e02:	e007      	b.n	8009e14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	60da      	str	r2, [r3, #12]
}
 8009e14:	bf00      	nop
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	3b10      	subs	r3, #16
 8009e30:	4a14      	ldr	r2, [pc, #80]	; (8009e84 <DMA_CalcBaseAndBitshift+0x64>)
 8009e32:	fba2 2303 	umull	r2, r3, r2, r3
 8009e36:	091b      	lsrs	r3, r3, #4
 8009e38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009e3a:	4a13      	ldr	r2, [pc, #76]	; (8009e88 <DMA_CalcBaseAndBitshift+0x68>)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d909      	bls.n	8009e62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009e56:	f023 0303 	bic.w	r3, r3, #3
 8009e5a:	1d1a      	adds	r2, r3, #4
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8009e60:	e007      	b.n	8009e72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009e6a:	f023 0303 	bic.w	r3, r3, #3
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	aaaaaaab 	.word	0xaaaaaaab
 8009e88:	0801924c 	.word	0x0801924c

08009e8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d11f      	bne.n	8009ee6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d855      	bhi.n	8009f58 <DMA_CheckFifoParam+0xcc>
 8009eac:	a201      	add	r2, pc, #4	; (adr r2, 8009eb4 <DMA_CheckFifoParam+0x28>)
 8009eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb2:	bf00      	nop
 8009eb4:	08009ec5 	.word	0x08009ec5
 8009eb8:	08009ed7 	.word	0x08009ed7
 8009ebc:	08009ec5 	.word	0x08009ec5
 8009ec0:	08009f59 	.word	0x08009f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d045      	beq.n	8009f5c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ed4:	e042      	b.n	8009f5c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009ede:	d13f      	bne.n	8009f60 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ee4:	e03c      	b.n	8009f60 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eee:	d121      	bne.n	8009f34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d836      	bhi.n	8009f64 <DMA_CheckFifoParam+0xd8>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <DMA_CheckFifoParam+0x70>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009f13 	.word	0x08009f13
 8009f04:	08009f0d 	.word	0x08009f0d
 8009f08:	08009f25 	.word	0x08009f25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f10:	e02f      	b.n	8009f72 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d024      	beq.n	8009f68 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f22:	e021      	b.n	8009f68 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009f2c:	d11e      	bne.n	8009f6c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009f32:	e01b      	b.n	8009f6c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d902      	bls.n	8009f40 <DMA_CheckFifoParam+0xb4>
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d003      	beq.n	8009f46 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009f3e:	e018      	b.n	8009f72 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	73fb      	strb	r3, [r7, #15]
      break;
 8009f44:	e015      	b.n	8009f72 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00e      	beq.n	8009f70 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	73fb      	strb	r3, [r7, #15]
      break;
 8009f56:	e00b      	b.n	8009f70 <DMA_CheckFifoParam+0xe4>
      break;
 8009f58:	bf00      	nop
 8009f5a:	e00a      	b.n	8009f72 <DMA_CheckFifoParam+0xe6>
      break;
 8009f5c:	bf00      	nop
 8009f5e:	e008      	b.n	8009f72 <DMA_CheckFifoParam+0xe6>
      break;
 8009f60:	bf00      	nop
 8009f62:	e006      	b.n	8009f72 <DMA_CheckFifoParam+0xe6>
      break;
 8009f64:	bf00      	nop
 8009f66:	e004      	b.n	8009f72 <DMA_CheckFifoParam+0xe6>
      break;
 8009f68:	bf00      	nop
 8009f6a:	e002      	b.n	8009f72 <DMA_CheckFifoParam+0xe6>
      break;   
 8009f6c:	bf00      	nop
 8009f6e:	e000      	b.n	8009f72 <DMA_CheckFifoParam+0xe6>
      break;
 8009f70:	bf00      	nop
    }
  } 
  
  return status; 
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b089      	sub	sp, #36	; 0x24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009f96:	2300      	movs	r3, #0
 8009f98:	61fb      	str	r3, [r7, #28]
 8009f9a:	e177      	b.n	800a28c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4013      	ands	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	f040 8166 	bne.w	800a286 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d00b      	beq.n	8009fda <HAL_GPIO_Init+0x5a>
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d007      	beq.n	8009fda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009fce:	2b11      	cmp	r3, #17
 8009fd0:	d003      	beq.n	8009fda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	2b12      	cmp	r3, #18
 8009fd8:	d130      	bne.n	800a03c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	2203      	movs	r2, #3
 8009fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fea:	43db      	mvns	r3, r3
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	68da      	ldr	r2, [r3, #12]
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	4313      	orrs	r3, r2
 800a002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a010:	2201      	movs	r2, #1
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	fa02 f303 	lsl.w	r3, r2, r3
 800a018:	43db      	mvns	r3, r3
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	4013      	ands	r3, r2
 800a01e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	091b      	lsrs	r3, r3, #4
 800a026:	f003 0201 	and.w	r2, r3, #1
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	fa02 f303 	lsl.w	r3, r2, r3
 800a030:	69ba      	ldr	r2, [r7, #24]
 800a032:	4313      	orrs	r3, r2
 800a034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	2203      	movs	r2, #3
 800a048:	fa02 f303 	lsl.w	r3, r2, r3
 800a04c:	43db      	mvns	r3, r3
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	4013      	ands	r3, r2
 800a052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	689a      	ldr	r2, [r3, #8]
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	005b      	lsls	r3, r3, #1
 800a05c:	fa02 f303 	lsl.w	r3, r2, r3
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	4313      	orrs	r3, r2
 800a064:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d003      	beq.n	800a07c <HAL_GPIO_Init+0xfc>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	2b12      	cmp	r3, #18
 800a07a:	d123      	bne.n	800a0c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	08da      	lsrs	r2, r3, #3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3208      	adds	r2, #8
 800a084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	f003 0307 	and.w	r3, r3, #7
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	220f      	movs	r2, #15
 800a094:	fa02 f303 	lsl.w	r3, r2, r3
 800a098:	43db      	mvns	r3, r3
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	4013      	ands	r3, r2
 800a09e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	691a      	ldr	r2, [r3, #16]
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	08da      	lsrs	r2, r3, #3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3208      	adds	r2, #8
 800a0be:	69b9      	ldr	r1, [r7, #24]
 800a0c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	2203      	movs	r2, #3
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	43db      	mvns	r3, r3
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	4013      	ands	r3, r2
 800a0da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f003 0203 	and.w	r2, r3, #3
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ec:	69ba      	ldr	r2, [r7, #24]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	69ba      	ldr	r2, [r7, #24]
 800a0f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 80c0 	beq.w	800a286 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a106:	2300      	movs	r3, #0
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	4b65      	ldr	r3, [pc, #404]	; (800a2a0 <HAL_GPIO_Init+0x320>)
 800a10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a10e:	4a64      	ldr	r2, [pc, #400]	; (800a2a0 <HAL_GPIO_Init+0x320>)
 800a110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a114:	6453      	str	r3, [r2, #68]	; 0x44
 800a116:	4b62      	ldr	r3, [pc, #392]	; (800a2a0 <HAL_GPIO_Init+0x320>)
 800a118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a122:	4a60      	ldr	r2, [pc, #384]	; (800a2a4 <HAL_GPIO_Init+0x324>)
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	089b      	lsrs	r3, r3, #2
 800a128:	3302      	adds	r3, #2
 800a12a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a12e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	f003 0303 	and.w	r3, r3, #3
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	220f      	movs	r2, #15
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	43db      	mvns	r3, r3
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	4013      	ands	r3, r2
 800a144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a57      	ldr	r2, [pc, #348]	; (800a2a8 <HAL_GPIO_Init+0x328>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d037      	beq.n	800a1be <HAL_GPIO_Init+0x23e>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a56      	ldr	r2, [pc, #344]	; (800a2ac <HAL_GPIO_Init+0x32c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d031      	beq.n	800a1ba <HAL_GPIO_Init+0x23a>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a55      	ldr	r2, [pc, #340]	; (800a2b0 <HAL_GPIO_Init+0x330>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d02b      	beq.n	800a1b6 <HAL_GPIO_Init+0x236>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a54      	ldr	r2, [pc, #336]	; (800a2b4 <HAL_GPIO_Init+0x334>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d025      	beq.n	800a1b2 <HAL_GPIO_Init+0x232>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a53      	ldr	r2, [pc, #332]	; (800a2b8 <HAL_GPIO_Init+0x338>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d01f      	beq.n	800a1ae <HAL_GPIO_Init+0x22e>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a52      	ldr	r2, [pc, #328]	; (800a2bc <HAL_GPIO_Init+0x33c>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d019      	beq.n	800a1aa <HAL_GPIO_Init+0x22a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a51      	ldr	r2, [pc, #324]	; (800a2c0 <HAL_GPIO_Init+0x340>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d013      	beq.n	800a1a6 <HAL_GPIO_Init+0x226>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a50      	ldr	r2, [pc, #320]	; (800a2c4 <HAL_GPIO_Init+0x344>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d00d      	beq.n	800a1a2 <HAL_GPIO_Init+0x222>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a4f      	ldr	r2, [pc, #316]	; (800a2c8 <HAL_GPIO_Init+0x348>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d007      	beq.n	800a19e <HAL_GPIO_Init+0x21e>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a4e      	ldr	r2, [pc, #312]	; (800a2cc <HAL_GPIO_Init+0x34c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d101      	bne.n	800a19a <HAL_GPIO_Init+0x21a>
 800a196:	2309      	movs	r3, #9
 800a198:	e012      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a19a:	230a      	movs	r3, #10
 800a19c:	e010      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a19e:	2308      	movs	r3, #8
 800a1a0:	e00e      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a1a2:	2307      	movs	r3, #7
 800a1a4:	e00c      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a1a6:	2306      	movs	r3, #6
 800a1a8:	e00a      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a1aa:	2305      	movs	r3, #5
 800a1ac:	e008      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a1ae:	2304      	movs	r3, #4
 800a1b0:	e006      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e004      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e002      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e000      	b.n	800a1c0 <HAL_GPIO_Init+0x240>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	69fa      	ldr	r2, [r7, #28]
 800a1c2:	f002 0203 	and.w	r2, r2, #3
 800a1c6:	0092      	lsls	r2, r2, #2
 800a1c8:	4093      	lsls	r3, r2
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1d0:	4934      	ldr	r1, [pc, #208]	; (800a2a4 <HAL_GPIO_Init+0x324>)
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	089b      	lsrs	r3, r3, #2
 800a1d6:	3302      	adds	r3, #2
 800a1d8:	69ba      	ldr	r2, [r7, #24]
 800a1da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a1de:	4b3c      	ldr	r3, [pc, #240]	; (800a2d0 <HAL_GPIO_Init+0x350>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	43db      	mvns	r3, r3
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a202:	4a33      	ldr	r2, [pc, #204]	; (800a2d0 <HAL_GPIO_Init+0x350>)
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a208:	4b31      	ldr	r3, [pc, #196]	; (800a2d0 <HAL_GPIO_Init+0x350>)
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	43db      	mvns	r3, r3
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	4013      	ands	r3, r2
 800a216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	4313      	orrs	r3, r2
 800a22a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a22c:	4a28      	ldr	r2, [pc, #160]	; (800a2d0 <HAL_GPIO_Init+0x350>)
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a232:	4b27      	ldr	r3, [pc, #156]	; (800a2d0 <HAL_GPIO_Init+0x350>)
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	43db      	mvns	r3, r3
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	4013      	ands	r3, r2
 800a240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	4313      	orrs	r3, r2
 800a254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a256:	4a1e      	ldr	r2, [pc, #120]	; (800a2d0 <HAL_GPIO_Init+0x350>)
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a25c:	4b1c      	ldr	r3, [pc, #112]	; (800a2d0 <HAL_GPIO_Init+0x350>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	43db      	mvns	r3, r3
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	4013      	ands	r3, r2
 800a26a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a280:	4a13      	ldr	r2, [pc, #76]	; (800a2d0 <HAL_GPIO_Init+0x350>)
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	3301      	adds	r3, #1
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	2b0f      	cmp	r3, #15
 800a290:	f67f ae84 	bls.w	8009f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a294:	bf00      	nop
 800a296:	3724      	adds	r7, #36	; 0x24
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	40023800 	.word	0x40023800
 800a2a4:	40013800 	.word	0x40013800
 800a2a8:	40020000 	.word	0x40020000
 800a2ac:	40020400 	.word	0x40020400
 800a2b0:	40020800 	.word	0x40020800
 800a2b4:	40020c00 	.word	0x40020c00
 800a2b8:	40021000 	.word	0x40021000
 800a2bc:	40021400 	.word	0x40021400
 800a2c0:	40021800 	.word	0x40021800
 800a2c4:	40021c00 	.word	0x40021c00
 800a2c8:	40022000 	.word	0x40022000
 800a2cc:	40022400 	.word	0x40022400
 800a2d0:	40013c00 	.word	0x40013c00

0800a2d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	691a      	ldr	r2, [r3, #16]
 800a2e4:	887b      	ldrh	r3, [r7, #2]
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	73fb      	strb	r3, [r7, #15]
 800a2f0:	e001      	b.n	800a2f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	807b      	strh	r3, [r7, #2]
 800a310:	4613      	mov	r3, r2
 800a312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a314:	787b      	ldrb	r3, [r7, #1]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a31a:	887a      	ldrh	r2, [r7, #2]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a320:	e003      	b.n	800a32a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a322:	887b      	ldrh	r3, [r7, #2]
 800a324:	041a      	lsls	r2, r3, #16
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	619a      	str	r2, [r3, #24]
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
	...

0800a338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e11f      	b.n	800a58a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d106      	bne.n	800a364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7fc fa2a 	bl	80067b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2224      	movs	r2, #36	; 0x24
 800a368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f022 0201 	bic.w	r2, r2, #1
 800a37a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a38a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a39a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a39c:	f001 f96e 	bl	800b67c <HAL_RCC_GetPCLK1Freq>
 800a3a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	4a7b      	ldr	r2, [pc, #492]	; (800a594 <HAL_I2C_Init+0x25c>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d807      	bhi.n	800a3bc <HAL_I2C_Init+0x84>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	4a7a      	ldr	r2, [pc, #488]	; (800a598 <HAL_I2C_Init+0x260>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	bf94      	ite	ls
 800a3b4:	2301      	movls	r3, #1
 800a3b6:	2300      	movhi	r3, #0
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	e006      	b.n	800a3ca <HAL_I2C_Init+0x92>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	4a77      	ldr	r2, [pc, #476]	; (800a59c <HAL_I2C_Init+0x264>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	bf94      	ite	ls
 800a3c4:	2301      	movls	r3, #1
 800a3c6:	2300      	movhi	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e0db      	b.n	800a58a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	4a72      	ldr	r2, [pc, #456]	; (800a5a0 <HAL_I2C_Init+0x268>)
 800a3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3da:	0c9b      	lsrs	r3, r3, #18
 800a3dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4a64      	ldr	r2, [pc, #400]	; (800a594 <HAL_I2C_Init+0x25c>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d802      	bhi.n	800a40c <HAL_I2C_Init+0xd4>
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	3301      	adds	r3, #1
 800a40a:	e009      	b.n	800a420 <HAL_I2C_Init+0xe8>
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a412:	fb02 f303 	mul.w	r3, r2, r3
 800a416:	4a63      	ldr	r2, [pc, #396]	; (800a5a4 <HAL_I2C_Init+0x26c>)
 800a418:	fba2 2303 	umull	r2, r3, r2, r3
 800a41c:	099b      	lsrs	r3, r3, #6
 800a41e:	3301      	adds	r3, #1
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	6812      	ldr	r2, [r2, #0]
 800a424:	430b      	orrs	r3, r1
 800a426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	4956      	ldr	r1, [pc, #344]	; (800a594 <HAL_I2C_Init+0x25c>)
 800a43c:	428b      	cmp	r3, r1
 800a43e:	d80d      	bhi.n	800a45c <HAL_I2C_Init+0x124>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	1e59      	subs	r1, r3, #1
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a44e:	3301      	adds	r3, #1
 800a450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a454:	2b04      	cmp	r3, #4
 800a456:	bf38      	it	cc
 800a458:	2304      	movcc	r3, #4
 800a45a:	e04f      	b.n	800a4fc <HAL_I2C_Init+0x1c4>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d111      	bne.n	800a488 <HAL_I2C_Init+0x150>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	1e58      	subs	r0, r3, #1
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6859      	ldr	r1, [r3, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	005b      	lsls	r3, r3, #1
 800a470:	440b      	add	r3, r1
 800a472:	fbb0 f3f3 	udiv	r3, r0, r3
 800a476:	3301      	adds	r3, #1
 800a478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	bf0c      	ite	eq
 800a480:	2301      	moveq	r3, #1
 800a482:	2300      	movne	r3, #0
 800a484:	b2db      	uxtb	r3, r3
 800a486:	e012      	b.n	800a4ae <HAL_I2C_Init+0x176>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	1e58      	subs	r0, r3, #1
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6859      	ldr	r1, [r3, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	440b      	add	r3, r1
 800a496:	0099      	lsls	r1, r3, #2
 800a498:	440b      	add	r3, r1
 800a49a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a49e:	3301      	adds	r3, #1
 800a4a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	bf0c      	ite	eq
 800a4a8:	2301      	moveq	r3, #1
 800a4aa:	2300      	movne	r3, #0
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <HAL_I2C_Init+0x17e>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e022      	b.n	800a4fc <HAL_I2C_Init+0x1c4>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10e      	bne.n	800a4dc <HAL_I2C_Init+0x1a4>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	1e58      	subs	r0, r3, #1
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6859      	ldr	r1, [r3, #4]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	440b      	add	r3, r1
 800a4cc:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4da:	e00f      	b.n	800a4fc <HAL_I2C_Init+0x1c4>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	1e58      	subs	r0, r3, #1
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6859      	ldr	r1, [r3, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	440b      	add	r3, r1
 800a4ea:	0099      	lsls	r1, r3, #2
 800a4ec:	440b      	add	r3, r1
 800a4ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a4fc:	6879      	ldr	r1, [r7, #4]
 800a4fe:	6809      	ldr	r1, [r1, #0]
 800a500:	4313      	orrs	r3, r2
 800a502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	69da      	ldr	r2, [r3, #28]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	431a      	orrs	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	430a      	orrs	r2, r1
 800a51e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a52a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	6911      	ldr	r1, [r2, #16]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	68d2      	ldr	r2, [r2, #12]
 800a536:	4311      	orrs	r1, r2
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	430b      	orrs	r3, r1
 800a53e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	695a      	ldr	r2, [r3, #20]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	431a      	orrs	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	430a      	orrs	r2, r1
 800a55a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f042 0201 	orr.w	r2, r2, #1
 800a56a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	000186a0 	.word	0x000186a0
 800a598:	001e847f 	.word	0x001e847f
 800a59c:	003d08ff 	.word	0x003d08ff
 800a5a0:	431bde83 	.word	0x431bde83
 800a5a4:	10624dd3 	.word	0x10624dd3

0800a5a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af02      	add	r7, sp, #8
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	607a      	str	r2, [r7, #4]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	817b      	strh	r3, [r7, #10]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a5bc:	f7fe fc00 	bl	8008dc0 <HAL_GetTick>
 800a5c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b20      	cmp	r3, #32
 800a5cc:	f040 80e0 	bne.w	800a790 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	2319      	movs	r3, #25
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	4970      	ldr	r1, [pc, #448]	; (800a79c <HAL_I2C_Master_Transmit+0x1f4>)
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 fc58 	bl	800ae90 <I2C_WaitOnFlagUntilTimeout>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e0d3      	b.n	800a792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d101      	bne.n	800a5f8 <HAL_I2C_Master_Transmit+0x50>
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e0cc      	b.n	800a792 <HAL_I2C_Master_Transmit+0x1ea>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d007      	beq.n	800a61e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f042 0201 	orr.w	r2, r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a62c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2221      	movs	r2, #33	; 0x21
 800a632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2210      	movs	r2, #16
 800a63a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	893a      	ldrh	r2, [r7, #8]
 800a64e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a654:	b29a      	uxth	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4a50      	ldr	r2, [pc, #320]	; (800a7a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800a65e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a660:	8979      	ldrh	r1, [r7, #10]
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	6a3a      	ldr	r2, [r7, #32]
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f000 fac2 	bl	800abf0 <I2C_MasterRequestWrite>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e08d      	b.n	800a792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a676:	2300      	movs	r3, #0
 800a678:	613b      	str	r3, [r7, #16]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	613b      	str	r3, [r7, #16]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	613b      	str	r3, [r7, #16]
 800a68a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a68c:	e066      	b.n	800a75c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	6a39      	ldr	r1, [r7, #32]
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 fcd2 	bl	800b03c <I2C_WaitOnTXEFlagUntilTimeout>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00d      	beq.n	800a6ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d107      	bne.n	800a6b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e06b      	b.n	800a792 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	781a      	ldrb	r2, [r3, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	f003 0304 	and.w	r3, r3, #4
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	d11b      	bne.n	800a730 <HAL_I2C_Master_Transmit+0x188>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d017      	beq.n	800a730 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	781a      	ldrb	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	1c5a      	adds	r2, r3, #1
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	3b01      	subs	r3, #1
 800a71e:	b29a      	uxth	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a728:	3b01      	subs	r3, #1
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	6a39      	ldr	r1, [r7, #32]
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f000 fcc2 	bl	800b0be <I2C_WaitOnBTFFlagUntilTimeout>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00d      	beq.n	800a75c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a744:	2b04      	cmp	r3, #4
 800a746:	d107      	bne.n	800a758 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a756:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e01a      	b.n	800a792 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a760:	2b00      	cmp	r3, #0
 800a762:	d194      	bne.n	800a68e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2220      	movs	r2, #32
 800a778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	e000      	b.n	800a792 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a790:	2302      	movs	r3, #2
  }
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	00100002 	.word	0x00100002
 800a7a0:	ffff0000 	.word	0xffff0000

0800a7a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08c      	sub	sp, #48	; 0x30
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	607a      	str	r2, [r7, #4]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	817b      	strh	r3, [r7, #10]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a7b8:	f7fe fb02 	bl	8008dc0 <HAL_GetTick>
 800a7bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	f040 820b 	bne.w	800abe2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	2319      	movs	r3, #25
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	497c      	ldr	r1, [pc, #496]	; (800a9c8 <HAL_I2C_Master_Receive+0x224>)
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 fb5a 	bl	800ae90 <I2C_WaitOnFlagUntilTimeout>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	e1fe      	b.n	800abe4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <HAL_I2C_Master_Receive+0x50>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e1f7      	b.n	800abe4 <HAL_I2C_Master_Receive+0x440>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	2b01      	cmp	r3, #1
 800a808:	d007      	beq.n	800a81a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f042 0201 	orr.w	r2, r2, #1
 800a818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a828:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2222      	movs	r2, #34	; 0x22
 800a82e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2210      	movs	r2, #16
 800a836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	893a      	ldrh	r2, [r7, #8]
 800a84a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a850:	b29a      	uxth	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4a5c      	ldr	r2, [pc, #368]	; (800a9cc <HAL_I2C_Master_Receive+0x228>)
 800a85a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a85c:	8979      	ldrh	r1, [r7, #10]
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 fa46 	bl	800acf4 <I2C_MasterRequestRead>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e1b8      	b.n	800abe4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a876:	2b00      	cmp	r3, #0
 800a878:	d113      	bne.n	800a8a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a87a:	2300      	movs	r3, #0
 800a87c:	623b      	str	r3, [r7, #32]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	623b      	str	r3, [r7, #32]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	623b      	str	r3, [r7, #32]
 800a88e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	e18c      	b.n	800abbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d11b      	bne.n	800a8e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	61fb      	str	r3, [r7, #28]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	61fb      	str	r3, [r7, #28]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	61fb      	str	r3, [r7, #28]
 800a8ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	e16c      	b.n	800abbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d11b      	bne.n	800a922 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a90a:	2300      	movs	r3, #0
 800a90c:	61bb      	str	r3, [r7, #24]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	61bb      	str	r3, [r7, #24]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	61bb      	str	r3, [r7, #24]
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	e14c      	b.n	800abbc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a930:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a932:	2300      	movs	r3, #0
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	617b      	str	r3, [r7, #20]
 800a946:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a948:	e138      	b.n	800abbc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a94e:	2b03      	cmp	r3, #3
 800a950:	f200 80f1 	bhi.w	800ab36 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d123      	bne.n	800a9a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a95e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 fbed 	bl	800b140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e139      	b.n	800abe4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	691a      	ldr	r2, [r3, #16]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	b2d2      	uxtb	r2, r2
 800a97c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a98c:	3b01      	subs	r3, #1
 800a98e:	b29a      	uxth	r2, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a998:	b29b      	uxth	r3, r3
 800a99a:	3b01      	subs	r3, #1
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a9a2:	e10b      	b.n	800abbc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d14e      	bne.n	800aa4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4906      	ldr	r1, [pc, #24]	; (800a9d0 <HAL_I2C_Master_Receive+0x22c>)
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 fa6a 	bl	800ae90 <I2C_WaitOnFlagUntilTimeout>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d008      	beq.n	800a9d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e10e      	b.n	800abe4 <HAL_I2C_Master_Receive+0x440>
 800a9c6:	bf00      	nop
 800a9c8:	00100002 	.word	0x00100002
 800a9cc:	ffff0000 	.word	0xffff0000
 800a9d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	691a      	ldr	r2, [r3, #16]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	b2d2      	uxtb	r2, r2
 800a9f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	1c5a      	adds	r2, r3, #1
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa00:	3b01      	subs	r3, #1
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	691a      	ldr	r2, [r3, #16]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	b2d2      	uxtb	r2, r2
 800aa22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	3b01      	subs	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa48:	e0b8      	b.n	800abbc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	2200      	movs	r2, #0
 800aa52:	4966      	ldr	r1, [pc, #408]	; (800abec <HAL_I2C_Master_Receive+0x448>)
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f000 fa1b 	bl	800ae90 <I2C_WaitOnFlagUntilTimeout>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e0bf      	b.n	800abe4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	691a      	ldr	r2, [r3, #16]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	b2d2      	uxtb	r2, r2
 800aa80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	2200      	movs	r2, #0
 800aaae:	494f      	ldr	r1, [pc, #316]	; (800abec <HAL_I2C_Master_Receive+0x448>)
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 f9ed 	bl	800ae90 <I2C_WaitOnFlagUntilTimeout>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e091      	b.n	800abe4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	691a      	ldr	r2, [r3, #16]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae2:	1c5a      	adds	r2, r3, #1
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaec:	3b01      	subs	r3, #1
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	3b01      	subs	r3, #1
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	691a      	ldr	r2, [r3, #16]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0c:	b2d2      	uxtb	r2, r2
 800ab0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab34:	e042      	b.n	800abbc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f000 fb00 	bl	800b140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e04c      	b.n	800abe4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	691a      	ldr	r2, [r3, #16]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	b2d2      	uxtb	r2, r2
 800ab56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	1c5a      	adds	r2, r3, #1
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab66:	3b01      	subs	r3, #1
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	3b01      	subs	r3, #1
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	f003 0304 	and.w	r3, r3, #4
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	d118      	bne.n	800abbc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	691a      	ldr	r2, [r3, #16]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	b2d2      	uxtb	r2, r2
 800ab96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aba6:	3b01      	subs	r3, #1
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	3b01      	subs	r3, #1
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f47f aec2 	bne.w	800a94a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2220      	movs	r2, #32
 800abca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	e000      	b.n	800abe4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800abe2:	2302      	movs	r3, #2
  }
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3728      	adds	r7, #40	; 0x28
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	00010004 	.word	0x00010004

0800abf0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	607a      	str	r2, [r7, #4]
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	460b      	mov	r3, r1
 800abfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d006      	beq.n	800ac1a <I2C_MasterRequestWrite+0x2a>
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d003      	beq.n	800ac1a <I2C_MasterRequestWrite+0x2a>
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ac18:	d108      	bne.n	800ac2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac28:	601a      	str	r2, [r3, #0]
 800ac2a:	e00b      	b.n	800ac44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac30:	2b12      	cmp	r3, #18
 800ac32:	d107      	bne.n	800ac44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f91d 	bl	800ae90 <I2C_WaitOnFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00d      	beq.n	800ac78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac6a:	d103      	bne.n	800ac74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e035      	b.n	800ace4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac80:	d108      	bne.n	800ac94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac82:	897b      	ldrh	r3, [r7, #10]
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	461a      	mov	r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ac90:	611a      	str	r2, [r3, #16]
 800ac92:	e01b      	b.n	800accc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ac94:	897b      	ldrh	r3, [r7, #10]
 800ac96:	11db      	asrs	r3, r3, #7
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	f003 0306 	and.w	r3, r3, #6
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	f063 030f 	orn	r3, r3, #15
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	490e      	ldr	r1, [pc, #56]	; (800acec <I2C_MasterRequestWrite+0xfc>)
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f943 	bl	800af3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	e010      	b.n	800ace4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800acc2:	897b      	ldrh	r3, [r7, #10]
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	4907      	ldr	r1, [pc, #28]	; (800acf0 <I2C_MasterRequestWrite+0x100>)
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f000 f933 	bl	800af3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e000      	b.n	800ace4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	00010008 	.word	0x00010008
 800acf0:	00010002 	.word	0x00010002

0800acf4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af02      	add	r7, sp, #8
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	607a      	str	r2, [r7, #4]
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	460b      	mov	r3, r1
 800ad02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b08      	cmp	r3, #8
 800ad1e:	d006      	beq.n	800ad2e <I2C_MasterRequestRead+0x3a>
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d003      	beq.n	800ad2e <I2C_MasterRequestRead+0x3a>
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad2c:	d108      	bne.n	800ad40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	e00b      	b.n	800ad58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad44:	2b11      	cmp	r3, #17
 800ad46:	d107      	bne.n	800ad58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 f893 	bl	800ae90 <I2C_WaitOnFlagUntilTimeout>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00d      	beq.n	800ad8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad7e:	d103      	bne.n	800ad88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e079      	b.n	800ae80 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad94:	d108      	bne.n	800ada8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ad96:	897b      	ldrh	r3, [r7, #10]
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	f043 0301 	orr.w	r3, r3, #1
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	611a      	str	r2, [r3, #16]
 800ada6:	e05f      	b.n	800ae68 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ada8:	897b      	ldrh	r3, [r7, #10]
 800adaa:	11db      	asrs	r3, r3, #7
 800adac:	b2db      	uxtb	r3, r3
 800adae:	f003 0306 	and.w	r3, r3, #6
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f063 030f 	orn	r3, r3, #15
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	4930      	ldr	r1, [pc, #192]	; (800ae88 <I2C_MasterRequestRead+0x194>)
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f000 f8b9 	bl	800af3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e054      	b.n	800ae80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800add6:	897b      	ldrh	r3, [r7, #10]
 800add8:	b2da      	uxtb	r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	4929      	ldr	r1, [pc, #164]	; (800ae8c <I2C_MasterRequestRead+0x198>)
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 f8a9 	bl	800af3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e044      	b.n	800ae80 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adf6:	2300      	movs	r3, #0
 800adf8:	613b      	str	r3, [r7, #16]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	613b      	str	r3, [r7, #16]
 800ae0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 f831 	bl	800ae90 <I2C_WaitOnFlagUntilTimeout>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00d      	beq.n	800ae50 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae42:	d103      	bne.n	800ae4c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae4a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e017      	b.n	800ae80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ae50:	897b      	ldrh	r3, [r7, #10]
 800ae52:	11db      	asrs	r3, r3, #7
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	f003 0306 	and.w	r3, r3, #6
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	f063 030e 	orn	r3, r3, #14
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	4907      	ldr	r1, [pc, #28]	; (800ae8c <I2C_MasterRequestRead+0x198>)
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 f865 	bl	800af3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	00010008 	.word	0x00010008
 800ae8c:	00010002 	.word	0x00010002

0800ae90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aea0:	e025      	b.n	800aeee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea8:	d021      	beq.n	800aeee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeaa:	f7fd ff89 	bl	8008dc0 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d302      	bcc.n	800aec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d116      	bne.n	800aeee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeda:	f043 0220 	orr.w	r2, r3, #32
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e023      	b.n	800af36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	0c1b      	lsrs	r3, r3, #16
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d10d      	bne.n	800af14 <I2C_WaitOnFlagUntilTimeout+0x84>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	43da      	mvns	r2, r3
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	4013      	ands	r3, r2
 800af04:	b29b      	uxth	r3, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	bf0c      	ite	eq
 800af0a:	2301      	moveq	r3, #1
 800af0c:	2300      	movne	r3, #0
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	461a      	mov	r2, r3
 800af12:	e00c      	b.n	800af2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	43da      	mvns	r2, r3
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	4013      	ands	r3, r2
 800af20:	b29b      	uxth	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	bf0c      	ite	eq
 800af26:	2301      	moveq	r3, #1
 800af28:	2300      	movne	r3, #0
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	461a      	mov	r2, r3
 800af2e:	79fb      	ldrb	r3, [r7, #7]
 800af30:	429a      	cmp	r2, r3
 800af32:	d0b6      	beq.n	800aea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b084      	sub	sp, #16
 800af42:	af00      	add	r7, sp, #0
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	607a      	str	r2, [r7, #4]
 800af4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800af4c:	e051      	b.n	800aff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af5c:	d123      	bne.n	800afa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2220      	movs	r2, #32
 800af82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af92:	f043 0204 	orr.w	r2, r3, #4
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e046      	b.n	800b034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afac:	d021      	beq.n	800aff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afae:	f7fd ff07 	bl	8008dc0 <HAL_GetTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d302      	bcc.n	800afc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d116      	bne.n	800aff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2220      	movs	r2, #32
 800afce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	f043 0220 	orr.w	r2, r3, #32
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e020      	b.n	800b034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	0c1b      	lsrs	r3, r3, #16
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d10c      	bne.n	800b016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	43da      	mvns	r2, r3
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	4013      	ands	r3, r2
 800b008:	b29b      	uxth	r3, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	bf14      	ite	ne
 800b00e:	2301      	movne	r3, #1
 800b010:	2300      	moveq	r3, #0
 800b012:	b2db      	uxtb	r3, r3
 800b014:	e00b      	b.n	800b02e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	43da      	mvns	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	4013      	ands	r3, r2
 800b022:	b29b      	uxth	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	bf14      	ite	ne
 800b028:	2301      	movne	r3, #1
 800b02a:	2300      	moveq	r3, #0
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d18d      	bne.n	800af4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b048:	e02d      	b.n	800b0a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f000 f8ce 	bl	800b1ec <I2C_IsAcknowledgeFailed>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	e02d      	b.n	800b0b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b060:	d021      	beq.n	800b0a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b062:	f7fd fead 	bl	8008dc0 <HAL_GetTick>
 800b066:	4602      	mov	r2, r0
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d302      	bcc.n	800b078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d116      	bne.n	800b0a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2220      	movs	r2, #32
 800b082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	f043 0220 	orr.w	r2, r3, #32
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e007      	b.n	800b0b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b0:	2b80      	cmp	r3, #128	; 0x80
 800b0b2:	d1ca      	bne.n	800b04a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	60f8      	str	r0, [r7, #12]
 800b0c6:	60b9      	str	r1, [r7, #8]
 800b0c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b0ca:	e02d      	b.n	800b128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f000 f88d 	bl	800b1ec <I2C_IsAcknowledgeFailed>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e02d      	b.n	800b138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e2:	d021      	beq.n	800b128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0e4:	f7fd fe6c 	bl	8008dc0 <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d302      	bcc.n	800b0fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d116      	bne.n	800b128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2220      	movs	r2, #32
 800b104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b114:	f043 0220 	orr.w	r2, r3, #32
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e007      	b.n	800b138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	f003 0304 	and.w	r3, r3, #4
 800b132:	2b04      	cmp	r3, #4
 800b134:	d1ca      	bne.n	800b0cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b14c:	e042      	b.n	800b1d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b10      	cmp	r3, #16
 800b15a:	d119      	bne.n	800b190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f06f 0210 	mvn.w	r2, #16
 800b164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2220      	movs	r2, #32
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e029      	b.n	800b1e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b190:	f7fd fe16 	bl	8008dc0 <HAL_GetTick>
 800b194:	4602      	mov	r2, r0
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d302      	bcc.n	800b1a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d116      	bne.n	800b1d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c0:	f043 0220 	orr.w	r2, r3, #32
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e007      	b.n	800b1e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1de:	2b40      	cmp	r3, #64	; 0x40
 800b1e0:	d1b5      	bne.n	800b14e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b202:	d11b      	bne.n	800b23c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b20c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2220      	movs	r2, #32
 800b218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b228:	f043 0204 	orr.w	r2, r3, #4
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e000      	b.n	800b23e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
	...

0800b24c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b252:	2300      	movs	r3, #0
 800b254:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b256:	2300      	movs	r3, #0
 800b258:	603b      	str	r3, [r7, #0]
 800b25a:	4b20      	ldr	r3, [pc, #128]	; (800b2dc <HAL_PWREx_EnableOverDrive+0x90>)
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	4a1f      	ldr	r2, [pc, #124]	; (800b2dc <HAL_PWREx_EnableOverDrive+0x90>)
 800b260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b264:	6413      	str	r3, [r2, #64]	; 0x40
 800b266:	4b1d      	ldr	r3, [pc, #116]	; (800b2dc <HAL_PWREx_EnableOverDrive+0x90>)
 800b268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b272:	4b1b      	ldr	r3, [pc, #108]	; (800b2e0 <HAL_PWREx_EnableOverDrive+0x94>)
 800b274:	2201      	movs	r2, #1
 800b276:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b278:	f7fd fda2 	bl	8008dc0 <HAL_GetTick>
 800b27c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b27e:	e009      	b.n	800b294 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b280:	f7fd fd9e 	bl	8008dc0 <HAL_GetTick>
 800b284:	4602      	mov	r2, r0
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b28e:	d901      	bls.n	800b294 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b290:	2303      	movs	r3, #3
 800b292:	e01f      	b.n	800b2d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b294:	4b13      	ldr	r3, [pc, #76]	; (800b2e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a0:	d1ee      	bne.n	800b280 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b2a2:	4b11      	ldr	r3, [pc, #68]	; (800b2e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2a8:	f7fd fd8a 	bl	8008dc0 <HAL_GetTick>
 800b2ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b2ae:	e009      	b.n	800b2c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b2b0:	f7fd fd86 	bl	8008dc0 <HAL_GetTick>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2be:	d901      	bls.n	800b2c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e007      	b.n	800b2d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b2c4:	4b07      	ldr	r3, [pc, #28]	; (800b2e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2d0:	d1ee      	bne.n	800b2b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	40023800 	.word	0x40023800
 800b2e0:	420e0040 	.word	0x420e0040
 800b2e4:	40007000 	.word	0x40007000
 800b2e8:	420e0044 	.word	0x420e0044

0800b2ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e0cc      	b.n	800b49a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b300:	4b68      	ldr	r3, [pc, #416]	; (800b4a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 030f 	and.w	r3, r3, #15
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d90c      	bls.n	800b328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b30e:	4b65      	ldr	r3, [pc, #404]	; (800b4a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b310:	683a      	ldr	r2, [r7, #0]
 800b312:	b2d2      	uxtb	r2, r2
 800b314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b316:	4b63      	ldr	r3, [pc, #396]	; (800b4a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 030f 	and.w	r3, r3, #15
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	429a      	cmp	r2, r3
 800b322:	d001      	beq.n	800b328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e0b8      	b.n	800b49a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 0302 	and.w	r3, r3, #2
 800b330:	2b00      	cmp	r3, #0
 800b332:	d020      	beq.n	800b376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0304 	and.w	r3, r3, #4
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d005      	beq.n	800b34c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b340:	4b59      	ldr	r3, [pc, #356]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	4a58      	ldr	r2, [pc, #352]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b34a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f003 0308 	and.w	r3, r3, #8
 800b354:	2b00      	cmp	r3, #0
 800b356:	d005      	beq.n	800b364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b358:	4b53      	ldr	r3, [pc, #332]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	4a52      	ldr	r2, [pc, #328]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b35e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b364:	4b50      	ldr	r3, [pc, #320]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	494d      	ldr	r1, [pc, #308]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b372:	4313      	orrs	r3, r2
 800b374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d044      	beq.n	800b40c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d107      	bne.n	800b39a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b38a:	4b47      	ldr	r3, [pc, #284]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d119      	bne.n	800b3ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e07f      	b.n	800b49a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d003      	beq.n	800b3aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d107      	bne.n	800b3ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3aa:	4b3f      	ldr	r3, [pc, #252]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d109      	bne.n	800b3ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e06f      	b.n	800b49a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3ba:	4b3b      	ldr	r3, [pc, #236]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e067      	b.n	800b49a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b3ca:	4b37      	ldr	r3, [pc, #220]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f023 0203 	bic.w	r2, r3, #3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	4934      	ldr	r1, [pc, #208]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b3dc:	f7fd fcf0 	bl	8008dc0 <HAL_GetTick>
 800b3e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3e2:	e00a      	b.n	800b3fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3e4:	f7fd fcec 	bl	8008dc0 <HAL_GetTick>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d901      	bls.n	800b3fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e04f      	b.n	800b49a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3fa:	4b2b      	ldr	r3, [pc, #172]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f003 020c 	and.w	r2, r3, #12
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	429a      	cmp	r2, r3
 800b40a:	d1eb      	bne.n	800b3e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b40c:	4b25      	ldr	r3, [pc, #148]	; (800b4a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 030f 	and.w	r3, r3, #15
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d20c      	bcs.n	800b434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b41a:	4b22      	ldr	r3, [pc, #136]	; (800b4a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	b2d2      	uxtb	r2, r2
 800b420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b422:	4b20      	ldr	r3, [pc, #128]	; (800b4a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 030f 	and.w	r3, r3, #15
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d001      	beq.n	800b434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	e032      	b.n	800b49a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0304 	and.w	r3, r3, #4
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d008      	beq.n	800b452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b440:	4b19      	ldr	r3, [pc, #100]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	4916      	ldr	r1, [pc, #88]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 0308 	and.w	r3, r3, #8
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d009      	beq.n	800b472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b45e:	4b12      	ldr	r3, [pc, #72]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	00db      	lsls	r3, r3, #3
 800b46c:	490e      	ldr	r1, [pc, #56]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b472:	f000 f821 	bl	800b4b8 <HAL_RCC_GetSysClockFreq>
 800b476:	4601      	mov	r1, r0
 800b478:	4b0b      	ldr	r3, [pc, #44]	; (800b4a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	091b      	lsrs	r3, r3, #4
 800b47e:	f003 030f 	and.w	r3, r3, #15
 800b482:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <HAL_RCC_ClockConfig+0x1c0>)
 800b484:	5cd3      	ldrb	r3, [r2, r3]
 800b486:	fa21 f303 	lsr.w	r3, r1, r3
 800b48a:	4a09      	ldr	r2, [pc, #36]	; (800b4b0 <HAL_RCC_ClockConfig+0x1c4>)
 800b48c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b48e:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <HAL_RCC_ClockConfig+0x1c8>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f7fd fc50 	bl	8008d38 <HAL_InitTick>

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	40023c00 	.word	0x40023c00
 800b4a8:	40023800 	.word	0x40023800
 800b4ac:	08019234 	.word	0x08019234
 800b4b0:	20000000 	.word	0x20000000
 800b4b4:	20000004 	.word	0x20000004

0800b4b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	607b      	str	r3, [r7, #4]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b4ce:	4b63      	ldr	r3, [pc, #396]	; (800b65c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f003 030c 	and.w	r3, r3, #12
 800b4d6:	2b04      	cmp	r3, #4
 800b4d8:	d007      	beq.n	800b4ea <HAL_RCC_GetSysClockFreq+0x32>
 800b4da:	2b08      	cmp	r3, #8
 800b4dc:	d008      	beq.n	800b4f0 <HAL_RCC_GetSysClockFreq+0x38>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f040 80b4 	bne.w	800b64c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b4e4:	4b5e      	ldr	r3, [pc, #376]	; (800b660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b4e6:	60bb      	str	r3, [r7, #8]
       break;
 800b4e8:	e0b3      	b.n	800b652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b4ea:	4b5d      	ldr	r3, [pc, #372]	; (800b660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b4ec:	60bb      	str	r3, [r7, #8]
      break;
 800b4ee:	e0b0      	b.n	800b652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b4f0:	4b5a      	ldr	r3, [pc, #360]	; (800b65c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b4fa:	4b58      	ldr	r3, [pc, #352]	; (800b65c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d04a      	beq.n	800b59c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b506:	4b55      	ldr	r3, [pc, #340]	; (800b65c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	099b      	lsrs	r3, r3, #6
 800b50c:	f04f 0400 	mov.w	r4, #0
 800b510:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b514:	f04f 0200 	mov.w	r2, #0
 800b518:	ea03 0501 	and.w	r5, r3, r1
 800b51c:	ea04 0602 	and.w	r6, r4, r2
 800b520:	4629      	mov	r1, r5
 800b522:	4632      	mov	r2, r6
 800b524:	f04f 0300 	mov.w	r3, #0
 800b528:	f04f 0400 	mov.w	r4, #0
 800b52c:	0154      	lsls	r4, r2, #5
 800b52e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b532:	014b      	lsls	r3, r1, #5
 800b534:	4619      	mov	r1, r3
 800b536:	4622      	mov	r2, r4
 800b538:	1b49      	subs	r1, r1, r5
 800b53a:	eb62 0206 	sbc.w	r2, r2, r6
 800b53e:	f04f 0300 	mov.w	r3, #0
 800b542:	f04f 0400 	mov.w	r4, #0
 800b546:	0194      	lsls	r4, r2, #6
 800b548:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b54c:	018b      	lsls	r3, r1, #6
 800b54e:	1a5b      	subs	r3, r3, r1
 800b550:	eb64 0402 	sbc.w	r4, r4, r2
 800b554:	f04f 0100 	mov.w	r1, #0
 800b558:	f04f 0200 	mov.w	r2, #0
 800b55c:	00e2      	lsls	r2, r4, #3
 800b55e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b562:	00d9      	lsls	r1, r3, #3
 800b564:	460b      	mov	r3, r1
 800b566:	4614      	mov	r4, r2
 800b568:	195b      	adds	r3, r3, r5
 800b56a:	eb44 0406 	adc.w	r4, r4, r6
 800b56e:	f04f 0100 	mov.w	r1, #0
 800b572:	f04f 0200 	mov.w	r2, #0
 800b576:	02a2      	lsls	r2, r4, #10
 800b578:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b57c:	0299      	lsls	r1, r3, #10
 800b57e:	460b      	mov	r3, r1
 800b580:	4614      	mov	r4, r2
 800b582:	4618      	mov	r0, r3
 800b584:	4621      	mov	r1, r4
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f04f 0400 	mov.w	r4, #0
 800b58c:	461a      	mov	r2, r3
 800b58e:	4623      	mov	r3, r4
 800b590:	f7f5 fb92 	bl	8000cb8 <__aeabi_uldivmod>
 800b594:	4603      	mov	r3, r0
 800b596:	460c      	mov	r4, r1
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	e049      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b59c:	4b2f      	ldr	r3, [pc, #188]	; (800b65c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	099b      	lsrs	r3, r3, #6
 800b5a2:	f04f 0400 	mov.w	r4, #0
 800b5a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b5aa:	f04f 0200 	mov.w	r2, #0
 800b5ae:	ea03 0501 	and.w	r5, r3, r1
 800b5b2:	ea04 0602 	and.w	r6, r4, r2
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4632      	mov	r2, r6
 800b5ba:	f04f 0300 	mov.w	r3, #0
 800b5be:	f04f 0400 	mov.w	r4, #0
 800b5c2:	0154      	lsls	r4, r2, #5
 800b5c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b5c8:	014b      	lsls	r3, r1, #5
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	4622      	mov	r2, r4
 800b5ce:	1b49      	subs	r1, r1, r5
 800b5d0:	eb62 0206 	sbc.w	r2, r2, r6
 800b5d4:	f04f 0300 	mov.w	r3, #0
 800b5d8:	f04f 0400 	mov.w	r4, #0
 800b5dc:	0194      	lsls	r4, r2, #6
 800b5de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b5e2:	018b      	lsls	r3, r1, #6
 800b5e4:	1a5b      	subs	r3, r3, r1
 800b5e6:	eb64 0402 	sbc.w	r4, r4, r2
 800b5ea:	f04f 0100 	mov.w	r1, #0
 800b5ee:	f04f 0200 	mov.w	r2, #0
 800b5f2:	00e2      	lsls	r2, r4, #3
 800b5f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b5f8:	00d9      	lsls	r1, r3, #3
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4614      	mov	r4, r2
 800b5fe:	195b      	adds	r3, r3, r5
 800b600:	eb44 0406 	adc.w	r4, r4, r6
 800b604:	f04f 0100 	mov.w	r1, #0
 800b608:	f04f 0200 	mov.w	r2, #0
 800b60c:	02a2      	lsls	r2, r4, #10
 800b60e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b612:	0299      	lsls	r1, r3, #10
 800b614:	460b      	mov	r3, r1
 800b616:	4614      	mov	r4, r2
 800b618:	4618      	mov	r0, r3
 800b61a:	4621      	mov	r1, r4
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f04f 0400 	mov.w	r4, #0
 800b622:	461a      	mov	r2, r3
 800b624:	4623      	mov	r3, r4
 800b626:	f7f5 fb47 	bl	8000cb8 <__aeabi_uldivmod>
 800b62a:	4603      	mov	r3, r0
 800b62c:	460c      	mov	r4, r1
 800b62e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b630:	4b0a      	ldr	r3, [pc, #40]	; (800b65c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	0c1b      	lsrs	r3, r3, #16
 800b636:	f003 0303 	and.w	r3, r3, #3
 800b63a:	3301      	adds	r3, #1
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	fbb2 f3f3 	udiv	r3, r2, r3
 800b648:	60bb      	str	r3, [r7, #8]
      break;
 800b64a:	e002      	b.n	800b652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b64c:	4b04      	ldr	r3, [pc, #16]	; (800b660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b64e:	60bb      	str	r3, [r7, #8]
      break;
 800b650:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b652:	68bb      	ldr	r3, [r7, #8]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b65c:	40023800 	.word	0x40023800
 800b660:	00f42400 	.word	0x00f42400

0800b664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b664:	b480      	push	{r7}
 800b666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b668:	4b03      	ldr	r3, [pc, #12]	; (800b678 <HAL_RCC_GetHCLKFreq+0x14>)
 800b66a:	681b      	ldr	r3, [r3, #0]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	20000000 	.word	0x20000000

0800b67c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b680:	f7ff fff0 	bl	800b664 <HAL_RCC_GetHCLKFreq>
 800b684:	4601      	mov	r1, r0
 800b686:	4b05      	ldr	r3, [pc, #20]	; (800b69c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	0a9b      	lsrs	r3, r3, #10
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	4a03      	ldr	r2, [pc, #12]	; (800b6a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b692:	5cd3      	ldrb	r3, [r2, r3]
 800b694:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b698:	4618      	mov	r0, r3
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	40023800 	.word	0x40023800
 800b6a0:	08019244 	.word	0x08019244

0800b6a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b6a8:	f7ff ffdc 	bl	800b664 <HAL_RCC_GetHCLKFreq>
 800b6ac:	4601      	mov	r1, r0
 800b6ae:	4b05      	ldr	r3, [pc, #20]	; (800b6c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	0b5b      	lsrs	r3, r3, #13
 800b6b4:	f003 0307 	and.w	r3, r3, #7
 800b6b8:	4a03      	ldr	r2, [pc, #12]	; (800b6c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6ba:	5cd3      	ldrb	r3, [r2, r3]
 800b6bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	40023800 	.word	0x40023800
 800b6c8:	08019244 	.word	0x08019244

0800b6cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b088      	sub	sp, #32
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00a      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b6f4:	4b66      	ldr	r3, [pc, #408]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b702:	4963      	ldr	r1, [pc, #396]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b704:	4313      	orrs	r3, r2
 800b706:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00a      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b716:	4b5e      	ldr	r3, [pc, #376]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b71c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b724:	495a      	ldr	r1, [pc, #360]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b726:	4313      	orrs	r3, r2
 800b728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10b      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b740:	2b00      	cmp	r3, #0
 800b742:	d105      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d075      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b750:	4b50      	ldr	r3, [pc, #320]	; (800b894 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b756:	f7fd fb33 	bl	8008dc0 <HAL_GetTick>
 800b75a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b75c:	e008      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b75e:	f7fd fb2f 	bl	8008dc0 <HAL_GetTick>
 800b762:	4602      	mov	r2, r0
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d901      	bls.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e1dc      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b770:	4b47      	ldr	r3, [pc, #284]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1f0      	bne.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0301 	and.w	r3, r3, #1
 800b784:	2b00      	cmp	r3, #0
 800b786:	d009      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	019a      	lsls	r2, r3, #6
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	071b      	lsls	r3, r3, #28
 800b794:	493e      	ldr	r1, [pc, #248]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b796:	4313      	orrs	r3, r2
 800b798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0302 	and.w	r3, r3, #2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d01f      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b7a8:	4b39      	ldr	r3, [pc, #228]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ae:	0f1b      	lsrs	r3, r3, #28
 800b7b0:	f003 0307 	and.w	r3, r3, #7
 800b7b4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	019a      	lsls	r2, r3, #6
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	061b      	lsls	r3, r3, #24
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	071b      	lsls	r3, r3, #28
 800b7c8:	4931      	ldr	r1, [pc, #196]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b7d0:	4b2f      	ldr	r3, [pc, #188]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7d6:	f023 021f 	bic.w	r2, r3, #31
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	492b      	ldr	r1, [pc, #172]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00d      	beq.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	019a      	lsls	r2, r3, #6
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	061b      	lsls	r3, r3, #24
 800b800:	431a      	orrs	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	071b      	lsls	r3, r3, #28
 800b808:	4921      	ldr	r1, [pc, #132]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b80a:	4313      	orrs	r3, r2
 800b80c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b810:	4b20      	ldr	r3, [pc, #128]	; (800b894 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b812:	2201      	movs	r2, #1
 800b814:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b816:	f7fd fad3 	bl	8008dc0 <HAL_GetTick>
 800b81a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b81c:	e008      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b81e:	f7fd facf 	bl	8008dc0 <HAL_GetTick>
 800b822:	4602      	mov	r2, r0
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d901      	bls.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e17c      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b830:	4b17      	ldr	r3, [pc, #92]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d0f0      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0304 	and.w	r3, r3, #4
 800b844:	2b00      	cmp	r3, #0
 800b846:	d112      	bne.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10c      	bne.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 80ce 	beq.w	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b86a:	f040 80c8 	bne.w	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b86e:	4b0a      	ldr	r3, [pc, #40]	; (800b898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b870:	2200      	movs	r2, #0
 800b872:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b874:	f7fd faa4 	bl	8008dc0 <HAL_GetTick>
 800b878:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b87a:	e00f      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b87c:	f7fd faa0 	bl	8008dc0 <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	2b02      	cmp	r3, #2
 800b888:	d908      	bls.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e14d      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800b88e:	bf00      	nop
 800b890:	40023800 	.word	0x40023800
 800b894:	42470068 	.word	0x42470068
 800b898:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b89c:	4ba5      	ldr	r3, [pc, #660]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8a8:	d0e8      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0304 	and.w	r3, r3, #4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d02e      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b8b6:	4b9f      	ldr	r3, [pc, #636]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8bc:	0c1b      	lsrs	r3, r3, #16
 800b8be:	f003 0303 	and.w	r3, r3, #3
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b8c8:	4b9a      	ldr	r3, [pc, #616]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ce:	0f1b      	lsrs	r3, r3, #28
 800b8d0:	f003 0307 	and.w	r3, r3, #7
 800b8d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	019a      	lsls	r2, r3, #6
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	085b      	lsrs	r3, r3, #1
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	041b      	lsls	r3, r3, #16
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	061b      	lsls	r3, r3, #24
 800b8ec:	431a      	orrs	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	071b      	lsls	r3, r3, #28
 800b8f2:	4990      	ldr	r1, [pc, #576]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b8fa:	4b8e      	ldr	r3, [pc, #568]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b900:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b908:	3b01      	subs	r3, #1
 800b90a:	021b      	lsls	r3, r3, #8
 800b90c:	4989      	ldr	r1, [pc, #548]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b90e:	4313      	orrs	r3, r2
 800b910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 0308 	and.w	r3, r3, #8
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d02c      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b920:	4b84      	ldr	r3, [pc, #528]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b926:	0c1b      	lsrs	r3, r3, #16
 800b928:	f003 0303 	and.w	r3, r3, #3
 800b92c:	3301      	adds	r3, #1
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b932:	4b80      	ldr	r3, [pc, #512]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b938:	0e1b      	lsrs	r3, r3, #24
 800b93a:	f003 030f 	and.w	r3, r3, #15
 800b93e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	019a      	lsls	r2, r3, #6
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	085b      	lsrs	r3, r3, #1
 800b94a:	3b01      	subs	r3, #1
 800b94c:	041b      	lsls	r3, r3, #16
 800b94e:	431a      	orrs	r2, r3
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	061b      	lsls	r3, r3, #24
 800b954:	431a      	orrs	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	071b      	lsls	r3, r3, #28
 800b95c:	4975      	ldr	r1, [pc, #468]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b95e:	4313      	orrs	r3, r2
 800b960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b964:	4b73      	ldr	r3, [pc, #460]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b96a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b972:	4970      	ldr	r1, [pc, #448]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b974:	4313      	orrs	r3, r2
 800b976:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b982:	2b00      	cmp	r3, #0
 800b984:	d024      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b98a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b98e:	d11f      	bne.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b990:	4b68      	ldr	r3, [pc, #416]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b996:	0e1b      	lsrs	r3, r3, #24
 800b998:	f003 030f 	and.w	r3, r3, #15
 800b99c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b99e:	4b65      	ldr	r3, [pc, #404]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a4:	0f1b      	lsrs	r3, r3, #28
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	019a      	lsls	r2, r3, #6
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	085b      	lsrs	r3, r3, #1
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	041b      	lsls	r3, r3, #16
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	061b      	lsls	r3, r3, #24
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	071b      	lsls	r3, r3, #28
 800b9c8:	495a      	ldr	r1, [pc, #360]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b9d0:	4b59      	ldr	r3, [pc, #356]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b9d6:	f7fd f9f3 	bl	8008dc0 <HAL_GetTick>
 800b9da:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b9dc:	e008      	b.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b9de:	f7fd f9ef 	bl	8008dc0 <HAL_GetTick>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d901      	bls.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e09c      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b9f0:	4b50      	ldr	r3, [pc, #320]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9fc:	d1ef      	bne.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f003 0320 	and.w	r3, r3, #32
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 8083 	beq.w	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60bb      	str	r3, [r7, #8]
 800ba10:	4b48      	ldr	r3, [pc, #288]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba14:	4a47      	ldr	r2, [pc, #284]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba1a:	6413      	str	r3, [r2, #64]	; 0x40
 800ba1c:	4b45      	ldr	r3, [pc, #276]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba24:	60bb      	str	r3, [r7, #8]
 800ba26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ba28:	4b44      	ldr	r3, [pc, #272]	; (800bb3c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a43      	ldr	r2, [pc, #268]	; (800bb3c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ba2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba32:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba34:	f7fd f9c4 	bl	8008dc0 <HAL_GetTick>
 800ba38:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ba3a:	e008      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ba3c:	f7fd f9c0 	bl	8008dc0 <HAL_GetTick>
 800ba40:	4602      	mov	r2, r0
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d901      	bls.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e06d      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ba4e:	4b3b      	ldr	r3, [pc, #236]	; (800bb3c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0f0      	beq.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ba5a:	4b36      	ldr	r3, [pc, #216]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba62:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d02f      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba72:	69ba      	ldr	r2, [r7, #24]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d028      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba78:	4b2e      	ldr	r3, [pc, #184]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba80:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ba82:	4b2f      	ldr	r3, [pc, #188]	; (800bb40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ba84:	2201      	movs	r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ba88:	4b2d      	ldr	r3, [pc, #180]	; (800bb40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ba8e:	4a29      	ldr	r2, [pc, #164]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ba94:	4b27      	ldr	r3, [pc, #156]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba98:	f003 0301 	and.w	r3, r3, #1
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d114      	bne.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800baa0:	f7fd f98e 	bl	8008dc0 <HAL_GetTick>
 800baa4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800baa6:	e00a      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800baa8:	f7fd f98a 	bl	8008dc0 <HAL_GetTick>
 800baac:	4602      	mov	r2, r0
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d901      	bls.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	e035      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800babe:	4b1d      	ldr	r3, [pc, #116]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0ee      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bad6:	d10d      	bne.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800bad8:	4b16      	ldr	r3, [pc, #88]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baec:	4911      	ldr	r1, [pc, #68]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800baee:	4313      	orrs	r3, r2
 800baf0:	608b      	str	r3, [r1, #8]
 800baf2:	e005      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800baf4:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	4a0e      	ldr	r2, [pc, #56]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bafa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bafe:	6093      	str	r3, [r2, #8]
 800bb00:	4b0c      	ldr	r3, [pc, #48]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb0c:	4909      	ldr	r1, [pc, #36]	; (800bb34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 0310 	and.w	r3, r3, #16
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d004      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bb24:	4b07      	ldr	r3, [pc, #28]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800bb26:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3720      	adds	r7, #32
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	40023800 	.word	0x40023800
 800bb38:	42470070 	.word	0x42470070
 800bb3c:	40007000 	.word	0x40007000
 800bb40:	42470e40 	.word	0x42470e40
 800bb44:	424711e0 	.word	0x424711e0

0800bb48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bb50:	2300      	movs	r3, #0
 800bb52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d075      	beq.n	800bc4c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bb60:	4ba2      	ldr	r3, [pc, #648]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	f003 030c 	and.w	r3, r3, #12
 800bb68:	2b04      	cmp	r3, #4
 800bb6a:	d00c      	beq.n	800bb86 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb6c:	4b9f      	ldr	r3, [pc, #636]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bb74:	2b08      	cmp	r3, #8
 800bb76:	d112      	bne.n	800bb9e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb78:	4b9c      	ldr	r3, [pc, #624]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb84:	d10b      	bne.n	800bb9e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb86:	4b99      	ldr	r3, [pc, #612]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d05b      	beq.n	800bc4a <HAL_RCC_OscConfig+0x102>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d157      	bne.n	800bc4a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e20b      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba6:	d106      	bne.n	800bbb6 <HAL_RCC_OscConfig+0x6e>
 800bba8:	4b90      	ldr	r3, [pc, #576]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a8f      	ldr	r2, [pc, #572]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	e01d      	b.n	800bbf2 <HAL_RCC_OscConfig+0xaa>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbbe:	d10c      	bne.n	800bbda <HAL_RCC_OscConfig+0x92>
 800bbc0:	4b8a      	ldr	r3, [pc, #552]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a89      	ldr	r2, [pc, #548]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	4b87      	ldr	r3, [pc, #540]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a86      	ldr	r2, [pc, #536]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbd6:	6013      	str	r3, [r2, #0]
 800bbd8:	e00b      	b.n	800bbf2 <HAL_RCC_OscConfig+0xaa>
 800bbda:	4b84      	ldr	r3, [pc, #528]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a83      	ldr	r2, [pc, #524]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	4b81      	ldr	r3, [pc, #516]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a80      	ldr	r2, [pc, #512]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bbec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bbf0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d013      	beq.n	800bc22 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbfa:	f7fd f8e1 	bl	8008dc0 <HAL_GetTick>
 800bbfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc00:	e008      	b.n	800bc14 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc02:	f7fd f8dd 	bl	8008dc0 <HAL_GetTick>
 800bc06:	4602      	mov	r2, r0
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	2b64      	cmp	r3, #100	; 0x64
 800bc0e:	d901      	bls.n	800bc14 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800bc10:	2303      	movs	r3, #3
 800bc12:	e1d0      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc14:	4b75      	ldr	r3, [pc, #468]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0f0      	beq.n	800bc02 <HAL_RCC_OscConfig+0xba>
 800bc20:	e014      	b.n	800bc4c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc22:	f7fd f8cd 	bl	8008dc0 <HAL_GetTick>
 800bc26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc28:	e008      	b.n	800bc3c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc2a:	f7fd f8c9 	bl	8008dc0 <HAL_GetTick>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	2b64      	cmp	r3, #100	; 0x64
 800bc36:	d901      	bls.n	800bc3c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e1bc      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc3c:	4b6b      	ldr	r3, [pc, #428]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1f0      	bne.n	800bc2a <HAL_RCC_OscConfig+0xe2>
 800bc48:	e000      	b.n	800bc4c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0302 	and.w	r3, r3, #2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d063      	beq.n	800bd20 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bc58:	4b64      	ldr	r3, [pc, #400]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f003 030c 	and.w	r3, r3, #12
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc64:	4b61      	ldr	r3, [pc, #388]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bc6c:	2b08      	cmp	r3, #8
 800bc6e:	d11c      	bne.n	800bcaa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc70:	4b5e      	ldr	r3, [pc, #376]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d116      	bne.n	800bcaa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc7c:	4b5b      	ldr	r3, [pc, #364]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f003 0302 	and.w	r3, r3, #2
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d005      	beq.n	800bc94 <HAL_RCC_OscConfig+0x14c>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d001      	beq.n	800bc94 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	e190      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc94:	4b55      	ldr	r3, [pc, #340]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	00db      	lsls	r3, r3, #3
 800bca2:	4952      	ldr	r1, [pc, #328]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bca4:	4313      	orrs	r3, r2
 800bca6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bca8:	e03a      	b.n	800bd20 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d020      	beq.n	800bcf4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bcb2:	4b4f      	ldr	r3, [pc, #316]	; (800bdf0 <HAL_RCC_OscConfig+0x2a8>)
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcb8:	f7fd f882 	bl	8008dc0 <HAL_GetTick>
 800bcbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcbe:	e008      	b.n	800bcd2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bcc0:	f7fd f87e 	bl	8008dc0 <HAL_GetTick>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d901      	bls.n	800bcd2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e171      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcd2:	4b46      	ldr	r3, [pc, #280]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f003 0302 	and.w	r3, r3, #2
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0f0      	beq.n	800bcc0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcde:	4b43      	ldr	r3, [pc, #268]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	493f      	ldr	r1, [pc, #252]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	600b      	str	r3, [r1, #0]
 800bcf2:	e015      	b.n	800bd20 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bcf4:	4b3e      	ldr	r3, [pc, #248]	; (800bdf0 <HAL_RCC_OscConfig+0x2a8>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcfa:	f7fd f861 	bl	8008dc0 <HAL_GetTick>
 800bcfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd00:	e008      	b.n	800bd14 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd02:	f7fd f85d 	bl	8008dc0 <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d901      	bls.n	800bd14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e150      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd14:	4b35      	ldr	r3, [pc, #212]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 0302 	and.w	r3, r3, #2
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1f0      	bne.n	800bd02 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 0308 	and.w	r3, r3, #8
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d030      	beq.n	800bd8e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d016      	beq.n	800bd62 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd34:	4b2f      	ldr	r3, [pc, #188]	; (800bdf4 <HAL_RCC_OscConfig+0x2ac>)
 800bd36:	2201      	movs	r2, #1
 800bd38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd3a:	f7fd f841 	bl	8008dc0 <HAL_GetTick>
 800bd3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd40:	e008      	b.n	800bd54 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd42:	f7fd f83d 	bl	8008dc0 <HAL_GetTick>
 800bd46:	4602      	mov	r2, r0
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	d901      	bls.n	800bd54 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800bd50:	2303      	movs	r3, #3
 800bd52:	e130      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd54:	4b25      	ldr	r3, [pc, #148]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bd56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d0f0      	beq.n	800bd42 <HAL_RCC_OscConfig+0x1fa>
 800bd60:	e015      	b.n	800bd8e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd62:	4b24      	ldr	r3, [pc, #144]	; (800bdf4 <HAL_RCC_OscConfig+0x2ac>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd68:	f7fd f82a 	bl	8008dc0 <HAL_GetTick>
 800bd6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd6e:	e008      	b.n	800bd82 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd70:	f7fd f826 	bl	8008dc0 <HAL_GetTick>
 800bd74:	4602      	mov	r2, r0
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d901      	bls.n	800bd82 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	e119      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd82:	4b1a      	ldr	r3, [pc, #104]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bd84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd86:	f003 0302 	and.w	r3, r3, #2
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1f0      	bne.n	800bd70 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f003 0304 	and.w	r3, r3, #4
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 809f 	beq.w	800beda <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bda0:	4b12      	ldr	r3, [pc, #72]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bda2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10f      	bne.n	800bdcc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	4b0e      	ldr	r3, [pc, #56]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb4:	4a0d      	ldr	r2, [pc, #52]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bdb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdba:	6413      	str	r3, [r2, #64]	; 0x40
 800bdbc:	4b0b      	ldr	r3, [pc, #44]	; (800bdec <HAL_RCC_OscConfig+0x2a4>)
 800bdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdc4:	60fb      	str	r3, [r7, #12]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bdcc:	4b0a      	ldr	r3, [pc, #40]	; (800bdf8 <HAL_RCC_OscConfig+0x2b0>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d120      	bne.n	800be1a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bdd8:	4b07      	ldr	r3, [pc, #28]	; (800bdf8 <HAL_RCC_OscConfig+0x2b0>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a06      	ldr	r2, [pc, #24]	; (800bdf8 <HAL_RCC_OscConfig+0x2b0>)
 800bdde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bde2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bde4:	f7fc ffec 	bl	8008dc0 <HAL_GetTick>
 800bde8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bdea:	e010      	b.n	800be0e <HAL_RCC_OscConfig+0x2c6>
 800bdec:	40023800 	.word	0x40023800
 800bdf0:	42470000 	.word	0x42470000
 800bdf4:	42470e80 	.word	0x42470e80
 800bdf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdfc:	f7fc ffe0 	bl	8008dc0 <HAL_GetTick>
 800be00:	4602      	mov	r2, r0
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	2b02      	cmp	r3, #2
 800be08:	d901      	bls.n	800be0e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e0d3      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be0e:	4b6c      	ldr	r3, [pc, #432]	; (800bfc0 <HAL_RCC_OscConfig+0x478>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be16:	2b00      	cmp	r3, #0
 800be18:	d0f0      	beq.n	800bdfc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d106      	bne.n	800be30 <HAL_RCC_OscConfig+0x2e8>
 800be22:	4b68      	ldr	r3, [pc, #416]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be26:	4a67      	ldr	r2, [pc, #412]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be28:	f043 0301 	orr.w	r3, r3, #1
 800be2c:	6713      	str	r3, [r2, #112]	; 0x70
 800be2e:	e01c      	b.n	800be6a <HAL_RCC_OscConfig+0x322>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	2b05      	cmp	r3, #5
 800be36:	d10c      	bne.n	800be52 <HAL_RCC_OscConfig+0x30a>
 800be38:	4b62      	ldr	r3, [pc, #392]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be3c:	4a61      	ldr	r2, [pc, #388]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be3e:	f043 0304 	orr.w	r3, r3, #4
 800be42:	6713      	str	r3, [r2, #112]	; 0x70
 800be44:	4b5f      	ldr	r3, [pc, #380]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be48:	4a5e      	ldr	r2, [pc, #376]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be4a:	f043 0301 	orr.w	r3, r3, #1
 800be4e:	6713      	str	r3, [r2, #112]	; 0x70
 800be50:	e00b      	b.n	800be6a <HAL_RCC_OscConfig+0x322>
 800be52:	4b5c      	ldr	r3, [pc, #368]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be56:	4a5b      	ldr	r2, [pc, #364]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be58:	f023 0301 	bic.w	r3, r3, #1
 800be5c:	6713      	str	r3, [r2, #112]	; 0x70
 800be5e:	4b59      	ldr	r3, [pc, #356]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be62:	4a58      	ldr	r2, [pc, #352]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be64:	f023 0304 	bic.w	r3, r3, #4
 800be68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d015      	beq.n	800be9e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be72:	f7fc ffa5 	bl	8008dc0 <HAL_GetTick>
 800be76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be78:	e00a      	b.n	800be90 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be7a:	f7fc ffa1 	bl	8008dc0 <HAL_GetTick>
 800be7e:	4602      	mov	r2, r0
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	f241 3288 	movw	r2, #5000	; 0x1388
 800be88:	4293      	cmp	r3, r2
 800be8a:	d901      	bls.n	800be90 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e092      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be90:	4b4c      	ldr	r3, [pc, #304]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800be92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0ee      	beq.n	800be7a <HAL_RCC_OscConfig+0x332>
 800be9c:	e014      	b.n	800bec8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be9e:	f7fc ff8f 	bl	8008dc0 <HAL_GetTick>
 800bea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bea4:	e00a      	b.n	800bebc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bea6:	f7fc ff8b 	bl	8008dc0 <HAL_GetTick>
 800beaa:	4602      	mov	r2, r0
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d901      	bls.n	800bebc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800beb8:	2303      	movs	r3, #3
 800beba:	e07c      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bebc:	4b41      	ldr	r3, [pc, #260]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800bebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec0:	f003 0302 	and.w	r3, r3, #2
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1ee      	bne.n	800bea6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d105      	bne.n	800beda <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bece:	4b3d      	ldr	r3, [pc, #244]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800bed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed2:	4a3c      	ldr	r2, [pc, #240]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800bed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bed8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d068      	beq.n	800bfb4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bee2:	4b38      	ldr	r3, [pc, #224]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	f003 030c 	and.w	r3, r3, #12
 800beea:	2b08      	cmp	r3, #8
 800beec:	d060      	beq.n	800bfb0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d145      	bne.n	800bf82 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bef6:	4b34      	ldr	r3, [pc, #208]	; (800bfc8 <HAL_RCC_OscConfig+0x480>)
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800befc:	f7fc ff60 	bl	8008dc0 <HAL_GetTick>
 800bf00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf02:	e008      	b.n	800bf16 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf04:	f7fc ff5c 	bl	8008dc0 <HAL_GetTick>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d901      	bls.n	800bf16 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e04f      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf16:	4b2b      	ldr	r3, [pc, #172]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1f0      	bne.n	800bf04 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	69da      	ldr	r2, [r3, #28]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	019b      	lsls	r3, r3, #6
 800bf32:	431a      	orrs	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf38:	085b      	lsrs	r3, r3, #1
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	041b      	lsls	r3, r3, #16
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	061b      	lsls	r3, r3, #24
 800bf46:	431a      	orrs	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4c:	071b      	lsls	r3, r3, #28
 800bf4e:	491d      	ldr	r1, [pc, #116]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800bf50:	4313      	orrs	r3, r2
 800bf52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf54:	4b1c      	ldr	r3, [pc, #112]	; (800bfc8 <HAL_RCC_OscConfig+0x480>)
 800bf56:	2201      	movs	r2, #1
 800bf58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf5a:	f7fc ff31 	bl	8008dc0 <HAL_GetTick>
 800bf5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf60:	e008      	b.n	800bf74 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf62:	f7fc ff2d 	bl	8008dc0 <HAL_GetTick>
 800bf66:	4602      	mov	r2, r0
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d901      	bls.n	800bf74 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e020      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf74:	4b13      	ldr	r3, [pc, #76]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d0f0      	beq.n	800bf62 <HAL_RCC_OscConfig+0x41a>
 800bf80:	e018      	b.n	800bfb4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf82:	4b11      	ldr	r3, [pc, #68]	; (800bfc8 <HAL_RCC_OscConfig+0x480>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf88:	f7fc ff1a 	bl	8008dc0 <HAL_GetTick>
 800bf8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf8e:	e008      	b.n	800bfa2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf90:	f7fc ff16 	bl	8008dc0 <HAL_GetTick>
 800bf94:	4602      	mov	r2, r0
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d901      	bls.n	800bfa2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	e009      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfa2:	4b08      	ldr	r3, [pc, #32]	; (800bfc4 <HAL_RCC_OscConfig+0x47c>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1f0      	bne.n	800bf90 <HAL_RCC_OscConfig+0x448>
 800bfae:	e001      	b.n	800bfb4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e000      	b.n	800bfb6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3718      	adds	r7, #24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	40007000 	.word	0x40007000
 800bfc4:	40023800 	.word	0x40023800
 800bfc8:	42470060 	.word	0x42470060

0800bfcc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d101      	bne.n	800bfde <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e022      	b.n	800c024 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d105      	bne.n	800bff6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7fa fc5d 	bl	80068b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2203      	movs	r2, #3
 800bffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f814 	bl	800c02c <HAL_SD_InitCard>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	e00a      	b.n	800c024 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	4618      	mov	r0, r3
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c02c:	b5b0      	push	{r4, r5, r7, lr}
 800c02e:	b08e      	sub	sp, #56	; 0x38
 800c030:	af04      	add	r7, sp, #16
 800c032:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c034:	2300      	movs	r3, #0
 800c036:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c03c:	2300      	movs	r3, #0
 800c03e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c040:	2300      	movs	r3, #0
 800c042:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c044:	2300      	movs	r3, #0
 800c046:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c048:	2376      	movs	r3, #118	; 0x76
 800c04a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681d      	ldr	r5, [r3, #0]
 800c050:	466c      	mov	r4, sp
 800c052:	f107 0314 	add.w	r3, r7, #20
 800c056:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c05a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c05e:	f107 0308 	add.w	r3, r7, #8
 800c062:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c064:	4628      	mov	r0, r5
 800c066:	f003 fa87 	bl	800f578 <SDIO_Init>
 800c06a:	4603      	mov	r3, r0
 800c06c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e031      	b.n	800c0e0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c07c:	4b1a      	ldr	r3, [pc, #104]	; (800c0e8 <HAL_SD_InitCard+0xbc>)
 800c07e:	2200      	movs	r2, #0
 800c080:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4618      	mov	r0, r3
 800c088:	f003 fabf 	bl	800f60a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c08c:	4b16      	ldr	r3, [pc, #88]	; (800c0e8 <HAL_SD_InitCard+0xbc>)
 800c08e:	2201      	movs	r2, #1
 800c090:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 ffc6 	bl	800d024 <SD_PowerON>
 800c098:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00b      	beq.n	800c0b8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e013      	b.n	800c0e0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fee5 	bl	800ce88 <SD_InitCard>
 800c0be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00b      	beq.n	800c0de <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0d2:	6a3b      	ldr	r3, [r7, #32]
 800c0d4:	431a      	orrs	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e000      	b.n	800c0e0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3728      	adds	r7, #40	; 0x28
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c0e8:	422580a0 	.word	0x422580a0

0800c0ec <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08c      	sub	sp, #48	; 0x30
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
 800c0f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d107      	bne.n	800c114 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c108:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	e0c7      	b.n	800c2a4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	f040 80c0 	bne.w	800c2a2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	441a      	add	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c132:	429a      	cmp	r2, r3
 800c134:	d907      	bls.n	800c146 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e0ae      	b.n	800c2a4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2203      	movs	r2, #3
 800c14a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2200      	movs	r2, #0
 800c154:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c164:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16a:	4a50      	ldr	r2, [pc, #320]	; (800c2ac <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c16c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c172:	4a4f      	ldr	r2, [pc, #316]	; (800c2b0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c174:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	2200      	movs	r2, #0
 800c17c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	3380      	adds	r3, #128	; 0x80
 800c188:	4619      	mov	r1, r3
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	025b      	lsls	r3, r3, #9
 800c190:	089b      	lsrs	r3, r3, #2
 800c192:	f7fd fc07 	bl	80099a4 <HAL_DMA_Start_IT>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d017      	beq.n	800c1cc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c1aa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a40      	ldr	r2, [pc, #256]	; (800c2b4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c1b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e06b      	b.n	800c2a4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c1cc:	4b3a      	ldr	r3, [pc, #232]	; (800c2b8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d002      	beq.n	800c1e0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	025b      	lsls	r3, r3, #9
 800c1de:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f003 faa1 	bl	800f730 <SDMMC_CmdBlockLength>
 800c1ee:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00f      	beq.n	800c216 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a2e      	ldr	r2, [pc, #184]	; (800c2b4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c1fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	431a      	orrs	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800c212:	2301      	movs	r3, #1
 800c214:	e046      	b.n	800c2a4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c216:	f04f 33ff 	mov.w	r3, #4294967295
 800c21a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	025b      	lsls	r3, r3, #9
 800c220:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c222:	2390      	movs	r3, #144	; 0x90
 800c224:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c226:	2302      	movs	r3, #2
 800c228:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c22a:	2300      	movs	r3, #0
 800c22c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c22e:	2301      	movs	r3, #1
 800c230:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f107 0210 	add.w	r2, r7, #16
 800c23a:	4611      	mov	r1, r2
 800c23c:	4618      	mov	r0, r3
 800c23e:	f003 fa4b 	bl	800f6d8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d90a      	bls.n	800c25e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2282      	movs	r2, #130	; 0x82
 800c24c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c254:	4618      	mov	r0, r3
 800c256:	f003 faaf 	bl	800f7b8 <SDMMC_CmdReadMultiBlock>
 800c25a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c25c:	e009      	b.n	800c272 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2281      	movs	r2, #129	; 0x81
 800c262:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c26a:	4618      	mov	r0, r3
 800c26c:	f003 fa82 	bl	800f774 <SDMMC_CmdReadSingleBlock>
 800c270:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	2b00      	cmp	r3, #0
 800c276:	d012      	beq.n	800c29e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a0d      	ldr	r2, [pc, #52]	; (800c2b4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c27e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c286:	431a      	orrs	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e002      	b.n	800c2a4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e000      	b.n	800c2a4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800c2a2:	2302      	movs	r3, #2
  }
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3730      	adds	r7, #48	; 0x30
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	0800cc97 	.word	0x0800cc97
 800c2b0:	0800cd09 	.word	0x0800cd09
 800c2b4:	004005ff 	.word	0x004005ff
 800c2b8:	4225858c 	.word	0x4225858c

0800c2bc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08c      	sub	sp, #48	; 0x30
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
 800c2c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d107      	bne.n	800c2e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e0ca      	b.n	800c47a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	f040 80c3 	bne.w	800c478 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c2f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	441a      	add	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c302:	429a      	cmp	r2, r3
 800c304:	d907      	bls.n	800c316 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	e0b1      	b.n	800c47a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2203      	movs	r2, #3
 800c31a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2200      	movs	r2, #0
 800c324:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f042 021a 	orr.w	r2, r2, #26
 800c334:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c33a:	4a52      	ldr	r2, [pc, #328]	; (800c484 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c33c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c342:	4a51      	ldr	r2, [pc, #324]	; (800c488 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800c344:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c34a:	2200      	movs	r2, #0
 800c34c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c352:	2b01      	cmp	r3, #1
 800c354:	d002      	beq.n	800c35c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c358:	025b      	lsls	r3, r3, #9
 800c35a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c364:	4618      	mov	r0, r3
 800c366:	f003 f9e3 	bl	800f730 <SDMMC_CmdBlockLength>
 800c36a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00f      	beq.n	800c392 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a45      	ldr	r2, [pc, #276]	; (800c48c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c378:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c380:	431a      	orrs	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	e073      	b.n	800c47a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d90a      	bls.n	800c3ae <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	22a0      	movs	r2, #160	; 0xa0
 800c39c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f003 fa4b 	bl	800f840 <SDMMC_CmdWriteMultiBlock>
 800c3aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c3ac:	e009      	b.n	800c3c2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2290      	movs	r2, #144	; 0x90
 800c3b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f003 fa1e 	bl	800f7fc <SDMMC_CmdWriteSingleBlock>
 800c3c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d012      	beq.n	800c3ee <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a2f      	ldr	r2, [pc, #188]	; (800c48c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c3ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e045      	b.n	800c47a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c3ee:	4b28      	ldr	r3, [pc, #160]	; (800c490 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c3f8:	68b9      	ldr	r1, [r7, #8]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	3380      	adds	r3, #128	; 0x80
 800c400:	461a      	mov	r2, r3
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	025b      	lsls	r3, r3, #9
 800c406:	089b      	lsrs	r3, r3, #2
 800c408:	f7fd facc 	bl	80099a4 <HAL_DMA_Start_IT>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d01a      	beq.n	800c448 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f022 021a 	bic.w	r2, r2, #26
 800c420:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a19      	ldr	r2, [pc, #100]	; (800c48c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c428:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2201      	movs	r2, #1
 800c43a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	e018      	b.n	800c47a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c448:	f04f 33ff 	mov.w	r3, #4294967295
 800c44c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	025b      	lsls	r3, r3, #9
 800c452:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c454:	2390      	movs	r3, #144	; 0x90
 800c456:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c458:	2300      	movs	r3, #0
 800c45a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c460:	2301      	movs	r3, #1
 800c462:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f107 0210 	add.w	r2, r7, #16
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f003 f932 	bl	800f6d8 <SDIO_ConfigData>

      return HAL_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	e000      	b.n	800c47a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800c478:	2302      	movs	r3, #2
  }
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3730      	adds	r7, #48	; 0x30
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	0800cc6d 	.word	0x0800cc6d
 800c488:	0800cd09 	.word	0x0800cd09
 800c48c:	004005ff 	.word	0x004005ff
 800c490:	4225858c 	.word	0x4225858c

0800c494 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d008      	beq.n	800c4c2 <HAL_SD_IRQHandler+0x2e>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f003 0308 	and.w	r3, r3, #8
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d003      	beq.n	800c4c2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 ffc8 	bl	800d450 <SD_Read_IT>
 800c4c0:	e155      	b.n	800c76e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 808f 	beq.w	800c5f0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4da:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	6812      	ldr	r2, [r2, #0]
 800c4e6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c4ea:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c4ee:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0201 	bic.w	r2, r2, #1
 800c4fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f003 0308 	and.w	r3, r3, #8
 800c506:	2b00      	cmp	r3, #0
 800c508:	d039      	beq.n	800c57e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f003 0302 	and.w	r3, r3, #2
 800c510:	2b00      	cmp	r3, #0
 800c512:	d104      	bne.n	800c51e <HAL_SD_IRQHandler+0x8a>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f003 0320 	and.w	r3, r3, #32
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d011      	beq.n	800c542 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4618      	mov	r0, r3
 800c524:	f003 f9ae 	bl	800f884 <SDMMC_CmdStopTransfer>
 800c528:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d008      	beq.n	800c542 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	431a      	orrs	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f91f 	bl	800c780 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f240 523a 	movw	r2, #1338	; 0x53a
 800c54a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f003 0301 	and.w	r3, r3, #1
 800c560:	2b00      	cmp	r3, #0
 800c562:	d104      	bne.n	800c56e <HAL_SD_IRQHandler+0xda>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f003 0302 	and.w	r3, r3, #2
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d003      	beq.n	800c576 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f003 fe04 	bl	801017c <HAL_SD_RxCpltCallback>
 800c574:	e0fb      	b.n	800c76e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f003 fdf6 	bl	8010168 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c57c:	e0f7      	b.n	800c76e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 80f2 	beq.w	800c76e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b00      	cmp	r3, #0
 800c592:	d011      	beq.n	800c5b8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4618      	mov	r0, r3
 800c59a:	f003 f973 	bl	800f884 <SDMMC_CmdStopTransfer>
 800c59e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d008      	beq.n	800c5b8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	431a      	orrs	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 f8e4 	bl	800c780 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f040 80d5 	bne.w	800c76e <HAL_SD_IRQHandler+0x2da>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f003 0302 	and.w	r3, r3, #2
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f040 80cf 	bne.w	800c76e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f022 0208 	bic.w	r2, r2, #8
 800c5de:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f003 fdbd 	bl	8010168 <HAL_SD_TxCpltCallback>
}
 800c5ee:	e0be      	b.n	800c76e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d008      	beq.n	800c610 <HAL_SD_IRQHandler+0x17c>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f003 0308 	and.w	r3, r3, #8
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 ff72 	bl	800d4f2 <SD_Write_IT>
 800c60e:	e0ae      	b.n	800c76e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c616:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 80a7 	beq.w	800c76e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c626:	f003 0302 	and.w	r3, r3, #2
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d005      	beq.n	800c63a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c632:	f043 0202 	orr.w	r2, r3, #2
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c640:	f003 0308 	and.w	r3, r3, #8
 800c644:	2b00      	cmp	r3, #0
 800c646:	d005      	beq.n	800c654 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64c:	f043 0208 	orr.w	r2, r3, #8
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c65a:	f003 0320 	and.w	r3, r3, #32
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d005      	beq.n	800c66e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c666:	f043 0220 	orr.w	r2, r3, #32
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c674:	f003 0310 	and.w	r3, r3, #16
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d005      	beq.n	800c688 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c680:	f043 0210 	orr.w	r2, r3, #16
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f240 523a 	movw	r2, #1338	; 0x53a
 800c690:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c6a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f003 f8ec 	bl	800f884 <SDMMC_CmdStopTransfer>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f003 0308 	and.w	r3, r3, #8
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00a      	beq.n	800c6d8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f855 	bl	800c780 <HAL_SD_ErrorCallback>
}
 800c6d6:	e04a      	b.n	800c76e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d045      	beq.n	800c76e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f003 0310 	and.w	r3, r3, #16
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d104      	bne.n	800c6f6 <HAL_SD_IRQHandler+0x262>
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f003 0320 	and.w	r3, r3, #32
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d011      	beq.n	800c71a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6fa:	4a1f      	ldr	r2, [pc, #124]	; (800c778 <HAL_SD_IRQHandler+0x2e4>)
 800c6fc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c702:	4618      	mov	r0, r3
 800c704:	f7fd f9a6 	bl	8009a54 <HAL_DMA_Abort_IT>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d02f      	beq.n	800c76e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fb4a 	bl	800cdac <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c718:	e029      	b.n	800c76e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	2b00      	cmp	r3, #0
 800c722:	d104      	bne.n	800c72e <HAL_SD_IRQHandler+0x29a>
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f003 0302 	and.w	r3, r3, #2
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d011      	beq.n	800c752 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c732:	4a12      	ldr	r2, [pc, #72]	; (800c77c <HAL_SD_IRQHandler+0x2e8>)
 800c734:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fd f98a 	bl	8009a54 <HAL_DMA_Abort_IT>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d013      	beq.n	800c76e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 fb65 	bl	800ce1a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c750:	e00d      	b.n	800c76e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f003 fcf4 	bl	8010154 <HAL_SD_AbortCallback>
}
 800c76c:	e7ff      	b.n	800c76e <HAL_SD_IRQHandler+0x2da>
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	0800cdad 	.word	0x0800cdad
 800c77c:	0800ce1b 	.word	0x0800ce1b

0800c780 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7a2:	0f9b      	lsrs	r3, r3, #30
 800c7a4:	b2da      	uxtb	r2, r3
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7ae:	0e9b      	lsrs	r3, r3, #26
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	f003 030f 	and.w	r3, r3, #15
 800c7b6:	b2da      	uxtb	r2, r3
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7c0:	0e1b      	lsrs	r3, r3, #24
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	f003 0303 	and.w	r3, r3, #3
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7d2:	0c1b      	lsrs	r3, r3, #16
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7de:	0a1b      	lsrs	r3, r3, #8
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7f4:	0d1b      	lsrs	r3, r3, #20
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c800:	0c1b      	lsrs	r3, r3, #16
 800c802:	b2db      	uxtb	r3, r3
 800c804:	f003 030f 	and.w	r3, r3, #15
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c812:	0bdb      	lsrs	r3, r3, #15
 800c814:	b2db      	uxtb	r3, r3
 800c816:	f003 0301 	and.w	r3, r3, #1
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c824:	0b9b      	lsrs	r3, r3, #14
 800c826:	b2db      	uxtb	r3, r3
 800c828:	f003 0301 	and.w	r3, r3, #1
 800c82c:	b2da      	uxtb	r2, r3
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c836:	0b5b      	lsrs	r3, r3, #13
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c848:	0b1b      	lsrs	r3, r3, #12
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	f003 0301 	and.w	r3, r3, #1
 800c850:	b2da      	uxtb	r2, r3
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2200      	movs	r2, #0
 800c85a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c860:	2b00      	cmp	r3, #0
 800c862:	d163      	bne.n	800c92c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c868:	009a      	lsls	r2, r3, #2
 800c86a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c86e:	4013      	ands	r3, r2
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c874:	0f92      	lsrs	r2, r2, #30
 800c876:	431a      	orrs	r2, r3
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c880:	0edb      	lsrs	r3, r3, #27
 800c882:	b2db      	uxtb	r3, r3
 800c884:	f003 0307 	and.w	r3, r3, #7
 800c888:	b2da      	uxtb	r2, r3
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c892:	0e1b      	lsrs	r3, r3, #24
 800c894:	b2db      	uxtb	r3, r3
 800c896:	f003 0307 	and.w	r3, r3, #7
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8a4:	0d5b      	lsrs	r3, r3, #21
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	f003 0307 	and.w	r3, r3, #7
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b6:	0c9b      	lsrs	r3, r3, #18
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	f003 0307 	and.w	r3, r3, #7
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8c8:	0bdb      	lsrs	r3, r3, #15
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f003 0307 	and.w	r3, r3, #7
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	7e1b      	ldrb	r3, [r3, #24]
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	f003 0307 	and.w	r3, r3, #7
 800c8ea:	3302      	adds	r3, #2
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c8f6:	fb02 f203 	mul.w	r2, r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	7a1b      	ldrb	r3, [r3, #8]
 800c902:	b2db      	uxtb	r3, r3
 800c904:	f003 030f 	and.w	r3, r3, #15
 800c908:	2201      	movs	r2, #1
 800c90a:	409a      	lsls	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c918:	0a52      	lsrs	r2, r2, #9
 800c91a:	fb02 f203 	mul.w	r2, r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c928:	661a      	str	r2, [r3, #96]	; 0x60
 800c92a:	e031      	b.n	800c990 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c930:	2b01      	cmp	r3, #1
 800c932:	d11d      	bne.n	800c970 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c938:	041b      	lsls	r3, r3, #16
 800c93a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c942:	0c1b      	lsrs	r3, r3, #16
 800c944:	431a      	orrs	r2, r3
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	3301      	adds	r3, #1
 800c950:	029a      	lsls	r2, r3, #10
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c964:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	661a      	str	r2, [r3, #96]	; 0x60
 800c96e:	e00f      	b.n	800c990 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a58      	ldr	r2, [pc, #352]	; (800cad8 <HAL_SD_GetCardCSD+0x344>)
 800c976:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	e09d      	b.n	800cacc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c994:	0b9b      	lsrs	r3, r3, #14
 800c996:	b2db      	uxtb	r3, r3
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9a6:	09db      	lsrs	r3, r3, #7
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ae:	b2da      	uxtb	r2, r3
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c8:	0fdb      	lsrs	r3, r3, #31
 800c9ca:	b2da      	uxtb	r2, r3
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d4:	0f5b      	lsrs	r3, r3, #29
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	f003 0303 	and.w	r3, r3, #3
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e6:	0e9b      	lsrs	r3, r3, #26
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	f003 0307 	and.w	r3, r3, #7
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f8:	0d9b      	lsrs	r3, r3, #22
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	f003 030f 	and.w	r3, r3, #15
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0a:	0d5b      	lsrs	r3, r3, #21
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca26:	0c1b      	lsrs	r3, r3, #16
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3a:	0bdb      	lsrs	r3, r3, #15
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca4e:	0b9b      	lsrs	r3, r3, #14
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca62:	0b5b      	lsrs	r3, r3, #13
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca76:	0b1b      	lsrs	r3, r3, #12
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	f003 0301 	and.w	r3, r3, #1
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8a:	0a9b      	lsrs	r3, r3, #10
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	f003 0303 	and.w	r3, r3, #3
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9e:	0a1b      	lsrs	r3, r3, #8
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	f003 0303 	and.w	r3, r3, #3
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab2:	085b      	lsrs	r3, r3, #1
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	004005ff 	.word	0x004005ff

0800cadc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cb34:	b5b0      	push	{r4, r5, r7, lr}
 800cb36:	b08e      	sub	sp, #56	; 0x38
 800cb38:	af04      	add	r7, sp, #16
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2203      	movs	r2, #3
 800cb42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	d02e      	beq.n	800cbac <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb54:	d106      	bne.n	800cb64 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	639a      	str	r2, [r3, #56]	; 0x38
 800cb62:	e029      	b.n	800cbb8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb6a:	d10a      	bne.n	800cb82 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fb0f 	bl	800d190 <SD_WideBus_Enable>
 800cb72:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	431a      	orrs	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	639a      	str	r2, [r3, #56]	; 0x38
 800cb80:	e01a      	b.n	800cbb8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10a      	bne.n	800cb9e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fb4c 	bl	800d226 <SD_WideBus_Disable>
 800cb8e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb96:	431a      	orrs	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	639a      	str	r2, [r3, #56]	; 0x38
 800cb9c:	e00c      	b.n	800cbb8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	639a      	str	r2, [r3, #56]	; 0x38
 800cbaa:	e005      	b.n	800cbb8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d009      	beq.n	800cbd4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a18      	ldr	r2, [pc, #96]	; (800cc28 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800cbc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e024      	b.n	800cc1e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	699b      	ldr	r3, [r3, #24]
 800cbf4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681d      	ldr	r5, [r3, #0]
 800cbfa:	466c      	mov	r4, sp
 800cbfc:	f107 0318 	add.w	r3, r7, #24
 800cc00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc08:	f107 030c 	add.w	r3, r7, #12
 800cc0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f002 fcb2 	bl	800f578 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3728      	adds	r7, #40	; 0x28
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bdb0      	pop	{r4, r5, r7, pc}
 800cc26:	bf00      	nop
 800cc28:	004005ff 	.word	0x004005ff

0800cc2c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cc38:	f107 030c 	add.w	r3, r7, #12
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fa7e 	bl	800d140 <SD_SendStatus>
 800cc44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d005      	beq.n	800cc58 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	431a      	orrs	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	0a5b      	lsrs	r3, r3, #9
 800cc5c:	f003 030f 	and.w	r3, r3, #15
 800cc60:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cc62:	693b      	ldr	r3, [r7, #16]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3718      	adds	r7, #24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc78:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cc8a:	bf00      	nop
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b084      	sub	sp, #16
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca8:	2b82      	cmp	r3, #130	; 0x82
 800ccaa:	d111      	bne.n	800ccd0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f002 fde7 	bl	800f884 <SDMMC_CmdStopTransfer>
 800ccb6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d008      	beq.n	800ccd0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	431a      	orrs	r2, r3
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f7ff fd58 	bl	800c780 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f022 0208 	bic.w	r2, r2, #8
 800ccde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f240 523a 	movw	r2, #1338	; 0x53a
 800cce8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f003 fa3f 	bl	801017c <HAL_SD_RxCpltCallback>
#endif
}
 800ccfe:	bf00      	nop
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
	...

0800cd08 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd14:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7fd f848 	bl	8009dac <HAL_DMA_GetError>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b02      	cmp	r3, #2
 800cd20:	d03e      	beq.n	800cda0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd28:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd30:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d002      	beq.n	800cd3e <SD_DMAError+0x36>
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d12d      	bne.n	800cd9a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a19      	ldr	r2, [pc, #100]	; (800cda8 <SD_DMAError+0xa0>)
 800cd44:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cd54:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800cd62:	6978      	ldr	r0, [r7, #20]
 800cd64:	f7ff ff62 	bl	800cc2c <HAL_SD_GetCardState>
 800cd68:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b06      	cmp	r3, #6
 800cd6e:	d002      	beq.n	800cd76 <SD_DMAError+0x6e>
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b05      	cmp	r3, #5
 800cd74:	d10a      	bne.n	800cd8c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f002 fd82 	bl	800f884 <SDMMC_CmdStopTransfer>
 800cd80:	4602      	mov	r2, r0
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd86:	431a      	orrs	r2, r3
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2200      	movs	r2, #0
 800cd98:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800cd9a:	6978      	ldr	r0, [r7, #20]
 800cd9c:	f7ff fcf0 	bl	800c780 <HAL_SD_ErrorCallback>
#endif
  }
}
 800cda0:	bf00      	nop
 800cda2:	3718      	adds	r7, #24
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	004005ff 	.word	0x004005ff

0800cdac <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f240 523a 	movw	r2, #1338	; 0x53a
 800cdc2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f7ff ff31 	bl	800cc2c <HAL_SD_GetCardState>
 800cdca:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2b06      	cmp	r3, #6
 800cdde:	d002      	beq.n	800cde6 <SD_DMATxAbort+0x3a>
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	2b05      	cmp	r3, #5
 800cde4:	d10a      	bne.n	800cdfc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f002 fd4a 	bl	800f884 <SDMMC_CmdStopTransfer>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d103      	bne.n	800ce0c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f003 f9a5 	bl	8010154 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ce0a:	e002      	b.n	800ce12 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7ff fcb7 	bl	800c780 <HAL_SD_ErrorCallback>
}
 800ce12:	bf00      	nop
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b084      	sub	sp, #16
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce26:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce30:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f7ff fefa 	bl	800cc2c <HAL_SD_GetCardState>
 800ce38:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	2b06      	cmp	r3, #6
 800ce4c:	d002      	beq.n	800ce54 <SD_DMARxAbort+0x3a>
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	2b05      	cmp	r3, #5
 800ce52:	d10a      	bne.n	800ce6a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f002 fd13 	bl	800f884 <SDMMC_CmdStopTransfer>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce64:	431a      	orrs	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d103      	bne.n	800ce7a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	f003 f96e 	bl	8010154 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ce78:	e002      	b.n	800ce80 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	f7ff fc80 	bl	800c780 <HAL_SD_ErrorCallback>
}
 800ce80:	bf00      	nop
 800ce82:	3710      	adds	r7, #16
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ce88:	b5b0      	push	{r4, r5, r7, lr}
 800ce8a:	b094      	sub	sp, #80	; 0x50
 800ce8c:	af04      	add	r7, sp, #16
 800ce8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ce90:	2301      	movs	r3, #1
 800ce92:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f002 fbc5 	bl	800f628 <SDIO_GetPowerState>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d102      	bne.n	800ceaa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cea4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cea8:	e0b7      	b.n	800d01a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d02f      	beq.n	800cf12 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f002 fdee 	bl	800fa98 <SDMMC_CmdSendCID>
 800cebc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <SD_InitCard+0x40>
    {
      return errorstate;
 800cec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cec6:	e0a8      	b.n	800d01a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2100      	movs	r1, #0
 800cece:	4618      	mov	r0, r3
 800ced0:	f002 fbef 	bl	800f6b2 <SDIO_GetResponse>
 800ced4:	4602      	mov	r2, r0
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2104      	movs	r1, #4
 800cee0:	4618      	mov	r0, r3
 800cee2:	f002 fbe6 	bl	800f6b2 <SDIO_GetResponse>
 800cee6:	4602      	mov	r2, r0
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2108      	movs	r1, #8
 800cef2:	4618      	mov	r0, r3
 800cef4:	f002 fbdd 	bl	800f6b2 <SDIO_GetResponse>
 800cef8:	4602      	mov	r2, r0
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	210c      	movs	r1, #12
 800cf04:	4618      	mov	r0, r3
 800cf06:	f002 fbd4 	bl	800f6b2 <SDIO_GetResponse>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf16:	2b03      	cmp	r3, #3
 800cf18:	d00d      	beq.n	800cf36 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f107 020e 	add.w	r2, r7, #14
 800cf22:	4611      	mov	r1, r2
 800cf24:	4618      	mov	r0, r3
 800cf26:	f002 fdf4 	bl	800fb12 <SDMMC_CmdSetRelAdd>
 800cf2a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <SD_InitCard+0xae>
    {
      return errorstate;
 800cf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf34:	e071      	b.n	800d01a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	d036      	beq.n	800cfac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cf3e:	89fb      	ldrh	r3, [r7, #14]
 800cf40:	461a      	mov	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf4e:	041b      	lsls	r3, r3, #16
 800cf50:	4619      	mov	r1, r3
 800cf52:	4610      	mov	r0, r2
 800cf54:	f002 fdbe 	bl	800fad4 <SDMMC_CmdSendCSD>
 800cf58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d001      	beq.n	800cf64 <SD_InitCard+0xdc>
    {
      return errorstate;
 800cf60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf62:	e05a      	b.n	800d01a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2100      	movs	r1, #0
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f002 fba1 	bl	800f6b2 <SDIO_GetResponse>
 800cf70:	4602      	mov	r2, r0
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2104      	movs	r1, #4
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f002 fb98 	bl	800f6b2 <SDIO_GetResponse>
 800cf82:	4602      	mov	r2, r0
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2108      	movs	r1, #8
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f002 fb8f 	bl	800f6b2 <SDIO_GetResponse>
 800cf94:	4602      	mov	r2, r0
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	210c      	movs	r1, #12
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f002 fb86 	bl	800f6b2 <SDIO_GetResponse>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2104      	movs	r1, #4
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f002 fb7d 	bl	800f6b2 <SDIO_GetResponse>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	0d1a      	lsrs	r2, r3, #20
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cfc0:	f107 0310 	add.w	r3, r7, #16
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff fbe4 	bl	800c794 <HAL_SD_GetCardCSD>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cfd6:	e020      	b.n	800d01a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6819      	ldr	r1, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe0:	041b      	lsls	r3, r3, #16
 800cfe2:	f04f 0400 	mov.w	r4, #0
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	4623      	mov	r3, r4
 800cfea:	4608      	mov	r0, r1
 800cfec:	f002 fc6c 	bl	800f8c8 <SDMMC_CmdSelDesel>
 800cff0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d001      	beq.n	800cffc <SD_InitCard+0x174>
  {
    return errorstate;
 800cff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffa:	e00e      	b.n	800d01a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681d      	ldr	r5, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	466c      	mov	r4, sp
 800d004:	f103 0210 	add.w	r2, r3, #16
 800d008:	ca07      	ldmia	r2, {r0, r1, r2}
 800d00a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d00e:	3304      	adds	r3, #4
 800d010:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d012:	4628      	mov	r0, r5
 800d014:	f002 fab0 	bl	800f578 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3740      	adds	r7, #64	; 0x40
 800d01e:	46bd      	mov	sp, r7
 800d020:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d024 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d02c:	2300      	movs	r3, #0
 800d02e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d030:	2300      	movs	r3, #0
 800d032:	617b      	str	r3, [r7, #20]
 800d034:	2300      	movs	r3, #0
 800d036:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f002 fc66 	bl	800f90e <SDMMC_CmdGoIdleState>
 800d042:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	e072      	b.n	800d134 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4618      	mov	r0, r3
 800d054:	f002 fc79 	bl	800f94a <SDMMC_CmdOperCond>
 800d058:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00d      	beq.n	800d07c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f002 fc4f 	bl	800f90e <SDMMC_CmdGoIdleState>
 800d070:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d004      	beq.n	800d082 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	e05b      	b.n	800d134 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2201      	movs	r2, #1
 800d080:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d086:	2b01      	cmp	r3, #1
 800d088:	d137      	bne.n	800d0fa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2100      	movs	r1, #0
 800d090:	4618      	mov	r0, r3
 800d092:	f002 fc79 	bl	800f988 <SDMMC_CmdAppCommand>
 800d096:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d02d      	beq.n	800d0fa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d09e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0a2:	e047      	b.n	800d134 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f002 fc6c 	bl	800f988 <SDMMC_CmdAppCommand>
 800d0b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <SD_PowerON+0x98>
    {
      return errorstate;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	e03b      	b.n	800d134 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	491e      	ldr	r1, [pc, #120]	; (800d13c <SD_PowerON+0x118>)
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f002 fc82 	bl	800f9cc <SDMMC_CmdAppOperCommand>
 800d0c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d002      	beq.n	800d0d6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0d4:	e02e      	b.n	800d134 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2100      	movs	r1, #0
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f002 fae8 	bl	800f6b2 <SDIO_GetResponse>
 800d0e2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	0fdb      	lsrs	r3, r3, #31
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d101      	bne.n	800d0f0 <SD_PowerON+0xcc>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e000      	b.n	800d0f2 <SD_PowerON+0xce>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	613b      	str	r3, [r7, #16]

    count++;
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d100:	4293      	cmp	r3, r2
 800d102:	d802      	bhi.n	800d10a <SD_PowerON+0xe6>
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0cc      	beq.n	800d0a4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d110:	4293      	cmp	r3, r2
 800d112:	d902      	bls.n	800d11a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d118:	e00c      	b.n	800d134 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d003      	beq.n	800d12c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	645a      	str	r2, [r3, #68]	; 0x44
 800d12a:	e002      	b.n	800d132 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3718      	adds	r7, #24
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	c1100000 	.word	0xc1100000

0800d140 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d102      	bne.n	800d156 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d154:	e018      	b.n	800d188 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d15e:	041b      	lsls	r3, r3, #16
 800d160:	4619      	mov	r1, r3
 800d162:	4610      	mov	r0, r2
 800d164:	f002 fcf6 	bl	800fb54 <SDMMC_CmdSendStatus>
 800d168:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d001      	beq.n	800d174 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	e009      	b.n	800d188 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2100      	movs	r1, #0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f002 fa99 	bl	800f6b2 <SDIO_GetResponse>
 800d180:	4602      	mov	r2, r0
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d198:	2300      	movs	r3, #0
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	2300      	movs	r3, #0
 800d19e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f002 fa83 	bl	800f6b2 <SDIO_GetResponse>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1b6:	d102      	bne.n	800d1be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d1b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1bc:	e02f      	b.n	800d21e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d1be:	f107 030c 	add.w	r3, r7, #12
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 f879 	bl	800d2bc <SD_FindSCR>
 800d1ca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	e023      	b.n	800d21e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d01c      	beq.n	800d21a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1e8:	041b      	lsls	r3, r3, #16
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	f002 fbcb 	bl	800f988 <SDMMC_CmdAppCommand>
 800d1f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	e00f      	b.n	800d21e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2102      	movs	r1, #2
 800d204:	4618      	mov	r0, r3
 800d206:	f002 fc04 	bl	800fa12 <SDMMC_CmdBusWidth>
 800d20a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d001      	beq.n	800d216 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	e003      	b.n	800d21e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d216:	2300      	movs	r3, #0
 800d218:	e001      	b.n	800d21e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d21a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3718      	adds	r7, #24
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b086      	sub	sp, #24
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
 800d232:	2300      	movs	r3, #0
 800d234:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2100      	movs	r1, #0
 800d23c:	4618      	mov	r0, r3
 800d23e:	f002 fa38 	bl	800f6b2 <SDIO_GetResponse>
 800d242:	4603      	mov	r3, r0
 800d244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d24c:	d102      	bne.n	800d254 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d24e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d252:	e02f      	b.n	800d2b4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d254:	f107 030c 	add.w	r3, r7, #12
 800d258:	4619      	mov	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f82e 	bl	800d2bc <SD_FindSCR>
 800d260:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	e023      	b.n	800d2b4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d272:	2b00      	cmp	r3, #0
 800d274:	d01c      	beq.n	800d2b0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d27e:	041b      	lsls	r3, r3, #16
 800d280:	4619      	mov	r1, r3
 800d282:	4610      	mov	r0, r2
 800d284:	f002 fb80 	bl	800f988 <SDMMC_CmdAppCommand>
 800d288:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d001      	beq.n	800d294 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	e00f      	b.n	800d2b4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2100      	movs	r1, #0
 800d29a:	4618      	mov	r0, r3
 800d29c:	f002 fbb9 	bl	800fa12 <SDMMC_CmdBusWidth>
 800d2a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	e003      	b.n	800d2b4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e001      	b.n	800d2b4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3718      	adds	r7, #24
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d2bc:	b590      	push	{r4, r7, lr}
 800d2be:	b08f      	sub	sp, #60	; 0x3c
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d2c6:	f7fb fd7b 	bl	8008dc0 <HAL_GetTick>
 800d2ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	60bb      	str	r3, [r7, #8]
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2108      	movs	r1, #8
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f002 fa24 	bl	800f730 <SDMMC_CmdBlockLength>
 800d2e8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d001      	beq.n	800d2f4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	e0a9      	b.n	800d448 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2fc:	041b      	lsls	r3, r3, #16
 800d2fe:	4619      	mov	r1, r3
 800d300:	4610      	mov	r0, r2
 800d302:	f002 fb41 	bl	800f988 <SDMMC_CmdAppCommand>
 800d306:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d310:	e09a      	b.n	800d448 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d312:	f04f 33ff 	mov.w	r3, #4294967295
 800d316:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d318:	2308      	movs	r3, #8
 800d31a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d31c:	2330      	movs	r3, #48	; 0x30
 800d31e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d320:	2302      	movs	r3, #2
 800d322:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d324:	2300      	movs	r3, #0
 800d326:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d328:	2301      	movs	r3, #1
 800d32a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f107 0210 	add.w	r2, r7, #16
 800d334:	4611      	mov	r1, r2
 800d336:	4618      	mov	r0, r3
 800d338:	f002 f9ce 	bl	800f6d8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4618      	mov	r0, r3
 800d342:	f002 fb88 	bl	800fa56 <SDMMC_CmdSendSCR>
 800d346:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d022      	beq.n	800d394 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	e07a      	b.n	800d448 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00e      	beq.n	800d37e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6819      	ldr	r1, [r3, #0]
 800d364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	f107 0208 	add.w	r2, r7, #8
 800d36c:	18d4      	adds	r4, r2, r3
 800d36e:	4608      	mov	r0, r1
 800d370:	f002 f92d 	bl	800f5ce <SDIO_ReadFIFO>
 800d374:	4603      	mov	r3, r0
 800d376:	6023      	str	r3, [r4, #0]
      index++;
 800d378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37a:	3301      	adds	r3, #1
 800d37c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d37e:	f7fb fd1f 	bl	8008dc0 <HAL_GetTick>
 800d382:	4602      	mov	r2, r0
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38c:	d102      	bne.n	800d394 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d38e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d392:	e059      	b.n	800d448 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d39a:	f240 432a 	movw	r3, #1066	; 0x42a
 800d39e:	4013      	ands	r3, r2
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d0d6      	beq.n	800d352 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3aa:	f003 0308 	and.w	r3, r3, #8
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2208      	movs	r2, #8
 800d3b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d3ba:	2308      	movs	r3, #8
 800d3bc:	e044      	b.n	800d448 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c4:	f003 0302 	and.w	r3, r3, #2
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d005      	beq.n	800d3d8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2202      	movs	r2, #2
 800d3d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d3d4:	2302      	movs	r3, #2
 800d3d6:	e037      	b.n	800d448 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3de:	f003 0320 	and.w	r3, r3, #32
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d005      	beq.n	800d3f2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2220      	movs	r2, #32
 800d3ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d3ee:	2320      	movs	r3, #32
 800d3f0:	e02a      	b.n	800d448 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d3fa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	061a      	lsls	r2, r3, #24
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	021b      	lsls	r3, r3, #8
 800d404:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d408:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	0a1b      	lsrs	r3, r3, #8
 800d40e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d412:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	0e1b      	lsrs	r3, r3, #24
 800d418:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	601a      	str	r2, [r3, #0]
    scr++;
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	3304      	adds	r3, #4
 800d422:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	061a      	lsls	r2, r3, #24
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	021b      	lsls	r3, r3, #8
 800d42c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d430:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	0a1b      	lsrs	r3, r3, #8
 800d436:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d43a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	0e1b      	lsrs	r3, r3, #24
 800d440:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d444:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	373c      	adds	r7, #60	; 0x3c
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd90      	pop	{r4, r7, pc}

0800d450 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d45c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d462:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d03f      	beq.n	800d4ea <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d46a:	2300      	movs	r3, #0
 800d46c:	617b      	str	r3, [r7, #20]
 800d46e:	e033      	b.n	800d4d8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4618      	mov	r0, r3
 800d476:	f002 f8aa 	bl	800f5ce <SDIO_ReadFIFO>
 800d47a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3301      	adds	r3, #1
 800d488:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	3b01      	subs	r3, #1
 800d48e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	0a1b      	lsrs	r3, r3, #8
 800d494:	b2da      	uxtb	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	3301      	adds	r3, #1
 800d49e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	0c1b      	lsrs	r3, r3, #16
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	0e1b      	lsrs	r3, r3, #24
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	617b      	str	r3, [r7, #20]
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	2b07      	cmp	r3, #7
 800d4dc:	d9c8      	bls.n	800d470 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d4ea:	bf00      	nop
 800d4ec:	3718      	adds	r7, #24
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b086      	sub	sp, #24
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a1b      	ldr	r3, [r3, #32]
 800d4fe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d504:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d043      	beq.n	800d594 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d50c:	2300      	movs	r3, #0
 800d50e:	617b      	str	r3, [r7, #20]
 800d510:	e037      	b.n	800d582 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	3301      	adds	r3, #1
 800d51c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	3b01      	subs	r3, #1
 800d522:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	021a      	lsls	r2, r3, #8
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	4313      	orrs	r3, r2
 800d52e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	3301      	adds	r3, #1
 800d534:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	3b01      	subs	r3, #1
 800d53a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	041a      	lsls	r2, r3, #16
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	4313      	orrs	r3, r2
 800d546:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	3301      	adds	r3, #1
 800d54c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	3b01      	subs	r3, #1
 800d552:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	061a      	lsls	r2, r3, #24
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3301      	adds	r3, #1
 800d564:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	3b01      	subs	r3, #1
 800d56a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f107 0208 	add.w	r2, r7, #8
 800d574:	4611      	mov	r1, r2
 800d576:	4618      	mov	r0, r3
 800d578:	f002 f836 	bl	800f5e8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	3301      	adds	r3, #1
 800d580:	617b      	str	r3, [r7, #20]
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	2b07      	cmp	r3, #7
 800d586:	d9c4      	bls.n	800d512 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d594:	bf00      	nop
 800d596:	3718      	adds	r7, #24
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e056      	b.n	800d65c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d106      	bne.n	800d5ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7f9 fa63 	bl	8006a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2202      	movs	r2, #2
 800d5d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685a      	ldr	r2, [r3, #4]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	431a      	orrs	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	431a      	orrs	r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	695b      	ldr	r3, [r3, #20]
 800d600:	431a      	orrs	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	699b      	ldr	r3, [r3, #24]
 800d606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d60a:	431a      	orrs	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	69db      	ldr	r3, [r3, #28]
 800d610:	431a      	orrs	r2, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a1b      	ldr	r3, [r3, #32]
 800d616:	ea42 0103 	orr.w	r1, r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	430a      	orrs	r2, r1
 800d624:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	699b      	ldr	r3, [r3, #24]
 800d62a:	0c1b      	lsrs	r3, r3, #16
 800d62c:	f003 0104 	and.w	r1, r3, #4
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	430a      	orrs	r2, r1
 800d63a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	69da      	ldr	r2, [r3, #28]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d64a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b088      	sub	sp, #32
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	603b      	str	r3, [r7, #0]
 800d670:	4613      	mov	r3, r2
 800d672:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d101      	bne.n	800d686 <HAL_SPI_Transmit+0x22>
 800d682:	2302      	movs	r3, #2
 800d684:	e11e      	b.n	800d8c4 <HAL_SPI_Transmit+0x260>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2201      	movs	r2, #1
 800d68a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d68e:	f7fb fb97 	bl	8008dc0 <HAL_GetTick>
 800d692:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d694:	88fb      	ldrh	r3, [r7, #6]
 800d696:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d002      	beq.n	800d6aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d6a4:	2302      	movs	r3, #2
 800d6a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d6a8:	e103      	b.n	800d8b2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <HAL_SPI_Transmit+0x52>
 800d6b0:	88fb      	ldrh	r3, [r7, #6]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d102      	bne.n	800d6bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d6ba:	e0fa      	b.n	800d8b2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2203      	movs	r2, #3
 800d6c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	88fa      	ldrh	r2, [r7, #6]
 800d6d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	88fa      	ldrh	r2, [r7, #6]
 800d6da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d702:	d107      	bne.n	800d714 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d712:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d71e:	2b40      	cmp	r3, #64	; 0x40
 800d720:	d007      	beq.n	800d732 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d730:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d73a:	d14b      	bne.n	800d7d4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d002      	beq.n	800d74a <HAL_SPI_Transmit+0xe6>
 800d744:	8afb      	ldrh	r3, [r7, #22]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d13e      	bne.n	800d7c8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d74e:	881a      	ldrh	r2, [r3, #0]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d75a:	1c9a      	adds	r2, r3, #2
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d764:	b29b      	uxth	r3, r3
 800d766:	3b01      	subs	r3, #1
 800d768:	b29a      	uxth	r2, r3
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d76e:	e02b      	b.n	800d7c8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	f003 0302 	and.w	r3, r3, #2
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d112      	bne.n	800d7a4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d782:	881a      	ldrh	r2, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78e:	1c9a      	adds	r2, r3, #2
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d798:	b29b      	uxth	r3, r3
 800d79a:	3b01      	subs	r3, #1
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	86da      	strh	r2, [r3, #54]	; 0x36
 800d7a2:	e011      	b.n	800d7c8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7a4:	f7fb fb0c 	bl	8008dc0 <HAL_GetTick>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d803      	bhi.n	800d7bc <HAL_SPI_Transmit+0x158>
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ba:	d102      	bne.n	800d7c2 <HAL_SPI_Transmit+0x15e>
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d102      	bne.n	800d7c8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d7c2:	2303      	movs	r3, #3
 800d7c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d7c6:	e074      	b.n	800d8b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1ce      	bne.n	800d770 <HAL_SPI_Transmit+0x10c>
 800d7d2:	e04c      	b.n	800d86e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <HAL_SPI_Transmit+0x17e>
 800d7dc:	8afb      	ldrh	r3, [r7, #22]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d140      	bne.n	800d864 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	330c      	adds	r3, #12
 800d7ec:	7812      	ldrb	r2, [r2, #0]
 800d7ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f4:	1c5a      	adds	r2, r3, #1
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	3b01      	subs	r3, #1
 800d802:	b29a      	uxth	r2, r3
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d808:	e02c      	b.n	800d864 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	f003 0302 	and.w	r3, r3, #2
 800d814:	2b02      	cmp	r3, #2
 800d816:	d113      	bne.n	800d840 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	330c      	adds	r3, #12
 800d822:	7812      	ldrb	r2, [r2, #0]
 800d824:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d82a:	1c5a      	adds	r2, r3, #1
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d834:	b29b      	uxth	r3, r3
 800d836:	3b01      	subs	r3, #1
 800d838:	b29a      	uxth	r2, r3
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	86da      	strh	r2, [r3, #54]	; 0x36
 800d83e:	e011      	b.n	800d864 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d840:	f7fb fabe 	bl	8008dc0 <HAL_GetTick>
 800d844:	4602      	mov	r2, r0
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d803      	bhi.n	800d858 <HAL_SPI_Transmit+0x1f4>
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d856:	d102      	bne.n	800d85e <HAL_SPI_Transmit+0x1fa>
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d102      	bne.n	800d864 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d85e:	2303      	movs	r3, #3
 800d860:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d862:	e026      	b.n	800d8b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d868:	b29b      	uxth	r3, r3
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1cd      	bne.n	800d80a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d86e:	69ba      	ldr	r2, [r7, #24]
 800d870:	6839      	ldr	r1, [r7, #0]
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f000 fba4 	bl	800dfc0 <SPI_EndRxTxTransaction>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d002      	beq.n	800d884 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2220      	movs	r2, #32
 800d882:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10a      	bne.n	800d8a2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d88c:	2300      	movs	r3, #0
 800d88e:	613b      	str	r3, [r7, #16]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	613b      	str	r3, [r7, #16]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	613b      	str	r3, [r7, #16]
 800d8a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d002      	beq.n	800d8b0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	77fb      	strb	r3, [r7, #31]
 800d8ae:	e000      	b.n	800d8b2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800d8b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d8c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3720      	adds	r7, #32
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b088      	sub	sp, #32
 800d8d0:	af02      	add	r7, sp, #8
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	603b      	str	r3, [r7, #0]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8e8:	d112      	bne.n	800d910 <HAL_SPI_Receive+0x44>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10e      	bne.n	800d910 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2204      	movs	r2, #4
 800d8f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d8fa:	88fa      	ldrh	r2, [r7, #6]
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	4613      	mov	r3, r2
 800d902:	68ba      	ldr	r2, [r7, #8]
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f000 f8e9 	bl	800dade <HAL_SPI_TransmitReceive>
 800d90c:	4603      	mov	r3, r0
 800d90e:	e0e2      	b.n	800dad6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d916:	2b01      	cmp	r3, #1
 800d918:	d101      	bne.n	800d91e <HAL_SPI_Receive+0x52>
 800d91a:	2302      	movs	r3, #2
 800d91c:	e0db      	b.n	800dad6 <HAL_SPI_Receive+0x20a>
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2201      	movs	r2, #1
 800d922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d926:	f7fb fa4b 	bl	8008dc0 <HAL_GetTick>
 800d92a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b01      	cmp	r3, #1
 800d936:	d002      	beq.n	800d93e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d938:	2302      	movs	r3, #2
 800d93a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d93c:	e0c2      	b.n	800dac4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <HAL_SPI_Receive+0x7e>
 800d944:	88fb      	ldrh	r3, [r7, #6]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d102      	bne.n	800d950 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d94e:	e0b9      	b.n	800dac4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2204      	movs	r2, #4
 800d954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	88fa      	ldrh	r2, [r7, #6]
 800d968:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	88fa      	ldrh	r2, [r7, #6]
 800d96e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2200      	movs	r2, #0
 800d974:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2200      	movs	r2, #0
 800d980:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2200      	movs	r2, #0
 800d986:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d996:	d107      	bne.n	800d9a8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d9a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9b2:	2b40      	cmp	r3, #64	; 0x40
 800d9b4:	d007      	beq.n	800d9c6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d162      	bne.n	800da94 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d9ce:	e02e      	b.n	800da2e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	f003 0301 	and.w	r3, r3, #1
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d115      	bne.n	800da0a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f103 020c 	add.w	r2, r3, #12
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ea:	7812      	ldrb	r2, [r2, #0]
 800d9ec:	b2d2      	uxtb	r2, r2
 800d9ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	3b01      	subs	r3, #1
 800da02:	b29a      	uxth	r2, r3
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da08:	e011      	b.n	800da2e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da0a:	f7fb f9d9 	bl	8008dc0 <HAL_GetTick>
 800da0e:	4602      	mov	r2, r0
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	429a      	cmp	r2, r3
 800da18:	d803      	bhi.n	800da22 <HAL_SPI_Receive+0x156>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da20:	d102      	bne.n	800da28 <HAL_SPI_Receive+0x15c>
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d102      	bne.n	800da2e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800da28:	2303      	movs	r3, #3
 800da2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da2c:	e04a      	b.n	800dac4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da32:	b29b      	uxth	r3, r3
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1cb      	bne.n	800d9d0 <HAL_SPI_Receive+0x104>
 800da38:	e031      	b.n	800da9e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	f003 0301 	and.w	r3, r3, #1
 800da44:	2b01      	cmp	r3, #1
 800da46:	d113      	bne.n	800da70 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68da      	ldr	r2, [r3, #12]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da52:	b292      	uxth	r2, r2
 800da54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da5a:	1c9a      	adds	r2, r3, #2
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da64:	b29b      	uxth	r3, r3
 800da66:	3b01      	subs	r3, #1
 800da68:	b29a      	uxth	r2, r3
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da6e:	e011      	b.n	800da94 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da70:	f7fb f9a6 	bl	8008dc0 <HAL_GetTick>
 800da74:	4602      	mov	r2, r0
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	1ad3      	subs	r3, r2, r3
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d803      	bhi.n	800da88 <HAL_SPI_Receive+0x1bc>
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da86:	d102      	bne.n	800da8e <HAL_SPI_Receive+0x1c2>
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d102      	bne.n	800da94 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800da8e:	2303      	movs	r3, #3
 800da90:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da92:	e017      	b.n	800dac4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da98:	b29b      	uxth	r3, r3
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1cd      	bne.n	800da3a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da9e:	693a      	ldr	r2, [r7, #16]
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f000 fa27 	bl	800def6 <SPI_EndRxTransaction>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2220      	movs	r2, #32
 800dab2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	75fb      	strb	r3, [r7, #23]
 800dac0:	e000      	b.n	800dac4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800dac2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3718      	adds	r7, #24
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b08c      	sub	sp, #48	; 0x30
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	60f8      	str	r0, [r7, #12]
 800dae6:	60b9      	str	r1, [r7, #8]
 800dae8:	607a      	str	r2, [r7, #4]
 800daea:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800daec:	2301      	movs	r3, #1
 800daee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800daf0:	2300      	movs	r3, #0
 800daf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d101      	bne.n	800db04 <HAL_SPI_TransmitReceive+0x26>
 800db00:	2302      	movs	r3, #2
 800db02:	e18a      	b.n	800de1a <HAL_SPI_TransmitReceive+0x33c>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db0c:	f7fb f958 	bl	8008dc0 <HAL_GetTick>
 800db10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800db22:	887b      	ldrh	r3, [r7, #2]
 800db24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800db26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d00f      	beq.n	800db4e <HAL_SPI_TransmitReceive+0x70>
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db34:	d107      	bne.n	800db46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d103      	bne.n	800db46 <HAL_SPI_TransmitReceive+0x68>
 800db3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db42:	2b04      	cmp	r3, #4
 800db44:	d003      	beq.n	800db4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800db46:	2302      	movs	r3, #2
 800db48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800db4c:	e15b      	b.n	800de06 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d005      	beq.n	800db60 <HAL_SPI_TransmitReceive+0x82>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d002      	beq.n	800db60 <HAL_SPI_TransmitReceive+0x82>
 800db5a:	887b      	ldrh	r3, [r7, #2]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d103      	bne.n	800db68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800db66:	e14e      	b.n	800de06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	2b04      	cmp	r3, #4
 800db72:	d003      	beq.n	800db7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2205      	movs	r2, #5
 800db78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2200      	movs	r2, #0
 800db80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	887a      	ldrh	r2, [r7, #2]
 800db8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	887a      	ldrh	r2, [r7, #2]
 800db92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	68ba      	ldr	r2, [r7, #8]
 800db98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	887a      	ldrh	r2, [r7, #2]
 800db9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	887a      	ldrh	r2, [r7, #2]
 800dba4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbbc:	2b40      	cmp	r3, #64	; 0x40
 800dbbe:	d007      	beq.n	800dbd0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbd8:	d178      	bne.n	800dccc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d002      	beq.n	800dbe8 <HAL_SPI_TransmitReceive+0x10a>
 800dbe2:	8b7b      	ldrh	r3, [r7, #26]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d166      	bne.n	800dcb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbec:	881a      	ldrh	r2, [r3, #0]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf8:	1c9a      	adds	r2, r3, #2
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	3b01      	subs	r3, #1
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc0c:	e053      	b.n	800dcb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	f003 0302 	and.w	r3, r3, #2
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d11b      	bne.n	800dc54 <HAL_SPI_TransmitReceive+0x176>
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d016      	beq.n	800dc54 <HAL_SPI_TransmitReceive+0x176>
 800dc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d113      	bne.n	800dc54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc30:	881a      	ldrh	r2, [r3, #0]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc3c:	1c9a      	adds	r2, r3, #2
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dc50:	2300      	movs	r3, #0
 800dc52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	f003 0301 	and.w	r3, r3, #1
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d119      	bne.n	800dc96 <HAL_SPI_TransmitReceive+0x1b8>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d014      	beq.n	800dc96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68da      	ldr	r2, [r3, #12]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc76:	b292      	uxth	r2, r2
 800dc78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7e:	1c9a      	adds	r2, r3, #2
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dc92:	2301      	movs	r3, #1
 800dc94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dc96:	f7fb f893 	bl	8008dc0 <HAL_GetTick>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d807      	bhi.n	800dcb6 <HAL_SPI_TransmitReceive+0x1d8>
 800dca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcac:	d003      	beq.n	800dcb6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dcae:	2303      	movs	r3, #3
 800dcb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dcb4:	e0a7      	b.n	800de06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1a6      	bne.n	800dc0e <HAL_SPI_TransmitReceive+0x130>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1a1      	bne.n	800dc0e <HAL_SPI_TransmitReceive+0x130>
 800dcca:	e07c      	b.n	800ddc6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <HAL_SPI_TransmitReceive+0x1fc>
 800dcd4:	8b7b      	ldrh	r3, [r7, #26]
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d16b      	bne.n	800ddb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	330c      	adds	r3, #12
 800dce4:	7812      	ldrb	r2, [r2, #0]
 800dce6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcec:	1c5a      	adds	r2, r3, #1
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd00:	e057      	b.n	800ddb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	f003 0302 	and.w	r3, r3, #2
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	d11c      	bne.n	800dd4a <HAL_SPI_TransmitReceive+0x26c>
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d017      	beq.n	800dd4a <HAL_SPI_TransmitReceive+0x26c>
 800dd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d114      	bne.n	800dd4a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	330c      	adds	r3, #12
 800dd2a:	7812      	ldrb	r2, [r2, #0]
 800dd2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	3b01      	subs	r3, #1
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dd46:	2300      	movs	r3, #0
 800dd48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f003 0301 	and.w	r3, r3, #1
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d119      	bne.n	800dd8c <HAL_SPI_TransmitReceive+0x2ae>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d014      	beq.n	800dd8c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68da      	ldr	r2, [r3, #12]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd6c:	b2d2      	uxtb	r2, r2
 800dd6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd74:	1c5a      	adds	r2, r3, #1
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	3b01      	subs	r3, #1
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dd8c:	f7fb f818 	bl	8008dc0 <HAL_GetTick>
 800dd90:	4602      	mov	r2, r0
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d803      	bhi.n	800dda4 <HAL_SPI_TransmitReceive+0x2c6>
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda2:	d102      	bne.n	800ddaa <HAL_SPI_TransmitReceive+0x2cc>
 800dda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d103      	bne.n	800ddb2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ddb0:	e029      	b.n	800de06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1a2      	bne.n	800dd02 <HAL_SPI_TransmitReceive+0x224>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d19d      	bne.n	800dd02 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ddc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f000 f8f8 	bl	800dfc0 <SPI_EndRxTxTransaction>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d006      	beq.n	800dde4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2220      	movs	r2, #32
 800dde0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800dde2:	e010      	b.n	800de06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10b      	bne.n	800de04 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ddec:	2300      	movs	r3, #0
 800ddee:	617b      	str	r3, [r7, #20]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	617b      	str	r3, [r7, #20]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	e000      	b.n	800de06 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800de04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2201      	movs	r2, #1
 800de0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800de16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3730      	adds	r7, #48	; 0x30
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b084      	sub	sp, #16
 800de26:	af00      	add	r7, sp, #0
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	60b9      	str	r1, [r7, #8]
 800de2c:	603b      	str	r3, [r7, #0]
 800de2e:	4613      	mov	r3, r2
 800de30:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de32:	e04c      	b.n	800dece <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3a:	d048      	beq.n	800dece <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800de3c:	f7fa ffc0 	bl	8008dc0 <HAL_GetTick>
 800de40:	4602      	mov	r2, r0
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d902      	bls.n	800de52 <SPI_WaitFlagStateUntilTimeout+0x30>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d13d      	bne.n	800dece <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800de60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de6a:	d111      	bne.n	800de90 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de74:	d004      	beq.n	800de80 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de7e:	d107      	bne.n	800de90 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de98:	d10f      	bne.n	800deba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dea8:	601a      	str	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800deb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2201      	movs	r2, #1
 800debe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	e00f      	b.n	800deee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	689a      	ldr	r2, [r3, #8]
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	4013      	ands	r3, r2
 800ded8:	68ba      	ldr	r2, [r7, #8]
 800deda:	429a      	cmp	r2, r3
 800dedc:	bf0c      	ite	eq
 800dede:	2301      	moveq	r3, #1
 800dee0:	2300      	movne	r3, #0
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	461a      	mov	r2, r3
 800dee6:	79fb      	ldrb	r3, [r7, #7]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d1a3      	bne.n	800de34 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800def6:	b580      	push	{r7, lr}
 800def8:	b086      	sub	sp, #24
 800defa:	af02      	add	r7, sp, #8
 800defc:	60f8      	str	r0, [r7, #12]
 800defe:	60b9      	str	r1, [r7, #8]
 800df00:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df0a:	d111      	bne.n	800df30 <SPI_EndRxTransaction+0x3a>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df14:	d004      	beq.n	800df20 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	689b      	ldr	r3, [r3, #8]
 800df1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df1e:	d107      	bne.n	800df30 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df2e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df38:	d12a      	bne.n	800df90 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df42:	d012      	beq.n	800df6a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2200      	movs	r2, #0
 800df4c:	2180      	movs	r1, #128	; 0x80
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f7ff ff67 	bl	800de22 <SPI_WaitFlagStateUntilTimeout>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d02d      	beq.n	800dfb6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df5e:	f043 0220 	orr.w	r2, r3, #32
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800df66:	2303      	movs	r3, #3
 800df68:	e026      	b.n	800dfb8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	9300      	str	r3, [sp, #0]
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	2200      	movs	r2, #0
 800df72:	2101      	movs	r1, #1
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f7ff ff54 	bl	800de22 <SPI_WaitFlagStateUntilTimeout>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d01a      	beq.n	800dfb6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df84:	f043 0220 	orr.w	r2, r3, #32
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800df8c:	2303      	movs	r3, #3
 800df8e:	e013      	b.n	800dfb8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	2200      	movs	r2, #0
 800df98:	2101      	movs	r1, #1
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	f7ff ff41 	bl	800de22 <SPI_WaitFlagStateUntilTimeout>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d007      	beq.n	800dfb6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfaa:	f043 0220 	orr.w	r2, r3, #32
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	e000      	b.n	800dfb8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dfb6:	2300      	movs	r3, #0
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b088      	sub	sp, #32
 800dfc4:	af02      	add	r7, sp, #8
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dfcc:	4b1b      	ldr	r3, [pc, #108]	; (800e03c <SPI_EndRxTxTransaction+0x7c>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a1b      	ldr	r2, [pc, #108]	; (800e040 <SPI_EndRxTxTransaction+0x80>)
 800dfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd6:	0d5b      	lsrs	r3, r3, #21
 800dfd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dfdc:	fb02 f303 	mul.w	r3, r2, r3
 800dfe0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfea:	d112      	bne.n	800e012 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	2200      	movs	r2, #0
 800dff4:	2180      	movs	r1, #128	; 0x80
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f7ff ff13 	bl	800de22 <SPI_WaitFlagStateUntilTimeout>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d016      	beq.n	800e030 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e006:	f043 0220 	orr.w	r2, r3, #32
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e00e:	2303      	movs	r3, #3
 800e010:	e00f      	b.n	800e032 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00a      	beq.n	800e02e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	3b01      	subs	r3, #1
 800e01c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e028:	2b80      	cmp	r3, #128	; 0x80
 800e02a:	d0f2      	beq.n	800e012 <SPI_EndRxTxTransaction+0x52>
 800e02c:	e000      	b.n	800e030 <SPI_EndRxTxTransaction+0x70>
        break;
 800e02e:	bf00      	nop
  }

  return HAL_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3718      	adds	r7, #24
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	20000000 	.word	0x20000000
 800e040:	165e9f81 	.word	0x165e9f81

0800e044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	e01d      	b.n	800e092 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d106      	bne.n	800e070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7f8 fdce 	bl	8006c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2202      	movs	r2, #2
 800e074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	3304      	adds	r3, #4
 800e080:	4619      	mov	r1, r3
 800e082:	4610      	mov	r0, r2
 800e084:	f000 fb56 	bl	800e734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2201      	movs	r2, #1
 800e08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e09a:	b480      	push	{r7}
 800e09c:	b085      	sub	sp, #20
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68da      	ldr	r2, [r3, #12]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f042 0201 	orr.w	r2, r2, #1
 800e0b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	f003 0307 	and.w	r3, r3, #7
 800e0bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2b06      	cmp	r3, #6
 800e0c2:	d007      	beq.n	800e0d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f042 0201 	orr.w	r2, r2, #1
 800e0d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3714      	adds	r7, #20
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr

0800e0e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b082      	sub	sp, #8
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d101      	bne.n	800e0f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	e01d      	b.n	800e130 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d106      	bne.n	800e10e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7f8 fd0b 	bl	8006b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2202      	movs	r2, #2
 800e112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	3304      	adds	r3, #4
 800e11e:	4619      	mov	r1, r3
 800e120:	4610      	mov	r0, r2
 800e122:	f000 fb07 	bl	800e734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2201      	movs	r2, #1
 800e148:	6839      	ldr	r1, [r7, #0]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f000 fd42 	bl	800ebd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a15      	ldr	r2, [pc, #84]	; (800e1ac <HAL_TIM_PWM_Start+0x74>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d004      	beq.n	800e164 <HAL_TIM_PWM_Start+0x2c>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a14      	ldr	r2, [pc, #80]	; (800e1b0 <HAL_TIM_PWM_Start+0x78>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d101      	bne.n	800e168 <HAL_TIM_PWM_Start+0x30>
 800e164:	2301      	movs	r3, #1
 800e166:	e000      	b.n	800e16a <HAL_TIM_PWM_Start+0x32>
 800e168:	2300      	movs	r3, #0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d007      	beq.n	800e17e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e17c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	f003 0307 	and.w	r3, r3, #7
 800e188:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b06      	cmp	r3, #6
 800e18e:	d007      	beq.n	800e1a0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f042 0201 	orr.w	r2, r2, #1
 800e19e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	40010000 	.word	0x40010000
 800e1b0:	40010400 	.word	0x40010400

0800e1b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d101      	bne.n	800e1c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	e083      	b.n	800e2d0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d106      	bne.n	800e1e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7f8 fda5 	bl	8006d2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2202      	movs	r2, #2
 800e1e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	6812      	ldr	r2, [r2, #0]
 800e1f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1f8:	f023 0307 	bic.w	r3, r3, #7
 800e1fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	3304      	adds	r3, #4
 800e206:	4619      	mov	r1, r3
 800e208:	4610      	mov	r0, r2
 800e20a:	f000 fa93 	bl	800e734 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	699b      	ldr	r3, [r3, #24]
 800e21c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6a1b      	ldr	r3, [r3, #32]
 800e224:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	697a      	ldr	r2, [r7, #20]
 800e22c:	4313      	orrs	r3, r2
 800e22e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e236:	f023 0303 	bic.w	r3, r3, #3
 800e23a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	689a      	ldr	r2, [r3, #8]
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	021b      	lsls	r3, r3, #8
 800e246:	4313      	orrs	r3, r2
 800e248:	693a      	ldr	r2, [r7, #16]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e254:	f023 030c 	bic.w	r3, r3, #12
 800e258:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	68da      	ldr	r2, [r3, #12]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	69db      	ldr	r3, [r3, #28]
 800e26e:	021b      	lsls	r3, r3, #8
 800e270:	4313      	orrs	r3, r2
 800e272:	693a      	ldr	r2, [r7, #16]
 800e274:	4313      	orrs	r3, r2
 800e276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	691b      	ldr	r3, [r3, #16]
 800e27c:	011a      	lsls	r2, r3, #4
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	031b      	lsls	r3, r3, #12
 800e284:	4313      	orrs	r3, r2
 800e286:	693a      	ldr	r2, [r7, #16]
 800e288:	4313      	orrs	r3, r2
 800e28a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e292:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e29a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	685a      	ldr	r2, [r3, #4]
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	695b      	ldr	r3, [r3, #20]
 800e2a4:	011b      	lsls	r3, r3, #4
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	693a      	ldr	r2, [r7, #16]
 800e2bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3718      	adds	r7, #24
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d002      	beq.n	800e2ee <HAL_TIM_Encoder_Start+0x16>
 800e2e8:	2b04      	cmp	r3, #4
 800e2ea:	d008      	beq.n	800e2fe <HAL_TIM_Encoder_Start+0x26>
 800e2ec:	e00f      	b.n	800e30e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f000 fc6c 	bl	800ebd4 <TIM_CCxChannelCmd>
      break;
 800e2fc:	e016      	b.n	800e32c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2201      	movs	r2, #1
 800e304:	2104      	movs	r1, #4
 800e306:	4618      	mov	r0, r3
 800e308:	f000 fc64 	bl	800ebd4 <TIM_CCxChannelCmd>
      break;
 800e30c:	e00e      	b.n	800e32c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2201      	movs	r2, #1
 800e314:	2100      	movs	r1, #0
 800e316:	4618      	mov	r0, r3
 800e318:	f000 fc5c 	bl	800ebd4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2201      	movs	r2, #1
 800e322:	2104      	movs	r1, #4
 800e324:	4618      	mov	r0, r3
 800e326:	f000 fc55 	bl	800ebd4 <TIM_CCxChannelCmd>
      break;
 800e32a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f042 0201 	orr.w	r2, r2, #1
 800e33a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b082      	sub	sp, #8
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	f003 0302 	and.w	r3, r3, #2
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d122      	bne.n	800e3a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	f003 0302 	and.w	r3, r3, #2
 800e366:	2b02      	cmp	r3, #2
 800e368:	d11b      	bne.n	800e3a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f06f 0202 	mvn.w	r2, #2
 800e372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2201      	movs	r2, #1
 800e378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	699b      	ldr	r3, [r3, #24]
 800e380:	f003 0303 	and.w	r3, r3, #3
 800e384:	2b00      	cmp	r3, #0
 800e386:	d003      	beq.n	800e390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f9b5 	bl	800e6f8 <HAL_TIM_IC_CaptureCallback>
 800e38e:	e005      	b.n	800e39c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 f9a7 	bl	800e6e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f9b8 	bl	800e70c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	691b      	ldr	r3, [r3, #16]
 800e3a8:	f003 0304 	and.w	r3, r3, #4
 800e3ac:	2b04      	cmp	r3, #4
 800e3ae:	d122      	bne.n	800e3f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	f003 0304 	and.w	r3, r3, #4
 800e3ba:	2b04      	cmp	r3, #4
 800e3bc:	d11b      	bne.n	800e3f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f06f 0204 	mvn.w	r2, #4
 800e3c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	699b      	ldr	r3, [r3, #24]
 800e3d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d003      	beq.n	800e3e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f98b 	bl	800e6f8 <HAL_TIM_IC_CaptureCallback>
 800e3e2:	e005      	b.n	800e3f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 f97d 	bl	800e6e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f98e 	bl	800e70c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	691b      	ldr	r3, [r3, #16]
 800e3fc:	f003 0308 	and.w	r3, r3, #8
 800e400:	2b08      	cmp	r3, #8
 800e402:	d122      	bne.n	800e44a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	f003 0308 	and.w	r3, r3, #8
 800e40e:	2b08      	cmp	r3, #8
 800e410:	d11b      	bne.n	800e44a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f06f 0208 	mvn.w	r2, #8
 800e41a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2204      	movs	r2, #4
 800e420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	69db      	ldr	r3, [r3, #28]
 800e428:	f003 0303 	and.w	r3, r3, #3
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d003      	beq.n	800e438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f961 	bl	800e6f8 <HAL_TIM_IC_CaptureCallback>
 800e436:	e005      	b.n	800e444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 f953 	bl	800e6e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 f964 	bl	800e70c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	691b      	ldr	r3, [r3, #16]
 800e450:	f003 0310 	and.w	r3, r3, #16
 800e454:	2b10      	cmp	r3, #16
 800e456:	d122      	bne.n	800e49e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	f003 0310 	and.w	r3, r3, #16
 800e462:	2b10      	cmp	r3, #16
 800e464:	d11b      	bne.n	800e49e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f06f 0210 	mvn.w	r2, #16
 800e46e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2208      	movs	r2, #8
 800e474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	69db      	ldr	r3, [r3, #28]
 800e47c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e480:	2b00      	cmp	r3, #0
 800e482:	d003      	beq.n	800e48c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 f937 	bl	800e6f8 <HAL_TIM_IC_CaptureCallback>
 800e48a:	e005      	b.n	800e498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f929 	bl	800e6e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 f93a 	bl	800e70c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2200      	movs	r2, #0
 800e49c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	f003 0301 	and.w	r3, r3, #1
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d10e      	bne.n	800e4ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	f003 0301 	and.w	r3, r3, #1
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d107      	bne.n	800e4ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f06f 0201 	mvn.w	r2, #1
 800e4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7f7 f91b 	bl	8005700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4d4:	2b80      	cmp	r3, #128	; 0x80
 800e4d6:	d10e      	bne.n	800e4f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4e2:	2b80      	cmp	r3, #128	; 0x80
 800e4e4:	d107      	bne.n	800e4f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e4ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 fc6d 	bl	800edd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e500:	2b40      	cmp	r3, #64	; 0x40
 800e502:	d10e      	bne.n	800e522 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e50e:	2b40      	cmp	r3, #64	; 0x40
 800e510:	d107      	bne.n	800e522 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e51a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f8ff 	bl	800e720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	f003 0320 	and.w	r3, r3, #32
 800e52c:	2b20      	cmp	r3, #32
 800e52e:	d10e      	bne.n	800e54e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	f003 0320 	and.w	r3, r3, #32
 800e53a:	2b20      	cmp	r3, #32
 800e53c:	d107      	bne.n	800e54e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f06f 0220 	mvn.w	r2, #32
 800e546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 fc37 	bl	800edbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e54e:	bf00      	nop
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
	...

0800e558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d101      	bne.n	800e572 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e56e:	2302      	movs	r3, #2
 800e570:	e0b4      	b.n	800e6dc <HAL_TIM_PWM_ConfigChannel+0x184>
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2202      	movs	r2, #2
 800e57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b0c      	cmp	r3, #12
 800e586:	f200 809f 	bhi.w	800e6c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800e58a:	a201      	add	r2, pc, #4	; (adr r2, 800e590 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e590:	0800e5c5 	.word	0x0800e5c5
 800e594:	0800e6c9 	.word	0x0800e6c9
 800e598:	0800e6c9 	.word	0x0800e6c9
 800e59c:	0800e6c9 	.word	0x0800e6c9
 800e5a0:	0800e605 	.word	0x0800e605
 800e5a4:	0800e6c9 	.word	0x0800e6c9
 800e5a8:	0800e6c9 	.word	0x0800e6c9
 800e5ac:	0800e6c9 	.word	0x0800e6c9
 800e5b0:	0800e647 	.word	0x0800e647
 800e5b4:	0800e6c9 	.word	0x0800e6c9
 800e5b8:	0800e6c9 	.word	0x0800e6c9
 800e5bc:	0800e6c9 	.word	0x0800e6c9
 800e5c0:	0800e687 	.word	0x0800e687
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	68b9      	ldr	r1, [r7, #8]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f000 f952 	bl	800e874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	699a      	ldr	r2, [r3, #24]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f042 0208 	orr.w	r2, r2, #8
 800e5de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	699a      	ldr	r2, [r3, #24]
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f022 0204 	bic.w	r2, r2, #4
 800e5ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6999      	ldr	r1, [r3, #24]
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	691a      	ldr	r2, [r3, #16]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	430a      	orrs	r2, r1
 800e600:	619a      	str	r2, [r3, #24]
      break;
 800e602:	e062      	b.n	800e6ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	68b9      	ldr	r1, [r7, #8]
 800e60a:	4618      	mov	r0, r3
 800e60c:	f000 f9a2 	bl	800e954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	699a      	ldr	r2, [r3, #24]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e61e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	699a      	ldr	r2, [r3, #24]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e62e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	6999      	ldr	r1, [r3, #24]
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	021a      	lsls	r2, r3, #8
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	430a      	orrs	r2, r1
 800e642:	619a      	str	r2, [r3, #24]
      break;
 800e644:	e041      	b.n	800e6ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	68b9      	ldr	r1, [r7, #8]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f000 f9f7 	bl	800ea40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	69da      	ldr	r2, [r3, #28]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f042 0208 	orr.w	r2, r2, #8
 800e660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	69da      	ldr	r2, [r3, #28]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f022 0204 	bic.w	r2, r2, #4
 800e670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	69d9      	ldr	r1, [r3, #28]
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	691a      	ldr	r2, [r3, #16]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	430a      	orrs	r2, r1
 800e682:	61da      	str	r2, [r3, #28]
      break;
 800e684:	e021      	b.n	800e6ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68b9      	ldr	r1, [r7, #8]
 800e68c:	4618      	mov	r0, r3
 800e68e:	f000 fa4b 	bl	800eb28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	69da      	ldr	r2, [r3, #28]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	69da      	ldr	r2, [r3, #28]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	69d9      	ldr	r1, [r3, #28]
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	021a      	lsls	r2, r3, #8
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	430a      	orrs	r2, r1
 800e6c4:	61da      	str	r2, [r3, #28]
      break;
 800e6c6:	e000      	b.n	800e6ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e6c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6da:	2300      	movs	r3, #0
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6ec:	bf00      	nop
 800e6ee:	370c      	adds	r7, #12
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e700:	bf00      	nop
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e728:	bf00      	nop
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	4a40      	ldr	r2, [pc, #256]	; (800e848 <TIM_Base_SetConfig+0x114>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d013      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e752:	d00f      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4a3d      	ldr	r2, [pc, #244]	; (800e84c <TIM_Base_SetConfig+0x118>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d00b      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4a3c      	ldr	r2, [pc, #240]	; (800e850 <TIM_Base_SetConfig+0x11c>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d007      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4a3b      	ldr	r2, [pc, #236]	; (800e854 <TIM_Base_SetConfig+0x120>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d003      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a3a      	ldr	r2, [pc, #232]	; (800e858 <TIM_Base_SetConfig+0x124>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d108      	bne.n	800e786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e77a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	4313      	orrs	r3, r2
 800e784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4a2f      	ldr	r2, [pc, #188]	; (800e848 <TIM_Base_SetConfig+0x114>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d02b      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e794:	d027      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4a2c      	ldr	r2, [pc, #176]	; (800e84c <TIM_Base_SetConfig+0x118>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d023      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4a2b      	ldr	r2, [pc, #172]	; (800e850 <TIM_Base_SetConfig+0x11c>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d01f      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a2a      	ldr	r2, [pc, #168]	; (800e854 <TIM_Base_SetConfig+0x120>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d01b      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a29      	ldr	r2, [pc, #164]	; (800e858 <TIM_Base_SetConfig+0x124>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d017      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a28      	ldr	r2, [pc, #160]	; (800e85c <TIM_Base_SetConfig+0x128>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d013      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a27      	ldr	r2, [pc, #156]	; (800e860 <TIM_Base_SetConfig+0x12c>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d00f      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a26      	ldr	r2, [pc, #152]	; (800e864 <TIM_Base_SetConfig+0x130>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d00b      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a25      	ldr	r2, [pc, #148]	; (800e868 <TIM_Base_SetConfig+0x134>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d007      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a24      	ldr	r2, [pc, #144]	; (800e86c <TIM_Base_SetConfig+0x138>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d003      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a23      	ldr	r2, [pc, #140]	; (800e870 <TIM_Base_SetConfig+0x13c>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d108      	bne.n	800e7f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	4313      	orrs	r3, r2
 800e804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a0a      	ldr	r2, [pc, #40]	; (800e848 <TIM_Base_SetConfig+0x114>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d003      	beq.n	800e82c <TIM_Base_SetConfig+0xf8>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4a0c      	ldr	r2, [pc, #48]	; (800e858 <TIM_Base_SetConfig+0x124>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d103      	bne.n	800e834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	691a      	ldr	r2, [r3, #16]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2201      	movs	r2, #1
 800e838:	615a      	str	r2, [r3, #20]
}
 800e83a:	bf00      	nop
 800e83c:	3714      	adds	r7, #20
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop
 800e848:	40010000 	.word	0x40010000
 800e84c:	40000400 	.word	0x40000400
 800e850:	40000800 	.word	0x40000800
 800e854:	40000c00 	.word	0x40000c00
 800e858:	40010400 	.word	0x40010400
 800e85c:	40014000 	.word	0x40014000
 800e860:	40014400 	.word	0x40014400
 800e864:	40014800 	.word	0x40014800
 800e868:	40001800 	.word	0x40001800
 800e86c:	40001c00 	.word	0x40001c00
 800e870:	40002000 	.word	0x40002000

0800e874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e874:	b480      	push	{r7}
 800e876:	b087      	sub	sp, #28
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a1b      	ldr	r3, [r3, #32]
 800e882:	f023 0201 	bic.w	r2, r3, #1
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a1b      	ldr	r3, [r3, #32]
 800e88e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f023 0303 	bic.w	r3, r3, #3
 800e8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	f023 0302 	bic.w	r3, r3, #2
 800e8bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	689b      	ldr	r3, [r3, #8]
 800e8c2:	697a      	ldr	r2, [r7, #20]
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	4a20      	ldr	r2, [pc, #128]	; (800e94c <TIM_OC1_SetConfig+0xd8>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d003      	beq.n	800e8d8 <TIM_OC1_SetConfig+0x64>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a1f      	ldr	r2, [pc, #124]	; (800e950 <TIM_OC1_SetConfig+0xdc>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d10c      	bne.n	800e8f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	f023 0308 	bic.w	r3, r3, #8
 800e8de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	697a      	ldr	r2, [r7, #20]
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	f023 0304 	bic.w	r3, r3, #4
 800e8f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	4a15      	ldr	r2, [pc, #84]	; (800e94c <TIM_OC1_SetConfig+0xd8>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d003      	beq.n	800e902 <TIM_OC1_SetConfig+0x8e>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4a14      	ldr	r2, [pc, #80]	; (800e950 <TIM_OC1_SetConfig+0xdc>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d111      	bne.n	800e926 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	4313      	orrs	r3, r2
 800e91a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	699b      	ldr	r3, [r3, #24]
 800e920:	693a      	ldr	r2, [r7, #16]
 800e922:	4313      	orrs	r3, r2
 800e924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	68fa      	ldr	r2, [r7, #12]
 800e930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	685a      	ldr	r2, [r3, #4]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	697a      	ldr	r2, [r7, #20]
 800e93e:	621a      	str	r2, [r3, #32]
}
 800e940:	bf00      	nop
 800e942:	371c      	adds	r7, #28
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	40010000 	.word	0x40010000
 800e950:	40010400 	.word	0x40010400

0800e954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e954:	b480      	push	{r7}
 800e956:	b087      	sub	sp, #28
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6a1b      	ldr	r3, [r3, #32]
 800e962:	f023 0210 	bic.w	r2, r3, #16
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
 800e96e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	699b      	ldr	r3, [r3, #24]
 800e97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e98a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	021b      	lsls	r3, r3, #8
 800e992:	68fa      	ldr	r2, [r7, #12]
 800e994:	4313      	orrs	r3, r2
 800e996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	f023 0320 	bic.w	r3, r3, #32
 800e99e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	011b      	lsls	r3, r3, #4
 800e9a6:	697a      	ldr	r2, [r7, #20]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4a22      	ldr	r2, [pc, #136]	; (800ea38 <TIM_OC2_SetConfig+0xe4>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d003      	beq.n	800e9bc <TIM_OC2_SetConfig+0x68>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4a21      	ldr	r2, [pc, #132]	; (800ea3c <TIM_OC2_SetConfig+0xe8>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d10d      	bne.n	800e9d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	011b      	lsls	r3, r3, #4
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a17      	ldr	r2, [pc, #92]	; (800ea38 <TIM_OC2_SetConfig+0xe4>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d003      	beq.n	800e9e8 <TIM_OC2_SetConfig+0x94>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a16      	ldr	r2, [pc, #88]	; (800ea3c <TIM_OC2_SetConfig+0xe8>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d113      	bne.n	800ea10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e9ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	695b      	ldr	r3, [r3, #20]
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	693a      	ldr	r2, [r7, #16]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	699b      	ldr	r3, [r3, #24]
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	693a      	ldr	r2, [r7, #16]
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	693a      	ldr	r2, [r7, #16]
 800ea14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	621a      	str	r2, [r3, #32]
}
 800ea2a:	bf00      	nop
 800ea2c:	371c      	adds	r7, #28
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	40010000 	.word	0x40010000
 800ea3c:	40010400 	.word	0x40010400

0800ea40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b087      	sub	sp, #28
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6a1b      	ldr	r3, [r3, #32]
 800ea4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a1b      	ldr	r3, [r3, #32]
 800ea5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	69db      	ldr	r3, [r3, #28]
 800ea66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f023 0303 	bic.w	r3, r3, #3
 800ea76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	021b      	lsls	r3, r3, #8
 800ea90:	697a      	ldr	r2, [r7, #20]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4a21      	ldr	r2, [pc, #132]	; (800eb20 <TIM_OC3_SetConfig+0xe0>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d003      	beq.n	800eaa6 <TIM_OC3_SetConfig+0x66>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4a20      	ldr	r2, [pc, #128]	; (800eb24 <TIM_OC3_SetConfig+0xe4>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d10d      	bne.n	800eac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eaac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	021b      	lsls	r3, r3, #8
 800eab4:	697a      	ldr	r2, [r7, #20]
 800eab6:	4313      	orrs	r3, r2
 800eab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4a16      	ldr	r2, [pc, #88]	; (800eb20 <TIM_OC3_SetConfig+0xe0>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d003      	beq.n	800ead2 <TIM_OC3_SetConfig+0x92>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4a15      	ldr	r2, [pc, #84]	; (800eb24 <TIM_OC3_SetConfig+0xe4>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d113      	bne.n	800eafa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ead8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	695b      	ldr	r3, [r3, #20]
 800eae6:	011b      	lsls	r3, r3, #4
 800eae8:	693a      	ldr	r2, [r7, #16]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	699b      	ldr	r3, [r3, #24]
 800eaf2:	011b      	lsls	r3, r3, #4
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	693a      	ldr	r2, [r7, #16]
 800eafe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	685a      	ldr	r2, [r3, #4]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	697a      	ldr	r2, [r7, #20]
 800eb12:	621a      	str	r2, [r3, #32]
}
 800eb14:	bf00      	nop
 800eb16:	371c      	adds	r7, #28
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	40010000 	.word	0x40010000
 800eb24:	40010400 	.word	0x40010400

0800eb28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b087      	sub	sp, #28
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a1b      	ldr	r3, [r3, #32]
 800eb36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	69db      	ldr	r3, [r3, #28]
 800eb4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	021b      	lsls	r3, r3, #8
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	031b      	lsls	r3, r3, #12
 800eb7a:	693a      	ldr	r2, [r7, #16]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a12      	ldr	r2, [pc, #72]	; (800ebcc <TIM_OC4_SetConfig+0xa4>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d003      	beq.n	800eb90 <TIM_OC4_SetConfig+0x68>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4a11      	ldr	r2, [pc, #68]	; (800ebd0 <TIM_OC4_SetConfig+0xa8>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d109      	bne.n	800eba4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	019b      	lsls	r3, r3, #6
 800eb9e:	697a      	ldr	r2, [r7, #20]
 800eba0:	4313      	orrs	r3, r2
 800eba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	697a      	ldr	r2, [r7, #20]
 800eba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	685a      	ldr	r2, [r3, #4]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	693a      	ldr	r2, [r7, #16]
 800ebbc:	621a      	str	r2, [r3, #32]
}
 800ebbe:	bf00      	nop
 800ebc0:	371c      	adds	r7, #28
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	40010000 	.word	0x40010000
 800ebd0:	40010400 	.word	0x40010400

0800ebd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b087      	sub	sp, #28
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	f003 031f 	and.w	r3, r3, #31
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6a1a      	ldr	r2, [r3, #32]
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	43db      	mvns	r3, r3
 800ebf6:	401a      	ands	r2, r3
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6a1a      	ldr	r2, [r3, #32]
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	f003 031f 	and.w	r3, r3, #31
 800ec06:	6879      	ldr	r1, [r7, #4]
 800ec08:	fa01 f303 	lsl.w	r3, r1, r3
 800ec0c:	431a      	orrs	r2, r3
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	621a      	str	r2, [r3, #32]
}
 800ec12:	bf00      	nop
 800ec14:	371c      	adds	r7, #28
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
	...

0800ec20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d101      	bne.n	800ec38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec34:	2302      	movs	r3, #2
 800ec36:	e05a      	b.n	800ecee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2202      	movs	r2, #2
 800ec44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	4313      	orrs	r3, r2
 800ec68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a21      	ldr	r2, [pc, #132]	; (800ecfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d022      	beq.n	800ecc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec84:	d01d      	beq.n	800ecc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a1d      	ldr	r2, [pc, #116]	; (800ed00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d018      	beq.n	800ecc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a1b      	ldr	r2, [pc, #108]	; (800ed04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d013      	beq.n	800ecc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a1a      	ldr	r2, [pc, #104]	; (800ed08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d00e      	beq.n	800ecc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a18      	ldr	r2, [pc, #96]	; (800ed0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d009      	beq.n	800ecc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a17      	ldr	r2, [pc, #92]	; (800ed10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d004      	beq.n	800ecc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a15      	ldr	r2, [pc, #84]	; (800ed14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d10c      	bne.n	800ecdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	68ba      	ldr	r2, [r7, #8]
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	68ba      	ldr	r2, [r7, #8]
 800ecda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3714      	adds	r7, #20
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	40010000 	.word	0x40010000
 800ed00:	40000400 	.word	0x40000400
 800ed04:	40000800 	.word	0x40000800
 800ed08:	40000c00 	.word	0x40000c00
 800ed0c:	40010400 	.word	0x40010400
 800ed10:	40014000 	.word	0x40014000
 800ed14:	40001800 	.word	0x40001800

0800ed18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ed22:	2300      	movs	r3, #0
 800ed24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d101      	bne.n	800ed34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ed30:	2302      	movs	r3, #2
 800ed32:	e03d      	b.n	800edb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	4313      	orrs	r3, r2
 800ed48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	4313      	orrs	r3, r2
 800ed64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4313      	orrs	r3, r2
 800ed72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	695b      	ldr	r3, [r3, #20]
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	69db      	ldr	r3, [r3, #28]
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800edae:	2300      	movs	r3, #0
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3714      	adds	r7, #20
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800edc4:	bf00      	nop
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800edd8:	bf00      	nop
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d101      	bne.n	800edf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800edf2:	2301      	movs	r3, #1
 800edf4:	e03f      	b.n	800ee76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d106      	bne.n	800ee10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7f8 f8b8 	bl	8006f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2224      	movs	r2, #36	; 0x24
 800ee14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	68da      	ldr	r2, [r3, #12]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f000 f829 	bl	800ee80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	691a      	ldr	r2, [r3, #16]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ee3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	695a      	ldr	r2, [r3, #20]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ee4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	68da      	ldr	r2, [r3, #12]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2200      	movs	r2, #0
 800ee62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2220      	movs	r2, #32
 800ee68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2220      	movs	r2, #32
 800ee70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
	...

0800ee80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	b085      	sub	sp, #20
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68da      	ldr	r2, [r3, #12]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	430a      	orrs	r2, r1
 800ee9e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	689a      	ldr	r2, [r3, #8]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	691b      	ldr	r3, [r3, #16]
 800eea8:	431a      	orrs	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	695b      	ldr	r3, [r3, #20]
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	69db      	ldr	r3, [r3, #28]
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800eec2:	f023 030c 	bic.w	r3, r3, #12
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	6812      	ldr	r2, [r2, #0]
 800eeca:	68f9      	ldr	r1, [r7, #12]
 800eecc:	430b      	orrs	r3, r1
 800eece:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	695b      	ldr	r3, [r3, #20]
 800eed6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	699a      	ldr	r2, [r3, #24]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	430a      	orrs	r2, r1
 800eee4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeee:	f040 818b 	bne.w	800f208 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4ac1      	ldr	r2, [pc, #772]	; (800f1fc <UART_SetConfig+0x37c>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d005      	beq.n	800ef08 <UART_SetConfig+0x88>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4abf      	ldr	r2, [pc, #764]	; (800f200 <UART_SetConfig+0x380>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	f040 80bd 	bne.w	800f082 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ef08:	f7fc fbcc 	bl	800b6a4 <HAL_RCC_GetPCLK2Freq>
 800ef0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	461d      	mov	r5, r3
 800ef12:	f04f 0600 	mov.w	r6, #0
 800ef16:	46a8      	mov	r8, r5
 800ef18:	46b1      	mov	r9, r6
 800ef1a:	eb18 0308 	adds.w	r3, r8, r8
 800ef1e:	eb49 0409 	adc.w	r4, r9, r9
 800ef22:	4698      	mov	r8, r3
 800ef24:	46a1      	mov	r9, r4
 800ef26:	eb18 0805 	adds.w	r8, r8, r5
 800ef2a:	eb49 0906 	adc.w	r9, r9, r6
 800ef2e:	f04f 0100 	mov.w	r1, #0
 800ef32:	f04f 0200 	mov.w	r2, #0
 800ef36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ef3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ef3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ef42:	4688      	mov	r8, r1
 800ef44:	4691      	mov	r9, r2
 800ef46:	eb18 0005 	adds.w	r0, r8, r5
 800ef4a:	eb49 0106 	adc.w	r1, r9, r6
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	461d      	mov	r5, r3
 800ef54:	f04f 0600 	mov.w	r6, #0
 800ef58:	196b      	adds	r3, r5, r5
 800ef5a:	eb46 0406 	adc.w	r4, r6, r6
 800ef5e:	461a      	mov	r2, r3
 800ef60:	4623      	mov	r3, r4
 800ef62:	f7f1 fea9 	bl	8000cb8 <__aeabi_uldivmod>
 800ef66:	4603      	mov	r3, r0
 800ef68:	460c      	mov	r4, r1
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	4ba5      	ldr	r3, [pc, #660]	; (800f204 <UART_SetConfig+0x384>)
 800ef6e:	fba3 2302 	umull	r2, r3, r3, r2
 800ef72:	095b      	lsrs	r3, r3, #5
 800ef74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	461d      	mov	r5, r3
 800ef7c:	f04f 0600 	mov.w	r6, #0
 800ef80:	46a9      	mov	r9, r5
 800ef82:	46b2      	mov	sl, r6
 800ef84:	eb19 0309 	adds.w	r3, r9, r9
 800ef88:	eb4a 040a 	adc.w	r4, sl, sl
 800ef8c:	4699      	mov	r9, r3
 800ef8e:	46a2      	mov	sl, r4
 800ef90:	eb19 0905 	adds.w	r9, r9, r5
 800ef94:	eb4a 0a06 	adc.w	sl, sl, r6
 800ef98:	f04f 0100 	mov.w	r1, #0
 800ef9c:	f04f 0200 	mov.w	r2, #0
 800efa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800efa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800efac:	4689      	mov	r9, r1
 800efae:	4692      	mov	sl, r2
 800efb0:	eb19 0005 	adds.w	r0, r9, r5
 800efb4:	eb4a 0106 	adc.w	r1, sl, r6
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	461d      	mov	r5, r3
 800efbe:	f04f 0600 	mov.w	r6, #0
 800efc2:	196b      	adds	r3, r5, r5
 800efc4:	eb46 0406 	adc.w	r4, r6, r6
 800efc8:	461a      	mov	r2, r3
 800efca:	4623      	mov	r3, r4
 800efcc:	f7f1 fe74 	bl	8000cb8 <__aeabi_uldivmod>
 800efd0:	4603      	mov	r3, r0
 800efd2:	460c      	mov	r4, r1
 800efd4:	461a      	mov	r2, r3
 800efd6:	4b8b      	ldr	r3, [pc, #556]	; (800f204 <UART_SetConfig+0x384>)
 800efd8:	fba3 1302 	umull	r1, r3, r3, r2
 800efdc:	095b      	lsrs	r3, r3, #5
 800efde:	2164      	movs	r1, #100	; 0x64
 800efe0:	fb01 f303 	mul.w	r3, r1, r3
 800efe4:	1ad3      	subs	r3, r2, r3
 800efe6:	00db      	lsls	r3, r3, #3
 800efe8:	3332      	adds	r3, #50	; 0x32
 800efea:	4a86      	ldr	r2, [pc, #536]	; (800f204 <UART_SetConfig+0x384>)
 800efec:	fba2 2303 	umull	r2, r3, r2, r3
 800eff0:	095b      	lsrs	r3, r3, #5
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800eff8:	4498      	add	r8, r3
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	461d      	mov	r5, r3
 800effe:	f04f 0600 	mov.w	r6, #0
 800f002:	46a9      	mov	r9, r5
 800f004:	46b2      	mov	sl, r6
 800f006:	eb19 0309 	adds.w	r3, r9, r9
 800f00a:	eb4a 040a 	adc.w	r4, sl, sl
 800f00e:	4699      	mov	r9, r3
 800f010:	46a2      	mov	sl, r4
 800f012:	eb19 0905 	adds.w	r9, r9, r5
 800f016:	eb4a 0a06 	adc.w	sl, sl, r6
 800f01a:	f04f 0100 	mov.w	r1, #0
 800f01e:	f04f 0200 	mov.w	r2, #0
 800f022:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f026:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f02a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f02e:	4689      	mov	r9, r1
 800f030:	4692      	mov	sl, r2
 800f032:	eb19 0005 	adds.w	r0, r9, r5
 800f036:	eb4a 0106 	adc.w	r1, sl, r6
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	461d      	mov	r5, r3
 800f040:	f04f 0600 	mov.w	r6, #0
 800f044:	196b      	adds	r3, r5, r5
 800f046:	eb46 0406 	adc.w	r4, r6, r6
 800f04a:	461a      	mov	r2, r3
 800f04c:	4623      	mov	r3, r4
 800f04e:	f7f1 fe33 	bl	8000cb8 <__aeabi_uldivmod>
 800f052:	4603      	mov	r3, r0
 800f054:	460c      	mov	r4, r1
 800f056:	461a      	mov	r2, r3
 800f058:	4b6a      	ldr	r3, [pc, #424]	; (800f204 <UART_SetConfig+0x384>)
 800f05a:	fba3 1302 	umull	r1, r3, r3, r2
 800f05e:	095b      	lsrs	r3, r3, #5
 800f060:	2164      	movs	r1, #100	; 0x64
 800f062:	fb01 f303 	mul.w	r3, r1, r3
 800f066:	1ad3      	subs	r3, r2, r3
 800f068:	00db      	lsls	r3, r3, #3
 800f06a:	3332      	adds	r3, #50	; 0x32
 800f06c:	4a65      	ldr	r2, [pc, #404]	; (800f204 <UART_SetConfig+0x384>)
 800f06e:	fba2 2303 	umull	r2, r3, r2, r3
 800f072:	095b      	lsrs	r3, r3, #5
 800f074:	f003 0207 	and.w	r2, r3, #7
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4442      	add	r2, r8
 800f07e:	609a      	str	r2, [r3, #8]
 800f080:	e26f      	b.n	800f562 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f082:	f7fc fafb 	bl	800b67c <HAL_RCC_GetPCLK1Freq>
 800f086:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	461d      	mov	r5, r3
 800f08c:	f04f 0600 	mov.w	r6, #0
 800f090:	46a8      	mov	r8, r5
 800f092:	46b1      	mov	r9, r6
 800f094:	eb18 0308 	adds.w	r3, r8, r8
 800f098:	eb49 0409 	adc.w	r4, r9, r9
 800f09c:	4698      	mov	r8, r3
 800f09e:	46a1      	mov	r9, r4
 800f0a0:	eb18 0805 	adds.w	r8, r8, r5
 800f0a4:	eb49 0906 	adc.w	r9, r9, r6
 800f0a8:	f04f 0100 	mov.w	r1, #0
 800f0ac:	f04f 0200 	mov.w	r2, #0
 800f0b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f0b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f0b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f0bc:	4688      	mov	r8, r1
 800f0be:	4691      	mov	r9, r2
 800f0c0:	eb18 0005 	adds.w	r0, r8, r5
 800f0c4:	eb49 0106 	adc.w	r1, r9, r6
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	461d      	mov	r5, r3
 800f0ce:	f04f 0600 	mov.w	r6, #0
 800f0d2:	196b      	adds	r3, r5, r5
 800f0d4:	eb46 0406 	adc.w	r4, r6, r6
 800f0d8:	461a      	mov	r2, r3
 800f0da:	4623      	mov	r3, r4
 800f0dc:	f7f1 fdec 	bl	8000cb8 <__aeabi_uldivmod>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	460c      	mov	r4, r1
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	4b47      	ldr	r3, [pc, #284]	; (800f204 <UART_SetConfig+0x384>)
 800f0e8:	fba3 2302 	umull	r2, r3, r3, r2
 800f0ec:	095b      	lsrs	r3, r3, #5
 800f0ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	461d      	mov	r5, r3
 800f0f6:	f04f 0600 	mov.w	r6, #0
 800f0fa:	46a9      	mov	r9, r5
 800f0fc:	46b2      	mov	sl, r6
 800f0fe:	eb19 0309 	adds.w	r3, r9, r9
 800f102:	eb4a 040a 	adc.w	r4, sl, sl
 800f106:	4699      	mov	r9, r3
 800f108:	46a2      	mov	sl, r4
 800f10a:	eb19 0905 	adds.w	r9, r9, r5
 800f10e:	eb4a 0a06 	adc.w	sl, sl, r6
 800f112:	f04f 0100 	mov.w	r1, #0
 800f116:	f04f 0200 	mov.w	r2, #0
 800f11a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f11e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f122:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f126:	4689      	mov	r9, r1
 800f128:	4692      	mov	sl, r2
 800f12a:	eb19 0005 	adds.w	r0, r9, r5
 800f12e:	eb4a 0106 	adc.w	r1, sl, r6
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	461d      	mov	r5, r3
 800f138:	f04f 0600 	mov.w	r6, #0
 800f13c:	196b      	adds	r3, r5, r5
 800f13e:	eb46 0406 	adc.w	r4, r6, r6
 800f142:	461a      	mov	r2, r3
 800f144:	4623      	mov	r3, r4
 800f146:	f7f1 fdb7 	bl	8000cb8 <__aeabi_uldivmod>
 800f14a:	4603      	mov	r3, r0
 800f14c:	460c      	mov	r4, r1
 800f14e:	461a      	mov	r2, r3
 800f150:	4b2c      	ldr	r3, [pc, #176]	; (800f204 <UART_SetConfig+0x384>)
 800f152:	fba3 1302 	umull	r1, r3, r3, r2
 800f156:	095b      	lsrs	r3, r3, #5
 800f158:	2164      	movs	r1, #100	; 0x64
 800f15a:	fb01 f303 	mul.w	r3, r1, r3
 800f15e:	1ad3      	subs	r3, r2, r3
 800f160:	00db      	lsls	r3, r3, #3
 800f162:	3332      	adds	r3, #50	; 0x32
 800f164:	4a27      	ldr	r2, [pc, #156]	; (800f204 <UART_SetConfig+0x384>)
 800f166:	fba2 2303 	umull	r2, r3, r2, r3
 800f16a:	095b      	lsrs	r3, r3, #5
 800f16c:	005b      	lsls	r3, r3, #1
 800f16e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f172:	4498      	add	r8, r3
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	461d      	mov	r5, r3
 800f178:	f04f 0600 	mov.w	r6, #0
 800f17c:	46a9      	mov	r9, r5
 800f17e:	46b2      	mov	sl, r6
 800f180:	eb19 0309 	adds.w	r3, r9, r9
 800f184:	eb4a 040a 	adc.w	r4, sl, sl
 800f188:	4699      	mov	r9, r3
 800f18a:	46a2      	mov	sl, r4
 800f18c:	eb19 0905 	adds.w	r9, r9, r5
 800f190:	eb4a 0a06 	adc.w	sl, sl, r6
 800f194:	f04f 0100 	mov.w	r1, #0
 800f198:	f04f 0200 	mov.w	r2, #0
 800f19c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1a8:	4689      	mov	r9, r1
 800f1aa:	4692      	mov	sl, r2
 800f1ac:	eb19 0005 	adds.w	r0, r9, r5
 800f1b0:	eb4a 0106 	adc.w	r1, sl, r6
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	461d      	mov	r5, r3
 800f1ba:	f04f 0600 	mov.w	r6, #0
 800f1be:	196b      	adds	r3, r5, r5
 800f1c0:	eb46 0406 	adc.w	r4, r6, r6
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	4623      	mov	r3, r4
 800f1c8:	f7f1 fd76 	bl	8000cb8 <__aeabi_uldivmod>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	4b0c      	ldr	r3, [pc, #48]	; (800f204 <UART_SetConfig+0x384>)
 800f1d4:	fba3 1302 	umull	r1, r3, r3, r2
 800f1d8:	095b      	lsrs	r3, r3, #5
 800f1da:	2164      	movs	r1, #100	; 0x64
 800f1dc:	fb01 f303 	mul.w	r3, r1, r3
 800f1e0:	1ad3      	subs	r3, r2, r3
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	3332      	adds	r3, #50	; 0x32
 800f1e6:	4a07      	ldr	r2, [pc, #28]	; (800f204 <UART_SetConfig+0x384>)
 800f1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ec:	095b      	lsrs	r3, r3, #5
 800f1ee:	f003 0207 	and.w	r2, r3, #7
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4442      	add	r2, r8
 800f1f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f1fa:	e1b2      	b.n	800f562 <UART_SetConfig+0x6e2>
 800f1fc:	40011000 	.word	0x40011000
 800f200:	40011400 	.word	0x40011400
 800f204:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	4ad7      	ldr	r2, [pc, #860]	; (800f56c <UART_SetConfig+0x6ec>)
 800f20e:	4293      	cmp	r3, r2
 800f210:	d005      	beq.n	800f21e <UART_SetConfig+0x39e>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4ad6      	ldr	r2, [pc, #856]	; (800f570 <UART_SetConfig+0x6f0>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	f040 80d1 	bne.w	800f3c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f21e:	f7fc fa41 	bl	800b6a4 <HAL_RCC_GetPCLK2Freq>
 800f222:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	469a      	mov	sl, r3
 800f228:	f04f 0b00 	mov.w	fp, #0
 800f22c:	46d0      	mov	r8, sl
 800f22e:	46d9      	mov	r9, fp
 800f230:	eb18 0308 	adds.w	r3, r8, r8
 800f234:	eb49 0409 	adc.w	r4, r9, r9
 800f238:	4698      	mov	r8, r3
 800f23a:	46a1      	mov	r9, r4
 800f23c:	eb18 080a 	adds.w	r8, r8, sl
 800f240:	eb49 090b 	adc.w	r9, r9, fp
 800f244:	f04f 0100 	mov.w	r1, #0
 800f248:	f04f 0200 	mov.w	r2, #0
 800f24c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f250:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f254:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f258:	4688      	mov	r8, r1
 800f25a:	4691      	mov	r9, r2
 800f25c:	eb1a 0508 	adds.w	r5, sl, r8
 800f260:	eb4b 0609 	adc.w	r6, fp, r9
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	4619      	mov	r1, r3
 800f26a:	f04f 0200 	mov.w	r2, #0
 800f26e:	f04f 0300 	mov.w	r3, #0
 800f272:	f04f 0400 	mov.w	r4, #0
 800f276:	0094      	lsls	r4, r2, #2
 800f278:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f27c:	008b      	lsls	r3, r1, #2
 800f27e:	461a      	mov	r2, r3
 800f280:	4623      	mov	r3, r4
 800f282:	4628      	mov	r0, r5
 800f284:	4631      	mov	r1, r6
 800f286:	f7f1 fd17 	bl	8000cb8 <__aeabi_uldivmod>
 800f28a:	4603      	mov	r3, r0
 800f28c:	460c      	mov	r4, r1
 800f28e:	461a      	mov	r2, r3
 800f290:	4bb8      	ldr	r3, [pc, #736]	; (800f574 <UART_SetConfig+0x6f4>)
 800f292:	fba3 2302 	umull	r2, r3, r3, r2
 800f296:	095b      	lsrs	r3, r3, #5
 800f298:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	469b      	mov	fp, r3
 800f2a0:	f04f 0c00 	mov.w	ip, #0
 800f2a4:	46d9      	mov	r9, fp
 800f2a6:	46e2      	mov	sl, ip
 800f2a8:	eb19 0309 	adds.w	r3, r9, r9
 800f2ac:	eb4a 040a 	adc.w	r4, sl, sl
 800f2b0:	4699      	mov	r9, r3
 800f2b2:	46a2      	mov	sl, r4
 800f2b4:	eb19 090b 	adds.w	r9, r9, fp
 800f2b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f2bc:	f04f 0100 	mov.w	r1, #0
 800f2c0:	f04f 0200 	mov.w	r2, #0
 800f2c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f2c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f2cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f2d0:	4689      	mov	r9, r1
 800f2d2:	4692      	mov	sl, r2
 800f2d4:	eb1b 0509 	adds.w	r5, fp, r9
 800f2d8:	eb4c 060a 	adc.w	r6, ip, sl
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	f04f 0200 	mov.w	r2, #0
 800f2e6:	f04f 0300 	mov.w	r3, #0
 800f2ea:	f04f 0400 	mov.w	r4, #0
 800f2ee:	0094      	lsls	r4, r2, #2
 800f2f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2f4:	008b      	lsls	r3, r1, #2
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	4623      	mov	r3, r4
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	4631      	mov	r1, r6
 800f2fe:	f7f1 fcdb 	bl	8000cb8 <__aeabi_uldivmod>
 800f302:	4603      	mov	r3, r0
 800f304:	460c      	mov	r4, r1
 800f306:	461a      	mov	r2, r3
 800f308:	4b9a      	ldr	r3, [pc, #616]	; (800f574 <UART_SetConfig+0x6f4>)
 800f30a:	fba3 1302 	umull	r1, r3, r3, r2
 800f30e:	095b      	lsrs	r3, r3, #5
 800f310:	2164      	movs	r1, #100	; 0x64
 800f312:	fb01 f303 	mul.w	r3, r1, r3
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	011b      	lsls	r3, r3, #4
 800f31a:	3332      	adds	r3, #50	; 0x32
 800f31c:	4a95      	ldr	r2, [pc, #596]	; (800f574 <UART_SetConfig+0x6f4>)
 800f31e:	fba2 2303 	umull	r2, r3, r2, r3
 800f322:	095b      	lsrs	r3, r3, #5
 800f324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f328:	4498      	add	r8, r3
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	469b      	mov	fp, r3
 800f32e:	f04f 0c00 	mov.w	ip, #0
 800f332:	46d9      	mov	r9, fp
 800f334:	46e2      	mov	sl, ip
 800f336:	eb19 0309 	adds.w	r3, r9, r9
 800f33a:	eb4a 040a 	adc.w	r4, sl, sl
 800f33e:	4699      	mov	r9, r3
 800f340:	46a2      	mov	sl, r4
 800f342:	eb19 090b 	adds.w	r9, r9, fp
 800f346:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f34a:	f04f 0100 	mov.w	r1, #0
 800f34e:	f04f 0200 	mov.w	r2, #0
 800f352:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f356:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f35a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f35e:	4689      	mov	r9, r1
 800f360:	4692      	mov	sl, r2
 800f362:	eb1b 0509 	adds.w	r5, fp, r9
 800f366:	eb4c 060a 	adc.w	r6, ip, sl
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	4619      	mov	r1, r3
 800f370:	f04f 0200 	mov.w	r2, #0
 800f374:	f04f 0300 	mov.w	r3, #0
 800f378:	f04f 0400 	mov.w	r4, #0
 800f37c:	0094      	lsls	r4, r2, #2
 800f37e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f382:	008b      	lsls	r3, r1, #2
 800f384:	461a      	mov	r2, r3
 800f386:	4623      	mov	r3, r4
 800f388:	4628      	mov	r0, r5
 800f38a:	4631      	mov	r1, r6
 800f38c:	f7f1 fc94 	bl	8000cb8 <__aeabi_uldivmod>
 800f390:	4603      	mov	r3, r0
 800f392:	460c      	mov	r4, r1
 800f394:	461a      	mov	r2, r3
 800f396:	4b77      	ldr	r3, [pc, #476]	; (800f574 <UART_SetConfig+0x6f4>)
 800f398:	fba3 1302 	umull	r1, r3, r3, r2
 800f39c:	095b      	lsrs	r3, r3, #5
 800f39e:	2164      	movs	r1, #100	; 0x64
 800f3a0:	fb01 f303 	mul.w	r3, r1, r3
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	011b      	lsls	r3, r3, #4
 800f3a8:	3332      	adds	r3, #50	; 0x32
 800f3aa:	4a72      	ldr	r2, [pc, #456]	; (800f574 <UART_SetConfig+0x6f4>)
 800f3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800f3b0:	095b      	lsrs	r3, r3, #5
 800f3b2:	f003 020f 	and.w	r2, r3, #15
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4442      	add	r2, r8
 800f3bc:	609a      	str	r2, [r3, #8]
 800f3be:	e0d0      	b.n	800f562 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f3c0:	f7fc f95c 	bl	800b67c <HAL_RCC_GetPCLK1Freq>
 800f3c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	469a      	mov	sl, r3
 800f3ca:	f04f 0b00 	mov.w	fp, #0
 800f3ce:	46d0      	mov	r8, sl
 800f3d0:	46d9      	mov	r9, fp
 800f3d2:	eb18 0308 	adds.w	r3, r8, r8
 800f3d6:	eb49 0409 	adc.w	r4, r9, r9
 800f3da:	4698      	mov	r8, r3
 800f3dc:	46a1      	mov	r9, r4
 800f3de:	eb18 080a 	adds.w	r8, r8, sl
 800f3e2:	eb49 090b 	adc.w	r9, r9, fp
 800f3e6:	f04f 0100 	mov.w	r1, #0
 800f3ea:	f04f 0200 	mov.w	r2, #0
 800f3ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f3f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f3f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f3fa:	4688      	mov	r8, r1
 800f3fc:	4691      	mov	r9, r2
 800f3fe:	eb1a 0508 	adds.w	r5, sl, r8
 800f402:	eb4b 0609 	adc.w	r6, fp, r9
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	4619      	mov	r1, r3
 800f40c:	f04f 0200 	mov.w	r2, #0
 800f410:	f04f 0300 	mov.w	r3, #0
 800f414:	f04f 0400 	mov.w	r4, #0
 800f418:	0094      	lsls	r4, r2, #2
 800f41a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f41e:	008b      	lsls	r3, r1, #2
 800f420:	461a      	mov	r2, r3
 800f422:	4623      	mov	r3, r4
 800f424:	4628      	mov	r0, r5
 800f426:	4631      	mov	r1, r6
 800f428:	f7f1 fc46 	bl	8000cb8 <__aeabi_uldivmod>
 800f42c:	4603      	mov	r3, r0
 800f42e:	460c      	mov	r4, r1
 800f430:	461a      	mov	r2, r3
 800f432:	4b50      	ldr	r3, [pc, #320]	; (800f574 <UART_SetConfig+0x6f4>)
 800f434:	fba3 2302 	umull	r2, r3, r3, r2
 800f438:	095b      	lsrs	r3, r3, #5
 800f43a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	469b      	mov	fp, r3
 800f442:	f04f 0c00 	mov.w	ip, #0
 800f446:	46d9      	mov	r9, fp
 800f448:	46e2      	mov	sl, ip
 800f44a:	eb19 0309 	adds.w	r3, r9, r9
 800f44e:	eb4a 040a 	adc.w	r4, sl, sl
 800f452:	4699      	mov	r9, r3
 800f454:	46a2      	mov	sl, r4
 800f456:	eb19 090b 	adds.w	r9, r9, fp
 800f45a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f45e:	f04f 0100 	mov.w	r1, #0
 800f462:	f04f 0200 	mov.w	r2, #0
 800f466:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f46a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f46e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f472:	4689      	mov	r9, r1
 800f474:	4692      	mov	sl, r2
 800f476:	eb1b 0509 	adds.w	r5, fp, r9
 800f47a:	eb4c 060a 	adc.w	r6, ip, sl
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	4619      	mov	r1, r3
 800f484:	f04f 0200 	mov.w	r2, #0
 800f488:	f04f 0300 	mov.w	r3, #0
 800f48c:	f04f 0400 	mov.w	r4, #0
 800f490:	0094      	lsls	r4, r2, #2
 800f492:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f496:	008b      	lsls	r3, r1, #2
 800f498:	461a      	mov	r2, r3
 800f49a:	4623      	mov	r3, r4
 800f49c:	4628      	mov	r0, r5
 800f49e:	4631      	mov	r1, r6
 800f4a0:	f7f1 fc0a 	bl	8000cb8 <__aeabi_uldivmod>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	4b32      	ldr	r3, [pc, #200]	; (800f574 <UART_SetConfig+0x6f4>)
 800f4ac:	fba3 1302 	umull	r1, r3, r3, r2
 800f4b0:	095b      	lsrs	r3, r3, #5
 800f4b2:	2164      	movs	r1, #100	; 0x64
 800f4b4:	fb01 f303 	mul.w	r3, r1, r3
 800f4b8:	1ad3      	subs	r3, r2, r3
 800f4ba:	011b      	lsls	r3, r3, #4
 800f4bc:	3332      	adds	r3, #50	; 0x32
 800f4be:	4a2d      	ldr	r2, [pc, #180]	; (800f574 <UART_SetConfig+0x6f4>)
 800f4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f4c4:	095b      	lsrs	r3, r3, #5
 800f4c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4ca:	4498      	add	r8, r3
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	469b      	mov	fp, r3
 800f4d0:	f04f 0c00 	mov.w	ip, #0
 800f4d4:	46d9      	mov	r9, fp
 800f4d6:	46e2      	mov	sl, ip
 800f4d8:	eb19 0309 	adds.w	r3, r9, r9
 800f4dc:	eb4a 040a 	adc.w	r4, sl, sl
 800f4e0:	4699      	mov	r9, r3
 800f4e2:	46a2      	mov	sl, r4
 800f4e4:	eb19 090b 	adds.w	r9, r9, fp
 800f4e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f4ec:	f04f 0100 	mov.w	r1, #0
 800f4f0:	f04f 0200 	mov.w	r2, #0
 800f4f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f4f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f4fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f500:	4689      	mov	r9, r1
 800f502:	4692      	mov	sl, r2
 800f504:	eb1b 0509 	adds.w	r5, fp, r9
 800f508:	eb4c 060a 	adc.w	r6, ip, sl
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	4619      	mov	r1, r3
 800f512:	f04f 0200 	mov.w	r2, #0
 800f516:	f04f 0300 	mov.w	r3, #0
 800f51a:	f04f 0400 	mov.w	r4, #0
 800f51e:	0094      	lsls	r4, r2, #2
 800f520:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f524:	008b      	lsls	r3, r1, #2
 800f526:	461a      	mov	r2, r3
 800f528:	4623      	mov	r3, r4
 800f52a:	4628      	mov	r0, r5
 800f52c:	4631      	mov	r1, r6
 800f52e:	f7f1 fbc3 	bl	8000cb8 <__aeabi_uldivmod>
 800f532:	4603      	mov	r3, r0
 800f534:	460c      	mov	r4, r1
 800f536:	461a      	mov	r2, r3
 800f538:	4b0e      	ldr	r3, [pc, #56]	; (800f574 <UART_SetConfig+0x6f4>)
 800f53a:	fba3 1302 	umull	r1, r3, r3, r2
 800f53e:	095b      	lsrs	r3, r3, #5
 800f540:	2164      	movs	r1, #100	; 0x64
 800f542:	fb01 f303 	mul.w	r3, r1, r3
 800f546:	1ad3      	subs	r3, r2, r3
 800f548:	011b      	lsls	r3, r3, #4
 800f54a:	3332      	adds	r3, #50	; 0x32
 800f54c:	4a09      	ldr	r2, [pc, #36]	; (800f574 <UART_SetConfig+0x6f4>)
 800f54e:	fba2 2303 	umull	r2, r3, r2, r3
 800f552:	095b      	lsrs	r3, r3, #5
 800f554:	f003 020f 	and.w	r2, r3, #15
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4442      	add	r2, r8
 800f55e:	609a      	str	r2, [r3, #8]
}
 800f560:	e7ff      	b.n	800f562 <UART_SetConfig+0x6e2>
 800f562:	bf00      	nop
 800f564:	3714      	adds	r7, #20
 800f566:	46bd      	mov	sp, r7
 800f568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56c:	40011000 	.word	0x40011000
 800f570:	40011400 	.word	0x40011400
 800f574:	51eb851f 	.word	0x51eb851f

0800f578 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f578:	b084      	sub	sp, #16
 800f57a:	b480      	push	{r7}
 800f57c:	b085      	sub	sp, #20
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
 800f582:	f107 001c 	add.w	r0, r7, #28
 800f586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f58a:	2300      	movs	r3, #0
 800f58c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f58e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f590:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f592:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f596:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f598:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f59a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f59e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f5a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f5b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f5b6:	68fa      	ldr	r2, [r7, #12]
 800f5b8:	431a      	orrs	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3714      	adds	r7, #20
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	b004      	add	sp, #16
 800f5cc:	4770      	bx	lr

0800f5ce <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f5ce:	b480      	push	{r7}
 800f5d0:	b083      	sub	sp, #12
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	370c      	adds	r7, #12
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b082      	sub	sp, #8
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2203      	movs	r2, #3
 800f616:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f618:	2002      	movs	r0, #2
 800f61a:	f7f9 fbdd 	bl	8008dd8 <HAL_Delay>
  
  return HAL_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f003 0303 	and.w	r3, r3, #3
}
 800f638:	4618      	mov	r0, r3
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f64e:	2300      	movs	r3, #0
 800f650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f662:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f668:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f66e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	4313      	orrs	r3, r2
 800f674:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f67e:	f023 030f 	bic.w	r3, r3, #15
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	431a      	orrs	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3714      	adds	r7, #20
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	691b      	ldr	r3, [r3, #16]
 800f6a4:	b2db      	uxtb	r3, r3
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	370c      	adds	r7, #12
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr

0800f6b2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f6b2:	b480      	push	{r7}
 800f6b4:	b085      	sub	sp, #20
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	3314      	adds	r3, #20
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
}  
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3714      	adds	r7, #20
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	681a      	ldr	r2, [r3, #0]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	685a      	ldr	r2, [r3, #4]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f6fe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f704:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f70a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	4313      	orrs	r3, r2
 800f710:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f716:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	431a      	orrs	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f722:	2300      	movs	r3, #0

}
 800f724:	4618      	mov	r0, r3
 800f726:	3714      	adds	r7, #20
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b088      	sub	sp, #32
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f73e:	2310      	movs	r3, #16
 800f740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f742:	2340      	movs	r3, #64	; 0x40
 800f744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f746:	2300      	movs	r3, #0
 800f748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f74e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f750:	f107 0308 	add.w	r3, r7, #8
 800f754:	4619      	mov	r1, r3
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f7ff ff74 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f760:	2110      	movs	r1, #16
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 fa40 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800f768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f76a:	69fb      	ldr	r3, [r7, #28]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3720      	adds	r7, #32
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b088      	sub	sp, #32
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f782:	2311      	movs	r3, #17
 800f784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f786:	2340      	movs	r3, #64	; 0x40
 800f788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f78a:	2300      	movs	r3, #0
 800f78c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f792:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f794:	f107 0308 	add.w	r3, r7, #8
 800f798:	4619      	mov	r1, r3
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f7ff ff52 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7a4:	2111      	movs	r1, #17
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 fa1e 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800f7ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7ae:	69fb      	ldr	r3, [r7, #28]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3720      	adds	r7, #32
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b088      	sub	sp, #32
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f7c6:	2312      	movs	r3, #18
 800f7c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7ca:	2340      	movs	r3, #64	; 0x40
 800f7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7d8:	f107 0308 	add.w	r3, r7, #8
 800f7dc:	4619      	mov	r1, r3
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f7ff ff30 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f7e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7e8:	2112      	movs	r1, #18
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 f9fc 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800f7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7f2:	69fb      	ldr	r3, [r7, #28]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3720      	adds	r7, #32
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b088      	sub	sp, #32
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f80a:	2318      	movs	r3, #24
 800f80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f80e:	2340      	movs	r3, #64	; 0x40
 800f810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f812:	2300      	movs	r3, #0
 800f814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f81a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f81c:	f107 0308 	add.w	r3, r7, #8
 800f820:	4619      	mov	r1, r3
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f7ff ff0e 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f828:	f241 3288 	movw	r2, #5000	; 0x1388
 800f82c:	2118      	movs	r1, #24
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 f9da 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800f834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f836:	69fb      	ldr	r3, [r7, #28]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3720      	adds	r7, #32
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b088      	sub	sp, #32
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f84e:	2319      	movs	r3, #25
 800f850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f852:	2340      	movs	r3, #64	; 0x40
 800f854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f856:	2300      	movs	r3, #0
 800f858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f85a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f85e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f860:	f107 0308 	add.w	r3, r7, #8
 800f864:	4619      	mov	r1, r3
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f7ff feec 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f86c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f870:	2119      	movs	r1, #25
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 f9b8 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800f878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f87a:	69fb      	ldr	r3, [r7, #28]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3720      	adds	r7, #32
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b088      	sub	sp, #32
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f88c:	2300      	movs	r3, #0
 800f88e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f890:	230c      	movs	r3, #12
 800f892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f894:	2340      	movs	r3, #64	; 0x40
 800f896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f898:	2300      	movs	r3, #0
 800f89a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f89c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8a2:	f107 0308 	add.w	r3, r7, #8
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7ff fecb 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f8ae:	4a05      	ldr	r2, [pc, #20]	; (800f8c4 <SDMMC_CmdStopTransfer+0x40>)
 800f8b0:	210c      	movs	r1, #12
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 f998 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800f8b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8ba:	69fb      	ldr	r3, [r7, #28]
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3720      	adds	r7, #32
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	05f5e100 	.word	0x05f5e100

0800f8c8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b08a      	sub	sp, #40	; 0x28
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f8d8:	2307      	movs	r3, #7
 800f8da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8dc:	2340      	movs	r3, #64	; 0x40
 800f8de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8e8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8ea:	f107 0310 	add.w	r3, r7, #16
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f7ff fea7 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f8f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8fa:	2107      	movs	r1, #7
 800f8fc:	68f8      	ldr	r0, [r7, #12]
 800f8fe:	f000 f973 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800f902:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f906:	4618      	mov	r0, r3
 800f908:	3728      	adds	r7, #40	; 0x28
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b088      	sub	sp, #32
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f916:	2300      	movs	r3, #0
 800f918:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f91a:	2300      	movs	r3, #0
 800f91c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f91e:	2300      	movs	r3, #0
 800f920:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f922:	2300      	movs	r3, #0
 800f924:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f92a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f92c:	f107 0308 	add.w	r3, r7, #8
 800f930:	4619      	mov	r1, r3
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f7ff fe86 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 f92d 	bl	800fb98 <SDMMC_GetCmdError>
 800f93e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f940:	69fb      	ldr	r3, [r7, #28]
}
 800f942:	4618      	mov	r0, r3
 800f944:	3720      	adds	r7, #32
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b088      	sub	sp, #32
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f952:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f958:	2308      	movs	r3, #8
 800f95a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f95c:	2340      	movs	r3, #64	; 0x40
 800f95e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f960:	2300      	movs	r3, #0
 800f962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f968:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f96a:	f107 0308 	add.w	r3, r7, #8
 800f96e:	4619      	mov	r1, r3
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7ff fe67 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fb16 	bl	800ffa8 <SDMMC_GetCmdResp7>
 800f97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f97e:	69fb      	ldr	r3, [r7, #28]
}
 800f980:	4618      	mov	r0, r3
 800f982:	3720      	adds	r7, #32
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b088      	sub	sp, #32
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f996:	2337      	movs	r3, #55	; 0x37
 800f998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f99a:	2340      	movs	r3, #64	; 0x40
 800f99c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9a8:	f107 0308 	add.w	r3, r7, #8
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7ff fe48 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f9b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9b8:	2137      	movs	r1, #55	; 0x37
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 f914 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800f9c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9c2:	69fb      	ldr	r3, [r7, #28]
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3720      	adds	r7, #32
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b088      	sub	sp, #32
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f9dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f9e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f9e2:	2329      	movs	r3, #41	; 0x29
 800f9e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f9e6:	2340      	movs	r3, #64	; 0x40
 800f9e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9f4:	f107 0308 	add.w	r3, r7, #8
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7ff fe22 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 fa23 	bl	800fe4c <SDMMC_GetCmdResp3>
 800fa06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa08:	69fb      	ldr	r3, [r7, #28]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3720      	adds	r7, #32
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b088      	sub	sp, #32
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
 800fa1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fa20:	2306      	movs	r3, #6
 800fa22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa24:	2340      	movs	r3, #64	; 0x40
 800fa26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa32:	f107 0308 	add.w	r3, r7, #8
 800fa36:	4619      	mov	r1, r3
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7ff fe03 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800fa3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa42:	2106      	movs	r1, #6
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 f8cf 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800fa4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa4c:	69fb      	ldr	r3, [r7, #28]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3720      	adds	r7, #32
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b088      	sub	sp, #32
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fa62:	2333      	movs	r3, #51	; 0x33
 800fa64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa66:	2340      	movs	r3, #64	; 0x40
 800fa68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa74:	f107 0308 	add.w	r3, r7, #8
 800fa78:	4619      	mov	r1, r3
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7ff fde2 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800fa80:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa84:	2133      	movs	r1, #51	; 0x33
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 f8ae 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800fa8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa8e:	69fb      	ldr	r3, [r7, #28]
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3720      	adds	r7, #32
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b088      	sub	sp, #32
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800faa0:	2300      	movs	r3, #0
 800faa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800faa4:	2302      	movs	r3, #2
 800faa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800faa8:	23c0      	movs	r3, #192	; 0xc0
 800faaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800faac:	2300      	movs	r3, #0
 800faae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fab6:	f107 0308 	add.w	r3, r7, #8
 800faba:	4619      	mov	r1, r3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f7ff fdc1 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 f97c 	bl	800fdc0 <SDMMC_GetCmdResp2>
 800fac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faca:	69fb      	ldr	r3, [r7, #28]
}
 800facc:	4618      	mov	r0, r3
 800face:	3720      	adds	r7, #32
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b088      	sub	sp, #32
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fae2:	2309      	movs	r3, #9
 800fae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fae6:	23c0      	movs	r3, #192	; 0xc0
 800fae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800faea:	2300      	movs	r3, #0
 800faec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800faee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800faf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800faf4:	f107 0308 	add.w	r3, r7, #8
 800faf8:	4619      	mov	r1, r3
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7ff fda2 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f000 f95d 	bl	800fdc0 <SDMMC_GetCmdResp2>
 800fb06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb08:	69fb      	ldr	r3, [r7, #28]
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3720      	adds	r7, #32
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b088      	sub	sp, #32
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
 800fb1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fb20:	2303      	movs	r3, #3
 800fb22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb24:	2340      	movs	r3, #64	; 0x40
 800fb26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb32:	f107 0308 	add.w	r3, r7, #8
 800fb36:	4619      	mov	r1, r3
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7ff fd83 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fb3e:	683a      	ldr	r2, [r7, #0]
 800fb40:	2103      	movs	r1, #3
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 f9bc 	bl	800fec0 <SDMMC_GetCmdResp6>
 800fb48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb4a:	69fb      	ldr	r3, [r7, #28]
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3720      	adds	r7, #32
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b088      	sub	sp, #32
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fb62:	230d      	movs	r3, #13
 800fb64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb66:	2340      	movs	r3, #64	; 0x40
 800fb68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb74:	f107 0308 	add.w	r3, r7, #8
 800fb78:	4619      	mov	r1, r3
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f7ff fd62 	bl	800f644 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800fb80:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb84:	210d      	movs	r1, #13
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 f82e 	bl	800fbe8 <SDMMC_GetCmdResp1>
 800fb8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb8e:	69fb      	ldr	r3, [r7, #28]
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3720      	adds	r7, #32
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800fb98:	b490      	push	{r4, r7}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fba0:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <SDMMC_GetCmdError+0x48>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a0f      	ldr	r2, [pc, #60]	; (800fbe4 <SDMMC_GetCmdError+0x4c>)
 800fba6:	fba2 2303 	umull	r2, r3, r2, r3
 800fbaa:	0a5b      	lsrs	r3, r3, #9
 800fbac:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fbb4:	4623      	mov	r3, r4
 800fbb6:	1e5c      	subs	r4, r3, #1
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d102      	bne.n	800fbc2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fbbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fbc0:	e009      	b.n	800fbd6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d0f2      	beq.n	800fbb4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	22c5      	movs	r2, #197	; 0xc5
 800fbd2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bc90      	pop	{r4, r7}
 800fbde:	4770      	bx	lr
 800fbe0:	20000000 	.word	0x20000000
 800fbe4:	10624dd3 	.word	0x10624dd3

0800fbe8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fbe8:	b590      	push	{r4, r7, lr}
 800fbea:	b087      	sub	sp, #28
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	607a      	str	r2, [r7, #4]
 800fbf4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fbf6:	4b6f      	ldr	r3, [pc, #444]	; (800fdb4 <SDMMC_GetCmdResp1+0x1cc>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4a6f      	ldr	r2, [pc, #444]	; (800fdb8 <SDMMC_GetCmdResp1+0x1d0>)
 800fbfc:	fba2 2303 	umull	r2, r3, r2, r3
 800fc00:	0a5b      	lsrs	r3, r3, #9
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fc08:	4623      	mov	r3, r4
 800fc0a:	1e5c      	subs	r4, r3, #1
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d102      	bne.n	800fc16 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc14:	e0c9      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc1a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d0f0      	beq.n	800fc08 <SDMMC_GetCmdResp1+0x20>
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d1eb      	bne.n	800fc08 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc34:	f003 0304 	and.w	r3, r3, #4
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d004      	beq.n	800fc46 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2204      	movs	r2, #4
 800fc40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fc42:	2304      	movs	r3, #4
 800fc44:	e0b1      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc4a:	f003 0301 	and.w	r3, r3, #1
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d004      	beq.n	800fc5c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2201      	movs	r2, #1
 800fc56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	e0a6      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	22c5      	movs	r2, #197	; 0xc5
 800fc60:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f7ff fd18 	bl	800f698 <SDIO_GetCommandResponse>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	7afb      	ldrb	r3, [r7, #11]
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d001      	beq.n	800fc76 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc72:	2301      	movs	r3, #1
 800fc74:	e099      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fc76:	2100      	movs	r1, #0
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f7ff fd1a 	bl	800f6b2 <SDIO_GetResponse>
 800fc7e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fc80:	693a      	ldr	r2, [r7, #16]
 800fc82:	4b4e      	ldr	r3, [pc, #312]	; (800fdbc <SDMMC_GetCmdResp1+0x1d4>)
 800fc84:	4013      	ands	r3, r2
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	e08d      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	da02      	bge.n	800fc9a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fc94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fc98:	e087      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d001      	beq.n	800fca8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fca4:	2340      	movs	r3, #64	; 0x40
 800fca6:	e080      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d001      	beq.n	800fcb6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fcb2:	2380      	movs	r3, #128	; 0x80
 800fcb4:	e079      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d002      	beq.n	800fcc6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fcc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fcc4:	e071      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d002      	beq.n	800fcd6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fcd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcd4:	e069      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fce4:	e061      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d002      	beq.n	800fcf6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fcf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fcf4:	e059      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d002      	beq.n	800fd06 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fd00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd04:	e051      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d002      	beq.n	800fd16 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fd10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fd14:	e049      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d002      	beq.n	800fd26 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fd20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd24:	e041      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800fd30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd34:	e039      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fd40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fd44:	e031      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fd50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fd54:	e029      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d002      	beq.n	800fd66 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fd60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fd64:	e021      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fd70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fd74:	e019      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fd80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fd84:	e011      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fd90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fd94:	e009      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	f003 0308 	and.w	r3, r3, #8
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fda0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fda4:	e001      	b.n	800fdaa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fda6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	371c      	adds	r7, #28
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd90      	pop	{r4, r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20000000 	.word	0x20000000
 800fdb8:	10624dd3 	.word	0x10624dd3
 800fdbc:	fdffe008 	.word	0xfdffe008

0800fdc0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800fdc0:	b490      	push	{r4, r7}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fdc8:	4b1e      	ldr	r3, [pc, #120]	; (800fe44 <SDMMC_GetCmdResp2+0x84>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4a1e      	ldr	r2, [pc, #120]	; (800fe48 <SDMMC_GetCmdResp2+0x88>)
 800fdce:	fba2 2303 	umull	r2, r3, r2, r3
 800fdd2:	0a5b      	lsrs	r3, r3, #9
 800fdd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fddc:	4623      	mov	r3, r4
 800fdde:	1e5c      	subs	r4, r3, #1
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d102      	bne.n	800fdea <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fde4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fde8:	e026      	b.n	800fe38 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d0f0      	beq.n	800fddc <SDMMC_GetCmdResp2+0x1c>
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d1eb      	bne.n	800fddc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe08:	f003 0304 	and.w	r3, r3, #4
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d004      	beq.n	800fe1a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2204      	movs	r2, #4
 800fe14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe16:	2304      	movs	r3, #4
 800fe18:	e00e      	b.n	800fe38 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d004      	beq.n	800fe30 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e003      	b.n	800fe38 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	22c5      	movs	r2, #197	; 0xc5
 800fe34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fe36:	2300      	movs	r3, #0
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3710      	adds	r7, #16
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bc90      	pop	{r4, r7}
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	20000000 	.word	0x20000000
 800fe48:	10624dd3 	.word	0x10624dd3

0800fe4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800fe4c:	b490      	push	{r4, r7}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe54:	4b18      	ldr	r3, [pc, #96]	; (800feb8 <SDMMC_GetCmdResp3+0x6c>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4a18      	ldr	r2, [pc, #96]	; (800febc <SDMMC_GetCmdResp3+0x70>)
 800fe5a:	fba2 2303 	umull	r2, r3, r2, r3
 800fe5e:	0a5b      	lsrs	r3, r3, #9
 800fe60:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fe68:	4623      	mov	r3, r4
 800fe6a:	1e5c      	subs	r4, r3, #1
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d102      	bne.n	800fe76 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe74:	e01b      	b.n	800feae <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe7a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d0f0      	beq.n	800fe68 <SDMMC_GetCmdResp3+0x1c>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1eb      	bne.n	800fe68 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe94:	f003 0304 	and.w	r3, r3, #4
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d004      	beq.n	800fea6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2204      	movs	r2, #4
 800fea0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fea2:	2304      	movs	r3, #4
 800fea4:	e003      	b.n	800feae <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	22c5      	movs	r2, #197	; 0xc5
 800feaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bc90      	pop	{r4, r7}
 800feb6:	4770      	bx	lr
 800feb8:	20000000 	.word	0x20000000
 800febc:	10624dd3 	.word	0x10624dd3

0800fec0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fec0:	b590      	push	{r4, r7, lr}
 800fec2:	b087      	sub	sp, #28
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	460b      	mov	r3, r1
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fece:	4b34      	ldr	r3, [pc, #208]	; (800ffa0 <SDMMC_GetCmdResp6+0xe0>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	4a34      	ldr	r2, [pc, #208]	; (800ffa4 <SDMMC_GetCmdResp6+0xe4>)
 800fed4:	fba2 2303 	umull	r2, r3, r2, r3
 800fed8:	0a5b      	lsrs	r3, r3, #9
 800feda:	f241 3288 	movw	r2, #5000	; 0x1388
 800fede:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fee2:	4623      	mov	r3, r4
 800fee4:	1e5c      	subs	r4, r3, #1
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d102      	bne.n	800fef0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800feea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800feee:	e052      	b.n	800ff96 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fef4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d0f0      	beq.n	800fee2 <SDMMC_GetCmdResp6+0x22>
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1eb      	bne.n	800fee2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff0e:	f003 0304 	and.w	r3, r3, #4
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d004      	beq.n	800ff20 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2204      	movs	r2, #4
 800ff1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff1c:	2304      	movs	r3, #4
 800ff1e:	e03a      	b.n	800ff96 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff24:	f003 0301 	and.w	r3, r3, #1
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d004      	beq.n	800ff36 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2201      	movs	r2, #1
 800ff30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff32:	2301      	movs	r3, #1
 800ff34:	e02f      	b.n	800ff96 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ff36:	68f8      	ldr	r0, [r7, #12]
 800ff38:	f7ff fbae 	bl	800f698 <SDIO_GetCommandResponse>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	461a      	mov	r2, r3
 800ff40:	7afb      	ldrb	r3, [r7, #11]
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d001      	beq.n	800ff4a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff46:	2301      	movs	r3, #1
 800ff48:	e025      	b.n	800ff96 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	22c5      	movs	r2, #197	; 0xc5
 800ff4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ff50:	2100      	movs	r1, #0
 800ff52:	68f8      	ldr	r0, [r7, #12]
 800ff54:	f7ff fbad 	bl	800f6b2 <SDIO_GetResponse>
 800ff58:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d106      	bne.n	800ff72 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	0c1b      	lsrs	r3, r3, #16
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	e011      	b.n	800ff96 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d002      	beq.n	800ff82 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ff7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff80:	e009      	b.n	800ff96 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ff8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff90:	e001      	b.n	800ff96 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ff92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	371c      	adds	r7, #28
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd90      	pop	{r4, r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	20000000 	.word	0x20000000
 800ffa4:	10624dd3 	.word	0x10624dd3

0800ffa8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ffa8:	b490      	push	{r4, r7}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ffb0:	4b21      	ldr	r3, [pc, #132]	; (8010038 <SDMMC_GetCmdResp7+0x90>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4a21      	ldr	r2, [pc, #132]	; (801003c <SDMMC_GetCmdResp7+0x94>)
 800ffb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffba:	0a5b      	lsrs	r3, r3, #9
 800ffbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ffc4:	4623      	mov	r3, r4
 800ffc6:	1e5c      	subs	r4, r3, #1
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d102      	bne.n	800ffd2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ffd0:	e02c      	b.n	801002c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffd6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d0f0      	beq.n	800ffc4 <SDMMC_GetCmdResp7+0x1c>
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1eb      	bne.n	800ffc4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fff0:	f003 0304 	and.w	r3, r3, #4
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d004      	beq.n	8010002 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2204      	movs	r2, #4
 800fffc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fffe:	2304      	movs	r3, #4
 8010000:	e014      	b.n	801002c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010006:	f003 0301 	and.w	r3, r3, #1
 801000a:	2b00      	cmp	r3, #0
 801000c:	d004      	beq.n	8010018 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2201      	movs	r2, #1
 8010012:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010014:	2301      	movs	r3, #1
 8010016:	e009      	b.n	801002c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801001c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010020:	2b00      	cmp	r3, #0
 8010022:	d002      	beq.n	801002a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2240      	movs	r2, #64	; 0x40
 8010028:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801002a:	2300      	movs	r3, #0
  
}
 801002c:	4618      	mov	r0, r3
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bc90      	pop	{r4, r7}
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop
 8010038:	20000000 	.word	0x20000000
 801003c:	10624dd3 	.word	0x10624dd3

08010040 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010044:	4904      	ldr	r1, [pc, #16]	; (8010058 <MX_FATFS_Init+0x18>)
 8010046:	4805      	ldr	r0, [pc, #20]	; (801005c <MX_FATFS_Init+0x1c>)
 8010048:	f003 fb9c 	bl	8013784 <FATFS_LinkDriver>
 801004c:	4603      	mov	r3, r0
 801004e:	461a      	mov	r2, r3
 8010050:	4b03      	ldr	r3, [pc, #12]	; (8010060 <MX_FATFS_Init+0x20>)
 8010052:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010054:	bf00      	nop
 8010056:	bd80      	pop	{r7, pc}
 8010058:	2003ee00 	.word	0x2003ee00
 801005c:	08019254 	.word	0x08019254
 8010060:	2003edfc 	.word	0x2003edfc

08010064 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801006a:	2300      	movs	r3, #0
 801006c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801006e:	f000 f896 	bl	801019e <BSP_SD_IsDetected>
 8010072:	4603      	mov	r3, r0
 8010074:	2b01      	cmp	r3, #1
 8010076:	d001      	beq.n	801007c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010078:	2301      	movs	r3, #1
 801007a:	e012      	b.n	80100a2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801007c:	480b      	ldr	r0, [pc, #44]	; (80100ac <BSP_SD_Init+0x48>)
 801007e:	f7fb ffa5 	bl	800bfcc <HAL_SD_Init>
 8010082:	4603      	mov	r3, r0
 8010084:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010086:	79fb      	ldrb	r3, [r7, #7]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d109      	bne.n	80100a0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801008c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010090:	4806      	ldr	r0, [pc, #24]	; (80100ac <BSP_SD_Init+0x48>)
 8010092:	f7fc fd4f 	bl	800cb34 <HAL_SD_ConfigWideBusOperation>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d001      	beq.n	80100a0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801009c:	2301      	movs	r3, #1
 801009e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80100a0:	79fb      	ldrb	r3, [r7, #7]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3708      	adds	r7, #8
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	2003ebfc 	.word	0x2003ebfc

080100b0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80100bc:	2300      	movs	r3, #0
 80100be:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	68f9      	ldr	r1, [r7, #12]
 80100c6:	4806      	ldr	r0, [pc, #24]	; (80100e0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80100c8:	f7fc f810 	bl	800c0ec <HAL_SD_ReadBlocks_DMA>
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d001      	beq.n	80100d6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80100d2:	2301      	movs	r3, #1
 80100d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80100d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3718      	adds	r7, #24
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	2003ebfc 	.word	0x2003ebfc

080100e4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b086      	sub	sp, #24
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80100f0:	2300      	movs	r3, #0
 80100f2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	68ba      	ldr	r2, [r7, #8]
 80100f8:	68f9      	ldr	r1, [r7, #12]
 80100fa:	4806      	ldr	r0, [pc, #24]	; (8010114 <BSP_SD_WriteBlocks_DMA+0x30>)
 80100fc:	f7fc f8de 	bl	800c2bc <HAL_SD_WriteBlocks_DMA>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d001      	beq.n	801010a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010106:	2301      	movs	r3, #1
 8010108:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801010a:	7dfb      	ldrb	r3, [r7, #23]
}
 801010c:	4618      	mov	r0, r3
 801010e:	3718      	adds	r7, #24
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	2003ebfc 	.word	0x2003ebfc

08010118 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801011c:	4805      	ldr	r0, [pc, #20]	; (8010134 <BSP_SD_GetCardState+0x1c>)
 801011e:	f7fc fd85 	bl	800cc2c <HAL_SD_GetCardState>
 8010122:	4603      	mov	r3, r0
 8010124:	2b04      	cmp	r3, #4
 8010126:	bf14      	ite	ne
 8010128:	2301      	movne	r3, #1
 801012a:	2300      	moveq	r3, #0
 801012c:	b2db      	uxtb	r3, r3
}
 801012e:	4618      	mov	r0, r3
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	2003ebfc 	.word	0x2003ebfc

08010138 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010140:	6879      	ldr	r1, [r7, #4]
 8010142:	4803      	ldr	r0, [pc, #12]	; (8010150 <BSP_SD_GetCardInfo+0x18>)
 8010144:	f7fc fcca 	bl	800cadc <HAL_SD_GetCardInfo>
}
 8010148:	bf00      	nop
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	2003ebfc 	.word	0x2003ebfc

08010154 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801015c:	f000 f818 	bl	8010190 <BSP_SD_AbortCallback>
}
 8010160:	bf00      	nop
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010170:	f000 f9a8 	bl	80104c4 <BSP_SD_WriteCpltCallback>
}
 8010174:	bf00      	nop
 8010176:	3708      	adds	r7, #8
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010184:	f000 f9aa 	bl	80104dc <BSP_SD_ReadCpltCallback>
}
 8010188:	bf00      	nop
 801018a:	3708      	adds	r7, #8
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010190:	b480      	push	{r7}
 8010192:	af00      	add	r7, sp, #0

}
 8010194:	bf00      	nop
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b082      	sub	sp, #8
 80101a2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80101a4:	2301      	movs	r3, #1
 80101a6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80101a8:	f000 f80c 	bl	80101c4 <BSP_PlatformIsDetected>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d101      	bne.n	80101b6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80101b2:	2300      	movs	r3, #0
 80101b4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80101b6:	79fb      	ldrb	r3, [r7, #7]
 80101b8:	b2db      	uxtb	r3, r3
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3708      	adds	r7, #8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
	...

080101c4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80101ca:	2301      	movs	r3, #1
 80101cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80101ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80101d2:	4806      	ldr	r0, [pc, #24]	; (80101ec <BSP_PlatformIsDetected+0x28>)
 80101d4:	f7fa f87e 	bl	800a2d4 <HAL_GPIO_ReadPin>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d001      	beq.n	80101e2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80101de:	2300      	movs	r3, #0
 80101e0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80101e2:	79fb      	ldrb	r3, [r7, #7]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3708      	adds	r7, #8
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	40020000 	.word	0x40020000

080101f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80101f8:	f7f8 fde2 	bl	8008dc0 <HAL_GetTick>
 80101fc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80101fe:	e006      	b.n	801020e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010200:	f7ff ff8a 	bl	8010118 <BSP_SD_GetCardState>
 8010204:	4603      	mov	r3, r0
 8010206:	2b00      	cmp	r3, #0
 8010208:	d101      	bne.n	801020e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801020a:	2300      	movs	r3, #0
 801020c:	e009      	b.n	8010222 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801020e:	f7f8 fdd7 	bl	8008dc0 <HAL_GetTick>
 8010212:	4602      	mov	r2, r0
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	429a      	cmp	r2, r3
 801021c:	d8f0      	bhi.n	8010200 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801021e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010222:	4618      	mov	r0, r3
 8010224:	3710      	adds	r7, #16
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
	...

0801022c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	4603      	mov	r3, r0
 8010234:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010236:	4b0b      	ldr	r3, [pc, #44]	; (8010264 <SD_CheckStatus+0x38>)
 8010238:	2201      	movs	r2, #1
 801023a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801023c:	f7ff ff6c 	bl	8010118 <BSP_SD_GetCardState>
 8010240:	4603      	mov	r3, r0
 8010242:	2b00      	cmp	r3, #0
 8010244:	d107      	bne.n	8010256 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010246:	4b07      	ldr	r3, [pc, #28]	; (8010264 <SD_CheckStatus+0x38>)
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	b2db      	uxtb	r3, r3
 801024c:	f023 0301 	bic.w	r3, r3, #1
 8010250:	b2da      	uxtb	r2, r3
 8010252:	4b04      	ldr	r3, [pc, #16]	; (8010264 <SD_CheckStatus+0x38>)
 8010254:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010256:	4b03      	ldr	r3, [pc, #12]	; (8010264 <SD_CheckStatus+0x38>)
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	b2db      	uxtb	r3, r3
}
 801025c:	4618      	mov	r0, r3
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	20000009 	.word	0x20000009

08010268 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	4603      	mov	r3, r0
 8010270:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010272:	f7ff fef7 	bl	8010064 <BSP_SD_Init>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d107      	bne.n	801028c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801027c:	79fb      	ldrb	r3, [r7, #7]
 801027e:	4618      	mov	r0, r3
 8010280:	f7ff ffd4 	bl	801022c <SD_CheckStatus>
 8010284:	4603      	mov	r3, r0
 8010286:	461a      	mov	r2, r3
 8010288:	4b04      	ldr	r3, [pc, #16]	; (801029c <SD_initialize+0x34>)
 801028a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801028c:	4b03      	ldr	r3, [pc, #12]	; (801029c <SD_initialize+0x34>)
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	b2db      	uxtb	r3, r3
}
 8010292:	4618      	mov	r0, r3
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	20000009 	.word	0x20000009

080102a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	4603      	mov	r3, r0
 80102a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80102aa:	79fb      	ldrb	r3, [r7, #7]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff ffbd 	bl	801022c <SD_CheckStatus>
 80102b2:	4603      	mov	r3, r0
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60b9      	str	r1, [r7, #8]
 80102c4:	607a      	str	r2, [r7, #4]
 80102c6:	603b      	str	r3, [r7, #0]
 80102c8:	4603      	mov	r3, r0
 80102ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80102cc:	2301      	movs	r3, #1
 80102ce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80102d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80102d4:	f7ff ff8c 	bl	80101f0 <SD_CheckStatusWithTimeout>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	da01      	bge.n	80102e2 <SD_read+0x26>
  {
    return res;
 80102de:	7dfb      	ldrb	r3, [r7, #23]
 80102e0:	e03b      	b.n	801035a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	6879      	ldr	r1, [r7, #4]
 80102e6:	68b8      	ldr	r0, [r7, #8]
 80102e8:	f7ff fee2 	bl	80100b0 <BSP_SD_ReadBlocks_DMA>
 80102ec:	4603      	mov	r3, r0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d132      	bne.n	8010358 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80102f2:	4b1c      	ldr	r3, [pc, #112]	; (8010364 <SD_read+0xa8>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80102f8:	f7f8 fd62 	bl	8008dc0 <HAL_GetTick>
 80102fc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80102fe:	bf00      	nop
 8010300:	4b18      	ldr	r3, [pc, #96]	; (8010364 <SD_read+0xa8>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d108      	bne.n	801031a <SD_read+0x5e>
 8010308:	f7f8 fd5a 	bl	8008dc0 <HAL_GetTick>
 801030c:	4602      	mov	r2, r0
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	1ad3      	subs	r3, r2, r3
 8010312:	f247 522f 	movw	r2, #29999	; 0x752f
 8010316:	4293      	cmp	r3, r2
 8010318:	d9f2      	bls.n	8010300 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801031a:	4b12      	ldr	r3, [pc, #72]	; (8010364 <SD_read+0xa8>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d102      	bne.n	8010328 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010322:	2301      	movs	r3, #1
 8010324:	75fb      	strb	r3, [r7, #23]
 8010326:	e017      	b.n	8010358 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010328:	4b0e      	ldr	r3, [pc, #56]	; (8010364 <SD_read+0xa8>)
 801032a:	2200      	movs	r2, #0
 801032c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801032e:	f7f8 fd47 	bl	8008dc0 <HAL_GetTick>
 8010332:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010334:	e007      	b.n	8010346 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010336:	f7ff feef 	bl	8010118 <BSP_SD_GetCardState>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d102      	bne.n	8010346 <SD_read+0x8a>
          {
            res = RES_OK;
 8010340:	2300      	movs	r3, #0
 8010342:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010344:	e008      	b.n	8010358 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010346:	f7f8 fd3b 	bl	8008dc0 <HAL_GetTick>
 801034a:	4602      	mov	r2, r0
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	f247 522f 	movw	r2, #29999	; 0x752f
 8010354:	4293      	cmp	r3, r2
 8010356:	d9ee      	bls.n	8010336 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010358:	7dfb      	ldrb	r3, [r7, #23]
}
 801035a:	4618      	mov	r0, r3
 801035c:	3718      	adds	r7, #24
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	2003c498 	.word	0x2003c498

08010368 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b086      	sub	sp, #24
 801036c:	af00      	add	r7, sp, #0
 801036e:	60b9      	str	r1, [r7, #8]
 8010370:	607a      	str	r2, [r7, #4]
 8010372:	603b      	str	r3, [r7, #0]
 8010374:	4603      	mov	r3, r0
 8010376:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010378:	2301      	movs	r3, #1
 801037a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801037c:	4b24      	ldr	r3, [pc, #144]	; (8010410 <SD_write+0xa8>)
 801037e:	2200      	movs	r2, #0
 8010380:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010382:	f247 5030 	movw	r0, #30000	; 0x7530
 8010386:	f7ff ff33 	bl	80101f0 <SD_CheckStatusWithTimeout>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	da01      	bge.n	8010394 <SD_write+0x2c>
  {
    return res;
 8010390:	7dfb      	ldrb	r3, [r7, #23]
 8010392:	e038      	b.n	8010406 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010394:	683a      	ldr	r2, [r7, #0]
 8010396:	6879      	ldr	r1, [r7, #4]
 8010398:	68b8      	ldr	r0, [r7, #8]
 801039a:	f7ff fea3 	bl	80100e4 <BSP_SD_WriteBlocks_DMA>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d12f      	bne.n	8010404 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80103a4:	f7f8 fd0c 	bl	8008dc0 <HAL_GetTick>
 80103a8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80103aa:	bf00      	nop
 80103ac:	4b18      	ldr	r3, [pc, #96]	; (8010410 <SD_write+0xa8>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d108      	bne.n	80103c6 <SD_write+0x5e>
 80103b4:	f7f8 fd04 	bl	8008dc0 <HAL_GetTick>
 80103b8:	4602      	mov	r2, r0
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	1ad3      	subs	r3, r2, r3
 80103be:	f247 522f 	movw	r2, #29999	; 0x752f
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d9f2      	bls.n	80103ac <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80103c6:	4b12      	ldr	r3, [pc, #72]	; (8010410 <SD_write+0xa8>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d102      	bne.n	80103d4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80103ce:	2301      	movs	r3, #1
 80103d0:	75fb      	strb	r3, [r7, #23]
 80103d2:	e017      	b.n	8010404 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80103d4:	4b0e      	ldr	r3, [pc, #56]	; (8010410 <SD_write+0xa8>)
 80103d6:	2200      	movs	r2, #0
 80103d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80103da:	f7f8 fcf1 	bl	8008dc0 <HAL_GetTick>
 80103de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103e0:	e007      	b.n	80103f2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80103e2:	f7ff fe99 	bl	8010118 <BSP_SD_GetCardState>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d102      	bne.n	80103f2 <SD_write+0x8a>
          {
            res = RES_OK;
 80103ec:	2300      	movs	r3, #0
 80103ee:	75fb      	strb	r3, [r7, #23]
            break;
 80103f0:	e008      	b.n	8010404 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103f2:	f7f8 fce5 	bl	8008dc0 <HAL_GetTick>
 80103f6:	4602      	mov	r2, r0
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	1ad3      	subs	r3, r2, r3
 80103fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8010400:	4293      	cmp	r3, r2
 8010402:	d9ee      	bls.n	80103e2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010404:	7dfb      	ldrb	r3, [r7, #23]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3718      	adds	r7, #24
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	2003c494 	.word	0x2003c494

08010414 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b08c      	sub	sp, #48	; 0x30
 8010418:	af00      	add	r7, sp, #0
 801041a:	4603      	mov	r3, r0
 801041c:	603a      	str	r2, [r7, #0]
 801041e:	71fb      	strb	r3, [r7, #7]
 8010420:	460b      	mov	r3, r1
 8010422:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010424:	2301      	movs	r3, #1
 8010426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801042a:	4b25      	ldr	r3, [pc, #148]	; (80104c0 <SD_ioctl+0xac>)
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	b2db      	uxtb	r3, r3
 8010430:	f003 0301 	and.w	r3, r3, #1
 8010434:	2b00      	cmp	r3, #0
 8010436:	d001      	beq.n	801043c <SD_ioctl+0x28>
 8010438:	2303      	movs	r3, #3
 801043a:	e03c      	b.n	80104b6 <SD_ioctl+0xa2>

  switch (cmd)
 801043c:	79bb      	ldrb	r3, [r7, #6]
 801043e:	2b03      	cmp	r3, #3
 8010440:	d834      	bhi.n	80104ac <SD_ioctl+0x98>
 8010442:	a201      	add	r2, pc, #4	; (adr r2, 8010448 <SD_ioctl+0x34>)
 8010444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010448:	08010459 	.word	0x08010459
 801044c:	08010461 	.word	0x08010461
 8010450:	08010479 	.word	0x08010479
 8010454:	08010493 	.word	0x08010493
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010458:	2300      	movs	r3, #0
 801045a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801045e:	e028      	b.n	80104b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010460:	f107 030c 	add.w	r3, r7, #12
 8010464:	4618      	mov	r0, r3
 8010466:	f7ff fe67 	bl	8010138 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801046a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010470:	2300      	movs	r3, #0
 8010472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010476:	e01c      	b.n	80104b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010478:	f107 030c 	add.w	r3, r7, #12
 801047c:	4618      	mov	r0, r3
 801047e:	f7ff fe5b 	bl	8010138 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010484:	b29a      	uxth	r2, r3
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801048a:	2300      	movs	r3, #0
 801048c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010490:	e00f      	b.n	80104b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010492:	f107 030c 	add.w	r3, r7, #12
 8010496:	4618      	mov	r0, r3
 8010498:	f7ff fe4e 	bl	8010138 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049e:	0a5a      	lsrs	r2, r3, #9
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80104a4:	2300      	movs	r3, #0
 80104a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80104aa:	e002      	b.n	80104b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80104ac:	2304      	movs	r3, #4
 80104ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80104b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3730      	adds	r7, #48	; 0x30
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	20000009 	.word	0x20000009

080104c4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80104c4:	b480      	push	{r7}
 80104c6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80104c8:	4b03      	ldr	r3, [pc, #12]	; (80104d8 <BSP_SD_WriteCpltCallback+0x14>)
 80104ca:	2201      	movs	r2, #1
 80104cc:	601a      	str	r2, [r3, #0]
}
 80104ce:	bf00      	nop
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr
 80104d8:	2003c494 	.word	0x2003c494

080104dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80104dc:	b480      	push	{r7}
 80104de:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80104e0:	4b03      	ldr	r3, [pc, #12]	; (80104f0 <BSP_SD_ReadCpltCallback+0x14>)
 80104e2:	2201      	movs	r2, #1
 80104e4:	601a      	str	r2, [r3, #0]
}
 80104e6:	bf00      	nop
 80104e8:	46bd      	mov	sp, r7
 80104ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ee:	4770      	bx	lr
 80104f0:	2003c498 	.word	0x2003c498

080104f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	4603      	mov	r3, r0
 80104fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80104fe:	79fb      	ldrb	r3, [r7, #7]
 8010500:	4a08      	ldr	r2, [pc, #32]	; (8010524 <disk_status+0x30>)
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	79fa      	ldrb	r2, [r7, #7]
 801050c:	4905      	ldr	r1, [pc, #20]	; (8010524 <disk_status+0x30>)
 801050e:	440a      	add	r2, r1
 8010510:	7a12      	ldrb	r2, [r2, #8]
 8010512:	4610      	mov	r0, r2
 8010514:	4798      	blx	r3
 8010516:	4603      	mov	r3, r0
 8010518:	73fb      	strb	r3, [r7, #15]
  return stat;
 801051a:	7bfb      	ldrb	r3, [r7, #15]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3710      	adds	r7, #16
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	2003c4c4 	.word	0x2003c4c4

08010528 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	4603      	mov	r3, r0
 8010530:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010532:	2300      	movs	r3, #0
 8010534:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010536:	79fb      	ldrb	r3, [r7, #7]
 8010538:	4a0d      	ldr	r2, [pc, #52]	; (8010570 <disk_initialize+0x48>)
 801053a:	5cd3      	ldrb	r3, [r2, r3]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d111      	bne.n	8010564 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010540:	79fb      	ldrb	r3, [r7, #7]
 8010542:	4a0b      	ldr	r2, [pc, #44]	; (8010570 <disk_initialize+0x48>)
 8010544:	2101      	movs	r1, #1
 8010546:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010548:	79fb      	ldrb	r3, [r7, #7]
 801054a:	4a09      	ldr	r2, [pc, #36]	; (8010570 <disk_initialize+0x48>)
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	4413      	add	r3, r2
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	79fa      	ldrb	r2, [r7, #7]
 8010556:	4906      	ldr	r1, [pc, #24]	; (8010570 <disk_initialize+0x48>)
 8010558:	440a      	add	r2, r1
 801055a:	7a12      	ldrb	r2, [r2, #8]
 801055c:	4610      	mov	r0, r2
 801055e:	4798      	blx	r3
 8010560:	4603      	mov	r3, r0
 8010562:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010564:	7bfb      	ldrb	r3, [r7, #15]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3710      	adds	r7, #16
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	2003c4c4 	.word	0x2003c4c4

08010574 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010574:	b590      	push	{r4, r7, lr}
 8010576:	b087      	sub	sp, #28
 8010578:	af00      	add	r7, sp, #0
 801057a:	60b9      	str	r1, [r7, #8]
 801057c:	607a      	str	r2, [r7, #4]
 801057e:	603b      	str	r3, [r7, #0]
 8010580:	4603      	mov	r3, r0
 8010582:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010584:	7bfb      	ldrb	r3, [r7, #15]
 8010586:	4a0a      	ldr	r2, [pc, #40]	; (80105b0 <disk_read+0x3c>)
 8010588:	009b      	lsls	r3, r3, #2
 801058a:	4413      	add	r3, r2
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	689c      	ldr	r4, [r3, #8]
 8010590:	7bfb      	ldrb	r3, [r7, #15]
 8010592:	4a07      	ldr	r2, [pc, #28]	; (80105b0 <disk_read+0x3c>)
 8010594:	4413      	add	r3, r2
 8010596:	7a18      	ldrb	r0, [r3, #8]
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	68b9      	ldr	r1, [r7, #8]
 801059e:	47a0      	blx	r4
 80105a0:	4603      	mov	r3, r0
 80105a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80105a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	371c      	adds	r7, #28
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd90      	pop	{r4, r7, pc}
 80105ae:	bf00      	nop
 80105b0:	2003c4c4 	.word	0x2003c4c4

080105b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80105b4:	b590      	push	{r4, r7, lr}
 80105b6:	b087      	sub	sp, #28
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60b9      	str	r1, [r7, #8]
 80105bc:	607a      	str	r2, [r7, #4]
 80105be:	603b      	str	r3, [r7, #0]
 80105c0:	4603      	mov	r3, r0
 80105c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80105c4:	7bfb      	ldrb	r3, [r7, #15]
 80105c6:	4a0a      	ldr	r2, [pc, #40]	; (80105f0 <disk_write+0x3c>)
 80105c8:	009b      	lsls	r3, r3, #2
 80105ca:	4413      	add	r3, r2
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	68dc      	ldr	r4, [r3, #12]
 80105d0:	7bfb      	ldrb	r3, [r7, #15]
 80105d2:	4a07      	ldr	r2, [pc, #28]	; (80105f0 <disk_write+0x3c>)
 80105d4:	4413      	add	r3, r2
 80105d6:	7a18      	ldrb	r0, [r3, #8]
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	68b9      	ldr	r1, [r7, #8]
 80105de:	47a0      	blx	r4
 80105e0:	4603      	mov	r3, r0
 80105e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80105e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	371c      	adds	r7, #28
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd90      	pop	{r4, r7, pc}
 80105ee:	bf00      	nop
 80105f0:	2003c4c4 	.word	0x2003c4c4

080105f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	4603      	mov	r3, r0
 80105fc:	603a      	str	r2, [r7, #0]
 80105fe:	71fb      	strb	r3, [r7, #7]
 8010600:	460b      	mov	r3, r1
 8010602:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010604:	79fb      	ldrb	r3, [r7, #7]
 8010606:	4a09      	ldr	r2, [pc, #36]	; (801062c <disk_ioctl+0x38>)
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	4413      	add	r3, r2
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	691b      	ldr	r3, [r3, #16]
 8010610:	79fa      	ldrb	r2, [r7, #7]
 8010612:	4906      	ldr	r1, [pc, #24]	; (801062c <disk_ioctl+0x38>)
 8010614:	440a      	add	r2, r1
 8010616:	7a10      	ldrb	r0, [r2, #8]
 8010618:	79b9      	ldrb	r1, [r7, #6]
 801061a:	683a      	ldr	r2, [r7, #0]
 801061c:	4798      	blx	r3
 801061e:	4603      	mov	r3, r0
 8010620:	73fb      	strb	r3, [r7, #15]
  return res;
 8010622:	7bfb      	ldrb	r3, [r7, #15]
}
 8010624:	4618      	mov	r0, r3
 8010626:	3710      	adds	r7, #16
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	2003c4c4 	.word	0x2003c4c4

08010630 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010630:	b480      	push	{r7}
 8010632:	b085      	sub	sp, #20
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	3301      	adds	r3, #1
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010640:	89fb      	ldrh	r3, [r7, #14]
 8010642:	021b      	lsls	r3, r3, #8
 8010644:	b21a      	sxth	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	b21b      	sxth	r3, r3
 801064c:	4313      	orrs	r3, r2
 801064e:	b21b      	sxth	r3, r3
 8010650:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010652:	89fb      	ldrh	r3, [r7, #14]
}
 8010654:	4618      	mov	r0, r3
 8010656:	3714      	adds	r7, #20
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr

08010660 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010660:	b480      	push	{r7}
 8010662:	b085      	sub	sp, #20
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	3303      	adds	r3, #3
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	021b      	lsls	r3, r3, #8
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	3202      	adds	r2, #2
 8010678:	7812      	ldrb	r2, [r2, #0]
 801067a:	4313      	orrs	r3, r2
 801067c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	021b      	lsls	r3, r3, #8
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	3201      	adds	r2, #1
 8010686:	7812      	ldrb	r2, [r2, #0]
 8010688:	4313      	orrs	r3, r2
 801068a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	021b      	lsls	r3, r3, #8
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	7812      	ldrb	r2, [r2, #0]
 8010694:	4313      	orrs	r3, r2
 8010696:	60fb      	str	r3, [r7, #12]
	return rv;
 8010698:	68fb      	ldr	r3, [r7, #12]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3714      	adds	r7, #20
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr

080106a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80106a6:	b480      	push	{r7}
 80106a8:	b083      	sub	sp, #12
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
 80106ae:	460b      	mov	r3, r1
 80106b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	1c5a      	adds	r2, r3, #1
 80106b6:	607a      	str	r2, [r7, #4]
 80106b8:	887a      	ldrh	r2, [r7, #2]
 80106ba:	b2d2      	uxtb	r2, r2
 80106bc:	701a      	strb	r2, [r3, #0]
 80106be:	887b      	ldrh	r3, [r7, #2]
 80106c0:	0a1b      	lsrs	r3, r3, #8
 80106c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	1c5a      	adds	r2, r3, #1
 80106c8:	607a      	str	r2, [r7, #4]
 80106ca:	887a      	ldrh	r2, [r7, #2]
 80106cc:	b2d2      	uxtb	r2, r2
 80106ce:	701a      	strb	r2, [r3, #0]
}
 80106d0:	bf00      	nop
 80106d2:	370c      	adds	r7, #12
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr

080106dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	1c5a      	adds	r2, r3, #1
 80106ea:	607a      	str	r2, [r7, #4]
 80106ec:	683a      	ldr	r2, [r7, #0]
 80106ee:	b2d2      	uxtb	r2, r2
 80106f0:	701a      	strb	r2, [r3, #0]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	0a1b      	lsrs	r3, r3, #8
 80106f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	1c5a      	adds	r2, r3, #1
 80106fc:	607a      	str	r2, [r7, #4]
 80106fe:	683a      	ldr	r2, [r7, #0]
 8010700:	b2d2      	uxtb	r2, r2
 8010702:	701a      	strb	r2, [r3, #0]
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	0a1b      	lsrs	r3, r3, #8
 8010708:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	1c5a      	adds	r2, r3, #1
 801070e:	607a      	str	r2, [r7, #4]
 8010710:	683a      	ldr	r2, [r7, #0]
 8010712:	b2d2      	uxtb	r2, r2
 8010714:	701a      	strb	r2, [r3, #0]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	0a1b      	lsrs	r3, r3, #8
 801071a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	1c5a      	adds	r2, r3, #1
 8010720:	607a      	str	r2, [r7, #4]
 8010722:	683a      	ldr	r2, [r7, #0]
 8010724:	b2d2      	uxtb	r2, r2
 8010726:	701a      	strb	r2, [r3, #0]
}
 8010728:	bf00      	nop
 801072a:	370c      	adds	r7, #12
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010734:	b480      	push	{r7}
 8010736:	b087      	sub	sp, #28
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00d      	beq.n	801076a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801074e:	693a      	ldr	r2, [r7, #16]
 8010750:	1c53      	adds	r3, r2, #1
 8010752:	613b      	str	r3, [r7, #16]
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	1c59      	adds	r1, r3, #1
 8010758:	6179      	str	r1, [r7, #20]
 801075a:	7812      	ldrb	r2, [r2, #0]
 801075c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	3b01      	subs	r3, #1
 8010762:	607b      	str	r3, [r7, #4]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1f1      	bne.n	801074e <mem_cpy+0x1a>
	}
}
 801076a:	bf00      	nop
 801076c:	371c      	adds	r7, #28
 801076e:	46bd      	mov	sp, r7
 8010770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010774:	4770      	bx	lr

08010776 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010776:	b480      	push	{r7}
 8010778:	b087      	sub	sp, #28
 801077a:	af00      	add	r7, sp, #0
 801077c:	60f8      	str	r0, [r7, #12]
 801077e:	60b9      	str	r1, [r7, #8]
 8010780:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	1c5a      	adds	r2, r3, #1
 801078a:	617a      	str	r2, [r7, #20]
 801078c:	68ba      	ldr	r2, [r7, #8]
 801078e:	b2d2      	uxtb	r2, r2
 8010790:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	3b01      	subs	r3, #1
 8010796:	607b      	str	r3, [r7, #4]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d1f3      	bne.n	8010786 <mem_set+0x10>
}
 801079e:	bf00      	nop
 80107a0:	371c      	adds	r7, #28
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr

080107aa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80107aa:	b480      	push	{r7}
 80107ac:	b089      	sub	sp, #36	; 0x24
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	60f8      	str	r0, [r7, #12]
 80107b2:	60b9      	str	r1, [r7, #8]
 80107b4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	61fb      	str	r3, [r7, #28]
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	1c5a      	adds	r2, r3, #1
 80107c6:	61fa      	str	r2, [r7, #28]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	4619      	mov	r1, r3
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	1c5a      	adds	r2, r3, #1
 80107d0:	61ba      	str	r2, [r7, #24]
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	1acb      	subs	r3, r1, r3
 80107d6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	3b01      	subs	r3, #1
 80107dc:	607b      	str	r3, [r7, #4]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <mem_cmp+0x40>
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d0eb      	beq.n	80107c2 <mem_cmp+0x18>

	return r;
 80107ea:	697b      	ldr	r3, [r7, #20]
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3724      	adds	r7, #36	; 0x24
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010802:	e002      	b.n	801080a <chk_chr+0x12>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	3301      	adds	r3, #1
 8010808:	607b      	str	r3, [r7, #4]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d005      	beq.n	801081e <chk_chr+0x26>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	461a      	mov	r2, r3
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	4293      	cmp	r3, r2
 801081c:	d1f2      	bne.n	8010804 <chk_chr+0xc>
	return *str;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	781b      	ldrb	r3, [r3, #0]
}
 8010822:	4618      	mov	r0, r3
 8010824:	370c      	adds	r7, #12
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr
	...

08010830 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010830:	b480      	push	{r7}
 8010832:	b085      	sub	sp, #20
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801083a:	2300      	movs	r3, #0
 801083c:	60bb      	str	r3, [r7, #8]
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	60fb      	str	r3, [r7, #12]
 8010842:	e029      	b.n	8010898 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010844:	4a27      	ldr	r2, [pc, #156]	; (80108e4 <chk_lock+0xb4>)
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	011b      	lsls	r3, r3, #4
 801084a:	4413      	add	r3, r2
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d01d      	beq.n	801088e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010852:	4a24      	ldr	r2, [pc, #144]	; (80108e4 <chk_lock+0xb4>)
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	011b      	lsls	r3, r3, #4
 8010858:	4413      	add	r3, r2
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	429a      	cmp	r2, r3
 8010862:	d116      	bne.n	8010892 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010864:	4a1f      	ldr	r2, [pc, #124]	; (80108e4 <chk_lock+0xb4>)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	011b      	lsls	r3, r3, #4
 801086a:	4413      	add	r3, r2
 801086c:	3304      	adds	r3, #4
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010874:	429a      	cmp	r2, r3
 8010876:	d10c      	bne.n	8010892 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010878:	4a1a      	ldr	r2, [pc, #104]	; (80108e4 <chk_lock+0xb4>)
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	011b      	lsls	r3, r3, #4
 801087e:	4413      	add	r3, r2
 8010880:	3308      	adds	r3, #8
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010888:	429a      	cmp	r2, r3
 801088a:	d102      	bne.n	8010892 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801088c:	e007      	b.n	801089e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801088e:	2301      	movs	r3, #1
 8010890:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	3301      	adds	r3, #1
 8010896:	60fb      	str	r3, [r7, #12]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2b01      	cmp	r3, #1
 801089c:	d9d2      	bls.n	8010844 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2b02      	cmp	r3, #2
 80108a2:	d109      	bne.n	80108b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d102      	bne.n	80108b0 <chk_lock+0x80>
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d101      	bne.n	80108b4 <chk_lock+0x84>
 80108b0:	2300      	movs	r3, #0
 80108b2:	e010      	b.n	80108d6 <chk_lock+0xa6>
 80108b4:	2312      	movs	r3, #18
 80108b6:	e00e      	b.n	80108d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d108      	bne.n	80108d0 <chk_lock+0xa0>
 80108be:	4a09      	ldr	r2, [pc, #36]	; (80108e4 <chk_lock+0xb4>)
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	011b      	lsls	r3, r3, #4
 80108c4:	4413      	add	r3, r2
 80108c6:	330c      	adds	r3, #12
 80108c8:	881b      	ldrh	r3, [r3, #0]
 80108ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ce:	d101      	bne.n	80108d4 <chk_lock+0xa4>
 80108d0:	2310      	movs	r3, #16
 80108d2:	e000      	b.n	80108d6 <chk_lock+0xa6>
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	2003c4a4 	.word	0x2003c4a4

080108e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80108e8:	b480      	push	{r7}
 80108ea:	b083      	sub	sp, #12
 80108ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80108ee:	2300      	movs	r3, #0
 80108f0:	607b      	str	r3, [r7, #4]
 80108f2:	e002      	b.n	80108fa <enq_lock+0x12>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3301      	adds	r3, #1
 80108f8:	607b      	str	r3, [r7, #4]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d806      	bhi.n	801090e <enq_lock+0x26>
 8010900:	4a09      	ldr	r2, [pc, #36]	; (8010928 <enq_lock+0x40>)
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	011b      	lsls	r3, r3, #4
 8010906:	4413      	add	r3, r2
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d1f2      	bne.n	80108f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2b02      	cmp	r3, #2
 8010912:	bf14      	ite	ne
 8010914:	2301      	movne	r3, #1
 8010916:	2300      	moveq	r3, #0
 8010918:	b2db      	uxtb	r3, r3
}
 801091a:	4618      	mov	r0, r3
 801091c:	370c      	adds	r7, #12
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	2003c4a4 	.word	0x2003c4a4

0801092c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801092c:	b480      	push	{r7}
 801092e:	b085      	sub	sp, #20
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010936:	2300      	movs	r3, #0
 8010938:	60fb      	str	r3, [r7, #12]
 801093a:	e01f      	b.n	801097c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801093c:	4a41      	ldr	r2, [pc, #260]	; (8010a44 <inc_lock+0x118>)
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	011b      	lsls	r3, r3, #4
 8010942:	4413      	add	r3, r2
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	429a      	cmp	r2, r3
 801094c:	d113      	bne.n	8010976 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801094e:	4a3d      	ldr	r2, [pc, #244]	; (8010a44 <inc_lock+0x118>)
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	011b      	lsls	r3, r3, #4
 8010954:	4413      	add	r3, r2
 8010956:	3304      	adds	r3, #4
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801095e:	429a      	cmp	r2, r3
 8010960:	d109      	bne.n	8010976 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010962:	4a38      	ldr	r2, [pc, #224]	; (8010a44 <inc_lock+0x118>)
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	011b      	lsls	r3, r3, #4
 8010968:	4413      	add	r3, r2
 801096a:	3308      	adds	r3, #8
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010972:	429a      	cmp	r2, r3
 8010974:	d006      	beq.n	8010984 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	3301      	adds	r3, #1
 801097a:	60fb      	str	r3, [r7, #12]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2b01      	cmp	r3, #1
 8010980:	d9dc      	bls.n	801093c <inc_lock+0x10>
 8010982:	e000      	b.n	8010986 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010984:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2b02      	cmp	r3, #2
 801098a:	d132      	bne.n	80109f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801098c:	2300      	movs	r3, #0
 801098e:	60fb      	str	r3, [r7, #12]
 8010990:	e002      	b.n	8010998 <inc_lock+0x6c>
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	3301      	adds	r3, #1
 8010996:	60fb      	str	r3, [r7, #12]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b01      	cmp	r3, #1
 801099c:	d806      	bhi.n	80109ac <inc_lock+0x80>
 801099e:	4a29      	ldr	r2, [pc, #164]	; (8010a44 <inc_lock+0x118>)
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	011b      	lsls	r3, r3, #4
 80109a4:	4413      	add	r3, r2
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d1f2      	bne.n	8010992 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2b02      	cmp	r3, #2
 80109b0:	d101      	bne.n	80109b6 <inc_lock+0x8a>
 80109b2:	2300      	movs	r3, #0
 80109b4:	e040      	b.n	8010a38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	4922      	ldr	r1, [pc, #136]	; (8010a44 <inc_lock+0x118>)
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	011b      	lsls	r3, r3, #4
 80109c0:	440b      	add	r3, r1
 80109c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	689a      	ldr	r2, [r3, #8]
 80109c8:	491e      	ldr	r1, [pc, #120]	; (8010a44 <inc_lock+0x118>)
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	011b      	lsls	r3, r3, #4
 80109ce:	440b      	add	r3, r1
 80109d0:	3304      	adds	r3, #4
 80109d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	695a      	ldr	r2, [r3, #20]
 80109d8:	491a      	ldr	r1, [pc, #104]	; (8010a44 <inc_lock+0x118>)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	011b      	lsls	r3, r3, #4
 80109de:	440b      	add	r3, r1
 80109e0:	3308      	adds	r3, #8
 80109e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80109e4:	4a17      	ldr	r2, [pc, #92]	; (8010a44 <inc_lock+0x118>)
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	011b      	lsls	r3, r3, #4
 80109ea:	4413      	add	r3, r2
 80109ec:	330c      	adds	r3, #12
 80109ee:	2200      	movs	r2, #0
 80109f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d009      	beq.n	8010a0c <inc_lock+0xe0>
 80109f8:	4a12      	ldr	r2, [pc, #72]	; (8010a44 <inc_lock+0x118>)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	011b      	lsls	r3, r3, #4
 80109fe:	4413      	add	r3, r2
 8010a00:	330c      	adds	r3, #12
 8010a02:	881b      	ldrh	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d001      	beq.n	8010a0c <inc_lock+0xe0>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	e015      	b.n	8010a38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d108      	bne.n	8010a24 <inc_lock+0xf8>
 8010a12:	4a0c      	ldr	r2, [pc, #48]	; (8010a44 <inc_lock+0x118>)
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	011b      	lsls	r3, r3, #4
 8010a18:	4413      	add	r3, r2
 8010a1a:	330c      	adds	r3, #12
 8010a1c:	881b      	ldrh	r3, [r3, #0]
 8010a1e:	3301      	adds	r3, #1
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	e001      	b.n	8010a28 <inc_lock+0xfc>
 8010a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a28:	4906      	ldr	r1, [pc, #24]	; (8010a44 <inc_lock+0x118>)
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	011b      	lsls	r3, r3, #4
 8010a2e:	440b      	add	r3, r1
 8010a30:	330c      	adds	r3, #12
 8010a32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	3301      	adds	r3, #1
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3714      	adds	r7, #20
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr
 8010a44:	2003c4a4 	.word	0x2003c4a4

08010a48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	3b01      	subs	r3, #1
 8010a54:	607b      	str	r3, [r7, #4]
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d825      	bhi.n	8010aa8 <dec_lock+0x60>
		n = Files[i].ctr;
 8010a5c:	4a17      	ldr	r2, [pc, #92]	; (8010abc <dec_lock+0x74>)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	011b      	lsls	r3, r3, #4
 8010a62:	4413      	add	r3, r2
 8010a64:	330c      	adds	r3, #12
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010a6a:	89fb      	ldrh	r3, [r7, #14]
 8010a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a70:	d101      	bne.n	8010a76 <dec_lock+0x2e>
 8010a72:	2300      	movs	r3, #0
 8010a74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010a76:	89fb      	ldrh	r3, [r7, #14]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d002      	beq.n	8010a82 <dec_lock+0x3a>
 8010a7c:	89fb      	ldrh	r3, [r7, #14]
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010a82:	4a0e      	ldr	r2, [pc, #56]	; (8010abc <dec_lock+0x74>)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	011b      	lsls	r3, r3, #4
 8010a88:	4413      	add	r3, r2
 8010a8a:	330c      	adds	r3, #12
 8010a8c:	89fa      	ldrh	r2, [r7, #14]
 8010a8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010a90:	89fb      	ldrh	r3, [r7, #14]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d105      	bne.n	8010aa2 <dec_lock+0x5a>
 8010a96:	4a09      	ldr	r2, [pc, #36]	; (8010abc <dec_lock+0x74>)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	011b      	lsls	r3, r3, #4
 8010a9c:	4413      	add	r3, r2
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	737b      	strb	r3, [r7, #13]
 8010aa6:	e001      	b.n	8010aac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010aa8:	2302      	movs	r3, #2
 8010aaa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010aac:	7b7b      	ldrb	r3, [r7, #13]
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3714      	adds	r7, #20
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr
 8010aba:	bf00      	nop
 8010abc:	2003c4a4 	.word	0x2003c4a4

08010ac0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b085      	sub	sp, #20
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010ac8:	2300      	movs	r3, #0
 8010aca:	60fb      	str	r3, [r7, #12]
 8010acc:	e010      	b.n	8010af0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010ace:	4a0d      	ldr	r2, [pc, #52]	; (8010b04 <clear_lock+0x44>)
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	011b      	lsls	r3, r3, #4
 8010ad4:	4413      	add	r3, r2
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d105      	bne.n	8010aea <clear_lock+0x2a>
 8010ade:	4a09      	ldr	r2, [pc, #36]	; (8010b04 <clear_lock+0x44>)
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	011b      	lsls	r3, r3, #4
 8010ae4:	4413      	add	r3, r2
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	3301      	adds	r3, #1
 8010aee:	60fb      	str	r3, [r7, #12]
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d9eb      	bls.n	8010ace <clear_lock+0xe>
	}
}
 8010af6:	bf00      	nop
 8010af8:	3714      	adds	r7, #20
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	2003c4a4 	.word	0x2003c4a4

08010b08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b086      	sub	sp, #24
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010b10:	2300      	movs	r3, #0
 8010b12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	78db      	ldrb	r3, [r3, #3]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d034      	beq.n	8010b86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	7858      	ldrb	r0, [r3, #1]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	697a      	ldr	r2, [r7, #20]
 8010b30:	f7ff fd40 	bl	80105b4 <disk_write>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d002      	beq.n	8010b40 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	73fb      	strb	r3, [r7, #15]
 8010b3e:	e022      	b.n	8010b86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b4a:	697a      	ldr	r2, [r7, #20]
 8010b4c:	1ad2      	subs	r2, r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6a1b      	ldr	r3, [r3, #32]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d217      	bcs.n	8010b86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	789b      	ldrb	r3, [r3, #2]
 8010b5a:	613b      	str	r3, [r7, #16]
 8010b5c:	e010      	b.n	8010b80 <sync_window+0x78>
					wsect += fs->fsize;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6a1b      	ldr	r3, [r3, #32]
 8010b62:	697a      	ldr	r2, [r7, #20]
 8010b64:	4413      	add	r3, r2
 8010b66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	7858      	ldrb	r0, [r3, #1]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b72:	2301      	movs	r3, #1
 8010b74:	697a      	ldr	r2, [r7, #20]
 8010b76:	f7ff fd1d 	bl	80105b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	613b      	str	r3, [r7, #16]
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d8eb      	bhi.n	8010b5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3718      	adds	r7, #24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ba2:	683a      	ldr	r2, [r7, #0]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d01b      	beq.n	8010be0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f7ff ffad 	bl	8010b08 <sync_window>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010bb2:	7bfb      	ldrb	r3, [r7, #15]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d113      	bne.n	8010be0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	7858      	ldrb	r0, [r3, #1]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	683a      	ldr	r2, [r7, #0]
 8010bc6:	f7ff fcd5 	bl	8010574 <disk_read>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d004      	beq.n	8010bda <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bd4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	683a      	ldr	r2, [r7, #0]
 8010bde:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3710      	adds	r7, #16
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
	...

08010bec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7ff ff87 	bl	8010b08 <sync_window>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010bfe:	7bfb      	ldrb	r3, [r7, #15]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d159      	bne.n	8010cb8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	2b03      	cmp	r3, #3
 8010c0a:	d149      	bne.n	8010ca0 <sync_fs+0xb4>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	791b      	ldrb	r3, [r3, #4]
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d145      	bne.n	8010ca0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	899b      	ldrh	r3, [r3, #12]
 8010c1e:	461a      	mov	r2, r3
 8010c20:	2100      	movs	r1, #0
 8010c22:	f7ff fda8 	bl	8010776 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	3338      	adds	r3, #56	; 0x38
 8010c2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010c2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7ff fd37 	bl	80106a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	3338      	adds	r3, #56	; 0x38
 8010c3c:	4921      	ldr	r1, [pc, #132]	; (8010cc4 <sync_fs+0xd8>)
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7ff fd4c 	bl	80106dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	3338      	adds	r3, #56	; 0x38
 8010c48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010c4c:	491e      	ldr	r1, [pc, #120]	; (8010cc8 <sync_fs+0xdc>)
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7ff fd44 	bl	80106dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	3338      	adds	r3, #56	; 0x38
 8010c58:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	695b      	ldr	r3, [r3, #20]
 8010c60:	4619      	mov	r1, r3
 8010c62:	4610      	mov	r0, r2
 8010c64:	f7ff fd3a 	bl	80106dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	3338      	adds	r3, #56	; 0x38
 8010c6c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	691b      	ldr	r3, [r3, #16]
 8010c74:	4619      	mov	r1, r3
 8010c76:	4610      	mov	r0, r2
 8010c78:	f7ff fd30 	bl	80106dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c80:	1c5a      	adds	r2, r3, #1
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	7858      	ldrb	r0, [r3, #1]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c94:	2301      	movs	r3, #1
 8010c96:	f7ff fc8d 	bl	80105b4 <disk_write>
			fs->fsi_flag = 0;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	785b      	ldrb	r3, [r3, #1]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7ff fca3 	bl	80105f4 <disk_ioctl>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <sync_fs+0xcc>
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3710      	adds	r7, #16
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	41615252 	.word	0x41615252
 8010cc8:	61417272 	.word	0x61417272

08010ccc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	3b02      	subs	r3, #2
 8010cda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	69db      	ldr	r3, [r3, #28]
 8010ce0:	3b02      	subs	r3, #2
 8010ce2:	683a      	ldr	r2, [r7, #0]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d301      	bcc.n	8010cec <clust2sect+0x20>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	e008      	b.n	8010cfe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	895b      	ldrh	r3, [r3, #10]
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	fb03 f202 	mul.w	r2, r3, r2
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cfc:	4413      	add	r3, r2
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	370c      	adds	r7, #12
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr

08010d0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b086      	sub	sp, #24
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
 8010d12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d904      	bls.n	8010d2a <get_fat+0x20>
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	69db      	ldr	r3, [r3, #28]
 8010d24:	683a      	ldr	r2, [r7, #0]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d302      	bcc.n	8010d30 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	617b      	str	r3, [r7, #20]
 8010d2e:	e0b7      	b.n	8010ea0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010d30:	f04f 33ff 	mov.w	r3, #4294967295
 8010d34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	2b02      	cmp	r3, #2
 8010d3c:	d05a      	beq.n	8010df4 <get_fat+0xea>
 8010d3e:	2b03      	cmp	r3, #3
 8010d40:	d07d      	beq.n	8010e3e <get_fat+0x134>
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	f040 80a2 	bne.w	8010e8c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	60fb      	str	r3, [r7, #12]
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	085b      	lsrs	r3, r3, #1
 8010d50:	68fa      	ldr	r2, [r7, #12]
 8010d52:	4413      	add	r3, r2
 8010d54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	899b      	ldrh	r3, [r3, #12]
 8010d5e:	4619      	mov	r1, r3
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d66:	4413      	add	r3, r2
 8010d68:	4619      	mov	r1, r3
 8010d6a:	6938      	ldr	r0, [r7, #16]
 8010d6c:	f7ff ff10 	bl	8010b90 <move_window>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	f040 808d 	bne.w	8010e92 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	1c5a      	adds	r2, r3, #1
 8010d7c:	60fa      	str	r2, [r7, #12]
 8010d7e:	693a      	ldr	r2, [r7, #16]
 8010d80:	8992      	ldrh	r2, [r2, #12]
 8010d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d86:	fb02 f201 	mul.w	r2, r2, r1
 8010d8a:	1a9b      	subs	r3, r3, r2
 8010d8c:	693a      	ldr	r2, [r7, #16]
 8010d8e:	4413      	add	r3, r2
 8010d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010d94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	899b      	ldrh	r3, [r3, #12]
 8010d9e:	4619      	mov	r1, r3
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010da6:	4413      	add	r3, r2
 8010da8:	4619      	mov	r1, r3
 8010daa:	6938      	ldr	r0, [r7, #16]
 8010dac:	f7ff fef0 	bl	8010b90 <move_window>
 8010db0:	4603      	mov	r3, r0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d16f      	bne.n	8010e96 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	899b      	ldrh	r3, [r3, #12]
 8010dba:	461a      	mov	r2, r3
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8010dc2:	fb02 f201 	mul.w	r2, r2, r1
 8010dc6:	1a9b      	subs	r3, r3, r2
 8010dc8:	693a      	ldr	r2, [r7, #16]
 8010dca:	4413      	add	r3, r2
 8010dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010dd0:	021b      	lsls	r3, r3, #8
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	f003 0301 	and.w	r3, r3, #1
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d002      	beq.n	8010dea <get_fat+0xe0>
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	091b      	lsrs	r3, r3, #4
 8010de8:	e002      	b.n	8010df0 <get_fat+0xe6>
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010df0:	617b      	str	r3, [r7, #20]
			break;
 8010df2:	e055      	b.n	8010ea0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	899b      	ldrh	r3, [r3, #12]
 8010dfc:	085b      	lsrs	r3, r3, #1
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	4619      	mov	r1, r3
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e08:	4413      	add	r3, r2
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	6938      	ldr	r0, [r7, #16]
 8010e0e:	f7ff febf 	bl	8010b90 <move_window>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d140      	bne.n	8010e9a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	005b      	lsls	r3, r3, #1
 8010e22:	693a      	ldr	r2, [r7, #16]
 8010e24:	8992      	ldrh	r2, [r2, #12]
 8010e26:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e2a:	fb02 f200 	mul.w	r2, r2, r0
 8010e2e:	1a9b      	subs	r3, r3, r2
 8010e30:	440b      	add	r3, r1
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7ff fbfc 	bl	8010630 <ld_word>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	617b      	str	r3, [r7, #20]
			break;
 8010e3c:	e030      	b.n	8010ea0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	899b      	ldrh	r3, [r3, #12]
 8010e46:	089b      	lsrs	r3, r3, #2
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e52:	4413      	add	r3, r2
 8010e54:	4619      	mov	r1, r3
 8010e56:	6938      	ldr	r0, [r7, #16]
 8010e58:	f7ff fe9a 	bl	8010b90 <move_window>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d11d      	bne.n	8010e9e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	693a      	ldr	r2, [r7, #16]
 8010e6e:	8992      	ldrh	r2, [r2, #12]
 8010e70:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e74:	fb02 f200 	mul.w	r2, r2, r0
 8010e78:	1a9b      	subs	r3, r3, r2
 8010e7a:	440b      	add	r3, r1
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7ff fbef 	bl	8010660 <ld_dword>
 8010e82:	4603      	mov	r3, r0
 8010e84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010e88:	617b      	str	r3, [r7, #20]
			break;
 8010e8a:	e009      	b.n	8010ea0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	617b      	str	r3, [r7, #20]
 8010e90:	e006      	b.n	8010ea0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e92:	bf00      	nop
 8010e94:	e004      	b.n	8010ea0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e96:	bf00      	nop
 8010e98:	e002      	b.n	8010ea0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010e9a:	bf00      	nop
 8010e9c:	e000      	b.n	8010ea0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e9e:	bf00      	nop
		}
	}

	return val;
 8010ea0:	697b      	ldr	r3, [r7, #20]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3718      	adds	r7, #24
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010eaa:	b590      	push	{r4, r7, lr}
 8010eac:	b089      	sub	sp, #36	; 0x24
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	60f8      	str	r0, [r7, #12]
 8010eb2:	60b9      	str	r1, [r7, #8]
 8010eb4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010eb6:	2302      	movs	r3, #2
 8010eb8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	f240 8106 	bls.w	80110ce <put_fat+0x224>
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	69db      	ldr	r3, [r3, #28]
 8010ec6:	68ba      	ldr	r2, [r7, #8]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	f080 8100 	bcs.w	80110ce <put_fat+0x224>
		switch (fs->fs_type) {
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	2b02      	cmp	r3, #2
 8010ed4:	f000 8088 	beq.w	8010fe8 <put_fat+0x13e>
 8010ed8:	2b03      	cmp	r3, #3
 8010eda:	f000 80b0 	beq.w	801103e <put_fat+0x194>
 8010ede:	2b01      	cmp	r3, #1
 8010ee0:	f040 80f5 	bne.w	80110ce <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	61bb      	str	r3, [r7, #24]
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	085b      	lsrs	r3, r3, #1
 8010eec:	69ba      	ldr	r2, [r7, #24]
 8010eee:	4413      	add	r3, r2
 8010ef0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	899b      	ldrh	r3, [r3, #12]
 8010efa:	4619      	mov	r1, r3
 8010efc:	69bb      	ldr	r3, [r7, #24]
 8010efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f02:	4413      	add	r3, r2
 8010f04:	4619      	mov	r1, r3
 8010f06:	68f8      	ldr	r0, [r7, #12]
 8010f08:	f7ff fe42 	bl	8010b90 <move_window>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f10:	7ffb      	ldrb	r3, [r7, #31]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	f040 80d4 	bne.w	80110c0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f1e:	69bb      	ldr	r3, [r7, #24]
 8010f20:	1c5a      	adds	r2, r3, #1
 8010f22:	61ba      	str	r2, [r7, #24]
 8010f24:	68fa      	ldr	r2, [r7, #12]
 8010f26:	8992      	ldrh	r2, [r2, #12]
 8010f28:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f2c:	fb02 f200 	mul.w	r2, r2, r0
 8010f30:	1a9b      	subs	r3, r3, r2
 8010f32:	440b      	add	r3, r1
 8010f34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	f003 0301 	and.w	r3, r3, #1
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d00d      	beq.n	8010f5c <put_fat+0xb2>
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	b25b      	sxtb	r3, r3
 8010f46:	f003 030f 	and.w	r3, r3, #15
 8010f4a:	b25a      	sxtb	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	011b      	lsls	r3, r3, #4
 8010f52:	b25b      	sxtb	r3, r3
 8010f54:	4313      	orrs	r3, r2
 8010f56:	b25b      	sxtb	r3, r3
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	e001      	b.n	8010f60 <put_fat+0xb6>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	697a      	ldr	r2, [r7, #20]
 8010f62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2201      	movs	r2, #1
 8010f68:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	899b      	ldrh	r3, [r3, #12]
 8010f72:	4619      	mov	r1, r3
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f7a:	4413      	add	r3, r2
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	f7ff fe06 	bl	8010b90 <move_window>
 8010f84:	4603      	mov	r3, r0
 8010f86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f88:	7ffb      	ldrb	r3, [r7, #31]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	f040 809a 	bne.w	80110c4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	899b      	ldrh	r3, [r3, #12]
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	69bb      	ldr	r3, [r7, #24]
 8010f9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fa2:	fb02 f200 	mul.w	r2, r2, r0
 8010fa6:	1a9b      	subs	r3, r3, r2
 8010fa8:	440b      	add	r3, r1
 8010faa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	f003 0301 	and.w	r3, r3, #1
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d003      	beq.n	8010fbe <put_fat+0x114>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	091b      	lsrs	r3, r3, #4
 8010fba:	b2db      	uxtb	r3, r3
 8010fbc:	e00e      	b.n	8010fdc <put_fat+0x132>
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	b25b      	sxtb	r3, r3
 8010fc4:	f023 030f 	bic.w	r3, r3, #15
 8010fc8:	b25a      	sxtb	r2, r3
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	0a1b      	lsrs	r3, r3, #8
 8010fce:	b25b      	sxtb	r3, r3
 8010fd0:	f003 030f 	and.w	r3, r3, #15
 8010fd4:	b25b      	sxtb	r3, r3
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	b25b      	sxtb	r3, r3
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	697a      	ldr	r2, [r7, #20]
 8010fde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	70da      	strb	r2, [r3, #3]
			break;
 8010fe6:	e072      	b.n	80110ce <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	899b      	ldrh	r3, [r3, #12]
 8010ff0:	085b      	lsrs	r3, r3, #1
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ffc:	4413      	add	r3, r2
 8010ffe:	4619      	mov	r1, r3
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f7ff fdc5 	bl	8010b90 <move_window>
 8011006:	4603      	mov	r3, r0
 8011008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801100a:	7ffb      	ldrb	r3, [r7, #31]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d15b      	bne.n	80110c8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	005b      	lsls	r3, r3, #1
 801101a:	68fa      	ldr	r2, [r7, #12]
 801101c:	8992      	ldrh	r2, [r2, #12]
 801101e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011022:	fb02 f200 	mul.w	r2, r2, r0
 8011026:	1a9b      	subs	r3, r3, r2
 8011028:	440b      	add	r3, r1
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	b292      	uxth	r2, r2
 801102e:	4611      	mov	r1, r2
 8011030:	4618      	mov	r0, r3
 8011032:	f7ff fb38 	bl	80106a6 <st_word>
			fs->wflag = 1;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2201      	movs	r2, #1
 801103a:	70da      	strb	r2, [r3, #3]
			break;
 801103c:	e047      	b.n	80110ce <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	899b      	ldrh	r3, [r3, #12]
 8011046:	089b      	lsrs	r3, r3, #2
 8011048:	b29b      	uxth	r3, r3
 801104a:	4619      	mov	r1, r3
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011052:	4413      	add	r3, r2
 8011054:	4619      	mov	r1, r3
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f7ff fd9a 	bl	8010b90 <move_window>
 801105c:	4603      	mov	r3, r0
 801105e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011060:	7ffb      	ldrb	r3, [r7, #31]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d132      	bne.n	80110cc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	009b      	lsls	r3, r3, #2
 8011076:	68fa      	ldr	r2, [r7, #12]
 8011078:	8992      	ldrh	r2, [r2, #12]
 801107a:	fbb3 f0f2 	udiv	r0, r3, r2
 801107e:	fb02 f200 	mul.w	r2, r2, r0
 8011082:	1a9b      	subs	r3, r3, r2
 8011084:	440b      	add	r3, r1
 8011086:	4618      	mov	r0, r3
 8011088:	f7ff faea 	bl	8010660 <ld_dword>
 801108c:	4603      	mov	r3, r0
 801108e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011092:	4323      	orrs	r3, r4
 8011094:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	68fa      	ldr	r2, [r7, #12]
 80110a2:	8992      	ldrh	r2, [r2, #12]
 80110a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80110a8:	fb02 f200 	mul.w	r2, r2, r0
 80110ac:	1a9b      	subs	r3, r3, r2
 80110ae:	440b      	add	r3, r1
 80110b0:	6879      	ldr	r1, [r7, #4]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7ff fb12 	bl	80106dc <st_dword>
			fs->wflag = 1;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2201      	movs	r2, #1
 80110bc:	70da      	strb	r2, [r3, #3]
			break;
 80110be:	e006      	b.n	80110ce <put_fat+0x224>
			if (res != FR_OK) break;
 80110c0:	bf00      	nop
 80110c2:	e004      	b.n	80110ce <put_fat+0x224>
			if (res != FR_OK) break;
 80110c4:	bf00      	nop
 80110c6:	e002      	b.n	80110ce <put_fat+0x224>
			if (res != FR_OK) break;
 80110c8:	bf00      	nop
 80110ca:	e000      	b.n	80110ce <put_fat+0x224>
			if (res != FR_OK) break;
 80110cc:	bf00      	nop
		}
	}
	return res;
 80110ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3724      	adds	r7, #36	; 0x24
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd90      	pop	{r4, r7, pc}

080110d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b088      	sub	sp, #32
 80110dc:	af00      	add	r7, sp, #0
 80110de:	60f8      	str	r0, [r7, #12]
 80110e0:	60b9      	str	r1, [r7, #8]
 80110e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80110e4:	2300      	movs	r3, #0
 80110e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d904      	bls.n	80110fe <remove_chain+0x26>
 80110f4:	69bb      	ldr	r3, [r7, #24]
 80110f6:	69db      	ldr	r3, [r3, #28]
 80110f8:	68ba      	ldr	r2, [r7, #8]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d301      	bcc.n	8011102 <remove_chain+0x2a>
 80110fe:	2302      	movs	r3, #2
 8011100:	e04b      	b.n	801119a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d00c      	beq.n	8011122 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011108:	f04f 32ff 	mov.w	r2, #4294967295
 801110c:	6879      	ldr	r1, [r7, #4]
 801110e:	69b8      	ldr	r0, [r7, #24]
 8011110:	f7ff fecb 	bl	8010eaa <put_fat>
 8011114:	4603      	mov	r3, r0
 8011116:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011118:	7ffb      	ldrb	r3, [r7, #31]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d001      	beq.n	8011122 <remove_chain+0x4a>
 801111e:	7ffb      	ldrb	r3, [r7, #31]
 8011120:	e03b      	b.n	801119a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011122:	68b9      	ldr	r1, [r7, #8]
 8011124:	68f8      	ldr	r0, [r7, #12]
 8011126:	f7ff fdf0 	bl	8010d0a <get_fat>
 801112a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d031      	beq.n	8011196 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d101      	bne.n	801113c <remove_chain+0x64>
 8011138:	2302      	movs	r3, #2
 801113a:	e02e      	b.n	801119a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011142:	d101      	bne.n	8011148 <remove_chain+0x70>
 8011144:	2301      	movs	r3, #1
 8011146:	e028      	b.n	801119a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011148:	2200      	movs	r2, #0
 801114a:	68b9      	ldr	r1, [r7, #8]
 801114c:	69b8      	ldr	r0, [r7, #24]
 801114e:	f7ff feac 	bl	8010eaa <put_fat>
 8011152:	4603      	mov	r3, r0
 8011154:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011156:	7ffb      	ldrb	r3, [r7, #31]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d001      	beq.n	8011160 <remove_chain+0x88>
 801115c:	7ffb      	ldrb	r3, [r7, #31]
 801115e:	e01c      	b.n	801119a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011160:	69bb      	ldr	r3, [r7, #24]
 8011162:	695a      	ldr	r2, [r3, #20]
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	69db      	ldr	r3, [r3, #28]
 8011168:	3b02      	subs	r3, #2
 801116a:	429a      	cmp	r2, r3
 801116c:	d20b      	bcs.n	8011186 <remove_chain+0xae>
			fs->free_clst++;
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	695b      	ldr	r3, [r3, #20]
 8011172:	1c5a      	adds	r2, r3, #1
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011178:	69bb      	ldr	r3, [r7, #24]
 801117a:	791b      	ldrb	r3, [r3, #4]
 801117c:	f043 0301 	orr.w	r3, r3, #1
 8011180:	b2da      	uxtb	r2, r3
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	69db      	ldr	r3, [r3, #28]
 801118e:	68ba      	ldr	r2, [r7, #8]
 8011190:	429a      	cmp	r2, r3
 8011192:	d3c6      	bcc.n	8011122 <remove_chain+0x4a>
 8011194:	e000      	b.n	8011198 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011196:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011198:	2300      	movs	r3, #0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3720      	adds	r7, #32
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b088      	sub	sp, #32
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	6078      	str	r0, [r7, #4]
 80111aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d10d      	bne.n	80111d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	691b      	ldr	r3, [r3, #16]
 80111bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d004      	beq.n	80111ce <create_chain+0x2c>
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	69db      	ldr	r3, [r3, #28]
 80111c8:	69ba      	ldr	r2, [r7, #24]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d31b      	bcc.n	8011206 <create_chain+0x64>
 80111ce:	2301      	movs	r3, #1
 80111d0:	61bb      	str	r3, [r7, #24]
 80111d2:	e018      	b.n	8011206 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80111d4:	6839      	ldr	r1, [r7, #0]
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff fd97 	bl	8010d0a <get_fat>
 80111dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d801      	bhi.n	80111e8 <create_chain+0x46>
 80111e4:	2301      	movs	r3, #1
 80111e6:	e070      	b.n	80112ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ee:	d101      	bne.n	80111f4 <create_chain+0x52>
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	e06a      	b.n	80112ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	69db      	ldr	r3, [r3, #28]
 80111f8:	68fa      	ldr	r2, [r7, #12]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d201      	bcs.n	8011202 <create_chain+0x60>
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	e063      	b.n	80112ca <create_chain+0x128>
		scl = clst;
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	3301      	adds	r3, #1
 801120e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	69db      	ldr	r3, [r3, #28]
 8011214:	69fa      	ldr	r2, [r7, #28]
 8011216:	429a      	cmp	r2, r3
 8011218:	d307      	bcc.n	801122a <create_chain+0x88>
				ncl = 2;
 801121a:	2302      	movs	r3, #2
 801121c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801121e:	69fa      	ldr	r2, [r7, #28]
 8011220:	69bb      	ldr	r3, [r7, #24]
 8011222:	429a      	cmp	r2, r3
 8011224:	d901      	bls.n	801122a <create_chain+0x88>
 8011226:	2300      	movs	r3, #0
 8011228:	e04f      	b.n	80112ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801122a:	69f9      	ldr	r1, [r7, #28]
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f7ff fd6c 	bl	8010d0a <get_fat>
 8011232:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00e      	beq.n	8011258 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2b01      	cmp	r3, #1
 801123e:	d003      	beq.n	8011248 <create_chain+0xa6>
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011246:	d101      	bne.n	801124c <create_chain+0xaa>
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	e03e      	b.n	80112ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801124c:	69fa      	ldr	r2, [r7, #28]
 801124e:	69bb      	ldr	r3, [r7, #24]
 8011250:	429a      	cmp	r2, r3
 8011252:	d1da      	bne.n	801120a <create_chain+0x68>
 8011254:	2300      	movs	r3, #0
 8011256:	e038      	b.n	80112ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011258:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801125a:	f04f 32ff 	mov.w	r2, #4294967295
 801125e:	69f9      	ldr	r1, [r7, #28]
 8011260:	6938      	ldr	r0, [r7, #16]
 8011262:	f7ff fe22 	bl	8010eaa <put_fat>
 8011266:	4603      	mov	r3, r0
 8011268:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801126a:	7dfb      	ldrb	r3, [r7, #23]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d109      	bne.n	8011284 <create_chain+0xe2>
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d006      	beq.n	8011284 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011276:	69fa      	ldr	r2, [r7, #28]
 8011278:	6839      	ldr	r1, [r7, #0]
 801127a:	6938      	ldr	r0, [r7, #16]
 801127c:	f7ff fe15 	bl	8010eaa <put_fat>
 8011280:	4603      	mov	r3, r0
 8011282:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011284:	7dfb      	ldrb	r3, [r7, #23]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d116      	bne.n	80112b8 <create_chain+0x116>
		fs->last_clst = ncl;
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	69fa      	ldr	r2, [r7, #28]
 801128e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	695a      	ldr	r2, [r3, #20]
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	69db      	ldr	r3, [r3, #28]
 8011298:	3b02      	subs	r3, #2
 801129a:	429a      	cmp	r2, r3
 801129c:	d804      	bhi.n	80112a8 <create_chain+0x106>
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	695b      	ldr	r3, [r3, #20]
 80112a2:	1e5a      	subs	r2, r3, #1
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	791b      	ldrb	r3, [r3, #4]
 80112ac:	f043 0301 	orr.w	r3, r3, #1
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	711a      	strb	r2, [r3, #4]
 80112b6:	e007      	b.n	80112c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80112b8:	7dfb      	ldrb	r3, [r7, #23]
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d102      	bne.n	80112c4 <create_chain+0x122>
 80112be:	f04f 33ff 	mov.w	r3, #4294967295
 80112c2:	e000      	b.n	80112c6 <create_chain+0x124>
 80112c4:	2301      	movs	r3, #1
 80112c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80112c8:	69fb      	ldr	r3, [r7, #28]
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3720      	adds	r7, #32
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80112d2:	b480      	push	{r7}
 80112d4:	b087      	sub	sp, #28
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
 80112da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e6:	3304      	adds	r3, #4
 80112e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	899b      	ldrh	r3, [r3, #12]
 80112ee:	461a      	mov	r2, r3
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80112f6:	68fa      	ldr	r2, [r7, #12]
 80112f8:	8952      	ldrh	r2, [r2, #10]
 80112fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80112fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	1d1a      	adds	r2, r3, #4
 8011304:	613a      	str	r2, [r7, #16]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d101      	bne.n	8011314 <clmt_clust+0x42>
 8011310:	2300      	movs	r3, #0
 8011312:	e010      	b.n	8011336 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011314:	697a      	ldr	r2, [r7, #20]
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	429a      	cmp	r2, r3
 801131a:	d307      	bcc.n	801132c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801131c:	697a      	ldr	r2, [r7, #20]
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	617b      	str	r3, [r7, #20]
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	3304      	adds	r3, #4
 8011328:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801132a:	e7e9      	b.n	8011300 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801132c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	4413      	add	r3, r2
}
 8011336:	4618      	mov	r0, r3
 8011338:	371c      	adds	r7, #28
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr

08011342 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011342:	b580      	push	{r7, lr}
 8011344:	b086      	sub	sp, #24
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
 801134a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011358:	d204      	bcs.n	8011364 <dir_sdi+0x22>
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	f003 031f 	and.w	r3, r3, #31
 8011360:	2b00      	cmp	r3, #0
 8011362:	d001      	beq.n	8011368 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011364:	2302      	movs	r3, #2
 8011366:	e071      	b.n	801144c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	683a      	ldr	r2, [r7, #0]
 801136c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d106      	bne.n	8011388 <dir_sdi+0x46>
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	2b02      	cmp	r3, #2
 8011380:	d902      	bls.n	8011388 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011386:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d10c      	bne.n	80113a8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	095b      	lsrs	r3, r3, #5
 8011392:	693a      	ldr	r2, [r7, #16]
 8011394:	8912      	ldrh	r2, [r2, #8]
 8011396:	4293      	cmp	r3, r2
 8011398:	d301      	bcc.n	801139e <dir_sdi+0x5c>
 801139a:	2302      	movs	r3, #2
 801139c:	e056      	b.n	801144c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	61da      	str	r2, [r3, #28]
 80113a6:	e02d      	b.n	8011404 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	895b      	ldrh	r3, [r3, #10]
 80113ac:	461a      	mov	r2, r3
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	899b      	ldrh	r3, [r3, #12]
 80113b2:	fb03 f302 	mul.w	r3, r3, r2
 80113b6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80113b8:	e019      	b.n	80113ee <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6979      	ldr	r1, [r7, #20]
 80113be:	4618      	mov	r0, r3
 80113c0:	f7ff fca3 	bl	8010d0a <get_fat>
 80113c4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113cc:	d101      	bne.n	80113d2 <dir_sdi+0x90>
 80113ce:	2301      	movs	r3, #1
 80113d0:	e03c      	b.n	801144c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d904      	bls.n	80113e2 <dir_sdi+0xa0>
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	69db      	ldr	r3, [r3, #28]
 80113dc:	697a      	ldr	r2, [r7, #20]
 80113de:	429a      	cmp	r2, r3
 80113e0:	d301      	bcc.n	80113e6 <dir_sdi+0xa4>
 80113e2:	2302      	movs	r3, #2
 80113e4:	e032      	b.n	801144c <dir_sdi+0x10a>
			ofs -= csz;
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	1ad3      	subs	r3, r2, r3
 80113ec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80113ee:	683a      	ldr	r2, [r7, #0]
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d2e1      	bcs.n	80113ba <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80113f6:	6979      	ldr	r1, [r7, #20]
 80113f8:	6938      	ldr	r0, [r7, #16]
 80113fa:	f7ff fc67 	bl	8010ccc <clust2sect>
 80113fe:	4602      	mov	r2, r0
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	697a      	ldr	r2, [r7, #20]
 8011408:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	69db      	ldr	r3, [r3, #28]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d101      	bne.n	8011416 <dir_sdi+0xd4>
 8011412:	2302      	movs	r3, #2
 8011414:	e01a      	b.n	801144c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	69da      	ldr	r2, [r3, #28]
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	899b      	ldrh	r3, [r3, #12]
 801141e:	4619      	mov	r1, r3
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	fbb3 f3f1 	udiv	r3, r3, r1
 8011426:	441a      	add	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	899b      	ldrh	r3, [r3, #12]
 8011436:	461a      	mov	r2, r3
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	fbb3 f0f2 	udiv	r0, r3, r2
 801143e:	fb02 f200 	mul.w	r2, r2, r0
 8011442:	1a9b      	subs	r3, r3, r2
 8011444:	18ca      	adds	r2, r1, r3
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3718      	adds	r7, #24
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b086      	sub	sp, #24
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	695b      	ldr	r3, [r3, #20]
 8011468:	3320      	adds	r3, #32
 801146a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	69db      	ldr	r3, [r3, #28]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d003      	beq.n	801147c <dir_next+0x28>
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801147a:	d301      	bcc.n	8011480 <dir_next+0x2c>
 801147c:	2304      	movs	r3, #4
 801147e:	e0bb      	b.n	80115f8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	899b      	ldrh	r3, [r3, #12]
 8011484:	461a      	mov	r2, r3
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	fbb3 f1f2 	udiv	r1, r3, r2
 801148c:	fb02 f201 	mul.w	r2, r2, r1
 8011490:	1a9b      	subs	r3, r3, r2
 8011492:	2b00      	cmp	r3, #0
 8011494:	f040 809d 	bne.w	80115d2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	69db      	ldr	r3, [r3, #28]
 801149c:	1c5a      	adds	r2, r3, #1
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	699b      	ldr	r3, [r3, #24]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d10b      	bne.n	80114c2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	095b      	lsrs	r3, r3, #5
 80114ae:	68fa      	ldr	r2, [r7, #12]
 80114b0:	8912      	ldrh	r2, [r2, #8]
 80114b2:	4293      	cmp	r3, r2
 80114b4:	f0c0 808d 	bcc.w	80115d2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2200      	movs	r2, #0
 80114bc:	61da      	str	r2, [r3, #28]
 80114be:	2304      	movs	r3, #4
 80114c0:	e09a      	b.n	80115f8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	899b      	ldrh	r3, [r3, #12]
 80114c6:	461a      	mov	r2, r3
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80114ce:	68fa      	ldr	r2, [r7, #12]
 80114d0:	8952      	ldrh	r2, [r2, #10]
 80114d2:	3a01      	subs	r2, #1
 80114d4:	4013      	ands	r3, r2
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d17b      	bne.n	80115d2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	699b      	ldr	r3, [r3, #24]
 80114e0:	4619      	mov	r1, r3
 80114e2:	4610      	mov	r0, r2
 80114e4:	f7ff fc11 	bl	8010d0a <get_fat>
 80114e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	d801      	bhi.n	80114f4 <dir_next+0xa0>
 80114f0:	2302      	movs	r3, #2
 80114f2:	e081      	b.n	80115f8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114fa:	d101      	bne.n	8011500 <dir_next+0xac>
 80114fc:	2301      	movs	r3, #1
 80114fe:	e07b      	b.n	80115f8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	69db      	ldr	r3, [r3, #28]
 8011504:	697a      	ldr	r2, [r7, #20]
 8011506:	429a      	cmp	r2, r3
 8011508:	d359      	bcc.n	80115be <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d104      	bne.n	801151a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2200      	movs	r2, #0
 8011514:	61da      	str	r2, [r3, #28]
 8011516:	2304      	movs	r3, #4
 8011518:	e06e      	b.n	80115f8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	699b      	ldr	r3, [r3, #24]
 8011520:	4619      	mov	r1, r3
 8011522:	4610      	mov	r0, r2
 8011524:	f7ff fe3d 	bl	80111a2 <create_chain>
 8011528:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d101      	bne.n	8011534 <dir_next+0xe0>
 8011530:	2307      	movs	r3, #7
 8011532:	e061      	b.n	80115f8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	2b01      	cmp	r3, #1
 8011538:	d101      	bne.n	801153e <dir_next+0xea>
 801153a:	2302      	movs	r3, #2
 801153c:	e05c      	b.n	80115f8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011544:	d101      	bne.n	801154a <dir_next+0xf6>
 8011546:	2301      	movs	r3, #1
 8011548:	e056      	b.n	80115f8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801154a:	68f8      	ldr	r0, [r7, #12]
 801154c:	f7ff fadc 	bl	8010b08 <sync_window>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d001      	beq.n	801155a <dir_next+0x106>
 8011556:	2301      	movs	r3, #1
 8011558:	e04e      	b.n	80115f8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	899b      	ldrh	r3, [r3, #12]
 8011564:	461a      	mov	r2, r3
 8011566:	2100      	movs	r1, #0
 8011568:	f7ff f905 	bl	8010776 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801156c:	2300      	movs	r3, #0
 801156e:	613b      	str	r3, [r7, #16]
 8011570:	6979      	ldr	r1, [r7, #20]
 8011572:	68f8      	ldr	r0, [r7, #12]
 8011574:	f7ff fbaa 	bl	8010ccc <clust2sect>
 8011578:	4602      	mov	r2, r0
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	635a      	str	r2, [r3, #52]	; 0x34
 801157e:	e012      	b.n	80115a6 <dir_next+0x152>
						fs->wflag = 1;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2201      	movs	r2, #1
 8011584:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	f7ff fabe 	bl	8010b08 <sync_window>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d001      	beq.n	8011596 <dir_next+0x142>
 8011592:	2301      	movs	r3, #1
 8011594:	e030      	b.n	80115f8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	3301      	adds	r3, #1
 801159a:	613b      	str	r3, [r7, #16]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a0:	1c5a      	adds	r2, r3, #1
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	635a      	str	r2, [r3, #52]	; 0x34
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	895b      	ldrh	r3, [r3, #10]
 80115aa:	461a      	mov	r2, r3
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d3e6      	bcc.n	8011580 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	1ad2      	subs	r2, r2, r3
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	697a      	ldr	r2, [r7, #20]
 80115c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80115c4:	6979      	ldr	r1, [r7, #20]
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	f7ff fb80 	bl	8010ccc <clust2sect>
 80115cc:	4602      	mov	r2, r0
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	899b      	ldrh	r3, [r3, #12]
 80115e2:	461a      	mov	r2, r3
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80115ea:	fb02 f200 	mul.w	r2, r2, r0
 80115ee:	1a9b      	subs	r3, r3, r2
 80115f0:	18ca      	adds	r2, r1, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80115f6:	2300      	movs	r3, #0
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3718      	adds	r7, #24
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011610:	2100      	movs	r1, #0
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f7ff fe95 	bl	8011342 <dir_sdi>
 8011618:	4603      	mov	r3, r0
 801161a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801161c:	7dfb      	ldrb	r3, [r7, #23]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d12b      	bne.n	801167a <dir_alloc+0x7a>
		n = 0;
 8011622:	2300      	movs	r3, #0
 8011624:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	69db      	ldr	r3, [r3, #28]
 801162a:	4619      	mov	r1, r3
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f7ff faaf 	bl	8010b90 <move_window>
 8011632:	4603      	mov	r3, r0
 8011634:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011636:	7dfb      	ldrb	r3, [r7, #23]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d11d      	bne.n	8011678 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6a1b      	ldr	r3, [r3, #32]
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	2be5      	cmp	r3, #229	; 0xe5
 8011644:	d004      	beq.n	8011650 <dir_alloc+0x50>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6a1b      	ldr	r3, [r3, #32]
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d107      	bne.n	8011660 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	3301      	adds	r3, #1
 8011654:	613b      	str	r3, [r7, #16]
 8011656:	693a      	ldr	r2, [r7, #16]
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	429a      	cmp	r2, r3
 801165c:	d102      	bne.n	8011664 <dir_alloc+0x64>
 801165e:	e00c      	b.n	801167a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011660:	2300      	movs	r3, #0
 8011662:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011664:	2101      	movs	r1, #1
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7ff fef4 	bl	8011454 <dir_next>
 801166c:	4603      	mov	r3, r0
 801166e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011670:	7dfb      	ldrb	r3, [r7, #23]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d0d7      	beq.n	8011626 <dir_alloc+0x26>
 8011676:	e000      	b.n	801167a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011678:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801167a:	7dfb      	ldrb	r3, [r7, #23]
 801167c:	2b04      	cmp	r3, #4
 801167e:	d101      	bne.n	8011684 <dir_alloc+0x84>
 8011680:	2307      	movs	r3, #7
 8011682:	75fb      	strb	r3, [r7, #23]
	return res;
 8011684:	7dfb      	ldrb	r3, [r7, #23]
}
 8011686:	4618      	mov	r0, r3
 8011688:	3718      	adds	r7, #24
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801168e:	b580      	push	{r7, lr}
 8011690:	b084      	sub	sp, #16
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
 8011696:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	331a      	adds	r3, #26
 801169c:	4618      	mov	r0, r3
 801169e:	f7fe ffc7 	bl	8010630 <ld_word>
 80116a2:	4603      	mov	r3, r0
 80116a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	2b03      	cmp	r3, #3
 80116ac:	d109      	bne.n	80116c2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	3314      	adds	r3, #20
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fe ffbc 	bl	8010630 <ld_word>
 80116b8:	4603      	mov	r3, r0
 80116ba:	041b      	lsls	r3, r3, #16
 80116bc:	68fa      	ldr	r2, [r7, #12]
 80116be:	4313      	orrs	r3, r2
 80116c0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80116c2:	68fb      	ldr	r3, [r7, #12]
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3710      	adds	r7, #16
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b084      	sub	sp, #16
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	60f8      	str	r0, [r7, #12]
 80116d4:	60b9      	str	r1, [r7, #8]
 80116d6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	331a      	adds	r3, #26
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	b292      	uxth	r2, r2
 80116e0:	4611      	mov	r1, r2
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fe ffdf 	bl	80106a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	2b03      	cmp	r3, #3
 80116ee:	d109      	bne.n	8011704 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	f103 0214 	add.w	r2, r3, #20
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	0c1b      	lsrs	r3, r3, #16
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	4619      	mov	r1, r3
 80116fe:	4610      	mov	r0, r2
 8011700:	f7fe ffd1 	bl	80106a6 <st_word>
	}
}
 8011704:	bf00      	nop
 8011706:	3710      	adds	r7, #16
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}

0801170c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b086      	sub	sp, #24
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011716:	2304      	movs	r3, #4
 8011718:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011720:	e03c      	b.n	801179c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	69db      	ldr	r3, [r3, #28]
 8011726:	4619      	mov	r1, r3
 8011728:	6938      	ldr	r0, [r7, #16]
 801172a:	f7ff fa31 	bl	8010b90 <move_window>
 801172e:	4603      	mov	r3, r0
 8011730:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011732:	7dfb      	ldrb	r3, [r7, #23]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d136      	bne.n	80117a6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6a1b      	ldr	r3, [r3, #32]
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011740:	7bfb      	ldrb	r3, [r7, #15]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d102      	bne.n	801174c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011746:	2304      	movs	r3, #4
 8011748:	75fb      	strb	r3, [r7, #23]
 801174a:	e031      	b.n	80117b0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6a1b      	ldr	r3, [r3, #32]
 8011750:	330b      	adds	r3, #11
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011758:	73bb      	strb	r3, [r7, #14]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	7bba      	ldrb	r2, [r7, #14]
 801175e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011760:	7bfb      	ldrb	r3, [r7, #15]
 8011762:	2be5      	cmp	r3, #229	; 0xe5
 8011764:	d011      	beq.n	801178a <dir_read+0x7e>
 8011766:	7bfb      	ldrb	r3, [r7, #15]
 8011768:	2b2e      	cmp	r3, #46	; 0x2e
 801176a:	d00e      	beq.n	801178a <dir_read+0x7e>
 801176c:	7bbb      	ldrb	r3, [r7, #14]
 801176e:	2b0f      	cmp	r3, #15
 8011770:	d00b      	beq.n	801178a <dir_read+0x7e>
 8011772:	7bbb      	ldrb	r3, [r7, #14]
 8011774:	f023 0320 	bic.w	r3, r3, #32
 8011778:	2b08      	cmp	r3, #8
 801177a:	bf0c      	ite	eq
 801177c:	2301      	moveq	r3, #1
 801177e:	2300      	movne	r3, #0
 8011780:	b2db      	uxtb	r3, r3
 8011782:	461a      	mov	r2, r3
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	4293      	cmp	r3, r2
 8011788:	d00f      	beq.n	80117aa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801178a:	2100      	movs	r1, #0
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f7ff fe61 	bl	8011454 <dir_next>
 8011792:	4603      	mov	r3, r0
 8011794:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011796:	7dfb      	ldrb	r3, [r7, #23]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d108      	bne.n	80117ae <dir_read+0xa2>
	while (dp->sect) {
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	69db      	ldr	r3, [r3, #28]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d1be      	bne.n	8011722 <dir_read+0x16>
 80117a4:	e004      	b.n	80117b0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80117a6:	bf00      	nop
 80117a8:	e002      	b.n	80117b0 <dir_read+0xa4>
				break;
 80117aa:	bf00      	nop
 80117ac:	e000      	b.n	80117b0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80117ae:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80117b0:	7dfb      	ldrb	r3, [r7, #23]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d002      	beq.n	80117bc <dir_read+0xb0>
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2200      	movs	r2, #0
 80117ba:	61da      	str	r2, [r3, #28]
	return res;
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3718      	adds	r7, #24
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b086      	sub	sp, #24
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80117d4:	2100      	movs	r1, #0
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7ff fdb3 	bl	8011342 <dir_sdi>
 80117dc:	4603      	mov	r3, r0
 80117de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80117e0:	7dfb      	ldrb	r3, [r7, #23]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d001      	beq.n	80117ea <dir_find+0x24>
 80117e6:	7dfb      	ldrb	r3, [r7, #23]
 80117e8:	e03e      	b.n	8011868 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	69db      	ldr	r3, [r3, #28]
 80117ee:	4619      	mov	r1, r3
 80117f0:	6938      	ldr	r0, [r7, #16]
 80117f2:	f7ff f9cd 	bl	8010b90 <move_window>
 80117f6:	4603      	mov	r3, r0
 80117f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80117fa:	7dfb      	ldrb	r3, [r7, #23]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d12f      	bne.n	8011860 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6a1b      	ldr	r3, [r3, #32]
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011808:	7bfb      	ldrb	r3, [r7, #15]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d102      	bne.n	8011814 <dir_find+0x4e>
 801180e:	2304      	movs	r3, #4
 8011810:	75fb      	strb	r3, [r7, #23]
 8011812:	e028      	b.n	8011866 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6a1b      	ldr	r3, [r3, #32]
 8011818:	330b      	adds	r3, #11
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011820:	b2da      	uxtb	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6a1b      	ldr	r3, [r3, #32]
 801182a:	330b      	adds	r3, #11
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	f003 0308 	and.w	r3, r3, #8
 8011832:	2b00      	cmp	r3, #0
 8011834:	d10a      	bne.n	801184c <dir_find+0x86>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6a18      	ldr	r0, [r3, #32]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	3324      	adds	r3, #36	; 0x24
 801183e:	220b      	movs	r2, #11
 8011840:	4619      	mov	r1, r3
 8011842:	f7fe ffb2 	bl	80107aa <mem_cmp>
 8011846:	4603      	mov	r3, r0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00b      	beq.n	8011864 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801184c:	2100      	movs	r1, #0
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f7ff fe00 	bl	8011454 <dir_next>
 8011854:	4603      	mov	r3, r0
 8011856:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011858:	7dfb      	ldrb	r3, [r7, #23]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d0c5      	beq.n	80117ea <dir_find+0x24>
 801185e:	e002      	b.n	8011866 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011860:	bf00      	nop
 8011862:	e000      	b.n	8011866 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011864:	bf00      	nop

	return res;
 8011866:	7dfb      	ldrb	r3, [r7, #23]
}
 8011868:	4618      	mov	r0, r3
 801186a:	3718      	adds	r7, #24
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b084      	sub	sp, #16
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801187e:	2101      	movs	r1, #1
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f7ff febd 	bl	8011600 <dir_alloc>
 8011886:	4603      	mov	r3, r0
 8011888:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801188a:	7bfb      	ldrb	r3, [r7, #15]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d11c      	bne.n	80118ca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	69db      	ldr	r3, [r3, #28]
 8011894:	4619      	mov	r1, r3
 8011896:	68b8      	ldr	r0, [r7, #8]
 8011898:	f7ff f97a 	bl	8010b90 <move_window>
 801189c:	4603      	mov	r3, r0
 801189e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80118a0:	7bfb      	ldrb	r3, [r7, #15]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d111      	bne.n	80118ca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6a1b      	ldr	r3, [r3, #32]
 80118aa:	2220      	movs	r2, #32
 80118ac:	2100      	movs	r1, #0
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7fe ff61 	bl	8010776 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	6a18      	ldr	r0, [r3, #32]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	3324      	adds	r3, #36	; 0x24
 80118bc:	220b      	movs	r2, #11
 80118be:	4619      	mov	r1, r3
 80118c0:	f7fe ff38 	bl	8010734 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	2201      	movs	r2, #1
 80118c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80118ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3710      	adds	r7, #16
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	69db      	ldr	r3, [r3, #28]
 80118e6:	4619      	mov	r1, r3
 80118e8:	68f8      	ldr	r0, [r7, #12]
 80118ea:	f7ff f951 	bl	8010b90 <move_window>
 80118ee:	4603      	mov	r3, r0
 80118f0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80118f2:	7afb      	ldrb	r3, [r7, #11]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d106      	bne.n	8011906 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6a1b      	ldr	r3, [r3, #32]
 80118fc:	22e5      	movs	r2, #229	; 0xe5
 80118fe:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2201      	movs	r2, #1
 8011904:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8011906:	7afb      	ldrb	r3, [r7, #11]
}
 8011908:	4618      	mov	r0, r3
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b088      	sub	sp, #32
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	60fb      	str	r3, [r7, #12]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	3324      	adds	r3, #36	; 0x24
 8011924:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011926:	220b      	movs	r2, #11
 8011928:	2120      	movs	r1, #32
 801192a:	68b8      	ldr	r0, [r7, #8]
 801192c:	f7fe ff23 	bl	8010776 <mem_set>
	si = i = 0; ni = 8;
 8011930:	2300      	movs	r3, #0
 8011932:	613b      	str	r3, [r7, #16]
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	617b      	str	r3, [r7, #20]
 8011938:	2308      	movs	r3, #8
 801193a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	4413      	add	r3, r2
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	2b2e      	cmp	r3, #46	; 0x2e
 8011946:	d12f      	bne.n	80119a8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	1c5a      	adds	r2, r3, #1
 801194c:	617a      	str	r2, [r7, #20]
 801194e:	68fa      	ldr	r2, [r7, #12]
 8011950:	4413      	add	r3, r2
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8011956:	7ffb      	ldrb	r3, [r7, #31]
 8011958:	2b2e      	cmp	r3, #46	; 0x2e
 801195a:	d10a      	bne.n	8011972 <create_name+0x62>
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b02      	cmp	r3, #2
 8011960:	d807      	bhi.n	8011972 <create_name+0x62>
			sfn[i++] = c;
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	1c5a      	adds	r2, r3, #1
 8011966:	613a      	str	r2, [r7, #16]
 8011968:	68ba      	ldr	r2, [r7, #8]
 801196a:	4413      	add	r3, r2
 801196c:	7ffa      	ldrb	r2, [r7, #31]
 801196e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8011970:	e7ea      	b.n	8011948 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8011972:	7ffb      	ldrb	r3, [r7, #31]
 8011974:	2b2f      	cmp	r3, #47	; 0x2f
 8011976:	d007      	beq.n	8011988 <create_name+0x78>
 8011978:	7ffb      	ldrb	r3, [r7, #31]
 801197a:	2b5c      	cmp	r3, #92	; 0x5c
 801197c:	d004      	beq.n	8011988 <create_name+0x78>
 801197e:	7ffb      	ldrb	r3, [r7, #31]
 8011980:	2b20      	cmp	r3, #32
 8011982:	d901      	bls.n	8011988 <create_name+0x78>
 8011984:	2306      	movs	r3, #6
 8011986:	e084      	b.n	8011a92 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	441a      	add	r2, r3
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8011992:	7ffb      	ldrb	r3, [r7, #31]
 8011994:	2b20      	cmp	r3, #32
 8011996:	d801      	bhi.n	801199c <create_name+0x8c>
 8011998:	2224      	movs	r2, #36	; 0x24
 801199a:	e000      	b.n	801199e <create_name+0x8e>
 801199c:	2220      	movs	r2, #32
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	330b      	adds	r3, #11
 80119a2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80119a4:	2300      	movs	r3, #0
 80119a6:	e074      	b.n	8011a92 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	1c5a      	adds	r2, r3, #1
 80119ac:	617a      	str	r2, [r7, #20]
 80119ae:	68fa      	ldr	r2, [r7, #12]
 80119b0:	4413      	add	r3, r2
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80119b6:	7ffb      	ldrb	r3, [r7, #31]
 80119b8:	2b20      	cmp	r3, #32
 80119ba:	d94e      	bls.n	8011a5a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80119bc:	7ffb      	ldrb	r3, [r7, #31]
 80119be:	2b2f      	cmp	r3, #47	; 0x2f
 80119c0:	d006      	beq.n	80119d0 <create_name+0xc0>
 80119c2:	7ffb      	ldrb	r3, [r7, #31]
 80119c4:	2b5c      	cmp	r3, #92	; 0x5c
 80119c6:	d110      	bne.n	80119ea <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80119c8:	e002      	b.n	80119d0 <create_name+0xc0>
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	3301      	adds	r3, #1
 80119ce:	617b      	str	r3, [r7, #20]
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	4413      	add	r3, r2
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	2b2f      	cmp	r3, #47	; 0x2f
 80119da:	d0f6      	beq.n	80119ca <create_name+0xba>
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	4413      	add	r3, r2
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	2b5c      	cmp	r3, #92	; 0x5c
 80119e6:	d0f0      	beq.n	80119ca <create_name+0xba>
			break;
 80119e8:	e038      	b.n	8011a5c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80119ea:	7ffb      	ldrb	r3, [r7, #31]
 80119ec:	2b2e      	cmp	r3, #46	; 0x2e
 80119ee:	d003      	beq.n	80119f8 <create_name+0xe8>
 80119f0:	693a      	ldr	r2, [r7, #16]
 80119f2:	69bb      	ldr	r3, [r7, #24]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d30c      	bcc.n	8011a12 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	2b0b      	cmp	r3, #11
 80119fc:	d002      	beq.n	8011a04 <create_name+0xf4>
 80119fe:	7ffb      	ldrb	r3, [r7, #31]
 8011a00:	2b2e      	cmp	r3, #46	; 0x2e
 8011a02:	d001      	beq.n	8011a08 <create_name+0xf8>
 8011a04:	2306      	movs	r3, #6
 8011a06:	e044      	b.n	8011a92 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8011a08:	2308      	movs	r3, #8
 8011a0a:	613b      	str	r3, [r7, #16]
 8011a0c:	230b      	movs	r3, #11
 8011a0e:	61bb      	str	r3, [r7, #24]
			continue;
 8011a10:	e022      	b.n	8011a58 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011a12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	da04      	bge.n	8011a24 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011a1a:	7ffb      	ldrb	r3, [r7, #31]
 8011a1c:	3b80      	subs	r3, #128	; 0x80
 8011a1e:	4a1f      	ldr	r2, [pc, #124]	; (8011a9c <create_name+0x18c>)
 8011a20:	5cd3      	ldrb	r3, [r2, r3]
 8011a22:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011a24:	7ffb      	ldrb	r3, [r7, #31]
 8011a26:	4619      	mov	r1, r3
 8011a28:	481d      	ldr	r0, [pc, #116]	; (8011aa0 <create_name+0x190>)
 8011a2a:	f7fe fee5 	bl	80107f8 <chk_chr>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d001      	beq.n	8011a38 <create_name+0x128>
 8011a34:	2306      	movs	r3, #6
 8011a36:	e02c      	b.n	8011a92 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011a38:	7ffb      	ldrb	r3, [r7, #31]
 8011a3a:	2b60      	cmp	r3, #96	; 0x60
 8011a3c:	d905      	bls.n	8011a4a <create_name+0x13a>
 8011a3e:	7ffb      	ldrb	r3, [r7, #31]
 8011a40:	2b7a      	cmp	r3, #122	; 0x7a
 8011a42:	d802      	bhi.n	8011a4a <create_name+0x13a>
 8011a44:	7ffb      	ldrb	r3, [r7, #31]
 8011a46:	3b20      	subs	r3, #32
 8011a48:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	1c5a      	adds	r2, r3, #1
 8011a4e:	613a      	str	r2, [r7, #16]
 8011a50:	68ba      	ldr	r2, [r7, #8]
 8011a52:	4413      	add	r3, r2
 8011a54:	7ffa      	ldrb	r2, [r7, #31]
 8011a56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011a58:	e7a6      	b.n	80119a8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011a5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011a5c:	68fa      	ldr	r2, [r7, #12]
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	441a      	add	r2, r3
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d101      	bne.n	8011a70 <create_name+0x160>
 8011a6c:	2306      	movs	r3, #6
 8011a6e:	e010      	b.n	8011a92 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	2be5      	cmp	r3, #229	; 0xe5
 8011a76:	d102      	bne.n	8011a7e <create_name+0x16e>
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	2205      	movs	r2, #5
 8011a7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011a7e:	7ffb      	ldrb	r3, [r7, #31]
 8011a80:	2b20      	cmp	r3, #32
 8011a82:	d801      	bhi.n	8011a88 <create_name+0x178>
 8011a84:	2204      	movs	r2, #4
 8011a86:	e000      	b.n	8011a8a <create_name+0x17a>
 8011a88:	2200      	movs	r2, #0
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	330b      	adds	r3, #11
 8011a8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011a90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3720      	adds	r7, #32
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	08019268 	.word	0x08019268
 8011aa0:	08019218 	.word	0x08019218

08011aa4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b086      	sub	sp, #24
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	2b2f      	cmp	r3, #47	; 0x2f
 8011abe:	d00b      	beq.n	8011ad8 <follow_path+0x34>
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	2b5c      	cmp	r3, #92	; 0x5c
 8011ac6:	d007      	beq.n	8011ad8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	699a      	ldr	r2, [r3, #24]
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	609a      	str	r2, [r3, #8]
 8011ad0:	e00d      	b.n	8011aee <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	603b      	str	r3, [r7, #0]
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	2b2f      	cmp	r3, #47	; 0x2f
 8011ade:	d0f8      	beq.n	8011ad2 <follow_path+0x2e>
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	2b5c      	cmp	r3, #92	; 0x5c
 8011ae6:	d0f4      	beq.n	8011ad2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	2200      	movs	r2, #0
 8011aec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	2b1f      	cmp	r3, #31
 8011af4:	d80a      	bhi.n	8011b0c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2280      	movs	r2, #128	; 0x80
 8011afa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011afe:	2100      	movs	r1, #0
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7ff fc1e 	bl	8011342 <dir_sdi>
 8011b06:	4603      	mov	r3, r0
 8011b08:	75fb      	strb	r3, [r7, #23]
 8011b0a:	e05b      	b.n	8011bc4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011b0c:	463b      	mov	r3, r7
 8011b0e:	4619      	mov	r1, r3
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f7ff fefd 	bl	8011910 <create_name>
 8011b16:	4603      	mov	r3, r0
 8011b18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011b1a:	7dfb      	ldrb	r3, [r7, #23]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d14c      	bne.n	8011bba <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7ff fe50 	bl	80117c6 <dir_find>
 8011b26:	4603      	mov	r3, r0
 8011b28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011b30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011b32:	7dfb      	ldrb	r3, [r7, #23]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d01b      	beq.n	8011b70 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011b38:	7dfb      	ldrb	r3, [r7, #23]
 8011b3a:	2b04      	cmp	r3, #4
 8011b3c:	d13f      	bne.n	8011bbe <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8011b3e:	7afb      	ldrb	r3, [r7, #11]
 8011b40:	f003 0320 	and.w	r3, r3, #32
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00b      	beq.n	8011b60 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011b48:	7afb      	ldrb	r3, [r7, #11]
 8011b4a:	f003 0304 	and.w	r3, r3, #4
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d031      	beq.n	8011bb6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2280      	movs	r2, #128	; 0x80
 8011b56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011b5e:	e02e      	b.n	8011bbe <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011b60:	7afb      	ldrb	r3, [r7, #11]
 8011b62:	f003 0304 	and.w	r3, r3, #4
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d129      	bne.n	8011bbe <follow_path+0x11a>
 8011b6a:	2305      	movs	r3, #5
 8011b6c:	75fb      	strb	r3, [r7, #23]
				break;
 8011b6e:	e026      	b.n	8011bbe <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011b70:	7afb      	ldrb	r3, [r7, #11]
 8011b72:	f003 0304 	and.w	r3, r3, #4
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d123      	bne.n	8011bc2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	799b      	ldrb	r3, [r3, #6]
 8011b7e:	f003 0310 	and.w	r3, r3, #16
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d102      	bne.n	8011b8c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8011b86:	2305      	movs	r3, #5
 8011b88:	75fb      	strb	r3, [r7, #23]
 8011b8a:	e01b      	b.n	8011bc4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	695b      	ldr	r3, [r3, #20]
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	8992      	ldrh	r2, [r2, #12]
 8011b9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b9e:	fb02 f200 	mul.w	r2, r2, r0
 8011ba2:	1a9b      	subs	r3, r3, r2
 8011ba4:	440b      	add	r3, r1
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	68f8      	ldr	r0, [r7, #12]
 8011baa:	f7ff fd70 	bl	801168e <ld_clust>
 8011bae:	4602      	mov	r2, r0
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	609a      	str	r2, [r3, #8]
 8011bb4:	e7aa      	b.n	8011b0c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011bb6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011bb8:	e7a8      	b.n	8011b0c <follow_path+0x68>
			if (res != FR_OK) break;
 8011bba:	bf00      	nop
 8011bbc:	e002      	b.n	8011bc4 <follow_path+0x120>
				break;
 8011bbe:	bf00      	nop
 8011bc0:	e000      	b.n	8011bc4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011bc2:	bf00      	nop
			}
		}
	}

	return res;
 8011bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3718      	adds	r7, #24
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011bce:	b480      	push	{r7}
 8011bd0:	b087      	sub	sp, #28
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bda:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d031      	beq.n	8011c48 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	617b      	str	r3, [r7, #20]
 8011bea:	e002      	b.n	8011bf2 <get_ldnumber+0x24>
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	3301      	adds	r3, #1
 8011bf0:	617b      	str	r3, [r7, #20]
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	2b20      	cmp	r3, #32
 8011bf8:	d903      	bls.n	8011c02 <get_ldnumber+0x34>
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	2b3a      	cmp	r3, #58	; 0x3a
 8011c00:	d1f4      	bne.n	8011bec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	2b3a      	cmp	r3, #58	; 0x3a
 8011c08:	d11c      	bne.n	8011c44 <get_ldnumber+0x76>
			tp = *path;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	1c5a      	adds	r2, r3, #1
 8011c14:	60fa      	str	r2, [r7, #12]
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	3b30      	subs	r3, #48	; 0x30
 8011c1a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	2b09      	cmp	r3, #9
 8011c20:	d80e      	bhi.n	8011c40 <get_ldnumber+0x72>
 8011c22:	68fa      	ldr	r2, [r7, #12]
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d10a      	bne.n	8011c40 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d107      	bne.n	8011c40 <get_ldnumber+0x72>
					vol = (int)i;
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	3301      	adds	r3, #1
 8011c38:	617b      	str	r3, [r7, #20]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	697a      	ldr	r2, [r7, #20]
 8011c3e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	e002      	b.n	8011c4a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011c44:	2300      	movs	r3, #0
 8011c46:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011c48:	693b      	ldr	r3, [r7, #16]
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	371c      	adds	r7, #28
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c54:	4770      	bx	lr
	...

08011c58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2200      	movs	r2, #0
 8011c66:	70da      	strb	r2, [r3, #3]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c6e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011c70:	6839      	ldr	r1, [r7, #0]
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f7fe ff8c 	bl	8010b90 <move_window>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d001      	beq.n	8011c82 <check_fs+0x2a>
 8011c7e:	2304      	movs	r3, #4
 8011c80:	e038      	b.n	8011cf4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	3338      	adds	r3, #56	; 0x38
 8011c86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7fe fcd0 	bl	8010630 <ld_word>
 8011c90:	4603      	mov	r3, r0
 8011c92:	461a      	mov	r2, r3
 8011c94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d001      	beq.n	8011ca0 <check_fs+0x48>
 8011c9c:	2303      	movs	r3, #3
 8011c9e:	e029      	b.n	8011cf4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011ca6:	2be9      	cmp	r3, #233	; 0xe9
 8011ca8:	d009      	beq.n	8011cbe <check_fs+0x66>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011cb0:	2beb      	cmp	r3, #235	; 0xeb
 8011cb2:	d11e      	bne.n	8011cf2 <check_fs+0x9a>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011cba:	2b90      	cmp	r3, #144	; 0x90
 8011cbc:	d119      	bne.n	8011cf2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	3338      	adds	r3, #56	; 0x38
 8011cc2:	3336      	adds	r3, #54	; 0x36
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fe fccb 	bl	8010660 <ld_dword>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011cd0:	4a0a      	ldr	r2, [pc, #40]	; (8011cfc <check_fs+0xa4>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d101      	bne.n	8011cda <check_fs+0x82>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	e00c      	b.n	8011cf4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	3338      	adds	r3, #56	; 0x38
 8011cde:	3352      	adds	r3, #82	; 0x52
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7fe fcbd 	bl	8010660 <ld_dword>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	4b05      	ldr	r3, [pc, #20]	; (8011d00 <check_fs+0xa8>)
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d101      	bne.n	8011cf2 <check_fs+0x9a>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	e000      	b.n	8011cf4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011cf2:	2302      	movs	r3, #2
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}
 8011cfc:	00544146 	.word	0x00544146
 8011d00:	33544146 	.word	0x33544146

08011d04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b096      	sub	sp, #88	; 0x58
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	4613      	mov	r3, r2
 8011d10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	2200      	movs	r2, #0
 8011d16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011d18:	68f8      	ldr	r0, [r7, #12]
 8011d1a:	f7ff ff58 	bl	8011bce <get_ldnumber>
 8011d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	da01      	bge.n	8011d2a <find_volume+0x26>
 8011d26:	230b      	movs	r3, #11
 8011d28:	e268      	b.n	80121fc <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011d2a:	4ab0      	ldr	r2, [pc, #704]	; (8011fec <find_volume+0x2e8>)
 8011d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <find_volume+0x3a>
 8011d3a:	230c      	movs	r3, #12
 8011d3c:	e25e      	b.n	80121fc <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011d44:	79fb      	ldrb	r3, [r7, #7]
 8011d46:	f023 0301 	bic.w	r3, r3, #1
 8011d4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d01a      	beq.n	8011d8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d56:	785b      	ldrb	r3, [r3, #1]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7fe fbcb 	bl	80104f4 <disk_status>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011d64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d68:	f003 0301 	and.w	r3, r3, #1
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d10c      	bne.n	8011d8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011d70:	79fb      	ldrb	r3, [r7, #7]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d007      	beq.n	8011d86 <find_volume+0x82>
 8011d76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d7a:	f003 0304 	and.w	r3, r3, #4
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d001      	beq.n	8011d86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011d82:	230a      	movs	r3, #10
 8011d84:	e23a      	b.n	80121fc <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8011d86:	2300      	movs	r3, #0
 8011d88:	e238      	b.n	80121fc <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d92:	b2da      	uxtb	r2, r3
 8011d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9a:	785b      	ldrb	r3, [r3, #1]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fe fbc3 	bl	8010528 <disk_initialize>
 8011da2:	4603      	mov	r3, r0
 8011da4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011da8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dac:	f003 0301 	and.w	r3, r3, #1
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d001      	beq.n	8011db8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011db4:	2303      	movs	r3, #3
 8011db6:	e221      	b.n	80121fc <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011db8:	79fb      	ldrb	r3, [r7, #7]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d007      	beq.n	8011dce <find_volume+0xca>
 8011dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dc2:	f003 0304 	and.w	r3, r3, #4
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d001      	beq.n	8011dce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011dca:	230a      	movs	r3, #10
 8011dcc:	e216      	b.n	80121fc <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd0:	7858      	ldrb	r0, [r3, #1]
 8011dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd4:	330c      	adds	r3, #12
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	2102      	movs	r1, #2
 8011dda:	f7fe fc0b 	bl	80105f4 <disk_ioctl>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d001      	beq.n	8011de8 <find_volume+0xe4>
 8011de4:	2301      	movs	r3, #1
 8011de6:	e209      	b.n	80121fc <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dea:	899b      	ldrh	r3, [r3, #12]
 8011dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011df0:	d80d      	bhi.n	8011e0e <find_volume+0x10a>
 8011df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df4:	899b      	ldrh	r3, [r3, #12]
 8011df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dfa:	d308      	bcc.n	8011e0e <find_volume+0x10a>
 8011dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfe:	899b      	ldrh	r3, [r3, #12]
 8011e00:	461a      	mov	r2, r3
 8011e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e04:	899b      	ldrh	r3, [r3, #12]
 8011e06:	3b01      	subs	r3, #1
 8011e08:	4013      	ands	r3, r2
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d001      	beq.n	8011e12 <find_volume+0x10e>
 8011e0e:	2301      	movs	r3, #1
 8011e10:	e1f4      	b.n	80121fc <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011e12:	2300      	movs	r3, #0
 8011e14:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011e16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e1a:	f7ff ff1d 	bl	8011c58 <check_fs>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e28:	2b02      	cmp	r3, #2
 8011e2a:	d14b      	bne.n	8011ec4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8011e30:	e01f      	b.n	8011e72 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e34:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e3a:	011b      	lsls	r3, r3, #4
 8011e3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011e40:	4413      	add	r3, r2
 8011e42:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e46:	3304      	adds	r3, #4
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d006      	beq.n	8011e5c <find_volume+0x158>
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e50:	3308      	adds	r3, #8
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fe fc04 	bl	8010660 <ld_dword>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	e000      	b.n	8011e5e <find_volume+0x15a>
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011e66:	440b      	add	r3, r1
 8011e68:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e6e:	3301      	adds	r3, #1
 8011e70:	643b      	str	r3, [r7, #64]	; 0x40
 8011e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e74:	2b03      	cmp	r3, #3
 8011e76:	d9dc      	bls.n	8011e32 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011e78:	2300      	movs	r3, #0
 8011e7a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d002      	beq.n	8011e88 <find_volume+0x184>
 8011e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e84:	3b01      	subs	r3, #1
 8011e86:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011e90:	4413      	add	r3, r2
 8011e92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011e96:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d005      	beq.n	8011eaa <find_volume+0x1a6>
 8011e9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ea2:	f7ff fed9 	bl	8011c58 <check_fs>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	e000      	b.n	8011eac <find_volume+0x1a8>
 8011eaa:	2303      	movs	r3, #3
 8011eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d905      	bls.n	8011ec4 <find_volume+0x1c0>
 8011eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eba:	3301      	adds	r3, #1
 8011ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8011ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ec0:	2b03      	cmp	r3, #3
 8011ec2:	d9e1      	bls.n	8011e88 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ec8:	2b04      	cmp	r3, #4
 8011eca:	d101      	bne.n	8011ed0 <find_volume+0x1cc>
 8011ecc:	2301      	movs	r3, #1
 8011ece:	e195      	b.n	80121fc <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d901      	bls.n	8011edc <find_volume+0x1d8>
 8011ed8:	230d      	movs	r3, #13
 8011eda:	e18f      	b.n	80121fc <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ede:	3338      	adds	r3, #56	; 0x38
 8011ee0:	330b      	adds	r3, #11
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fe fba4 	bl	8010630 <ld_word>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	461a      	mov	r2, r3
 8011eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eee:	899b      	ldrh	r3, [r3, #12]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d001      	beq.n	8011ef8 <find_volume+0x1f4>
 8011ef4:	230d      	movs	r3, #13
 8011ef6:	e181      	b.n	80121fc <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efa:	3338      	adds	r3, #56	; 0x38
 8011efc:	3316      	adds	r3, #22
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fe fb96 	bl	8010630 <ld_word>
 8011f04:	4603      	mov	r3, r0
 8011f06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d106      	bne.n	8011f1c <find_volume+0x218>
 8011f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f10:	3338      	adds	r3, #56	; 0x38
 8011f12:	3324      	adds	r3, #36	; 0x24
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7fe fba3 	bl	8010660 <ld_dword>
 8011f1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f20:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f24:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2e:	789b      	ldrb	r3, [r3, #2]
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d005      	beq.n	8011f40 <find_volume+0x23c>
 8011f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f36:	789b      	ldrb	r3, [r3, #2]
 8011f38:	2b02      	cmp	r3, #2
 8011f3a:	d001      	beq.n	8011f40 <find_volume+0x23c>
 8011f3c:	230d      	movs	r3, #13
 8011f3e:	e15d      	b.n	80121fc <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f42:	789b      	ldrb	r3, [r3, #2]
 8011f44:	461a      	mov	r2, r3
 8011f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f48:	fb02 f303 	mul.w	r3, r2, r3
 8011f4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f54:	b29a      	uxth	r2, r3
 8011f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5c:	895b      	ldrh	r3, [r3, #10]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d008      	beq.n	8011f74 <find_volume+0x270>
 8011f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f64:	895b      	ldrh	r3, [r3, #10]
 8011f66:	461a      	mov	r2, r3
 8011f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6a:	895b      	ldrh	r3, [r3, #10]
 8011f6c:	3b01      	subs	r3, #1
 8011f6e:	4013      	ands	r3, r2
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d001      	beq.n	8011f78 <find_volume+0x274>
 8011f74:	230d      	movs	r3, #13
 8011f76:	e141      	b.n	80121fc <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7a:	3338      	adds	r3, #56	; 0x38
 8011f7c:	3311      	adds	r3, #17
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fe fb56 	bl	8010630 <ld_word>
 8011f84:	4603      	mov	r3, r0
 8011f86:	461a      	mov	r2, r3
 8011f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8e:	891b      	ldrh	r3, [r3, #8]
 8011f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f92:	8992      	ldrh	r2, [r2, #12]
 8011f94:	0952      	lsrs	r2, r2, #5
 8011f96:	b292      	uxth	r2, r2
 8011f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f9c:	fb02 f201 	mul.w	r2, r2, r1
 8011fa0:	1a9b      	subs	r3, r3, r2
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d001      	beq.n	8011fac <find_volume+0x2a8>
 8011fa8:	230d      	movs	r3, #13
 8011faa:	e127      	b.n	80121fc <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fae:	3338      	adds	r3, #56	; 0x38
 8011fb0:	3313      	adds	r3, #19
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7fe fb3c 	bl	8010630 <ld_word>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d106      	bne.n	8011fd0 <find_volume+0x2cc>
 8011fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc4:	3338      	adds	r3, #56	; 0x38
 8011fc6:	3320      	adds	r3, #32
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7fe fb49 	bl	8010660 <ld_dword>
 8011fce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd2:	3338      	adds	r3, #56	; 0x38
 8011fd4:	330e      	adds	r3, #14
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fe fb2a 	bl	8010630 <ld_word>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011fe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d104      	bne.n	8011ff0 <find_volume+0x2ec>
 8011fe6:	230d      	movs	r3, #13
 8011fe8:	e108      	b.n	80121fc <find_volume+0x4f8>
 8011fea:	bf00      	nop
 8011fec:	2003c49c 	.word	0x2003c49c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011ff0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ff4:	4413      	add	r3, r2
 8011ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ff8:	8911      	ldrh	r1, [r2, #8]
 8011ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ffc:	8992      	ldrh	r2, [r2, #12]
 8011ffe:	0952      	lsrs	r2, r2, #5
 8012000:	b292      	uxth	r2, r2
 8012002:	fbb1 f2f2 	udiv	r2, r1, r2
 8012006:	b292      	uxth	r2, r2
 8012008:	4413      	add	r3, r2
 801200a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801200c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012010:	429a      	cmp	r2, r3
 8012012:	d201      	bcs.n	8012018 <find_volume+0x314>
 8012014:	230d      	movs	r3, #13
 8012016:	e0f1      	b.n	80121fc <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201c:	1ad3      	subs	r3, r2, r3
 801201e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012020:	8952      	ldrh	r2, [r2, #10]
 8012022:	fbb3 f3f2 	udiv	r3, r3, r2
 8012026:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202a:	2b00      	cmp	r3, #0
 801202c:	d101      	bne.n	8012032 <find_volume+0x32e>
 801202e:	230d      	movs	r3, #13
 8012030:	e0e4      	b.n	80121fc <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012032:	2303      	movs	r3, #3
 8012034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801203e:	4293      	cmp	r3, r2
 8012040:	d802      	bhi.n	8012048 <find_volume+0x344>
 8012042:	2302      	movs	r3, #2
 8012044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801204e:	4293      	cmp	r3, r2
 8012050:	d802      	bhi.n	8012058 <find_volume+0x354>
 8012052:	2301      	movs	r3, #1
 8012054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205a:	1c9a      	adds	r2, r3, #2
 801205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012062:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012064:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012066:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801206a:	441a      	add	r2, r3
 801206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012074:	441a      	add	r2, r3
 8012076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012078:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801207a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801207e:	2b03      	cmp	r3, #3
 8012080:	d11e      	bne.n	80120c0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012084:	3338      	adds	r3, #56	; 0x38
 8012086:	332a      	adds	r3, #42	; 0x2a
 8012088:	4618      	mov	r0, r3
 801208a:	f7fe fad1 	bl	8010630 <ld_word>
 801208e:	4603      	mov	r3, r0
 8012090:	2b00      	cmp	r3, #0
 8012092:	d001      	beq.n	8012098 <find_volume+0x394>
 8012094:	230d      	movs	r3, #13
 8012096:	e0b1      	b.n	80121fc <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	891b      	ldrh	r3, [r3, #8]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d001      	beq.n	80120a4 <find_volume+0x3a0>
 80120a0:	230d      	movs	r3, #13
 80120a2:	e0ab      	b.n	80121fc <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80120a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a6:	3338      	adds	r3, #56	; 0x38
 80120a8:	332c      	adds	r3, #44	; 0x2c
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fe fad8 	bl	8010660 <ld_dword>
 80120b0:	4602      	mov	r2, r0
 80120b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80120b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b8:	69db      	ldr	r3, [r3, #28]
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	647b      	str	r3, [r7, #68]	; 0x44
 80120be:	e01f      	b.n	8012100 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80120c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c2:	891b      	ldrh	r3, [r3, #8]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d101      	bne.n	80120cc <find_volume+0x3c8>
 80120c8:	230d      	movs	r3, #13
 80120ca:	e097      	b.n	80121fc <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80120cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120d2:	441a      	add	r2, r3
 80120d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80120d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120dc:	2b02      	cmp	r3, #2
 80120de:	d103      	bne.n	80120e8 <find_volume+0x3e4>
 80120e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e2:	69db      	ldr	r3, [r3, #28]
 80120e4:	005b      	lsls	r3, r3, #1
 80120e6:	e00a      	b.n	80120fe <find_volume+0x3fa>
 80120e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ea:	69da      	ldr	r2, [r3, #28]
 80120ec:	4613      	mov	r3, r2
 80120ee:	005b      	lsls	r3, r3, #1
 80120f0:	4413      	add	r3, r2
 80120f2:	085a      	lsrs	r2, r3, #1
 80120f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f6:	69db      	ldr	r3, [r3, #28]
 80120f8:	f003 0301 	and.w	r3, r3, #1
 80120fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80120fe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012102:	6a1a      	ldr	r2, [r3, #32]
 8012104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012106:	899b      	ldrh	r3, [r3, #12]
 8012108:	4619      	mov	r1, r3
 801210a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801210c:	440b      	add	r3, r1
 801210e:	3b01      	subs	r3, #1
 8012110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012112:	8989      	ldrh	r1, [r1, #12]
 8012114:	fbb3 f3f1 	udiv	r3, r3, r1
 8012118:	429a      	cmp	r2, r3
 801211a:	d201      	bcs.n	8012120 <find_volume+0x41c>
 801211c:	230d      	movs	r3, #13
 801211e:	e06d      	b.n	80121fc <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012122:	f04f 32ff 	mov.w	r2, #4294967295
 8012126:	615a      	str	r2, [r3, #20]
 8012128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212a:	695a      	ldr	r2, [r3, #20]
 801212c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012132:	2280      	movs	r2, #128	; 0x80
 8012134:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012136:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801213a:	2b03      	cmp	r3, #3
 801213c:	d149      	bne.n	80121d2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012140:	3338      	adds	r3, #56	; 0x38
 8012142:	3330      	adds	r3, #48	; 0x30
 8012144:	4618      	mov	r0, r3
 8012146:	f7fe fa73 	bl	8010630 <ld_word>
 801214a:	4603      	mov	r3, r0
 801214c:	2b01      	cmp	r3, #1
 801214e:	d140      	bne.n	80121d2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012152:	3301      	adds	r3, #1
 8012154:	4619      	mov	r1, r3
 8012156:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012158:	f7fe fd1a 	bl	8010b90 <move_window>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d137      	bne.n	80121d2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012164:	2200      	movs	r2, #0
 8012166:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216a:	3338      	adds	r3, #56	; 0x38
 801216c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012170:	4618      	mov	r0, r3
 8012172:	f7fe fa5d 	bl	8010630 <ld_word>
 8012176:	4603      	mov	r3, r0
 8012178:	461a      	mov	r2, r3
 801217a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801217e:	429a      	cmp	r2, r3
 8012180:	d127      	bne.n	80121d2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012184:	3338      	adds	r3, #56	; 0x38
 8012186:	4618      	mov	r0, r3
 8012188:	f7fe fa6a 	bl	8010660 <ld_dword>
 801218c:	4602      	mov	r2, r0
 801218e:	4b1d      	ldr	r3, [pc, #116]	; (8012204 <find_volume+0x500>)
 8012190:	429a      	cmp	r2, r3
 8012192:	d11e      	bne.n	80121d2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012196:	3338      	adds	r3, #56	; 0x38
 8012198:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801219c:	4618      	mov	r0, r3
 801219e:	f7fe fa5f 	bl	8010660 <ld_dword>
 80121a2:	4602      	mov	r2, r0
 80121a4:	4b18      	ldr	r3, [pc, #96]	; (8012208 <find_volume+0x504>)
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d113      	bne.n	80121d2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80121aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ac:	3338      	adds	r3, #56	; 0x38
 80121ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7fe fa54 	bl	8010660 <ld_dword>
 80121b8:	4602      	mov	r2, r0
 80121ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121bc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80121be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c0:	3338      	adds	r3, #56	; 0x38
 80121c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7fe fa4a 	bl	8010660 <ld_dword>
 80121cc:	4602      	mov	r2, r0
 80121ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80121d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80121d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80121da:	4b0c      	ldr	r3, [pc, #48]	; (801220c <find_volume+0x508>)
 80121dc:	881b      	ldrh	r3, [r3, #0]
 80121de:	3301      	adds	r3, #1
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	4b0a      	ldr	r3, [pc, #40]	; (801220c <find_volume+0x508>)
 80121e4:	801a      	strh	r2, [r3, #0]
 80121e6:	4b09      	ldr	r3, [pc, #36]	; (801220c <find_volume+0x508>)
 80121e8:	881a      	ldrh	r2, [r3, #0]
 80121ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ec:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80121ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f0:	2200      	movs	r2, #0
 80121f2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80121f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80121f6:	f7fe fc63 	bl	8010ac0 <clear_lock>
#endif
	return FR_OK;
 80121fa:	2300      	movs	r3, #0
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3758      	adds	r7, #88	; 0x58
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}
 8012204:	41615252 	.word	0x41615252
 8012208:	61417272 	.word	0x61417272
 801220c:	2003c4a0 	.word	0x2003c4a0

08012210 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801221a:	2309      	movs	r3, #9
 801221c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d01c      	beq.n	801225e <validate+0x4e>
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d018      	beq.n	801225e <validate+0x4e>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d013      	beq.n	801225e <validate+0x4e>
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	889a      	ldrh	r2, [r3, #4]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	88db      	ldrh	r3, [r3, #6]
 8012240:	429a      	cmp	r2, r3
 8012242:	d10c      	bne.n	801225e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	785b      	ldrb	r3, [r3, #1]
 801224a:	4618      	mov	r0, r3
 801224c:	f7fe f952 	bl	80104f4 <disk_status>
 8012250:	4603      	mov	r3, r0
 8012252:	f003 0301 	and.w	r3, r3, #1
 8012256:	2b00      	cmp	r3, #0
 8012258:	d101      	bne.n	801225e <validate+0x4e>
			res = FR_OK;
 801225a:	2300      	movs	r3, #0
 801225c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801225e:	7bfb      	ldrb	r3, [r7, #15]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d102      	bne.n	801226a <validate+0x5a>
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	e000      	b.n	801226c <validate+0x5c>
 801226a:	2300      	movs	r3, #0
 801226c:	683a      	ldr	r2, [r7, #0]
 801226e:	6013      	str	r3, [r2, #0]
	return res;
 8012270:	7bfb      	ldrb	r3, [r7, #15]
}
 8012272:	4618      	mov	r0, r3
 8012274:	3710      	adds	r7, #16
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
	...

0801227c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b088      	sub	sp, #32
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	4613      	mov	r3, r2
 8012288:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801228e:	f107 0310 	add.w	r3, r7, #16
 8012292:	4618      	mov	r0, r3
 8012294:	f7ff fc9b 	bl	8011bce <get_ldnumber>
 8012298:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	2b00      	cmp	r3, #0
 801229e:	da01      	bge.n	80122a4 <f_mount+0x28>
 80122a0:	230b      	movs	r3, #11
 80122a2:	e02b      	b.n	80122fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80122a4:	4a17      	ldr	r2, [pc, #92]	; (8012304 <f_mount+0x88>)
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d005      	beq.n	80122c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80122b4:	69b8      	ldr	r0, [r7, #24]
 80122b6:	f7fe fc03 	bl	8010ac0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80122ba:	69bb      	ldr	r3, [r7, #24]
 80122bc:	2200      	movs	r2, #0
 80122be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d002      	beq.n	80122cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2200      	movs	r2, #0
 80122ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80122cc:	68fa      	ldr	r2, [r7, #12]
 80122ce:	490d      	ldr	r1, [pc, #52]	; (8012304 <f_mount+0x88>)
 80122d0:	69fb      	ldr	r3, [r7, #28]
 80122d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d002      	beq.n	80122e2 <f_mount+0x66>
 80122dc:	79fb      	ldrb	r3, [r7, #7]
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d001      	beq.n	80122e6 <f_mount+0x6a>
 80122e2:	2300      	movs	r3, #0
 80122e4:	e00a      	b.n	80122fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80122e6:	f107 010c 	add.w	r1, r7, #12
 80122ea:	f107 0308 	add.w	r3, r7, #8
 80122ee:	2200      	movs	r2, #0
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7ff fd07 	bl	8011d04 <find_volume>
 80122f6:	4603      	mov	r3, r0
 80122f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80122fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3720      	adds	r7, #32
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	2003c49c 	.word	0x2003c49c

08012308 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b098      	sub	sp, #96	; 0x60
 801230c:	af00      	add	r7, sp, #0
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	60b9      	str	r1, [r7, #8]
 8012312:	4613      	mov	r3, r2
 8012314:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d101      	bne.n	8012320 <f_open+0x18>
 801231c:	2309      	movs	r3, #9
 801231e:	e1ba      	b.n	8012696 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012320:	79fb      	ldrb	r3, [r7, #7]
 8012322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012326:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012328:	79fa      	ldrb	r2, [r7, #7]
 801232a:	f107 0110 	add.w	r1, r7, #16
 801232e:	f107 0308 	add.w	r3, r7, #8
 8012332:	4618      	mov	r0, r3
 8012334:	f7ff fce6 	bl	8011d04 <find_volume>
 8012338:	4603      	mov	r3, r0
 801233a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801233e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012342:	2b00      	cmp	r3, #0
 8012344:	f040 819e 	bne.w	8012684 <f_open+0x37c>
		dj.obj.fs = fs;
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801234c:	68ba      	ldr	r2, [r7, #8]
 801234e:	f107 0314 	add.w	r3, r7, #20
 8012352:	4611      	mov	r1, r2
 8012354:	4618      	mov	r0, r3
 8012356:	f7ff fba5 	bl	8011aa4 <follow_path>
 801235a:	4603      	mov	r3, r0
 801235c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012364:	2b00      	cmp	r3, #0
 8012366:	d11a      	bne.n	801239e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012368:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801236c:	b25b      	sxtb	r3, r3
 801236e:	2b00      	cmp	r3, #0
 8012370:	da03      	bge.n	801237a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012372:	2306      	movs	r3, #6
 8012374:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012378:	e011      	b.n	801239e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801237a:	79fb      	ldrb	r3, [r7, #7]
 801237c:	f023 0301 	bic.w	r3, r3, #1
 8012380:	2b00      	cmp	r3, #0
 8012382:	bf14      	ite	ne
 8012384:	2301      	movne	r3, #1
 8012386:	2300      	moveq	r3, #0
 8012388:	b2db      	uxtb	r3, r3
 801238a:	461a      	mov	r2, r3
 801238c:	f107 0314 	add.w	r3, r7, #20
 8012390:	4611      	mov	r1, r2
 8012392:	4618      	mov	r0, r3
 8012394:	f7fe fa4c 	bl	8010830 <chk_lock>
 8012398:	4603      	mov	r3, r0
 801239a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801239e:	79fb      	ldrb	r3, [r7, #7]
 80123a0:	f003 031c 	and.w	r3, r3, #28
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d07e      	beq.n	80124a6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80123a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d017      	beq.n	80123e0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80123b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123b4:	2b04      	cmp	r3, #4
 80123b6:	d10e      	bne.n	80123d6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80123b8:	f7fe fa96 	bl	80108e8 <enq_lock>
 80123bc:	4603      	mov	r3, r0
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d006      	beq.n	80123d0 <f_open+0xc8>
 80123c2:	f107 0314 	add.w	r3, r7, #20
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7ff fa52 	bl	8011870 <dir_register>
 80123cc:	4603      	mov	r3, r0
 80123ce:	e000      	b.n	80123d2 <f_open+0xca>
 80123d0:	2312      	movs	r3, #18
 80123d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80123d6:	79fb      	ldrb	r3, [r7, #7]
 80123d8:	f043 0308 	orr.w	r3, r3, #8
 80123dc:	71fb      	strb	r3, [r7, #7]
 80123de:	e010      	b.n	8012402 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80123e0:	7ebb      	ldrb	r3, [r7, #26]
 80123e2:	f003 0311 	and.w	r3, r3, #17
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d003      	beq.n	80123f2 <f_open+0xea>
					res = FR_DENIED;
 80123ea:	2307      	movs	r3, #7
 80123ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80123f0:	e007      	b.n	8012402 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80123f2:	79fb      	ldrb	r3, [r7, #7]
 80123f4:	f003 0304 	and.w	r3, r3, #4
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d002      	beq.n	8012402 <f_open+0xfa>
 80123fc:	2308      	movs	r3, #8
 80123fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012406:	2b00      	cmp	r3, #0
 8012408:	d167      	bne.n	80124da <f_open+0x1d2>
 801240a:	79fb      	ldrb	r3, [r7, #7]
 801240c:	f003 0308 	and.w	r3, r3, #8
 8012410:	2b00      	cmp	r3, #0
 8012412:	d062      	beq.n	80124da <f_open+0x1d2>
				dw = GET_FATTIME();
 8012414:	4ba2      	ldr	r3, [pc, #648]	; (80126a0 <f_open+0x398>)
 8012416:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801241a:	330e      	adds	r3, #14
 801241c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801241e:	4618      	mov	r0, r3
 8012420:	f7fe f95c 	bl	80106dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012426:	3316      	adds	r3, #22
 8012428:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801242a:	4618      	mov	r0, r3
 801242c:	f7fe f956 	bl	80106dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012432:	330b      	adds	r3, #11
 8012434:	2220      	movs	r2, #32
 8012436:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801243c:	4611      	mov	r1, r2
 801243e:	4618      	mov	r0, r3
 8012440:	f7ff f925 	bl	801168e <ld_clust>
 8012444:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801244a:	2200      	movs	r2, #0
 801244c:	4618      	mov	r0, r3
 801244e:	f7ff f93d 	bl	80116cc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012454:	331c      	adds	r3, #28
 8012456:	2100      	movs	r1, #0
 8012458:	4618      	mov	r0, r3
 801245a:	f7fe f93f 	bl	80106dc <st_dword>
					fs->wflag = 1;
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	2201      	movs	r2, #1
 8012462:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012466:	2b00      	cmp	r3, #0
 8012468:	d037      	beq.n	80124da <f_open+0x1d2>
						dw = fs->winsect;
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801246e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012470:	f107 0314 	add.w	r3, r7, #20
 8012474:	2200      	movs	r2, #0
 8012476:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012478:	4618      	mov	r0, r3
 801247a:	f7fe fe2d 	bl	80110d8 <remove_chain>
 801247e:	4603      	mov	r3, r0
 8012480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012488:	2b00      	cmp	r3, #0
 801248a:	d126      	bne.n	80124da <f_open+0x1d2>
							res = move_window(fs, dw);
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012490:	4618      	mov	r0, r3
 8012492:	f7fe fb7d 	bl	8010b90 <move_window>
 8012496:	4603      	mov	r3, r0
 8012498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80124a0:	3a01      	subs	r2, #1
 80124a2:	611a      	str	r2, [r3, #16]
 80124a4:	e019      	b.n	80124da <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80124a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d115      	bne.n	80124da <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80124ae:	7ebb      	ldrb	r3, [r7, #26]
 80124b0:	f003 0310 	and.w	r3, r3, #16
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d003      	beq.n	80124c0 <f_open+0x1b8>
					res = FR_NO_FILE;
 80124b8:	2304      	movs	r3, #4
 80124ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80124be:	e00c      	b.n	80124da <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80124c0:	79fb      	ldrb	r3, [r7, #7]
 80124c2:	f003 0302 	and.w	r3, r3, #2
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d007      	beq.n	80124da <f_open+0x1d2>
 80124ca:	7ebb      	ldrb	r3, [r7, #26]
 80124cc:	f003 0301 	and.w	r3, r3, #1
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d002      	beq.n	80124da <f_open+0x1d2>
						res = FR_DENIED;
 80124d4:	2307      	movs	r3, #7
 80124d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80124da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d128      	bne.n	8012534 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80124e2:	79fb      	ldrb	r3, [r7, #7]
 80124e4:	f003 0308 	and.w	r3, r3, #8
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d003      	beq.n	80124f4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80124ec:	79fb      	ldrb	r3, [r7, #7]
 80124ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124f2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80124fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012502:	79fb      	ldrb	r3, [r7, #7]
 8012504:	f023 0301 	bic.w	r3, r3, #1
 8012508:	2b00      	cmp	r3, #0
 801250a:	bf14      	ite	ne
 801250c:	2301      	movne	r3, #1
 801250e:	2300      	moveq	r3, #0
 8012510:	b2db      	uxtb	r3, r3
 8012512:	461a      	mov	r2, r3
 8012514:	f107 0314 	add.w	r3, r7, #20
 8012518:	4611      	mov	r1, r2
 801251a:	4618      	mov	r0, r3
 801251c:	f7fe fa06 	bl	801092c <inc_lock>
 8012520:	4602      	mov	r2, r0
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	691b      	ldr	r3, [r3, #16]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d102      	bne.n	8012534 <f_open+0x22c>
 801252e:	2302      	movs	r3, #2
 8012530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012538:	2b00      	cmp	r3, #0
 801253a:	f040 80a3 	bne.w	8012684 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012542:	4611      	mov	r1, r2
 8012544:	4618      	mov	r0, r3
 8012546:	f7ff f8a2 	bl	801168e <ld_clust>
 801254a:	4602      	mov	r2, r0
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012552:	331c      	adds	r3, #28
 8012554:	4618      	mov	r0, r3
 8012556:	f7fe f883 	bl	8010660 <ld_dword>
 801255a:	4602      	mov	r2, r0
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	2200      	movs	r2, #0
 8012564:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012566:	693a      	ldr	r2, [r7, #16]
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801256c:	693b      	ldr	r3, [r7, #16]
 801256e:	88da      	ldrh	r2, [r3, #6]
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	79fa      	ldrb	r2, [r7, #7]
 8012578:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	2200      	movs	r2, #0
 801257e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	2200      	movs	r2, #0
 8012584:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2200      	movs	r2, #0
 801258a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	3330      	adds	r3, #48	; 0x30
 8012590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012594:	2100      	movs	r1, #0
 8012596:	4618      	mov	r0, r3
 8012598:	f7fe f8ed 	bl	8010776 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801259c:	79fb      	ldrb	r3, [r7, #7]
 801259e:	f003 0320 	and.w	r3, r3, #32
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d06e      	beq.n	8012684 <f_open+0x37c>
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d06a      	beq.n	8012684 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	68da      	ldr	r2, [r3, #12]
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	895b      	ldrh	r3, [r3, #10]
 80125ba:	461a      	mov	r2, r3
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	899b      	ldrh	r3, [r3, #12]
 80125c0:	fb03 f302 	mul.w	r3, r3, r2
 80125c4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	689b      	ldr	r3, [r3, #8]
 80125ca:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	68db      	ldr	r3, [r3, #12]
 80125d0:	657b      	str	r3, [r7, #84]	; 0x54
 80125d2:	e016      	b.n	8012602 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80125d8:	4618      	mov	r0, r3
 80125da:	f7fe fb96 	bl	8010d0a <get_fat>
 80125de:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80125e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	d802      	bhi.n	80125ec <f_open+0x2e4>
 80125e6:	2302      	movs	r3, #2
 80125e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80125ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80125ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125f2:	d102      	bne.n	80125fa <f_open+0x2f2>
 80125f4:	2301      	movs	r3, #1
 80125f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80125fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80125fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125fe:	1ad3      	subs	r3, r2, r3
 8012600:	657b      	str	r3, [r7, #84]	; 0x54
 8012602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012606:	2b00      	cmp	r3, #0
 8012608:	d103      	bne.n	8012612 <f_open+0x30a>
 801260a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801260c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801260e:	429a      	cmp	r2, r3
 8012610:	d8e0      	bhi.n	80125d4 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012616:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801261c:	2b00      	cmp	r3, #0
 801261e:	d131      	bne.n	8012684 <f_open+0x37c>
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	899b      	ldrh	r3, [r3, #12]
 8012624:	461a      	mov	r2, r3
 8012626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012628:	fbb3 f1f2 	udiv	r1, r3, r2
 801262c:	fb02 f201 	mul.w	r2, r2, r1
 8012630:	1a9b      	subs	r3, r3, r2
 8012632:	2b00      	cmp	r3, #0
 8012634:	d026      	beq.n	8012684 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801263a:	4618      	mov	r0, r3
 801263c:	f7fe fb46 	bl	8010ccc <clust2sect>
 8012640:	6478      	str	r0, [r7, #68]	; 0x44
 8012642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012644:	2b00      	cmp	r3, #0
 8012646:	d103      	bne.n	8012650 <f_open+0x348>
						res = FR_INT_ERR;
 8012648:	2302      	movs	r3, #2
 801264a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801264e:	e019      	b.n	8012684 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	899b      	ldrh	r3, [r3, #12]
 8012654:	461a      	mov	r2, r3
 8012656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012658:	fbb3 f2f2 	udiv	r2, r3, r2
 801265c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801265e:	441a      	add	r2, r3
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	7858      	ldrb	r0, [r3, #1]
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	6a1a      	ldr	r2, [r3, #32]
 8012672:	2301      	movs	r3, #1
 8012674:	f7fd ff7e 	bl	8010574 <disk_read>
 8012678:	4603      	mov	r3, r0
 801267a:	2b00      	cmp	r3, #0
 801267c:	d002      	beq.n	8012684 <f_open+0x37c>
 801267e:	2301      	movs	r3, #1
 8012680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012688:	2b00      	cmp	r3, #0
 801268a:	d002      	beq.n	8012692 <f_open+0x38a>
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2200      	movs	r2, #0
 8012690:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012696:	4618      	mov	r0, r3
 8012698:	3760      	adds	r7, #96	; 0x60
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	274a0000 	.word	0x274a0000

080126a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b08e      	sub	sp, #56	; 0x38
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	607a      	str	r2, [r7, #4]
 80126b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	2200      	movs	r2, #0
 80126ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	f107 0214 	add.w	r2, r7, #20
 80126c2:	4611      	mov	r1, r2
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7ff fda3 	bl	8012210 <validate>
 80126ca:	4603      	mov	r3, r0
 80126cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80126d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d107      	bne.n	80126e8 <f_read+0x44>
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	7d5b      	ldrb	r3, [r3, #21]
 80126dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80126e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d002      	beq.n	80126ee <f_read+0x4a>
 80126e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126ec:	e135      	b.n	801295a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	7d1b      	ldrb	r3, [r3, #20]
 80126f2:	f003 0301 	and.w	r3, r3, #1
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d101      	bne.n	80126fe <f_read+0x5a>
 80126fa:	2307      	movs	r3, #7
 80126fc:	e12d      	b.n	801295a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	68da      	ldr	r2, [r3, #12]
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	699b      	ldr	r3, [r3, #24]
 8012706:	1ad3      	subs	r3, r2, r3
 8012708:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	6a3b      	ldr	r3, [r7, #32]
 801270e:	429a      	cmp	r2, r3
 8012710:	f240 811e 	bls.w	8012950 <f_read+0x2ac>
 8012714:	6a3b      	ldr	r3, [r7, #32]
 8012716:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012718:	e11a      	b.n	8012950 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	699b      	ldr	r3, [r3, #24]
 801271e:	697a      	ldr	r2, [r7, #20]
 8012720:	8992      	ldrh	r2, [r2, #12]
 8012722:	fbb3 f1f2 	udiv	r1, r3, r2
 8012726:	fb02 f201 	mul.w	r2, r2, r1
 801272a:	1a9b      	subs	r3, r3, r2
 801272c:	2b00      	cmp	r3, #0
 801272e:	f040 80d5 	bne.w	80128dc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	699b      	ldr	r3, [r3, #24]
 8012736:	697a      	ldr	r2, [r7, #20]
 8012738:	8992      	ldrh	r2, [r2, #12]
 801273a:	fbb3 f3f2 	udiv	r3, r3, r2
 801273e:	697a      	ldr	r2, [r7, #20]
 8012740:	8952      	ldrh	r2, [r2, #10]
 8012742:	3a01      	subs	r2, #1
 8012744:	4013      	ands	r3, r2
 8012746:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012748:	69fb      	ldr	r3, [r7, #28]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d12f      	bne.n	80127ae <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	699b      	ldr	r3, [r3, #24]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d103      	bne.n	801275e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	689b      	ldr	r3, [r3, #8]
 801275a:	633b      	str	r3, [r7, #48]	; 0x30
 801275c:	e013      	b.n	8012786 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012762:	2b00      	cmp	r3, #0
 8012764:	d007      	beq.n	8012776 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	699b      	ldr	r3, [r3, #24]
 801276a:	4619      	mov	r1, r3
 801276c:	68f8      	ldr	r0, [r7, #12]
 801276e:	f7fe fdb0 	bl	80112d2 <clmt_clust>
 8012772:	6338      	str	r0, [r7, #48]	; 0x30
 8012774:	e007      	b.n	8012786 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	69db      	ldr	r3, [r3, #28]
 801277c:	4619      	mov	r1, r3
 801277e:	4610      	mov	r0, r2
 8012780:	f7fe fac3 	bl	8010d0a <get_fat>
 8012784:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	2b01      	cmp	r3, #1
 801278a:	d804      	bhi.n	8012796 <f_read+0xf2>
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	2202      	movs	r2, #2
 8012790:	755a      	strb	r2, [r3, #21]
 8012792:	2302      	movs	r3, #2
 8012794:	e0e1      	b.n	801295a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801279c:	d104      	bne.n	80127a8 <f_read+0x104>
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2201      	movs	r2, #1
 80127a2:	755a      	strb	r2, [r3, #21]
 80127a4:	2301      	movs	r3, #1
 80127a6:	e0d8      	b.n	801295a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80127ae:	697a      	ldr	r2, [r7, #20]
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	69db      	ldr	r3, [r3, #28]
 80127b4:	4619      	mov	r1, r3
 80127b6:	4610      	mov	r0, r2
 80127b8:	f7fe fa88 	bl	8010ccc <clust2sect>
 80127bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80127be:	69bb      	ldr	r3, [r7, #24]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d104      	bne.n	80127ce <f_read+0x12a>
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	2202      	movs	r2, #2
 80127c8:	755a      	strb	r2, [r3, #21]
 80127ca:	2302      	movs	r3, #2
 80127cc:	e0c5      	b.n	801295a <f_read+0x2b6>
			sect += csect;
 80127ce:	69ba      	ldr	r2, [r7, #24]
 80127d0:	69fb      	ldr	r3, [r7, #28]
 80127d2:	4413      	add	r3, r2
 80127d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	899b      	ldrh	r3, [r3, #12]
 80127da:	461a      	mov	r2, r3
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	fbb3 f3f2 	udiv	r3, r3, r2
 80127e2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80127e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d041      	beq.n	801286e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80127ea:	69fa      	ldr	r2, [r7, #28]
 80127ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ee:	4413      	add	r3, r2
 80127f0:	697a      	ldr	r2, [r7, #20]
 80127f2:	8952      	ldrh	r2, [r2, #10]
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d905      	bls.n	8012804 <f_read+0x160>
					cc = fs->csize - csect;
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	895b      	ldrh	r3, [r3, #10]
 80127fc:	461a      	mov	r2, r3
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	1ad3      	subs	r3, r2, r3
 8012802:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	7858      	ldrb	r0, [r3, #1]
 8012808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280a:	69ba      	ldr	r2, [r7, #24]
 801280c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801280e:	f7fd feb1 	bl	8010574 <disk_read>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d004      	beq.n	8012822 <f_read+0x17e>
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2201      	movs	r2, #1
 801281c:	755a      	strb	r2, [r3, #21]
 801281e:	2301      	movs	r3, #1
 8012820:	e09b      	b.n	801295a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	7d1b      	ldrb	r3, [r3, #20]
 8012826:	b25b      	sxtb	r3, r3
 8012828:	2b00      	cmp	r3, #0
 801282a:	da18      	bge.n	801285e <f_read+0x1ba>
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	6a1a      	ldr	r2, [r3, #32]
 8012830:	69bb      	ldr	r3, [r7, #24]
 8012832:	1ad3      	subs	r3, r2, r3
 8012834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012836:	429a      	cmp	r2, r3
 8012838:	d911      	bls.n	801285e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	6a1a      	ldr	r2, [r3, #32]
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	697a      	ldr	r2, [r7, #20]
 8012844:	8992      	ldrh	r2, [r2, #12]
 8012846:	fb02 f303 	mul.w	r3, r2, r3
 801284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801284c:	18d0      	adds	r0, r2, r3
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	899b      	ldrh	r3, [r3, #12]
 8012858:	461a      	mov	r2, r3
 801285a:	f7fd ff6b 	bl	8010734 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	899b      	ldrh	r3, [r3, #12]
 8012862:	461a      	mov	r2, r3
 8012864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012866:	fb02 f303 	mul.w	r3, r2, r3
 801286a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801286c:	e05c      	b.n	8012928 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	6a1b      	ldr	r3, [r3, #32]
 8012872:	69ba      	ldr	r2, [r7, #24]
 8012874:	429a      	cmp	r2, r3
 8012876:	d02e      	beq.n	80128d6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	7d1b      	ldrb	r3, [r3, #20]
 801287c:	b25b      	sxtb	r3, r3
 801287e:	2b00      	cmp	r3, #0
 8012880:	da18      	bge.n	80128b4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	7858      	ldrb	r0, [r3, #1]
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	6a1a      	ldr	r2, [r3, #32]
 8012890:	2301      	movs	r3, #1
 8012892:	f7fd fe8f 	bl	80105b4 <disk_write>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d004      	beq.n	80128a6 <f_read+0x202>
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2201      	movs	r2, #1
 80128a0:	755a      	strb	r2, [r3, #21]
 80128a2:	2301      	movs	r3, #1
 80128a4:	e059      	b.n	801295a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	7d1b      	ldrb	r3, [r3, #20]
 80128aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128ae:	b2da      	uxtb	r2, r3
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	7858      	ldrb	r0, [r3, #1]
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128be:	2301      	movs	r3, #1
 80128c0:	69ba      	ldr	r2, [r7, #24]
 80128c2:	f7fd fe57 	bl	8010574 <disk_read>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d004      	beq.n	80128d6 <f_read+0x232>
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2201      	movs	r2, #1
 80128d0:	755a      	strb	r2, [r3, #21]
 80128d2:	2301      	movs	r3, #1
 80128d4:	e041      	b.n	801295a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	69ba      	ldr	r2, [r7, #24]
 80128da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	899b      	ldrh	r3, [r3, #12]
 80128e0:	4618      	mov	r0, r3
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	699b      	ldr	r3, [r3, #24]
 80128e6:	697a      	ldr	r2, [r7, #20]
 80128e8:	8992      	ldrh	r2, [r2, #12]
 80128ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80128ee:	fb02 f201 	mul.w	r2, r2, r1
 80128f2:	1a9b      	subs	r3, r3, r2
 80128f4:	1ac3      	subs	r3, r0, r3
 80128f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80128f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d901      	bls.n	8012904 <f_read+0x260>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	699b      	ldr	r3, [r3, #24]
 801290e:	697a      	ldr	r2, [r7, #20]
 8012910:	8992      	ldrh	r2, [r2, #12]
 8012912:	fbb3 f0f2 	udiv	r0, r3, r2
 8012916:	fb02 f200 	mul.w	r2, r2, r0
 801291a:	1a9b      	subs	r3, r3, r2
 801291c:	440b      	add	r3, r1
 801291e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012920:	4619      	mov	r1, r3
 8012922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012924:	f7fd ff06 	bl	8010734 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801292c:	4413      	add	r3, r2
 801292e:	627b      	str	r3, [r7, #36]	; 0x24
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	699a      	ldr	r2, [r3, #24]
 8012934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012936:	441a      	add	r2, r3
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	619a      	str	r2, [r3, #24]
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	681a      	ldr	r2, [r3, #0]
 8012940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012942:	441a      	add	r2, r3
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	601a      	str	r2, [r3, #0]
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	1ad3      	subs	r3, r2, r3
 801294e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	f47f aee1 	bne.w	801271a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3738      	adds	r7, #56	; 0x38
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b08c      	sub	sp, #48	; 0x30
 8012966:	af00      	add	r7, sp, #0
 8012968:	60f8      	str	r0, [r7, #12]
 801296a:	60b9      	str	r1, [r7, #8]
 801296c:	607a      	str	r2, [r7, #4]
 801296e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	2200      	movs	r2, #0
 8012978:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f107 0210 	add.w	r2, r7, #16
 8012980:	4611      	mov	r1, r2
 8012982:	4618      	mov	r0, r3
 8012984:	f7ff fc44 	bl	8012210 <validate>
 8012988:	4603      	mov	r3, r0
 801298a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801298e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012992:	2b00      	cmp	r3, #0
 8012994:	d107      	bne.n	80129a6 <f_write+0x44>
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	7d5b      	ldrb	r3, [r3, #21]
 801299a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801299e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d002      	beq.n	80129ac <f_write+0x4a>
 80129a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129aa:	e16a      	b.n	8012c82 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	7d1b      	ldrb	r3, [r3, #20]
 80129b0:	f003 0302 	and.w	r3, r3, #2
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d101      	bne.n	80129bc <f_write+0x5a>
 80129b8:	2307      	movs	r3, #7
 80129ba:	e162      	b.n	8012c82 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	699a      	ldr	r2, [r3, #24]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	441a      	add	r2, r3
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	699b      	ldr	r3, [r3, #24]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	f080 814c 	bcs.w	8012c66 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	699b      	ldr	r3, [r3, #24]
 80129d2:	43db      	mvns	r3, r3
 80129d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80129d6:	e146      	b.n	8012c66 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	699b      	ldr	r3, [r3, #24]
 80129dc:	693a      	ldr	r2, [r7, #16]
 80129de:	8992      	ldrh	r2, [r2, #12]
 80129e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80129e4:	fb02 f201 	mul.w	r2, r2, r1
 80129e8:	1a9b      	subs	r3, r3, r2
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	f040 80f1 	bne.w	8012bd2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	699b      	ldr	r3, [r3, #24]
 80129f4:	693a      	ldr	r2, [r7, #16]
 80129f6:	8992      	ldrh	r2, [r2, #12]
 80129f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80129fc:	693a      	ldr	r2, [r7, #16]
 80129fe:	8952      	ldrh	r2, [r2, #10]
 8012a00:	3a01      	subs	r2, #1
 8012a02:	4013      	ands	r3, r2
 8012a04:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012a06:	69bb      	ldr	r3, [r7, #24]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d143      	bne.n	8012a94 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	699b      	ldr	r3, [r3, #24]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d10c      	bne.n	8012a2e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	689b      	ldr	r3, [r3, #8]
 8012a18:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d11a      	bne.n	8012a56 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2100      	movs	r1, #0
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fe fbbc 	bl	80111a2 <create_chain>
 8012a2a:	62b8      	str	r0, [r7, #40]	; 0x28
 8012a2c:	e013      	b.n	8012a56 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d007      	beq.n	8012a46 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	699b      	ldr	r3, [r3, #24]
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	f7fe fc48 	bl	80112d2 <clmt_clust>
 8012a42:	62b8      	str	r0, [r7, #40]	; 0x28
 8012a44:	e007      	b.n	8012a56 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012a46:	68fa      	ldr	r2, [r7, #12]
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	69db      	ldr	r3, [r3, #28]
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	4610      	mov	r0, r2
 8012a50:	f7fe fba7 	bl	80111a2 <create_chain>
 8012a54:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 8109 	beq.w	8012c70 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a60:	2b01      	cmp	r3, #1
 8012a62:	d104      	bne.n	8012a6e <f_write+0x10c>
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	2202      	movs	r2, #2
 8012a68:	755a      	strb	r2, [r3, #21]
 8012a6a:	2302      	movs	r3, #2
 8012a6c:	e109      	b.n	8012c82 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a74:	d104      	bne.n	8012a80 <f_write+0x11e>
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2201      	movs	r2, #1
 8012a7a:	755a      	strb	r2, [r3, #21]
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	e100      	b.n	8012c82 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a84:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	689b      	ldr	r3, [r3, #8]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d102      	bne.n	8012a94 <f_write+0x132>
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a92:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	7d1b      	ldrb	r3, [r3, #20]
 8012a98:	b25b      	sxtb	r3, r3
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	da18      	bge.n	8012ad0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	7858      	ldrb	r0, [r3, #1]
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	6a1a      	ldr	r2, [r3, #32]
 8012aac:	2301      	movs	r3, #1
 8012aae:	f7fd fd81 	bl	80105b4 <disk_write>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d004      	beq.n	8012ac2 <f_write+0x160>
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	2201      	movs	r2, #1
 8012abc:	755a      	strb	r2, [r3, #21]
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e0df      	b.n	8012c82 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	7d1b      	ldrb	r3, [r3, #20]
 8012ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012aca:	b2da      	uxtb	r2, r3
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012ad0:	693a      	ldr	r2, [r7, #16]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	69db      	ldr	r3, [r3, #28]
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	4610      	mov	r0, r2
 8012ada:	f7fe f8f7 	bl	8010ccc <clust2sect>
 8012ade:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d104      	bne.n	8012af0 <f_write+0x18e>
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2202      	movs	r2, #2
 8012aea:	755a      	strb	r2, [r3, #21]
 8012aec:	2302      	movs	r3, #2
 8012aee:	e0c8      	b.n	8012c82 <f_write+0x320>
			sect += csect;
 8012af0:	697a      	ldr	r2, [r7, #20]
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	4413      	add	r3, r2
 8012af6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	899b      	ldrh	r3, [r3, #12]
 8012afc:	461a      	mov	r2, r3
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b04:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012b06:	6a3b      	ldr	r3, [r7, #32]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d043      	beq.n	8012b94 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012b0c:	69ba      	ldr	r2, [r7, #24]
 8012b0e:	6a3b      	ldr	r3, [r7, #32]
 8012b10:	4413      	add	r3, r2
 8012b12:	693a      	ldr	r2, [r7, #16]
 8012b14:	8952      	ldrh	r2, [r2, #10]
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d905      	bls.n	8012b26 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	895b      	ldrh	r3, [r3, #10]
 8012b1e:	461a      	mov	r2, r3
 8012b20:	69bb      	ldr	r3, [r7, #24]
 8012b22:	1ad3      	subs	r3, r2, r3
 8012b24:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	7858      	ldrb	r0, [r3, #1]
 8012b2a:	6a3b      	ldr	r3, [r7, #32]
 8012b2c:	697a      	ldr	r2, [r7, #20]
 8012b2e:	69f9      	ldr	r1, [r7, #28]
 8012b30:	f7fd fd40 	bl	80105b4 <disk_write>
 8012b34:	4603      	mov	r3, r0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d004      	beq.n	8012b44 <f_write+0x1e2>
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	755a      	strb	r2, [r3, #21]
 8012b40:	2301      	movs	r3, #1
 8012b42:	e09e      	b.n	8012c82 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	6a1a      	ldr	r2, [r3, #32]
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	1ad3      	subs	r3, r2, r3
 8012b4c:	6a3a      	ldr	r2, [r7, #32]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d918      	bls.n	8012b84 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	6a1a      	ldr	r2, [r3, #32]
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	1ad3      	subs	r3, r2, r3
 8012b60:	693a      	ldr	r2, [r7, #16]
 8012b62:	8992      	ldrh	r2, [r2, #12]
 8012b64:	fb02 f303 	mul.w	r3, r2, r3
 8012b68:	69fa      	ldr	r2, [r7, #28]
 8012b6a:	18d1      	adds	r1, r2, r3
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	899b      	ldrh	r3, [r3, #12]
 8012b70:	461a      	mov	r2, r3
 8012b72:	f7fd fddf 	bl	8010734 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	7d1b      	ldrb	r3, [r3, #20]
 8012b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b7e:	b2da      	uxtb	r2, r3
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	899b      	ldrh	r3, [r3, #12]
 8012b88:	461a      	mov	r2, r3
 8012b8a:	6a3b      	ldr	r3, [r7, #32]
 8012b8c:	fb02 f303 	mul.w	r3, r2, r3
 8012b90:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012b92:	e04b      	b.n	8012c2c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	6a1b      	ldr	r3, [r3, #32]
 8012b98:	697a      	ldr	r2, [r7, #20]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d016      	beq.n	8012bcc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	699a      	ldr	r2, [r3, #24]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d210      	bcs.n	8012bcc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	7858      	ldrb	r0, [r3, #1]
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	697a      	ldr	r2, [r7, #20]
 8012bb8:	f7fd fcdc 	bl	8010574 <disk_read>
 8012bbc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d004      	beq.n	8012bcc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	755a      	strb	r2, [r3, #21]
 8012bc8:	2301      	movs	r3, #1
 8012bca:	e05a      	b.n	8012c82 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	697a      	ldr	r2, [r7, #20]
 8012bd0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012bd2:	693b      	ldr	r3, [r7, #16]
 8012bd4:	899b      	ldrh	r3, [r3, #12]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	699b      	ldr	r3, [r3, #24]
 8012bdc:	693a      	ldr	r2, [r7, #16]
 8012bde:	8992      	ldrh	r2, [r2, #12]
 8012be0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012be4:	fb02 f201 	mul.w	r2, r2, r1
 8012be8:	1a9b      	subs	r3, r3, r2
 8012bea:	1ac3      	subs	r3, r0, r3
 8012bec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d901      	bls.n	8012bfa <f_write+0x298>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	699b      	ldr	r3, [r3, #24]
 8012c04:	693a      	ldr	r2, [r7, #16]
 8012c06:	8992      	ldrh	r2, [r2, #12]
 8012c08:	fbb3 f0f2 	udiv	r0, r3, r2
 8012c0c:	fb02 f200 	mul.w	r2, r2, r0
 8012c10:	1a9b      	subs	r3, r3, r2
 8012c12:	440b      	add	r3, r1
 8012c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c16:	69f9      	ldr	r1, [r7, #28]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fd fd8b 	bl	8010734 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	7d1b      	ldrb	r3, [r3, #20]
 8012c22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012c26:	b2da      	uxtb	r2, r3
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012c2c:	69fa      	ldr	r2, [r7, #28]
 8012c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c30:	4413      	add	r3, r2
 8012c32:	61fb      	str	r3, [r7, #28]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	699a      	ldr	r2, [r3, #24]
 8012c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3a:	441a      	add	r2, r3
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	619a      	str	r2, [r3, #24]
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	68da      	ldr	r2, [r3, #12]
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	699b      	ldr	r3, [r3, #24]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	bf38      	it	cc
 8012c4c:	461a      	movcc	r2, r3
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	60da      	str	r2, [r3, #12]
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c58:	441a      	add	r2, r3
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	601a      	str	r2, [r3, #0]
 8012c5e:	687a      	ldr	r2, [r7, #4]
 8012c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c62:	1ad3      	subs	r3, r2, r3
 8012c64:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	f47f aeb5 	bne.w	80129d8 <f_write+0x76>
 8012c6e:	e000      	b.n	8012c72 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012c70:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	7d1b      	ldrb	r3, [r3, #20]
 8012c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012c80:	2300      	movs	r3, #0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3730      	adds	r7, #48	; 0x30
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
	...

08012c8c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b086      	sub	sp, #24
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f107 0208 	add.w	r2, r7, #8
 8012c9a:	4611      	mov	r1, r2
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f7ff fab7 	bl	8012210 <validate>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012ca6:	7dfb      	ldrb	r3, [r7, #23]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d167      	bne.n	8012d7c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	7d1b      	ldrb	r3, [r3, #20]
 8012cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d061      	beq.n	8012d7c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	7d1b      	ldrb	r3, [r3, #20]
 8012cbc:	b25b      	sxtb	r3, r3
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	da15      	bge.n	8012cee <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	7858      	ldrb	r0, [r3, #1]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6a1a      	ldr	r2, [r3, #32]
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	f7fd fc6f 	bl	80105b4 <disk_write>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d001      	beq.n	8012ce0 <f_sync+0x54>
 8012cdc:	2301      	movs	r3, #1
 8012cde:	e04e      	b.n	8012d7e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	7d1b      	ldrb	r3, [r3, #20]
 8012ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ce8:	b2da      	uxtb	r2, r3
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012cee:	4b26      	ldr	r3, [pc, #152]	; (8012d88 <f_sync+0xfc>)
 8012cf0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012cf2:	68ba      	ldr	r2, [r7, #8]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	4610      	mov	r0, r2
 8012cfc:	f7fd ff48 	bl	8010b90 <move_window>
 8012d00:	4603      	mov	r3, r0
 8012d02:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012d04:	7dfb      	ldrb	r3, [r7, #23]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d138      	bne.n	8012d7c <f_sync+0xf0>
					dir = fp->dir_ptr;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d0e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	330b      	adds	r3, #11
 8012d14:	781a      	ldrb	r2, [r3, #0]
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	330b      	adds	r3, #11
 8012d1a:	f042 0220 	orr.w	r2, r2, #32
 8012d1e:	b2d2      	uxtb	r2, r2
 8012d20:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6818      	ldr	r0, [r3, #0]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	689b      	ldr	r3, [r3, #8]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	68f9      	ldr	r1, [r7, #12]
 8012d2e:	f7fe fccd 	bl	80116cc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	f103 021c 	add.w	r2, r3, #28
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	4610      	mov	r0, r2
 8012d40:	f7fd fccc 	bl	80106dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	3316      	adds	r3, #22
 8012d48:	6939      	ldr	r1, [r7, #16]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7fd fcc6 	bl	80106dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	3312      	adds	r3, #18
 8012d54:	2100      	movs	r1, #0
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fd fca5 	bl	80106a6 <st_word>
					fs->wflag = 1;
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	2201      	movs	r2, #1
 8012d60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fd ff41 	bl	8010bec <sync_fs>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	7d1b      	ldrb	r3, [r3, #20]
 8012d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d76:	b2da      	uxtb	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3718      	adds	r7, #24
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	274a0000 	.word	0x274a0000

08012d8c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f7ff ff79 	bl	8012c8c <f_sync>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012d9e:	7bfb      	ldrb	r3, [r7, #15]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d118      	bne.n	8012dd6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f107 0208 	add.w	r2, r7, #8
 8012daa:	4611      	mov	r1, r2
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7ff fa2f 	bl	8012210 <validate>
 8012db2:	4603      	mov	r3, r0
 8012db4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012db6:	7bfb      	ldrb	r3, [r7, #15]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d10c      	bne.n	8012dd6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	691b      	ldr	r3, [r3, #16]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fd fe41 	bl	8010a48 <dec_lock>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012dca:	7bfb      	ldrb	r3, [r7, #15]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d102      	bne.n	8012dd6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3710      	adds	r7, #16
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012de0:	b590      	push	{r4, r7, lr}
 8012de2:	b091      	sub	sp, #68	; 0x44
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012de8:	f107 0108 	add.w	r1, r7, #8
 8012dec:	1d3b      	adds	r3, r7, #4
 8012dee:	2200      	movs	r2, #0
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7fe ff87 	bl	8011d04 <find_volume>
 8012df6:	4603      	mov	r3, r0
 8012df8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012dfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d131      	bne.n	8012e68 <f_chdir+0x88>
		dj.obj.fs = fs;
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8012e08:	687a      	ldr	r2, [r7, #4]
 8012e0a:	f107 030c 	add.w	r3, r7, #12
 8012e0e:	4611      	mov	r1, r2
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7fe fe47 	bl	8011aa4 <follow_path>
 8012e16:	4603      	mov	r3, r0
 8012e18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8012e1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d11a      	bne.n	8012e5a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012e24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012e28:	b25b      	sxtb	r3, r3
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	da03      	bge.n	8012e36 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	697a      	ldr	r2, [r7, #20]
 8012e32:	619a      	str	r2, [r3, #24]
 8012e34:	e011      	b.n	8012e5a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8012e36:	7cbb      	ldrb	r3, [r7, #18]
 8012e38:	f003 0310 	and.w	r3, r3, #16
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d009      	beq.n	8012e54 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e44:	68bc      	ldr	r4, [r7, #8]
 8012e46:	4611      	mov	r1, r2
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7fe fc20 	bl	801168e <ld_clust>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	61a3      	str	r3, [r4, #24]
 8012e52:	e002      	b.n	8012e5a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012e54:	2305      	movs	r3, #5
 8012e56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e5e:	2b04      	cmp	r3, #4
 8012e60:	d102      	bne.n	8012e68 <f_chdir+0x88>
 8012e62:	2305      	movs	r3, #5
 8012e64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8012e68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3744      	adds	r7, #68	; 0x44
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd90      	pop	{r4, r7, pc}

08012e74 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b090      	sub	sp, #64	; 0x40
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f107 0208 	add.w	r2, r7, #8
 8012e84:	4611      	mov	r1, r2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff f9c2 	bl	8012210 <validate>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012e92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d103      	bne.n	8012ea2 <f_lseek+0x2e>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	7d5b      	ldrb	r3, [r3, #21]
 8012e9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012ea2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d002      	beq.n	8012eb0 <f_lseek+0x3c>
 8012eaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012eae:	e201      	b.n	80132b4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	f000 80d9 	beq.w	801306c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec0:	d15a      	bne.n	8012f78 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eca:	1d1a      	adds	r2, r3, #4
 8012ecc:	627a      	str	r2, [r7, #36]	; 0x24
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	617b      	str	r3, [r7, #20]
 8012ed2:	2302      	movs	r3, #2
 8012ed4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	689b      	ldr	r3, [r3, #8]
 8012eda:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d03a      	beq.n	8012f58 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee4:	613b      	str	r3, [r7, #16]
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eec:	3302      	adds	r3, #2
 8012eee:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8012ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef2:	60fb      	str	r3, [r7, #12]
 8012ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7fd ff03 	bl	8010d0a <get_fat>
 8012f04:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f08:	2b01      	cmp	r3, #1
 8012f0a:	d804      	bhi.n	8012f16 <f_lseek+0xa2>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2202      	movs	r2, #2
 8012f10:	755a      	strb	r2, [r3, #21]
 8012f12:	2302      	movs	r3, #2
 8012f14:	e1ce      	b.n	80132b4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f1c:	d104      	bne.n	8012f28 <f_lseek+0xb4>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2201      	movs	r2, #1
 8012f22:	755a      	strb	r2, [r3, #21]
 8012f24:	2301      	movs	r3, #1
 8012f26:	e1c5      	b.n	80132b4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d0de      	beq.n	8012ef0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d809      	bhi.n	8012f4e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3c:	1d1a      	adds	r2, r3, #4
 8012f3e:	627a      	str	r2, [r7, #36]	; 0x24
 8012f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f42:	601a      	str	r2, [r3, #0]
 8012f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f46:	1d1a      	adds	r2, r3, #4
 8012f48:	627a      	str	r2, [r7, #36]	; 0x24
 8012f4a:	693a      	ldr	r2, [r7, #16]
 8012f4c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	69db      	ldr	r3, [r3, #28]
 8012f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d3c4      	bcc.n	8012ee2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f5e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d803      	bhi.n	8012f70 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	601a      	str	r2, [r3, #0]
 8012f6e:	e19f      	b.n	80132b0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012f70:	2311      	movs	r3, #17
 8012f72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012f76:	e19b      	b.n	80132b0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	68db      	ldr	r3, [r3, #12]
 8012f7c:	683a      	ldr	r2, [r7, #0]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d902      	bls.n	8012f88 <f_lseek+0x114>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	68db      	ldr	r3, [r3, #12]
 8012f86:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	683a      	ldr	r2, [r7, #0]
 8012f8c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f000 818d 	beq.w	80132b0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	3b01      	subs	r3, #1
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f7fe f998 	bl	80112d2 <clmt_clust>
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012fa8:	68ba      	ldr	r2, [r7, #8]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	69db      	ldr	r3, [r3, #28]
 8012fae:	4619      	mov	r1, r3
 8012fb0:	4610      	mov	r0, r2
 8012fb2:	f7fd fe8b 	bl	8010ccc <clust2sect>
 8012fb6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012fb8:	69bb      	ldr	r3, [r7, #24]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d104      	bne.n	8012fc8 <f_lseek+0x154>
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2202      	movs	r2, #2
 8012fc2:	755a      	strb	r2, [r3, #21]
 8012fc4:	2302      	movs	r3, #2
 8012fc6:	e175      	b.n	80132b4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	3b01      	subs	r3, #1
 8012fcc:	68ba      	ldr	r2, [r7, #8]
 8012fce:	8992      	ldrh	r2, [r2, #12]
 8012fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fd4:	68ba      	ldr	r2, [r7, #8]
 8012fd6:	8952      	ldrh	r2, [r2, #10]
 8012fd8:	3a01      	subs	r2, #1
 8012fda:	4013      	ands	r3, r2
 8012fdc:	69ba      	ldr	r2, [r7, #24]
 8012fde:	4413      	add	r3, r2
 8012fe0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	699b      	ldr	r3, [r3, #24]
 8012fe6:	68ba      	ldr	r2, [r7, #8]
 8012fe8:	8992      	ldrh	r2, [r2, #12]
 8012fea:	fbb3 f1f2 	udiv	r1, r3, r2
 8012fee:	fb02 f201 	mul.w	r2, r2, r1
 8012ff2:	1a9b      	subs	r3, r3, r2
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f000 815b 	beq.w	80132b0 <f_lseek+0x43c>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6a1b      	ldr	r3, [r3, #32]
 8012ffe:	69ba      	ldr	r2, [r7, #24]
 8013000:	429a      	cmp	r2, r3
 8013002:	f000 8155 	beq.w	80132b0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	7d1b      	ldrb	r3, [r3, #20]
 801300a:	b25b      	sxtb	r3, r3
 801300c:	2b00      	cmp	r3, #0
 801300e:	da18      	bge.n	8013042 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	7858      	ldrb	r0, [r3, #1]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6a1a      	ldr	r2, [r3, #32]
 801301e:	2301      	movs	r3, #1
 8013020:	f7fd fac8 	bl	80105b4 <disk_write>
 8013024:	4603      	mov	r3, r0
 8013026:	2b00      	cmp	r3, #0
 8013028:	d004      	beq.n	8013034 <f_lseek+0x1c0>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2201      	movs	r2, #1
 801302e:	755a      	strb	r2, [r3, #21]
 8013030:	2301      	movs	r3, #1
 8013032:	e13f      	b.n	80132b4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	7d1b      	ldrb	r3, [r3, #20]
 8013038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801303c:	b2da      	uxtb	r2, r3
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	7858      	ldrb	r0, [r3, #1]
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801304c:	2301      	movs	r3, #1
 801304e:	69ba      	ldr	r2, [r7, #24]
 8013050:	f7fd fa90 	bl	8010574 <disk_read>
 8013054:	4603      	mov	r3, r0
 8013056:	2b00      	cmp	r3, #0
 8013058:	d004      	beq.n	8013064 <f_lseek+0x1f0>
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2201      	movs	r2, #1
 801305e:	755a      	strb	r2, [r3, #21]
 8013060:	2301      	movs	r3, #1
 8013062:	e127      	b.n	80132b4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	69ba      	ldr	r2, [r7, #24]
 8013068:	621a      	str	r2, [r3, #32]
 801306a:	e121      	b.n	80132b0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	68db      	ldr	r3, [r3, #12]
 8013070:	683a      	ldr	r2, [r7, #0]
 8013072:	429a      	cmp	r2, r3
 8013074:	d908      	bls.n	8013088 <f_lseek+0x214>
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	7d1b      	ldrb	r3, [r3, #20]
 801307a:	f003 0302 	and.w	r3, r3, #2
 801307e:	2b00      	cmp	r3, #0
 8013080:	d102      	bne.n	8013088 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	68db      	ldr	r3, [r3, #12]
 8013086:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	699b      	ldr	r3, [r3, #24]
 801308c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801308e:	2300      	movs	r3, #0
 8013090:	637b      	str	r3, [r7, #52]	; 0x34
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013096:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	f000 80b5 	beq.w	801320a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	895b      	ldrh	r3, [r3, #10]
 80130a4:	461a      	mov	r2, r3
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	899b      	ldrh	r3, [r3, #12]
 80130aa:	fb03 f302 	mul.w	r3, r3, r2
 80130ae:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80130b0:	6a3b      	ldr	r3, [r7, #32]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d01b      	beq.n	80130ee <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	1e5a      	subs	r2, r3, #1
 80130ba:	69fb      	ldr	r3, [r7, #28]
 80130bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80130c0:	6a3b      	ldr	r3, [r7, #32]
 80130c2:	1e59      	subs	r1, r3, #1
 80130c4:	69fb      	ldr	r3, [r7, #28]
 80130c6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d30f      	bcc.n	80130ee <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80130ce:	6a3b      	ldr	r3, [r7, #32]
 80130d0:	1e5a      	subs	r2, r3, #1
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	425b      	negs	r3, r3
 80130d6:	401a      	ands	r2, r3
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	699b      	ldr	r3, [r3, #24]
 80130e0:	683a      	ldr	r2, [r7, #0]
 80130e2:	1ad3      	subs	r3, r2, r3
 80130e4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	69db      	ldr	r3, [r3, #28]
 80130ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80130ec:	e022      	b.n	8013134 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	689b      	ldr	r3, [r3, #8]
 80130f2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80130f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d119      	bne.n	801312e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2100      	movs	r1, #0
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fe f84f 	bl	80111a2 <create_chain>
 8013104:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013108:	2b01      	cmp	r3, #1
 801310a:	d104      	bne.n	8013116 <f_lseek+0x2a2>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2202      	movs	r2, #2
 8013110:	755a      	strb	r2, [r3, #21]
 8013112:	2302      	movs	r3, #2
 8013114:	e0ce      	b.n	80132b4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801311c:	d104      	bne.n	8013128 <f_lseek+0x2b4>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2201      	movs	r2, #1
 8013122:	755a      	strb	r2, [r3, #21]
 8013124:	2301      	movs	r3, #1
 8013126:	e0c5      	b.n	80132b4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801312c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013132:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013136:	2b00      	cmp	r3, #0
 8013138:	d067      	beq.n	801320a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801313a:	e03a      	b.n	80131b2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801313c:	683a      	ldr	r2, [r7, #0]
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	1ad3      	subs	r3, r2, r3
 8013142:	603b      	str	r3, [r7, #0]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	699a      	ldr	r2, [r3, #24]
 8013148:	69fb      	ldr	r3, [r7, #28]
 801314a:	441a      	add	r2, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	7d1b      	ldrb	r3, [r3, #20]
 8013154:	f003 0302 	and.w	r3, r3, #2
 8013158:	2b00      	cmp	r3, #0
 801315a:	d00b      	beq.n	8013174 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013160:	4618      	mov	r0, r3
 8013162:	f7fe f81e 	bl	80111a2 <create_chain>
 8013166:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316a:	2b00      	cmp	r3, #0
 801316c:	d108      	bne.n	8013180 <f_lseek+0x30c>
							ofs = 0; break;
 801316e:	2300      	movs	r3, #0
 8013170:	603b      	str	r3, [r7, #0]
 8013172:	e022      	b.n	80131ba <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013178:	4618      	mov	r0, r3
 801317a:	f7fd fdc6 	bl	8010d0a <get_fat>
 801317e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013186:	d104      	bne.n	8013192 <f_lseek+0x31e>
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2201      	movs	r2, #1
 801318c:	755a      	strb	r2, [r3, #21]
 801318e:	2301      	movs	r3, #1
 8013190:	e090      	b.n	80132b4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013194:	2b01      	cmp	r3, #1
 8013196:	d904      	bls.n	80131a2 <f_lseek+0x32e>
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	69db      	ldr	r3, [r3, #28]
 801319c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801319e:	429a      	cmp	r2, r3
 80131a0:	d304      	bcc.n	80131ac <f_lseek+0x338>
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2202      	movs	r2, #2
 80131a6:	755a      	strb	r2, [r3, #21]
 80131a8:	2302      	movs	r3, #2
 80131aa:	e083      	b.n	80132b4 <f_lseek+0x440>
					fp->clust = clst;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131b0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80131b2:	683a      	ldr	r2, [r7, #0]
 80131b4:	69fb      	ldr	r3, [r7, #28]
 80131b6:	429a      	cmp	r2, r3
 80131b8:	d8c0      	bhi.n	801313c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	699a      	ldr	r2, [r3, #24]
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	441a      	add	r2, r3
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	899b      	ldrh	r3, [r3, #12]
 80131ca:	461a      	mov	r2, r3
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80131d2:	fb02 f201 	mul.w	r2, r2, r1
 80131d6:	1a9b      	subs	r3, r3, r2
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d016      	beq.n	801320a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7fd fd73 	bl	8010ccc <clust2sect>
 80131e6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80131e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d104      	bne.n	80131f8 <f_lseek+0x384>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2202      	movs	r2, #2
 80131f2:	755a      	strb	r2, [r3, #21]
 80131f4:	2302      	movs	r3, #2
 80131f6:	e05d      	b.n	80132b4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	899b      	ldrh	r3, [r3, #12]
 80131fc:	461a      	mov	r2, r3
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	fbb3 f3f2 	udiv	r3, r3, r2
 8013204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013206:	4413      	add	r3, r2
 8013208:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	699a      	ldr	r2, [r3, #24]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	429a      	cmp	r2, r3
 8013214:	d90a      	bls.n	801322c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	699a      	ldr	r2, [r3, #24]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	7d1b      	ldrb	r3, [r3, #20]
 8013222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013226:	b2da      	uxtb	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	699b      	ldr	r3, [r3, #24]
 8013230:	68ba      	ldr	r2, [r7, #8]
 8013232:	8992      	ldrh	r2, [r2, #12]
 8013234:	fbb3 f1f2 	udiv	r1, r3, r2
 8013238:	fb02 f201 	mul.w	r2, r2, r1
 801323c:	1a9b      	subs	r3, r3, r2
 801323e:	2b00      	cmp	r3, #0
 8013240:	d036      	beq.n	80132b0 <f_lseek+0x43c>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6a1b      	ldr	r3, [r3, #32]
 8013246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013248:	429a      	cmp	r2, r3
 801324a:	d031      	beq.n	80132b0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	7d1b      	ldrb	r3, [r3, #20]
 8013250:	b25b      	sxtb	r3, r3
 8013252:	2b00      	cmp	r3, #0
 8013254:	da18      	bge.n	8013288 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	7858      	ldrb	r0, [r3, #1]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6a1a      	ldr	r2, [r3, #32]
 8013264:	2301      	movs	r3, #1
 8013266:	f7fd f9a5 	bl	80105b4 <disk_write>
 801326a:	4603      	mov	r3, r0
 801326c:	2b00      	cmp	r3, #0
 801326e:	d004      	beq.n	801327a <f_lseek+0x406>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2201      	movs	r2, #1
 8013274:	755a      	strb	r2, [r3, #21]
 8013276:	2301      	movs	r3, #1
 8013278:	e01c      	b.n	80132b4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	7d1b      	ldrb	r3, [r3, #20]
 801327e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013282:	b2da      	uxtb	r2, r3
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	7858      	ldrb	r0, [r3, #1]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013292:	2301      	movs	r3, #1
 8013294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013296:	f7fd f96d 	bl	8010574 <disk_read>
 801329a:	4603      	mov	r3, r0
 801329c:	2b00      	cmp	r3, #0
 801329e:	d004      	beq.n	80132aa <f_lseek+0x436>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2201      	movs	r2, #1
 80132a4:	755a      	strb	r2, [r3, #21]
 80132a6:	2301      	movs	r3, #1
 80132a8:	e004      	b.n	80132b4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132ae:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80132b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3740      	adds	r7, #64	; 0x40
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}

080132bc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b09e      	sub	sp, #120	; 0x78
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80132c4:	2300      	movs	r3, #0
 80132c6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80132c8:	f107 010c 	add.w	r1, r7, #12
 80132cc:	1d3b      	adds	r3, r7, #4
 80132ce:	2202      	movs	r2, #2
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7fe fd17 	bl	8011d04 <find_volume>
 80132d6:	4603      	mov	r3, r0
 80132d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80132e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	f040 80a4 	bne.w	8013432 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80132f0:	4611      	mov	r1, r2
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fe fbd6 	bl	8011aa4 <follow_path>
 80132f8:	4603      	mov	r3, r0
 80132fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80132fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013302:	2b00      	cmp	r3, #0
 8013304:	d108      	bne.n	8013318 <f_unlink+0x5c>
 8013306:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801330a:	f003 0320 	and.w	r3, r3, #32
 801330e:	2b00      	cmp	r3, #0
 8013310:	d002      	beq.n	8013318 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013312:	2306      	movs	r3, #6
 8013314:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013318:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801331c:	2b00      	cmp	r3, #0
 801331e:	d108      	bne.n	8013332 <f_unlink+0x76>
 8013320:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013324:	2102      	movs	r1, #2
 8013326:	4618      	mov	r0, r3
 8013328:	f7fd fa82 	bl	8010830 <chk_lock>
 801332c:	4603      	mov	r3, r0
 801332e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013332:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013336:	2b00      	cmp	r3, #0
 8013338:	d17b      	bne.n	8013432 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801333a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801333e:	b25b      	sxtb	r3, r3
 8013340:	2b00      	cmp	r3, #0
 8013342:	da03      	bge.n	801334c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013344:	2306      	movs	r3, #6
 8013346:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801334a:	e008      	b.n	801335e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801334c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013350:	f003 0301 	and.w	r3, r3, #1
 8013354:	2b00      	cmp	r3, #0
 8013356:	d002      	beq.n	801335e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013358:	2307      	movs	r3, #7
 801335a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801335e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013362:	2b00      	cmp	r3, #0
 8013364:	d13d      	bne.n	80133e2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801336a:	4611      	mov	r1, r2
 801336c:	4618      	mov	r0, r3
 801336e:	f7fe f98e 	bl	801168e <ld_clust>
 8013372:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013374:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013378:	f003 0310 	and.w	r3, r3, #16
 801337c:	2b00      	cmp	r3, #0
 801337e:	d030      	beq.n	80133e2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	699b      	ldr	r3, [r3, #24]
 8013384:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013386:	429a      	cmp	r2, r3
 8013388:	d103      	bne.n	8013392 <f_unlink+0xd6>
						res = FR_DENIED;
 801338a:	2307      	movs	r3, #7
 801338c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013390:	e027      	b.n	80133e2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013398:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801339a:	f107 0310 	add.w	r3, r7, #16
 801339e:	2100      	movs	r1, #0
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7fd ffce 	bl	8011342 <dir_sdi>
 80133a6:	4603      	mov	r3, r0
 80133a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80133ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d116      	bne.n	80133e2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80133b4:	f107 0310 	add.w	r3, r7, #16
 80133b8:	2100      	movs	r1, #0
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7fe f9a6 	bl	801170c <dir_read>
 80133c0:	4603      	mov	r3, r0
 80133c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80133c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d102      	bne.n	80133d4 <f_unlink+0x118>
 80133ce:	2307      	movs	r3, #7
 80133d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80133d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133d8:	2b04      	cmp	r3, #4
 80133da:	d102      	bne.n	80133e2 <f_unlink+0x126>
 80133dc:	2300      	movs	r3, #0
 80133de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80133e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d123      	bne.n	8013432 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80133ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7fe fa70 	bl	80118d4 <dir_remove>
 80133f4:	4603      	mov	r3, r0
 80133f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80133fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d10c      	bne.n	801341c <f_unlink+0x160>
 8013402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013404:	2b00      	cmp	r3, #0
 8013406:	d009      	beq.n	801341c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801340c:	2200      	movs	r2, #0
 801340e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013410:	4618      	mov	r0, r3
 8013412:	f7fd fe61 	bl	80110d8 <remove_chain>
 8013416:	4603      	mov	r3, r0
 8013418:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801341c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013420:	2b00      	cmp	r3, #0
 8013422:	d106      	bne.n	8013432 <f_unlink+0x176>
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	4618      	mov	r0, r3
 8013428:	f7fd fbe0 	bl	8010bec <sync_fs>
 801342c:	4603      	mov	r3, r0
 801342e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013432:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013436:	4618      	mov	r0, r3
 8013438:	3778      	adds	r7, #120	; 0x78
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
	...

08013440 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b096      	sub	sp, #88	; 0x58
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013448:	f107 0108 	add.w	r1, r7, #8
 801344c:	1d3b      	adds	r3, r7, #4
 801344e:	2202      	movs	r2, #2
 8013450:	4618      	mov	r0, r3
 8013452:	f7fe fc57 	bl	8011d04 <find_volume>
 8013456:	4603      	mov	r3, r0
 8013458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013464:	2b00      	cmp	r3, #0
 8013466:	f040 80fe 	bne.w	8013666 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	f107 030c 	add.w	r3, r7, #12
 8013470:	4611      	mov	r1, r2
 8013472:	4618      	mov	r0, r3
 8013474:	f7fe fb16 	bl	8011aa4 <follow_path>
 8013478:	4603      	mov	r3, r0
 801347a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801347e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013482:	2b00      	cmp	r3, #0
 8013484:	d102      	bne.n	801348c <f_mkdir+0x4c>
 8013486:	2308      	movs	r3, #8
 8013488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801348c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013490:	2b04      	cmp	r3, #4
 8013492:	d108      	bne.n	80134a6 <f_mkdir+0x66>
 8013494:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013498:	f003 0320 	and.w	r3, r3, #32
 801349c:	2b00      	cmp	r3, #0
 801349e:	d002      	beq.n	80134a6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80134a0:	2306      	movs	r3, #6
 80134a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80134a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134aa:	2b04      	cmp	r3, #4
 80134ac:	f040 80db 	bne.w	8013666 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80134b0:	f107 030c 	add.w	r3, r7, #12
 80134b4:	2100      	movs	r1, #0
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7fd fe73 	bl	80111a2 <create_chain>
 80134bc:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	895b      	ldrh	r3, [r3, #10]
 80134c2:	461a      	mov	r2, r3
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	899b      	ldrh	r3, [r3, #12]
 80134c8:	fb03 f302 	mul.w	r3, r3, r2
 80134cc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80134ce:	2300      	movs	r3, #0
 80134d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80134d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d102      	bne.n	80134e0 <f_mkdir+0xa0>
 80134da:	2307      	movs	r3, #7
 80134dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80134e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134e2:	2b01      	cmp	r3, #1
 80134e4:	d102      	bne.n	80134ec <f_mkdir+0xac>
 80134e6:	2302      	movs	r3, #2
 80134e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80134ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134f2:	d102      	bne.n	80134fa <f_mkdir+0xba>
 80134f4:	2301      	movs	r3, #1
 80134f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80134fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d106      	bne.n	8013510 <f_mkdir+0xd0>
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	4618      	mov	r0, r3
 8013506:	f7fd faff 	bl	8010b08 <sync_window>
 801350a:	4603      	mov	r3, r0
 801350c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013510:	4b58      	ldr	r3, [pc, #352]	; (8013674 <f_mkdir+0x234>)
 8013512:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013518:	2b00      	cmp	r3, #0
 801351a:	d16c      	bne.n	80135f6 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013520:	4618      	mov	r0, r3
 8013522:	f7fd fbd3 	bl	8010ccc <clust2sect>
 8013526:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	3338      	adds	r3, #56	; 0x38
 801352c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	899b      	ldrh	r3, [r3, #12]
 8013532:	461a      	mov	r2, r3
 8013534:	2100      	movs	r1, #0
 8013536:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013538:	f7fd f91d 	bl	8010776 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801353c:	220b      	movs	r2, #11
 801353e:	2120      	movs	r1, #32
 8013540:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013542:	f7fd f918 	bl	8010776 <mem_set>
					dir[DIR_Name] = '.';
 8013546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013548:	222e      	movs	r2, #46	; 0x2e
 801354a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801354e:	330b      	adds	r3, #11
 8013550:	2210      	movs	r2, #16
 8013552:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013556:	3316      	adds	r3, #22
 8013558:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801355a:	4618      	mov	r0, r3
 801355c:	f7fd f8be 	bl	80106dc <st_dword>
					st_clust(fs, dir, dcl);
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013566:	4618      	mov	r0, r3
 8013568:	f7fe f8b0 	bl	80116cc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801356c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801356e:	3320      	adds	r3, #32
 8013570:	2220      	movs	r2, #32
 8013572:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013574:	4618      	mov	r0, r3
 8013576:	f7fd f8dd 	bl	8010734 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801357c:	3321      	adds	r3, #33	; 0x21
 801357e:	222e      	movs	r2, #46	; 0x2e
 8013580:	701a      	strb	r2, [r3, #0]
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	2b03      	cmp	r3, #3
 801358c:	d106      	bne.n	801359c <f_mkdir+0x15c>
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013594:	429a      	cmp	r2, r3
 8013596:	d101      	bne.n	801359c <f_mkdir+0x15c>
 8013598:	2300      	movs	r3, #0
 801359a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801359c:	68b8      	ldr	r0, [r7, #8]
 801359e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135a0:	3320      	adds	r3, #32
 80135a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135a4:	4619      	mov	r1, r3
 80135a6:	f7fe f891 	bl	80116cc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	895b      	ldrh	r3, [r3, #10]
 80135ae:	653b      	str	r3, [r7, #80]	; 0x50
 80135b0:	e01c      	b.n	80135ec <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80135b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135b4:	1c5a      	adds	r2, r3, #1
 80135b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80135b8:	68ba      	ldr	r2, [r7, #8]
 80135ba:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	2201      	movs	r2, #1
 80135c0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7fd fa9f 	bl	8010b08 <sync_window>
 80135ca:	4603      	mov	r3, r0
 80135cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80135d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d10d      	bne.n	80135f4 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	899b      	ldrh	r3, [r3, #12]
 80135dc:	461a      	mov	r2, r3
 80135de:	2100      	movs	r1, #0
 80135e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80135e2:	f7fd f8c8 	bl	8010776 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80135e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135e8:	3b01      	subs	r3, #1
 80135ea:	653b      	str	r3, [r7, #80]	; 0x50
 80135ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d1df      	bne.n	80135b2 <f_mkdir+0x172>
 80135f2:	e000      	b.n	80135f6 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80135f4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80135f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d107      	bne.n	801360e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80135fe:	f107 030c 	add.w	r3, r7, #12
 8013602:	4618      	mov	r0, r3
 8013604:	f7fe f934 	bl	8011870 <dir_register>
 8013608:	4603      	mov	r3, r0
 801360a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801360e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013612:	2b00      	cmp	r3, #0
 8013614:	d120      	bne.n	8013658 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013618:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801361c:	3316      	adds	r3, #22
 801361e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013620:	4618      	mov	r0, r3
 8013622:	f7fd f85b 	bl	80106dc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801362a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801362c:	4618      	mov	r0, r3
 801362e:	f7fe f84d 	bl	80116cc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013634:	330b      	adds	r3, #11
 8013636:	2210      	movs	r2, #16
 8013638:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	2201      	movs	r2, #1
 801363e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013644:	2b00      	cmp	r3, #0
 8013646:	d10e      	bne.n	8013666 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	4618      	mov	r0, r3
 801364c:	f7fd face 	bl	8010bec <sync_fs>
 8013650:	4603      	mov	r3, r0
 8013652:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013656:	e006      	b.n	8013666 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013658:	f107 030c 	add.w	r3, r7, #12
 801365c:	2200      	movs	r2, #0
 801365e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013660:	4618      	mov	r0, r3
 8013662:	f7fd fd39 	bl	80110d8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013666:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801366a:	4618      	mov	r0, r3
 801366c:	3758      	adds	r7, #88	; 0x58
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	274a0000 	.word	0x274a0000

08013678 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b088      	sub	sp, #32
 801367c:	af00      	add	r7, sp, #0
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013684:	2300      	movs	r3, #0
 8013686:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801368c:	e017      	b.n	80136be <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801368e:	f107 0310 	add.w	r3, r7, #16
 8013692:	f107 0114 	add.w	r1, r7, #20
 8013696:	2201      	movs	r2, #1
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f7ff f803 	bl	80126a4 <f_read>
		if (rc != 1) break;
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	2b01      	cmp	r3, #1
 80136a2:	d112      	bne.n	80136ca <f_gets+0x52>
		c = s[0];
 80136a4:	7d3b      	ldrb	r3, [r7, #20]
 80136a6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	1c5a      	adds	r2, r3, #1
 80136ac:	61ba      	str	r2, [r7, #24]
 80136ae:	7dfa      	ldrb	r2, [r7, #23]
 80136b0:	701a      	strb	r2, [r3, #0]
		n++;
 80136b2:	69fb      	ldr	r3, [r7, #28]
 80136b4:	3301      	adds	r3, #1
 80136b6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80136b8:	7dfb      	ldrb	r3, [r7, #23]
 80136ba:	2b0a      	cmp	r3, #10
 80136bc:	d007      	beq.n	80136ce <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	3b01      	subs	r3, #1
 80136c2:	69fa      	ldr	r2, [r7, #28]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	dbe2      	blt.n	801368e <f_gets+0x16>
 80136c8:	e002      	b.n	80136d0 <f_gets+0x58>
		if (rc != 1) break;
 80136ca:	bf00      	nop
 80136cc:	e000      	b.n	80136d0 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80136ce:	bf00      	nop
	}
	*p = 0;
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	2200      	movs	r2, #0
 80136d4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80136d6:	69fb      	ldr	r3, [r7, #28]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d001      	beq.n	80136e0 <f_gets+0x68>
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	e000      	b.n	80136e2 <f_gets+0x6a>
 80136e0:	2300      	movs	r3, #0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3720      	adds	r7, #32
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
	...

080136ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80136ec:	b480      	push	{r7}
 80136ee:	b087      	sub	sp, #28
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	4613      	mov	r3, r2
 80136f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80136fa:	2301      	movs	r3, #1
 80136fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013702:	4b1f      	ldr	r3, [pc, #124]	; (8013780 <FATFS_LinkDriverEx+0x94>)
 8013704:	7a5b      	ldrb	r3, [r3, #9]
 8013706:	b2db      	uxtb	r3, r3
 8013708:	2b00      	cmp	r3, #0
 801370a:	d131      	bne.n	8013770 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801370c:	4b1c      	ldr	r3, [pc, #112]	; (8013780 <FATFS_LinkDriverEx+0x94>)
 801370e:	7a5b      	ldrb	r3, [r3, #9]
 8013710:	b2db      	uxtb	r3, r3
 8013712:	461a      	mov	r2, r3
 8013714:	4b1a      	ldr	r3, [pc, #104]	; (8013780 <FATFS_LinkDriverEx+0x94>)
 8013716:	2100      	movs	r1, #0
 8013718:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801371a:	4b19      	ldr	r3, [pc, #100]	; (8013780 <FATFS_LinkDriverEx+0x94>)
 801371c:	7a5b      	ldrb	r3, [r3, #9]
 801371e:	b2db      	uxtb	r3, r3
 8013720:	4a17      	ldr	r2, [pc, #92]	; (8013780 <FATFS_LinkDriverEx+0x94>)
 8013722:	009b      	lsls	r3, r3, #2
 8013724:	4413      	add	r3, r2
 8013726:	68fa      	ldr	r2, [r7, #12]
 8013728:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801372a:	4b15      	ldr	r3, [pc, #84]	; (8013780 <FATFS_LinkDriverEx+0x94>)
 801372c:	7a5b      	ldrb	r3, [r3, #9]
 801372e:	b2db      	uxtb	r3, r3
 8013730:	461a      	mov	r2, r3
 8013732:	4b13      	ldr	r3, [pc, #76]	; (8013780 <FATFS_LinkDriverEx+0x94>)
 8013734:	4413      	add	r3, r2
 8013736:	79fa      	ldrb	r2, [r7, #7]
 8013738:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801373a:	4b11      	ldr	r3, [pc, #68]	; (8013780 <FATFS_LinkDriverEx+0x94>)
 801373c:	7a5b      	ldrb	r3, [r3, #9]
 801373e:	b2db      	uxtb	r3, r3
 8013740:	1c5a      	adds	r2, r3, #1
 8013742:	b2d1      	uxtb	r1, r2
 8013744:	4a0e      	ldr	r2, [pc, #56]	; (8013780 <FATFS_LinkDriverEx+0x94>)
 8013746:	7251      	strb	r1, [r2, #9]
 8013748:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801374a:	7dbb      	ldrb	r3, [r7, #22]
 801374c:	3330      	adds	r3, #48	; 0x30
 801374e:	b2da      	uxtb	r2, r3
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	3301      	adds	r3, #1
 8013758:	223a      	movs	r2, #58	; 0x3a
 801375a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	3302      	adds	r3, #2
 8013760:	222f      	movs	r2, #47	; 0x2f
 8013762:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	3303      	adds	r3, #3
 8013768:	2200      	movs	r2, #0
 801376a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801376c:	2300      	movs	r3, #0
 801376e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013770:	7dfb      	ldrb	r3, [r7, #23]
}
 8013772:	4618      	mov	r0, r3
 8013774:	371c      	adds	r7, #28
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr
 801377e:	bf00      	nop
 8013780:	2003c4c4 	.word	0x2003c4c4

08013784 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b082      	sub	sp, #8
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801378e:	2200      	movs	r2, #0
 8013790:	6839      	ldr	r1, [r7, #0]
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f7ff ffaa 	bl	80136ec <FATFS_LinkDriverEx>
 8013798:	4603      	mov	r3, r0
}
 801379a:	4618      	mov	r0, r3
 801379c:	3708      	adds	r7, #8
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}

080137a2 <__cxa_guard_acquire>:
 80137a2:	6803      	ldr	r3, [r0, #0]
 80137a4:	07db      	lsls	r3, r3, #31
 80137a6:	d406      	bmi.n	80137b6 <__cxa_guard_acquire+0x14>
 80137a8:	7843      	ldrb	r3, [r0, #1]
 80137aa:	b103      	cbz	r3, 80137ae <__cxa_guard_acquire+0xc>
 80137ac:	deff      	udf	#255	; 0xff
 80137ae:	2301      	movs	r3, #1
 80137b0:	7043      	strb	r3, [r0, #1]
 80137b2:	4618      	mov	r0, r3
 80137b4:	4770      	bx	lr
 80137b6:	2000      	movs	r0, #0
 80137b8:	4770      	bx	lr

080137ba <__cxa_guard_release>:
 80137ba:	2301      	movs	r3, #1
 80137bc:	6003      	str	r3, [r0, #0]
 80137be:	4770      	bx	lr

080137c0 <cos>:
 80137c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137c2:	ec51 0b10 	vmov	r0, r1, d0
 80137c6:	4a1e      	ldr	r2, [pc, #120]	; (8013840 <cos+0x80>)
 80137c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80137cc:	4293      	cmp	r3, r2
 80137ce:	dc06      	bgt.n	80137de <cos+0x1e>
 80137d0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8013838 <cos+0x78>
 80137d4:	f000 fa74 	bl	8013cc0 <__kernel_cos>
 80137d8:	ec51 0b10 	vmov	r0, r1, d0
 80137dc:	e007      	b.n	80137ee <cos+0x2e>
 80137de:	4a19      	ldr	r2, [pc, #100]	; (8013844 <cos+0x84>)
 80137e0:	4293      	cmp	r3, r2
 80137e2:	dd09      	ble.n	80137f8 <cos+0x38>
 80137e4:	ee10 2a10 	vmov	r2, s0
 80137e8:	460b      	mov	r3, r1
 80137ea:	f7ec fd65 	bl	80002b8 <__aeabi_dsub>
 80137ee:	ec41 0b10 	vmov	d0, r0, r1
 80137f2:	b005      	add	sp, #20
 80137f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80137f8:	4668      	mov	r0, sp
 80137fa:	f000 f86d 	bl	80138d8 <__ieee754_rem_pio2>
 80137fe:	f000 0003 	and.w	r0, r0, #3
 8013802:	2801      	cmp	r0, #1
 8013804:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013808:	ed9d 0b00 	vldr	d0, [sp]
 801380c:	d007      	beq.n	801381e <cos+0x5e>
 801380e:	2802      	cmp	r0, #2
 8013810:	d00e      	beq.n	8013830 <cos+0x70>
 8013812:	2800      	cmp	r0, #0
 8013814:	d0de      	beq.n	80137d4 <cos+0x14>
 8013816:	2001      	movs	r0, #1
 8013818:	f000 fe5a 	bl	80144d0 <__kernel_sin>
 801381c:	e7dc      	b.n	80137d8 <cos+0x18>
 801381e:	f000 fe57 	bl	80144d0 <__kernel_sin>
 8013822:	ec53 2b10 	vmov	r2, r3, d0
 8013826:	ee10 0a10 	vmov	r0, s0
 801382a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801382e:	e7de      	b.n	80137ee <cos+0x2e>
 8013830:	f000 fa46 	bl	8013cc0 <__kernel_cos>
 8013834:	e7f5      	b.n	8013822 <cos+0x62>
 8013836:	bf00      	nop
	...
 8013840:	3fe921fb 	.word	0x3fe921fb
 8013844:	7fefffff 	.word	0x7fefffff

08013848 <sin>:
 8013848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801384a:	ec51 0b10 	vmov	r0, r1, d0
 801384e:	4a20      	ldr	r2, [pc, #128]	; (80138d0 <sin+0x88>)
 8013850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013854:	4293      	cmp	r3, r2
 8013856:	dc07      	bgt.n	8013868 <sin+0x20>
 8013858:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80138c8 <sin+0x80>
 801385c:	2000      	movs	r0, #0
 801385e:	f000 fe37 	bl	80144d0 <__kernel_sin>
 8013862:	ec51 0b10 	vmov	r0, r1, d0
 8013866:	e007      	b.n	8013878 <sin+0x30>
 8013868:	4a1a      	ldr	r2, [pc, #104]	; (80138d4 <sin+0x8c>)
 801386a:	4293      	cmp	r3, r2
 801386c:	dd09      	ble.n	8013882 <sin+0x3a>
 801386e:	ee10 2a10 	vmov	r2, s0
 8013872:	460b      	mov	r3, r1
 8013874:	f7ec fd20 	bl	80002b8 <__aeabi_dsub>
 8013878:	ec41 0b10 	vmov	d0, r0, r1
 801387c:	b005      	add	sp, #20
 801387e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013882:	4668      	mov	r0, sp
 8013884:	f000 f828 	bl	80138d8 <__ieee754_rem_pio2>
 8013888:	f000 0003 	and.w	r0, r0, #3
 801388c:	2801      	cmp	r0, #1
 801388e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013892:	ed9d 0b00 	vldr	d0, [sp]
 8013896:	d004      	beq.n	80138a2 <sin+0x5a>
 8013898:	2802      	cmp	r0, #2
 801389a:	d005      	beq.n	80138a8 <sin+0x60>
 801389c:	b970      	cbnz	r0, 80138bc <sin+0x74>
 801389e:	2001      	movs	r0, #1
 80138a0:	e7dd      	b.n	801385e <sin+0x16>
 80138a2:	f000 fa0d 	bl	8013cc0 <__kernel_cos>
 80138a6:	e7dc      	b.n	8013862 <sin+0x1a>
 80138a8:	2001      	movs	r0, #1
 80138aa:	f000 fe11 	bl	80144d0 <__kernel_sin>
 80138ae:	ec53 2b10 	vmov	r2, r3, d0
 80138b2:	ee10 0a10 	vmov	r0, s0
 80138b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80138ba:	e7dd      	b.n	8013878 <sin+0x30>
 80138bc:	f000 fa00 	bl	8013cc0 <__kernel_cos>
 80138c0:	e7f5      	b.n	80138ae <sin+0x66>
 80138c2:	bf00      	nop
 80138c4:	f3af 8000 	nop.w
	...
 80138d0:	3fe921fb 	.word	0x3fe921fb
 80138d4:	7fefffff 	.word	0x7fefffff

080138d8 <__ieee754_rem_pio2>:
 80138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	ec57 6b10 	vmov	r6, r7, d0
 80138e0:	4bc3      	ldr	r3, [pc, #780]	; (8013bf0 <__ieee754_rem_pio2+0x318>)
 80138e2:	b08d      	sub	sp, #52	; 0x34
 80138e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80138e8:	4598      	cmp	r8, r3
 80138ea:	4604      	mov	r4, r0
 80138ec:	9704      	str	r7, [sp, #16]
 80138ee:	dc07      	bgt.n	8013900 <__ieee754_rem_pio2+0x28>
 80138f0:	2200      	movs	r2, #0
 80138f2:	2300      	movs	r3, #0
 80138f4:	ed84 0b00 	vstr	d0, [r4]
 80138f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80138fc:	2500      	movs	r5, #0
 80138fe:	e027      	b.n	8013950 <__ieee754_rem_pio2+0x78>
 8013900:	4bbc      	ldr	r3, [pc, #752]	; (8013bf4 <__ieee754_rem_pio2+0x31c>)
 8013902:	4598      	cmp	r8, r3
 8013904:	dc75      	bgt.n	80139f2 <__ieee754_rem_pio2+0x11a>
 8013906:	9b04      	ldr	r3, [sp, #16]
 8013908:	4dbb      	ldr	r5, [pc, #748]	; (8013bf8 <__ieee754_rem_pio2+0x320>)
 801390a:	2b00      	cmp	r3, #0
 801390c:	ee10 0a10 	vmov	r0, s0
 8013910:	a3a9      	add	r3, pc, #676	; (adr r3, 8013bb8 <__ieee754_rem_pio2+0x2e0>)
 8013912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013916:	4639      	mov	r1, r7
 8013918:	dd36      	ble.n	8013988 <__ieee754_rem_pio2+0xb0>
 801391a:	f7ec fccd 	bl	80002b8 <__aeabi_dsub>
 801391e:	45a8      	cmp	r8, r5
 8013920:	4606      	mov	r6, r0
 8013922:	460f      	mov	r7, r1
 8013924:	d018      	beq.n	8013958 <__ieee754_rem_pio2+0x80>
 8013926:	a3a6      	add	r3, pc, #664	; (adr r3, 8013bc0 <__ieee754_rem_pio2+0x2e8>)
 8013928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801392c:	f7ec fcc4 	bl	80002b8 <__aeabi_dsub>
 8013930:	4602      	mov	r2, r0
 8013932:	460b      	mov	r3, r1
 8013934:	e9c4 2300 	strd	r2, r3, [r4]
 8013938:	4630      	mov	r0, r6
 801393a:	4639      	mov	r1, r7
 801393c:	f7ec fcbc 	bl	80002b8 <__aeabi_dsub>
 8013940:	a39f      	add	r3, pc, #636	; (adr r3, 8013bc0 <__ieee754_rem_pio2+0x2e8>)
 8013942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013946:	f7ec fcb7 	bl	80002b8 <__aeabi_dsub>
 801394a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801394e:	2501      	movs	r5, #1
 8013950:	4628      	mov	r0, r5
 8013952:	b00d      	add	sp, #52	; 0x34
 8013954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013958:	a39b      	add	r3, pc, #620	; (adr r3, 8013bc8 <__ieee754_rem_pio2+0x2f0>)
 801395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395e:	f7ec fcab 	bl	80002b8 <__aeabi_dsub>
 8013962:	a39b      	add	r3, pc, #620	; (adr r3, 8013bd0 <__ieee754_rem_pio2+0x2f8>)
 8013964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013968:	4606      	mov	r6, r0
 801396a:	460f      	mov	r7, r1
 801396c:	f7ec fca4 	bl	80002b8 <__aeabi_dsub>
 8013970:	4602      	mov	r2, r0
 8013972:	460b      	mov	r3, r1
 8013974:	e9c4 2300 	strd	r2, r3, [r4]
 8013978:	4630      	mov	r0, r6
 801397a:	4639      	mov	r1, r7
 801397c:	f7ec fc9c 	bl	80002b8 <__aeabi_dsub>
 8013980:	a393      	add	r3, pc, #588	; (adr r3, 8013bd0 <__ieee754_rem_pio2+0x2f8>)
 8013982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013986:	e7de      	b.n	8013946 <__ieee754_rem_pio2+0x6e>
 8013988:	f7ec fc98 	bl	80002bc <__adddf3>
 801398c:	45a8      	cmp	r8, r5
 801398e:	4606      	mov	r6, r0
 8013990:	460f      	mov	r7, r1
 8013992:	d016      	beq.n	80139c2 <__ieee754_rem_pio2+0xea>
 8013994:	a38a      	add	r3, pc, #552	; (adr r3, 8013bc0 <__ieee754_rem_pio2+0x2e8>)
 8013996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801399a:	f7ec fc8f 	bl	80002bc <__adddf3>
 801399e:	4602      	mov	r2, r0
 80139a0:	460b      	mov	r3, r1
 80139a2:	e9c4 2300 	strd	r2, r3, [r4]
 80139a6:	4630      	mov	r0, r6
 80139a8:	4639      	mov	r1, r7
 80139aa:	f7ec fc85 	bl	80002b8 <__aeabi_dsub>
 80139ae:	a384      	add	r3, pc, #528	; (adr r3, 8013bc0 <__ieee754_rem_pio2+0x2e8>)
 80139b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b4:	f7ec fc82 	bl	80002bc <__adddf3>
 80139b8:	f04f 35ff 	mov.w	r5, #4294967295
 80139bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80139c0:	e7c6      	b.n	8013950 <__ieee754_rem_pio2+0x78>
 80139c2:	a381      	add	r3, pc, #516	; (adr r3, 8013bc8 <__ieee754_rem_pio2+0x2f0>)
 80139c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c8:	f7ec fc78 	bl	80002bc <__adddf3>
 80139cc:	a380      	add	r3, pc, #512	; (adr r3, 8013bd0 <__ieee754_rem_pio2+0x2f8>)
 80139ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d2:	4606      	mov	r6, r0
 80139d4:	460f      	mov	r7, r1
 80139d6:	f7ec fc71 	bl	80002bc <__adddf3>
 80139da:	4602      	mov	r2, r0
 80139dc:	460b      	mov	r3, r1
 80139de:	e9c4 2300 	strd	r2, r3, [r4]
 80139e2:	4630      	mov	r0, r6
 80139e4:	4639      	mov	r1, r7
 80139e6:	f7ec fc67 	bl	80002b8 <__aeabi_dsub>
 80139ea:	a379      	add	r3, pc, #484	; (adr r3, 8013bd0 <__ieee754_rem_pio2+0x2f8>)
 80139ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f0:	e7e0      	b.n	80139b4 <__ieee754_rem_pio2+0xdc>
 80139f2:	4b82      	ldr	r3, [pc, #520]	; (8013bfc <__ieee754_rem_pio2+0x324>)
 80139f4:	4598      	cmp	r8, r3
 80139f6:	f300 80d0 	bgt.w	8013b9a <__ieee754_rem_pio2+0x2c2>
 80139fa:	f000 fe23 	bl	8014644 <fabs>
 80139fe:	ec57 6b10 	vmov	r6, r7, d0
 8013a02:	ee10 0a10 	vmov	r0, s0
 8013a06:	a374      	add	r3, pc, #464	; (adr r3, 8013bd8 <__ieee754_rem_pio2+0x300>)
 8013a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a0c:	4639      	mov	r1, r7
 8013a0e:	f7ec fe0b 	bl	8000628 <__aeabi_dmul>
 8013a12:	2200      	movs	r2, #0
 8013a14:	4b7a      	ldr	r3, [pc, #488]	; (8013c00 <__ieee754_rem_pio2+0x328>)
 8013a16:	f7ec fc51 	bl	80002bc <__adddf3>
 8013a1a:	f7ed f8b5 	bl	8000b88 <__aeabi_d2iz>
 8013a1e:	4605      	mov	r5, r0
 8013a20:	f7ec fd98 	bl	8000554 <__aeabi_i2d>
 8013a24:	a364      	add	r3, pc, #400	; (adr r3, 8013bb8 <__ieee754_rem_pio2+0x2e0>)
 8013a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a2e:	f7ec fdfb 	bl	8000628 <__aeabi_dmul>
 8013a32:	4602      	mov	r2, r0
 8013a34:	460b      	mov	r3, r1
 8013a36:	4630      	mov	r0, r6
 8013a38:	4639      	mov	r1, r7
 8013a3a:	f7ec fc3d 	bl	80002b8 <__aeabi_dsub>
 8013a3e:	a360      	add	r3, pc, #384	; (adr r3, 8013bc0 <__ieee754_rem_pio2+0x2e8>)
 8013a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a44:	4682      	mov	sl, r0
 8013a46:	468b      	mov	fp, r1
 8013a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a4c:	f7ec fdec 	bl	8000628 <__aeabi_dmul>
 8013a50:	2d1f      	cmp	r5, #31
 8013a52:	4606      	mov	r6, r0
 8013a54:	460f      	mov	r7, r1
 8013a56:	dc0c      	bgt.n	8013a72 <__ieee754_rem_pio2+0x19a>
 8013a58:	1e6a      	subs	r2, r5, #1
 8013a5a:	4b6a      	ldr	r3, [pc, #424]	; (8013c04 <__ieee754_rem_pio2+0x32c>)
 8013a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a60:	4543      	cmp	r3, r8
 8013a62:	d006      	beq.n	8013a72 <__ieee754_rem_pio2+0x19a>
 8013a64:	4632      	mov	r2, r6
 8013a66:	463b      	mov	r3, r7
 8013a68:	4650      	mov	r0, sl
 8013a6a:	4659      	mov	r1, fp
 8013a6c:	f7ec fc24 	bl	80002b8 <__aeabi_dsub>
 8013a70:	e00e      	b.n	8013a90 <__ieee754_rem_pio2+0x1b8>
 8013a72:	4632      	mov	r2, r6
 8013a74:	463b      	mov	r3, r7
 8013a76:	4650      	mov	r0, sl
 8013a78:	4659      	mov	r1, fp
 8013a7a:	f7ec fc1d 	bl	80002b8 <__aeabi_dsub>
 8013a7e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013a82:	9305      	str	r3, [sp, #20]
 8013a84:	9a05      	ldr	r2, [sp, #20]
 8013a86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013a8a:	1ad3      	subs	r3, r2, r3
 8013a8c:	2b10      	cmp	r3, #16
 8013a8e:	dc02      	bgt.n	8013a96 <__ieee754_rem_pio2+0x1be>
 8013a90:	e9c4 0100 	strd	r0, r1, [r4]
 8013a94:	e039      	b.n	8013b0a <__ieee754_rem_pio2+0x232>
 8013a96:	a34c      	add	r3, pc, #304	; (adr r3, 8013bc8 <__ieee754_rem_pio2+0x2f0>)
 8013a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013aa0:	f7ec fdc2 	bl	8000628 <__aeabi_dmul>
 8013aa4:	4606      	mov	r6, r0
 8013aa6:	460f      	mov	r7, r1
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	460b      	mov	r3, r1
 8013aac:	4650      	mov	r0, sl
 8013aae:	4659      	mov	r1, fp
 8013ab0:	f7ec fc02 	bl	80002b8 <__aeabi_dsub>
 8013ab4:	4602      	mov	r2, r0
 8013ab6:	460b      	mov	r3, r1
 8013ab8:	4680      	mov	r8, r0
 8013aba:	4689      	mov	r9, r1
 8013abc:	4650      	mov	r0, sl
 8013abe:	4659      	mov	r1, fp
 8013ac0:	f7ec fbfa 	bl	80002b8 <__aeabi_dsub>
 8013ac4:	4632      	mov	r2, r6
 8013ac6:	463b      	mov	r3, r7
 8013ac8:	f7ec fbf6 	bl	80002b8 <__aeabi_dsub>
 8013acc:	a340      	add	r3, pc, #256	; (adr r3, 8013bd0 <__ieee754_rem_pio2+0x2f8>)
 8013ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad2:	4606      	mov	r6, r0
 8013ad4:	460f      	mov	r7, r1
 8013ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ada:	f7ec fda5 	bl	8000628 <__aeabi_dmul>
 8013ade:	4632      	mov	r2, r6
 8013ae0:	463b      	mov	r3, r7
 8013ae2:	f7ec fbe9 	bl	80002b8 <__aeabi_dsub>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	460b      	mov	r3, r1
 8013aea:	4606      	mov	r6, r0
 8013aec:	460f      	mov	r7, r1
 8013aee:	4640      	mov	r0, r8
 8013af0:	4649      	mov	r1, r9
 8013af2:	f7ec fbe1 	bl	80002b8 <__aeabi_dsub>
 8013af6:	9a05      	ldr	r2, [sp, #20]
 8013af8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013afc:	1ad3      	subs	r3, r2, r3
 8013afe:	2b31      	cmp	r3, #49	; 0x31
 8013b00:	dc20      	bgt.n	8013b44 <__ieee754_rem_pio2+0x26c>
 8013b02:	e9c4 0100 	strd	r0, r1, [r4]
 8013b06:	46c2      	mov	sl, r8
 8013b08:	46cb      	mov	fp, r9
 8013b0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013b0e:	4650      	mov	r0, sl
 8013b10:	4642      	mov	r2, r8
 8013b12:	464b      	mov	r3, r9
 8013b14:	4659      	mov	r1, fp
 8013b16:	f7ec fbcf 	bl	80002b8 <__aeabi_dsub>
 8013b1a:	463b      	mov	r3, r7
 8013b1c:	4632      	mov	r2, r6
 8013b1e:	f7ec fbcb 	bl	80002b8 <__aeabi_dsub>
 8013b22:	9b04      	ldr	r3, [sp, #16]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013b2a:	f6bf af11 	bge.w	8013950 <__ieee754_rem_pio2+0x78>
 8013b2e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013b32:	6063      	str	r3, [r4, #4]
 8013b34:	f8c4 8000 	str.w	r8, [r4]
 8013b38:	60a0      	str	r0, [r4, #8]
 8013b3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b3e:	60e3      	str	r3, [r4, #12]
 8013b40:	426d      	negs	r5, r5
 8013b42:	e705      	b.n	8013950 <__ieee754_rem_pio2+0x78>
 8013b44:	a326      	add	r3, pc, #152	; (adr r3, 8013be0 <__ieee754_rem_pio2+0x308>)
 8013b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b4e:	f7ec fd6b 	bl	8000628 <__aeabi_dmul>
 8013b52:	4606      	mov	r6, r0
 8013b54:	460f      	mov	r7, r1
 8013b56:	4602      	mov	r2, r0
 8013b58:	460b      	mov	r3, r1
 8013b5a:	4640      	mov	r0, r8
 8013b5c:	4649      	mov	r1, r9
 8013b5e:	f7ec fbab 	bl	80002b8 <__aeabi_dsub>
 8013b62:	4602      	mov	r2, r0
 8013b64:	460b      	mov	r3, r1
 8013b66:	4682      	mov	sl, r0
 8013b68:	468b      	mov	fp, r1
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	4649      	mov	r1, r9
 8013b6e:	f7ec fba3 	bl	80002b8 <__aeabi_dsub>
 8013b72:	4632      	mov	r2, r6
 8013b74:	463b      	mov	r3, r7
 8013b76:	f7ec fb9f 	bl	80002b8 <__aeabi_dsub>
 8013b7a:	a31b      	add	r3, pc, #108	; (adr r3, 8013be8 <__ieee754_rem_pio2+0x310>)
 8013b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b80:	4606      	mov	r6, r0
 8013b82:	460f      	mov	r7, r1
 8013b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b88:	f7ec fd4e 	bl	8000628 <__aeabi_dmul>
 8013b8c:	4632      	mov	r2, r6
 8013b8e:	463b      	mov	r3, r7
 8013b90:	f7ec fb92 	bl	80002b8 <__aeabi_dsub>
 8013b94:	4606      	mov	r6, r0
 8013b96:	460f      	mov	r7, r1
 8013b98:	e764      	b.n	8013a64 <__ieee754_rem_pio2+0x18c>
 8013b9a:	4b1b      	ldr	r3, [pc, #108]	; (8013c08 <__ieee754_rem_pio2+0x330>)
 8013b9c:	4598      	cmp	r8, r3
 8013b9e:	dd35      	ble.n	8013c0c <__ieee754_rem_pio2+0x334>
 8013ba0:	ee10 2a10 	vmov	r2, s0
 8013ba4:	463b      	mov	r3, r7
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	4639      	mov	r1, r7
 8013baa:	f7ec fb85 	bl	80002b8 <__aeabi_dsub>
 8013bae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013bb2:	e9c4 0100 	strd	r0, r1, [r4]
 8013bb6:	e6a1      	b.n	80138fc <__ieee754_rem_pio2+0x24>
 8013bb8:	54400000 	.word	0x54400000
 8013bbc:	3ff921fb 	.word	0x3ff921fb
 8013bc0:	1a626331 	.word	0x1a626331
 8013bc4:	3dd0b461 	.word	0x3dd0b461
 8013bc8:	1a600000 	.word	0x1a600000
 8013bcc:	3dd0b461 	.word	0x3dd0b461
 8013bd0:	2e037073 	.word	0x2e037073
 8013bd4:	3ba3198a 	.word	0x3ba3198a
 8013bd8:	6dc9c883 	.word	0x6dc9c883
 8013bdc:	3fe45f30 	.word	0x3fe45f30
 8013be0:	2e000000 	.word	0x2e000000
 8013be4:	3ba3198a 	.word	0x3ba3198a
 8013be8:	252049c1 	.word	0x252049c1
 8013bec:	397b839a 	.word	0x397b839a
 8013bf0:	3fe921fb 	.word	0x3fe921fb
 8013bf4:	4002d97b 	.word	0x4002d97b
 8013bf8:	3ff921fb 	.word	0x3ff921fb
 8013bfc:	413921fb 	.word	0x413921fb
 8013c00:	3fe00000 	.word	0x3fe00000
 8013c04:	080192e8 	.word	0x080192e8
 8013c08:	7fefffff 	.word	0x7fefffff
 8013c0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013c10:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013c14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013c18:	4630      	mov	r0, r6
 8013c1a:	460f      	mov	r7, r1
 8013c1c:	f7ec ffb4 	bl	8000b88 <__aeabi_d2iz>
 8013c20:	f7ec fc98 	bl	8000554 <__aeabi_i2d>
 8013c24:	4602      	mov	r2, r0
 8013c26:	460b      	mov	r3, r1
 8013c28:	4630      	mov	r0, r6
 8013c2a:	4639      	mov	r1, r7
 8013c2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013c30:	f7ec fb42 	bl	80002b8 <__aeabi_dsub>
 8013c34:	2200      	movs	r2, #0
 8013c36:	4b1f      	ldr	r3, [pc, #124]	; (8013cb4 <__ieee754_rem_pio2+0x3dc>)
 8013c38:	f7ec fcf6 	bl	8000628 <__aeabi_dmul>
 8013c3c:	460f      	mov	r7, r1
 8013c3e:	4606      	mov	r6, r0
 8013c40:	f7ec ffa2 	bl	8000b88 <__aeabi_d2iz>
 8013c44:	f7ec fc86 	bl	8000554 <__aeabi_i2d>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	460b      	mov	r3, r1
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	4639      	mov	r1, r7
 8013c50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013c54:	f7ec fb30 	bl	80002b8 <__aeabi_dsub>
 8013c58:	2200      	movs	r2, #0
 8013c5a:	4b16      	ldr	r3, [pc, #88]	; (8013cb4 <__ieee754_rem_pio2+0x3dc>)
 8013c5c:	f7ec fce4 	bl	8000628 <__aeabi_dmul>
 8013c60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013c64:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013c68:	f04f 0803 	mov.w	r8, #3
 8013c6c:	2600      	movs	r6, #0
 8013c6e:	2700      	movs	r7, #0
 8013c70:	4632      	mov	r2, r6
 8013c72:	463b      	mov	r3, r7
 8013c74:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8013c7c:	f7ec ff3c 	bl	8000af8 <__aeabi_dcmpeq>
 8013c80:	b9b0      	cbnz	r0, 8013cb0 <__ieee754_rem_pio2+0x3d8>
 8013c82:	4b0d      	ldr	r3, [pc, #52]	; (8013cb8 <__ieee754_rem_pio2+0x3e0>)
 8013c84:	9301      	str	r3, [sp, #4]
 8013c86:	2302      	movs	r3, #2
 8013c88:	9300      	str	r3, [sp, #0]
 8013c8a:	462a      	mov	r2, r5
 8013c8c:	4643      	mov	r3, r8
 8013c8e:	4621      	mov	r1, r4
 8013c90:	a806      	add	r0, sp, #24
 8013c92:	f000 f8dd 	bl	8013e50 <__kernel_rem_pio2>
 8013c96:	9b04      	ldr	r3, [sp, #16]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	4605      	mov	r5, r0
 8013c9c:	f6bf ae58 	bge.w	8013950 <__ieee754_rem_pio2+0x78>
 8013ca0:	6863      	ldr	r3, [r4, #4]
 8013ca2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013ca6:	6063      	str	r3, [r4, #4]
 8013ca8:	68e3      	ldr	r3, [r4, #12]
 8013caa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013cae:	e746      	b.n	8013b3e <__ieee754_rem_pio2+0x266>
 8013cb0:	46d0      	mov	r8, sl
 8013cb2:	e7dd      	b.n	8013c70 <__ieee754_rem_pio2+0x398>
 8013cb4:	41700000 	.word	0x41700000
 8013cb8:	08019368 	.word	0x08019368
 8013cbc:	00000000 	.word	0x00000000

08013cc0 <__kernel_cos>:
 8013cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cc4:	ec59 8b10 	vmov	r8, r9, d0
 8013cc8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8013ccc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013cd0:	ed2d 8b02 	vpush	{d8}
 8013cd4:	eeb0 8a41 	vmov.f32	s16, s2
 8013cd8:	eef0 8a61 	vmov.f32	s17, s3
 8013cdc:	da07      	bge.n	8013cee <__kernel_cos+0x2e>
 8013cde:	ee10 0a10 	vmov	r0, s0
 8013ce2:	4649      	mov	r1, r9
 8013ce4:	f7ec ff50 	bl	8000b88 <__aeabi_d2iz>
 8013ce8:	2800      	cmp	r0, #0
 8013cea:	f000 8089 	beq.w	8013e00 <__kernel_cos+0x140>
 8013cee:	4642      	mov	r2, r8
 8013cf0:	464b      	mov	r3, r9
 8013cf2:	4640      	mov	r0, r8
 8013cf4:	4649      	mov	r1, r9
 8013cf6:	f7ec fc97 	bl	8000628 <__aeabi_dmul>
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	4b4e      	ldr	r3, [pc, #312]	; (8013e38 <__kernel_cos+0x178>)
 8013cfe:	4604      	mov	r4, r0
 8013d00:	460d      	mov	r5, r1
 8013d02:	f7ec fc91 	bl	8000628 <__aeabi_dmul>
 8013d06:	a340      	add	r3, pc, #256	; (adr r3, 8013e08 <__kernel_cos+0x148>)
 8013d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0c:	4682      	mov	sl, r0
 8013d0e:	468b      	mov	fp, r1
 8013d10:	4620      	mov	r0, r4
 8013d12:	4629      	mov	r1, r5
 8013d14:	f7ec fc88 	bl	8000628 <__aeabi_dmul>
 8013d18:	a33d      	add	r3, pc, #244	; (adr r3, 8013e10 <__kernel_cos+0x150>)
 8013d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d1e:	f7ec facd 	bl	80002bc <__adddf3>
 8013d22:	4622      	mov	r2, r4
 8013d24:	462b      	mov	r3, r5
 8013d26:	f7ec fc7f 	bl	8000628 <__aeabi_dmul>
 8013d2a:	a33b      	add	r3, pc, #236	; (adr r3, 8013e18 <__kernel_cos+0x158>)
 8013d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d30:	f7ec fac2 	bl	80002b8 <__aeabi_dsub>
 8013d34:	4622      	mov	r2, r4
 8013d36:	462b      	mov	r3, r5
 8013d38:	f7ec fc76 	bl	8000628 <__aeabi_dmul>
 8013d3c:	a338      	add	r3, pc, #224	; (adr r3, 8013e20 <__kernel_cos+0x160>)
 8013d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d42:	f7ec fabb 	bl	80002bc <__adddf3>
 8013d46:	4622      	mov	r2, r4
 8013d48:	462b      	mov	r3, r5
 8013d4a:	f7ec fc6d 	bl	8000628 <__aeabi_dmul>
 8013d4e:	a336      	add	r3, pc, #216	; (adr r3, 8013e28 <__kernel_cos+0x168>)
 8013d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d54:	f7ec fab0 	bl	80002b8 <__aeabi_dsub>
 8013d58:	4622      	mov	r2, r4
 8013d5a:	462b      	mov	r3, r5
 8013d5c:	f7ec fc64 	bl	8000628 <__aeabi_dmul>
 8013d60:	a333      	add	r3, pc, #204	; (adr r3, 8013e30 <__kernel_cos+0x170>)
 8013d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d66:	f7ec faa9 	bl	80002bc <__adddf3>
 8013d6a:	4622      	mov	r2, r4
 8013d6c:	462b      	mov	r3, r5
 8013d6e:	f7ec fc5b 	bl	8000628 <__aeabi_dmul>
 8013d72:	4622      	mov	r2, r4
 8013d74:	462b      	mov	r3, r5
 8013d76:	f7ec fc57 	bl	8000628 <__aeabi_dmul>
 8013d7a:	ec53 2b18 	vmov	r2, r3, d8
 8013d7e:	4604      	mov	r4, r0
 8013d80:	460d      	mov	r5, r1
 8013d82:	4640      	mov	r0, r8
 8013d84:	4649      	mov	r1, r9
 8013d86:	f7ec fc4f 	bl	8000628 <__aeabi_dmul>
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	4602      	mov	r2, r0
 8013d8e:	4629      	mov	r1, r5
 8013d90:	4620      	mov	r0, r4
 8013d92:	f7ec fa91 	bl	80002b8 <__aeabi_dsub>
 8013d96:	4b29      	ldr	r3, [pc, #164]	; (8013e3c <__kernel_cos+0x17c>)
 8013d98:	429e      	cmp	r6, r3
 8013d9a:	4680      	mov	r8, r0
 8013d9c:	4689      	mov	r9, r1
 8013d9e:	dc11      	bgt.n	8013dc4 <__kernel_cos+0x104>
 8013da0:	4602      	mov	r2, r0
 8013da2:	460b      	mov	r3, r1
 8013da4:	4650      	mov	r0, sl
 8013da6:	4659      	mov	r1, fp
 8013da8:	f7ec fa86 	bl	80002b8 <__aeabi_dsub>
 8013dac:	460b      	mov	r3, r1
 8013dae:	4924      	ldr	r1, [pc, #144]	; (8013e40 <__kernel_cos+0x180>)
 8013db0:	4602      	mov	r2, r0
 8013db2:	2000      	movs	r0, #0
 8013db4:	f7ec fa80 	bl	80002b8 <__aeabi_dsub>
 8013db8:	ecbd 8b02 	vpop	{d8}
 8013dbc:	ec41 0b10 	vmov	d0, r0, r1
 8013dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dc4:	4b1f      	ldr	r3, [pc, #124]	; (8013e44 <__kernel_cos+0x184>)
 8013dc6:	491e      	ldr	r1, [pc, #120]	; (8013e40 <__kernel_cos+0x180>)
 8013dc8:	429e      	cmp	r6, r3
 8013dca:	bfcc      	ite	gt
 8013dcc:	4d1e      	ldrgt	r5, [pc, #120]	; (8013e48 <__kernel_cos+0x188>)
 8013dce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8013dd2:	2400      	movs	r4, #0
 8013dd4:	4622      	mov	r2, r4
 8013dd6:	462b      	mov	r3, r5
 8013dd8:	2000      	movs	r0, #0
 8013dda:	f7ec fa6d 	bl	80002b8 <__aeabi_dsub>
 8013dde:	4622      	mov	r2, r4
 8013de0:	4606      	mov	r6, r0
 8013de2:	460f      	mov	r7, r1
 8013de4:	462b      	mov	r3, r5
 8013de6:	4650      	mov	r0, sl
 8013de8:	4659      	mov	r1, fp
 8013dea:	f7ec fa65 	bl	80002b8 <__aeabi_dsub>
 8013dee:	4642      	mov	r2, r8
 8013df0:	464b      	mov	r3, r9
 8013df2:	f7ec fa61 	bl	80002b8 <__aeabi_dsub>
 8013df6:	4602      	mov	r2, r0
 8013df8:	460b      	mov	r3, r1
 8013dfa:	4630      	mov	r0, r6
 8013dfc:	4639      	mov	r1, r7
 8013dfe:	e7d9      	b.n	8013db4 <__kernel_cos+0xf4>
 8013e00:	2000      	movs	r0, #0
 8013e02:	490f      	ldr	r1, [pc, #60]	; (8013e40 <__kernel_cos+0x180>)
 8013e04:	e7d8      	b.n	8013db8 <__kernel_cos+0xf8>
 8013e06:	bf00      	nop
 8013e08:	be8838d4 	.word	0xbe8838d4
 8013e0c:	bda8fae9 	.word	0xbda8fae9
 8013e10:	bdb4b1c4 	.word	0xbdb4b1c4
 8013e14:	3e21ee9e 	.word	0x3e21ee9e
 8013e18:	809c52ad 	.word	0x809c52ad
 8013e1c:	3e927e4f 	.word	0x3e927e4f
 8013e20:	19cb1590 	.word	0x19cb1590
 8013e24:	3efa01a0 	.word	0x3efa01a0
 8013e28:	16c15177 	.word	0x16c15177
 8013e2c:	3f56c16c 	.word	0x3f56c16c
 8013e30:	5555554c 	.word	0x5555554c
 8013e34:	3fa55555 	.word	0x3fa55555
 8013e38:	3fe00000 	.word	0x3fe00000
 8013e3c:	3fd33332 	.word	0x3fd33332
 8013e40:	3ff00000 	.word	0x3ff00000
 8013e44:	3fe90000 	.word	0x3fe90000
 8013e48:	3fd20000 	.word	0x3fd20000
 8013e4c:	00000000 	.word	0x00000000

08013e50 <__kernel_rem_pio2>:
 8013e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e54:	ed2d 8b02 	vpush	{d8}
 8013e58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013e5c:	1ed4      	subs	r4, r2, #3
 8013e5e:	9308      	str	r3, [sp, #32]
 8013e60:	9101      	str	r1, [sp, #4]
 8013e62:	4bc5      	ldr	r3, [pc, #788]	; (8014178 <__kernel_rem_pio2+0x328>)
 8013e64:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013e66:	9009      	str	r0, [sp, #36]	; 0x24
 8013e68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013e6c:	9304      	str	r3, [sp, #16]
 8013e6e:	9b08      	ldr	r3, [sp, #32]
 8013e70:	3b01      	subs	r3, #1
 8013e72:	9307      	str	r3, [sp, #28]
 8013e74:	2318      	movs	r3, #24
 8013e76:	fb94 f4f3 	sdiv	r4, r4, r3
 8013e7a:	f06f 0317 	mvn.w	r3, #23
 8013e7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8013e82:	fb04 3303 	mla	r3, r4, r3, r3
 8013e86:	eb03 0a02 	add.w	sl, r3, r2
 8013e8a:	9b04      	ldr	r3, [sp, #16]
 8013e8c:	9a07      	ldr	r2, [sp, #28]
 8013e8e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014168 <__kernel_rem_pio2+0x318>
 8013e92:	eb03 0802 	add.w	r8, r3, r2
 8013e96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013e98:	1aa7      	subs	r7, r4, r2
 8013e9a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013e9e:	ae22      	add	r6, sp, #136	; 0x88
 8013ea0:	2500      	movs	r5, #0
 8013ea2:	4545      	cmp	r5, r8
 8013ea4:	dd13      	ble.n	8013ece <__kernel_rem_pio2+0x7e>
 8013ea6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014168 <__kernel_rem_pio2+0x318>
 8013eaa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013eae:	2600      	movs	r6, #0
 8013eb0:	9b04      	ldr	r3, [sp, #16]
 8013eb2:	429e      	cmp	r6, r3
 8013eb4:	dc32      	bgt.n	8013f1c <__kernel_rem_pio2+0xcc>
 8013eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eb8:	9302      	str	r3, [sp, #8]
 8013eba:	9b08      	ldr	r3, [sp, #32]
 8013ebc:	199d      	adds	r5, r3, r6
 8013ebe:	ab22      	add	r3, sp, #136	; 0x88
 8013ec0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013ec4:	9306      	str	r3, [sp, #24]
 8013ec6:	ec59 8b18 	vmov	r8, r9, d8
 8013eca:	2700      	movs	r7, #0
 8013ecc:	e01f      	b.n	8013f0e <__kernel_rem_pio2+0xbe>
 8013ece:	42ef      	cmn	r7, r5
 8013ed0:	d407      	bmi.n	8013ee2 <__kernel_rem_pio2+0x92>
 8013ed2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013ed6:	f7ec fb3d 	bl	8000554 <__aeabi_i2d>
 8013eda:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013ede:	3501      	adds	r5, #1
 8013ee0:	e7df      	b.n	8013ea2 <__kernel_rem_pio2+0x52>
 8013ee2:	ec51 0b18 	vmov	r0, r1, d8
 8013ee6:	e7f8      	b.n	8013eda <__kernel_rem_pio2+0x8a>
 8013ee8:	9906      	ldr	r1, [sp, #24]
 8013eea:	9d02      	ldr	r5, [sp, #8]
 8013eec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8013ef0:	9106      	str	r1, [sp, #24]
 8013ef2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013ef6:	9502      	str	r5, [sp, #8]
 8013ef8:	f7ec fb96 	bl	8000628 <__aeabi_dmul>
 8013efc:	4602      	mov	r2, r0
 8013efe:	460b      	mov	r3, r1
 8013f00:	4640      	mov	r0, r8
 8013f02:	4649      	mov	r1, r9
 8013f04:	f7ec f9da 	bl	80002bc <__adddf3>
 8013f08:	3701      	adds	r7, #1
 8013f0a:	4680      	mov	r8, r0
 8013f0c:	4689      	mov	r9, r1
 8013f0e:	9b07      	ldr	r3, [sp, #28]
 8013f10:	429f      	cmp	r7, r3
 8013f12:	dde9      	ble.n	8013ee8 <__kernel_rem_pio2+0x98>
 8013f14:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013f18:	3601      	adds	r6, #1
 8013f1a:	e7c9      	b.n	8013eb0 <__kernel_rem_pio2+0x60>
 8013f1c:	9b04      	ldr	r3, [sp, #16]
 8013f1e:	aa0e      	add	r2, sp, #56	; 0x38
 8013f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f24:	930c      	str	r3, [sp, #48]	; 0x30
 8013f26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013f28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013f2c:	9c04      	ldr	r4, [sp, #16]
 8013f2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f30:	ab9a      	add	r3, sp, #616	; 0x268
 8013f32:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8013f36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013f3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f3e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8013f42:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013f46:	ab9a      	add	r3, sp, #616	; 0x268
 8013f48:	445b      	add	r3, fp
 8013f4a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8013f4e:	2500      	movs	r5, #0
 8013f50:	1b63      	subs	r3, r4, r5
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	dc78      	bgt.n	8014048 <__kernel_rem_pio2+0x1f8>
 8013f56:	4650      	mov	r0, sl
 8013f58:	ec49 8b10 	vmov	d0, r8, r9
 8013f5c:	f000 fc00 	bl	8014760 <scalbn>
 8013f60:	ec57 6b10 	vmov	r6, r7, d0
 8013f64:	2200      	movs	r2, #0
 8013f66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013f6a:	ee10 0a10 	vmov	r0, s0
 8013f6e:	4639      	mov	r1, r7
 8013f70:	f7ec fb5a 	bl	8000628 <__aeabi_dmul>
 8013f74:	ec41 0b10 	vmov	d0, r0, r1
 8013f78:	f000 fb6e 	bl	8014658 <floor>
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	ec51 0b10 	vmov	r0, r1, d0
 8013f82:	4b7e      	ldr	r3, [pc, #504]	; (801417c <__kernel_rem_pio2+0x32c>)
 8013f84:	f7ec fb50 	bl	8000628 <__aeabi_dmul>
 8013f88:	4602      	mov	r2, r0
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	4630      	mov	r0, r6
 8013f8e:	4639      	mov	r1, r7
 8013f90:	f7ec f992 	bl	80002b8 <__aeabi_dsub>
 8013f94:	460f      	mov	r7, r1
 8013f96:	4606      	mov	r6, r0
 8013f98:	f7ec fdf6 	bl	8000b88 <__aeabi_d2iz>
 8013f9c:	9006      	str	r0, [sp, #24]
 8013f9e:	f7ec fad9 	bl	8000554 <__aeabi_i2d>
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	4639      	mov	r1, r7
 8013faa:	f7ec f985 	bl	80002b8 <__aeabi_dsub>
 8013fae:	f1ba 0f00 	cmp.w	sl, #0
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	460f      	mov	r7, r1
 8013fb6:	dd6c      	ble.n	8014092 <__kernel_rem_pio2+0x242>
 8013fb8:	1e62      	subs	r2, r4, #1
 8013fba:	ab0e      	add	r3, sp, #56	; 0x38
 8013fbc:	f1ca 0118 	rsb	r1, sl, #24
 8013fc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013fc4:	9d06      	ldr	r5, [sp, #24]
 8013fc6:	fa40 f301 	asr.w	r3, r0, r1
 8013fca:	441d      	add	r5, r3
 8013fcc:	408b      	lsls	r3, r1
 8013fce:	1ac0      	subs	r0, r0, r3
 8013fd0:	ab0e      	add	r3, sp, #56	; 0x38
 8013fd2:	9506      	str	r5, [sp, #24]
 8013fd4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013fd8:	f1ca 0317 	rsb	r3, sl, #23
 8013fdc:	fa40 f303 	asr.w	r3, r0, r3
 8013fe0:	9302      	str	r3, [sp, #8]
 8013fe2:	9b02      	ldr	r3, [sp, #8]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	dd62      	ble.n	80140ae <__kernel_rem_pio2+0x25e>
 8013fe8:	9b06      	ldr	r3, [sp, #24]
 8013fea:	2200      	movs	r2, #0
 8013fec:	3301      	adds	r3, #1
 8013fee:	9306      	str	r3, [sp, #24]
 8013ff0:	4615      	mov	r5, r2
 8013ff2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013ff6:	4294      	cmp	r4, r2
 8013ff8:	f300 8095 	bgt.w	8014126 <__kernel_rem_pio2+0x2d6>
 8013ffc:	f1ba 0f00 	cmp.w	sl, #0
 8014000:	dd07      	ble.n	8014012 <__kernel_rem_pio2+0x1c2>
 8014002:	f1ba 0f01 	cmp.w	sl, #1
 8014006:	f000 80a2 	beq.w	801414e <__kernel_rem_pio2+0x2fe>
 801400a:	f1ba 0f02 	cmp.w	sl, #2
 801400e:	f000 80c1 	beq.w	8014194 <__kernel_rem_pio2+0x344>
 8014012:	9b02      	ldr	r3, [sp, #8]
 8014014:	2b02      	cmp	r3, #2
 8014016:	d14a      	bne.n	80140ae <__kernel_rem_pio2+0x25e>
 8014018:	4632      	mov	r2, r6
 801401a:	463b      	mov	r3, r7
 801401c:	2000      	movs	r0, #0
 801401e:	4958      	ldr	r1, [pc, #352]	; (8014180 <__kernel_rem_pio2+0x330>)
 8014020:	f7ec f94a 	bl	80002b8 <__aeabi_dsub>
 8014024:	4606      	mov	r6, r0
 8014026:	460f      	mov	r7, r1
 8014028:	2d00      	cmp	r5, #0
 801402a:	d040      	beq.n	80140ae <__kernel_rem_pio2+0x25e>
 801402c:	4650      	mov	r0, sl
 801402e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014170 <__kernel_rem_pio2+0x320>
 8014032:	f000 fb95 	bl	8014760 <scalbn>
 8014036:	4630      	mov	r0, r6
 8014038:	4639      	mov	r1, r7
 801403a:	ec53 2b10 	vmov	r2, r3, d0
 801403e:	f7ec f93b 	bl	80002b8 <__aeabi_dsub>
 8014042:	4606      	mov	r6, r0
 8014044:	460f      	mov	r7, r1
 8014046:	e032      	b.n	80140ae <__kernel_rem_pio2+0x25e>
 8014048:	2200      	movs	r2, #0
 801404a:	4b4e      	ldr	r3, [pc, #312]	; (8014184 <__kernel_rem_pio2+0x334>)
 801404c:	4640      	mov	r0, r8
 801404e:	4649      	mov	r1, r9
 8014050:	f7ec faea 	bl	8000628 <__aeabi_dmul>
 8014054:	f7ec fd98 	bl	8000b88 <__aeabi_d2iz>
 8014058:	f7ec fa7c 	bl	8000554 <__aeabi_i2d>
 801405c:	2200      	movs	r2, #0
 801405e:	4b4a      	ldr	r3, [pc, #296]	; (8014188 <__kernel_rem_pio2+0x338>)
 8014060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014064:	f7ec fae0 	bl	8000628 <__aeabi_dmul>
 8014068:	4602      	mov	r2, r0
 801406a:	460b      	mov	r3, r1
 801406c:	4640      	mov	r0, r8
 801406e:	4649      	mov	r1, r9
 8014070:	f7ec f922 	bl	80002b8 <__aeabi_dsub>
 8014074:	f7ec fd88 	bl	8000b88 <__aeabi_d2iz>
 8014078:	ab0e      	add	r3, sp, #56	; 0x38
 801407a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801407e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014086:	f7ec f919 	bl	80002bc <__adddf3>
 801408a:	3501      	adds	r5, #1
 801408c:	4680      	mov	r8, r0
 801408e:	4689      	mov	r9, r1
 8014090:	e75e      	b.n	8013f50 <__kernel_rem_pio2+0x100>
 8014092:	d105      	bne.n	80140a0 <__kernel_rem_pio2+0x250>
 8014094:	1e63      	subs	r3, r4, #1
 8014096:	aa0e      	add	r2, sp, #56	; 0x38
 8014098:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801409c:	15c3      	asrs	r3, r0, #23
 801409e:	e79f      	b.n	8013fe0 <__kernel_rem_pio2+0x190>
 80140a0:	2200      	movs	r2, #0
 80140a2:	4b3a      	ldr	r3, [pc, #232]	; (801418c <__kernel_rem_pio2+0x33c>)
 80140a4:	f7ec fd46 	bl	8000b34 <__aeabi_dcmpge>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	d139      	bne.n	8014120 <__kernel_rem_pio2+0x2d0>
 80140ac:	9002      	str	r0, [sp, #8]
 80140ae:	2200      	movs	r2, #0
 80140b0:	2300      	movs	r3, #0
 80140b2:	4630      	mov	r0, r6
 80140b4:	4639      	mov	r1, r7
 80140b6:	f7ec fd1f 	bl	8000af8 <__aeabi_dcmpeq>
 80140ba:	2800      	cmp	r0, #0
 80140bc:	f000 80c7 	beq.w	801424e <__kernel_rem_pio2+0x3fe>
 80140c0:	1e65      	subs	r5, r4, #1
 80140c2:	462b      	mov	r3, r5
 80140c4:	2200      	movs	r2, #0
 80140c6:	9904      	ldr	r1, [sp, #16]
 80140c8:	428b      	cmp	r3, r1
 80140ca:	da6a      	bge.n	80141a2 <__kernel_rem_pio2+0x352>
 80140cc:	2a00      	cmp	r2, #0
 80140ce:	f000 8088 	beq.w	80141e2 <__kernel_rem_pio2+0x392>
 80140d2:	ab0e      	add	r3, sp, #56	; 0x38
 80140d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80140d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f000 80b4 	beq.w	801424a <__kernel_rem_pio2+0x3fa>
 80140e2:	4650      	mov	r0, sl
 80140e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014170 <__kernel_rem_pio2+0x320>
 80140e8:	f000 fb3a 	bl	8014760 <scalbn>
 80140ec:	00ec      	lsls	r4, r5, #3
 80140ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80140f0:	191e      	adds	r6, r3, r4
 80140f2:	ec59 8b10 	vmov	r8, r9, d0
 80140f6:	f106 0a08 	add.w	sl, r6, #8
 80140fa:	462f      	mov	r7, r5
 80140fc:	2f00      	cmp	r7, #0
 80140fe:	f280 80df 	bge.w	80142c0 <__kernel_rem_pio2+0x470>
 8014102:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014168 <__kernel_rem_pio2+0x318>
 8014106:	f04f 0a00 	mov.w	sl, #0
 801410a:	eba5 030a 	sub.w	r3, r5, sl
 801410e:	2b00      	cmp	r3, #0
 8014110:	f2c0 810a 	blt.w	8014328 <__kernel_rem_pio2+0x4d8>
 8014114:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014190 <__kernel_rem_pio2+0x340>
 8014118:	ec59 8b18 	vmov	r8, r9, d8
 801411c:	2700      	movs	r7, #0
 801411e:	e0f5      	b.n	801430c <__kernel_rem_pio2+0x4bc>
 8014120:	2302      	movs	r3, #2
 8014122:	9302      	str	r3, [sp, #8]
 8014124:	e760      	b.n	8013fe8 <__kernel_rem_pio2+0x198>
 8014126:	ab0e      	add	r3, sp, #56	; 0x38
 8014128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801412c:	b94d      	cbnz	r5, 8014142 <__kernel_rem_pio2+0x2f2>
 801412e:	b12b      	cbz	r3, 801413c <__kernel_rem_pio2+0x2ec>
 8014130:	a80e      	add	r0, sp, #56	; 0x38
 8014132:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014136:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801413a:	2301      	movs	r3, #1
 801413c:	3201      	adds	r2, #1
 801413e:	461d      	mov	r5, r3
 8014140:	e759      	b.n	8013ff6 <__kernel_rem_pio2+0x1a6>
 8014142:	a80e      	add	r0, sp, #56	; 0x38
 8014144:	1acb      	subs	r3, r1, r3
 8014146:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801414a:	462b      	mov	r3, r5
 801414c:	e7f6      	b.n	801413c <__kernel_rem_pio2+0x2ec>
 801414e:	1e62      	subs	r2, r4, #1
 8014150:	ab0e      	add	r3, sp, #56	; 0x38
 8014152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014156:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801415a:	a90e      	add	r1, sp, #56	; 0x38
 801415c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014160:	e757      	b.n	8014012 <__kernel_rem_pio2+0x1c2>
 8014162:	bf00      	nop
 8014164:	f3af 8000 	nop.w
	...
 8014174:	3ff00000 	.word	0x3ff00000
 8014178:	080194b0 	.word	0x080194b0
 801417c:	40200000 	.word	0x40200000
 8014180:	3ff00000 	.word	0x3ff00000
 8014184:	3e700000 	.word	0x3e700000
 8014188:	41700000 	.word	0x41700000
 801418c:	3fe00000 	.word	0x3fe00000
 8014190:	08019470 	.word	0x08019470
 8014194:	1e62      	subs	r2, r4, #1
 8014196:	ab0e      	add	r3, sp, #56	; 0x38
 8014198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801419c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80141a0:	e7db      	b.n	801415a <__kernel_rem_pio2+0x30a>
 80141a2:	a90e      	add	r1, sp, #56	; 0x38
 80141a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80141a8:	3b01      	subs	r3, #1
 80141aa:	430a      	orrs	r2, r1
 80141ac:	e78b      	b.n	80140c6 <__kernel_rem_pio2+0x276>
 80141ae:	3301      	adds	r3, #1
 80141b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80141b4:	2900      	cmp	r1, #0
 80141b6:	d0fa      	beq.n	80141ae <__kernel_rem_pio2+0x35e>
 80141b8:	9a08      	ldr	r2, [sp, #32]
 80141ba:	4422      	add	r2, r4
 80141bc:	00d2      	lsls	r2, r2, #3
 80141be:	a922      	add	r1, sp, #136	; 0x88
 80141c0:	18e3      	adds	r3, r4, r3
 80141c2:	9206      	str	r2, [sp, #24]
 80141c4:	440a      	add	r2, r1
 80141c6:	9302      	str	r3, [sp, #8]
 80141c8:	f10b 0108 	add.w	r1, fp, #8
 80141cc:	f102 0308 	add.w	r3, r2, #8
 80141d0:	1c66      	adds	r6, r4, #1
 80141d2:	910a      	str	r1, [sp, #40]	; 0x28
 80141d4:	2500      	movs	r5, #0
 80141d6:	930d      	str	r3, [sp, #52]	; 0x34
 80141d8:	9b02      	ldr	r3, [sp, #8]
 80141da:	42b3      	cmp	r3, r6
 80141dc:	da04      	bge.n	80141e8 <__kernel_rem_pio2+0x398>
 80141de:	461c      	mov	r4, r3
 80141e0:	e6a6      	b.n	8013f30 <__kernel_rem_pio2+0xe0>
 80141e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141e4:	2301      	movs	r3, #1
 80141e6:	e7e3      	b.n	80141b0 <__kernel_rem_pio2+0x360>
 80141e8:	9b06      	ldr	r3, [sp, #24]
 80141ea:	18ef      	adds	r7, r5, r3
 80141ec:	ab22      	add	r3, sp, #136	; 0x88
 80141ee:	441f      	add	r7, r3
 80141f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80141f6:	f7ec f9ad 	bl	8000554 <__aeabi_i2d>
 80141fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141fc:	461c      	mov	r4, r3
 80141fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014200:	e9c7 0100 	strd	r0, r1, [r7]
 8014204:	eb03 0b05 	add.w	fp, r3, r5
 8014208:	2700      	movs	r7, #0
 801420a:	f04f 0800 	mov.w	r8, #0
 801420e:	f04f 0900 	mov.w	r9, #0
 8014212:	9b07      	ldr	r3, [sp, #28]
 8014214:	429f      	cmp	r7, r3
 8014216:	dd08      	ble.n	801422a <__kernel_rem_pio2+0x3da>
 8014218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801421a:	aa72      	add	r2, sp, #456	; 0x1c8
 801421c:	18eb      	adds	r3, r5, r3
 801421e:	4413      	add	r3, r2
 8014220:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014224:	3601      	adds	r6, #1
 8014226:	3508      	adds	r5, #8
 8014228:	e7d6      	b.n	80141d8 <__kernel_rem_pio2+0x388>
 801422a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801422e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014232:	f7ec f9f9 	bl	8000628 <__aeabi_dmul>
 8014236:	4602      	mov	r2, r0
 8014238:	460b      	mov	r3, r1
 801423a:	4640      	mov	r0, r8
 801423c:	4649      	mov	r1, r9
 801423e:	f7ec f83d 	bl	80002bc <__adddf3>
 8014242:	3701      	adds	r7, #1
 8014244:	4680      	mov	r8, r0
 8014246:	4689      	mov	r9, r1
 8014248:	e7e3      	b.n	8014212 <__kernel_rem_pio2+0x3c2>
 801424a:	3d01      	subs	r5, #1
 801424c:	e741      	b.n	80140d2 <__kernel_rem_pio2+0x282>
 801424e:	f1ca 0000 	rsb	r0, sl, #0
 8014252:	ec47 6b10 	vmov	d0, r6, r7
 8014256:	f000 fa83 	bl	8014760 <scalbn>
 801425a:	ec57 6b10 	vmov	r6, r7, d0
 801425e:	2200      	movs	r2, #0
 8014260:	4b99      	ldr	r3, [pc, #612]	; (80144c8 <__kernel_rem_pio2+0x678>)
 8014262:	ee10 0a10 	vmov	r0, s0
 8014266:	4639      	mov	r1, r7
 8014268:	f7ec fc64 	bl	8000b34 <__aeabi_dcmpge>
 801426c:	b1f8      	cbz	r0, 80142ae <__kernel_rem_pio2+0x45e>
 801426e:	2200      	movs	r2, #0
 8014270:	4b96      	ldr	r3, [pc, #600]	; (80144cc <__kernel_rem_pio2+0x67c>)
 8014272:	4630      	mov	r0, r6
 8014274:	4639      	mov	r1, r7
 8014276:	f7ec f9d7 	bl	8000628 <__aeabi_dmul>
 801427a:	f7ec fc85 	bl	8000b88 <__aeabi_d2iz>
 801427e:	4680      	mov	r8, r0
 8014280:	f7ec f968 	bl	8000554 <__aeabi_i2d>
 8014284:	2200      	movs	r2, #0
 8014286:	4b90      	ldr	r3, [pc, #576]	; (80144c8 <__kernel_rem_pio2+0x678>)
 8014288:	f7ec f9ce 	bl	8000628 <__aeabi_dmul>
 801428c:	460b      	mov	r3, r1
 801428e:	4602      	mov	r2, r0
 8014290:	4639      	mov	r1, r7
 8014292:	4630      	mov	r0, r6
 8014294:	f7ec f810 	bl	80002b8 <__aeabi_dsub>
 8014298:	f7ec fc76 	bl	8000b88 <__aeabi_d2iz>
 801429c:	1c65      	adds	r5, r4, #1
 801429e:	ab0e      	add	r3, sp, #56	; 0x38
 80142a0:	f10a 0a18 	add.w	sl, sl, #24
 80142a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80142a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80142ac:	e719      	b.n	80140e2 <__kernel_rem_pio2+0x292>
 80142ae:	4630      	mov	r0, r6
 80142b0:	4639      	mov	r1, r7
 80142b2:	f7ec fc69 	bl	8000b88 <__aeabi_d2iz>
 80142b6:	ab0e      	add	r3, sp, #56	; 0x38
 80142b8:	4625      	mov	r5, r4
 80142ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80142be:	e710      	b.n	80140e2 <__kernel_rem_pio2+0x292>
 80142c0:	ab0e      	add	r3, sp, #56	; 0x38
 80142c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80142c6:	f7ec f945 	bl	8000554 <__aeabi_i2d>
 80142ca:	4642      	mov	r2, r8
 80142cc:	464b      	mov	r3, r9
 80142ce:	f7ec f9ab 	bl	8000628 <__aeabi_dmul>
 80142d2:	2200      	movs	r2, #0
 80142d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80142d8:	4b7c      	ldr	r3, [pc, #496]	; (80144cc <__kernel_rem_pio2+0x67c>)
 80142da:	4640      	mov	r0, r8
 80142dc:	4649      	mov	r1, r9
 80142de:	f7ec f9a3 	bl	8000628 <__aeabi_dmul>
 80142e2:	3f01      	subs	r7, #1
 80142e4:	4680      	mov	r8, r0
 80142e6:	4689      	mov	r9, r1
 80142e8:	e708      	b.n	80140fc <__kernel_rem_pio2+0x2ac>
 80142ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80142ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80142f6:	f7ec f997 	bl	8000628 <__aeabi_dmul>
 80142fa:	4602      	mov	r2, r0
 80142fc:	460b      	mov	r3, r1
 80142fe:	4640      	mov	r0, r8
 8014300:	4649      	mov	r1, r9
 8014302:	f7eb ffdb 	bl	80002bc <__adddf3>
 8014306:	3701      	adds	r7, #1
 8014308:	4680      	mov	r8, r0
 801430a:	4689      	mov	r9, r1
 801430c:	9b04      	ldr	r3, [sp, #16]
 801430e:	429f      	cmp	r7, r3
 8014310:	dc01      	bgt.n	8014316 <__kernel_rem_pio2+0x4c6>
 8014312:	45ba      	cmp	sl, r7
 8014314:	dae9      	bge.n	80142ea <__kernel_rem_pio2+0x49a>
 8014316:	ab4a      	add	r3, sp, #296	; 0x128
 8014318:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801431c:	e9c3 8900 	strd	r8, r9, [r3]
 8014320:	f10a 0a01 	add.w	sl, sl, #1
 8014324:	3e08      	subs	r6, #8
 8014326:	e6f0      	b.n	801410a <__kernel_rem_pio2+0x2ba>
 8014328:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801432a:	2b03      	cmp	r3, #3
 801432c:	d85b      	bhi.n	80143e6 <__kernel_rem_pio2+0x596>
 801432e:	e8df f003 	tbb	[pc, r3]
 8014332:	264a      	.short	0x264a
 8014334:	0226      	.short	0x0226
 8014336:	ab9a      	add	r3, sp, #616	; 0x268
 8014338:	441c      	add	r4, r3
 801433a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801433e:	46a2      	mov	sl, r4
 8014340:	46ab      	mov	fp, r5
 8014342:	f1bb 0f00 	cmp.w	fp, #0
 8014346:	dc6c      	bgt.n	8014422 <__kernel_rem_pio2+0x5d2>
 8014348:	46a2      	mov	sl, r4
 801434a:	46ab      	mov	fp, r5
 801434c:	f1bb 0f01 	cmp.w	fp, #1
 8014350:	f300 8086 	bgt.w	8014460 <__kernel_rem_pio2+0x610>
 8014354:	2000      	movs	r0, #0
 8014356:	2100      	movs	r1, #0
 8014358:	2d01      	cmp	r5, #1
 801435a:	f300 80a0 	bgt.w	801449e <__kernel_rem_pio2+0x64e>
 801435e:	9b02      	ldr	r3, [sp, #8]
 8014360:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014364:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014368:	2b00      	cmp	r3, #0
 801436a:	f040 809e 	bne.w	80144aa <__kernel_rem_pio2+0x65a>
 801436e:	9b01      	ldr	r3, [sp, #4]
 8014370:	e9c3 7800 	strd	r7, r8, [r3]
 8014374:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014378:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801437c:	e033      	b.n	80143e6 <__kernel_rem_pio2+0x596>
 801437e:	3408      	adds	r4, #8
 8014380:	ab4a      	add	r3, sp, #296	; 0x128
 8014382:	441c      	add	r4, r3
 8014384:	462e      	mov	r6, r5
 8014386:	2000      	movs	r0, #0
 8014388:	2100      	movs	r1, #0
 801438a:	2e00      	cmp	r6, #0
 801438c:	da3a      	bge.n	8014404 <__kernel_rem_pio2+0x5b4>
 801438e:	9b02      	ldr	r3, [sp, #8]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d03d      	beq.n	8014410 <__kernel_rem_pio2+0x5c0>
 8014394:	4602      	mov	r2, r0
 8014396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801439a:	9c01      	ldr	r4, [sp, #4]
 801439c:	e9c4 2300 	strd	r2, r3, [r4]
 80143a0:	4602      	mov	r2, r0
 80143a2:	460b      	mov	r3, r1
 80143a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80143a8:	f7eb ff86 	bl	80002b8 <__aeabi_dsub>
 80143ac:	ae4c      	add	r6, sp, #304	; 0x130
 80143ae:	2401      	movs	r4, #1
 80143b0:	42a5      	cmp	r5, r4
 80143b2:	da30      	bge.n	8014416 <__kernel_rem_pio2+0x5c6>
 80143b4:	9b02      	ldr	r3, [sp, #8]
 80143b6:	b113      	cbz	r3, 80143be <__kernel_rem_pio2+0x56e>
 80143b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143bc:	4619      	mov	r1, r3
 80143be:	9b01      	ldr	r3, [sp, #4]
 80143c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80143c4:	e00f      	b.n	80143e6 <__kernel_rem_pio2+0x596>
 80143c6:	ab9a      	add	r3, sp, #616	; 0x268
 80143c8:	441c      	add	r4, r3
 80143ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80143ce:	2000      	movs	r0, #0
 80143d0:	2100      	movs	r1, #0
 80143d2:	2d00      	cmp	r5, #0
 80143d4:	da10      	bge.n	80143f8 <__kernel_rem_pio2+0x5a8>
 80143d6:	9b02      	ldr	r3, [sp, #8]
 80143d8:	b113      	cbz	r3, 80143e0 <__kernel_rem_pio2+0x590>
 80143da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143de:	4619      	mov	r1, r3
 80143e0:	9b01      	ldr	r3, [sp, #4]
 80143e2:	e9c3 0100 	strd	r0, r1, [r3]
 80143e6:	9b06      	ldr	r3, [sp, #24]
 80143e8:	f003 0007 	and.w	r0, r3, #7
 80143ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80143f0:	ecbd 8b02 	vpop	{d8}
 80143f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80143fc:	f7eb ff5e 	bl	80002bc <__adddf3>
 8014400:	3d01      	subs	r5, #1
 8014402:	e7e6      	b.n	80143d2 <__kernel_rem_pio2+0x582>
 8014404:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014408:	f7eb ff58 	bl	80002bc <__adddf3>
 801440c:	3e01      	subs	r6, #1
 801440e:	e7bc      	b.n	801438a <__kernel_rem_pio2+0x53a>
 8014410:	4602      	mov	r2, r0
 8014412:	460b      	mov	r3, r1
 8014414:	e7c1      	b.n	801439a <__kernel_rem_pio2+0x54a>
 8014416:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801441a:	f7eb ff4f 	bl	80002bc <__adddf3>
 801441e:	3401      	adds	r4, #1
 8014420:	e7c6      	b.n	80143b0 <__kernel_rem_pio2+0x560>
 8014422:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014426:	ed3a 7b02 	vldmdb	sl!, {d7}
 801442a:	4640      	mov	r0, r8
 801442c:	ec53 2b17 	vmov	r2, r3, d7
 8014430:	4649      	mov	r1, r9
 8014432:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014436:	f7eb ff41 	bl	80002bc <__adddf3>
 801443a:	4602      	mov	r2, r0
 801443c:	460b      	mov	r3, r1
 801443e:	4606      	mov	r6, r0
 8014440:	460f      	mov	r7, r1
 8014442:	4640      	mov	r0, r8
 8014444:	4649      	mov	r1, r9
 8014446:	f7eb ff37 	bl	80002b8 <__aeabi_dsub>
 801444a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801444e:	f7eb ff35 	bl	80002bc <__adddf3>
 8014452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014456:	e9ca 0100 	strd	r0, r1, [sl]
 801445a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801445e:	e770      	b.n	8014342 <__kernel_rem_pio2+0x4f2>
 8014460:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014464:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014468:	4630      	mov	r0, r6
 801446a:	ec53 2b17 	vmov	r2, r3, d7
 801446e:	4639      	mov	r1, r7
 8014470:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014474:	f7eb ff22 	bl	80002bc <__adddf3>
 8014478:	4602      	mov	r2, r0
 801447a:	460b      	mov	r3, r1
 801447c:	4680      	mov	r8, r0
 801447e:	4689      	mov	r9, r1
 8014480:	4630      	mov	r0, r6
 8014482:	4639      	mov	r1, r7
 8014484:	f7eb ff18 	bl	80002b8 <__aeabi_dsub>
 8014488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801448c:	f7eb ff16 	bl	80002bc <__adddf3>
 8014490:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014494:	e9ca 0100 	strd	r0, r1, [sl]
 8014498:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801449c:	e756      	b.n	801434c <__kernel_rem_pio2+0x4fc>
 801449e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80144a2:	f7eb ff0b 	bl	80002bc <__adddf3>
 80144a6:	3d01      	subs	r5, #1
 80144a8:	e756      	b.n	8014358 <__kernel_rem_pio2+0x508>
 80144aa:	9b01      	ldr	r3, [sp, #4]
 80144ac:	9a01      	ldr	r2, [sp, #4]
 80144ae:	601f      	str	r7, [r3, #0]
 80144b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80144b4:	605c      	str	r4, [r3, #4]
 80144b6:	609d      	str	r5, [r3, #8]
 80144b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80144bc:	60d3      	str	r3, [r2, #12]
 80144be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144c2:	6110      	str	r0, [r2, #16]
 80144c4:	6153      	str	r3, [r2, #20]
 80144c6:	e78e      	b.n	80143e6 <__kernel_rem_pio2+0x596>
 80144c8:	41700000 	.word	0x41700000
 80144cc:	3e700000 	.word	0x3e700000

080144d0 <__kernel_sin>:
 80144d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d4:	ec55 4b10 	vmov	r4, r5, d0
 80144d8:	b085      	sub	sp, #20
 80144da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80144de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80144e2:	ed8d 1b00 	vstr	d1, [sp]
 80144e6:	9002      	str	r0, [sp, #8]
 80144e8:	da06      	bge.n	80144f8 <__kernel_sin+0x28>
 80144ea:	ee10 0a10 	vmov	r0, s0
 80144ee:	4629      	mov	r1, r5
 80144f0:	f7ec fb4a 	bl	8000b88 <__aeabi_d2iz>
 80144f4:	2800      	cmp	r0, #0
 80144f6:	d051      	beq.n	801459c <__kernel_sin+0xcc>
 80144f8:	4622      	mov	r2, r4
 80144fa:	462b      	mov	r3, r5
 80144fc:	4620      	mov	r0, r4
 80144fe:	4629      	mov	r1, r5
 8014500:	f7ec f892 	bl	8000628 <__aeabi_dmul>
 8014504:	4682      	mov	sl, r0
 8014506:	468b      	mov	fp, r1
 8014508:	4602      	mov	r2, r0
 801450a:	460b      	mov	r3, r1
 801450c:	4620      	mov	r0, r4
 801450e:	4629      	mov	r1, r5
 8014510:	f7ec f88a 	bl	8000628 <__aeabi_dmul>
 8014514:	a341      	add	r3, pc, #260	; (adr r3, 801461c <__kernel_sin+0x14c>)
 8014516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801451a:	4680      	mov	r8, r0
 801451c:	4689      	mov	r9, r1
 801451e:	4650      	mov	r0, sl
 8014520:	4659      	mov	r1, fp
 8014522:	f7ec f881 	bl	8000628 <__aeabi_dmul>
 8014526:	a33f      	add	r3, pc, #252	; (adr r3, 8014624 <__kernel_sin+0x154>)
 8014528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801452c:	f7eb fec4 	bl	80002b8 <__aeabi_dsub>
 8014530:	4652      	mov	r2, sl
 8014532:	465b      	mov	r3, fp
 8014534:	f7ec f878 	bl	8000628 <__aeabi_dmul>
 8014538:	a33c      	add	r3, pc, #240	; (adr r3, 801462c <__kernel_sin+0x15c>)
 801453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453e:	f7eb febd 	bl	80002bc <__adddf3>
 8014542:	4652      	mov	r2, sl
 8014544:	465b      	mov	r3, fp
 8014546:	f7ec f86f 	bl	8000628 <__aeabi_dmul>
 801454a:	a33a      	add	r3, pc, #232	; (adr r3, 8014634 <__kernel_sin+0x164>)
 801454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014550:	f7eb feb2 	bl	80002b8 <__aeabi_dsub>
 8014554:	4652      	mov	r2, sl
 8014556:	465b      	mov	r3, fp
 8014558:	f7ec f866 	bl	8000628 <__aeabi_dmul>
 801455c:	a337      	add	r3, pc, #220	; (adr r3, 801463c <__kernel_sin+0x16c>)
 801455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014562:	f7eb feab 	bl	80002bc <__adddf3>
 8014566:	9b02      	ldr	r3, [sp, #8]
 8014568:	4606      	mov	r6, r0
 801456a:	460f      	mov	r7, r1
 801456c:	b9db      	cbnz	r3, 80145a6 <__kernel_sin+0xd6>
 801456e:	4602      	mov	r2, r0
 8014570:	460b      	mov	r3, r1
 8014572:	4650      	mov	r0, sl
 8014574:	4659      	mov	r1, fp
 8014576:	f7ec f857 	bl	8000628 <__aeabi_dmul>
 801457a:	a325      	add	r3, pc, #148	; (adr r3, 8014610 <__kernel_sin+0x140>)
 801457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014580:	f7eb fe9a 	bl	80002b8 <__aeabi_dsub>
 8014584:	4642      	mov	r2, r8
 8014586:	464b      	mov	r3, r9
 8014588:	f7ec f84e 	bl	8000628 <__aeabi_dmul>
 801458c:	4602      	mov	r2, r0
 801458e:	460b      	mov	r3, r1
 8014590:	4620      	mov	r0, r4
 8014592:	4629      	mov	r1, r5
 8014594:	f7eb fe92 	bl	80002bc <__adddf3>
 8014598:	4604      	mov	r4, r0
 801459a:	460d      	mov	r5, r1
 801459c:	ec45 4b10 	vmov	d0, r4, r5
 80145a0:	b005      	add	sp, #20
 80145a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a6:	2200      	movs	r2, #0
 80145a8:	4b1b      	ldr	r3, [pc, #108]	; (8014618 <__kernel_sin+0x148>)
 80145aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80145ae:	f7ec f83b 	bl	8000628 <__aeabi_dmul>
 80145b2:	4632      	mov	r2, r6
 80145b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80145b8:	463b      	mov	r3, r7
 80145ba:	4640      	mov	r0, r8
 80145bc:	4649      	mov	r1, r9
 80145be:	f7ec f833 	bl	8000628 <__aeabi_dmul>
 80145c2:	4602      	mov	r2, r0
 80145c4:	460b      	mov	r3, r1
 80145c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145ca:	f7eb fe75 	bl	80002b8 <__aeabi_dsub>
 80145ce:	4652      	mov	r2, sl
 80145d0:	465b      	mov	r3, fp
 80145d2:	f7ec f829 	bl	8000628 <__aeabi_dmul>
 80145d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145da:	f7eb fe6d 	bl	80002b8 <__aeabi_dsub>
 80145de:	a30c      	add	r3, pc, #48	; (adr r3, 8014610 <__kernel_sin+0x140>)
 80145e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e4:	4606      	mov	r6, r0
 80145e6:	460f      	mov	r7, r1
 80145e8:	4640      	mov	r0, r8
 80145ea:	4649      	mov	r1, r9
 80145ec:	f7ec f81c 	bl	8000628 <__aeabi_dmul>
 80145f0:	4602      	mov	r2, r0
 80145f2:	460b      	mov	r3, r1
 80145f4:	4630      	mov	r0, r6
 80145f6:	4639      	mov	r1, r7
 80145f8:	f7eb fe60 	bl	80002bc <__adddf3>
 80145fc:	4602      	mov	r2, r0
 80145fe:	460b      	mov	r3, r1
 8014600:	4620      	mov	r0, r4
 8014602:	4629      	mov	r1, r5
 8014604:	f7eb fe58 	bl	80002b8 <__aeabi_dsub>
 8014608:	e7c6      	b.n	8014598 <__kernel_sin+0xc8>
 801460a:	bf00      	nop
 801460c:	f3af 8000 	nop.w
 8014610:	55555549 	.word	0x55555549
 8014614:	3fc55555 	.word	0x3fc55555
 8014618:	3fe00000 	.word	0x3fe00000
 801461c:	5acfd57c 	.word	0x5acfd57c
 8014620:	3de5d93a 	.word	0x3de5d93a
 8014624:	8a2b9ceb 	.word	0x8a2b9ceb
 8014628:	3e5ae5e6 	.word	0x3e5ae5e6
 801462c:	57b1fe7d 	.word	0x57b1fe7d
 8014630:	3ec71de3 	.word	0x3ec71de3
 8014634:	19c161d5 	.word	0x19c161d5
 8014638:	3f2a01a0 	.word	0x3f2a01a0
 801463c:	1110f8a6 	.word	0x1110f8a6
 8014640:	3f811111 	.word	0x3f811111

08014644 <fabs>:
 8014644:	ec51 0b10 	vmov	r0, r1, d0
 8014648:	ee10 2a10 	vmov	r2, s0
 801464c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014650:	ec43 2b10 	vmov	d0, r2, r3
 8014654:	4770      	bx	lr
	...

08014658 <floor>:
 8014658:	ec51 0b10 	vmov	r0, r1, d0
 801465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014660:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014664:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014668:	2e13      	cmp	r6, #19
 801466a:	460c      	mov	r4, r1
 801466c:	ee10 5a10 	vmov	r5, s0
 8014670:	4680      	mov	r8, r0
 8014672:	dc34      	bgt.n	80146de <floor+0x86>
 8014674:	2e00      	cmp	r6, #0
 8014676:	da16      	bge.n	80146a6 <floor+0x4e>
 8014678:	a335      	add	r3, pc, #212	; (adr r3, 8014750 <floor+0xf8>)
 801467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467e:	f7eb fe1d 	bl	80002bc <__adddf3>
 8014682:	2200      	movs	r2, #0
 8014684:	2300      	movs	r3, #0
 8014686:	f7ec fa5f 	bl	8000b48 <__aeabi_dcmpgt>
 801468a:	b148      	cbz	r0, 80146a0 <floor+0x48>
 801468c:	2c00      	cmp	r4, #0
 801468e:	da59      	bge.n	8014744 <floor+0xec>
 8014690:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014694:	4a30      	ldr	r2, [pc, #192]	; (8014758 <floor+0x100>)
 8014696:	432b      	orrs	r3, r5
 8014698:	2500      	movs	r5, #0
 801469a:	42ab      	cmp	r3, r5
 801469c:	bf18      	it	ne
 801469e:	4614      	movne	r4, r2
 80146a0:	4621      	mov	r1, r4
 80146a2:	4628      	mov	r0, r5
 80146a4:	e025      	b.n	80146f2 <floor+0x9a>
 80146a6:	4f2d      	ldr	r7, [pc, #180]	; (801475c <floor+0x104>)
 80146a8:	4137      	asrs	r7, r6
 80146aa:	ea01 0307 	and.w	r3, r1, r7
 80146ae:	4303      	orrs	r3, r0
 80146b0:	d01f      	beq.n	80146f2 <floor+0x9a>
 80146b2:	a327      	add	r3, pc, #156	; (adr r3, 8014750 <floor+0xf8>)
 80146b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b8:	f7eb fe00 	bl	80002bc <__adddf3>
 80146bc:	2200      	movs	r2, #0
 80146be:	2300      	movs	r3, #0
 80146c0:	f7ec fa42 	bl	8000b48 <__aeabi_dcmpgt>
 80146c4:	2800      	cmp	r0, #0
 80146c6:	d0eb      	beq.n	80146a0 <floor+0x48>
 80146c8:	2c00      	cmp	r4, #0
 80146ca:	bfbe      	ittt	lt
 80146cc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80146d0:	fa43 f606 	asrlt.w	r6, r3, r6
 80146d4:	19a4      	addlt	r4, r4, r6
 80146d6:	ea24 0407 	bic.w	r4, r4, r7
 80146da:	2500      	movs	r5, #0
 80146dc:	e7e0      	b.n	80146a0 <floor+0x48>
 80146de:	2e33      	cmp	r6, #51	; 0x33
 80146e0:	dd0b      	ble.n	80146fa <floor+0xa2>
 80146e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80146e6:	d104      	bne.n	80146f2 <floor+0x9a>
 80146e8:	ee10 2a10 	vmov	r2, s0
 80146ec:	460b      	mov	r3, r1
 80146ee:	f7eb fde5 	bl	80002bc <__adddf3>
 80146f2:	ec41 0b10 	vmov	d0, r0, r1
 80146f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146fa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80146fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014702:	fa23 f707 	lsr.w	r7, r3, r7
 8014706:	4207      	tst	r7, r0
 8014708:	d0f3      	beq.n	80146f2 <floor+0x9a>
 801470a:	a311      	add	r3, pc, #68	; (adr r3, 8014750 <floor+0xf8>)
 801470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014710:	f7eb fdd4 	bl	80002bc <__adddf3>
 8014714:	2200      	movs	r2, #0
 8014716:	2300      	movs	r3, #0
 8014718:	f7ec fa16 	bl	8000b48 <__aeabi_dcmpgt>
 801471c:	2800      	cmp	r0, #0
 801471e:	d0bf      	beq.n	80146a0 <floor+0x48>
 8014720:	2c00      	cmp	r4, #0
 8014722:	da02      	bge.n	801472a <floor+0xd2>
 8014724:	2e14      	cmp	r6, #20
 8014726:	d103      	bne.n	8014730 <floor+0xd8>
 8014728:	3401      	adds	r4, #1
 801472a:	ea25 0507 	bic.w	r5, r5, r7
 801472e:	e7b7      	b.n	80146a0 <floor+0x48>
 8014730:	2301      	movs	r3, #1
 8014732:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014736:	fa03 f606 	lsl.w	r6, r3, r6
 801473a:	4435      	add	r5, r6
 801473c:	4545      	cmp	r5, r8
 801473e:	bf38      	it	cc
 8014740:	18e4      	addcc	r4, r4, r3
 8014742:	e7f2      	b.n	801472a <floor+0xd2>
 8014744:	2500      	movs	r5, #0
 8014746:	462c      	mov	r4, r5
 8014748:	e7aa      	b.n	80146a0 <floor+0x48>
 801474a:	bf00      	nop
 801474c:	f3af 8000 	nop.w
 8014750:	8800759c 	.word	0x8800759c
 8014754:	7e37e43c 	.word	0x7e37e43c
 8014758:	bff00000 	.word	0xbff00000
 801475c:	000fffff 	.word	0x000fffff

08014760 <scalbn>:
 8014760:	b570      	push	{r4, r5, r6, lr}
 8014762:	ec55 4b10 	vmov	r4, r5, d0
 8014766:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801476a:	4606      	mov	r6, r0
 801476c:	462b      	mov	r3, r5
 801476e:	b9aa      	cbnz	r2, 801479c <scalbn+0x3c>
 8014770:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014774:	4323      	orrs	r3, r4
 8014776:	d03b      	beq.n	80147f0 <scalbn+0x90>
 8014778:	4b31      	ldr	r3, [pc, #196]	; (8014840 <scalbn+0xe0>)
 801477a:	4629      	mov	r1, r5
 801477c:	2200      	movs	r2, #0
 801477e:	ee10 0a10 	vmov	r0, s0
 8014782:	f7eb ff51 	bl	8000628 <__aeabi_dmul>
 8014786:	4b2f      	ldr	r3, [pc, #188]	; (8014844 <scalbn+0xe4>)
 8014788:	429e      	cmp	r6, r3
 801478a:	4604      	mov	r4, r0
 801478c:	460d      	mov	r5, r1
 801478e:	da12      	bge.n	80147b6 <scalbn+0x56>
 8014790:	a327      	add	r3, pc, #156	; (adr r3, 8014830 <scalbn+0xd0>)
 8014792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014796:	f7eb ff47 	bl	8000628 <__aeabi_dmul>
 801479a:	e009      	b.n	80147b0 <scalbn+0x50>
 801479c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80147a0:	428a      	cmp	r2, r1
 80147a2:	d10c      	bne.n	80147be <scalbn+0x5e>
 80147a4:	ee10 2a10 	vmov	r2, s0
 80147a8:	4620      	mov	r0, r4
 80147aa:	4629      	mov	r1, r5
 80147ac:	f7eb fd86 	bl	80002bc <__adddf3>
 80147b0:	4604      	mov	r4, r0
 80147b2:	460d      	mov	r5, r1
 80147b4:	e01c      	b.n	80147f0 <scalbn+0x90>
 80147b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80147ba:	460b      	mov	r3, r1
 80147bc:	3a36      	subs	r2, #54	; 0x36
 80147be:	4432      	add	r2, r6
 80147c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80147c4:	428a      	cmp	r2, r1
 80147c6:	dd0b      	ble.n	80147e0 <scalbn+0x80>
 80147c8:	ec45 4b11 	vmov	d1, r4, r5
 80147cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014838 <scalbn+0xd8>
 80147d0:	f000 f83c 	bl	801484c <copysign>
 80147d4:	a318      	add	r3, pc, #96	; (adr r3, 8014838 <scalbn+0xd8>)
 80147d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147da:	ec51 0b10 	vmov	r0, r1, d0
 80147de:	e7da      	b.n	8014796 <scalbn+0x36>
 80147e0:	2a00      	cmp	r2, #0
 80147e2:	dd08      	ble.n	80147f6 <scalbn+0x96>
 80147e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80147e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80147ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80147f0:	ec45 4b10 	vmov	d0, r4, r5
 80147f4:	bd70      	pop	{r4, r5, r6, pc}
 80147f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80147fa:	da0d      	bge.n	8014818 <scalbn+0xb8>
 80147fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014800:	429e      	cmp	r6, r3
 8014802:	ec45 4b11 	vmov	d1, r4, r5
 8014806:	dce1      	bgt.n	80147cc <scalbn+0x6c>
 8014808:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014830 <scalbn+0xd0>
 801480c:	f000 f81e 	bl	801484c <copysign>
 8014810:	a307      	add	r3, pc, #28	; (adr r3, 8014830 <scalbn+0xd0>)
 8014812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014816:	e7e0      	b.n	80147da <scalbn+0x7a>
 8014818:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801481c:	3236      	adds	r2, #54	; 0x36
 801481e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014822:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014826:	4620      	mov	r0, r4
 8014828:	4629      	mov	r1, r5
 801482a:	2200      	movs	r2, #0
 801482c:	4b06      	ldr	r3, [pc, #24]	; (8014848 <scalbn+0xe8>)
 801482e:	e7b2      	b.n	8014796 <scalbn+0x36>
 8014830:	c2f8f359 	.word	0xc2f8f359
 8014834:	01a56e1f 	.word	0x01a56e1f
 8014838:	8800759c 	.word	0x8800759c
 801483c:	7e37e43c 	.word	0x7e37e43c
 8014840:	43500000 	.word	0x43500000
 8014844:	ffff3cb0 	.word	0xffff3cb0
 8014848:	3c900000 	.word	0x3c900000

0801484c <copysign>:
 801484c:	ec51 0b10 	vmov	r0, r1, d0
 8014850:	ee11 0a90 	vmov	r0, s3
 8014854:	ee10 2a10 	vmov	r2, s0
 8014858:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801485c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014860:	ea41 0300 	orr.w	r3, r1, r0
 8014864:	ec43 2b10 	vmov	d0, r2, r3
 8014868:	4770      	bx	lr
	...

0801486c <__errno>:
 801486c:	4b01      	ldr	r3, [pc, #4]	; (8014874 <__errno+0x8>)
 801486e:	6818      	ldr	r0, [r3, #0]
 8014870:	4770      	bx	lr
 8014872:	bf00      	nop
 8014874:	2000000c 	.word	0x2000000c

08014878 <__libc_init_array>:
 8014878:	b570      	push	{r4, r5, r6, lr}
 801487a:	4e0d      	ldr	r6, [pc, #52]	; (80148b0 <__libc_init_array+0x38>)
 801487c:	4c0d      	ldr	r4, [pc, #52]	; (80148b4 <__libc_init_array+0x3c>)
 801487e:	1ba4      	subs	r4, r4, r6
 8014880:	10a4      	asrs	r4, r4, #2
 8014882:	2500      	movs	r5, #0
 8014884:	42a5      	cmp	r5, r4
 8014886:	d109      	bne.n	801489c <__libc_init_array+0x24>
 8014888:	4e0b      	ldr	r6, [pc, #44]	; (80148b8 <__libc_init_array+0x40>)
 801488a:	4c0c      	ldr	r4, [pc, #48]	; (80148bc <__libc_init_array+0x44>)
 801488c:	f004 f9e8 	bl	8018c60 <_init>
 8014890:	1ba4      	subs	r4, r4, r6
 8014892:	10a4      	asrs	r4, r4, #2
 8014894:	2500      	movs	r5, #0
 8014896:	42a5      	cmp	r5, r4
 8014898:	d105      	bne.n	80148a6 <__libc_init_array+0x2e>
 801489a:	bd70      	pop	{r4, r5, r6, pc}
 801489c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80148a0:	4798      	blx	r3
 80148a2:	3501      	adds	r5, #1
 80148a4:	e7ee      	b.n	8014884 <__libc_init_array+0xc>
 80148a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80148aa:	4798      	blx	r3
 80148ac:	3501      	adds	r5, #1
 80148ae:	e7f2      	b.n	8014896 <__libc_init_array+0x1e>
 80148b0:	080197fc 	.word	0x080197fc
 80148b4:	080197fc 	.word	0x080197fc
 80148b8:	080197fc 	.word	0x080197fc
 80148bc:	08019804 	.word	0x08019804

080148c0 <memcpy>:
 80148c0:	b510      	push	{r4, lr}
 80148c2:	1e43      	subs	r3, r0, #1
 80148c4:	440a      	add	r2, r1
 80148c6:	4291      	cmp	r1, r2
 80148c8:	d100      	bne.n	80148cc <memcpy+0xc>
 80148ca:	bd10      	pop	{r4, pc}
 80148cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148d4:	e7f7      	b.n	80148c6 <memcpy+0x6>

080148d6 <memset>:
 80148d6:	4402      	add	r2, r0
 80148d8:	4603      	mov	r3, r0
 80148da:	4293      	cmp	r3, r2
 80148dc:	d100      	bne.n	80148e0 <memset+0xa>
 80148de:	4770      	bx	lr
 80148e0:	f803 1b01 	strb.w	r1, [r3], #1
 80148e4:	e7f9      	b.n	80148da <memset+0x4>

080148e6 <__cvt>:
 80148e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80148ea:	ec55 4b10 	vmov	r4, r5, d0
 80148ee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80148f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80148f4:	2d00      	cmp	r5, #0
 80148f6:	460e      	mov	r6, r1
 80148f8:	4691      	mov	r9, r2
 80148fa:	4619      	mov	r1, r3
 80148fc:	bfb8      	it	lt
 80148fe:	4622      	movlt	r2, r4
 8014900:	462b      	mov	r3, r5
 8014902:	f027 0720 	bic.w	r7, r7, #32
 8014906:	bfbb      	ittet	lt
 8014908:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801490c:	461d      	movlt	r5, r3
 801490e:	2300      	movge	r3, #0
 8014910:	232d      	movlt	r3, #45	; 0x2d
 8014912:	bfb8      	it	lt
 8014914:	4614      	movlt	r4, r2
 8014916:	2f46      	cmp	r7, #70	; 0x46
 8014918:	700b      	strb	r3, [r1, #0]
 801491a:	d004      	beq.n	8014926 <__cvt+0x40>
 801491c:	2f45      	cmp	r7, #69	; 0x45
 801491e:	d100      	bne.n	8014922 <__cvt+0x3c>
 8014920:	3601      	adds	r6, #1
 8014922:	2102      	movs	r1, #2
 8014924:	e000      	b.n	8014928 <__cvt+0x42>
 8014926:	2103      	movs	r1, #3
 8014928:	ab03      	add	r3, sp, #12
 801492a:	9301      	str	r3, [sp, #4]
 801492c:	ab02      	add	r3, sp, #8
 801492e:	9300      	str	r3, [sp, #0]
 8014930:	4632      	mov	r2, r6
 8014932:	4653      	mov	r3, sl
 8014934:	ec45 4b10 	vmov	d0, r4, r5
 8014938:	f001 fdfe 	bl	8016538 <_dtoa_r>
 801493c:	2f47      	cmp	r7, #71	; 0x47
 801493e:	4680      	mov	r8, r0
 8014940:	d102      	bne.n	8014948 <__cvt+0x62>
 8014942:	f019 0f01 	tst.w	r9, #1
 8014946:	d026      	beq.n	8014996 <__cvt+0xb0>
 8014948:	2f46      	cmp	r7, #70	; 0x46
 801494a:	eb08 0906 	add.w	r9, r8, r6
 801494e:	d111      	bne.n	8014974 <__cvt+0x8e>
 8014950:	f898 3000 	ldrb.w	r3, [r8]
 8014954:	2b30      	cmp	r3, #48	; 0x30
 8014956:	d10a      	bne.n	801496e <__cvt+0x88>
 8014958:	2200      	movs	r2, #0
 801495a:	2300      	movs	r3, #0
 801495c:	4620      	mov	r0, r4
 801495e:	4629      	mov	r1, r5
 8014960:	f7ec f8ca 	bl	8000af8 <__aeabi_dcmpeq>
 8014964:	b918      	cbnz	r0, 801496e <__cvt+0x88>
 8014966:	f1c6 0601 	rsb	r6, r6, #1
 801496a:	f8ca 6000 	str.w	r6, [sl]
 801496e:	f8da 3000 	ldr.w	r3, [sl]
 8014972:	4499      	add	r9, r3
 8014974:	2200      	movs	r2, #0
 8014976:	2300      	movs	r3, #0
 8014978:	4620      	mov	r0, r4
 801497a:	4629      	mov	r1, r5
 801497c:	f7ec f8bc 	bl	8000af8 <__aeabi_dcmpeq>
 8014980:	b938      	cbnz	r0, 8014992 <__cvt+0xac>
 8014982:	2230      	movs	r2, #48	; 0x30
 8014984:	9b03      	ldr	r3, [sp, #12]
 8014986:	454b      	cmp	r3, r9
 8014988:	d205      	bcs.n	8014996 <__cvt+0xb0>
 801498a:	1c59      	adds	r1, r3, #1
 801498c:	9103      	str	r1, [sp, #12]
 801498e:	701a      	strb	r2, [r3, #0]
 8014990:	e7f8      	b.n	8014984 <__cvt+0x9e>
 8014992:	f8cd 900c 	str.w	r9, [sp, #12]
 8014996:	9b03      	ldr	r3, [sp, #12]
 8014998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801499a:	eba3 0308 	sub.w	r3, r3, r8
 801499e:	4640      	mov	r0, r8
 80149a0:	6013      	str	r3, [r2, #0]
 80149a2:	b004      	add	sp, #16
 80149a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080149a8 <__exponent>:
 80149a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149aa:	2900      	cmp	r1, #0
 80149ac:	4604      	mov	r4, r0
 80149ae:	bfba      	itte	lt
 80149b0:	4249      	neglt	r1, r1
 80149b2:	232d      	movlt	r3, #45	; 0x2d
 80149b4:	232b      	movge	r3, #43	; 0x2b
 80149b6:	2909      	cmp	r1, #9
 80149b8:	f804 2b02 	strb.w	r2, [r4], #2
 80149bc:	7043      	strb	r3, [r0, #1]
 80149be:	dd20      	ble.n	8014a02 <__exponent+0x5a>
 80149c0:	f10d 0307 	add.w	r3, sp, #7
 80149c4:	461f      	mov	r7, r3
 80149c6:	260a      	movs	r6, #10
 80149c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80149cc:	fb06 1115 	mls	r1, r6, r5, r1
 80149d0:	3130      	adds	r1, #48	; 0x30
 80149d2:	2d09      	cmp	r5, #9
 80149d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80149d8:	f103 32ff 	add.w	r2, r3, #4294967295
 80149dc:	4629      	mov	r1, r5
 80149de:	dc09      	bgt.n	80149f4 <__exponent+0x4c>
 80149e0:	3130      	adds	r1, #48	; 0x30
 80149e2:	3b02      	subs	r3, #2
 80149e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80149e8:	42bb      	cmp	r3, r7
 80149ea:	4622      	mov	r2, r4
 80149ec:	d304      	bcc.n	80149f8 <__exponent+0x50>
 80149ee:	1a10      	subs	r0, r2, r0
 80149f0:	b003      	add	sp, #12
 80149f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149f4:	4613      	mov	r3, r2
 80149f6:	e7e7      	b.n	80149c8 <__exponent+0x20>
 80149f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149fc:	f804 2b01 	strb.w	r2, [r4], #1
 8014a00:	e7f2      	b.n	80149e8 <__exponent+0x40>
 8014a02:	2330      	movs	r3, #48	; 0x30
 8014a04:	4419      	add	r1, r3
 8014a06:	7083      	strb	r3, [r0, #2]
 8014a08:	1d02      	adds	r2, r0, #4
 8014a0a:	70c1      	strb	r1, [r0, #3]
 8014a0c:	e7ef      	b.n	80149ee <__exponent+0x46>
	...

08014a10 <_printf_float>:
 8014a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a14:	b08d      	sub	sp, #52	; 0x34
 8014a16:	460c      	mov	r4, r1
 8014a18:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014a1c:	4616      	mov	r6, r2
 8014a1e:	461f      	mov	r7, r3
 8014a20:	4605      	mov	r5, r0
 8014a22:	f002 fe7b 	bl	801771c <_localeconv_r>
 8014a26:	6803      	ldr	r3, [r0, #0]
 8014a28:	9304      	str	r3, [sp, #16]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7eb fbe8 	bl	8000200 <strlen>
 8014a30:	2300      	movs	r3, #0
 8014a32:	930a      	str	r3, [sp, #40]	; 0x28
 8014a34:	f8d8 3000 	ldr.w	r3, [r8]
 8014a38:	9005      	str	r0, [sp, #20]
 8014a3a:	3307      	adds	r3, #7
 8014a3c:	f023 0307 	bic.w	r3, r3, #7
 8014a40:	f103 0208 	add.w	r2, r3, #8
 8014a44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014a48:	f8d4 b000 	ldr.w	fp, [r4]
 8014a4c:	f8c8 2000 	str.w	r2, [r8]
 8014a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014a58:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014a5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014a60:	9307      	str	r3, [sp, #28]
 8014a62:	f8cd 8018 	str.w	r8, [sp, #24]
 8014a66:	f04f 32ff 	mov.w	r2, #4294967295
 8014a6a:	4ba7      	ldr	r3, [pc, #668]	; (8014d08 <_printf_float+0x2f8>)
 8014a6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a70:	f7ec f874 	bl	8000b5c <__aeabi_dcmpun>
 8014a74:	bb70      	cbnz	r0, 8014ad4 <_printf_float+0xc4>
 8014a76:	f04f 32ff 	mov.w	r2, #4294967295
 8014a7a:	4ba3      	ldr	r3, [pc, #652]	; (8014d08 <_printf_float+0x2f8>)
 8014a7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a80:	f7ec f84e 	bl	8000b20 <__aeabi_dcmple>
 8014a84:	bb30      	cbnz	r0, 8014ad4 <_printf_float+0xc4>
 8014a86:	2200      	movs	r2, #0
 8014a88:	2300      	movs	r3, #0
 8014a8a:	4640      	mov	r0, r8
 8014a8c:	4649      	mov	r1, r9
 8014a8e:	f7ec f83d 	bl	8000b0c <__aeabi_dcmplt>
 8014a92:	b110      	cbz	r0, 8014a9a <_printf_float+0x8a>
 8014a94:	232d      	movs	r3, #45	; 0x2d
 8014a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a9a:	4a9c      	ldr	r2, [pc, #624]	; (8014d0c <_printf_float+0x2fc>)
 8014a9c:	4b9c      	ldr	r3, [pc, #624]	; (8014d10 <_printf_float+0x300>)
 8014a9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014aa2:	bf8c      	ite	hi
 8014aa4:	4690      	movhi	r8, r2
 8014aa6:	4698      	movls	r8, r3
 8014aa8:	2303      	movs	r3, #3
 8014aaa:	f02b 0204 	bic.w	r2, fp, #4
 8014aae:	6123      	str	r3, [r4, #16]
 8014ab0:	6022      	str	r2, [r4, #0]
 8014ab2:	f04f 0900 	mov.w	r9, #0
 8014ab6:	9700      	str	r7, [sp, #0]
 8014ab8:	4633      	mov	r3, r6
 8014aba:	aa0b      	add	r2, sp, #44	; 0x2c
 8014abc:	4621      	mov	r1, r4
 8014abe:	4628      	mov	r0, r5
 8014ac0:	f000 f9e6 	bl	8014e90 <_printf_common>
 8014ac4:	3001      	adds	r0, #1
 8014ac6:	f040 808d 	bne.w	8014be4 <_printf_float+0x1d4>
 8014aca:	f04f 30ff 	mov.w	r0, #4294967295
 8014ace:	b00d      	add	sp, #52	; 0x34
 8014ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ad4:	4642      	mov	r2, r8
 8014ad6:	464b      	mov	r3, r9
 8014ad8:	4640      	mov	r0, r8
 8014ada:	4649      	mov	r1, r9
 8014adc:	f7ec f83e 	bl	8000b5c <__aeabi_dcmpun>
 8014ae0:	b110      	cbz	r0, 8014ae8 <_printf_float+0xd8>
 8014ae2:	4a8c      	ldr	r2, [pc, #560]	; (8014d14 <_printf_float+0x304>)
 8014ae4:	4b8c      	ldr	r3, [pc, #560]	; (8014d18 <_printf_float+0x308>)
 8014ae6:	e7da      	b.n	8014a9e <_printf_float+0x8e>
 8014ae8:	6861      	ldr	r1, [r4, #4]
 8014aea:	1c4b      	adds	r3, r1, #1
 8014aec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014af0:	a80a      	add	r0, sp, #40	; 0x28
 8014af2:	d13e      	bne.n	8014b72 <_printf_float+0x162>
 8014af4:	2306      	movs	r3, #6
 8014af6:	6063      	str	r3, [r4, #4]
 8014af8:	2300      	movs	r3, #0
 8014afa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014afe:	ab09      	add	r3, sp, #36	; 0x24
 8014b00:	9300      	str	r3, [sp, #0]
 8014b02:	ec49 8b10 	vmov	d0, r8, r9
 8014b06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014b0a:	6022      	str	r2, [r4, #0]
 8014b0c:	f8cd a004 	str.w	sl, [sp, #4]
 8014b10:	6861      	ldr	r1, [r4, #4]
 8014b12:	4628      	mov	r0, r5
 8014b14:	f7ff fee7 	bl	80148e6 <__cvt>
 8014b18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014b1c:	2b47      	cmp	r3, #71	; 0x47
 8014b1e:	4680      	mov	r8, r0
 8014b20:	d109      	bne.n	8014b36 <_printf_float+0x126>
 8014b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b24:	1cd8      	adds	r0, r3, #3
 8014b26:	db02      	blt.n	8014b2e <_printf_float+0x11e>
 8014b28:	6862      	ldr	r2, [r4, #4]
 8014b2a:	4293      	cmp	r3, r2
 8014b2c:	dd47      	ble.n	8014bbe <_printf_float+0x1ae>
 8014b2e:	f1aa 0a02 	sub.w	sl, sl, #2
 8014b32:	fa5f fa8a 	uxtb.w	sl, sl
 8014b36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014b3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b3c:	d824      	bhi.n	8014b88 <_printf_float+0x178>
 8014b3e:	3901      	subs	r1, #1
 8014b40:	4652      	mov	r2, sl
 8014b42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014b46:	9109      	str	r1, [sp, #36]	; 0x24
 8014b48:	f7ff ff2e 	bl	80149a8 <__exponent>
 8014b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b4e:	1813      	adds	r3, r2, r0
 8014b50:	2a01      	cmp	r2, #1
 8014b52:	4681      	mov	r9, r0
 8014b54:	6123      	str	r3, [r4, #16]
 8014b56:	dc02      	bgt.n	8014b5e <_printf_float+0x14e>
 8014b58:	6822      	ldr	r2, [r4, #0]
 8014b5a:	07d1      	lsls	r1, r2, #31
 8014b5c:	d501      	bpl.n	8014b62 <_printf_float+0x152>
 8014b5e:	3301      	adds	r3, #1
 8014b60:	6123      	str	r3, [r4, #16]
 8014b62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d0a5      	beq.n	8014ab6 <_printf_float+0xa6>
 8014b6a:	232d      	movs	r3, #45	; 0x2d
 8014b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b70:	e7a1      	b.n	8014ab6 <_printf_float+0xa6>
 8014b72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014b76:	f000 8177 	beq.w	8014e68 <_printf_float+0x458>
 8014b7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014b7e:	d1bb      	bne.n	8014af8 <_printf_float+0xe8>
 8014b80:	2900      	cmp	r1, #0
 8014b82:	d1b9      	bne.n	8014af8 <_printf_float+0xe8>
 8014b84:	2301      	movs	r3, #1
 8014b86:	e7b6      	b.n	8014af6 <_printf_float+0xe6>
 8014b88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014b8c:	d119      	bne.n	8014bc2 <_printf_float+0x1b2>
 8014b8e:	2900      	cmp	r1, #0
 8014b90:	6863      	ldr	r3, [r4, #4]
 8014b92:	dd0c      	ble.n	8014bae <_printf_float+0x19e>
 8014b94:	6121      	str	r1, [r4, #16]
 8014b96:	b913      	cbnz	r3, 8014b9e <_printf_float+0x18e>
 8014b98:	6822      	ldr	r2, [r4, #0]
 8014b9a:	07d2      	lsls	r2, r2, #31
 8014b9c:	d502      	bpl.n	8014ba4 <_printf_float+0x194>
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	440b      	add	r3, r1
 8014ba2:	6123      	str	r3, [r4, #16]
 8014ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ba6:	65a3      	str	r3, [r4, #88]	; 0x58
 8014ba8:	f04f 0900 	mov.w	r9, #0
 8014bac:	e7d9      	b.n	8014b62 <_printf_float+0x152>
 8014bae:	b913      	cbnz	r3, 8014bb6 <_printf_float+0x1a6>
 8014bb0:	6822      	ldr	r2, [r4, #0]
 8014bb2:	07d0      	lsls	r0, r2, #31
 8014bb4:	d501      	bpl.n	8014bba <_printf_float+0x1aa>
 8014bb6:	3302      	adds	r3, #2
 8014bb8:	e7f3      	b.n	8014ba2 <_printf_float+0x192>
 8014bba:	2301      	movs	r3, #1
 8014bbc:	e7f1      	b.n	8014ba2 <_printf_float+0x192>
 8014bbe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014bc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014bc6:	4293      	cmp	r3, r2
 8014bc8:	db05      	blt.n	8014bd6 <_printf_float+0x1c6>
 8014bca:	6822      	ldr	r2, [r4, #0]
 8014bcc:	6123      	str	r3, [r4, #16]
 8014bce:	07d1      	lsls	r1, r2, #31
 8014bd0:	d5e8      	bpl.n	8014ba4 <_printf_float+0x194>
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	e7e5      	b.n	8014ba2 <_printf_float+0x192>
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	bfd4      	ite	le
 8014bda:	f1c3 0302 	rsble	r3, r3, #2
 8014bde:	2301      	movgt	r3, #1
 8014be0:	4413      	add	r3, r2
 8014be2:	e7de      	b.n	8014ba2 <_printf_float+0x192>
 8014be4:	6823      	ldr	r3, [r4, #0]
 8014be6:	055a      	lsls	r2, r3, #21
 8014be8:	d407      	bmi.n	8014bfa <_printf_float+0x1ea>
 8014bea:	6923      	ldr	r3, [r4, #16]
 8014bec:	4642      	mov	r2, r8
 8014bee:	4631      	mov	r1, r6
 8014bf0:	4628      	mov	r0, r5
 8014bf2:	47b8      	blx	r7
 8014bf4:	3001      	adds	r0, #1
 8014bf6:	d12b      	bne.n	8014c50 <_printf_float+0x240>
 8014bf8:	e767      	b.n	8014aca <_printf_float+0xba>
 8014bfa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014bfe:	f240 80dc 	bls.w	8014dba <_printf_float+0x3aa>
 8014c02:	2200      	movs	r2, #0
 8014c04:	2300      	movs	r3, #0
 8014c06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014c0a:	f7eb ff75 	bl	8000af8 <__aeabi_dcmpeq>
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	d033      	beq.n	8014c7a <_printf_float+0x26a>
 8014c12:	2301      	movs	r3, #1
 8014c14:	4a41      	ldr	r2, [pc, #260]	; (8014d1c <_printf_float+0x30c>)
 8014c16:	4631      	mov	r1, r6
 8014c18:	4628      	mov	r0, r5
 8014c1a:	47b8      	blx	r7
 8014c1c:	3001      	adds	r0, #1
 8014c1e:	f43f af54 	beq.w	8014aca <_printf_float+0xba>
 8014c22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014c26:	429a      	cmp	r2, r3
 8014c28:	db02      	blt.n	8014c30 <_printf_float+0x220>
 8014c2a:	6823      	ldr	r3, [r4, #0]
 8014c2c:	07d8      	lsls	r0, r3, #31
 8014c2e:	d50f      	bpl.n	8014c50 <_printf_float+0x240>
 8014c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c34:	4631      	mov	r1, r6
 8014c36:	4628      	mov	r0, r5
 8014c38:	47b8      	blx	r7
 8014c3a:	3001      	adds	r0, #1
 8014c3c:	f43f af45 	beq.w	8014aca <_printf_float+0xba>
 8014c40:	f04f 0800 	mov.w	r8, #0
 8014c44:	f104 091a 	add.w	r9, r4, #26
 8014c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c4a:	3b01      	subs	r3, #1
 8014c4c:	4543      	cmp	r3, r8
 8014c4e:	dc09      	bgt.n	8014c64 <_printf_float+0x254>
 8014c50:	6823      	ldr	r3, [r4, #0]
 8014c52:	079b      	lsls	r3, r3, #30
 8014c54:	f100 8103 	bmi.w	8014e5e <_printf_float+0x44e>
 8014c58:	68e0      	ldr	r0, [r4, #12]
 8014c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c5c:	4298      	cmp	r0, r3
 8014c5e:	bfb8      	it	lt
 8014c60:	4618      	movlt	r0, r3
 8014c62:	e734      	b.n	8014ace <_printf_float+0xbe>
 8014c64:	2301      	movs	r3, #1
 8014c66:	464a      	mov	r2, r9
 8014c68:	4631      	mov	r1, r6
 8014c6a:	4628      	mov	r0, r5
 8014c6c:	47b8      	blx	r7
 8014c6e:	3001      	adds	r0, #1
 8014c70:	f43f af2b 	beq.w	8014aca <_printf_float+0xba>
 8014c74:	f108 0801 	add.w	r8, r8, #1
 8014c78:	e7e6      	b.n	8014c48 <_printf_float+0x238>
 8014c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	dc2b      	bgt.n	8014cd8 <_printf_float+0x2c8>
 8014c80:	2301      	movs	r3, #1
 8014c82:	4a26      	ldr	r2, [pc, #152]	; (8014d1c <_printf_float+0x30c>)
 8014c84:	4631      	mov	r1, r6
 8014c86:	4628      	mov	r0, r5
 8014c88:	47b8      	blx	r7
 8014c8a:	3001      	adds	r0, #1
 8014c8c:	f43f af1d 	beq.w	8014aca <_printf_float+0xba>
 8014c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c92:	b923      	cbnz	r3, 8014c9e <_printf_float+0x28e>
 8014c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c96:	b913      	cbnz	r3, 8014c9e <_printf_float+0x28e>
 8014c98:	6823      	ldr	r3, [r4, #0]
 8014c9a:	07d9      	lsls	r1, r3, #31
 8014c9c:	d5d8      	bpl.n	8014c50 <_printf_float+0x240>
 8014c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ca2:	4631      	mov	r1, r6
 8014ca4:	4628      	mov	r0, r5
 8014ca6:	47b8      	blx	r7
 8014ca8:	3001      	adds	r0, #1
 8014caa:	f43f af0e 	beq.w	8014aca <_printf_float+0xba>
 8014cae:	f04f 0900 	mov.w	r9, #0
 8014cb2:	f104 0a1a 	add.w	sl, r4, #26
 8014cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cb8:	425b      	negs	r3, r3
 8014cba:	454b      	cmp	r3, r9
 8014cbc:	dc01      	bgt.n	8014cc2 <_printf_float+0x2b2>
 8014cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cc0:	e794      	b.n	8014bec <_printf_float+0x1dc>
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	4652      	mov	r2, sl
 8014cc6:	4631      	mov	r1, r6
 8014cc8:	4628      	mov	r0, r5
 8014cca:	47b8      	blx	r7
 8014ccc:	3001      	adds	r0, #1
 8014cce:	f43f aefc 	beq.w	8014aca <_printf_float+0xba>
 8014cd2:	f109 0901 	add.w	r9, r9, #1
 8014cd6:	e7ee      	b.n	8014cb6 <_printf_float+0x2a6>
 8014cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	bfa8      	it	ge
 8014ce0:	461a      	movge	r2, r3
 8014ce2:	2a00      	cmp	r2, #0
 8014ce4:	4691      	mov	r9, r2
 8014ce6:	dd07      	ble.n	8014cf8 <_printf_float+0x2e8>
 8014ce8:	4613      	mov	r3, r2
 8014cea:	4631      	mov	r1, r6
 8014cec:	4642      	mov	r2, r8
 8014cee:	4628      	mov	r0, r5
 8014cf0:	47b8      	blx	r7
 8014cf2:	3001      	adds	r0, #1
 8014cf4:	f43f aee9 	beq.w	8014aca <_printf_float+0xba>
 8014cf8:	f104 031a 	add.w	r3, r4, #26
 8014cfc:	f04f 0b00 	mov.w	fp, #0
 8014d00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d04:	9306      	str	r3, [sp, #24]
 8014d06:	e015      	b.n	8014d34 <_printf_float+0x324>
 8014d08:	7fefffff 	.word	0x7fefffff
 8014d0c:	080194c4 	.word	0x080194c4
 8014d10:	080194c0 	.word	0x080194c0
 8014d14:	080194cc 	.word	0x080194cc
 8014d18:	080194c8 	.word	0x080194c8
 8014d1c:	080196eb 	.word	0x080196eb
 8014d20:	2301      	movs	r3, #1
 8014d22:	9a06      	ldr	r2, [sp, #24]
 8014d24:	4631      	mov	r1, r6
 8014d26:	4628      	mov	r0, r5
 8014d28:	47b8      	blx	r7
 8014d2a:	3001      	adds	r0, #1
 8014d2c:	f43f aecd 	beq.w	8014aca <_printf_float+0xba>
 8014d30:	f10b 0b01 	add.w	fp, fp, #1
 8014d34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014d38:	ebaa 0309 	sub.w	r3, sl, r9
 8014d3c:	455b      	cmp	r3, fp
 8014d3e:	dcef      	bgt.n	8014d20 <_printf_float+0x310>
 8014d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d44:	429a      	cmp	r2, r3
 8014d46:	44d0      	add	r8, sl
 8014d48:	db15      	blt.n	8014d76 <_printf_float+0x366>
 8014d4a:	6823      	ldr	r3, [r4, #0]
 8014d4c:	07da      	lsls	r2, r3, #31
 8014d4e:	d412      	bmi.n	8014d76 <_printf_float+0x366>
 8014d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d54:	eba3 020a 	sub.w	r2, r3, sl
 8014d58:	eba3 0a01 	sub.w	sl, r3, r1
 8014d5c:	4592      	cmp	sl, r2
 8014d5e:	bfa8      	it	ge
 8014d60:	4692      	movge	sl, r2
 8014d62:	f1ba 0f00 	cmp.w	sl, #0
 8014d66:	dc0e      	bgt.n	8014d86 <_printf_float+0x376>
 8014d68:	f04f 0800 	mov.w	r8, #0
 8014d6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d70:	f104 091a 	add.w	r9, r4, #26
 8014d74:	e019      	b.n	8014daa <_printf_float+0x39a>
 8014d76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d7a:	4631      	mov	r1, r6
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	47b8      	blx	r7
 8014d80:	3001      	adds	r0, #1
 8014d82:	d1e5      	bne.n	8014d50 <_printf_float+0x340>
 8014d84:	e6a1      	b.n	8014aca <_printf_float+0xba>
 8014d86:	4653      	mov	r3, sl
 8014d88:	4642      	mov	r2, r8
 8014d8a:	4631      	mov	r1, r6
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	47b8      	blx	r7
 8014d90:	3001      	adds	r0, #1
 8014d92:	d1e9      	bne.n	8014d68 <_printf_float+0x358>
 8014d94:	e699      	b.n	8014aca <_printf_float+0xba>
 8014d96:	2301      	movs	r3, #1
 8014d98:	464a      	mov	r2, r9
 8014d9a:	4631      	mov	r1, r6
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	47b8      	blx	r7
 8014da0:	3001      	adds	r0, #1
 8014da2:	f43f ae92 	beq.w	8014aca <_printf_float+0xba>
 8014da6:	f108 0801 	add.w	r8, r8, #1
 8014daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014dae:	1a9b      	subs	r3, r3, r2
 8014db0:	eba3 030a 	sub.w	r3, r3, sl
 8014db4:	4543      	cmp	r3, r8
 8014db6:	dcee      	bgt.n	8014d96 <_printf_float+0x386>
 8014db8:	e74a      	b.n	8014c50 <_printf_float+0x240>
 8014dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014dbc:	2a01      	cmp	r2, #1
 8014dbe:	dc01      	bgt.n	8014dc4 <_printf_float+0x3b4>
 8014dc0:	07db      	lsls	r3, r3, #31
 8014dc2:	d53a      	bpl.n	8014e3a <_printf_float+0x42a>
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	4642      	mov	r2, r8
 8014dc8:	4631      	mov	r1, r6
 8014dca:	4628      	mov	r0, r5
 8014dcc:	47b8      	blx	r7
 8014dce:	3001      	adds	r0, #1
 8014dd0:	f43f ae7b 	beq.w	8014aca <_printf_float+0xba>
 8014dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014dd8:	4631      	mov	r1, r6
 8014dda:	4628      	mov	r0, r5
 8014ddc:	47b8      	blx	r7
 8014dde:	3001      	adds	r0, #1
 8014de0:	f108 0801 	add.w	r8, r8, #1
 8014de4:	f43f ae71 	beq.w	8014aca <_printf_float+0xba>
 8014de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dea:	2200      	movs	r2, #0
 8014dec:	f103 3aff 	add.w	sl, r3, #4294967295
 8014df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014df4:	2300      	movs	r3, #0
 8014df6:	f7eb fe7f 	bl	8000af8 <__aeabi_dcmpeq>
 8014dfa:	b9c8      	cbnz	r0, 8014e30 <_printf_float+0x420>
 8014dfc:	4653      	mov	r3, sl
 8014dfe:	4642      	mov	r2, r8
 8014e00:	4631      	mov	r1, r6
 8014e02:	4628      	mov	r0, r5
 8014e04:	47b8      	blx	r7
 8014e06:	3001      	adds	r0, #1
 8014e08:	d10e      	bne.n	8014e28 <_printf_float+0x418>
 8014e0a:	e65e      	b.n	8014aca <_printf_float+0xba>
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	4652      	mov	r2, sl
 8014e10:	4631      	mov	r1, r6
 8014e12:	4628      	mov	r0, r5
 8014e14:	47b8      	blx	r7
 8014e16:	3001      	adds	r0, #1
 8014e18:	f43f ae57 	beq.w	8014aca <_printf_float+0xba>
 8014e1c:	f108 0801 	add.w	r8, r8, #1
 8014e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e22:	3b01      	subs	r3, #1
 8014e24:	4543      	cmp	r3, r8
 8014e26:	dcf1      	bgt.n	8014e0c <_printf_float+0x3fc>
 8014e28:	464b      	mov	r3, r9
 8014e2a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014e2e:	e6de      	b.n	8014bee <_printf_float+0x1de>
 8014e30:	f04f 0800 	mov.w	r8, #0
 8014e34:	f104 0a1a 	add.w	sl, r4, #26
 8014e38:	e7f2      	b.n	8014e20 <_printf_float+0x410>
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	e7df      	b.n	8014dfe <_printf_float+0x3ee>
 8014e3e:	2301      	movs	r3, #1
 8014e40:	464a      	mov	r2, r9
 8014e42:	4631      	mov	r1, r6
 8014e44:	4628      	mov	r0, r5
 8014e46:	47b8      	blx	r7
 8014e48:	3001      	adds	r0, #1
 8014e4a:	f43f ae3e 	beq.w	8014aca <_printf_float+0xba>
 8014e4e:	f108 0801 	add.w	r8, r8, #1
 8014e52:	68e3      	ldr	r3, [r4, #12]
 8014e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e56:	1a9b      	subs	r3, r3, r2
 8014e58:	4543      	cmp	r3, r8
 8014e5a:	dcf0      	bgt.n	8014e3e <_printf_float+0x42e>
 8014e5c:	e6fc      	b.n	8014c58 <_printf_float+0x248>
 8014e5e:	f04f 0800 	mov.w	r8, #0
 8014e62:	f104 0919 	add.w	r9, r4, #25
 8014e66:	e7f4      	b.n	8014e52 <_printf_float+0x442>
 8014e68:	2900      	cmp	r1, #0
 8014e6a:	f43f ae8b 	beq.w	8014b84 <_printf_float+0x174>
 8014e6e:	2300      	movs	r3, #0
 8014e70:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014e74:	ab09      	add	r3, sp, #36	; 0x24
 8014e76:	9300      	str	r3, [sp, #0]
 8014e78:	ec49 8b10 	vmov	d0, r8, r9
 8014e7c:	6022      	str	r2, [r4, #0]
 8014e7e:	f8cd a004 	str.w	sl, [sp, #4]
 8014e82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014e86:	4628      	mov	r0, r5
 8014e88:	f7ff fd2d 	bl	80148e6 <__cvt>
 8014e8c:	4680      	mov	r8, r0
 8014e8e:	e648      	b.n	8014b22 <_printf_float+0x112>

08014e90 <_printf_common>:
 8014e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e94:	4691      	mov	r9, r2
 8014e96:	461f      	mov	r7, r3
 8014e98:	688a      	ldr	r2, [r1, #8]
 8014e9a:	690b      	ldr	r3, [r1, #16]
 8014e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ea0:	4293      	cmp	r3, r2
 8014ea2:	bfb8      	it	lt
 8014ea4:	4613      	movlt	r3, r2
 8014ea6:	f8c9 3000 	str.w	r3, [r9]
 8014eaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014eae:	4606      	mov	r6, r0
 8014eb0:	460c      	mov	r4, r1
 8014eb2:	b112      	cbz	r2, 8014eba <_printf_common+0x2a>
 8014eb4:	3301      	adds	r3, #1
 8014eb6:	f8c9 3000 	str.w	r3, [r9]
 8014eba:	6823      	ldr	r3, [r4, #0]
 8014ebc:	0699      	lsls	r1, r3, #26
 8014ebe:	bf42      	ittt	mi
 8014ec0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014ec4:	3302      	addmi	r3, #2
 8014ec6:	f8c9 3000 	strmi.w	r3, [r9]
 8014eca:	6825      	ldr	r5, [r4, #0]
 8014ecc:	f015 0506 	ands.w	r5, r5, #6
 8014ed0:	d107      	bne.n	8014ee2 <_printf_common+0x52>
 8014ed2:	f104 0a19 	add.w	sl, r4, #25
 8014ed6:	68e3      	ldr	r3, [r4, #12]
 8014ed8:	f8d9 2000 	ldr.w	r2, [r9]
 8014edc:	1a9b      	subs	r3, r3, r2
 8014ede:	42ab      	cmp	r3, r5
 8014ee0:	dc28      	bgt.n	8014f34 <_printf_common+0xa4>
 8014ee2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014ee6:	6822      	ldr	r2, [r4, #0]
 8014ee8:	3300      	adds	r3, #0
 8014eea:	bf18      	it	ne
 8014eec:	2301      	movne	r3, #1
 8014eee:	0692      	lsls	r2, r2, #26
 8014ef0:	d42d      	bmi.n	8014f4e <_printf_common+0xbe>
 8014ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ef6:	4639      	mov	r1, r7
 8014ef8:	4630      	mov	r0, r6
 8014efa:	47c0      	blx	r8
 8014efc:	3001      	adds	r0, #1
 8014efe:	d020      	beq.n	8014f42 <_printf_common+0xb2>
 8014f00:	6823      	ldr	r3, [r4, #0]
 8014f02:	68e5      	ldr	r5, [r4, #12]
 8014f04:	f8d9 2000 	ldr.w	r2, [r9]
 8014f08:	f003 0306 	and.w	r3, r3, #6
 8014f0c:	2b04      	cmp	r3, #4
 8014f0e:	bf08      	it	eq
 8014f10:	1aad      	subeq	r5, r5, r2
 8014f12:	68a3      	ldr	r3, [r4, #8]
 8014f14:	6922      	ldr	r2, [r4, #16]
 8014f16:	bf0c      	ite	eq
 8014f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f1c:	2500      	movne	r5, #0
 8014f1e:	4293      	cmp	r3, r2
 8014f20:	bfc4      	itt	gt
 8014f22:	1a9b      	subgt	r3, r3, r2
 8014f24:	18ed      	addgt	r5, r5, r3
 8014f26:	f04f 0900 	mov.w	r9, #0
 8014f2a:	341a      	adds	r4, #26
 8014f2c:	454d      	cmp	r5, r9
 8014f2e:	d11a      	bne.n	8014f66 <_printf_common+0xd6>
 8014f30:	2000      	movs	r0, #0
 8014f32:	e008      	b.n	8014f46 <_printf_common+0xb6>
 8014f34:	2301      	movs	r3, #1
 8014f36:	4652      	mov	r2, sl
 8014f38:	4639      	mov	r1, r7
 8014f3a:	4630      	mov	r0, r6
 8014f3c:	47c0      	blx	r8
 8014f3e:	3001      	adds	r0, #1
 8014f40:	d103      	bne.n	8014f4a <_printf_common+0xba>
 8014f42:	f04f 30ff 	mov.w	r0, #4294967295
 8014f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f4a:	3501      	adds	r5, #1
 8014f4c:	e7c3      	b.n	8014ed6 <_printf_common+0x46>
 8014f4e:	18e1      	adds	r1, r4, r3
 8014f50:	1c5a      	adds	r2, r3, #1
 8014f52:	2030      	movs	r0, #48	; 0x30
 8014f54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f58:	4422      	add	r2, r4
 8014f5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f62:	3302      	adds	r3, #2
 8014f64:	e7c5      	b.n	8014ef2 <_printf_common+0x62>
 8014f66:	2301      	movs	r3, #1
 8014f68:	4622      	mov	r2, r4
 8014f6a:	4639      	mov	r1, r7
 8014f6c:	4630      	mov	r0, r6
 8014f6e:	47c0      	blx	r8
 8014f70:	3001      	adds	r0, #1
 8014f72:	d0e6      	beq.n	8014f42 <_printf_common+0xb2>
 8014f74:	f109 0901 	add.w	r9, r9, #1
 8014f78:	e7d8      	b.n	8014f2c <_printf_common+0x9c>
	...

08014f7c <_printf_i>:
 8014f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014f84:	460c      	mov	r4, r1
 8014f86:	7e09      	ldrb	r1, [r1, #24]
 8014f88:	b085      	sub	sp, #20
 8014f8a:	296e      	cmp	r1, #110	; 0x6e
 8014f8c:	4617      	mov	r7, r2
 8014f8e:	4606      	mov	r6, r0
 8014f90:	4698      	mov	r8, r3
 8014f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f94:	f000 80b3 	beq.w	80150fe <_printf_i+0x182>
 8014f98:	d822      	bhi.n	8014fe0 <_printf_i+0x64>
 8014f9a:	2963      	cmp	r1, #99	; 0x63
 8014f9c:	d036      	beq.n	801500c <_printf_i+0x90>
 8014f9e:	d80a      	bhi.n	8014fb6 <_printf_i+0x3a>
 8014fa0:	2900      	cmp	r1, #0
 8014fa2:	f000 80b9 	beq.w	8015118 <_printf_i+0x19c>
 8014fa6:	2958      	cmp	r1, #88	; 0x58
 8014fa8:	f000 8083 	beq.w	80150b2 <_printf_i+0x136>
 8014fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014fb4:	e032      	b.n	801501c <_printf_i+0xa0>
 8014fb6:	2964      	cmp	r1, #100	; 0x64
 8014fb8:	d001      	beq.n	8014fbe <_printf_i+0x42>
 8014fba:	2969      	cmp	r1, #105	; 0x69
 8014fbc:	d1f6      	bne.n	8014fac <_printf_i+0x30>
 8014fbe:	6820      	ldr	r0, [r4, #0]
 8014fc0:	6813      	ldr	r3, [r2, #0]
 8014fc2:	0605      	lsls	r5, r0, #24
 8014fc4:	f103 0104 	add.w	r1, r3, #4
 8014fc8:	d52a      	bpl.n	8015020 <_printf_i+0xa4>
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	6011      	str	r1, [r2, #0]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	da03      	bge.n	8014fda <_printf_i+0x5e>
 8014fd2:	222d      	movs	r2, #45	; 0x2d
 8014fd4:	425b      	negs	r3, r3
 8014fd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014fda:	486f      	ldr	r0, [pc, #444]	; (8015198 <_printf_i+0x21c>)
 8014fdc:	220a      	movs	r2, #10
 8014fde:	e039      	b.n	8015054 <_printf_i+0xd8>
 8014fe0:	2973      	cmp	r1, #115	; 0x73
 8014fe2:	f000 809d 	beq.w	8015120 <_printf_i+0x1a4>
 8014fe6:	d808      	bhi.n	8014ffa <_printf_i+0x7e>
 8014fe8:	296f      	cmp	r1, #111	; 0x6f
 8014fea:	d020      	beq.n	801502e <_printf_i+0xb2>
 8014fec:	2970      	cmp	r1, #112	; 0x70
 8014fee:	d1dd      	bne.n	8014fac <_printf_i+0x30>
 8014ff0:	6823      	ldr	r3, [r4, #0]
 8014ff2:	f043 0320 	orr.w	r3, r3, #32
 8014ff6:	6023      	str	r3, [r4, #0]
 8014ff8:	e003      	b.n	8015002 <_printf_i+0x86>
 8014ffa:	2975      	cmp	r1, #117	; 0x75
 8014ffc:	d017      	beq.n	801502e <_printf_i+0xb2>
 8014ffe:	2978      	cmp	r1, #120	; 0x78
 8015000:	d1d4      	bne.n	8014fac <_printf_i+0x30>
 8015002:	2378      	movs	r3, #120	; 0x78
 8015004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015008:	4864      	ldr	r0, [pc, #400]	; (801519c <_printf_i+0x220>)
 801500a:	e055      	b.n	80150b8 <_printf_i+0x13c>
 801500c:	6813      	ldr	r3, [r2, #0]
 801500e:	1d19      	adds	r1, r3, #4
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	6011      	str	r1, [r2, #0]
 8015014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801501c:	2301      	movs	r3, #1
 801501e:	e08c      	b.n	801513a <_printf_i+0x1be>
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	6011      	str	r1, [r2, #0]
 8015024:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015028:	bf18      	it	ne
 801502a:	b21b      	sxthne	r3, r3
 801502c:	e7cf      	b.n	8014fce <_printf_i+0x52>
 801502e:	6813      	ldr	r3, [r2, #0]
 8015030:	6825      	ldr	r5, [r4, #0]
 8015032:	1d18      	adds	r0, r3, #4
 8015034:	6010      	str	r0, [r2, #0]
 8015036:	0628      	lsls	r0, r5, #24
 8015038:	d501      	bpl.n	801503e <_printf_i+0xc2>
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	e002      	b.n	8015044 <_printf_i+0xc8>
 801503e:	0668      	lsls	r0, r5, #25
 8015040:	d5fb      	bpl.n	801503a <_printf_i+0xbe>
 8015042:	881b      	ldrh	r3, [r3, #0]
 8015044:	4854      	ldr	r0, [pc, #336]	; (8015198 <_printf_i+0x21c>)
 8015046:	296f      	cmp	r1, #111	; 0x6f
 8015048:	bf14      	ite	ne
 801504a:	220a      	movne	r2, #10
 801504c:	2208      	moveq	r2, #8
 801504e:	2100      	movs	r1, #0
 8015050:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015054:	6865      	ldr	r5, [r4, #4]
 8015056:	60a5      	str	r5, [r4, #8]
 8015058:	2d00      	cmp	r5, #0
 801505a:	f2c0 8095 	blt.w	8015188 <_printf_i+0x20c>
 801505e:	6821      	ldr	r1, [r4, #0]
 8015060:	f021 0104 	bic.w	r1, r1, #4
 8015064:	6021      	str	r1, [r4, #0]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d13d      	bne.n	80150e6 <_printf_i+0x16a>
 801506a:	2d00      	cmp	r5, #0
 801506c:	f040 808e 	bne.w	801518c <_printf_i+0x210>
 8015070:	4665      	mov	r5, ip
 8015072:	2a08      	cmp	r2, #8
 8015074:	d10b      	bne.n	801508e <_printf_i+0x112>
 8015076:	6823      	ldr	r3, [r4, #0]
 8015078:	07db      	lsls	r3, r3, #31
 801507a:	d508      	bpl.n	801508e <_printf_i+0x112>
 801507c:	6923      	ldr	r3, [r4, #16]
 801507e:	6862      	ldr	r2, [r4, #4]
 8015080:	429a      	cmp	r2, r3
 8015082:	bfde      	ittt	le
 8015084:	2330      	movle	r3, #48	; 0x30
 8015086:	f805 3c01 	strble.w	r3, [r5, #-1]
 801508a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801508e:	ebac 0305 	sub.w	r3, ip, r5
 8015092:	6123      	str	r3, [r4, #16]
 8015094:	f8cd 8000 	str.w	r8, [sp]
 8015098:	463b      	mov	r3, r7
 801509a:	aa03      	add	r2, sp, #12
 801509c:	4621      	mov	r1, r4
 801509e:	4630      	mov	r0, r6
 80150a0:	f7ff fef6 	bl	8014e90 <_printf_common>
 80150a4:	3001      	adds	r0, #1
 80150a6:	d14d      	bne.n	8015144 <_printf_i+0x1c8>
 80150a8:	f04f 30ff 	mov.w	r0, #4294967295
 80150ac:	b005      	add	sp, #20
 80150ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150b2:	4839      	ldr	r0, [pc, #228]	; (8015198 <_printf_i+0x21c>)
 80150b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80150b8:	6813      	ldr	r3, [r2, #0]
 80150ba:	6821      	ldr	r1, [r4, #0]
 80150bc:	1d1d      	adds	r5, r3, #4
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	6015      	str	r5, [r2, #0]
 80150c2:	060a      	lsls	r2, r1, #24
 80150c4:	d50b      	bpl.n	80150de <_printf_i+0x162>
 80150c6:	07ca      	lsls	r2, r1, #31
 80150c8:	bf44      	itt	mi
 80150ca:	f041 0120 	orrmi.w	r1, r1, #32
 80150ce:	6021      	strmi	r1, [r4, #0]
 80150d0:	b91b      	cbnz	r3, 80150da <_printf_i+0x15e>
 80150d2:	6822      	ldr	r2, [r4, #0]
 80150d4:	f022 0220 	bic.w	r2, r2, #32
 80150d8:	6022      	str	r2, [r4, #0]
 80150da:	2210      	movs	r2, #16
 80150dc:	e7b7      	b.n	801504e <_printf_i+0xd2>
 80150de:	064d      	lsls	r5, r1, #25
 80150e0:	bf48      	it	mi
 80150e2:	b29b      	uxthmi	r3, r3
 80150e4:	e7ef      	b.n	80150c6 <_printf_i+0x14a>
 80150e6:	4665      	mov	r5, ip
 80150e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80150ec:	fb02 3311 	mls	r3, r2, r1, r3
 80150f0:	5cc3      	ldrb	r3, [r0, r3]
 80150f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80150f6:	460b      	mov	r3, r1
 80150f8:	2900      	cmp	r1, #0
 80150fa:	d1f5      	bne.n	80150e8 <_printf_i+0x16c>
 80150fc:	e7b9      	b.n	8015072 <_printf_i+0xf6>
 80150fe:	6813      	ldr	r3, [r2, #0]
 8015100:	6825      	ldr	r5, [r4, #0]
 8015102:	6961      	ldr	r1, [r4, #20]
 8015104:	1d18      	adds	r0, r3, #4
 8015106:	6010      	str	r0, [r2, #0]
 8015108:	0628      	lsls	r0, r5, #24
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	d501      	bpl.n	8015112 <_printf_i+0x196>
 801510e:	6019      	str	r1, [r3, #0]
 8015110:	e002      	b.n	8015118 <_printf_i+0x19c>
 8015112:	066a      	lsls	r2, r5, #25
 8015114:	d5fb      	bpl.n	801510e <_printf_i+0x192>
 8015116:	8019      	strh	r1, [r3, #0]
 8015118:	2300      	movs	r3, #0
 801511a:	6123      	str	r3, [r4, #16]
 801511c:	4665      	mov	r5, ip
 801511e:	e7b9      	b.n	8015094 <_printf_i+0x118>
 8015120:	6813      	ldr	r3, [r2, #0]
 8015122:	1d19      	adds	r1, r3, #4
 8015124:	6011      	str	r1, [r2, #0]
 8015126:	681d      	ldr	r5, [r3, #0]
 8015128:	6862      	ldr	r2, [r4, #4]
 801512a:	2100      	movs	r1, #0
 801512c:	4628      	mov	r0, r5
 801512e:	f7eb f86f 	bl	8000210 <memchr>
 8015132:	b108      	cbz	r0, 8015138 <_printf_i+0x1bc>
 8015134:	1b40      	subs	r0, r0, r5
 8015136:	6060      	str	r0, [r4, #4]
 8015138:	6863      	ldr	r3, [r4, #4]
 801513a:	6123      	str	r3, [r4, #16]
 801513c:	2300      	movs	r3, #0
 801513e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015142:	e7a7      	b.n	8015094 <_printf_i+0x118>
 8015144:	6923      	ldr	r3, [r4, #16]
 8015146:	462a      	mov	r2, r5
 8015148:	4639      	mov	r1, r7
 801514a:	4630      	mov	r0, r6
 801514c:	47c0      	blx	r8
 801514e:	3001      	adds	r0, #1
 8015150:	d0aa      	beq.n	80150a8 <_printf_i+0x12c>
 8015152:	6823      	ldr	r3, [r4, #0]
 8015154:	079b      	lsls	r3, r3, #30
 8015156:	d413      	bmi.n	8015180 <_printf_i+0x204>
 8015158:	68e0      	ldr	r0, [r4, #12]
 801515a:	9b03      	ldr	r3, [sp, #12]
 801515c:	4298      	cmp	r0, r3
 801515e:	bfb8      	it	lt
 8015160:	4618      	movlt	r0, r3
 8015162:	e7a3      	b.n	80150ac <_printf_i+0x130>
 8015164:	2301      	movs	r3, #1
 8015166:	464a      	mov	r2, r9
 8015168:	4639      	mov	r1, r7
 801516a:	4630      	mov	r0, r6
 801516c:	47c0      	blx	r8
 801516e:	3001      	adds	r0, #1
 8015170:	d09a      	beq.n	80150a8 <_printf_i+0x12c>
 8015172:	3501      	adds	r5, #1
 8015174:	68e3      	ldr	r3, [r4, #12]
 8015176:	9a03      	ldr	r2, [sp, #12]
 8015178:	1a9b      	subs	r3, r3, r2
 801517a:	42ab      	cmp	r3, r5
 801517c:	dcf2      	bgt.n	8015164 <_printf_i+0x1e8>
 801517e:	e7eb      	b.n	8015158 <_printf_i+0x1dc>
 8015180:	2500      	movs	r5, #0
 8015182:	f104 0919 	add.w	r9, r4, #25
 8015186:	e7f5      	b.n	8015174 <_printf_i+0x1f8>
 8015188:	2b00      	cmp	r3, #0
 801518a:	d1ac      	bne.n	80150e6 <_printf_i+0x16a>
 801518c:	7803      	ldrb	r3, [r0, #0]
 801518e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015192:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015196:	e76c      	b.n	8015072 <_printf_i+0xf6>
 8015198:	080194d0 	.word	0x080194d0
 801519c:	080194e1 	.word	0x080194e1

080151a0 <_scanf_float>:
 80151a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151a4:	469a      	mov	sl, r3
 80151a6:	688b      	ldr	r3, [r1, #8]
 80151a8:	4616      	mov	r6, r2
 80151aa:	1e5a      	subs	r2, r3, #1
 80151ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80151b0:	b087      	sub	sp, #28
 80151b2:	bf83      	ittte	hi
 80151b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80151b8:	189b      	addhi	r3, r3, r2
 80151ba:	9301      	strhi	r3, [sp, #4]
 80151bc:	2300      	movls	r3, #0
 80151be:	bf86      	itte	hi
 80151c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80151c4:	608b      	strhi	r3, [r1, #8]
 80151c6:	9301      	strls	r3, [sp, #4]
 80151c8:	680b      	ldr	r3, [r1, #0]
 80151ca:	4688      	mov	r8, r1
 80151cc:	f04f 0b00 	mov.w	fp, #0
 80151d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80151d4:	f848 3b1c 	str.w	r3, [r8], #28
 80151d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80151dc:	4607      	mov	r7, r0
 80151de:	460c      	mov	r4, r1
 80151e0:	4645      	mov	r5, r8
 80151e2:	465a      	mov	r2, fp
 80151e4:	46d9      	mov	r9, fp
 80151e6:	f8cd b008 	str.w	fp, [sp, #8]
 80151ea:	68a1      	ldr	r1, [r4, #8]
 80151ec:	b181      	cbz	r1, 8015210 <_scanf_float+0x70>
 80151ee:	6833      	ldr	r3, [r6, #0]
 80151f0:	781b      	ldrb	r3, [r3, #0]
 80151f2:	2b49      	cmp	r3, #73	; 0x49
 80151f4:	d071      	beq.n	80152da <_scanf_float+0x13a>
 80151f6:	d84d      	bhi.n	8015294 <_scanf_float+0xf4>
 80151f8:	2b39      	cmp	r3, #57	; 0x39
 80151fa:	d840      	bhi.n	801527e <_scanf_float+0xde>
 80151fc:	2b31      	cmp	r3, #49	; 0x31
 80151fe:	f080 8088 	bcs.w	8015312 <_scanf_float+0x172>
 8015202:	2b2d      	cmp	r3, #45	; 0x2d
 8015204:	f000 8090 	beq.w	8015328 <_scanf_float+0x188>
 8015208:	d815      	bhi.n	8015236 <_scanf_float+0x96>
 801520a:	2b2b      	cmp	r3, #43	; 0x2b
 801520c:	f000 808c 	beq.w	8015328 <_scanf_float+0x188>
 8015210:	f1b9 0f00 	cmp.w	r9, #0
 8015214:	d003      	beq.n	801521e <_scanf_float+0x7e>
 8015216:	6823      	ldr	r3, [r4, #0]
 8015218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801521c:	6023      	str	r3, [r4, #0]
 801521e:	3a01      	subs	r2, #1
 8015220:	2a01      	cmp	r2, #1
 8015222:	f200 80ea 	bhi.w	80153fa <_scanf_float+0x25a>
 8015226:	4545      	cmp	r5, r8
 8015228:	f200 80dc 	bhi.w	80153e4 <_scanf_float+0x244>
 801522c:	2601      	movs	r6, #1
 801522e:	4630      	mov	r0, r6
 8015230:	b007      	add	sp, #28
 8015232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015236:	2b2e      	cmp	r3, #46	; 0x2e
 8015238:	f000 809f 	beq.w	801537a <_scanf_float+0x1da>
 801523c:	2b30      	cmp	r3, #48	; 0x30
 801523e:	d1e7      	bne.n	8015210 <_scanf_float+0x70>
 8015240:	6820      	ldr	r0, [r4, #0]
 8015242:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015246:	d064      	beq.n	8015312 <_scanf_float+0x172>
 8015248:	9b01      	ldr	r3, [sp, #4]
 801524a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801524e:	6020      	str	r0, [r4, #0]
 8015250:	f109 0901 	add.w	r9, r9, #1
 8015254:	b11b      	cbz	r3, 801525e <_scanf_float+0xbe>
 8015256:	3b01      	subs	r3, #1
 8015258:	3101      	adds	r1, #1
 801525a:	9301      	str	r3, [sp, #4]
 801525c:	60a1      	str	r1, [r4, #8]
 801525e:	68a3      	ldr	r3, [r4, #8]
 8015260:	3b01      	subs	r3, #1
 8015262:	60a3      	str	r3, [r4, #8]
 8015264:	6923      	ldr	r3, [r4, #16]
 8015266:	3301      	adds	r3, #1
 8015268:	6123      	str	r3, [r4, #16]
 801526a:	6873      	ldr	r3, [r6, #4]
 801526c:	3b01      	subs	r3, #1
 801526e:	2b00      	cmp	r3, #0
 8015270:	6073      	str	r3, [r6, #4]
 8015272:	f340 80ac 	ble.w	80153ce <_scanf_float+0x22e>
 8015276:	6833      	ldr	r3, [r6, #0]
 8015278:	3301      	adds	r3, #1
 801527a:	6033      	str	r3, [r6, #0]
 801527c:	e7b5      	b.n	80151ea <_scanf_float+0x4a>
 801527e:	2b45      	cmp	r3, #69	; 0x45
 8015280:	f000 8085 	beq.w	801538e <_scanf_float+0x1ee>
 8015284:	2b46      	cmp	r3, #70	; 0x46
 8015286:	d06a      	beq.n	801535e <_scanf_float+0x1be>
 8015288:	2b41      	cmp	r3, #65	; 0x41
 801528a:	d1c1      	bne.n	8015210 <_scanf_float+0x70>
 801528c:	2a01      	cmp	r2, #1
 801528e:	d1bf      	bne.n	8015210 <_scanf_float+0x70>
 8015290:	2202      	movs	r2, #2
 8015292:	e046      	b.n	8015322 <_scanf_float+0x182>
 8015294:	2b65      	cmp	r3, #101	; 0x65
 8015296:	d07a      	beq.n	801538e <_scanf_float+0x1ee>
 8015298:	d818      	bhi.n	80152cc <_scanf_float+0x12c>
 801529a:	2b54      	cmp	r3, #84	; 0x54
 801529c:	d066      	beq.n	801536c <_scanf_float+0x1cc>
 801529e:	d811      	bhi.n	80152c4 <_scanf_float+0x124>
 80152a0:	2b4e      	cmp	r3, #78	; 0x4e
 80152a2:	d1b5      	bne.n	8015210 <_scanf_float+0x70>
 80152a4:	2a00      	cmp	r2, #0
 80152a6:	d146      	bne.n	8015336 <_scanf_float+0x196>
 80152a8:	f1b9 0f00 	cmp.w	r9, #0
 80152ac:	d145      	bne.n	801533a <_scanf_float+0x19a>
 80152ae:	6821      	ldr	r1, [r4, #0]
 80152b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80152b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80152b8:	d13f      	bne.n	801533a <_scanf_float+0x19a>
 80152ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80152be:	6021      	str	r1, [r4, #0]
 80152c0:	2201      	movs	r2, #1
 80152c2:	e02e      	b.n	8015322 <_scanf_float+0x182>
 80152c4:	2b59      	cmp	r3, #89	; 0x59
 80152c6:	d01e      	beq.n	8015306 <_scanf_float+0x166>
 80152c8:	2b61      	cmp	r3, #97	; 0x61
 80152ca:	e7de      	b.n	801528a <_scanf_float+0xea>
 80152cc:	2b6e      	cmp	r3, #110	; 0x6e
 80152ce:	d0e9      	beq.n	80152a4 <_scanf_float+0x104>
 80152d0:	d815      	bhi.n	80152fe <_scanf_float+0x15e>
 80152d2:	2b66      	cmp	r3, #102	; 0x66
 80152d4:	d043      	beq.n	801535e <_scanf_float+0x1be>
 80152d6:	2b69      	cmp	r3, #105	; 0x69
 80152d8:	d19a      	bne.n	8015210 <_scanf_float+0x70>
 80152da:	f1bb 0f00 	cmp.w	fp, #0
 80152de:	d138      	bne.n	8015352 <_scanf_float+0x1b2>
 80152e0:	f1b9 0f00 	cmp.w	r9, #0
 80152e4:	d197      	bne.n	8015216 <_scanf_float+0x76>
 80152e6:	6821      	ldr	r1, [r4, #0]
 80152e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80152ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80152f0:	d195      	bne.n	801521e <_scanf_float+0x7e>
 80152f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80152f6:	6021      	str	r1, [r4, #0]
 80152f8:	f04f 0b01 	mov.w	fp, #1
 80152fc:	e011      	b.n	8015322 <_scanf_float+0x182>
 80152fe:	2b74      	cmp	r3, #116	; 0x74
 8015300:	d034      	beq.n	801536c <_scanf_float+0x1cc>
 8015302:	2b79      	cmp	r3, #121	; 0x79
 8015304:	d184      	bne.n	8015210 <_scanf_float+0x70>
 8015306:	f1bb 0f07 	cmp.w	fp, #7
 801530a:	d181      	bne.n	8015210 <_scanf_float+0x70>
 801530c:	f04f 0b08 	mov.w	fp, #8
 8015310:	e007      	b.n	8015322 <_scanf_float+0x182>
 8015312:	eb12 0f0b 	cmn.w	r2, fp
 8015316:	f47f af7b 	bne.w	8015210 <_scanf_float+0x70>
 801531a:	6821      	ldr	r1, [r4, #0]
 801531c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015320:	6021      	str	r1, [r4, #0]
 8015322:	702b      	strb	r3, [r5, #0]
 8015324:	3501      	adds	r5, #1
 8015326:	e79a      	b.n	801525e <_scanf_float+0xbe>
 8015328:	6821      	ldr	r1, [r4, #0]
 801532a:	0608      	lsls	r0, r1, #24
 801532c:	f57f af70 	bpl.w	8015210 <_scanf_float+0x70>
 8015330:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015334:	e7f4      	b.n	8015320 <_scanf_float+0x180>
 8015336:	2a02      	cmp	r2, #2
 8015338:	d047      	beq.n	80153ca <_scanf_float+0x22a>
 801533a:	f1bb 0f01 	cmp.w	fp, #1
 801533e:	d003      	beq.n	8015348 <_scanf_float+0x1a8>
 8015340:	f1bb 0f04 	cmp.w	fp, #4
 8015344:	f47f af64 	bne.w	8015210 <_scanf_float+0x70>
 8015348:	f10b 0b01 	add.w	fp, fp, #1
 801534c:	fa5f fb8b 	uxtb.w	fp, fp
 8015350:	e7e7      	b.n	8015322 <_scanf_float+0x182>
 8015352:	f1bb 0f03 	cmp.w	fp, #3
 8015356:	d0f7      	beq.n	8015348 <_scanf_float+0x1a8>
 8015358:	f1bb 0f05 	cmp.w	fp, #5
 801535c:	e7f2      	b.n	8015344 <_scanf_float+0x1a4>
 801535e:	f1bb 0f02 	cmp.w	fp, #2
 8015362:	f47f af55 	bne.w	8015210 <_scanf_float+0x70>
 8015366:	f04f 0b03 	mov.w	fp, #3
 801536a:	e7da      	b.n	8015322 <_scanf_float+0x182>
 801536c:	f1bb 0f06 	cmp.w	fp, #6
 8015370:	f47f af4e 	bne.w	8015210 <_scanf_float+0x70>
 8015374:	f04f 0b07 	mov.w	fp, #7
 8015378:	e7d3      	b.n	8015322 <_scanf_float+0x182>
 801537a:	6821      	ldr	r1, [r4, #0]
 801537c:	0588      	lsls	r0, r1, #22
 801537e:	f57f af47 	bpl.w	8015210 <_scanf_float+0x70>
 8015382:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015386:	6021      	str	r1, [r4, #0]
 8015388:	f8cd 9008 	str.w	r9, [sp, #8]
 801538c:	e7c9      	b.n	8015322 <_scanf_float+0x182>
 801538e:	6821      	ldr	r1, [r4, #0]
 8015390:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015394:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015398:	d006      	beq.n	80153a8 <_scanf_float+0x208>
 801539a:	0548      	lsls	r0, r1, #21
 801539c:	f57f af38 	bpl.w	8015210 <_scanf_float+0x70>
 80153a0:	f1b9 0f00 	cmp.w	r9, #0
 80153a4:	f43f af3b 	beq.w	801521e <_scanf_float+0x7e>
 80153a8:	0588      	lsls	r0, r1, #22
 80153aa:	bf58      	it	pl
 80153ac:	9802      	ldrpl	r0, [sp, #8]
 80153ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80153b2:	bf58      	it	pl
 80153b4:	eba9 0000 	subpl.w	r0, r9, r0
 80153b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80153bc:	bf58      	it	pl
 80153be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80153c2:	6021      	str	r1, [r4, #0]
 80153c4:	f04f 0900 	mov.w	r9, #0
 80153c8:	e7ab      	b.n	8015322 <_scanf_float+0x182>
 80153ca:	2203      	movs	r2, #3
 80153cc:	e7a9      	b.n	8015322 <_scanf_float+0x182>
 80153ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80153d2:	9205      	str	r2, [sp, #20]
 80153d4:	4631      	mov	r1, r6
 80153d6:	4638      	mov	r0, r7
 80153d8:	4798      	blx	r3
 80153da:	9a05      	ldr	r2, [sp, #20]
 80153dc:	2800      	cmp	r0, #0
 80153de:	f43f af04 	beq.w	80151ea <_scanf_float+0x4a>
 80153e2:	e715      	b.n	8015210 <_scanf_float+0x70>
 80153e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80153e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80153ec:	4632      	mov	r2, r6
 80153ee:	4638      	mov	r0, r7
 80153f0:	4798      	blx	r3
 80153f2:	6923      	ldr	r3, [r4, #16]
 80153f4:	3b01      	subs	r3, #1
 80153f6:	6123      	str	r3, [r4, #16]
 80153f8:	e715      	b.n	8015226 <_scanf_float+0x86>
 80153fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80153fe:	2b06      	cmp	r3, #6
 8015400:	d80a      	bhi.n	8015418 <_scanf_float+0x278>
 8015402:	f1bb 0f02 	cmp.w	fp, #2
 8015406:	d968      	bls.n	80154da <_scanf_float+0x33a>
 8015408:	f1ab 0b03 	sub.w	fp, fp, #3
 801540c:	fa5f fb8b 	uxtb.w	fp, fp
 8015410:	eba5 0b0b 	sub.w	fp, r5, fp
 8015414:	455d      	cmp	r5, fp
 8015416:	d14b      	bne.n	80154b0 <_scanf_float+0x310>
 8015418:	6823      	ldr	r3, [r4, #0]
 801541a:	05da      	lsls	r2, r3, #23
 801541c:	d51f      	bpl.n	801545e <_scanf_float+0x2be>
 801541e:	055b      	lsls	r3, r3, #21
 8015420:	d468      	bmi.n	80154f4 <_scanf_float+0x354>
 8015422:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015426:	6923      	ldr	r3, [r4, #16]
 8015428:	2965      	cmp	r1, #101	; 0x65
 801542a:	f103 33ff 	add.w	r3, r3, #4294967295
 801542e:	f105 3bff 	add.w	fp, r5, #4294967295
 8015432:	6123      	str	r3, [r4, #16]
 8015434:	d00d      	beq.n	8015452 <_scanf_float+0x2b2>
 8015436:	2945      	cmp	r1, #69	; 0x45
 8015438:	d00b      	beq.n	8015452 <_scanf_float+0x2b2>
 801543a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801543e:	4632      	mov	r2, r6
 8015440:	4638      	mov	r0, r7
 8015442:	4798      	blx	r3
 8015444:	6923      	ldr	r3, [r4, #16]
 8015446:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801544a:	3b01      	subs	r3, #1
 801544c:	f1a5 0b02 	sub.w	fp, r5, #2
 8015450:	6123      	str	r3, [r4, #16]
 8015452:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015456:	4632      	mov	r2, r6
 8015458:	4638      	mov	r0, r7
 801545a:	4798      	blx	r3
 801545c:	465d      	mov	r5, fp
 801545e:	6826      	ldr	r6, [r4, #0]
 8015460:	f016 0610 	ands.w	r6, r6, #16
 8015464:	d17a      	bne.n	801555c <_scanf_float+0x3bc>
 8015466:	702e      	strb	r6, [r5, #0]
 8015468:	6823      	ldr	r3, [r4, #0]
 801546a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801546e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015472:	d142      	bne.n	80154fa <_scanf_float+0x35a>
 8015474:	9b02      	ldr	r3, [sp, #8]
 8015476:	eba9 0303 	sub.w	r3, r9, r3
 801547a:	425a      	negs	r2, r3
 801547c:	2b00      	cmp	r3, #0
 801547e:	d149      	bne.n	8015514 <_scanf_float+0x374>
 8015480:	2200      	movs	r2, #0
 8015482:	4641      	mov	r1, r8
 8015484:	4638      	mov	r0, r7
 8015486:	f000 ff0b 	bl	80162a0 <_strtod_r>
 801548a:	6825      	ldr	r5, [r4, #0]
 801548c:	f8da 3000 	ldr.w	r3, [sl]
 8015490:	f015 0f02 	tst.w	r5, #2
 8015494:	f103 0204 	add.w	r2, r3, #4
 8015498:	ec59 8b10 	vmov	r8, r9, d0
 801549c:	f8ca 2000 	str.w	r2, [sl]
 80154a0:	d043      	beq.n	801552a <_scanf_float+0x38a>
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	e9c3 8900 	strd	r8, r9, [r3]
 80154a8:	68e3      	ldr	r3, [r4, #12]
 80154aa:	3301      	adds	r3, #1
 80154ac:	60e3      	str	r3, [r4, #12]
 80154ae:	e6be      	b.n	801522e <_scanf_float+0x8e>
 80154b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80154b8:	4632      	mov	r2, r6
 80154ba:	4638      	mov	r0, r7
 80154bc:	4798      	blx	r3
 80154be:	6923      	ldr	r3, [r4, #16]
 80154c0:	3b01      	subs	r3, #1
 80154c2:	6123      	str	r3, [r4, #16]
 80154c4:	e7a6      	b.n	8015414 <_scanf_float+0x274>
 80154c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80154ce:	4632      	mov	r2, r6
 80154d0:	4638      	mov	r0, r7
 80154d2:	4798      	blx	r3
 80154d4:	6923      	ldr	r3, [r4, #16]
 80154d6:	3b01      	subs	r3, #1
 80154d8:	6123      	str	r3, [r4, #16]
 80154da:	4545      	cmp	r5, r8
 80154dc:	d8f3      	bhi.n	80154c6 <_scanf_float+0x326>
 80154de:	e6a5      	b.n	801522c <_scanf_float+0x8c>
 80154e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80154e8:	4632      	mov	r2, r6
 80154ea:	4638      	mov	r0, r7
 80154ec:	4798      	blx	r3
 80154ee:	6923      	ldr	r3, [r4, #16]
 80154f0:	3b01      	subs	r3, #1
 80154f2:	6123      	str	r3, [r4, #16]
 80154f4:	4545      	cmp	r5, r8
 80154f6:	d8f3      	bhi.n	80154e0 <_scanf_float+0x340>
 80154f8:	e698      	b.n	801522c <_scanf_float+0x8c>
 80154fa:	9b03      	ldr	r3, [sp, #12]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d0bf      	beq.n	8015480 <_scanf_float+0x2e0>
 8015500:	9904      	ldr	r1, [sp, #16]
 8015502:	230a      	movs	r3, #10
 8015504:	4632      	mov	r2, r6
 8015506:	3101      	adds	r1, #1
 8015508:	4638      	mov	r0, r7
 801550a:	f000 ff55 	bl	80163b8 <_strtol_r>
 801550e:	9b03      	ldr	r3, [sp, #12]
 8015510:	9d04      	ldr	r5, [sp, #16]
 8015512:	1ac2      	subs	r2, r0, r3
 8015514:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015518:	429d      	cmp	r5, r3
 801551a:	bf28      	it	cs
 801551c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015520:	490f      	ldr	r1, [pc, #60]	; (8015560 <_scanf_float+0x3c0>)
 8015522:	4628      	mov	r0, r5
 8015524:	f000 f858 	bl	80155d8 <siprintf>
 8015528:	e7aa      	b.n	8015480 <_scanf_float+0x2e0>
 801552a:	f015 0504 	ands.w	r5, r5, #4
 801552e:	d1b8      	bne.n	80154a2 <_scanf_float+0x302>
 8015530:	681f      	ldr	r7, [r3, #0]
 8015532:	ee10 2a10 	vmov	r2, s0
 8015536:	464b      	mov	r3, r9
 8015538:	ee10 0a10 	vmov	r0, s0
 801553c:	4649      	mov	r1, r9
 801553e:	f7eb fb0d 	bl	8000b5c <__aeabi_dcmpun>
 8015542:	b128      	cbz	r0, 8015550 <_scanf_float+0x3b0>
 8015544:	4628      	mov	r0, r5
 8015546:	f000 f80d 	bl	8015564 <nanf>
 801554a:	ed87 0a00 	vstr	s0, [r7]
 801554e:	e7ab      	b.n	80154a8 <_scanf_float+0x308>
 8015550:	4640      	mov	r0, r8
 8015552:	4649      	mov	r1, r9
 8015554:	f7eb fb60 	bl	8000c18 <__aeabi_d2f>
 8015558:	6038      	str	r0, [r7, #0]
 801555a:	e7a5      	b.n	80154a8 <_scanf_float+0x308>
 801555c:	2600      	movs	r6, #0
 801555e:	e666      	b.n	801522e <_scanf_float+0x8e>
 8015560:	080194f2 	.word	0x080194f2

08015564 <nanf>:
 8015564:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801556c <nanf+0x8>
 8015568:	4770      	bx	lr
 801556a:	bf00      	nop
 801556c:	7fc00000 	.word	0x7fc00000

08015570 <sniprintf>:
 8015570:	b40c      	push	{r2, r3}
 8015572:	b530      	push	{r4, r5, lr}
 8015574:	4b17      	ldr	r3, [pc, #92]	; (80155d4 <sniprintf+0x64>)
 8015576:	1e0c      	subs	r4, r1, #0
 8015578:	b09d      	sub	sp, #116	; 0x74
 801557a:	681d      	ldr	r5, [r3, #0]
 801557c:	da08      	bge.n	8015590 <sniprintf+0x20>
 801557e:	238b      	movs	r3, #139	; 0x8b
 8015580:	602b      	str	r3, [r5, #0]
 8015582:	f04f 30ff 	mov.w	r0, #4294967295
 8015586:	b01d      	add	sp, #116	; 0x74
 8015588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801558c:	b002      	add	sp, #8
 801558e:	4770      	bx	lr
 8015590:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015594:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015598:	bf14      	ite	ne
 801559a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801559e:	4623      	moveq	r3, r4
 80155a0:	9304      	str	r3, [sp, #16]
 80155a2:	9307      	str	r3, [sp, #28]
 80155a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155a8:	9002      	str	r0, [sp, #8]
 80155aa:	9006      	str	r0, [sp, #24]
 80155ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80155b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80155b2:	ab21      	add	r3, sp, #132	; 0x84
 80155b4:	a902      	add	r1, sp, #8
 80155b6:	4628      	mov	r0, r5
 80155b8:	9301      	str	r3, [sp, #4]
 80155ba:	f002 fde7 	bl	801818c <_svfiprintf_r>
 80155be:	1c43      	adds	r3, r0, #1
 80155c0:	bfbc      	itt	lt
 80155c2:	238b      	movlt	r3, #139	; 0x8b
 80155c4:	602b      	strlt	r3, [r5, #0]
 80155c6:	2c00      	cmp	r4, #0
 80155c8:	d0dd      	beq.n	8015586 <sniprintf+0x16>
 80155ca:	9b02      	ldr	r3, [sp, #8]
 80155cc:	2200      	movs	r2, #0
 80155ce:	701a      	strb	r2, [r3, #0]
 80155d0:	e7d9      	b.n	8015586 <sniprintf+0x16>
 80155d2:	bf00      	nop
 80155d4:	2000000c 	.word	0x2000000c

080155d8 <siprintf>:
 80155d8:	b40e      	push	{r1, r2, r3}
 80155da:	b500      	push	{lr}
 80155dc:	b09c      	sub	sp, #112	; 0x70
 80155de:	ab1d      	add	r3, sp, #116	; 0x74
 80155e0:	9002      	str	r0, [sp, #8]
 80155e2:	9006      	str	r0, [sp, #24]
 80155e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80155e8:	4809      	ldr	r0, [pc, #36]	; (8015610 <siprintf+0x38>)
 80155ea:	9107      	str	r1, [sp, #28]
 80155ec:	9104      	str	r1, [sp, #16]
 80155ee:	4909      	ldr	r1, [pc, #36]	; (8015614 <siprintf+0x3c>)
 80155f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80155f4:	9105      	str	r1, [sp, #20]
 80155f6:	6800      	ldr	r0, [r0, #0]
 80155f8:	9301      	str	r3, [sp, #4]
 80155fa:	a902      	add	r1, sp, #8
 80155fc:	f002 fdc6 	bl	801818c <_svfiprintf_r>
 8015600:	9b02      	ldr	r3, [sp, #8]
 8015602:	2200      	movs	r2, #0
 8015604:	701a      	strb	r2, [r3, #0]
 8015606:	b01c      	add	sp, #112	; 0x70
 8015608:	f85d eb04 	ldr.w	lr, [sp], #4
 801560c:	b003      	add	sp, #12
 801560e:	4770      	bx	lr
 8015610:	2000000c 	.word	0x2000000c
 8015614:	ffff0208 	.word	0xffff0208

08015618 <siscanf>:
 8015618:	b40e      	push	{r1, r2, r3}
 801561a:	b530      	push	{r4, r5, lr}
 801561c:	b09c      	sub	sp, #112	; 0x70
 801561e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015620:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015624:	f854 5b04 	ldr.w	r5, [r4], #4
 8015628:	f8ad 2014 	strh.w	r2, [sp, #20]
 801562c:	9002      	str	r0, [sp, #8]
 801562e:	9006      	str	r0, [sp, #24]
 8015630:	f7ea fde6 	bl	8000200 <strlen>
 8015634:	4b0b      	ldr	r3, [pc, #44]	; (8015664 <siscanf+0x4c>)
 8015636:	9003      	str	r0, [sp, #12]
 8015638:	9007      	str	r0, [sp, #28]
 801563a:	930b      	str	r3, [sp, #44]	; 0x2c
 801563c:	480a      	ldr	r0, [pc, #40]	; (8015668 <siscanf+0x50>)
 801563e:	9401      	str	r4, [sp, #4]
 8015640:	2300      	movs	r3, #0
 8015642:	930f      	str	r3, [sp, #60]	; 0x3c
 8015644:	9314      	str	r3, [sp, #80]	; 0x50
 8015646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801564a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801564e:	462a      	mov	r2, r5
 8015650:	4623      	mov	r3, r4
 8015652:	a902      	add	r1, sp, #8
 8015654:	6800      	ldr	r0, [r0, #0]
 8015656:	f002 feeb 	bl	8018430 <__ssvfiscanf_r>
 801565a:	b01c      	add	sp, #112	; 0x70
 801565c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015660:	b003      	add	sp, #12
 8015662:	4770      	bx	lr
 8015664:	0801566d 	.word	0x0801566d
 8015668:	2000000c 	.word	0x2000000c

0801566c <__seofread>:
 801566c:	2000      	movs	r0, #0
 801566e:	4770      	bx	lr

08015670 <strcpy>:
 8015670:	4603      	mov	r3, r0
 8015672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015676:	f803 2b01 	strb.w	r2, [r3], #1
 801567a:	2a00      	cmp	r2, #0
 801567c:	d1f9      	bne.n	8015672 <strcpy+0x2>
 801567e:	4770      	bx	lr

08015680 <sulp>:
 8015680:	b570      	push	{r4, r5, r6, lr}
 8015682:	4604      	mov	r4, r0
 8015684:	460d      	mov	r5, r1
 8015686:	ec45 4b10 	vmov	d0, r4, r5
 801568a:	4616      	mov	r6, r2
 801568c:	f002 fb3a 	bl	8017d04 <__ulp>
 8015690:	ec51 0b10 	vmov	r0, r1, d0
 8015694:	b17e      	cbz	r6, 80156b6 <sulp+0x36>
 8015696:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801569a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801569e:	2b00      	cmp	r3, #0
 80156a0:	dd09      	ble.n	80156b6 <sulp+0x36>
 80156a2:	051b      	lsls	r3, r3, #20
 80156a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80156a8:	2400      	movs	r4, #0
 80156aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80156ae:	4622      	mov	r2, r4
 80156b0:	462b      	mov	r3, r5
 80156b2:	f7ea ffb9 	bl	8000628 <__aeabi_dmul>
 80156b6:	bd70      	pop	{r4, r5, r6, pc}

080156b8 <_strtod_l>:
 80156b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156bc:	461f      	mov	r7, r3
 80156be:	b0a1      	sub	sp, #132	; 0x84
 80156c0:	2300      	movs	r3, #0
 80156c2:	4681      	mov	r9, r0
 80156c4:	4638      	mov	r0, r7
 80156c6:	460e      	mov	r6, r1
 80156c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80156ca:	931c      	str	r3, [sp, #112]	; 0x70
 80156cc:	f002 f824 	bl	8017718 <__localeconv_l>
 80156d0:	4680      	mov	r8, r0
 80156d2:	6800      	ldr	r0, [r0, #0]
 80156d4:	f7ea fd94 	bl	8000200 <strlen>
 80156d8:	f04f 0a00 	mov.w	sl, #0
 80156dc:	4604      	mov	r4, r0
 80156de:	f04f 0b00 	mov.w	fp, #0
 80156e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80156e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156e6:	781a      	ldrb	r2, [r3, #0]
 80156e8:	2a0d      	cmp	r2, #13
 80156ea:	d832      	bhi.n	8015752 <_strtod_l+0x9a>
 80156ec:	2a09      	cmp	r2, #9
 80156ee:	d236      	bcs.n	801575e <_strtod_l+0xa6>
 80156f0:	2a00      	cmp	r2, #0
 80156f2:	d03e      	beq.n	8015772 <_strtod_l+0xba>
 80156f4:	2300      	movs	r3, #0
 80156f6:	930d      	str	r3, [sp, #52]	; 0x34
 80156f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80156fa:	782b      	ldrb	r3, [r5, #0]
 80156fc:	2b30      	cmp	r3, #48	; 0x30
 80156fe:	f040 80ac 	bne.w	801585a <_strtod_l+0x1a2>
 8015702:	786b      	ldrb	r3, [r5, #1]
 8015704:	2b58      	cmp	r3, #88	; 0x58
 8015706:	d001      	beq.n	801570c <_strtod_l+0x54>
 8015708:	2b78      	cmp	r3, #120	; 0x78
 801570a:	d167      	bne.n	80157dc <_strtod_l+0x124>
 801570c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801570e:	9301      	str	r3, [sp, #4]
 8015710:	ab1c      	add	r3, sp, #112	; 0x70
 8015712:	9300      	str	r3, [sp, #0]
 8015714:	9702      	str	r7, [sp, #8]
 8015716:	ab1d      	add	r3, sp, #116	; 0x74
 8015718:	4a88      	ldr	r2, [pc, #544]	; (801593c <_strtod_l+0x284>)
 801571a:	a91b      	add	r1, sp, #108	; 0x6c
 801571c:	4648      	mov	r0, r9
 801571e:	f001 fd12 	bl	8017146 <__gethex>
 8015722:	f010 0407 	ands.w	r4, r0, #7
 8015726:	4606      	mov	r6, r0
 8015728:	d005      	beq.n	8015736 <_strtod_l+0x7e>
 801572a:	2c06      	cmp	r4, #6
 801572c:	d12b      	bne.n	8015786 <_strtod_l+0xce>
 801572e:	3501      	adds	r5, #1
 8015730:	2300      	movs	r3, #0
 8015732:	951b      	str	r5, [sp, #108]	; 0x6c
 8015734:	930d      	str	r3, [sp, #52]	; 0x34
 8015736:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015738:	2b00      	cmp	r3, #0
 801573a:	f040 859a 	bne.w	8016272 <_strtod_l+0xbba>
 801573e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015740:	b1e3      	cbz	r3, 801577c <_strtod_l+0xc4>
 8015742:	4652      	mov	r2, sl
 8015744:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015748:	ec43 2b10 	vmov	d0, r2, r3
 801574c:	b021      	add	sp, #132	; 0x84
 801574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015752:	2a2b      	cmp	r2, #43	; 0x2b
 8015754:	d015      	beq.n	8015782 <_strtod_l+0xca>
 8015756:	2a2d      	cmp	r2, #45	; 0x2d
 8015758:	d004      	beq.n	8015764 <_strtod_l+0xac>
 801575a:	2a20      	cmp	r2, #32
 801575c:	d1ca      	bne.n	80156f4 <_strtod_l+0x3c>
 801575e:	3301      	adds	r3, #1
 8015760:	931b      	str	r3, [sp, #108]	; 0x6c
 8015762:	e7bf      	b.n	80156e4 <_strtod_l+0x2c>
 8015764:	2201      	movs	r2, #1
 8015766:	920d      	str	r2, [sp, #52]	; 0x34
 8015768:	1c5a      	adds	r2, r3, #1
 801576a:	921b      	str	r2, [sp, #108]	; 0x6c
 801576c:	785b      	ldrb	r3, [r3, #1]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d1c2      	bne.n	80156f8 <_strtod_l+0x40>
 8015772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015774:	961b      	str	r6, [sp, #108]	; 0x6c
 8015776:	2b00      	cmp	r3, #0
 8015778:	f040 8579 	bne.w	801626e <_strtod_l+0xbb6>
 801577c:	4652      	mov	r2, sl
 801577e:	465b      	mov	r3, fp
 8015780:	e7e2      	b.n	8015748 <_strtod_l+0x90>
 8015782:	2200      	movs	r2, #0
 8015784:	e7ef      	b.n	8015766 <_strtod_l+0xae>
 8015786:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015788:	b13a      	cbz	r2, 801579a <_strtod_l+0xe2>
 801578a:	2135      	movs	r1, #53	; 0x35
 801578c:	a81e      	add	r0, sp, #120	; 0x78
 801578e:	f002 fbb1 	bl	8017ef4 <__copybits>
 8015792:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015794:	4648      	mov	r0, r9
 8015796:	f002 f81d 	bl	80177d4 <_Bfree>
 801579a:	3c01      	subs	r4, #1
 801579c:	2c04      	cmp	r4, #4
 801579e:	d806      	bhi.n	80157ae <_strtod_l+0xf6>
 80157a0:	e8df f004 	tbb	[pc, r4]
 80157a4:	1714030a 	.word	0x1714030a
 80157a8:	0a          	.byte	0x0a
 80157a9:	00          	.byte	0x00
 80157aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80157ae:	0730      	lsls	r0, r6, #28
 80157b0:	d5c1      	bpl.n	8015736 <_strtod_l+0x7e>
 80157b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80157b6:	e7be      	b.n	8015736 <_strtod_l+0x7e>
 80157b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80157bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80157be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80157c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80157c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80157ca:	e7f0      	b.n	80157ae <_strtod_l+0xf6>
 80157cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015940 <_strtod_l+0x288>
 80157d0:	e7ed      	b.n	80157ae <_strtod_l+0xf6>
 80157d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80157d6:	f04f 3aff 	mov.w	sl, #4294967295
 80157da:	e7e8      	b.n	80157ae <_strtod_l+0xf6>
 80157dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157de:	1c5a      	adds	r2, r3, #1
 80157e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80157e2:	785b      	ldrb	r3, [r3, #1]
 80157e4:	2b30      	cmp	r3, #48	; 0x30
 80157e6:	d0f9      	beq.n	80157dc <_strtod_l+0x124>
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d0a4      	beq.n	8015736 <_strtod_l+0x7e>
 80157ec:	2301      	movs	r3, #1
 80157ee:	2500      	movs	r5, #0
 80157f0:	9306      	str	r3, [sp, #24]
 80157f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157f4:	9308      	str	r3, [sp, #32]
 80157f6:	9507      	str	r5, [sp, #28]
 80157f8:	9505      	str	r5, [sp, #20]
 80157fa:	220a      	movs	r2, #10
 80157fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80157fe:	7807      	ldrb	r7, [r0, #0]
 8015800:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015804:	b2d9      	uxtb	r1, r3
 8015806:	2909      	cmp	r1, #9
 8015808:	d929      	bls.n	801585e <_strtod_l+0x1a6>
 801580a:	4622      	mov	r2, r4
 801580c:	f8d8 1000 	ldr.w	r1, [r8]
 8015810:	f003 f8f8 	bl	8018a04 <strncmp>
 8015814:	2800      	cmp	r0, #0
 8015816:	d031      	beq.n	801587c <_strtod_l+0x1c4>
 8015818:	2000      	movs	r0, #0
 801581a:	9c05      	ldr	r4, [sp, #20]
 801581c:	9004      	str	r0, [sp, #16]
 801581e:	463b      	mov	r3, r7
 8015820:	4602      	mov	r2, r0
 8015822:	2b65      	cmp	r3, #101	; 0x65
 8015824:	d001      	beq.n	801582a <_strtod_l+0x172>
 8015826:	2b45      	cmp	r3, #69	; 0x45
 8015828:	d114      	bne.n	8015854 <_strtod_l+0x19c>
 801582a:	b924      	cbnz	r4, 8015836 <_strtod_l+0x17e>
 801582c:	b910      	cbnz	r0, 8015834 <_strtod_l+0x17c>
 801582e:	9b06      	ldr	r3, [sp, #24]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d09e      	beq.n	8015772 <_strtod_l+0xba>
 8015834:	2400      	movs	r4, #0
 8015836:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015838:	1c73      	adds	r3, r6, #1
 801583a:	931b      	str	r3, [sp, #108]	; 0x6c
 801583c:	7873      	ldrb	r3, [r6, #1]
 801583e:	2b2b      	cmp	r3, #43	; 0x2b
 8015840:	d078      	beq.n	8015934 <_strtod_l+0x27c>
 8015842:	2b2d      	cmp	r3, #45	; 0x2d
 8015844:	d070      	beq.n	8015928 <_strtod_l+0x270>
 8015846:	f04f 0c00 	mov.w	ip, #0
 801584a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801584e:	2f09      	cmp	r7, #9
 8015850:	d97c      	bls.n	801594c <_strtod_l+0x294>
 8015852:	961b      	str	r6, [sp, #108]	; 0x6c
 8015854:	f04f 0e00 	mov.w	lr, #0
 8015858:	e09a      	b.n	8015990 <_strtod_l+0x2d8>
 801585a:	2300      	movs	r3, #0
 801585c:	e7c7      	b.n	80157ee <_strtod_l+0x136>
 801585e:	9905      	ldr	r1, [sp, #20]
 8015860:	2908      	cmp	r1, #8
 8015862:	bfdd      	ittte	le
 8015864:	9907      	ldrle	r1, [sp, #28]
 8015866:	fb02 3301 	mlale	r3, r2, r1, r3
 801586a:	9307      	strle	r3, [sp, #28]
 801586c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015870:	9b05      	ldr	r3, [sp, #20]
 8015872:	3001      	adds	r0, #1
 8015874:	3301      	adds	r3, #1
 8015876:	9305      	str	r3, [sp, #20]
 8015878:	901b      	str	r0, [sp, #108]	; 0x6c
 801587a:	e7bf      	b.n	80157fc <_strtod_l+0x144>
 801587c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801587e:	191a      	adds	r2, r3, r4
 8015880:	921b      	str	r2, [sp, #108]	; 0x6c
 8015882:	9a05      	ldr	r2, [sp, #20]
 8015884:	5d1b      	ldrb	r3, [r3, r4]
 8015886:	2a00      	cmp	r2, #0
 8015888:	d037      	beq.n	80158fa <_strtod_l+0x242>
 801588a:	9c05      	ldr	r4, [sp, #20]
 801588c:	4602      	mov	r2, r0
 801588e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015892:	2909      	cmp	r1, #9
 8015894:	d913      	bls.n	80158be <_strtod_l+0x206>
 8015896:	2101      	movs	r1, #1
 8015898:	9104      	str	r1, [sp, #16]
 801589a:	e7c2      	b.n	8015822 <_strtod_l+0x16a>
 801589c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801589e:	1c5a      	adds	r2, r3, #1
 80158a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80158a2:	785b      	ldrb	r3, [r3, #1]
 80158a4:	3001      	adds	r0, #1
 80158a6:	2b30      	cmp	r3, #48	; 0x30
 80158a8:	d0f8      	beq.n	801589c <_strtod_l+0x1e4>
 80158aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80158ae:	2a08      	cmp	r2, #8
 80158b0:	f200 84e4 	bhi.w	801627c <_strtod_l+0xbc4>
 80158b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80158b6:	9208      	str	r2, [sp, #32]
 80158b8:	4602      	mov	r2, r0
 80158ba:	2000      	movs	r0, #0
 80158bc:	4604      	mov	r4, r0
 80158be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80158c2:	f100 0101 	add.w	r1, r0, #1
 80158c6:	d012      	beq.n	80158ee <_strtod_l+0x236>
 80158c8:	440a      	add	r2, r1
 80158ca:	eb00 0c04 	add.w	ip, r0, r4
 80158ce:	4621      	mov	r1, r4
 80158d0:	270a      	movs	r7, #10
 80158d2:	458c      	cmp	ip, r1
 80158d4:	d113      	bne.n	80158fe <_strtod_l+0x246>
 80158d6:	1821      	adds	r1, r4, r0
 80158d8:	2908      	cmp	r1, #8
 80158da:	f104 0401 	add.w	r4, r4, #1
 80158de:	4404      	add	r4, r0
 80158e0:	dc19      	bgt.n	8015916 <_strtod_l+0x25e>
 80158e2:	9b07      	ldr	r3, [sp, #28]
 80158e4:	210a      	movs	r1, #10
 80158e6:	fb01 e303 	mla	r3, r1, r3, lr
 80158ea:	9307      	str	r3, [sp, #28]
 80158ec:	2100      	movs	r1, #0
 80158ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158f0:	1c58      	adds	r0, r3, #1
 80158f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80158f4:	785b      	ldrb	r3, [r3, #1]
 80158f6:	4608      	mov	r0, r1
 80158f8:	e7c9      	b.n	801588e <_strtod_l+0x1d6>
 80158fa:	9805      	ldr	r0, [sp, #20]
 80158fc:	e7d3      	b.n	80158a6 <_strtod_l+0x1ee>
 80158fe:	2908      	cmp	r1, #8
 8015900:	f101 0101 	add.w	r1, r1, #1
 8015904:	dc03      	bgt.n	801590e <_strtod_l+0x256>
 8015906:	9b07      	ldr	r3, [sp, #28]
 8015908:	437b      	muls	r3, r7
 801590a:	9307      	str	r3, [sp, #28]
 801590c:	e7e1      	b.n	80158d2 <_strtod_l+0x21a>
 801590e:	2910      	cmp	r1, #16
 8015910:	bfd8      	it	le
 8015912:	437d      	mulle	r5, r7
 8015914:	e7dd      	b.n	80158d2 <_strtod_l+0x21a>
 8015916:	2c10      	cmp	r4, #16
 8015918:	bfdc      	itt	le
 801591a:	210a      	movle	r1, #10
 801591c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015920:	e7e4      	b.n	80158ec <_strtod_l+0x234>
 8015922:	2301      	movs	r3, #1
 8015924:	9304      	str	r3, [sp, #16]
 8015926:	e781      	b.n	801582c <_strtod_l+0x174>
 8015928:	f04f 0c01 	mov.w	ip, #1
 801592c:	1cb3      	adds	r3, r6, #2
 801592e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015930:	78b3      	ldrb	r3, [r6, #2]
 8015932:	e78a      	b.n	801584a <_strtod_l+0x192>
 8015934:	f04f 0c00 	mov.w	ip, #0
 8015938:	e7f8      	b.n	801592c <_strtod_l+0x274>
 801593a:	bf00      	nop
 801593c:	080194f8 	.word	0x080194f8
 8015940:	7ff00000 	.word	0x7ff00000
 8015944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015946:	1c5f      	adds	r7, r3, #1
 8015948:	971b      	str	r7, [sp, #108]	; 0x6c
 801594a:	785b      	ldrb	r3, [r3, #1]
 801594c:	2b30      	cmp	r3, #48	; 0x30
 801594e:	d0f9      	beq.n	8015944 <_strtod_l+0x28c>
 8015950:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015954:	2f08      	cmp	r7, #8
 8015956:	f63f af7d 	bhi.w	8015854 <_strtod_l+0x19c>
 801595a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801595e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015960:	930a      	str	r3, [sp, #40]	; 0x28
 8015962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015964:	1c5f      	adds	r7, r3, #1
 8015966:	971b      	str	r7, [sp, #108]	; 0x6c
 8015968:	785b      	ldrb	r3, [r3, #1]
 801596a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801596e:	f1b8 0f09 	cmp.w	r8, #9
 8015972:	d937      	bls.n	80159e4 <_strtod_l+0x32c>
 8015974:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015976:	1a7f      	subs	r7, r7, r1
 8015978:	2f08      	cmp	r7, #8
 801597a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801597e:	dc37      	bgt.n	80159f0 <_strtod_l+0x338>
 8015980:	45be      	cmp	lr, r7
 8015982:	bfa8      	it	ge
 8015984:	46be      	movge	lr, r7
 8015986:	f1bc 0f00 	cmp.w	ip, #0
 801598a:	d001      	beq.n	8015990 <_strtod_l+0x2d8>
 801598c:	f1ce 0e00 	rsb	lr, lr, #0
 8015990:	2c00      	cmp	r4, #0
 8015992:	d151      	bne.n	8015a38 <_strtod_l+0x380>
 8015994:	2800      	cmp	r0, #0
 8015996:	f47f aece 	bne.w	8015736 <_strtod_l+0x7e>
 801599a:	9a06      	ldr	r2, [sp, #24]
 801599c:	2a00      	cmp	r2, #0
 801599e:	f47f aeca 	bne.w	8015736 <_strtod_l+0x7e>
 80159a2:	9a04      	ldr	r2, [sp, #16]
 80159a4:	2a00      	cmp	r2, #0
 80159a6:	f47f aee4 	bne.w	8015772 <_strtod_l+0xba>
 80159aa:	2b4e      	cmp	r3, #78	; 0x4e
 80159ac:	d027      	beq.n	80159fe <_strtod_l+0x346>
 80159ae:	dc21      	bgt.n	80159f4 <_strtod_l+0x33c>
 80159b0:	2b49      	cmp	r3, #73	; 0x49
 80159b2:	f47f aede 	bne.w	8015772 <_strtod_l+0xba>
 80159b6:	49a0      	ldr	r1, [pc, #640]	; (8015c38 <_strtod_l+0x580>)
 80159b8:	a81b      	add	r0, sp, #108	; 0x6c
 80159ba:	f001 fdf7 	bl	80175ac <__match>
 80159be:	2800      	cmp	r0, #0
 80159c0:	f43f aed7 	beq.w	8015772 <_strtod_l+0xba>
 80159c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159c6:	499d      	ldr	r1, [pc, #628]	; (8015c3c <_strtod_l+0x584>)
 80159c8:	3b01      	subs	r3, #1
 80159ca:	a81b      	add	r0, sp, #108	; 0x6c
 80159cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80159ce:	f001 fded 	bl	80175ac <__match>
 80159d2:	b910      	cbnz	r0, 80159da <_strtod_l+0x322>
 80159d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159d6:	3301      	adds	r3, #1
 80159d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80159da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015c50 <_strtod_l+0x598>
 80159de:	f04f 0a00 	mov.w	sl, #0
 80159e2:	e6a8      	b.n	8015736 <_strtod_l+0x7e>
 80159e4:	210a      	movs	r1, #10
 80159e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80159ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80159ee:	e7b8      	b.n	8015962 <_strtod_l+0x2aa>
 80159f0:	46be      	mov	lr, r7
 80159f2:	e7c8      	b.n	8015986 <_strtod_l+0x2ce>
 80159f4:	2b69      	cmp	r3, #105	; 0x69
 80159f6:	d0de      	beq.n	80159b6 <_strtod_l+0x2fe>
 80159f8:	2b6e      	cmp	r3, #110	; 0x6e
 80159fa:	f47f aeba 	bne.w	8015772 <_strtod_l+0xba>
 80159fe:	4990      	ldr	r1, [pc, #576]	; (8015c40 <_strtod_l+0x588>)
 8015a00:	a81b      	add	r0, sp, #108	; 0x6c
 8015a02:	f001 fdd3 	bl	80175ac <__match>
 8015a06:	2800      	cmp	r0, #0
 8015a08:	f43f aeb3 	beq.w	8015772 <_strtod_l+0xba>
 8015a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	2b28      	cmp	r3, #40	; 0x28
 8015a12:	d10e      	bne.n	8015a32 <_strtod_l+0x37a>
 8015a14:	aa1e      	add	r2, sp, #120	; 0x78
 8015a16:	498b      	ldr	r1, [pc, #556]	; (8015c44 <_strtod_l+0x58c>)
 8015a18:	a81b      	add	r0, sp, #108	; 0x6c
 8015a1a:	f001 fddb 	bl	80175d4 <__hexnan>
 8015a1e:	2805      	cmp	r0, #5
 8015a20:	d107      	bne.n	8015a32 <_strtod_l+0x37a>
 8015a22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015a24:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015a28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015a2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015a30:	e681      	b.n	8015736 <_strtod_l+0x7e>
 8015a32:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015c58 <_strtod_l+0x5a0>
 8015a36:	e7d2      	b.n	80159de <_strtod_l+0x326>
 8015a38:	ebae 0302 	sub.w	r3, lr, r2
 8015a3c:	9306      	str	r3, [sp, #24]
 8015a3e:	9b05      	ldr	r3, [sp, #20]
 8015a40:	9807      	ldr	r0, [sp, #28]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	bf08      	it	eq
 8015a46:	4623      	moveq	r3, r4
 8015a48:	2c10      	cmp	r4, #16
 8015a4a:	9305      	str	r3, [sp, #20]
 8015a4c:	46a0      	mov	r8, r4
 8015a4e:	bfa8      	it	ge
 8015a50:	f04f 0810 	movge.w	r8, #16
 8015a54:	f7ea fd6e 	bl	8000534 <__aeabi_ui2d>
 8015a58:	2c09      	cmp	r4, #9
 8015a5a:	4682      	mov	sl, r0
 8015a5c:	468b      	mov	fp, r1
 8015a5e:	dc13      	bgt.n	8015a88 <_strtod_l+0x3d0>
 8015a60:	9b06      	ldr	r3, [sp, #24]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	f43f ae67 	beq.w	8015736 <_strtod_l+0x7e>
 8015a68:	9b06      	ldr	r3, [sp, #24]
 8015a6a:	dd7a      	ble.n	8015b62 <_strtod_l+0x4aa>
 8015a6c:	2b16      	cmp	r3, #22
 8015a6e:	dc61      	bgt.n	8015b34 <_strtod_l+0x47c>
 8015a70:	4a75      	ldr	r2, [pc, #468]	; (8015c48 <_strtod_l+0x590>)
 8015a72:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015a76:	e9de 0100 	ldrd	r0, r1, [lr]
 8015a7a:	4652      	mov	r2, sl
 8015a7c:	465b      	mov	r3, fp
 8015a7e:	f7ea fdd3 	bl	8000628 <__aeabi_dmul>
 8015a82:	4682      	mov	sl, r0
 8015a84:	468b      	mov	fp, r1
 8015a86:	e656      	b.n	8015736 <_strtod_l+0x7e>
 8015a88:	4b6f      	ldr	r3, [pc, #444]	; (8015c48 <_strtod_l+0x590>)
 8015a8a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015a8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015a92:	f7ea fdc9 	bl	8000628 <__aeabi_dmul>
 8015a96:	4606      	mov	r6, r0
 8015a98:	4628      	mov	r0, r5
 8015a9a:	460f      	mov	r7, r1
 8015a9c:	f7ea fd4a 	bl	8000534 <__aeabi_ui2d>
 8015aa0:	4602      	mov	r2, r0
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	4630      	mov	r0, r6
 8015aa6:	4639      	mov	r1, r7
 8015aa8:	f7ea fc08 	bl	80002bc <__adddf3>
 8015aac:	2c0f      	cmp	r4, #15
 8015aae:	4682      	mov	sl, r0
 8015ab0:	468b      	mov	fp, r1
 8015ab2:	ddd5      	ble.n	8015a60 <_strtod_l+0x3a8>
 8015ab4:	9b06      	ldr	r3, [sp, #24]
 8015ab6:	eba4 0808 	sub.w	r8, r4, r8
 8015aba:	4498      	add	r8, r3
 8015abc:	f1b8 0f00 	cmp.w	r8, #0
 8015ac0:	f340 8096 	ble.w	8015bf0 <_strtod_l+0x538>
 8015ac4:	f018 030f 	ands.w	r3, r8, #15
 8015ac8:	d00a      	beq.n	8015ae0 <_strtod_l+0x428>
 8015aca:	495f      	ldr	r1, [pc, #380]	; (8015c48 <_strtod_l+0x590>)
 8015acc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015ad0:	4652      	mov	r2, sl
 8015ad2:	465b      	mov	r3, fp
 8015ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ad8:	f7ea fda6 	bl	8000628 <__aeabi_dmul>
 8015adc:	4682      	mov	sl, r0
 8015ade:	468b      	mov	fp, r1
 8015ae0:	f038 080f 	bics.w	r8, r8, #15
 8015ae4:	d073      	beq.n	8015bce <_strtod_l+0x516>
 8015ae6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015aea:	dd47      	ble.n	8015b7c <_strtod_l+0x4c4>
 8015aec:	2400      	movs	r4, #0
 8015aee:	46a0      	mov	r8, r4
 8015af0:	9407      	str	r4, [sp, #28]
 8015af2:	9405      	str	r4, [sp, #20]
 8015af4:	2322      	movs	r3, #34	; 0x22
 8015af6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015c50 <_strtod_l+0x598>
 8015afa:	f8c9 3000 	str.w	r3, [r9]
 8015afe:	f04f 0a00 	mov.w	sl, #0
 8015b02:	9b07      	ldr	r3, [sp, #28]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	f43f ae16 	beq.w	8015736 <_strtod_l+0x7e>
 8015b0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015b0c:	4648      	mov	r0, r9
 8015b0e:	f001 fe61 	bl	80177d4 <_Bfree>
 8015b12:	9905      	ldr	r1, [sp, #20]
 8015b14:	4648      	mov	r0, r9
 8015b16:	f001 fe5d 	bl	80177d4 <_Bfree>
 8015b1a:	4641      	mov	r1, r8
 8015b1c:	4648      	mov	r0, r9
 8015b1e:	f001 fe59 	bl	80177d4 <_Bfree>
 8015b22:	9907      	ldr	r1, [sp, #28]
 8015b24:	4648      	mov	r0, r9
 8015b26:	f001 fe55 	bl	80177d4 <_Bfree>
 8015b2a:	4621      	mov	r1, r4
 8015b2c:	4648      	mov	r0, r9
 8015b2e:	f001 fe51 	bl	80177d4 <_Bfree>
 8015b32:	e600      	b.n	8015736 <_strtod_l+0x7e>
 8015b34:	9a06      	ldr	r2, [sp, #24]
 8015b36:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015b3a:	4293      	cmp	r3, r2
 8015b3c:	dbba      	blt.n	8015ab4 <_strtod_l+0x3fc>
 8015b3e:	4d42      	ldr	r5, [pc, #264]	; (8015c48 <_strtod_l+0x590>)
 8015b40:	f1c4 040f 	rsb	r4, r4, #15
 8015b44:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015b48:	4652      	mov	r2, sl
 8015b4a:	465b      	mov	r3, fp
 8015b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b50:	f7ea fd6a 	bl	8000628 <__aeabi_dmul>
 8015b54:	9b06      	ldr	r3, [sp, #24]
 8015b56:	1b1c      	subs	r4, r3, r4
 8015b58:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015b5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015b60:	e78d      	b.n	8015a7e <_strtod_l+0x3c6>
 8015b62:	f113 0f16 	cmn.w	r3, #22
 8015b66:	dba5      	blt.n	8015ab4 <_strtod_l+0x3fc>
 8015b68:	4a37      	ldr	r2, [pc, #220]	; (8015c48 <_strtod_l+0x590>)
 8015b6a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015b6e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015b72:	4650      	mov	r0, sl
 8015b74:	4659      	mov	r1, fp
 8015b76:	f7ea fe81 	bl	800087c <__aeabi_ddiv>
 8015b7a:	e782      	b.n	8015a82 <_strtod_l+0x3ca>
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	4e33      	ldr	r6, [pc, #204]	; (8015c4c <_strtod_l+0x594>)
 8015b80:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015b84:	4650      	mov	r0, sl
 8015b86:	4659      	mov	r1, fp
 8015b88:	461d      	mov	r5, r3
 8015b8a:	f1b8 0f01 	cmp.w	r8, #1
 8015b8e:	dc21      	bgt.n	8015bd4 <_strtod_l+0x51c>
 8015b90:	b10b      	cbz	r3, 8015b96 <_strtod_l+0x4de>
 8015b92:	4682      	mov	sl, r0
 8015b94:	468b      	mov	fp, r1
 8015b96:	4b2d      	ldr	r3, [pc, #180]	; (8015c4c <_strtod_l+0x594>)
 8015b98:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015b9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015ba0:	4652      	mov	r2, sl
 8015ba2:	465b      	mov	r3, fp
 8015ba4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015ba8:	f7ea fd3e 	bl	8000628 <__aeabi_dmul>
 8015bac:	4b28      	ldr	r3, [pc, #160]	; (8015c50 <_strtod_l+0x598>)
 8015bae:	460a      	mov	r2, r1
 8015bb0:	400b      	ands	r3, r1
 8015bb2:	4928      	ldr	r1, [pc, #160]	; (8015c54 <_strtod_l+0x59c>)
 8015bb4:	428b      	cmp	r3, r1
 8015bb6:	4682      	mov	sl, r0
 8015bb8:	d898      	bhi.n	8015aec <_strtod_l+0x434>
 8015bba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015bbe:	428b      	cmp	r3, r1
 8015bc0:	bf86      	itte	hi
 8015bc2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015c5c <_strtod_l+0x5a4>
 8015bc6:	f04f 3aff 	movhi.w	sl, #4294967295
 8015bca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015bce:	2300      	movs	r3, #0
 8015bd0:	9304      	str	r3, [sp, #16]
 8015bd2:	e077      	b.n	8015cc4 <_strtod_l+0x60c>
 8015bd4:	f018 0f01 	tst.w	r8, #1
 8015bd8:	d006      	beq.n	8015be8 <_strtod_l+0x530>
 8015bda:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be2:	f7ea fd21 	bl	8000628 <__aeabi_dmul>
 8015be6:	2301      	movs	r3, #1
 8015be8:	3501      	adds	r5, #1
 8015bea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015bee:	e7cc      	b.n	8015b8a <_strtod_l+0x4d2>
 8015bf0:	d0ed      	beq.n	8015bce <_strtod_l+0x516>
 8015bf2:	f1c8 0800 	rsb	r8, r8, #0
 8015bf6:	f018 020f 	ands.w	r2, r8, #15
 8015bfa:	d00a      	beq.n	8015c12 <_strtod_l+0x55a>
 8015bfc:	4b12      	ldr	r3, [pc, #72]	; (8015c48 <_strtod_l+0x590>)
 8015bfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c02:	4650      	mov	r0, sl
 8015c04:	4659      	mov	r1, fp
 8015c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c0a:	f7ea fe37 	bl	800087c <__aeabi_ddiv>
 8015c0e:	4682      	mov	sl, r0
 8015c10:	468b      	mov	fp, r1
 8015c12:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015c16:	d0da      	beq.n	8015bce <_strtod_l+0x516>
 8015c18:	f1b8 0f1f 	cmp.w	r8, #31
 8015c1c:	dd20      	ble.n	8015c60 <_strtod_l+0x5a8>
 8015c1e:	2400      	movs	r4, #0
 8015c20:	46a0      	mov	r8, r4
 8015c22:	9407      	str	r4, [sp, #28]
 8015c24:	9405      	str	r4, [sp, #20]
 8015c26:	2322      	movs	r3, #34	; 0x22
 8015c28:	f04f 0a00 	mov.w	sl, #0
 8015c2c:	f04f 0b00 	mov.w	fp, #0
 8015c30:	f8c9 3000 	str.w	r3, [r9]
 8015c34:	e765      	b.n	8015b02 <_strtod_l+0x44a>
 8015c36:	bf00      	nop
 8015c38:	080194c5 	.word	0x080194c5
 8015c3c:	0801954b 	.word	0x0801954b
 8015c40:	080194cd 	.word	0x080194cd
 8015c44:	0801950c 	.word	0x0801950c
 8015c48:	080195f0 	.word	0x080195f0
 8015c4c:	080195c8 	.word	0x080195c8
 8015c50:	7ff00000 	.word	0x7ff00000
 8015c54:	7ca00000 	.word	0x7ca00000
 8015c58:	fff80000 	.word	0xfff80000
 8015c5c:	7fefffff 	.word	0x7fefffff
 8015c60:	f018 0310 	ands.w	r3, r8, #16
 8015c64:	bf18      	it	ne
 8015c66:	236a      	movne	r3, #106	; 0x6a
 8015c68:	4da0      	ldr	r5, [pc, #640]	; (8015eec <_strtod_l+0x834>)
 8015c6a:	9304      	str	r3, [sp, #16]
 8015c6c:	4650      	mov	r0, sl
 8015c6e:	4659      	mov	r1, fp
 8015c70:	2300      	movs	r3, #0
 8015c72:	f1b8 0f00 	cmp.w	r8, #0
 8015c76:	f300 810a 	bgt.w	8015e8e <_strtod_l+0x7d6>
 8015c7a:	b10b      	cbz	r3, 8015c80 <_strtod_l+0x5c8>
 8015c7c:	4682      	mov	sl, r0
 8015c7e:	468b      	mov	fp, r1
 8015c80:	9b04      	ldr	r3, [sp, #16]
 8015c82:	b1bb      	cbz	r3, 8015cb4 <_strtod_l+0x5fc>
 8015c84:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015c88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	4659      	mov	r1, fp
 8015c90:	dd10      	ble.n	8015cb4 <_strtod_l+0x5fc>
 8015c92:	2b1f      	cmp	r3, #31
 8015c94:	f340 8107 	ble.w	8015ea6 <_strtod_l+0x7ee>
 8015c98:	2b34      	cmp	r3, #52	; 0x34
 8015c9a:	bfde      	ittt	le
 8015c9c:	3b20      	suble	r3, #32
 8015c9e:	f04f 32ff 	movle.w	r2, #4294967295
 8015ca2:	fa02 f303 	lslle.w	r3, r2, r3
 8015ca6:	f04f 0a00 	mov.w	sl, #0
 8015caa:	bfcc      	ite	gt
 8015cac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015cb0:	ea03 0b01 	andle.w	fp, r3, r1
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	4650      	mov	r0, sl
 8015cba:	4659      	mov	r1, fp
 8015cbc:	f7ea ff1c 	bl	8000af8 <__aeabi_dcmpeq>
 8015cc0:	2800      	cmp	r0, #0
 8015cc2:	d1ac      	bne.n	8015c1e <_strtod_l+0x566>
 8015cc4:	9b07      	ldr	r3, [sp, #28]
 8015cc6:	9300      	str	r3, [sp, #0]
 8015cc8:	9a05      	ldr	r2, [sp, #20]
 8015cca:	9908      	ldr	r1, [sp, #32]
 8015ccc:	4623      	mov	r3, r4
 8015cce:	4648      	mov	r0, r9
 8015cd0:	f001 fdd2 	bl	8017878 <__s2b>
 8015cd4:	9007      	str	r0, [sp, #28]
 8015cd6:	2800      	cmp	r0, #0
 8015cd8:	f43f af08 	beq.w	8015aec <_strtod_l+0x434>
 8015cdc:	9a06      	ldr	r2, [sp, #24]
 8015cde:	9b06      	ldr	r3, [sp, #24]
 8015ce0:	2a00      	cmp	r2, #0
 8015ce2:	f1c3 0300 	rsb	r3, r3, #0
 8015ce6:	bfa8      	it	ge
 8015ce8:	2300      	movge	r3, #0
 8015cea:	930e      	str	r3, [sp, #56]	; 0x38
 8015cec:	2400      	movs	r4, #0
 8015cee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015cf2:	9316      	str	r3, [sp, #88]	; 0x58
 8015cf4:	46a0      	mov	r8, r4
 8015cf6:	9b07      	ldr	r3, [sp, #28]
 8015cf8:	4648      	mov	r0, r9
 8015cfa:	6859      	ldr	r1, [r3, #4]
 8015cfc:	f001 fd36 	bl	801776c <_Balloc>
 8015d00:	9005      	str	r0, [sp, #20]
 8015d02:	2800      	cmp	r0, #0
 8015d04:	f43f aef6 	beq.w	8015af4 <_strtod_l+0x43c>
 8015d08:	9b07      	ldr	r3, [sp, #28]
 8015d0a:	691a      	ldr	r2, [r3, #16]
 8015d0c:	3202      	adds	r2, #2
 8015d0e:	f103 010c 	add.w	r1, r3, #12
 8015d12:	0092      	lsls	r2, r2, #2
 8015d14:	300c      	adds	r0, #12
 8015d16:	f7fe fdd3 	bl	80148c0 <memcpy>
 8015d1a:	aa1e      	add	r2, sp, #120	; 0x78
 8015d1c:	a91d      	add	r1, sp, #116	; 0x74
 8015d1e:	ec4b ab10 	vmov	d0, sl, fp
 8015d22:	4648      	mov	r0, r9
 8015d24:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015d28:	f002 f862 	bl	8017df0 <__d2b>
 8015d2c:	901c      	str	r0, [sp, #112]	; 0x70
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	f43f aee0 	beq.w	8015af4 <_strtod_l+0x43c>
 8015d34:	2101      	movs	r1, #1
 8015d36:	4648      	mov	r0, r9
 8015d38:	f001 fe2a 	bl	8017990 <__i2b>
 8015d3c:	4680      	mov	r8, r0
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	f43f aed8 	beq.w	8015af4 <_strtod_l+0x43c>
 8015d44:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015d46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015d48:	2e00      	cmp	r6, #0
 8015d4a:	bfab      	itete	ge
 8015d4c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015d4e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015d50:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015d52:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015d54:	bfac      	ite	ge
 8015d56:	18f7      	addge	r7, r6, r3
 8015d58:	1b9d      	sublt	r5, r3, r6
 8015d5a:	9b04      	ldr	r3, [sp, #16]
 8015d5c:	1af6      	subs	r6, r6, r3
 8015d5e:	4416      	add	r6, r2
 8015d60:	4b63      	ldr	r3, [pc, #396]	; (8015ef0 <_strtod_l+0x838>)
 8015d62:	3e01      	subs	r6, #1
 8015d64:	429e      	cmp	r6, r3
 8015d66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015d6a:	f280 80af 	bge.w	8015ecc <_strtod_l+0x814>
 8015d6e:	1b9b      	subs	r3, r3, r6
 8015d70:	2b1f      	cmp	r3, #31
 8015d72:	eba2 0203 	sub.w	r2, r2, r3
 8015d76:	f04f 0101 	mov.w	r1, #1
 8015d7a:	f300 809b 	bgt.w	8015eb4 <_strtod_l+0x7fc>
 8015d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8015d82:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d84:	2300      	movs	r3, #0
 8015d86:	930a      	str	r3, [sp, #40]	; 0x28
 8015d88:	18be      	adds	r6, r7, r2
 8015d8a:	9b04      	ldr	r3, [sp, #16]
 8015d8c:	42b7      	cmp	r7, r6
 8015d8e:	4415      	add	r5, r2
 8015d90:	441d      	add	r5, r3
 8015d92:	463b      	mov	r3, r7
 8015d94:	bfa8      	it	ge
 8015d96:	4633      	movge	r3, r6
 8015d98:	42ab      	cmp	r3, r5
 8015d9a:	bfa8      	it	ge
 8015d9c:	462b      	movge	r3, r5
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	bfc2      	ittt	gt
 8015da2:	1af6      	subgt	r6, r6, r3
 8015da4:	1aed      	subgt	r5, r5, r3
 8015da6:	1aff      	subgt	r7, r7, r3
 8015da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015daa:	b1bb      	cbz	r3, 8015ddc <_strtod_l+0x724>
 8015dac:	4641      	mov	r1, r8
 8015dae:	461a      	mov	r2, r3
 8015db0:	4648      	mov	r0, r9
 8015db2:	f001 fe8d 	bl	8017ad0 <__pow5mult>
 8015db6:	4680      	mov	r8, r0
 8015db8:	2800      	cmp	r0, #0
 8015dba:	f43f ae9b 	beq.w	8015af4 <_strtod_l+0x43c>
 8015dbe:	4601      	mov	r1, r0
 8015dc0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015dc2:	4648      	mov	r0, r9
 8015dc4:	f001 fded 	bl	80179a2 <__multiply>
 8015dc8:	900c      	str	r0, [sp, #48]	; 0x30
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	f43f ae92 	beq.w	8015af4 <_strtod_l+0x43c>
 8015dd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015dd2:	4648      	mov	r0, r9
 8015dd4:	f001 fcfe 	bl	80177d4 <_Bfree>
 8015dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dda:	931c      	str	r3, [sp, #112]	; 0x70
 8015ddc:	2e00      	cmp	r6, #0
 8015dde:	dc7a      	bgt.n	8015ed6 <_strtod_l+0x81e>
 8015de0:	9b06      	ldr	r3, [sp, #24]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	dd08      	ble.n	8015df8 <_strtod_l+0x740>
 8015de6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015de8:	9905      	ldr	r1, [sp, #20]
 8015dea:	4648      	mov	r0, r9
 8015dec:	f001 fe70 	bl	8017ad0 <__pow5mult>
 8015df0:	9005      	str	r0, [sp, #20]
 8015df2:	2800      	cmp	r0, #0
 8015df4:	f43f ae7e 	beq.w	8015af4 <_strtod_l+0x43c>
 8015df8:	2d00      	cmp	r5, #0
 8015dfa:	dd08      	ble.n	8015e0e <_strtod_l+0x756>
 8015dfc:	462a      	mov	r2, r5
 8015dfe:	9905      	ldr	r1, [sp, #20]
 8015e00:	4648      	mov	r0, r9
 8015e02:	f001 feb3 	bl	8017b6c <__lshift>
 8015e06:	9005      	str	r0, [sp, #20]
 8015e08:	2800      	cmp	r0, #0
 8015e0a:	f43f ae73 	beq.w	8015af4 <_strtod_l+0x43c>
 8015e0e:	2f00      	cmp	r7, #0
 8015e10:	dd08      	ble.n	8015e24 <_strtod_l+0x76c>
 8015e12:	4641      	mov	r1, r8
 8015e14:	463a      	mov	r2, r7
 8015e16:	4648      	mov	r0, r9
 8015e18:	f001 fea8 	bl	8017b6c <__lshift>
 8015e1c:	4680      	mov	r8, r0
 8015e1e:	2800      	cmp	r0, #0
 8015e20:	f43f ae68 	beq.w	8015af4 <_strtod_l+0x43c>
 8015e24:	9a05      	ldr	r2, [sp, #20]
 8015e26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e28:	4648      	mov	r0, r9
 8015e2a:	f001 ff0d 	bl	8017c48 <__mdiff>
 8015e2e:	4604      	mov	r4, r0
 8015e30:	2800      	cmp	r0, #0
 8015e32:	f43f ae5f 	beq.w	8015af4 <_strtod_l+0x43c>
 8015e36:	68c3      	ldr	r3, [r0, #12]
 8015e38:	930c      	str	r3, [sp, #48]	; 0x30
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	60c3      	str	r3, [r0, #12]
 8015e3e:	4641      	mov	r1, r8
 8015e40:	f001 fee8 	bl	8017c14 <__mcmp>
 8015e44:	2800      	cmp	r0, #0
 8015e46:	da55      	bge.n	8015ef4 <_strtod_l+0x83c>
 8015e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e4a:	b9e3      	cbnz	r3, 8015e86 <_strtod_l+0x7ce>
 8015e4c:	f1ba 0f00 	cmp.w	sl, #0
 8015e50:	d119      	bne.n	8015e86 <_strtod_l+0x7ce>
 8015e52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015e56:	b9b3      	cbnz	r3, 8015e86 <_strtod_l+0x7ce>
 8015e58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015e5c:	0d1b      	lsrs	r3, r3, #20
 8015e5e:	051b      	lsls	r3, r3, #20
 8015e60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015e64:	d90f      	bls.n	8015e86 <_strtod_l+0x7ce>
 8015e66:	6963      	ldr	r3, [r4, #20]
 8015e68:	b913      	cbnz	r3, 8015e70 <_strtod_l+0x7b8>
 8015e6a:	6923      	ldr	r3, [r4, #16]
 8015e6c:	2b01      	cmp	r3, #1
 8015e6e:	dd0a      	ble.n	8015e86 <_strtod_l+0x7ce>
 8015e70:	4621      	mov	r1, r4
 8015e72:	2201      	movs	r2, #1
 8015e74:	4648      	mov	r0, r9
 8015e76:	f001 fe79 	bl	8017b6c <__lshift>
 8015e7a:	4641      	mov	r1, r8
 8015e7c:	4604      	mov	r4, r0
 8015e7e:	f001 fec9 	bl	8017c14 <__mcmp>
 8015e82:	2800      	cmp	r0, #0
 8015e84:	dc67      	bgt.n	8015f56 <_strtod_l+0x89e>
 8015e86:	9b04      	ldr	r3, [sp, #16]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d171      	bne.n	8015f70 <_strtod_l+0x8b8>
 8015e8c:	e63d      	b.n	8015b0a <_strtod_l+0x452>
 8015e8e:	f018 0f01 	tst.w	r8, #1
 8015e92:	d004      	beq.n	8015e9e <_strtod_l+0x7e6>
 8015e94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015e98:	f7ea fbc6 	bl	8000628 <__aeabi_dmul>
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015ea2:	3508      	adds	r5, #8
 8015ea4:	e6e5      	b.n	8015c72 <_strtod_l+0x5ba>
 8015ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8015eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8015eae:	ea03 0a0a 	and.w	sl, r3, sl
 8015eb2:	e6ff      	b.n	8015cb4 <_strtod_l+0x5fc>
 8015eb4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015eb8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015ebc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015ec0:	36e2      	adds	r6, #226	; 0xe2
 8015ec2:	fa01 f306 	lsl.w	r3, r1, r6
 8015ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8015ec8:	910f      	str	r1, [sp, #60]	; 0x3c
 8015eca:	e75d      	b.n	8015d88 <_strtod_l+0x6d0>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	930a      	str	r3, [sp, #40]	; 0x28
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ed4:	e758      	b.n	8015d88 <_strtod_l+0x6d0>
 8015ed6:	4632      	mov	r2, r6
 8015ed8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015eda:	4648      	mov	r0, r9
 8015edc:	f001 fe46 	bl	8017b6c <__lshift>
 8015ee0:	901c      	str	r0, [sp, #112]	; 0x70
 8015ee2:	2800      	cmp	r0, #0
 8015ee4:	f47f af7c 	bne.w	8015de0 <_strtod_l+0x728>
 8015ee8:	e604      	b.n	8015af4 <_strtod_l+0x43c>
 8015eea:	bf00      	nop
 8015eec:	08019520 	.word	0x08019520
 8015ef0:	fffffc02 	.word	0xfffffc02
 8015ef4:	465d      	mov	r5, fp
 8015ef6:	f040 8086 	bne.w	8016006 <_strtod_l+0x94e>
 8015efa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015efc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f00:	b32a      	cbz	r2, 8015f4e <_strtod_l+0x896>
 8015f02:	4aaf      	ldr	r2, [pc, #700]	; (80161c0 <_strtod_l+0xb08>)
 8015f04:	4293      	cmp	r3, r2
 8015f06:	d153      	bne.n	8015fb0 <_strtod_l+0x8f8>
 8015f08:	9b04      	ldr	r3, [sp, #16]
 8015f0a:	4650      	mov	r0, sl
 8015f0c:	b1d3      	cbz	r3, 8015f44 <_strtod_l+0x88c>
 8015f0e:	4aad      	ldr	r2, [pc, #692]	; (80161c4 <_strtod_l+0xb0c>)
 8015f10:	402a      	ands	r2, r5
 8015f12:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015f16:	f04f 31ff 	mov.w	r1, #4294967295
 8015f1a:	d816      	bhi.n	8015f4a <_strtod_l+0x892>
 8015f1c:	0d12      	lsrs	r2, r2, #20
 8015f1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015f22:	fa01 f303 	lsl.w	r3, r1, r3
 8015f26:	4298      	cmp	r0, r3
 8015f28:	d142      	bne.n	8015fb0 <_strtod_l+0x8f8>
 8015f2a:	4ba7      	ldr	r3, [pc, #668]	; (80161c8 <_strtod_l+0xb10>)
 8015f2c:	429d      	cmp	r5, r3
 8015f2e:	d102      	bne.n	8015f36 <_strtod_l+0x87e>
 8015f30:	3001      	adds	r0, #1
 8015f32:	f43f addf 	beq.w	8015af4 <_strtod_l+0x43c>
 8015f36:	4ba3      	ldr	r3, [pc, #652]	; (80161c4 <_strtod_l+0xb0c>)
 8015f38:	402b      	ands	r3, r5
 8015f3a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015f3e:	f04f 0a00 	mov.w	sl, #0
 8015f42:	e7a0      	b.n	8015e86 <_strtod_l+0x7ce>
 8015f44:	f04f 33ff 	mov.w	r3, #4294967295
 8015f48:	e7ed      	b.n	8015f26 <_strtod_l+0x86e>
 8015f4a:	460b      	mov	r3, r1
 8015f4c:	e7eb      	b.n	8015f26 <_strtod_l+0x86e>
 8015f4e:	bb7b      	cbnz	r3, 8015fb0 <_strtod_l+0x8f8>
 8015f50:	f1ba 0f00 	cmp.w	sl, #0
 8015f54:	d12c      	bne.n	8015fb0 <_strtod_l+0x8f8>
 8015f56:	9904      	ldr	r1, [sp, #16]
 8015f58:	4a9a      	ldr	r2, [pc, #616]	; (80161c4 <_strtod_l+0xb0c>)
 8015f5a:	465b      	mov	r3, fp
 8015f5c:	b1f1      	cbz	r1, 8015f9c <_strtod_l+0x8e4>
 8015f5e:	ea02 010b 	and.w	r1, r2, fp
 8015f62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015f66:	dc19      	bgt.n	8015f9c <_strtod_l+0x8e4>
 8015f68:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015f6c:	f77f ae5b 	ble.w	8015c26 <_strtod_l+0x56e>
 8015f70:	4a96      	ldr	r2, [pc, #600]	; (80161cc <_strtod_l+0xb14>)
 8015f72:	2300      	movs	r3, #0
 8015f74:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015f78:	4650      	mov	r0, sl
 8015f7a:	4659      	mov	r1, fp
 8015f7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015f80:	f7ea fb52 	bl	8000628 <__aeabi_dmul>
 8015f84:	4682      	mov	sl, r0
 8015f86:	468b      	mov	fp, r1
 8015f88:	2900      	cmp	r1, #0
 8015f8a:	f47f adbe 	bne.w	8015b0a <_strtod_l+0x452>
 8015f8e:	2800      	cmp	r0, #0
 8015f90:	f47f adbb 	bne.w	8015b0a <_strtod_l+0x452>
 8015f94:	2322      	movs	r3, #34	; 0x22
 8015f96:	f8c9 3000 	str.w	r3, [r9]
 8015f9a:	e5b6      	b.n	8015b0a <_strtod_l+0x452>
 8015f9c:	4013      	ands	r3, r2
 8015f9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015fa2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015fa6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015faa:	f04f 3aff 	mov.w	sl, #4294967295
 8015fae:	e76a      	b.n	8015e86 <_strtod_l+0x7ce>
 8015fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fb2:	b193      	cbz	r3, 8015fda <_strtod_l+0x922>
 8015fb4:	422b      	tst	r3, r5
 8015fb6:	f43f af66 	beq.w	8015e86 <_strtod_l+0x7ce>
 8015fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fbc:	9a04      	ldr	r2, [sp, #16]
 8015fbe:	4650      	mov	r0, sl
 8015fc0:	4659      	mov	r1, fp
 8015fc2:	b173      	cbz	r3, 8015fe2 <_strtod_l+0x92a>
 8015fc4:	f7ff fb5c 	bl	8015680 <sulp>
 8015fc8:	4602      	mov	r2, r0
 8015fca:	460b      	mov	r3, r1
 8015fcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015fd0:	f7ea f974 	bl	80002bc <__adddf3>
 8015fd4:	4682      	mov	sl, r0
 8015fd6:	468b      	mov	fp, r1
 8015fd8:	e755      	b.n	8015e86 <_strtod_l+0x7ce>
 8015fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fdc:	ea13 0f0a 	tst.w	r3, sl
 8015fe0:	e7e9      	b.n	8015fb6 <_strtod_l+0x8fe>
 8015fe2:	f7ff fb4d 	bl	8015680 <sulp>
 8015fe6:	4602      	mov	r2, r0
 8015fe8:	460b      	mov	r3, r1
 8015fea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015fee:	f7ea f963 	bl	80002b8 <__aeabi_dsub>
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	4682      	mov	sl, r0
 8015ff8:	468b      	mov	fp, r1
 8015ffa:	f7ea fd7d 	bl	8000af8 <__aeabi_dcmpeq>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	f47f ae11 	bne.w	8015c26 <_strtod_l+0x56e>
 8016004:	e73f      	b.n	8015e86 <_strtod_l+0x7ce>
 8016006:	4641      	mov	r1, r8
 8016008:	4620      	mov	r0, r4
 801600a:	f001 ff40 	bl	8017e8e <__ratio>
 801600e:	ec57 6b10 	vmov	r6, r7, d0
 8016012:	2200      	movs	r2, #0
 8016014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016018:	ee10 0a10 	vmov	r0, s0
 801601c:	4639      	mov	r1, r7
 801601e:	f7ea fd7f 	bl	8000b20 <__aeabi_dcmple>
 8016022:	2800      	cmp	r0, #0
 8016024:	d077      	beq.n	8016116 <_strtod_l+0xa5e>
 8016026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016028:	2b00      	cmp	r3, #0
 801602a:	d04a      	beq.n	80160c2 <_strtod_l+0xa0a>
 801602c:	4b68      	ldr	r3, [pc, #416]	; (80161d0 <_strtod_l+0xb18>)
 801602e:	2200      	movs	r2, #0
 8016030:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016034:	4f66      	ldr	r7, [pc, #408]	; (80161d0 <_strtod_l+0xb18>)
 8016036:	2600      	movs	r6, #0
 8016038:	4b62      	ldr	r3, [pc, #392]	; (80161c4 <_strtod_l+0xb0c>)
 801603a:	402b      	ands	r3, r5
 801603c:	930f      	str	r3, [sp, #60]	; 0x3c
 801603e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016040:	4b64      	ldr	r3, [pc, #400]	; (80161d4 <_strtod_l+0xb1c>)
 8016042:	429a      	cmp	r2, r3
 8016044:	f040 80ce 	bne.w	80161e4 <_strtod_l+0xb2c>
 8016048:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801604c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016050:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016054:	ec4b ab10 	vmov	d0, sl, fp
 8016058:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801605c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016060:	f001 fe50 	bl	8017d04 <__ulp>
 8016064:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016068:	ec53 2b10 	vmov	r2, r3, d0
 801606c:	f7ea fadc 	bl	8000628 <__aeabi_dmul>
 8016070:	4652      	mov	r2, sl
 8016072:	465b      	mov	r3, fp
 8016074:	f7ea f922 	bl	80002bc <__adddf3>
 8016078:	460b      	mov	r3, r1
 801607a:	4952      	ldr	r1, [pc, #328]	; (80161c4 <_strtod_l+0xb0c>)
 801607c:	4a56      	ldr	r2, [pc, #344]	; (80161d8 <_strtod_l+0xb20>)
 801607e:	4019      	ands	r1, r3
 8016080:	4291      	cmp	r1, r2
 8016082:	4682      	mov	sl, r0
 8016084:	d95b      	bls.n	801613e <_strtod_l+0xa86>
 8016086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016088:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801608c:	4293      	cmp	r3, r2
 801608e:	d103      	bne.n	8016098 <_strtod_l+0x9e0>
 8016090:	9b08      	ldr	r3, [sp, #32]
 8016092:	3301      	adds	r3, #1
 8016094:	f43f ad2e 	beq.w	8015af4 <_strtod_l+0x43c>
 8016098:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80161c8 <_strtod_l+0xb10>
 801609c:	f04f 3aff 	mov.w	sl, #4294967295
 80160a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80160a2:	4648      	mov	r0, r9
 80160a4:	f001 fb96 	bl	80177d4 <_Bfree>
 80160a8:	9905      	ldr	r1, [sp, #20]
 80160aa:	4648      	mov	r0, r9
 80160ac:	f001 fb92 	bl	80177d4 <_Bfree>
 80160b0:	4641      	mov	r1, r8
 80160b2:	4648      	mov	r0, r9
 80160b4:	f001 fb8e 	bl	80177d4 <_Bfree>
 80160b8:	4621      	mov	r1, r4
 80160ba:	4648      	mov	r0, r9
 80160bc:	f001 fb8a 	bl	80177d4 <_Bfree>
 80160c0:	e619      	b.n	8015cf6 <_strtod_l+0x63e>
 80160c2:	f1ba 0f00 	cmp.w	sl, #0
 80160c6:	d11a      	bne.n	80160fe <_strtod_l+0xa46>
 80160c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80160cc:	b9eb      	cbnz	r3, 801610a <_strtod_l+0xa52>
 80160ce:	2200      	movs	r2, #0
 80160d0:	4b3f      	ldr	r3, [pc, #252]	; (80161d0 <_strtod_l+0xb18>)
 80160d2:	4630      	mov	r0, r6
 80160d4:	4639      	mov	r1, r7
 80160d6:	f7ea fd19 	bl	8000b0c <__aeabi_dcmplt>
 80160da:	b9c8      	cbnz	r0, 8016110 <_strtod_l+0xa58>
 80160dc:	4630      	mov	r0, r6
 80160de:	4639      	mov	r1, r7
 80160e0:	2200      	movs	r2, #0
 80160e2:	4b3e      	ldr	r3, [pc, #248]	; (80161dc <_strtod_l+0xb24>)
 80160e4:	f7ea faa0 	bl	8000628 <__aeabi_dmul>
 80160e8:	4606      	mov	r6, r0
 80160ea:	460f      	mov	r7, r1
 80160ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80160f0:	9618      	str	r6, [sp, #96]	; 0x60
 80160f2:	9319      	str	r3, [sp, #100]	; 0x64
 80160f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80160f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80160fc:	e79c      	b.n	8016038 <_strtod_l+0x980>
 80160fe:	f1ba 0f01 	cmp.w	sl, #1
 8016102:	d102      	bne.n	801610a <_strtod_l+0xa52>
 8016104:	2d00      	cmp	r5, #0
 8016106:	f43f ad8e 	beq.w	8015c26 <_strtod_l+0x56e>
 801610a:	2200      	movs	r2, #0
 801610c:	4b34      	ldr	r3, [pc, #208]	; (80161e0 <_strtod_l+0xb28>)
 801610e:	e78f      	b.n	8016030 <_strtod_l+0x978>
 8016110:	2600      	movs	r6, #0
 8016112:	4f32      	ldr	r7, [pc, #200]	; (80161dc <_strtod_l+0xb24>)
 8016114:	e7ea      	b.n	80160ec <_strtod_l+0xa34>
 8016116:	4b31      	ldr	r3, [pc, #196]	; (80161dc <_strtod_l+0xb24>)
 8016118:	4630      	mov	r0, r6
 801611a:	4639      	mov	r1, r7
 801611c:	2200      	movs	r2, #0
 801611e:	f7ea fa83 	bl	8000628 <__aeabi_dmul>
 8016122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016124:	4606      	mov	r6, r0
 8016126:	460f      	mov	r7, r1
 8016128:	b933      	cbnz	r3, 8016138 <_strtod_l+0xa80>
 801612a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801612e:	9010      	str	r0, [sp, #64]	; 0x40
 8016130:	9311      	str	r3, [sp, #68]	; 0x44
 8016132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016136:	e7df      	b.n	80160f8 <_strtod_l+0xa40>
 8016138:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801613c:	e7f9      	b.n	8016132 <_strtod_l+0xa7a>
 801613e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016142:	9b04      	ldr	r3, [sp, #16]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d1ab      	bne.n	80160a0 <_strtod_l+0x9e8>
 8016148:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801614c:	0d1b      	lsrs	r3, r3, #20
 801614e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016150:	051b      	lsls	r3, r3, #20
 8016152:	429a      	cmp	r2, r3
 8016154:	465d      	mov	r5, fp
 8016156:	d1a3      	bne.n	80160a0 <_strtod_l+0x9e8>
 8016158:	4639      	mov	r1, r7
 801615a:	4630      	mov	r0, r6
 801615c:	f7ea fd14 	bl	8000b88 <__aeabi_d2iz>
 8016160:	f7ea f9f8 	bl	8000554 <__aeabi_i2d>
 8016164:	460b      	mov	r3, r1
 8016166:	4602      	mov	r2, r0
 8016168:	4639      	mov	r1, r7
 801616a:	4630      	mov	r0, r6
 801616c:	f7ea f8a4 	bl	80002b8 <__aeabi_dsub>
 8016170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016172:	4606      	mov	r6, r0
 8016174:	460f      	mov	r7, r1
 8016176:	b933      	cbnz	r3, 8016186 <_strtod_l+0xace>
 8016178:	f1ba 0f00 	cmp.w	sl, #0
 801617c:	d103      	bne.n	8016186 <_strtod_l+0xace>
 801617e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016182:	2d00      	cmp	r5, #0
 8016184:	d06d      	beq.n	8016262 <_strtod_l+0xbaa>
 8016186:	a30a      	add	r3, pc, #40	; (adr r3, 80161b0 <_strtod_l+0xaf8>)
 8016188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801618c:	4630      	mov	r0, r6
 801618e:	4639      	mov	r1, r7
 8016190:	f7ea fcbc 	bl	8000b0c <__aeabi_dcmplt>
 8016194:	2800      	cmp	r0, #0
 8016196:	f47f acb8 	bne.w	8015b0a <_strtod_l+0x452>
 801619a:	a307      	add	r3, pc, #28	; (adr r3, 80161b8 <_strtod_l+0xb00>)
 801619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a0:	4630      	mov	r0, r6
 80161a2:	4639      	mov	r1, r7
 80161a4:	f7ea fcd0 	bl	8000b48 <__aeabi_dcmpgt>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	f43f af79 	beq.w	80160a0 <_strtod_l+0x9e8>
 80161ae:	e4ac      	b.n	8015b0a <_strtod_l+0x452>
 80161b0:	94a03595 	.word	0x94a03595
 80161b4:	3fdfffff 	.word	0x3fdfffff
 80161b8:	35afe535 	.word	0x35afe535
 80161bc:	3fe00000 	.word	0x3fe00000
 80161c0:	000fffff 	.word	0x000fffff
 80161c4:	7ff00000 	.word	0x7ff00000
 80161c8:	7fefffff 	.word	0x7fefffff
 80161cc:	39500000 	.word	0x39500000
 80161d0:	3ff00000 	.word	0x3ff00000
 80161d4:	7fe00000 	.word	0x7fe00000
 80161d8:	7c9fffff 	.word	0x7c9fffff
 80161dc:	3fe00000 	.word	0x3fe00000
 80161e0:	bff00000 	.word	0xbff00000
 80161e4:	9b04      	ldr	r3, [sp, #16]
 80161e6:	b333      	cbz	r3, 8016236 <_strtod_l+0xb7e>
 80161e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80161ee:	d822      	bhi.n	8016236 <_strtod_l+0xb7e>
 80161f0:	a327      	add	r3, pc, #156	; (adr r3, 8016290 <_strtod_l+0xbd8>)
 80161f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f6:	4630      	mov	r0, r6
 80161f8:	4639      	mov	r1, r7
 80161fa:	f7ea fc91 	bl	8000b20 <__aeabi_dcmple>
 80161fe:	b1a0      	cbz	r0, 801622a <_strtod_l+0xb72>
 8016200:	4639      	mov	r1, r7
 8016202:	4630      	mov	r0, r6
 8016204:	f7ea fce8 	bl	8000bd8 <__aeabi_d2uiz>
 8016208:	2800      	cmp	r0, #0
 801620a:	bf08      	it	eq
 801620c:	2001      	moveq	r0, #1
 801620e:	f7ea f991 	bl	8000534 <__aeabi_ui2d>
 8016212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016214:	4606      	mov	r6, r0
 8016216:	460f      	mov	r7, r1
 8016218:	bb03      	cbnz	r3, 801625c <_strtod_l+0xba4>
 801621a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801621e:	9012      	str	r0, [sp, #72]	; 0x48
 8016220:	9313      	str	r3, [sp, #76]	; 0x4c
 8016222:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016226:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801622a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801622c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801622e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016232:	1a9b      	subs	r3, r3, r2
 8016234:	930b      	str	r3, [sp, #44]	; 0x2c
 8016236:	ed9d 0b08 	vldr	d0, [sp, #32]
 801623a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801623e:	f001 fd61 	bl	8017d04 <__ulp>
 8016242:	4650      	mov	r0, sl
 8016244:	ec53 2b10 	vmov	r2, r3, d0
 8016248:	4659      	mov	r1, fp
 801624a:	f7ea f9ed 	bl	8000628 <__aeabi_dmul>
 801624e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016252:	f7ea f833 	bl	80002bc <__adddf3>
 8016256:	4682      	mov	sl, r0
 8016258:	468b      	mov	fp, r1
 801625a:	e772      	b.n	8016142 <_strtod_l+0xa8a>
 801625c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016260:	e7df      	b.n	8016222 <_strtod_l+0xb6a>
 8016262:	a30d      	add	r3, pc, #52	; (adr r3, 8016298 <_strtod_l+0xbe0>)
 8016264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016268:	f7ea fc50 	bl	8000b0c <__aeabi_dcmplt>
 801626c:	e79c      	b.n	80161a8 <_strtod_l+0xaf0>
 801626e:	2300      	movs	r3, #0
 8016270:	930d      	str	r3, [sp, #52]	; 0x34
 8016272:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016276:	6013      	str	r3, [r2, #0]
 8016278:	f7ff ba61 	b.w	801573e <_strtod_l+0x86>
 801627c:	2b65      	cmp	r3, #101	; 0x65
 801627e:	f04f 0200 	mov.w	r2, #0
 8016282:	f43f ab4e 	beq.w	8015922 <_strtod_l+0x26a>
 8016286:	2101      	movs	r1, #1
 8016288:	4614      	mov	r4, r2
 801628a:	9104      	str	r1, [sp, #16]
 801628c:	f7ff bacb 	b.w	8015826 <_strtod_l+0x16e>
 8016290:	ffc00000 	.word	0xffc00000
 8016294:	41dfffff 	.word	0x41dfffff
 8016298:	94a03595 	.word	0x94a03595
 801629c:	3fcfffff 	.word	0x3fcfffff

080162a0 <_strtod_r>:
 80162a0:	4b05      	ldr	r3, [pc, #20]	; (80162b8 <_strtod_r+0x18>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	b410      	push	{r4}
 80162a6:	6a1b      	ldr	r3, [r3, #32]
 80162a8:	4c04      	ldr	r4, [pc, #16]	; (80162bc <_strtod_r+0x1c>)
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	bf08      	it	eq
 80162ae:	4623      	moveq	r3, r4
 80162b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162b4:	f7ff ba00 	b.w	80156b8 <_strtod_l>
 80162b8:	2000000c 	.word	0x2000000c
 80162bc:	20000070 	.word	0x20000070

080162c0 <_strtol_l.isra.0>:
 80162c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162c4:	4680      	mov	r8, r0
 80162c6:	4689      	mov	r9, r1
 80162c8:	4692      	mov	sl, r2
 80162ca:	461e      	mov	r6, r3
 80162cc:	460f      	mov	r7, r1
 80162ce:	463d      	mov	r5, r7
 80162d0:	9808      	ldr	r0, [sp, #32]
 80162d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80162d6:	f001 fa0d 	bl	80176f4 <__locale_ctype_ptr_l>
 80162da:	4420      	add	r0, r4
 80162dc:	7843      	ldrb	r3, [r0, #1]
 80162de:	f013 0308 	ands.w	r3, r3, #8
 80162e2:	d132      	bne.n	801634a <_strtol_l.isra.0+0x8a>
 80162e4:	2c2d      	cmp	r4, #45	; 0x2d
 80162e6:	d132      	bne.n	801634e <_strtol_l.isra.0+0x8e>
 80162e8:	787c      	ldrb	r4, [r7, #1]
 80162ea:	1cbd      	adds	r5, r7, #2
 80162ec:	2201      	movs	r2, #1
 80162ee:	2e00      	cmp	r6, #0
 80162f0:	d05d      	beq.n	80163ae <_strtol_l.isra.0+0xee>
 80162f2:	2e10      	cmp	r6, #16
 80162f4:	d109      	bne.n	801630a <_strtol_l.isra.0+0x4a>
 80162f6:	2c30      	cmp	r4, #48	; 0x30
 80162f8:	d107      	bne.n	801630a <_strtol_l.isra.0+0x4a>
 80162fa:	782b      	ldrb	r3, [r5, #0]
 80162fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016300:	2b58      	cmp	r3, #88	; 0x58
 8016302:	d14f      	bne.n	80163a4 <_strtol_l.isra.0+0xe4>
 8016304:	786c      	ldrb	r4, [r5, #1]
 8016306:	2610      	movs	r6, #16
 8016308:	3502      	adds	r5, #2
 801630a:	2a00      	cmp	r2, #0
 801630c:	bf14      	ite	ne
 801630e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016312:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016316:	2700      	movs	r7, #0
 8016318:	fbb1 fcf6 	udiv	ip, r1, r6
 801631c:	4638      	mov	r0, r7
 801631e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016322:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016326:	2b09      	cmp	r3, #9
 8016328:	d817      	bhi.n	801635a <_strtol_l.isra.0+0x9a>
 801632a:	461c      	mov	r4, r3
 801632c:	42a6      	cmp	r6, r4
 801632e:	dd23      	ble.n	8016378 <_strtol_l.isra.0+0xb8>
 8016330:	1c7b      	adds	r3, r7, #1
 8016332:	d007      	beq.n	8016344 <_strtol_l.isra.0+0x84>
 8016334:	4584      	cmp	ip, r0
 8016336:	d31c      	bcc.n	8016372 <_strtol_l.isra.0+0xb2>
 8016338:	d101      	bne.n	801633e <_strtol_l.isra.0+0x7e>
 801633a:	45a6      	cmp	lr, r4
 801633c:	db19      	blt.n	8016372 <_strtol_l.isra.0+0xb2>
 801633e:	fb00 4006 	mla	r0, r0, r6, r4
 8016342:	2701      	movs	r7, #1
 8016344:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016348:	e7eb      	b.n	8016322 <_strtol_l.isra.0+0x62>
 801634a:	462f      	mov	r7, r5
 801634c:	e7bf      	b.n	80162ce <_strtol_l.isra.0+0xe>
 801634e:	2c2b      	cmp	r4, #43	; 0x2b
 8016350:	bf04      	itt	eq
 8016352:	1cbd      	addeq	r5, r7, #2
 8016354:	787c      	ldrbeq	r4, [r7, #1]
 8016356:	461a      	mov	r2, r3
 8016358:	e7c9      	b.n	80162ee <_strtol_l.isra.0+0x2e>
 801635a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801635e:	2b19      	cmp	r3, #25
 8016360:	d801      	bhi.n	8016366 <_strtol_l.isra.0+0xa6>
 8016362:	3c37      	subs	r4, #55	; 0x37
 8016364:	e7e2      	b.n	801632c <_strtol_l.isra.0+0x6c>
 8016366:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801636a:	2b19      	cmp	r3, #25
 801636c:	d804      	bhi.n	8016378 <_strtol_l.isra.0+0xb8>
 801636e:	3c57      	subs	r4, #87	; 0x57
 8016370:	e7dc      	b.n	801632c <_strtol_l.isra.0+0x6c>
 8016372:	f04f 37ff 	mov.w	r7, #4294967295
 8016376:	e7e5      	b.n	8016344 <_strtol_l.isra.0+0x84>
 8016378:	1c7b      	adds	r3, r7, #1
 801637a:	d108      	bne.n	801638e <_strtol_l.isra.0+0xce>
 801637c:	2322      	movs	r3, #34	; 0x22
 801637e:	f8c8 3000 	str.w	r3, [r8]
 8016382:	4608      	mov	r0, r1
 8016384:	f1ba 0f00 	cmp.w	sl, #0
 8016388:	d107      	bne.n	801639a <_strtol_l.isra.0+0xda>
 801638a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801638e:	b102      	cbz	r2, 8016392 <_strtol_l.isra.0+0xd2>
 8016390:	4240      	negs	r0, r0
 8016392:	f1ba 0f00 	cmp.w	sl, #0
 8016396:	d0f8      	beq.n	801638a <_strtol_l.isra.0+0xca>
 8016398:	b10f      	cbz	r7, 801639e <_strtol_l.isra.0+0xde>
 801639a:	f105 39ff 	add.w	r9, r5, #4294967295
 801639e:	f8ca 9000 	str.w	r9, [sl]
 80163a2:	e7f2      	b.n	801638a <_strtol_l.isra.0+0xca>
 80163a4:	2430      	movs	r4, #48	; 0x30
 80163a6:	2e00      	cmp	r6, #0
 80163a8:	d1af      	bne.n	801630a <_strtol_l.isra.0+0x4a>
 80163aa:	2608      	movs	r6, #8
 80163ac:	e7ad      	b.n	801630a <_strtol_l.isra.0+0x4a>
 80163ae:	2c30      	cmp	r4, #48	; 0x30
 80163b0:	d0a3      	beq.n	80162fa <_strtol_l.isra.0+0x3a>
 80163b2:	260a      	movs	r6, #10
 80163b4:	e7a9      	b.n	801630a <_strtol_l.isra.0+0x4a>
	...

080163b8 <_strtol_r>:
 80163b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163ba:	4c06      	ldr	r4, [pc, #24]	; (80163d4 <_strtol_r+0x1c>)
 80163bc:	4d06      	ldr	r5, [pc, #24]	; (80163d8 <_strtol_r+0x20>)
 80163be:	6824      	ldr	r4, [r4, #0]
 80163c0:	6a24      	ldr	r4, [r4, #32]
 80163c2:	2c00      	cmp	r4, #0
 80163c4:	bf08      	it	eq
 80163c6:	462c      	moveq	r4, r5
 80163c8:	9400      	str	r4, [sp, #0]
 80163ca:	f7ff ff79 	bl	80162c0 <_strtol_l.isra.0>
 80163ce:	b003      	add	sp, #12
 80163d0:	bd30      	pop	{r4, r5, pc}
 80163d2:	bf00      	nop
 80163d4:	2000000c 	.word	0x2000000c
 80163d8:	20000070 	.word	0x20000070

080163dc <_vsiprintf_r>:
 80163dc:	b500      	push	{lr}
 80163de:	b09b      	sub	sp, #108	; 0x6c
 80163e0:	9100      	str	r1, [sp, #0]
 80163e2:	9104      	str	r1, [sp, #16]
 80163e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80163e8:	9105      	str	r1, [sp, #20]
 80163ea:	9102      	str	r1, [sp, #8]
 80163ec:	4905      	ldr	r1, [pc, #20]	; (8016404 <_vsiprintf_r+0x28>)
 80163ee:	9103      	str	r1, [sp, #12]
 80163f0:	4669      	mov	r1, sp
 80163f2:	f001 fecb 	bl	801818c <_svfiprintf_r>
 80163f6:	9b00      	ldr	r3, [sp, #0]
 80163f8:	2200      	movs	r2, #0
 80163fa:	701a      	strb	r2, [r3, #0]
 80163fc:	b01b      	add	sp, #108	; 0x6c
 80163fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8016402:	bf00      	nop
 8016404:	ffff0208 	.word	0xffff0208

08016408 <vsiprintf>:
 8016408:	4613      	mov	r3, r2
 801640a:	460a      	mov	r2, r1
 801640c:	4601      	mov	r1, r0
 801640e:	4802      	ldr	r0, [pc, #8]	; (8016418 <vsiprintf+0x10>)
 8016410:	6800      	ldr	r0, [r0, #0]
 8016412:	f7ff bfe3 	b.w	80163dc <_vsiprintf_r>
 8016416:	bf00      	nop
 8016418:	2000000c 	.word	0x2000000c

0801641c <quorem>:
 801641c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016420:	6903      	ldr	r3, [r0, #16]
 8016422:	690c      	ldr	r4, [r1, #16]
 8016424:	42a3      	cmp	r3, r4
 8016426:	4680      	mov	r8, r0
 8016428:	f2c0 8082 	blt.w	8016530 <quorem+0x114>
 801642c:	3c01      	subs	r4, #1
 801642e:	f101 0714 	add.w	r7, r1, #20
 8016432:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016436:	f100 0614 	add.w	r6, r0, #20
 801643a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801643e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016442:	eb06 030c 	add.w	r3, r6, ip
 8016446:	3501      	adds	r5, #1
 8016448:	eb07 090c 	add.w	r9, r7, ip
 801644c:	9301      	str	r3, [sp, #4]
 801644e:	fbb0 f5f5 	udiv	r5, r0, r5
 8016452:	b395      	cbz	r5, 80164ba <quorem+0x9e>
 8016454:	f04f 0a00 	mov.w	sl, #0
 8016458:	4638      	mov	r0, r7
 801645a:	46b6      	mov	lr, r6
 801645c:	46d3      	mov	fp, sl
 801645e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016462:	b293      	uxth	r3, r2
 8016464:	fb05 a303 	mla	r3, r5, r3, sl
 8016468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801646c:	b29b      	uxth	r3, r3
 801646e:	ebab 0303 	sub.w	r3, fp, r3
 8016472:	0c12      	lsrs	r2, r2, #16
 8016474:	f8de b000 	ldr.w	fp, [lr]
 8016478:	fb05 a202 	mla	r2, r5, r2, sl
 801647c:	fa13 f38b 	uxtah	r3, r3, fp
 8016480:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016484:	fa1f fb82 	uxth.w	fp, r2
 8016488:	f8de 2000 	ldr.w	r2, [lr]
 801648c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016494:	b29b      	uxth	r3, r3
 8016496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801649a:	4581      	cmp	r9, r0
 801649c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80164a0:	f84e 3b04 	str.w	r3, [lr], #4
 80164a4:	d2db      	bcs.n	801645e <quorem+0x42>
 80164a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80164aa:	b933      	cbnz	r3, 80164ba <quorem+0x9e>
 80164ac:	9b01      	ldr	r3, [sp, #4]
 80164ae:	3b04      	subs	r3, #4
 80164b0:	429e      	cmp	r6, r3
 80164b2:	461a      	mov	r2, r3
 80164b4:	d330      	bcc.n	8016518 <quorem+0xfc>
 80164b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80164ba:	4640      	mov	r0, r8
 80164bc:	f001 fbaa 	bl	8017c14 <__mcmp>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	db25      	blt.n	8016510 <quorem+0xf4>
 80164c4:	3501      	adds	r5, #1
 80164c6:	4630      	mov	r0, r6
 80164c8:	f04f 0c00 	mov.w	ip, #0
 80164cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80164d0:	f8d0 e000 	ldr.w	lr, [r0]
 80164d4:	b293      	uxth	r3, r2
 80164d6:	ebac 0303 	sub.w	r3, ip, r3
 80164da:	0c12      	lsrs	r2, r2, #16
 80164dc:	fa13 f38e 	uxtah	r3, r3, lr
 80164e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80164e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80164e8:	b29b      	uxth	r3, r3
 80164ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80164ee:	45b9      	cmp	r9, r7
 80164f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80164f4:	f840 3b04 	str.w	r3, [r0], #4
 80164f8:	d2e8      	bcs.n	80164cc <quorem+0xb0>
 80164fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80164fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016502:	b92a      	cbnz	r2, 8016510 <quorem+0xf4>
 8016504:	3b04      	subs	r3, #4
 8016506:	429e      	cmp	r6, r3
 8016508:	461a      	mov	r2, r3
 801650a:	d30b      	bcc.n	8016524 <quorem+0x108>
 801650c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016510:	4628      	mov	r0, r5
 8016512:	b003      	add	sp, #12
 8016514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016518:	6812      	ldr	r2, [r2, #0]
 801651a:	3b04      	subs	r3, #4
 801651c:	2a00      	cmp	r2, #0
 801651e:	d1ca      	bne.n	80164b6 <quorem+0x9a>
 8016520:	3c01      	subs	r4, #1
 8016522:	e7c5      	b.n	80164b0 <quorem+0x94>
 8016524:	6812      	ldr	r2, [r2, #0]
 8016526:	3b04      	subs	r3, #4
 8016528:	2a00      	cmp	r2, #0
 801652a:	d1ef      	bne.n	801650c <quorem+0xf0>
 801652c:	3c01      	subs	r4, #1
 801652e:	e7ea      	b.n	8016506 <quorem+0xea>
 8016530:	2000      	movs	r0, #0
 8016532:	e7ee      	b.n	8016512 <quorem+0xf6>
 8016534:	0000      	movs	r0, r0
	...

08016538 <_dtoa_r>:
 8016538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801653c:	ec57 6b10 	vmov	r6, r7, d0
 8016540:	b097      	sub	sp, #92	; 0x5c
 8016542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016544:	9106      	str	r1, [sp, #24]
 8016546:	4604      	mov	r4, r0
 8016548:	920b      	str	r2, [sp, #44]	; 0x2c
 801654a:	9312      	str	r3, [sp, #72]	; 0x48
 801654c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016550:	e9cd 6700 	strd	r6, r7, [sp]
 8016554:	b93d      	cbnz	r5, 8016566 <_dtoa_r+0x2e>
 8016556:	2010      	movs	r0, #16
 8016558:	f001 f8ee 	bl	8017738 <malloc>
 801655c:	6260      	str	r0, [r4, #36]	; 0x24
 801655e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016562:	6005      	str	r5, [r0, #0]
 8016564:	60c5      	str	r5, [r0, #12]
 8016566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016568:	6819      	ldr	r1, [r3, #0]
 801656a:	b151      	cbz	r1, 8016582 <_dtoa_r+0x4a>
 801656c:	685a      	ldr	r2, [r3, #4]
 801656e:	604a      	str	r2, [r1, #4]
 8016570:	2301      	movs	r3, #1
 8016572:	4093      	lsls	r3, r2
 8016574:	608b      	str	r3, [r1, #8]
 8016576:	4620      	mov	r0, r4
 8016578:	f001 f92c 	bl	80177d4 <_Bfree>
 801657c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801657e:	2200      	movs	r2, #0
 8016580:	601a      	str	r2, [r3, #0]
 8016582:	1e3b      	subs	r3, r7, #0
 8016584:	bfbb      	ittet	lt
 8016586:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801658a:	9301      	strlt	r3, [sp, #4]
 801658c:	2300      	movge	r3, #0
 801658e:	2201      	movlt	r2, #1
 8016590:	bfac      	ite	ge
 8016592:	f8c8 3000 	strge.w	r3, [r8]
 8016596:	f8c8 2000 	strlt.w	r2, [r8]
 801659a:	4baf      	ldr	r3, [pc, #700]	; (8016858 <_dtoa_r+0x320>)
 801659c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80165a0:	ea33 0308 	bics.w	r3, r3, r8
 80165a4:	d114      	bne.n	80165d0 <_dtoa_r+0x98>
 80165a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80165a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80165ac:	6013      	str	r3, [r2, #0]
 80165ae:	9b00      	ldr	r3, [sp, #0]
 80165b0:	b923      	cbnz	r3, 80165bc <_dtoa_r+0x84>
 80165b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80165b6:	2800      	cmp	r0, #0
 80165b8:	f000 8542 	beq.w	8017040 <_dtoa_r+0xb08>
 80165bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80165be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801686c <_dtoa_r+0x334>
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	f000 8544 	beq.w	8017050 <_dtoa_r+0xb18>
 80165c8:	f10b 0303 	add.w	r3, fp, #3
 80165cc:	f000 bd3e 	b.w	801704c <_dtoa_r+0xb14>
 80165d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80165d4:	2200      	movs	r2, #0
 80165d6:	2300      	movs	r3, #0
 80165d8:	4630      	mov	r0, r6
 80165da:	4639      	mov	r1, r7
 80165dc:	f7ea fa8c 	bl	8000af8 <__aeabi_dcmpeq>
 80165e0:	4681      	mov	r9, r0
 80165e2:	b168      	cbz	r0, 8016600 <_dtoa_r+0xc8>
 80165e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80165e6:	2301      	movs	r3, #1
 80165e8:	6013      	str	r3, [r2, #0]
 80165ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	f000 8524 	beq.w	801703a <_dtoa_r+0xb02>
 80165f2:	4b9a      	ldr	r3, [pc, #616]	; (801685c <_dtoa_r+0x324>)
 80165f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80165f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80165fa:	6013      	str	r3, [r2, #0]
 80165fc:	f000 bd28 	b.w	8017050 <_dtoa_r+0xb18>
 8016600:	aa14      	add	r2, sp, #80	; 0x50
 8016602:	a915      	add	r1, sp, #84	; 0x54
 8016604:	ec47 6b10 	vmov	d0, r6, r7
 8016608:	4620      	mov	r0, r4
 801660a:	f001 fbf1 	bl	8017df0 <__d2b>
 801660e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016612:	9004      	str	r0, [sp, #16]
 8016614:	2d00      	cmp	r5, #0
 8016616:	d07c      	beq.n	8016712 <_dtoa_r+0x1da>
 8016618:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801661c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016620:	46b2      	mov	sl, r6
 8016622:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801662a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801662e:	2200      	movs	r2, #0
 8016630:	4b8b      	ldr	r3, [pc, #556]	; (8016860 <_dtoa_r+0x328>)
 8016632:	4650      	mov	r0, sl
 8016634:	4659      	mov	r1, fp
 8016636:	f7e9 fe3f 	bl	80002b8 <__aeabi_dsub>
 801663a:	a381      	add	r3, pc, #516	; (adr r3, 8016840 <_dtoa_r+0x308>)
 801663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016640:	f7e9 fff2 	bl	8000628 <__aeabi_dmul>
 8016644:	a380      	add	r3, pc, #512	; (adr r3, 8016848 <_dtoa_r+0x310>)
 8016646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801664a:	f7e9 fe37 	bl	80002bc <__adddf3>
 801664e:	4606      	mov	r6, r0
 8016650:	4628      	mov	r0, r5
 8016652:	460f      	mov	r7, r1
 8016654:	f7e9 ff7e 	bl	8000554 <__aeabi_i2d>
 8016658:	a37d      	add	r3, pc, #500	; (adr r3, 8016850 <_dtoa_r+0x318>)
 801665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801665e:	f7e9 ffe3 	bl	8000628 <__aeabi_dmul>
 8016662:	4602      	mov	r2, r0
 8016664:	460b      	mov	r3, r1
 8016666:	4630      	mov	r0, r6
 8016668:	4639      	mov	r1, r7
 801666a:	f7e9 fe27 	bl	80002bc <__adddf3>
 801666e:	4606      	mov	r6, r0
 8016670:	460f      	mov	r7, r1
 8016672:	f7ea fa89 	bl	8000b88 <__aeabi_d2iz>
 8016676:	2200      	movs	r2, #0
 8016678:	4682      	mov	sl, r0
 801667a:	2300      	movs	r3, #0
 801667c:	4630      	mov	r0, r6
 801667e:	4639      	mov	r1, r7
 8016680:	f7ea fa44 	bl	8000b0c <__aeabi_dcmplt>
 8016684:	b148      	cbz	r0, 801669a <_dtoa_r+0x162>
 8016686:	4650      	mov	r0, sl
 8016688:	f7e9 ff64 	bl	8000554 <__aeabi_i2d>
 801668c:	4632      	mov	r2, r6
 801668e:	463b      	mov	r3, r7
 8016690:	f7ea fa32 	bl	8000af8 <__aeabi_dcmpeq>
 8016694:	b908      	cbnz	r0, 801669a <_dtoa_r+0x162>
 8016696:	f10a 3aff 	add.w	sl, sl, #4294967295
 801669a:	f1ba 0f16 	cmp.w	sl, #22
 801669e:	d859      	bhi.n	8016754 <_dtoa_r+0x21c>
 80166a0:	4970      	ldr	r1, [pc, #448]	; (8016864 <_dtoa_r+0x32c>)
 80166a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80166a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80166aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166ae:	f7ea fa4b 	bl	8000b48 <__aeabi_dcmpgt>
 80166b2:	2800      	cmp	r0, #0
 80166b4:	d050      	beq.n	8016758 <_dtoa_r+0x220>
 80166b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80166ba:	2300      	movs	r3, #0
 80166bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80166be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166c0:	1b5d      	subs	r5, r3, r5
 80166c2:	f1b5 0801 	subs.w	r8, r5, #1
 80166c6:	bf49      	itett	mi
 80166c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80166cc:	2300      	movpl	r3, #0
 80166ce:	9305      	strmi	r3, [sp, #20]
 80166d0:	f04f 0800 	movmi.w	r8, #0
 80166d4:	bf58      	it	pl
 80166d6:	9305      	strpl	r3, [sp, #20]
 80166d8:	f1ba 0f00 	cmp.w	sl, #0
 80166dc:	db3e      	blt.n	801675c <_dtoa_r+0x224>
 80166de:	2300      	movs	r3, #0
 80166e0:	44d0      	add	r8, sl
 80166e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80166e6:	9307      	str	r3, [sp, #28]
 80166e8:	9b06      	ldr	r3, [sp, #24]
 80166ea:	2b09      	cmp	r3, #9
 80166ec:	f200 8090 	bhi.w	8016810 <_dtoa_r+0x2d8>
 80166f0:	2b05      	cmp	r3, #5
 80166f2:	bfc4      	itt	gt
 80166f4:	3b04      	subgt	r3, #4
 80166f6:	9306      	strgt	r3, [sp, #24]
 80166f8:	9b06      	ldr	r3, [sp, #24]
 80166fa:	f1a3 0302 	sub.w	r3, r3, #2
 80166fe:	bfcc      	ite	gt
 8016700:	2500      	movgt	r5, #0
 8016702:	2501      	movle	r5, #1
 8016704:	2b03      	cmp	r3, #3
 8016706:	f200 808f 	bhi.w	8016828 <_dtoa_r+0x2f0>
 801670a:	e8df f003 	tbb	[pc, r3]
 801670e:	7f7d      	.short	0x7f7d
 8016710:	7131      	.short	0x7131
 8016712:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016716:	441d      	add	r5, r3
 8016718:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801671c:	2820      	cmp	r0, #32
 801671e:	dd13      	ble.n	8016748 <_dtoa_r+0x210>
 8016720:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016724:	9b00      	ldr	r3, [sp, #0]
 8016726:	fa08 f800 	lsl.w	r8, r8, r0
 801672a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801672e:	fa23 f000 	lsr.w	r0, r3, r0
 8016732:	ea48 0000 	orr.w	r0, r8, r0
 8016736:	f7e9 fefd 	bl	8000534 <__aeabi_ui2d>
 801673a:	2301      	movs	r3, #1
 801673c:	4682      	mov	sl, r0
 801673e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016742:	3d01      	subs	r5, #1
 8016744:	9313      	str	r3, [sp, #76]	; 0x4c
 8016746:	e772      	b.n	801662e <_dtoa_r+0xf6>
 8016748:	9b00      	ldr	r3, [sp, #0]
 801674a:	f1c0 0020 	rsb	r0, r0, #32
 801674e:	fa03 f000 	lsl.w	r0, r3, r0
 8016752:	e7f0      	b.n	8016736 <_dtoa_r+0x1fe>
 8016754:	2301      	movs	r3, #1
 8016756:	e7b1      	b.n	80166bc <_dtoa_r+0x184>
 8016758:	900f      	str	r0, [sp, #60]	; 0x3c
 801675a:	e7b0      	b.n	80166be <_dtoa_r+0x186>
 801675c:	9b05      	ldr	r3, [sp, #20]
 801675e:	eba3 030a 	sub.w	r3, r3, sl
 8016762:	9305      	str	r3, [sp, #20]
 8016764:	f1ca 0300 	rsb	r3, sl, #0
 8016768:	9307      	str	r3, [sp, #28]
 801676a:	2300      	movs	r3, #0
 801676c:	930e      	str	r3, [sp, #56]	; 0x38
 801676e:	e7bb      	b.n	80166e8 <_dtoa_r+0x1b0>
 8016770:	2301      	movs	r3, #1
 8016772:	930a      	str	r3, [sp, #40]	; 0x28
 8016774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016776:	2b00      	cmp	r3, #0
 8016778:	dd59      	ble.n	801682e <_dtoa_r+0x2f6>
 801677a:	9302      	str	r3, [sp, #8]
 801677c:	4699      	mov	r9, r3
 801677e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016780:	2200      	movs	r2, #0
 8016782:	6072      	str	r2, [r6, #4]
 8016784:	2204      	movs	r2, #4
 8016786:	f102 0014 	add.w	r0, r2, #20
 801678a:	4298      	cmp	r0, r3
 801678c:	6871      	ldr	r1, [r6, #4]
 801678e:	d953      	bls.n	8016838 <_dtoa_r+0x300>
 8016790:	4620      	mov	r0, r4
 8016792:	f000 ffeb 	bl	801776c <_Balloc>
 8016796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016798:	6030      	str	r0, [r6, #0]
 801679a:	f1b9 0f0e 	cmp.w	r9, #14
 801679e:	f8d3 b000 	ldr.w	fp, [r3]
 80167a2:	f200 80e6 	bhi.w	8016972 <_dtoa_r+0x43a>
 80167a6:	2d00      	cmp	r5, #0
 80167a8:	f000 80e3 	beq.w	8016972 <_dtoa_r+0x43a>
 80167ac:	ed9d 7b00 	vldr	d7, [sp]
 80167b0:	f1ba 0f00 	cmp.w	sl, #0
 80167b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80167b8:	dd74      	ble.n	80168a4 <_dtoa_r+0x36c>
 80167ba:	4a2a      	ldr	r2, [pc, #168]	; (8016864 <_dtoa_r+0x32c>)
 80167bc:	f00a 030f 	and.w	r3, sl, #15
 80167c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80167c4:	ed93 7b00 	vldr	d7, [r3]
 80167c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80167cc:	06f0      	lsls	r0, r6, #27
 80167ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80167d2:	d565      	bpl.n	80168a0 <_dtoa_r+0x368>
 80167d4:	4b24      	ldr	r3, [pc, #144]	; (8016868 <_dtoa_r+0x330>)
 80167d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80167da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80167de:	f7ea f84d 	bl	800087c <__aeabi_ddiv>
 80167e2:	e9cd 0100 	strd	r0, r1, [sp]
 80167e6:	f006 060f 	and.w	r6, r6, #15
 80167ea:	2503      	movs	r5, #3
 80167ec:	4f1e      	ldr	r7, [pc, #120]	; (8016868 <_dtoa_r+0x330>)
 80167ee:	e04c      	b.n	801688a <_dtoa_r+0x352>
 80167f0:	2301      	movs	r3, #1
 80167f2:	930a      	str	r3, [sp, #40]	; 0x28
 80167f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167f6:	4453      	add	r3, sl
 80167f8:	f103 0901 	add.w	r9, r3, #1
 80167fc:	9302      	str	r3, [sp, #8]
 80167fe:	464b      	mov	r3, r9
 8016800:	2b01      	cmp	r3, #1
 8016802:	bfb8      	it	lt
 8016804:	2301      	movlt	r3, #1
 8016806:	e7ba      	b.n	801677e <_dtoa_r+0x246>
 8016808:	2300      	movs	r3, #0
 801680a:	e7b2      	b.n	8016772 <_dtoa_r+0x23a>
 801680c:	2300      	movs	r3, #0
 801680e:	e7f0      	b.n	80167f2 <_dtoa_r+0x2ba>
 8016810:	2501      	movs	r5, #1
 8016812:	2300      	movs	r3, #0
 8016814:	9306      	str	r3, [sp, #24]
 8016816:	950a      	str	r5, [sp, #40]	; 0x28
 8016818:	f04f 33ff 	mov.w	r3, #4294967295
 801681c:	9302      	str	r3, [sp, #8]
 801681e:	4699      	mov	r9, r3
 8016820:	2200      	movs	r2, #0
 8016822:	2312      	movs	r3, #18
 8016824:	920b      	str	r2, [sp, #44]	; 0x2c
 8016826:	e7aa      	b.n	801677e <_dtoa_r+0x246>
 8016828:	2301      	movs	r3, #1
 801682a:	930a      	str	r3, [sp, #40]	; 0x28
 801682c:	e7f4      	b.n	8016818 <_dtoa_r+0x2e0>
 801682e:	2301      	movs	r3, #1
 8016830:	9302      	str	r3, [sp, #8]
 8016832:	4699      	mov	r9, r3
 8016834:	461a      	mov	r2, r3
 8016836:	e7f5      	b.n	8016824 <_dtoa_r+0x2ec>
 8016838:	3101      	adds	r1, #1
 801683a:	6071      	str	r1, [r6, #4]
 801683c:	0052      	lsls	r2, r2, #1
 801683e:	e7a2      	b.n	8016786 <_dtoa_r+0x24e>
 8016840:	636f4361 	.word	0x636f4361
 8016844:	3fd287a7 	.word	0x3fd287a7
 8016848:	8b60c8b3 	.word	0x8b60c8b3
 801684c:	3fc68a28 	.word	0x3fc68a28
 8016850:	509f79fb 	.word	0x509f79fb
 8016854:	3fd34413 	.word	0x3fd34413
 8016858:	7ff00000 	.word	0x7ff00000
 801685c:	080196ec 	.word	0x080196ec
 8016860:	3ff80000 	.word	0x3ff80000
 8016864:	080195f0 	.word	0x080195f0
 8016868:	080195c8 	.word	0x080195c8
 801686c:	08019551 	.word	0x08019551
 8016870:	07f1      	lsls	r1, r6, #31
 8016872:	d508      	bpl.n	8016886 <_dtoa_r+0x34e>
 8016874:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016878:	e9d7 2300 	ldrd	r2, r3, [r7]
 801687c:	f7e9 fed4 	bl	8000628 <__aeabi_dmul>
 8016880:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016884:	3501      	adds	r5, #1
 8016886:	1076      	asrs	r6, r6, #1
 8016888:	3708      	adds	r7, #8
 801688a:	2e00      	cmp	r6, #0
 801688c:	d1f0      	bne.n	8016870 <_dtoa_r+0x338>
 801688e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016896:	f7e9 fff1 	bl	800087c <__aeabi_ddiv>
 801689a:	e9cd 0100 	strd	r0, r1, [sp]
 801689e:	e01a      	b.n	80168d6 <_dtoa_r+0x39e>
 80168a0:	2502      	movs	r5, #2
 80168a2:	e7a3      	b.n	80167ec <_dtoa_r+0x2b4>
 80168a4:	f000 80a0 	beq.w	80169e8 <_dtoa_r+0x4b0>
 80168a8:	f1ca 0600 	rsb	r6, sl, #0
 80168ac:	4b9f      	ldr	r3, [pc, #636]	; (8016b2c <_dtoa_r+0x5f4>)
 80168ae:	4fa0      	ldr	r7, [pc, #640]	; (8016b30 <_dtoa_r+0x5f8>)
 80168b0:	f006 020f 	and.w	r2, r6, #15
 80168b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80168b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80168c0:	f7e9 feb2 	bl	8000628 <__aeabi_dmul>
 80168c4:	e9cd 0100 	strd	r0, r1, [sp]
 80168c8:	1136      	asrs	r6, r6, #4
 80168ca:	2300      	movs	r3, #0
 80168cc:	2502      	movs	r5, #2
 80168ce:	2e00      	cmp	r6, #0
 80168d0:	d17f      	bne.n	80169d2 <_dtoa_r+0x49a>
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d1e1      	bne.n	801689a <_dtoa_r+0x362>
 80168d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f000 8087 	beq.w	80169ec <_dtoa_r+0x4b4>
 80168de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80168e2:	2200      	movs	r2, #0
 80168e4:	4b93      	ldr	r3, [pc, #588]	; (8016b34 <_dtoa_r+0x5fc>)
 80168e6:	4630      	mov	r0, r6
 80168e8:	4639      	mov	r1, r7
 80168ea:	f7ea f90f 	bl	8000b0c <__aeabi_dcmplt>
 80168ee:	2800      	cmp	r0, #0
 80168f0:	d07c      	beq.n	80169ec <_dtoa_r+0x4b4>
 80168f2:	f1b9 0f00 	cmp.w	r9, #0
 80168f6:	d079      	beq.n	80169ec <_dtoa_r+0x4b4>
 80168f8:	9b02      	ldr	r3, [sp, #8]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	dd35      	ble.n	801696a <_dtoa_r+0x432>
 80168fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016902:	9308      	str	r3, [sp, #32]
 8016904:	4639      	mov	r1, r7
 8016906:	2200      	movs	r2, #0
 8016908:	4b8b      	ldr	r3, [pc, #556]	; (8016b38 <_dtoa_r+0x600>)
 801690a:	4630      	mov	r0, r6
 801690c:	f7e9 fe8c 	bl	8000628 <__aeabi_dmul>
 8016910:	e9cd 0100 	strd	r0, r1, [sp]
 8016914:	9f02      	ldr	r7, [sp, #8]
 8016916:	3501      	adds	r5, #1
 8016918:	4628      	mov	r0, r5
 801691a:	f7e9 fe1b 	bl	8000554 <__aeabi_i2d>
 801691e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016922:	f7e9 fe81 	bl	8000628 <__aeabi_dmul>
 8016926:	2200      	movs	r2, #0
 8016928:	4b84      	ldr	r3, [pc, #528]	; (8016b3c <_dtoa_r+0x604>)
 801692a:	f7e9 fcc7 	bl	80002bc <__adddf3>
 801692e:	4605      	mov	r5, r0
 8016930:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016934:	2f00      	cmp	r7, #0
 8016936:	d15d      	bne.n	80169f4 <_dtoa_r+0x4bc>
 8016938:	2200      	movs	r2, #0
 801693a:	4b81      	ldr	r3, [pc, #516]	; (8016b40 <_dtoa_r+0x608>)
 801693c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016940:	f7e9 fcba 	bl	80002b8 <__aeabi_dsub>
 8016944:	462a      	mov	r2, r5
 8016946:	4633      	mov	r3, r6
 8016948:	e9cd 0100 	strd	r0, r1, [sp]
 801694c:	f7ea f8fc 	bl	8000b48 <__aeabi_dcmpgt>
 8016950:	2800      	cmp	r0, #0
 8016952:	f040 8288 	bne.w	8016e66 <_dtoa_r+0x92e>
 8016956:	462a      	mov	r2, r5
 8016958:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801695c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016960:	f7ea f8d4 	bl	8000b0c <__aeabi_dcmplt>
 8016964:	2800      	cmp	r0, #0
 8016966:	f040 827c 	bne.w	8016e62 <_dtoa_r+0x92a>
 801696a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801696e:	e9cd 2300 	strd	r2, r3, [sp]
 8016972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016974:	2b00      	cmp	r3, #0
 8016976:	f2c0 8150 	blt.w	8016c1a <_dtoa_r+0x6e2>
 801697a:	f1ba 0f0e 	cmp.w	sl, #14
 801697e:	f300 814c 	bgt.w	8016c1a <_dtoa_r+0x6e2>
 8016982:	4b6a      	ldr	r3, [pc, #424]	; (8016b2c <_dtoa_r+0x5f4>)
 8016984:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016988:	ed93 7b00 	vldr	d7, [r3]
 801698c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801698e:	2b00      	cmp	r3, #0
 8016990:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016994:	f280 80d8 	bge.w	8016b48 <_dtoa_r+0x610>
 8016998:	f1b9 0f00 	cmp.w	r9, #0
 801699c:	f300 80d4 	bgt.w	8016b48 <_dtoa_r+0x610>
 80169a0:	f040 825e 	bne.w	8016e60 <_dtoa_r+0x928>
 80169a4:	2200      	movs	r2, #0
 80169a6:	4b66      	ldr	r3, [pc, #408]	; (8016b40 <_dtoa_r+0x608>)
 80169a8:	ec51 0b17 	vmov	r0, r1, d7
 80169ac:	f7e9 fe3c 	bl	8000628 <__aeabi_dmul>
 80169b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80169b4:	f7ea f8be 	bl	8000b34 <__aeabi_dcmpge>
 80169b8:	464f      	mov	r7, r9
 80169ba:	464e      	mov	r6, r9
 80169bc:	2800      	cmp	r0, #0
 80169be:	f040 8234 	bne.w	8016e2a <_dtoa_r+0x8f2>
 80169c2:	2331      	movs	r3, #49	; 0x31
 80169c4:	f10b 0501 	add.w	r5, fp, #1
 80169c8:	f88b 3000 	strb.w	r3, [fp]
 80169cc:	f10a 0a01 	add.w	sl, sl, #1
 80169d0:	e22f      	b.n	8016e32 <_dtoa_r+0x8fa>
 80169d2:	07f2      	lsls	r2, r6, #31
 80169d4:	d505      	bpl.n	80169e2 <_dtoa_r+0x4aa>
 80169d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80169da:	f7e9 fe25 	bl	8000628 <__aeabi_dmul>
 80169de:	3501      	adds	r5, #1
 80169e0:	2301      	movs	r3, #1
 80169e2:	1076      	asrs	r6, r6, #1
 80169e4:	3708      	adds	r7, #8
 80169e6:	e772      	b.n	80168ce <_dtoa_r+0x396>
 80169e8:	2502      	movs	r5, #2
 80169ea:	e774      	b.n	80168d6 <_dtoa_r+0x39e>
 80169ec:	f8cd a020 	str.w	sl, [sp, #32]
 80169f0:	464f      	mov	r7, r9
 80169f2:	e791      	b.n	8016918 <_dtoa_r+0x3e0>
 80169f4:	4b4d      	ldr	r3, [pc, #308]	; (8016b2c <_dtoa_r+0x5f4>)
 80169f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80169fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80169fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d047      	beq.n	8016a94 <_dtoa_r+0x55c>
 8016a04:	4602      	mov	r2, r0
 8016a06:	460b      	mov	r3, r1
 8016a08:	2000      	movs	r0, #0
 8016a0a:	494e      	ldr	r1, [pc, #312]	; (8016b44 <_dtoa_r+0x60c>)
 8016a0c:	f7e9 ff36 	bl	800087c <__aeabi_ddiv>
 8016a10:	462a      	mov	r2, r5
 8016a12:	4633      	mov	r3, r6
 8016a14:	f7e9 fc50 	bl	80002b8 <__aeabi_dsub>
 8016a18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016a1c:	465d      	mov	r5, fp
 8016a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a22:	f7ea f8b1 	bl	8000b88 <__aeabi_d2iz>
 8016a26:	4606      	mov	r6, r0
 8016a28:	f7e9 fd94 	bl	8000554 <__aeabi_i2d>
 8016a2c:	4602      	mov	r2, r0
 8016a2e:	460b      	mov	r3, r1
 8016a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a34:	f7e9 fc40 	bl	80002b8 <__aeabi_dsub>
 8016a38:	3630      	adds	r6, #48	; 0x30
 8016a3a:	f805 6b01 	strb.w	r6, [r5], #1
 8016a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016a42:	e9cd 0100 	strd	r0, r1, [sp]
 8016a46:	f7ea f861 	bl	8000b0c <__aeabi_dcmplt>
 8016a4a:	2800      	cmp	r0, #0
 8016a4c:	d163      	bne.n	8016b16 <_dtoa_r+0x5de>
 8016a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a52:	2000      	movs	r0, #0
 8016a54:	4937      	ldr	r1, [pc, #220]	; (8016b34 <_dtoa_r+0x5fc>)
 8016a56:	f7e9 fc2f 	bl	80002b8 <__aeabi_dsub>
 8016a5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016a5e:	f7ea f855 	bl	8000b0c <__aeabi_dcmplt>
 8016a62:	2800      	cmp	r0, #0
 8016a64:	f040 80b7 	bne.w	8016bd6 <_dtoa_r+0x69e>
 8016a68:	eba5 030b 	sub.w	r3, r5, fp
 8016a6c:	429f      	cmp	r7, r3
 8016a6e:	f77f af7c 	ble.w	801696a <_dtoa_r+0x432>
 8016a72:	2200      	movs	r2, #0
 8016a74:	4b30      	ldr	r3, [pc, #192]	; (8016b38 <_dtoa_r+0x600>)
 8016a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016a7a:	f7e9 fdd5 	bl	8000628 <__aeabi_dmul>
 8016a7e:	2200      	movs	r2, #0
 8016a80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016a84:	4b2c      	ldr	r3, [pc, #176]	; (8016b38 <_dtoa_r+0x600>)
 8016a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a8a:	f7e9 fdcd 	bl	8000628 <__aeabi_dmul>
 8016a8e:	e9cd 0100 	strd	r0, r1, [sp]
 8016a92:	e7c4      	b.n	8016a1e <_dtoa_r+0x4e6>
 8016a94:	462a      	mov	r2, r5
 8016a96:	4633      	mov	r3, r6
 8016a98:	f7e9 fdc6 	bl	8000628 <__aeabi_dmul>
 8016a9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016aa0:	eb0b 0507 	add.w	r5, fp, r7
 8016aa4:	465e      	mov	r6, fp
 8016aa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016aaa:	f7ea f86d 	bl	8000b88 <__aeabi_d2iz>
 8016aae:	4607      	mov	r7, r0
 8016ab0:	f7e9 fd50 	bl	8000554 <__aeabi_i2d>
 8016ab4:	3730      	adds	r7, #48	; 0x30
 8016ab6:	4602      	mov	r2, r0
 8016ab8:	460b      	mov	r3, r1
 8016aba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016abe:	f7e9 fbfb 	bl	80002b8 <__aeabi_dsub>
 8016ac2:	f806 7b01 	strb.w	r7, [r6], #1
 8016ac6:	42ae      	cmp	r6, r5
 8016ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8016acc:	f04f 0200 	mov.w	r2, #0
 8016ad0:	d126      	bne.n	8016b20 <_dtoa_r+0x5e8>
 8016ad2:	4b1c      	ldr	r3, [pc, #112]	; (8016b44 <_dtoa_r+0x60c>)
 8016ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016ad8:	f7e9 fbf0 	bl	80002bc <__adddf3>
 8016adc:	4602      	mov	r2, r0
 8016ade:	460b      	mov	r3, r1
 8016ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ae4:	f7ea f830 	bl	8000b48 <__aeabi_dcmpgt>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d174      	bne.n	8016bd6 <_dtoa_r+0x69e>
 8016aec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016af0:	2000      	movs	r0, #0
 8016af2:	4914      	ldr	r1, [pc, #80]	; (8016b44 <_dtoa_r+0x60c>)
 8016af4:	f7e9 fbe0 	bl	80002b8 <__aeabi_dsub>
 8016af8:	4602      	mov	r2, r0
 8016afa:	460b      	mov	r3, r1
 8016afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b00:	f7ea f804 	bl	8000b0c <__aeabi_dcmplt>
 8016b04:	2800      	cmp	r0, #0
 8016b06:	f43f af30 	beq.w	801696a <_dtoa_r+0x432>
 8016b0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016b0e:	2b30      	cmp	r3, #48	; 0x30
 8016b10:	f105 32ff 	add.w	r2, r5, #4294967295
 8016b14:	d002      	beq.n	8016b1c <_dtoa_r+0x5e4>
 8016b16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016b1a:	e04a      	b.n	8016bb2 <_dtoa_r+0x67a>
 8016b1c:	4615      	mov	r5, r2
 8016b1e:	e7f4      	b.n	8016b0a <_dtoa_r+0x5d2>
 8016b20:	4b05      	ldr	r3, [pc, #20]	; (8016b38 <_dtoa_r+0x600>)
 8016b22:	f7e9 fd81 	bl	8000628 <__aeabi_dmul>
 8016b26:	e9cd 0100 	strd	r0, r1, [sp]
 8016b2a:	e7bc      	b.n	8016aa6 <_dtoa_r+0x56e>
 8016b2c:	080195f0 	.word	0x080195f0
 8016b30:	080195c8 	.word	0x080195c8
 8016b34:	3ff00000 	.word	0x3ff00000
 8016b38:	40240000 	.word	0x40240000
 8016b3c:	401c0000 	.word	0x401c0000
 8016b40:	40140000 	.word	0x40140000
 8016b44:	3fe00000 	.word	0x3fe00000
 8016b48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016b4c:	465d      	mov	r5, fp
 8016b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b52:	4630      	mov	r0, r6
 8016b54:	4639      	mov	r1, r7
 8016b56:	f7e9 fe91 	bl	800087c <__aeabi_ddiv>
 8016b5a:	f7ea f815 	bl	8000b88 <__aeabi_d2iz>
 8016b5e:	4680      	mov	r8, r0
 8016b60:	f7e9 fcf8 	bl	8000554 <__aeabi_i2d>
 8016b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b68:	f7e9 fd5e 	bl	8000628 <__aeabi_dmul>
 8016b6c:	4602      	mov	r2, r0
 8016b6e:	460b      	mov	r3, r1
 8016b70:	4630      	mov	r0, r6
 8016b72:	4639      	mov	r1, r7
 8016b74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016b78:	f7e9 fb9e 	bl	80002b8 <__aeabi_dsub>
 8016b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8016b80:	eba5 060b 	sub.w	r6, r5, fp
 8016b84:	45b1      	cmp	r9, r6
 8016b86:	4602      	mov	r2, r0
 8016b88:	460b      	mov	r3, r1
 8016b8a:	d139      	bne.n	8016c00 <_dtoa_r+0x6c8>
 8016b8c:	f7e9 fb96 	bl	80002bc <__adddf3>
 8016b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b94:	4606      	mov	r6, r0
 8016b96:	460f      	mov	r7, r1
 8016b98:	f7e9 ffd6 	bl	8000b48 <__aeabi_dcmpgt>
 8016b9c:	b9c8      	cbnz	r0, 8016bd2 <_dtoa_r+0x69a>
 8016b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ba2:	4630      	mov	r0, r6
 8016ba4:	4639      	mov	r1, r7
 8016ba6:	f7e9 ffa7 	bl	8000af8 <__aeabi_dcmpeq>
 8016baa:	b110      	cbz	r0, 8016bb2 <_dtoa_r+0x67a>
 8016bac:	f018 0f01 	tst.w	r8, #1
 8016bb0:	d10f      	bne.n	8016bd2 <_dtoa_r+0x69a>
 8016bb2:	9904      	ldr	r1, [sp, #16]
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f000 fe0d 	bl	80177d4 <_Bfree>
 8016bba:	2300      	movs	r3, #0
 8016bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016bbe:	702b      	strb	r3, [r5, #0]
 8016bc0:	f10a 0301 	add.w	r3, sl, #1
 8016bc4:	6013      	str	r3, [r2, #0]
 8016bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	f000 8241 	beq.w	8017050 <_dtoa_r+0xb18>
 8016bce:	601d      	str	r5, [r3, #0]
 8016bd0:	e23e      	b.n	8017050 <_dtoa_r+0xb18>
 8016bd2:	f8cd a020 	str.w	sl, [sp, #32]
 8016bd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016bda:	2a39      	cmp	r2, #57	; 0x39
 8016bdc:	f105 33ff 	add.w	r3, r5, #4294967295
 8016be0:	d108      	bne.n	8016bf4 <_dtoa_r+0x6bc>
 8016be2:	459b      	cmp	fp, r3
 8016be4:	d10a      	bne.n	8016bfc <_dtoa_r+0x6c4>
 8016be6:	9b08      	ldr	r3, [sp, #32]
 8016be8:	3301      	adds	r3, #1
 8016bea:	9308      	str	r3, [sp, #32]
 8016bec:	2330      	movs	r3, #48	; 0x30
 8016bee:	f88b 3000 	strb.w	r3, [fp]
 8016bf2:	465b      	mov	r3, fp
 8016bf4:	781a      	ldrb	r2, [r3, #0]
 8016bf6:	3201      	adds	r2, #1
 8016bf8:	701a      	strb	r2, [r3, #0]
 8016bfa:	e78c      	b.n	8016b16 <_dtoa_r+0x5de>
 8016bfc:	461d      	mov	r5, r3
 8016bfe:	e7ea      	b.n	8016bd6 <_dtoa_r+0x69e>
 8016c00:	2200      	movs	r2, #0
 8016c02:	4b9b      	ldr	r3, [pc, #620]	; (8016e70 <_dtoa_r+0x938>)
 8016c04:	f7e9 fd10 	bl	8000628 <__aeabi_dmul>
 8016c08:	2200      	movs	r2, #0
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	4606      	mov	r6, r0
 8016c0e:	460f      	mov	r7, r1
 8016c10:	f7e9 ff72 	bl	8000af8 <__aeabi_dcmpeq>
 8016c14:	2800      	cmp	r0, #0
 8016c16:	d09a      	beq.n	8016b4e <_dtoa_r+0x616>
 8016c18:	e7cb      	b.n	8016bb2 <_dtoa_r+0x67a>
 8016c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c1c:	2a00      	cmp	r2, #0
 8016c1e:	f000 808b 	beq.w	8016d38 <_dtoa_r+0x800>
 8016c22:	9a06      	ldr	r2, [sp, #24]
 8016c24:	2a01      	cmp	r2, #1
 8016c26:	dc6e      	bgt.n	8016d06 <_dtoa_r+0x7ce>
 8016c28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016c2a:	2a00      	cmp	r2, #0
 8016c2c:	d067      	beq.n	8016cfe <_dtoa_r+0x7c6>
 8016c2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016c32:	9f07      	ldr	r7, [sp, #28]
 8016c34:	9d05      	ldr	r5, [sp, #20]
 8016c36:	9a05      	ldr	r2, [sp, #20]
 8016c38:	2101      	movs	r1, #1
 8016c3a:	441a      	add	r2, r3
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	9205      	str	r2, [sp, #20]
 8016c40:	4498      	add	r8, r3
 8016c42:	f000 fea5 	bl	8017990 <__i2b>
 8016c46:	4606      	mov	r6, r0
 8016c48:	2d00      	cmp	r5, #0
 8016c4a:	dd0c      	ble.n	8016c66 <_dtoa_r+0x72e>
 8016c4c:	f1b8 0f00 	cmp.w	r8, #0
 8016c50:	dd09      	ble.n	8016c66 <_dtoa_r+0x72e>
 8016c52:	4545      	cmp	r5, r8
 8016c54:	9a05      	ldr	r2, [sp, #20]
 8016c56:	462b      	mov	r3, r5
 8016c58:	bfa8      	it	ge
 8016c5a:	4643      	movge	r3, r8
 8016c5c:	1ad2      	subs	r2, r2, r3
 8016c5e:	9205      	str	r2, [sp, #20]
 8016c60:	1aed      	subs	r5, r5, r3
 8016c62:	eba8 0803 	sub.w	r8, r8, r3
 8016c66:	9b07      	ldr	r3, [sp, #28]
 8016c68:	b1eb      	cbz	r3, 8016ca6 <_dtoa_r+0x76e>
 8016c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d067      	beq.n	8016d40 <_dtoa_r+0x808>
 8016c70:	b18f      	cbz	r7, 8016c96 <_dtoa_r+0x75e>
 8016c72:	4631      	mov	r1, r6
 8016c74:	463a      	mov	r2, r7
 8016c76:	4620      	mov	r0, r4
 8016c78:	f000 ff2a 	bl	8017ad0 <__pow5mult>
 8016c7c:	9a04      	ldr	r2, [sp, #16]
 8016c7e:	4601      	mov	r1, r0
 8016c80:	4606      	mov	r6, r0
 8016c82:	4620      	mov	r0, r4
 8016c84:	f000 fe8d 	bl	80179a2 <__multiply>
 8016c88:	9904      	ldr	r1, [sp, #16]
 8016c8a:	9008      	str	r0, [sp, #32]
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	f000 fda1 	bl	80177d4 <_Bfree>
 8016c92:	9b08      	ldr	r3, [sp, #32]
 8016c94:	9304      	str	r3, [sp, #16]
 8016c96:	9b07      	ldr	r3, [sp, #28]
 8016c98:	1bda      	subs	r2, r3, r7
 8016c9a:	d004      	beq.n	8016ca6 <_dtoa_r+0x76e>
 8016c9c:	9904      	ldr	r1, [sp, #16]
 8016c9e:	4620      	mov	r0, r4
 8016ca0:	f000 ff16 	bl	8017ad0 <__pow5mult>
 8016ca4:	9004      	str	r0, [sp, #16]
 8016ca6:	2101      	movs	r1, #1
 8016ca8:	4620      	mov	r0, r4
 8016caa:	f000 fe71 	bl	8017990 <__i2b>
 8016cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016cb0:	4607      	mov	r7, r0
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	f000 81d0 	beq.w	8017058 <_dtoa_r+0xb20>
 8016cb8:	461a      	mov	r2, r3
 8016cba:	4601      	mov	r1, r0
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	f000 ff07 	bl	8017ad0 <__pow5mult>
 8016cc2:	9b06      	ldr	r3, [sp, #24]
 8016cc4:	2b01      	cmp	r3, #1
 8016cc6:	4607      	mov	r7, r0
 8016cc8:	dc40      	bgt.n	8016d4c <_dtoa_r+0x814>
 8016cca:	9b00      	ldr	r3, [sp, #0]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d139      	bne.n	8016d44 <_dtoa_r+0x80c>
 8016cd0:	9b01      	ldr	r3, [sp, #4]
 8016cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d136      	bne.n	8016d48 <_dtoa_r+0x810>
 8016cda:	9b01      	ldr	r3, [sp, #4]
 8016cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016ce0:	0d1b      	lsrs	r3, r3, #20
 8016ce2:	051b      	lsls	r3, r3, #20
 8016ce4:	b12b      	cbz	r3, 8016cf2 <_dtoa_r+0x7ba>
 8016ce6:	9b05      	ldr	r3, [sp, #20]
 8016ce8:	3301      	adds	r3, #1
 8016cea:	9305      	str	r3, [sp, #20]
 8016cec:	f108 0801 	add.w	r8, r8, #1
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	9307      	str	r3, [sp, #28]
 8016cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d12a      	bne.n	8016d50 <_dtoa_r+0x818>
 8016cfa:	2001      	movs	r0, #1
 8016cfc:	e030      	b.n	8016d60 <_dtoa_r+0x828>
 8016cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016d04:	e795      	b.n	8016c32 <_dtoa_r+0x6fa>
 8016d06:	9b07      	ldr	r3, [sp, #28]
 8016d08:	f109 37ff 	add.w	r7, r9, #4294967295
 8016d0c:	42bb      	cmp	r3, r7
 8016d0e:	bfbf      	itttt	lt
 8016d10:	9b07      	ldrlt	r3, [sp, #28]
 8016d12:	9707      	strlt	r7, [sp, #28]
 8016d14:	1afa      	sublt	r2, r7, r3
 8016d16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016d18:	bfbb      	ittet	lt
 8016d1a:	189b      	addlt	r3, r3, r2
 8016d1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016d1e:	1bdf      	subge	r7, r3, r7
 8016d20:	2700      	movlt	r7, #0
 8016d22:	f1b9 0f00 	cmp.w	r9, #0
 8016d26:	bfb5      	itete	lt
 8016d28:	9b05      	ldrlt	r3, [sp, #20]
 8016d2a:	9d05      	ldrge	r5, [sp, #20]
 8016d2c:	eba3 0509 	sublt.w	r5, r3, r9
 8016d30:	464b      	movge	r3, r9
 8016d32:	bfb8      	it	lt
 8016d34:	2300      	movlt	r3, #0
 8016d36:	e77e      	b.n	8016c36 <_dtoa_r+0x6fe>
 8016d38:	9f07      	ldr	r7, [sp, #28]
 8016d3a:	9d05      	ldr	r5, [sp, #20]
 8016d3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016d3e:	e783      	b.n	8016c48 <_dtoa_r+0x710>
 8016d40:	9a07      	ldr	r2, [sp, #28]
 8016d42:	e7ab      	b.n	8016c9c <_dtoa_r+0x764>
 8016d44:	2300      	movs	r3, #0
 8016d46:	e7d4      	b.n	8016cf2 <_dtoa_r+0x7ba>
 8016d48:	9b00      	ldr	r3, [sp, #0]
 8016d4a:	e7d2      	b.n	8016cf2 <_dtoa_r+0x7ba>
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	9307      	str	r3, [sp, #28]
 8016d50:	693b      	ldr	r3, [r7, #16]
 8016d52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016d56:	6918      	ldr	r0, [r3, #16]
 8016d58:	f000 fdcc 	bl	80178f4 <__hi0bits>
 8016d5c:	f1c0 0020 	rsb	r0, r0, #32
 8016d60:	4440      	add	r0, r8
 8016d62:	f010 001f 	ands.w	r0, r0, #31
 8016d66:	d047      	beq.n	8016df8 <_dtoa_r+0x8c0>
 8016d68:	f1c0 0320 	rsb	r3, r0, #32
 8016d6c:	2b04      	cmp	r3, #4
 8016d6e:	dd3b      	ble.n	8016de8 <_dtoa_r+0x8b0>
 8016d70:	9b05      	ldr	r3, [sp, #20]
 8016d72:	f1c0 001c 	rsb	r0, r0, #28
 8016d76:	4403      	add	r3, r0
 8016d78:	9305      	str	r3, [sp, #20]
 8016d7a:	4405      	add	r5, r0
 8016d7c:	4480      	add	r8, r0
 8016d7e:	9b05      	ldr	r3, [sp, #20]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	dd05      	ble.n	8016d90 <_dtoa_r+0x858>
 8016d84:	461a      	mov	r2, r3
 8016d86:	9904      	ldr	r1, [sp, #16]
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f000 feef 	bl	8017b6c <__lshift>
 8016d8e:	9004      	str	r0, [sp, #16]
 8016d90:	f1b8 0f00 	cmp.w	r8, #0
 8016d94:	dd05      	ble.n	8016da2 <_dtoa_r+0x86a>
 8016d96:	4639      	mov	r1, r7
 8016d98:	4642      	mov	r2, r8
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	f000 fee6 	bl	8017b6c <__lshift>
 8016da0:	4607      	mov	r7, r0
 8016da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016da4:	b353      	cbz	r3, 8016dfc <_dtoa_r+0x8c4>
 8016da6:	4639      	mov	r1, r7
 8016da8:	9804      	ldr	r0, [sp, #16]
 8016daa:	f000 ff33 	bl	8017c14 <__mcmp>
 8016dae:	2800      	cmp	r0, #0
 8016db0:	da24      	bge.n	8016dfc <_dtoa_r+0x8c4>
 8016db2:	2300      	movs	r3, #0
 8016db4:	220a      	movs	r2, #10
 8016db6:	9904      	ldr	r1, [sp, #16]
 8016db8:	4620      	mov	r0, r4
 8016dba:	f000 fd22 	bl	8017802 <__multadd>
 8016dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dc0:	9004      	str	r0, [sp, #16]
 8016dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	f000 814d 	beq.w	8017066 <_dtoa_r+0xb2e>
 8016dcc:	2300      	movs	r3, #0
 8016dce:	4631      	mov	r1, r6
 8016dd0:	220a      	movs	r2, #10
 8016dd2:	4620      	mov	r0, r4
 8016dd4:	f000 fd15 	bl	8017802 <__multadd>
 8016dd8:	9b02      	ldr	r3, [sp, #8]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	4606      	mov	r6, r0
 8016dde:	dc4f      	bgt.n	8016e80 <_dtoa_r+0x948>
 8016de0:	9b06      	ldr	r3, [sp, #24]
 8016de2:	2b02      	cmp	r3, #2
 8016de4:	dd4c      	ble.n	8016e80 <_dtoa_r+0x948>
 8016de6:	e011      	b.n	8016e0c <_dtoa_r+0x8d4>
 8016de8:	d0c9      	beq.n	8016d7e <_dtoa_r+0x846>
 8016dea:	9a05      	ldr	r2, [sp, #20]
 8016dec:	331c      	adds	r3, #28
 8016dee:	441a      	add	r2, r3
 8016df0:	9205      	str	r2, [sp, #20]
 8016df2:	441d      	add	r5, r3
 8016df4:	4498      	add	r8, r3
 8016df6:	e7c2      	b.n	8016d7e <_dtoa_r+0x846>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	e7f6      	b.n	8016dea <_dtoa_r+0x8b2>
 8016dfc:	f1b9 0f00 	cmp.w	r9, #0
 8016e00:	dc38      	bgt.n	8016e74 <_dtoa_r+0x93c>
 8016e02:	9b06      	ldr	r3, [sp, #24]
 8016e04:	2b02      	cmp	r3, #2
 8016e06:	dd35      	ble.n	8016e74 <_dtoa_r+0x93c>
 8016e08:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e0c:	9b02      	ldr	r3, [sp, #8]
 8016e0e:	b963      	cbnz	r3, 8016e2a <_dtoa_r+0x8f2>
 8016e10:	4639      	mov	r1, r7
 8016e12:	2205      	movs	r2, #5
 8016e14:	4620      	mov	r0, r4
 8016e16:	f000 fcf4 	bl	8017802 <__multadd>
 8016e1a:	4601      	mov	r1, r0
 8016e1c:	4607      	mov	r7, r0
 8016e1e:	9804      	ldr	r0, [sp, #16]
 8016e20:	f000 fef8 	bl	8017c14 <__mcmp>
 8016e24:	2800      	cmp	r0, #0
 8016e26:	f73f adcc 	bgt.w	80169c2 <_dtoa_r+0x48a>
 8016e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e2c:	465d      	mov	r5, fp
 8016e2e:	ea6f 0a03 	mvn.w	sl, r3
 8016e32:	f04f 0900 	mov.w	r9, #0
 8016e36:	4639      	mov	r1, r7
 8016e38:	4620      	mov	r0, r4
 8016e3a:	f000 fccb 	bl	80177d4 <_Bfree>
 8016e3e:	2e00      	cmp	r6, #0
 8016e40:	f43f aeb7 	beq.w	8016bb2 <_dtoa_r+0x67a>
 8016e44:	f1b9 0f00 	cmp.w	r9, #0
 8016e48:	d005      	beq.n	8016e56 <_dtoa_r+0x91e>
 8016e4a:	45b1      	cmp	r9, r6
 8016e4c:	d003      	beq.n	8016e56 <_dtoa_r+0x91e>
 8016e4e:	4649      	mov	r1, r9
 8016e50:	4620      	mov	r0, r4
 8016e52:	f000 fcbf 	bl	80177d4 <_Bfree>
 8016e56:	4631      	mov	r1, r6
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f000 fcbb 	bl	80177d4 <_Bfree>
 8016e5e:	e6a8      	b.n	8016bb2 <_dtoa_r+0x67a>
 8016e60:	2700      	movs	r7, #0
 8016e62:	463e      	mov	r6, r7
 8016e64:	e7e1      	b.n	8016e2a <_dtoa_r+0x8f2>
 8016e66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016e6a:	463e      	mov	r6, r7
 8016e6c:	e5a9      	b.n	80169c2 <_dtoa_r+0x48a>
 8016e6e:	bf00      	nop
 8016e70:	40240000 	.word	0x40240000
 8016e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e76:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	f000 80fa 	beq.w	8017074 <_dtoa_r+0xb3c>
 8016e80:	2d00      	cmp	r5, #0
 8016e82:	dd05      	ble.n	8016e90 <_dtoa_r+0x958>
 8016e84:	4631      	mov	r1, r6
 8016e86:	462a      	mov	r2, r5
 8016e88:	4620      	mov	r0, r4
 8016e8a:	f000 fe6f 	bl	8017b6c <__lshift>
 8016e8e:	4606      	mov	r6, r0
 8016e90:	9b07      	ldr	r3, [sp, #28]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d04c      	beq.n	8016f30 <_dtoa_r+0x9f8>
 8016e96:	6871      	ldr	r1, [r6, #4]
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f000 fc67 	bl	801776c <_Balloc>
 8016e9e:	6932      	ldr	r2, [r6, #16]
 8016ea0:	3202      	adds	r2, #2
 8016ea2:	4605      	mov	r5, r0
 8016ea4:	0092      	lsls	r2, r2, #2
 8016ea6:	f106 010c 	add.w	r1, r6, #12
 8016eaa:	300c      	adds	r0, #12
 8016eac:	f7fd fd08 	bl	80148c0 <memcpy>
 8016eb0:	2201      	movs	r2, #1
 8016eb2:	4629      	mov	r1, r5
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	f000 fe59 	bl	8017b6c <__lshift>
 8016eba:	9b00      	ldr	r3, [sp, #0]
 8016ebc:	f8cd b014 	str.w	fp, [sp, #20]
 8016ec0:	f003 0301 	and.w	r3, r3, #1
 8016ec4:	46b1      	mov	r9, r6
 8016ec6:	9307      	str	r3, [sp, #28]
 8016ec8:	4606      	mov	r6, r0
 8016eca:	4639      	mov	r1, r7
 8016ecc:	9804      	ldr	r0, [sp, #16]
 8016ece:	f7ff faa5 	bl	801641c <quorem>
 8016ed2:	4649      	mov	r1, r9
 8016ed4:	4605      	mov	r5, r0
 8016ed6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016eda:	9804      	ldr	r0, [sp, #16]
 8016edc:	f000 fe9a 	bl	8017c14 <__mcmp>
 8016ee0:	4632      	mov	r2, r6
 8016ee2:	9000      	str	r0, [sp, #0]
 8016ee4:	4639      	mov	r1, r7
 8016ee6:	4620      	mov	r0, r4
 8016ee8:	f000 feae 	bl	8017c48 <__mdiff>
 8016eec:	68c3      	ldr	r3, [r0, #12]
 8016eee:	4602      	mov	r2, r0
 8016ef0:	bb03      	cbnz	r3, 8016f34 <_dtoa_r+0x9fc>
 8016ef2:	4601      	mov	r1, r0
 8016ef4:	9008      	str	r0, [sp, #32]
 8016ef6:	9804      	ldr	r0, [sp, #16]
 8016ef8:	f000 fe8c 	bl	8017c14 <__mcmp>
 8016efc:	9a08      	ldr	r2, [sp, #32]
 8016efe:	4603      	mov	r3, r0
 8016f00:	4611      	mov	r1, r2
 8016f02:	4620      	mov	r0, r4
 8016f04:	9308      	str	r3, [sp, #32]
 8016f06:	f000 fc65 	bl	80177d4 <_Bfree>
 8016f0a:	9b08      	ldr	r3, [sp, #32]
 8016f0c:	b9a3      	cbnz	r3, 8016f38 <_dtoa_r+0xa00>
 8016f0e:	9a06      	ldr	r2, [sp, #24]
 8016f10:	b992      	cbnz	r2, 8016f38 <_dtoa_r+0xa00>
 8016f12:	9a07      	ldr	r2, [sp, #28]
 8016f14:	b982      	cbnz	r2, 8016f38 <_dtoa_r+0xa00>
 8016f16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016f1a:	d029      	beq.n	8016f70 <_dtoa_r+0xa38>
 8016f1c:	9b00      	ldr	r3, [sp, #0]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	dd01      	ble.n	8016f26 <_dtoa_r+0x9ee>
 8016f22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016f26:	9b05      	ldr	r3, [sp, #20]
 8016f28:	1c5d      	adds	r5, r3, #1
 8016f2a:	f883 8000 	strb.w	r8, [r3]
 8016f2e:	e782      	b.n	8016e36 <_dtoa_r+0x8fe>
 8016f30:	4630      	mov	r0, r6
 8016f32:	e7c2      	b.n	8016eba <_dtoa_r+0x982>
 8016f34:	2301      	movs	r3, #1
 8016f36:	e7e3      	b.n	8016f00 <_dtoa_r+0x9c8>
 8016f38:	9a00      	ldr	r2, [sp, #0]
 8016f3a:	2a00      	cmp	r2, #0
 8016f3c:	db04      	blt.n	8016f48 <_dtoa_r+0xa10>
 8016f3e:	d125      	bne.n	8016f8c <_dtoa_r+0xa54>
 8016f40:	9a06      	ldr	r2, [sp, #24]
 8016f42:	bb1a      	cbnz	r2, 8016f8c <_dtoa_r+0xa54>
 8016f44:	9a07      	ldr	r2, [sp, #28]
 8016f46:	bb0a      	cbnz	r2, 8016f8c <_dtoa_r+0xa54>
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	ddec      	ble.n	8016f26 <_dtoa_r+0x9ee>
 8016f4c:	2201      	movs	r2, #1
 8016f4e:	9904      	ldr	r1, [sp, #16]
 8016f50:	4620      	mov	r0, r4
 8016f52:	f000 fe0b 	bl	8017b6c <__lshift>
 8016f56:	4639      	mov	r1, r7
 8016f58:	9004      	str	r0, [sp, #16]
 8016f5a:	f000 fe5b 	bl	8017c14 <__mcmp>
 8016f5e:	2800      	cmp	r0, #0
 8016f60:	dc03      	bgt.n	8016f6a <_dtoa_r+0xa32>
 8016f62:	d1e0      	bne.n	8016f26 <_dtoa_r+0x9ee>
 8016f64:	f018 0f01 	tst.w	r8, #1
 8016f68:	d0dd      	beq.n	8016f26 <_dtoa_r+0x9ee>
 8016f6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016f6e:	d1d8      	bne.n	8016f22 <_dtoa_r+0x9ea>
 8016f70:	9b05      	ldr	r3, [sp, #20]
 8016f72:	9a05      	ldr	r2, [sp, #20]
 8016f74:	1c5d      	adds	r5, r3, #1
 8016f76:	2339      	movs	r3, #57	; 0x39
 8016f78:	7013      	strb	r3, [r2, #0]
 8016f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016f7e:	2b39      	cmp	r3, #57	; 0x39
 8016f80:	f105 32ff 	add.w	r2, r5, #4294967295
 8016f84:	d04f      	beq.n	8017026 <_dtoa_r+0xaee>
 8016f86:	3301      	adds	r3, #1
 8016f88:	7013      	strb	r3, [r2, #0]
 8016f8a:	e754      	b.n	8016e36 <_dtoa_r+0x8fe>
 8016f8c:	9a05      	ldr	r2, [sp, #20]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	f102 0501 	add.w	r5, r2, #1
 8016f94:	dd06      	ble.n	8016fa4 <_dtoa_r+0xa6c>
 8016f96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016f9a:	d0e9      	beq.n	8016f70 <_dtoa_r+0xa38>
 8016f9c:	f108 0801 	add.w	r8, r8, #1
 8016fa0:	9b05      	ldr	r3, [sp, #20]
 8016fa2:	e7c2      	b.n	8016f2a <_dtoa_r+0x9f2>
 8016fa4:	9a02      	ldr	r2, [sp, #8]
 8016fa6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016faa:	eba5 030b 	sub.w	r3, r5, fp
 8016fae:	4293      	cmp	r3, r2
 8016fb0:	d021      	beq.n	8016ff6 <_dtoa_r+0xabe>
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	220a      	movs	r2, #10
 8016fb6:	9904      	ldr	r1, [sp, #16]
 8016fb8:	4620      	mov	r0, r4
 8016fba:	f000 fc22 	bl	8017802 <__multadd>
 8016fbe:	45b1      	cmp	r9, r6
 8016fc0:	9004      	str	r0, [sp, #16]
 8016fc2:	f04f 0300 	mov.w	r3, #0
 8016fc6:	f04f 020a 	mov.w	r2, #10
 8016fca:	4649      	mov	r1, r9
 8016fcc:	4620      	mov	r0, r4
 8016fce:	d105      	bne.n	8016fdc <_dtoa_r+0xaa4>
 8016fd0:	f000 fc17 	bl	8017802 <__multadd>
 8016fd4:	4681      	mov	r9, r0
 8016fd6:	4606      	mov	r6, r0
 8016fd8:	9505      	str	r5, [sp, #20]
 8016fda:	e776      	b.n	8016eca <_dtoa_r+0x992>
 8016fdc:	f000 fc11 	bl	8017802 <__multadd>
 8016fe0:	4631      	mov	r1, r6
 8016fe2:	4681      	mov	r9, r0
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	220a      	movs	r2, #10
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f000 fc0a 	bl	8017802 <__multadd>
 8016fee:	4606      	mov	r6, r0
 8016ff0:	e7f2      	b.n	8016fd8 <_dtoa_r+0xaa0>
 8016ff2:	f04f 0900 	mov.w	r9, #0
 8016ff6:	2201      	movs	r2, #1
 8016ff8:	9904      	ldr	r1, [sp, #16]
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	f000 fdb6 	bl	8017b6c <__lshift>
 8017000:	4639      	mov	r1, r7
 8017002:	9004      	str	r0, [sp, #16]
 8017004:	f000 fe06 	bl	8017c14 <__mcmp>
 8017008:	2800      	cmp	r0, #0
 801700a:	dcb6      	bgt.n	8016f7a <_dtoa_r+0xa42>
 801700c:	d102      	bne.n	8017014 <_dtoa_r+0xadc>
 801700e:	f018 0f01 	tst.w	r8, #1
 8017012:	d1b2      	bne.n	8016f7a <_dtoa_r+0xa42>
 8017014:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017018:	2b30      	cmp	r3, #48	; 0x30
 801701a:	f105 32ff 	add.w	r2, r5, #4294967295
 801701e:	f47f af0a 	bne.w	8016e36 <_dtoa_r+0x8fe>
 8017022:	4615      	mov	r5, r2
 8017024:	e7f6      	b.n	8017014 <_dtoa_r+0xadc>
 8017026:	4593      	cmp	fp, r2
 8017028:	d105      	bne.n	8017036 <_dtoa_r+0xafe>
 801702a:	2331      	movs	r3, #49	; 0x31
 801702c:	f10a 0a01 	add.w	sl, sl, #1
 8017030:	f88b 3000 	strb.w	r3, [fp]
 8017034:	e6ff      	b.n	8016e36 <_dtoa_r+0x8fe>
 8017036:	4615      	mov	r5, r2
 8017038:	e79f      	b.n	8016f7a <_dtoa_r+0xa42>
 801703a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80170a0 <_dtoa_r+0xb68>
 801703e:	e007      	b.n	8017050 <_dtoa_r+0xb18>
 8017040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017042:	f8df b060 	ldr.w	fp, [pc, #96]	; 80170a4 <_dtoa_r+0xb6c>
 8017046:	b11b      	cbz	r3, 8017050 <_dtoa_r+0xb18>
 8017048:	f10b 0308 	add.w	r3, fp, #8
 801704c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801704e:	6013      	str	r3, [r2, #0]
 8017050:	4658      	mov	r0, fp
 8017052:	b017      	add	sp, #92	; 0x5c
 8017054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017058:	9b06      	ldr	r3, [sp, #24]
 801705a:	2b01      	cmp	r3, #1
 801705c:	f77f ae35 	ble.w	8016cca <_dtoa_r+0x792>
 8017060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017062:	9307      	str	r3, [sp, #28]
 8017064:	e649      	b.n	8016cfa <_dtoa_r+0x7c2>
 8017066:	9b02      	ldr	r3, [sp, #8]
 8017068:	2b00      	cmp	r3, #0
 801706a:	dc03      	bgt.n	8017074 <_dtoa_r+0xb3c>
 801706c:	9b06      	ldr	r3, [sp, #24]
 801706e:	2b02      	cmp	r3, #2
 8017070:	f73f aecc 	bgt.w	8016e0c <_dtoa_r+0x8d4>
 8017074:	465d      	mov	r5, fp
 8017076:	4639      	mov	r1, r7
 8017078:	9804      	ldr	r0, [sp, #16]
 801707a:	f7ff f9cf 	bl	801641c <quorem>
 801707e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017082:	f805 8b01 	strb.w	r8, [r5], #1
 8017086:	9a02      	ldr	r2, [sp, #8]
 8017088:	eba5 030b 	sub.w	r3, r5, fp
 801708c:	429a      	cmp	r2, r3
 801708e:	ddb0      	ble.n	8016ff2 <_dtoa_r+0xaba>
 8017090:	2300      	movs	r3, #0
 8017092:	220a      	movs	r2, #10
 8017094:	9904      	ldr	r1, [sp, #16]
 8017096:	4620      	mov	r0, r4
 8017098:	f000 fbb3 	bl	8017802 <__multadd>
 801709c:	9004      	str	r0, [sp, #16]
 801709e:	e7ea      	b.n	8017076 <_dtoa_r+0xb3e>
 80170a0:	080196eb 	.word	0x080196eb
 80170a4:	08019548 	.word	0x08019548

080170a8 <rshift>:
 80170a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170aa:	6906      	ldr	r6, [r0, #16]
 80170ac:	114b      	asrs	r3, r1, #5
 80170ae:	429e      	cmp	r6, r3
 80170b0:	f100 0414 	add.w	r4, r0, #20
 80170b4:	dd30      	ble.n	8017118 <rshift+0x70>
 80170b6:	f011 011f 	ands.w	r1, r1, #31
 80170ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80170be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80170c2:	d108      	bne.n	80170d6 <rshift+0x2e>
 80170c4:	4621      	mov	r1, r4
 80170c6:	42b2      	cmp	r2, r6
 80170c8:	460b      	mov	r3, r1
 80170ca:	d211      	bcs.n	80170f0 <rshift+0x48>
 80170cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80170d0:	f841 3b04 	str.w	r3, [r1], #4
 80170d4:	e7f7      	b.n	80170c6 <rshift+0x1e>
 80170d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80170da:	f1c1 0c20 	rsb	ip, r1, #32
 80170de:	40cd      	lsrs	r5, r1
 80170e0:	3204      	adds	r2, #4
 80170e2:	4623      	mov	r3, r4
 80170e4:	42b2      	cmp	r2, r6
 80170e6:	4617      	mov	r7, r2
 80170e8:	d30c      	bcc.n	8017104 <rshift+0x5c>
 80170ea:	601d      	str	r5, [r3, #0]
 80170ec:	b105      	cbz	r5, 80170f0 <rshift+0x48>
 80170ee:	3304      	adds	r3, #4
 80170f0:	1b1a      	subs	r2, r3, r4
 80170f2:	42a3      	cmp	r3, r4
 80170f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80170f8:	bf08      	it	eq
 80170fa:	2300      	moveq	r3, #0
 80170fc:	6102      	str	r2, [r0, #16]
 80170fe:	bf08      	it	eq
 8017100:	6143      	streq	r3, [r0, #20]
 8017102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017104:	683f      	ldr	r7, [r7, #0]
 8017106:	fa07 f70c 	lsl.w	r7, r7, ip
 801710a:	433d      	orrs	r5, r7
 801710c:	f843 5b04 	str.w	r5, [r3], #4
 8017110:	f852 5b04 	ldr.w	r5, [r2], #4
 8017114:	40cd      	lsrs	r5, r1
 8017116:	e7e5      	b.n	80170e4 <rshift+0x3c>
 8017118:	4623      	mov	r3, r4
 801711a:	e7e9      	b.n	80170f0 <rshift+0x48>

0801711c <__hexdig_fun>:
 801711c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017120:	2b09      	cmp	r3, #9
 8017122:	d802      	bhi.n	801712a <__hexdig_fun+0xe>
 8017124:	3820      	subs	r0, #32
 8017126:	b2c0      	uxtb	r0, r0
 8017128:	4770      	bx	lr
 801712a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801712e:	2b05      	cmp	r3, #5
 8017130:	d801      	bhi.n	8017136 <__hexdig_fun+0x1a>
 8017132:	3847      	subs	r0, #71	; 0x47
 8017134:	e7f7      	b.n	8017126 <__hexdig_fun+0xa>
 8017136:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801713a:	2b05      	cmp	r3, #5
 801713c:	d801      	bhi.n	8017142 <__hexdig_fun+0x26>
 801713e:	3827      	subs	r0, #39	; 0x27
 8017140:	e7f1      	b.n	8017126 <__hexdig_fun+0xa>
 8017142:	2000      	movs	r0, #0
 8017144:	4770      	bx	lr

08017146 <__gethex>:
 8017146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801714a:	b08b      	sub	sp, #44	; 0x2c
 801714c:	468a      	mov	sl, r1
 801714e:	9002      	str	r0, [sp, #8]
 8017150:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017152:	9306      	str	r3, [sp, #24]
 8017154:	4690      	mov	r8, r2
 8017156:	f000 fadf 	bl	8017718 <__localeconv_l>
 801715a:	6803      	ldr	r3, [r0, #0]
 801715c:	9303      	str	r3, [sp, #12]
 801715e:	4618      	mov	r0, r3
 8017160:	f7e9 f84e 	bl	8000200 <strlen>
 8017164:	9b03      	ldr	r3, [sp, #12]
 8017166:	9001      	str	r0, [sp, #4]
 8017168:	4403      	add	r3, r0
 801716a:	f04f 0b00 	mov.w	fp, #0
 801716e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017172:	9307      	str	r3, [sp, #28]
 8017174:	f8da 3000 	ldr.w	r3, [sl]
 8017178:	3302      	adds	r3, #2
 801717a:	461f      	mov	r7, r3
 801717c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017180:	2830      	cmp	r0, #48	; 0x30
 8017182:	d06c      	beq.n	801725e <__gethex+0x118>
 8017184:	f7ff ffca 	bl	801711c <__hexdig_fun>
 8017188:	4604      	mov	r4, r0
 801718a:	2800      	cmp	r0, #0
 801718c:	d16a      	bne.n	8017264 <__gethex+0x11e>
 801718e:	9a01      	ldr	r2, [sp, #4]
 8017190:	9903      	ldr	r1, [sp, #12]
 8017192:	4638      	mov	r0, r7
 8017194:	f001 fc36 	bl	8018a04 <strncmp>
 8017198:	2800      	cmp	r0, #0
 801719a:	d166      	bne.n	801726a <__gethex+0x124>
 801719c:	9b01      	ldr	r3, [sp, #4]
 801719e:	5cf8      	ldrb	r0, [r7, r3]
 80171a0:	18fe      	adds	r6, r7, r3
 80171a2:	f7ff ffbb 	bl	801711c <__hexdig_fun>
 80171a6:	2800      	cmp	r0, #0
 80171a8:	d062      	beq.n	8017270 <__gethex+0x12a>
 80171aa:	4633      	mov	r3, r6
 80171ac:	7818      	ldrb	r0, [r3, #0]
 80171ae:	2830      	cmp	r0, #48	; 0x30
 80171b0:	461f      	mov	r7, r3
 80171b2:	f103 0301 	add.w	r3, r3, #1
 80171b6:	d0f9      	beq.n	80171ac <__gethex+0x66>
 80171b8:	f7ff ffb0 	bl	801711c <__hexdig_fun>
 80171bc:	fab0 f580 	clz	r5, r0
 80171c0:	096d      	lsrs	r5, r5, #5
 80171c2:	4634      	mov	r4, r6
 80171c4:	f04f 0b01 	mov.w	fp, #1
 80171c8:	463a      	mov	r2, r7
 80171ca:	4616      	mov	r6, r2
 80171cc:	3201      	adds	r2, #1
 80171ce:	7830      	ldrb	r0, [r6, #0]
 80171d0:	f7ff ffa4 	bl	801711c <__hexdig_fun>
 80171d4:	2800      	cmp	r0, #0
 80171d6:	d1f8      	bne.n	80171ca <__gethex+0x84>
 80171d8:	9a01      	ldr	r2, [sp, #4]
 80171da:	9903      	ldr	r1, [sp, #12]
 80171dc:	4630      	mov	r0, r6
 80171de:	f001 fc11 	bl	8018a04 <strncmp>
 80171e2:	b950      	cbnz	r0, 80171fa <__gethex+0xb4>
 80171e4:	b954      	cbnz	r4, 80171fc <__gethex+0xb6>
 80171e6:	9b01      	ldr	r3, [sp, #4]
 80171e8:	18f4      	adds	r4, r6, r3
 80171ea:	4622      	mov	r2, r4
 80171ec:	4616      	mov	r6, r2
 80171ee:	3201      	adds	r2, #1
 80171f0:	7830      	ldrb	r0, [r6, #0]
 80171f2:	f7ff ff93 	bl	801711c <__hexdig_fun>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	d1f8      	bne.n	80171ec <__gethex+0xa6>
 80171fa:	b10c      	cbz	r4, 8017200 <__gethex+0xba>
 80171fc:	1ba4      	subs	r4, r4, r6
 80171fe:	00a4      	lsls	r4, r4, #2
 8017200:	7833      	ldrb	r3, [r6, #0]
 8017202:	2b50      	cmp	r3, #80	; 0x50
 8017204:	d001      	beq.n	801720a <__gethex+0xc4>
 8017206:	2b70      	cmp	r3, #112	; 0x70
 8017208:	d140      	bne.n	801728c <__gethex+0x146>
 801720a:	7873      	ldrb	r3, [r6, #1]
 801720c:	2b2b      	cmp	r3, #43	; 0x2b
 801720e:	d031      	beq.n	8017274 <__gethex+0x12e>
 8017210:	2b2d      	cmp	r3, #45	; 0x2d
 8017212:	d033      	beq.n	801727c <__gethex+0x136>
 8017214:	1c71      	adds	r1, r6, #1
 8017216:	f04f 0900 	mov.w	r9, #0
 801721a:	7808      	ldrb	r0, [r1, #0]
 801721c:	f7ff ff7e 	bl	801711c <__hexdig_fun>
 8017220:	1e43      	subs	r3, r0, #1
 8017222:	b2db      	uxtb	r3, r3
 8017224:	2b18      	cmp	r3, #24
 8017226:	d831      	bhi.n	801728c <__gethex+0x146>
 8017228:	f1a0 0210 	sub.w	r2, r0, #16
 801722c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017230:	f7ff ff74 	bl	801711c <__hexdig_fun>
 8017234:	1e43      	subs	r3, r0, #1
 8017236:	b2db      	uxtb	r3, r3
 8017238:	2b18      	cmp	r3, #24
 801723a:	d922      	bls.n	8017282 <__gethex+0x13c>
 801723c:	f1b9 0f00 	cmp.w	r9, #0
 8017240:	d000      	beq.n	8017244 <__gethex+0xfe>
 8017242:	4252      	negs	r2, r2
 8017244:	4414      	add	r4, r2
 8017246:	f8ca 1000 	str.w	r1, [sl]
 801724a:	b30d      	cbz	r5, 8017290 <__gethex+0x14a>
 801724c:	f1bb 0f00 	cmp.w	fp, #0
 8017250:	bf0c      	ite	eq
 8017252:	2706      	moveq	r7, #6
 8017254:	2700      	movne	r7, #0
 8017256:	4638      	mov	r0, r7
 8017258:	b00b      	add	sp, #44	; 0x2c
 801725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801725e:	f10b 0b01 	add.w	fp, fp, #1
 8017262:	e78a      	b.n	801717a <__gethex+0x34>
 8017264:	2500      	movs	r5, #0
 8017266:	462c      	mov	r4, r5
 8017268:	e7ae      	b.n	80171c8 <__gethex+0x82>
 801726a:	463e      	mov	r6, r7
 801726c:	2501      	movs	r5, #1
 801726e:	e7c7      	b.n	8017200 <__gethex+0xba>
 8017270:	4604      	mov	r4, r0
 8017272:	e7fb      	b.n	801726c <__gethex+0x126>
 8017274:	f04f 0900 	mov.w	r9, #0
 8017278:	1cb1      	adds	r1, r6, #2
 801727a:	e7ce      	b.n	801721a <__gethex+0xd4>
 801727c:	f04f 0901 	mov.w	r9, #1
 8017280:	e7fa      	b.n	8017278 <__gethex+0x132>
 8017282:	230a      	movs	r3, #10
 8017284:	fb03 0202 	mla	r2, r3, r2, r0
 8017288:	3a10      	subs	r2, #16
 801728a:	e7cf      	b.n	801722c <__gethex+0xe6>
 801728c:	4631      	mov	r1, r6
 801728e:	e7da      	b.n	8017246 <__gethex+0x100>
 8017290:	1bf3      	subs	r3, r6, r7
 8017292:	3b01      	subs	r3, #1
 8017294:	4629      	mov	r1, r5
 8017296:	2b07      	cmp	r3, #7
 8017298:	dc49      	bgt.n	801732e <__gethex+0x1e8>
 801729a:	9802      	ldr	r0, [sp, #8]
 801729c:	f000 fa66 	bl	801776c <_Balloc>
 80172a0:	9b01      	ldr	r3, [sp, #4]
 80172a2:	f100 0914 	add.w	r9, r0, #20
 80172a6:	f04f 0b00 	mov.w	fp, #0
 80172aa:	f1c3 0301 	rsb	r3, r3, #1
 80172ae:	4605      	mov	r5, r0
 80172b0:	f8cd 9010 	str.w	r9, [sp, #16]
 80172b4:	46da      	mov	sl, fp
 80172b6:	9308      	str	r3, [sp, #32]
 80172b8:	42b7      	cmp	r7, r6
 80172ba:	d33b      	bcc.n	8017334 <__gethex+0x1ee>
 80172bc:	9804      	ldr	r0, [sp, #16]
 80172be:	f840 ab04 	str.w	sl, [r0], #4
 80172c2:	eba0 0009 	sub.w	r0, r0, r9
 80172c6:	1080      	asrs	r0, r0, #2
 80172c8:	6128      	str	r0, [r5, #16]
 80172ca:	0147      	lsls	r7, r0, #5
 80172cc:	4650      	mov	r0, sl
 80172ce:	f000 fb11 	bl	80178f4 <__hi0bits>
 80172d2:	f8d8 6000 	ldr.w	r6, [r8]
 80172d6:	1a3f      	subs	r7, r7, r0
 80172d8:	42b7      	cmp	r7, r6
 80172da:	dd64      	ble.n	80173a6 <__gethex+0x260>
 80172dc:	1bbf      	subs	r7, r7, r6
 80172de:	4639      	mov	r1, r7
 80172e0:	4628      	mov	r0, r5
 80172e2:	f000 fe21 	bl	8017f28 <__any_on>
 80172e6:	4682      	mov	sl, r0
 80172e8:	b178      	cbz	r0, 801730a <__gethex+0x1c4>
 80172ea:	1e7b      	subs	r3, r7, #1
 80172ec:	1159      	asrs	r1, r3, #5
 80172ee:	f003 021f 	and.w	r2, r3, #31
 80172f2:	f04f 0a01 	mov.w	sl, #1
 80172f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80172fa:	fa0a f202 	lsl.w	r2, sl, r2
 80172fe:	420a      	tst	r2, r1
 8017300:	d003      	beq.n	801730a <__gethex+0x1c4>
 8017302:	4553      	cmp	r3, sl
 8017304:	dc46      	bgt.n	8017394 <__gethex+0x24e>
 8017306:	f04f 0a02 	mov.w	sl, #2
 801730a:	4639      	mov	r1, r7
 801730c:	4628      	mov	r0, r5
 801730e:	f7ff fecb 	bl	80170a8 <rshift>
 8017312:	443c      	add	r4, r7
 8017314:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017318:	42a3      	cmp	r3, r4
 801731a:	da52      	bge.n	80173c2 <__gethex+0x27c>
 801731c:	4629      	mov	r1, r5
 801731e:	9802      	ldr	r0, [sp, #8]
 8017320:	f000 fa58 	bl	80177d4 <_Bfree>
 8017324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017326:	2300      	movs	r3, #0
 8017328:	6013      	str	r3, [r2, #0]
 801732a:	27a3      	movs	r7, #163	; 0xa3
 801732c:	e793      	b.n	8017256 <__gethex+0x110>
 801732e:	3101      	adds	r1, #1
 8017330:	105b      	asrs	r3, r3, #1
 8017332:	e7b0      	b.n	8017296 <__gethex+0x150>
 8017334:	1e73      	subs	r3, r6, #1
 8017336:	9305      	str	r3, [sp, #20]
 8017338:	9a07      	ldr	r2, [sp, #28]
 801733a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801733e:	4293      	cmp	r3, r2
 8017340:	d018      	beq.n	8017374 <__gethex+0x22e>
 8017342:	f1bb 0f20 	cmp.w	fp, #32
 8017346:	d107      	bne.n	8017358 <__gethex+0x212>
 8017348:	9b04      	ldr	r3, [sp, #16]
 801734a:	f8c3 a000 	str.w	sl, [r3]
 801734e:	3304      	adds	r3, #4
 8017350:	f04f 0a00 	mov.w	sl, #0
 8017354:	9304      	str	r3, [sp, #16]
 8017356:	46d3      	mov	fp, sl
 8017358:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801735c:	f7ff fede 	bl	801711c <__hexdig_fun>
 8017360:	f000 000f 	and.w	r0, r0, #15
 8017364:	fa00 f00b 	lsl.w	r0, r0, fp
 8017368:	ea4a 0a00 	orr.w	sl, sl, r0
 801736c:	f10b 0b04 	add.w	fp, fp, #4
 8017370:	9b05      	ldr	r3, [sp, #20]
 8017372:	e00d      	b.n	8017390 <__gethex+0x24a>
 8017374:	9b05      	ldr	r3, [sp, #20]
 8017376:	9a08      	ldr	r2, [sp, #32]
 8017378:	4413      	add	r3, r2
 801737a:	42bb      	cmp	r3, r7
 801737c:	d3e1      	bcc.n	8017342 <__gethex+0x1fc>
 801737e:	4618      	mov	r0, r3
 8017380:	9a01      	ldr	r2, [sp, #4]
 8017382:	9903      	ldr	r1, [sp, #12]
 8017384:	9309      	str	r3, [sp, #36]	; 0x24
 8017386:	f001 fb3d 	bl	8018a04 <strncmp>
 801738a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801738c:	2800      	cmp	r0, #0
 801738e:	d1d8      	bne.n	8017342 <__gethex+0x1fc>
 8017390:	461e      	mov	r6, r3
 8017392:	e791      	b.n	80172b8 <__gethex+0x172>
 8017394:	1eb9      	subs	r1, r7, #2
 8017396:	4628      	mov	r0, r5
 8017398:	f000 fdc6 	bl	8017f28 <__any_on>
 801739c:	2800      	cmp	r0, #0
 801739e:	d0b2      	beq.n	8017306 <__gethex+0x1c0>
 80173a0:	f04f 0a03 	mov.w	sl, #3
 80173a4:	e7b1      	b.n	801730a <__gethex+0x1c4>
 80173a6:	da09      	bge.n	80173bc <__gethex+0x276>
 80173a8:	1bf7      	subs	r7, r6, r7
 80173aa:	4629      	mov	r1, r5
 80173ac:	463a      	mov	r2, r7
 80173ae:	9802      	ldr	r0, [sp, #8]
 80173b0:	f000 fbdc 	bl	8017b6c <__lshift>
 80173b4:	1be4      	subs	r4, r4, r7
 80173b6:	4605      	mov	r5, r0
 80173b8:	f100 0914 	add.w	r9, r0, #20
 80173bc:	f04f 0a00 	mov.w	sl, #0
 80173c0:	e7a8      	b.n	8017314 <__gethex+0x1ce>
 80173c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80173c6:	42a0      	cmp	r0, r4
 80173c8:	dd6a      	ble.n	80174a0 <__gethex+0x35a>
 80173ca:	1b04      	subs	r4, r0, r4
 80173cc:	42a6      	cmp	r6, r4
 80173ce:	dc2e      	bgt.n	801742e <__gethex+0x2e8>
 80173d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80173d4:	2b02      	cmp	r3, #2
 80173d6:	d022      	beq.n	801741e <__gethex+0x2d8>
 80173d8:	2b03      	cmp	r3, #3
 80173da:	d024      	beq.n	8017426 <__gethex+0x2e0>
 80173dc:	2b01      	cmp	r3, #1
 80173de:	d115      	bne.n	801740c <__gethex+0x2c6>
 80173e0:	42a6      	cmp	r6, r4
 80173e2:	d113      	bne.n	801740c <__gethex+0x2c6>
 80173e4:	2e01      	cmp	r6, #1
 80173e6:	dc0b      	bgt.n	8017400 <__gethex+0x2ba>
 80173e8:	9a06      	ldr	r2, [sp, #24]
 80173ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80173ee:	6013      	str	r3, [r2, #0]
 80173f0:	2301      	movs	r3, #1
 80173f2:	612b      	str	r3, [r5, #16]
 80173f4:	f8c9 3000 	str.w	r3, [r9]
 80173f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80173fa:	2762      	movs	r7, #98	; 0x62
 80173fc:	601d      	str	r5, [r3, #0]
 80173fe:	e72a      	b.n	8017256 <__gethex+0x110>
 8017400:	1e71      	subs	r1, r6, #1
 8017402:	4628      	mov	r0, r5
 8017404:	f000 fd90 	bl	8017f28 <__any_on>
 8017408:	2800      	cmp	r0, #0
 801740a:	d1ed      	bne.n	80173e8 <__gethex+0x2a2>
 801740c:	4629      	mov	r1, r5
 801740e:	9802      	ldr	r0, [sp, #8]
 8017410:	f000 f9e0 	bl	80177d4 <_Bfree>
 8017414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017416:	2300      	movs	r3, #0
 8017418:	6013      	str	r3, [r2, #0]
 801741a:	2750      	movs	r7, #80	; 0x50
 801741c:	e71b      	b.n	8017256 <__gethex+0x110>
 801741e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017420:	2b00      	cmp	r3, #0
 8017422:	d0e1      	beq.n	80173e8 <__gethex+0x2a2>
 8017424:	e7f2      	b.n	801740c <__gethex+0x2c6>
 8017426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017428:	2b00      	cmp	r3, #0
 801742a:	d1dd      	bne.n	80173e8 <__gethex+0x2a2>
 801742c:	e7ee      	b.n	801740c <__gethex+0x2c6>
 801742e:	1e67      	subs	r7, r4, #1
 8017430:	f1ba 0f00 	cmp.w	sl, #0
 8017434:	d131      	bne.n	801749a <__gethex+0x354>
 8017436:	b127      	cbz	r7, 8017442 <__gethex+0x2fc>
 8017438:	4639      	mov	r1, r7
 801743a:	4628      	mov	r0, r5
 801743c:	f000 fd74 	bl	8017f28 <__any_on>
 8017440:	4682      	mov	sl, r0
 8017442:	117a      	asrs	r2, r7, #5
 8017444:	2301      	movs	r3, #1
 8017446:	f007 071f 	and.w	r7, r7, #31
 801744a:	fa03 f707 	lsl.w	r7, r3, r7
 801744e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017452:	4621      	mov	r1, r4
 8017454:	421f      	tst	r7, r3
 8017456:	4628      	mov	r0, r5
 8017458:	bf18      	it	ne
 801745a:	f04a 0a02 	orrne.w	sl, sl, #2
 801745e:	1b36      	subs	r6, r6, r4
 8017460:	f7ff fe22 	bl	80170a8 <rshift>
 8017464:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017468:	2702      	movs	r7, #2
 801746a:	f1ba 0f00 	cmp.w	sl, #0
 801746e:	d048      	beq.n	8017502 <__gethex+0x3bc>
 8017470:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017474:	2b02      	cmp	r3, #2
 8017476:	d015      	beq.n	80174a4 <__gethex+0x35e>
 8017478:	2b03      	cmp	r3, #3
 801747a:	d017      	beq.n	80174ac <__gethex+0x366>
 801747c:	2b01      	cmp	r3, #1
 801747e:	d109      	bne.n	8017494 <__gethex+0x34e>
 8017480:	f01a 0f02 	tst.w	sl, #2
 8017484:	d006      	beq.n	8017494 <__gethex+0x34e>
 8017486:	f8d9 3000 	ldr.w	r3, [r9]
 801748a:	ea4a 0a03 	orr.w	sl, sl, r3
 801748e:	f01a 0f01 	tst.w	sl, #1
 8017492:	d10e      	bne.n	80174b2 <__gethex+0x36c>
 8017494:	f047 0710 	orr.w	r7, r7, #16
 8017498:	e033      	b.n	8017502 <__gethex+0x3bc>
 801749a:	f04f 0a01 	mov.w	sl, #1
 801749e:	e7d0      	b.n	8017442 <__gethex+0x2fc>
 80174a0:	2701      	movs	r7, #1
 80174a2:	e7e2      	b.n	801746a <__gethex+0x324>
 80174a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174a6:	f1c3 0301 	rsb	r3, r3, #1
 80174aa:	9315      	str	r3, [sp, #84]	; 0x54
 80174ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d0f0      	beq.n	8017494 <__gethex+0x34e>
 80174b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80174b6:	f105 0314 	add.w	r3, r5, #20
 80174ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80174be:	eb03 010a 	add.w	r1, r3, sl
 80174c2:	f04f 0c00 	mov.w	ip, #0
 80174c6:	4618      	mov	r0, r3
 80174c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80174cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80174d0:	d01c      	beq.n	801750c <__gethex+0x3c6>
 80174d2:	3201      	adds	r2, #1
 80174d4:	6002      	str	r2, [r0, #0]
 80174d6:	2f02      	cmp	r7, #2
 80174d8:	f105 0314 	add.w	r3, r5, #20
 80174dc:	d138      	bne.n	8017550 <__gethex+0x40a>
 80174de:	f8d8 2000 	ldr.w	r2, [r8]
 80174e2:	3a01      	subs	r2, #1
 80174e4:	42b2      	cmp	r2, r6
 80174e6:	d10a      	bne.n	80174fe <__gethex+0x3b8>
 80174e8:	1171      	asrs	r1, r6, #5
 80174ea:	2201      	movs	r2, #1
 80174ec:	f006 061f 	and.w	r6, r6, #31
 80174f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80174f4:	fa02 f606 	lsl.w	r6, r2, r6
 80174f8:	421e      	tst	r6, r3
 80174fa:	bf18      	it	ne
 80174fc:	4617      	movne	r7, r2
 80174fe:	f047 0720 	orr.w	r7, r7, #32
 8017502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017504:	601d      	str	r5, [r3, #0]
 8017506:	9b06      	ldr	r3, [sp, #24]
 8017508:	601c      	str	r4, [r3, #0]
 801750a:	e6a4      	b.n	8017256 <__gethex+0x110>
 801750c:	4299      	cmp	r1, r3
 801750e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017512:	d8d8      	bhi.n	80174c6 <__gethex+0x380>
 8017514:	68ab      	ldr	r3, [r5, #8]
 8017516:	4599      	cmp	r9, r3
 8017518:	db12      	blt.n	8017540 <__gethex+0x3fa>
 801751a:	6869      	ldr	r1, [r5, #4]
 801751c:	9802      	ldr	r0, [sp, #8]
 801751e:	3101      	adds	r1, #1
 8017520:	f000 f924 	bl	801776c <_Balloc>
 8017524:	692a      	ldr	r2, [r5, #16]
 8017526:	3202      	adds	r2, #2
 8017528:	f105 010c 	add.w	r1, r5, #12
 801752c:	4683      	mov	fp, r0
 801752e:	0092      	lsls	r2, r2, #2
 8017530:	300c      	adds	r0, #12
 8017532:	f7fd f9c5 	bl	80148c0 <memcpy>
 8017536:	4629      	mov	r1, r5
 8017538:	9802      	ldr	r0, [sp, #8]
 801753a:	f000 f94b 	bl	80177d4 <_Bfree>
 801753e:	465d      	mov	r5, fp
 8017540:	692b      	ldr	r3, [r5, #16]
 8017542:	1c5a      	adds	r2, r3, #1
 8017544:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017548:	612a      	str	r2, [r5, #16]
 801754a:	2201      	movs	r2, #1
 801754c:	615a      	str	r2, [r3, #20]
 801754e:	e7c2      	b.n	80174d6 <__gethex+0x390>
 8017550:	692a      	ldr	r2, [r5, #16]
 8017552:	454a      	cmp	r2, r9
 8017554:	dd0b      	ble.n	801756e <__gethex+0x428>
 8017556:	2101      	movs	r1, #1
 8017558:	4628      	mov	r0, r5
 801755a:	f7ff fda5 	bl	80170a8 <rshift>
 801755e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017562:	3401      	adds	r4, #1
 8017564:	42a3      	cmp	r3, r4
 8017566:	f6ff aed9 	blt.w	801731c <__gethex+0x1d6>
 801756a:	2701      	movs	r7, #1
 801756c:	e7c7      	b.n	80174fe <__gethex+0x3b8>
 801756e:	f016 061f 	ands.w	r6, r6, #31
 8017572:	d0fa      	beq.n	801756a <__gethex+0x424>
 8017574:	449a      	add	sl, r3
 8017576:	f1c6 0620 	rsb	r6, r6, #32
 801757a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801757e:	f000 f9b9 	bl	80178f4 <__hi0bits>
 8017582:	42b0      	cmp	r0, r6
 8017584:	dbe7      	blt.n	8017556 <__gethex+0x410>
 8017586:	e7f0      	b.n	801756a <__gethex+0x424>

08017588 <L_shift>:
 8017588:	f1c2 0208 	rsb	r2, r2, #8
 801758c:	0092      	lsls	r2, r2, #2
 801758e:	b570      	push	{r4, r5, r6, lr}
 8017590:	f1c2 0620 	rsb	r6, r2, #32
 8017594:	6843      	ldr	r3, [r0, #4]
 8017596:	6804      	ldr	r4, [r0, #0]
 8017598:	fa03 f506 	lsl.w	r5, r3, r6
 801759c:	432c      	orrs	r4, r5
 801759e:	40d3      	lsrs	r3, r2
 80175a0:	6004      	str	r4, [r0, #0]
 80175a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80175a6:	4288      	cmp	r0, r1
 80175a8:	d3f4      	bcc.n	8017594 <L_shift+0xc>
 80175aa:	bd70      	pop	{r4, r5, r6, pc}

080175ac <__match>:
 80175ac:	b530      	push	{r4, r5, lr}
 80175ae:	6803      	ldr	r3, [r0, #0]
 80175b0:	3301      	adds	r3, #1
 80175b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80175b6:	b914      	cbnz	r4, 80175be <__match+0x12>
 80175b8:	6003      	str	r3, [r0, #0]
 80175ba:	2001      	movs	r0, #1
 80175bc:	bd30      	pop	{r4, r5, pc}
 80175be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80175c6:	2d19      	cmp	r5, #25
 80175c8:	bf98      	it	ls
 80175ca:	3220      	addls	r2, #32
 80175cc:	42a2      	cmp	r2, r4
 80175ce:	d0f0      	beq.n	80175b2 <__match+0x6>
 80175d0:	2000      	movs	r0, #0
 80175d2:	e7f3      	b.n	80175bc <__match+0x10>

080175d4 <__hexnan>:
 80175d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175d8:	680b      	ldr	r3, [r1, #0]
 80175da:	6801      	ldr	r1, [r0, #0]
 80175dc:	115f      	asrs	r7, r3, #5
 80175de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80175e2:	f013 031f 	ands.w	r3, r3, #31
 80175e6:	b087      	sub	sp, #28
 80175e8:	bf18      	it	ne
 80175ea:	3704      	addne	r7, #4
 80175ec:	2500      	movs	r5, #0
 80175ee:	1f3e      	subs	r6, r7, #4
 80175f0:	4682      	mov	sl, r0
 80175f2:	4690      	mov	r8, r2
 80175f4:	9301      	str	r3, [sp, #4]
 80175f6:	f847 5c04 	str.w	r5, [r7, #-4]
 80175fa:	46b1      	mov	r9, r6
 80175fc:	4634      	mov	r4, r6
 80175fe:	9502      	str	r5, [sp, #8]
 8017600:	46ab      	mov	fp, r5
 8017602:	784a      	ldrb	r2, [r1, #1]
 8017604:	1c4b      	adds	r3, r1, #1
 8017606:	9303      	str	r3, [sp, #12]
 8017608:	b342      	cbz	r2, 801765c <__hexnan+0x88>
 801760a:	4610      	mov	r0, r2
 801760c:	9105      	str	r1, [sp, #20]
 801760e:	9204      	str	r2, [sp, #16]
 8017610:	f7ff fd84 	bl	801711c <__hexdig_fun>
 8017614:	2800      	cmp	r0, #0
 8017616:	d143      	bne.n	80176a0 <__hexnan+0xcc>
 8017618:	9a04      	ldr	r2, [sp, #16]
 801761a:	9905      	ldr	r1, [sp, #20]
 801761c:	2a20      	cmp	r2, #32
 801761e:	d818      	bhi.n	8017652 <__hexnan+0x7e>
 8017620:	9b02      	ldr	r3, [sp, #8]
 8017622:	459b      	cmp	fp, r3
 8017624:	dd13      	ble.n	801764e <__hexnan+0x7a>
 8017626:	454c      	cmp	r4, r9
 8017628:	d206      	bcs.n	8017638 <__hexnan+0x64>
 801762a:	2d07      	cmp	r5, #7
 801762c:	dc04      	bgt.n	8017638 <__hexnan+0x64>
 801762e:	462a      	mov	r2, r5
 8017630:	4649      	mov	r1, r9
 8017632:	4620      	mov	r0, r4
 8017634:	f7ff ffa8 	bl	8017588 <L_shift>
 8017638:	4544      	cmp	r4, r8
 801763a:	d944      	bls.n	80176c6 <__hexnan+0xf2>
 801763c:	2300      	movs	r3, #0
 801763e:	f1a4 0904 	sub.w	r9, r4, #4
 8017642:	f844 3c04 	str.w	r3, [r4, #-4]
 8017646:	f8cd b008 	str.w	fp, [sp, #8]
 801764a:	464c      	mov	r4, r9
 801764c:	461d      	mov	r5, r3
 801764e:	9903      	ldr	r1, [sp, #12]
 8017650:	e7d7      	b.n	8017602 <__hexnan+0x2e>
 8017652:	2a29      	cmp	r2, #41	; 0x29
 8017654:	d14a      	bne.n	80176ec <__hexnan+0x118>
 8017656:	3102      	adds	r1, #2
 8017658:	f8ca 1000 	str.w	r1, [sl]
 801765c:	f1bb 0f00 	cmp.w	fp, #0
 8017660:	d044      	beq.n	80176ec <__hexnan+0x118>
 8017662:	454c      	cmp	r4, r9
 8017664:	d206      	bcs.n	8017674 <__hexnan+0xa0>
 8017666:	2d07      	cmp	r5, #7
 8017668:	dc04      	bgt.n	8017674 <__hexnan+0xa0>
 801766a:	462a      	mov	r2, r5
 801766c:	4649      	mov	r1, r9
 801766e:	4620      	mov	r0, r4
 8017670:	f7ff ff8a 	bl	8017588 <L_shift>
 8017674:	4544      	cmp	r4, r8
 8017676:	d928      	bls.n	80176ca <__hexnan+0xf6>
 8017678:	4643      	mov	r3, r8
 801767a:	f854 2b04 	ldr.w	r2, [r4], #4
 801767e:	f843 2b04 	str.w	r2, [r3], #4
 8017682:	42a6      	cmp	r6, r4
 8017684:	d2f9      	bcs.n	801767a <__hexnan+0xa6>
 8017686:	2200      	movs	r2, #0
 8017688:	f843 2b04 	str.w	r2, [r3], #4
 801768c:	429e      	cmp	r6, r3
 801768e:	d2fb      	bcs.n	8017688 <__hexnan+0xb4>
 8017690:	6833      	ldr	r3, [r6, #0]
 8017692:	b91b      	cbnz	r3, 801769c <__hexnan+0xc8>
 8017694:	4546      	cmp	r6, r8
 8017696:	d127      	bne.n	80176e8 <__hexnan+0x114>
 8017698:	2301      	movs	r3, #1
 801769a:	6033      	str	r3, [r6, #0]
 801769c:	2005      	movs	r0, #5
 801769e:	e026      	b.n	80176ee <__hexnan+0x11a>
 80176a0:	3501      	adds	r5, #1
 80176a2:	2d08      	cmp	r5, #8
 80176a4:	f10b 0b01 	add.w	fp, fp, #1
 80176a8:	dd06      	ble.n	80176b8 <__hexnan+0xe4>
 80176aa:	4544      	cmp	r4, r8
 80176ac:	d9cf      	bls.n	801764e <__hexnan+0x7a>
 80176ae:	2300      	movs	r3, #0
 80176b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80176b4:	2501      	movs	r5, #1
 80176b6:	3c04      	subs	r4, #4
 80176b8:	6822      	ldr	r2, [r4, #0]
 80176ba:	f000 000f 	and.w	r0, r0, #15
 80176be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80176c2:	6020      	str	r0, [r4, #0]
 80176c4:	e7c3      	b.n	801764e <__hexnan+0x7a>
 80176c6:	2508      	movs	r5, #8
 80176c8:	e7c1      	b.n	801764e <__hexnan+0x7a>
 80176ca:	9b01      	ldr	r3, [sp, #4]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d0df      	beq.n	8017690 <__hexnan+0xbc>
 80176d0:	f04f 32ff 	mov.w	r2, #4294967295
 80176d4:	f1c3 0320 	rsb	r3, r3, #32
 80176d8:	fa22 f303 	lsr.w	r3, r2, r3
 80176dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80176e0:	401a      	ands	r2, r3
 80176e2:	f847 2c04 	str.w	r2, [r7, #-4]
 80176e6:	e7d3      	b.n	8017690 <__hexnan+0xbc>
 80176e8:	3e04      	subs	r6, #4
 80176ea:	e7d1      	b.n	8017690 <__hexnan+0xbc>
 80176ec:	2004      	movs	r0, #4
 80176ee:	b007      	add	sp, #28
 80176f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080176f4 <__locale_ctype_ptr_l>:
 80176f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80176f8:	4770      	bx	lr
	...

080176fc <__locale_ctype_ptr>:
 80176fc:	4b04      	ldr	r3, [pc, #16]	; (8017710 <__locale_ctype_ptr+0x14>)
 80176fe:	4a05      	ldr	r2, [pc, #20]	; (8017714 <__locale_ctype_ptr+0x18>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	6a1b      	ldr	r3, [r3, #32]
 8017704:	2b00      	cmp	r3, #0
 8017706:	bf08      	it	eq
 8017708:	4613      	moveq	r3, r2
 801770a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801770e:	4770      	bx	lr
 8017710:	2000000c 	.word	0x2000000c
 8017714:	20000070 	.word	0x20000070

08017718 <__localeconv_l>:
 8017718:	30f0      	adds	r0, #240	; 0xf0
 801771a:	4770      	bx	lr

0801771c <_localeconv_r>:
 801771c:	4b04      	ldr	r3, [pc, #16]	; (8017730 <_localeconv_r+0x14>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	6a18      	ldr	r0, [r3, #32]
 8017722:	4b04      	ldr	r3, [pc, #16]	; (8017734 <_localeconv_r+0x18>)
 8017724:	2800      	cmp	r0, #0
 8017726:	bf08      	it	eq
 8017728:	4618      	moveq	r0, r3
 801772a:	30f0      	adds	r0, #240	; 0xf0
 801772c:	4770      	bx	lr
 801772e:	bf00      	nop
 8017730:	2000000c 	.word	0x2000000c
 8017734:	20000070 	.word	0x20000070

08017738 <malloc>:
 8017738:	4b02      	ldr	r3, [pc, #8]	; (8017744 <malloc+0xc>)
 801773a:	4601      	mov	r1, r0
 801773c:	6818      	ldr	r0, [r3, #0]
 801773e:	f000 bc71 	b.w	8018024 <_malloc_r>
 8017742:	bf00      	nop
 8017744:	2000000c 	.word	0x2000000c

08017748 <__ascii_mbtowc>:
 8017748:	b082      	sub	sp, #8
 801774a:	b901      	cbnz	r1, 801774e <__ascii_mbtowc+0x6>
 801774c:	a901      	add	r1, sp, #4
 801774e:	b142      	cbz	r2, 8017762 <__ascii_mbtowc+0x1a>
 8017750:	b14b      	cbz	r3, 8017766 <__ascii_mbtowc+0x1e>
 8017752:	7813      	ldrb	r3, [r2, #0]
 8017754:	600b      	str	r3, [r1, #0]
 8017756:	7812      	ldrb	r2, [r2, #0]
 8017758:	1c10      	adds	r0, r2, #0
 801775a:	bf18      	it	ne
 801775c:	2001      	movne	r0, #1
 801775e:	b002      	add	sp, #8
 8017760:	4770      	bx	lr
 8017762:	4610      	mov	r0, r2
 8017764:	e7fb      	b.n	801775e <__ascii_mbtowc+0x16>
 8017766:	f06f 0001 	mvn.w	r0, #1
 801776a:	e7f8      	b.n	801775e <__ascii_mbtowc+0x16>

0801776c <_Balloc>:
 801776c:	b570      	push	{r4, r5, r6, lr}
 801776e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017770:	4604      	mov	r4, r0
 8017772:	460e      	mov	r6, r1
 8017774:	b93d      	cbnz	r5, 8017786 <_Balloc+0x1a>
 8017776:	2010      	movs	r0, #16
 8017778:	f7ff ffde 	bl	8017738 <malloc>
 801777c:	6260      	str	r0, [r4, #36]	; 0x24
 801777e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017782:	6005      	str	r5, [r0, #0]
 8017784:	60c5      	str	r5, [r0, #12]
 8017786:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017788:	68eb      	ldr	r3, [r5, #12]
 801778a:	b183      	cbz	r3, 80177ae <_Balloc+0x42>
 801778c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801778e:	68db      	ldr	r3, [r3, #12]
 8017790:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017794:	b9b8      	cbnz	r0, 80177c6 <_Balloc+0x5a>
 8017796:	2101      	movs	r1, #1
 8017798:	fa01 f506 	lsl.w	r5, r1, r6
 801779c:	1d6a      	adds	r2, r5, #5
 801779e:	0092      	lsls	r2, r2, #2
 80177a0:	4620      	mov	r0, r4
 80177a2:	f000 fbe2 	bl	8017f6a <_calloc_r>
 80177a6:	b160      	cbz	r0, 80177c2 <_Balloc+0x56>
 80177a8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80177ac:	e00e      	b.n	80177cc <_Balloc+0x60>
 80177ae:	2221      	movs	r2, #33	; 0x21
 80177b0:	2104      	movs	r1, #4
 80177b2:	4620      	mov	r0, r4
 80177b4:	f000 fbd9 	bl	8017f6a <_calloc_r>
 80177b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177ba:	60e8      	str	r0, [r5, #12]
 80177bc:	68db      	ldr	r3, [r3, #12]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d1e4      	bne.n	801778c <_Balloc+0x20>
 80177c2:	2000      	movs	r0, #0
 80177c4:	bd70      	pop	{r4, r5, r6, pc}
 80177c6:	6802      	ldr	r2, [r0, #0]
 80177c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80177cc:	2300      	movs	r3, #0
 80177ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80177d2:	e7f7      	b.n	80177c4 <_Balloc+0x58>

080177d4 <_Bfree>:
 80177d4:	b570      	push	{r4, r5, r6, lr}
 80177d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80177d8:	4606      	mov	r6, r0
 80177da:	460d      	mov	r5, r1
 80177dc:	b93c      	cbnz	r4, 80177ee <_Bfree+0x1a>
 80177de:	2010      	movs	r0, #16
 80177e0:	f7ff ffaa 	bl	8017738 <malloc>
 80177e4:	6270      	str	r0, [r6, #36]	; 0x24
 80177e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80177ea:	6004      	str	r4, [r0, #0]
 80177ec:	60c4      	str	r4, [r0, #12]
 80177ee:	b13d      	cbz	r5, 8017800 <_Bfree+0x2c>
 80177f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80177f2:	686a      	ldr	r2, [r5, #4]
 80177f4:	68db      	ldr	r3, [r3, #12]
 80177f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80177fa:	6029      	str	r1, [r5, #0]
 80177fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017800:	bd70      	pop	{r4, r5, r6, pc}

08017802 <__multadd>:
 8017802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017806:	690d      	ldr	r5, [r1, #16]
 8017808:	461f      	mov	r7, r3
 801780a:	4606      	mov	r6, r0
 801780c:	460c      	mov	r4, r1
 801780e:	f101 0c14 	add.w	ip, r1, #20
 8017812:	2300      	movs	r3, #0
 8017814:	f8dc 0000 	ldr.w	r0, [ip]
 8017818:	b281      	uxth	r1, r0
 801781a:	fb02 7101 	mla	r1, r2, r1, r7
 801781e:	0c0f      	lsrs	r7, r1, #16
 8017820:	0c00      	lsrs	r0, r0, #16
 8017822:	fb02 7000 	mla	r0, r2, r0, r7
 8017826:	b289      	uxth	r1, r1
 8017828:	3301      	adds	r3, #1
 801782a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801782e:	429d      	cmp	r5, r3
 8017830:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017834:	f84c 1b04 	str.w	r1, [ip], #4
 8017838:	dcec      	bgt.n	8017814 <__multadd+0x12>
 801783a:	b1d7      	cbz	r7, 8017872 <__multadd+0x70>
 801783c:	68a3      	ldr	r3, [r4, #8]
 801783e:	42ab      	cmp	r3, r5
 8017840:	dc12      	bgt.n	8017868 <__multadd+0x66>
 8017842:	6861      	ldr	r1, [r4, #4]
 8017844:	4630      	mov	r0, r6
 8017846:	3101      	adds	r1, #1
 8017848:	f7ff ff90 	bl	801776c <_Balloc>
 801784c:	6922      	ldr	r2, [r4, #16]
 801784e:	3202      	adds	r2, #2
 8017850:	f104 010c 	add.w	r1, r4, #12
 8017854:	4680      	mov	r8, r0
 8017856:	0092      	lsls	r2, r2, #2
 8017858:	300c      	adds	r0, #12
 801785a:	f7fd f831 	bl	80148c0 <memcpy>
 801785e:	4621      	mov	r1, r4
 8017860:	4630      	mov	r0, r6
 8017862:	f7ff ffb7 	bl	80177d4 <_Bfree>
 8017866:	4644      	mov	r4, r8
 8017868:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801786c:	3501      	adds	r5, #1
 801786e:	615f      	str	r7, [r3, #20]
 8017870:	6125      	str	r5, [r4, #16]
 8017872:	4620      	mov	r0, r4
 8017874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017878 <__s2b>:
 8017878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801787c:	460c      	mov	r4, r1
 801787e:	4615      	mov	r5, r2
 8017880:	461f      	mov	r7, r3
 8017882:	2209      	movs	r2, #9
 8017884:	3308      	adds	r3, #8
 8017886:	4606      	mov	r6, r0
 8017888:	fb93 f3f2 	sdiv	r3, r3, r2
 801788c:	2100      	movs	r1, #0
 801788e:	2201      	movs	r2, #1
 8017890:	429a      	cmp	r2, r3
 8017892:	db20      	blt.n	80178d6 <__s2b+0x5e>
 8017894:	4630      	mov	r0, r6
 8017896:	f7ff ff69 	bl	801776c <_Balloc>
 801789a:	9b08      	ldr	r3, [sp, #32]
 801789c:	6143      	str	r3, [r0, #20]
 801789e:	2d09      	cmp	r5, #9
 80178a0:	f04f 0301 	mov.w	r3, #1
 80178a4:	6103      	str	r3, [r0, #16]
 80178a6:	dd19      	ble.n	80178dc <__s2b+0x64>
 80178a8:	f104 0809 	add.w	r8, r4, #9
 80178ac:	46c1      	mov	r9, r8
 80178ae:	442c      	add	r4, r5
 80178b0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80178b4:	4601      	mov	r1, r0
 80178b6:	3b30      	subs	r3, #48	; 0x30
 80178b8:	220a      	movs	r2, #10
 80178ba:	4630      	mov	r0, r6
 80178bc:	f7ff ffa1 	bl	8017802 <__multadd>
 80178c0:	45a1      	cmp	r9, r4
 80178c2:	d1f5      	bne.n	80178b0 <__s2b+0x38>
 80178c4:	eb08 0405 	add.w	r4, r8, r5
 80178c8:	3c08      	subs	r4, #8
 80178ca:	1b2d      	subs	r5, r5, r4
 80178cc:	1963      	adds	r3, r4, r5
 80178ce:	42bb      	cmp	r3, r7
 80178d0:	db07      	blt.n	80178e2 <__s2b+0x6a>
 80178d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178d6:	0052      	lsls	r2, r2, #1
 80178d8:	3101      	adds	r1, #1
 80178da:	e7d9      	b.n	8017890 <__s2b+0x18>
 80178dc:	340a      	adds	r4, #10
 80178de:	2509      	movs	r5, #9
 80178e0:	e7f3      	b.n	80178ca <__s2b+0x52>
 80178e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80178e6:	4601      	mov	r1, r0
 80178e8:	3b30      	subs	r3, #48	; 0x30
 80178ea:	220a      	movs	r2, #10
 80178ec:	4630      	mov	r0, r6
 80178ee:	f7ff ff88 	bl	8017802 <__multadd>
 80178f2:	e7eb      	b.n	80178cc <__s2b+0x54>

080178f4 <__hi0bits>:
 80178f4:	0c02      	lsrs	r2, r0, #16
 80178f6:	0412      	lsls	r2, r2, #16
 80178f8:	4603      	mov	r3, r0
 80178fa:	b9b2      	cbnz	r2, 801792a <__hi0bits+0x36>
 80178fc:	0403      	lsls	r3, r0, #16
 80178fe:	2010      	movs	r0, #16
 8017900:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017904:	bf04      	itt	eq
 8017906:	021b      	lsleq	r3, r3, #8
 8017908:	3008      	addeq	r0, #8
 801790a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801790e:	bf04      	itt	eq
 8017910:	011b      	lsleq	r3, r3, #4
 8017912:	3004      	addeq	r0, #4
 8017914:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017918:	bf04      	itt	eq
 801791a:	009b      	lsleq	r3, r3, #2
 801791c:	3002      	addeq	r0, #2
 801791e:	2b00      	cmp	r3, #0
 8017920:	db06      	blt.n	8017930 <__hi0bits+0x3c>
 8017922:	005b      	lsls	r3, r3, #1
 8017924:	d503      	bpl.n	801792e <__hi0bits+0x3a>
 8017926:	3001      	adds	r0, #1
 8017928:	4770      	bx	lr
 801792a:	2000      	movs	r0, #0
 801792c:	e7e8      	b.n	8017900 <__hi0bits+0xc>
 801792e:	2020      	movs	r0, #32
 8017930:	4770      	bx	lr

08017932 <__lo0bits>:
 8017932:	6803      	ldr	r3, [r0, #0]
 8017934:	f013 0207 	ands.w	r2, r3, #7
 8017938:	4601      	mov	r1, r0
 801793a:	d00b      	beq.n	8017954 <__lo0bits+0x22>
 801793c:	07da      	lsls	r2, r3, #31
 801793e:	d423      	bmi.n	8017988 <__lo0bits+0x56>
 8017940:	0798      	lsls	r0, r3, #30
 8017942:	bf49      	itett	mi
 8017944:	085b      	lsrmi	r3, r3, #1
 8017946:	089b      	lsrpl	r3, r3, #2
 8017948:	2001      	movmi	r0, #1
 801794a:	600b      	strmi	r3, [r1, #0]
 801794c:	bf5c      	itt	pl
 801794e:	600b      	strpl	r3, [r1, #0]
 8017950:	2002      	movpl	r0, #2
 8017952:	4770      	bx	lr
 8017954:	b298      	uxth	r0, r3
 8017956:	b9a8      	cbnz	r0, 8017984 <__lo0bits+0x52>
 8017958:	0c1b      	lsrs	r3, r3, #16
 801795a:	2010      	movs	r0, #16
 801795c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017960:	bf04      	itt	eq
 8017962:	0a1b      	lsreq	r3, r3, #8
 8017964:	3008      	addeq	r0, #8
 8017966:	071a      	lsls	r2, r3, #28
 8017968:	bf04      	itt	eq
 801796a:	091b      	lsreq	r3, r3, #4
 801796c:	3004      	addeq	r0, #4
 801796e:	079a      	lsls	r2, r3, #30
 8017970:	bf04      	itt	eq
 8017972:	089b      	lsreq	r3, r3, #2
 8017974:	3002      	addeq	r0, #2
 8017976:	07da      	lsls	r2, r3, #31
 8017978:	d402      	bmi.n	8017980 <__lo0bits+0x4e>
 801797a:	085b      	lsrs	r3, r3, #1
 801797c:	d006      	beq.n	801798c <__lo0bits+0x5a>
 801797e:	3001      	adds	r0, #1
 8017980:	600b      	str	r3, [r1, #0]
 8017982:	4770      	bx	lr
 8017984:	4610      	mov	r0, r2
 8017986:	e7e9      	b.n	801795c <__lo0bits+0x2a>
 8017988:	2000      	movs	r0, #0
 801798a:	4770      	bx	lr
 801798c:	2020      	movs	r0, #32
 801798e:	4770      	bx	lr

08017990 <__i2b>:
 8017990:	b510      	push	{r4, lr}
 8017992:	460c      	mov	r4, r1
 8017994:	2101      	movs	r1, #1
 8017996:	f7ff fee9 	bl	801776c <_Balloc>
 801799a:	2201      	movs	r2, #1
 801799c:	6144      	str	r4, [r0, #20]
 801799e:	6102      	str	r2, [r0, #16]
 80179a0:	bd10      	pop	{r4, pc}

080179a2 <__multiply>:
 80179a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179a6:	4614      	mov	r4, r2
 80179a8:	690a      	ldr	r2, [r1, #16]
 80179aa:	6923      	ldr	r3, [r4, #16]
 80179ac:	429a      	cmp	r2, r3
 80179ae:	bfb8      	it	lt
 80179b0:	460b      	movlt	r3, r1
 80179b2:	4688      	mov	r8, r1
 80179b4:	bfbc      	itt	lt
 80179b6:	46a0      	movlt	r8, r4
 80179b8:	461c      	movlt	r4, r3
 80179ba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80179be:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80179c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80179c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80179ca:	eb07 0609 	add.w	r6, r7, r9
 80179ce:	42b3      	cmp	r3, r6
 80179d0:	bfb8      	it	lt
 80179d2:	3101      	addlt	r1, #1
 80179d4:	f7ff feca 	bl	801776c <_Balloc>
 80179d8:	f100 0514 	add.w	r5, r0, #20
 80179dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80179e0:	462b      	mov	r3, r5
 80179e2:	2200      	movs	r2, #0
 80179e4:	4573      	cmp	r3, lr
 80179e6:	d316      	bcc.n	8017a16 <__multiply+0x74>
 80179e8:	f104 0214 	add.w	r2, r4, #20
 80179ec:	f108 0114 	add.w	r1, r8, #20
 80179f0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80179f4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80179f8:	9300      	str	r3, [sp, #0]
 80179fa:	9b00      	ldr	r3, [sp, #0]
 80179fc:	9201      	str	r2, [sp, #4]
 80179fe:	4293      	cmp	r3, r2
 8017a00:	d80c      	bhi.n	8017a1c <__multiply+0x7a>
 8017a02:	2e00      	cmp	r6, #0
 8017a04:	dd03      	ble.n	8017a0e <__multiply+0x6c>
 8017a06:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d05d      	beq.n	8017aca <__multiply+0x128>
 8017a0e:	6106      	str	r6, [r0, #16]
 8017a10:	b003      	add	sp, #12
 8017a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a16:	f843 2b04 	str.w	r2, [r3], #4
 8017a1a:	e7e3      	b.n	80179e4 <__multiply+0x42>
 8017a1c:	f8b2 b000 	ldrh.w	fp, [r2]
 8017a20:	f1bb 0f00 	cmp.w	fp, #0
 8017a24:	d023      	beq.n	8017a6e <__multiply+0xcc>
 8017a26:	4689      	mov	r9, r1
 8017a28:	46ac      	mov	ip, r5
 8017a2a:	f04f 0800 	mov.w	r8, #0
 8017a2e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017a32:	f8dc a000 	ldr.w	sl, [ip]
 8017a36:	b2a3      	uxth	r3, r4
 8017a38:	fa1f fa8a 	uxth.w	sl, sl
 8017a3c:	fb0b a303 	mla	r3, fp, r3, sl
 8017a40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017a44:	f8dc 4000 	ldr.w	r4, [ip]
 8017a48:	4443      	add	r3, r8
 8017a4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017a4e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017a52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017a56:	46e2      	mov	sl, ip
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017a5e:	454f      	cmp	r7, r9
 8017a60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017a64:	f84a 3b04 	str.w	r3, [sl], #4
 8017a68:	d82b      	bhi.n	8017ac2 <__multiply+0x120>
 8017a6a:	f8cc 8004 	str.w	r8, [ip, #4]
 8017a6e:	9b01      	ldr	r3, [sp, #4]
 8017a70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017a74:	3204      	adds	r2, #4
 8017a76:	f1ba 0f00 	cmp.w	sl, #0
 8017a7a:	d020      	beq.n	8017abe <__multiply+0x11c>
 8017a7c:	682b      	ldr	r3, [r5, #0]
 8017a7e:	4689      	mov	r9, r1
 8017a80:	46a8      	mov	r8, r5
 8017a82:	f04f 0b00 	mov.w	fp, #0
 8017a86:	f8b9 c000 	ldrh.w	ip, [r9]
 8017a8a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017a8e:	fb0a 440c 	mla	r4, sl, ip, r4
 8017a92:	445c      	add	r4, fp
 8017a94:	46c4      	mov	ip, r8
 8017a96:	b29b      	uxth	r3, r3
 8017a98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017a9c:	f84c 3b04 	str.w	r3, [ip], #4
 8017aa0:	f859 3b04 	ldr.w	r3, [r9], #4
 8017aa4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017aa8:	0c1b      	lsrs	r3, r3, #16
 8017aaa:	fb0a b303 	mla	r3, sl, r3, fp
 8017aae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017ab2:	454f      	cmp	r7, r9
 8017ab4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017ab8:	d805      	bhi.n	8017ac6 <__multiply+0x124>
 8017aba:	f8c8 3004 	str.w	r3, [r8, #4]
 8017abe:	3504      	adds	r5, #4
 8017ac0:	e79b      	b.n	80179fa <__multiply+0x58>
 8017ac2:	46d4      	mov	ip, sl
 8017ac4:	e7b3      	b.n	8017a2e <__multiply+0x8c>
 8017ac6:	46e0      	mov	r8, ip
 8017ac8:	e7dd      	b.n	8017a86 <__multiply+0xe4>
 8017aca:	3e01      	subs	r6, #1
 8017acc:	e799      	b.n	8017a02 <__multiply+0x60>
	...

08017ad0 <__pow5mult>:
 8017ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ad4:	4615      	mov	r5, r2
 8017ad6:	f012 0203 	ands.w	r2, r2, #3
 8017ada:	4606      	mov	r6, r0
 8017adc:	460f      	mov	r7, r1
 8017ade:	d007      	beq.n	8017af0 <__pow5mult+0x20>
 8017ae0:	3a01      	subs	r2, #1
 8017ae2:	4c21      	ldr	r4, [pc, #132]	; (8017b68 <__pow5mult+0x98>)
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017aea:	f7ff fe8a 	bl	8017802 <__multadd>
 8017aee:	4607      	mov	r7, r0
 8017af0:	10ad      	asrs	r5, r5, #2
 8017af2:	d035      	beq.n	8017b60 <__pow5mult+0x90>
 8017af4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017af6:	b93c      	cbnz	r4, 8017b08 <__pow5mult+0x38>
 8017af8:	2010      	movs	r0, #16
 8017afa:	f7ff fe1d 	bl	8017738 <malloc>
 8017afe:	6270      	str	r0, [r6, #36]	; 0x24
 8017b00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017b04:	6004      	str	r4, [r0, #0]
 8017b06:	60c4      	str	r4, [r0, #12]
 8017b08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017b0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017b10:	b94c      	cbnz	r4, 8017b26 <__pow5mult+0x56>
 8017b12:	f240 2171 	movw	r1, #625	; 0x271
 8017b16:	4630      	mov	r0, r6
 8017b18:	f7ff ff3a 	bl	8017990 <__i2b>
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017b22:	4604      	mov	r4, r0
 8017b24:	6003      	str	r3, [r0, #0]
 8017b26:	f04f 0800 	mov.w	r8, #0
 8017b2a:	07eb      	lsls	r3, r5, #31
 8017b2c:	d50a      	bpl.n	8017b44 <__pow5mult+0x74>
 8017b2e:	4639      	mov	r1, r7
 8017b30:	4622      	mov	r2, r4
 8017b32:	4630      	mov	r0, r6
 8017b34:	f7ff ff35 	bl	80179a2 <__multiply>
 8017b38:	4639      	mov	r1, r7
 8017b3a:	4681      	mov	r9, r0
 8017b3c:	4630      	mov	r0, r6
 8017b3e:	f7ff fe49 	bl	80177d4 <_Bfree>
 8017b42:	464f      	mov	r7, r9
 8017b44:	106d      	asrs	r5, r5, #1
 8017b46:	d00b      	beq.n	8017b60 <__pow5mult+0x90>
 8017b48:	6820      	ldr	r0, [r4, #0]
 8017b4a:	b938      	cbnz	r0, 8017b5c <__pow5mult+0x8c>
 8017b4c:	4622      	mov	r2, r4
 8017b4e:	4621      	mov	r1, r4
 8017b50:	4630      	mov	r0, r6
 8017b52:	f7ff ff26 	bl	80179a2 <__multiply>
 8017b56:	6020      	str	r0, [r4, #0]
 8017b58:	f8c0 8000 	str.w	r8, [r0]
 8017b5c:	4604      	mov	r4, r0
 8017b5e:	e7e4      	b.n	8017b2a <__pow5mult+0x5a>
 8017b60:	4638      	mov	r0, r7
 8017b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b66:	bf00      	nop
 8017b68:	080196b8 	.word	0x080196b8

08017b6c <__lshift>:
 8017b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b70:	460c      	mov	r4, r1
 8017b72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017b76:	6923      	ldr	r3, [r4, #16]
 8017b78:	6849      	ldr	r1, [r1, #4]
 8017b7a:	eb0a 0903 	add.w	r9, sl, r3
 8017b7e:	68a3      	ldr	r3, [r4, #8]
 8017b80:	4607      	mov	r7, r0
 8017b82:	4616      	mov	r6, r2
 8017b84:	f109 0501 	add.w	r5, r9, #1
 8017b88:	42ab      	cmp	r3, r5
 8017b8a:	db32      	blt.n	8017bf2 <__lshift+0x86>
 8017b8c:	4638      	mov	r0, r7
 8017b8e:	f7ff fded 	bl	801776c <_Balloc>
 8017b92:	2300      	movs	r3, #0
 8017b94:	4680      	mov	r8, r0
 8017b96:	f100 0114 	add.w	r1, r0, #20
 8017b9a:	461a      	mov	r2, r3
 8017b9c:	4553      	cmp	r3, sl
 8017b9e:	db2b      	blt.n	8017bf8 <__lshift+0x8c>
 8017ba0:	6920      	ldr	r0, [r4, #16]
 8017ba2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017ba6:	f104 0314 	add.w	r3, r4, #20
 8017baa:	f016 021f 	ands.w	r2, r6, #31
 8017bae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017bb2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017bb6:	d025      	beq.n	8017c04 <__lshift+0x98>
 8017bb8:	f1c2 0e20 	rsb	lr, r2, #32
 8017bbc:	2000      	movs	r0, #0
 8017bbe:	681e      	ldr	r6, [r3, #0]
 8017bc0:	468a      	mov	sl, r1
 8017bc2:	4096      	lsls	r6, r2
 8017bc4:	4330      	orrs	r0, r6
 8017bc6:	f84a 0b04 	str.w	r0, [sl], #4
 8017bca:	f853 0b04 	ldr.w	r0, [r3], #4
 8017bce:	459c      	cmp	ip, r3
 8017bd0:	fa20 f00e 	lsr.w	r0, r0, lr
 8017bd4:	d814      	bhi.n	8017c00 <__lshift+0x94>
 8017bd6:	6048      	str	r0, [r1, #4]
 8017bd8:	b108      	cbz	r0, 8017bde <__lshift+0x72>
 8017bda:	f109 0502 	add.w	r5, r9, #2
 8017bde:	3d01      	subs	r5, #1
 8017be0:	4638      	mov	r0, r7
 8017be2:	f8c8 5010 	str.w	r5, [r8, #16]
 8017be6:	4621      	mov	r1, r4
 8017be8:	f7ff fdf4 	bl	80177d4 <_Bfree>
 8017bec:	4640      	mov	r0, r8
 8017bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bf2:	3101      	adds	r1, #1
 8017bf4:	005b      	lsls	r3, r3, #1
 8017bf6:	e7c7      	b.n	8017b88 <__lshift+0x1c>
 8017bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017bfc:	3301      	adds	r3, #1
 8017bfe:	e7cd      	b.n	8017b9c <__lshift+0x30>
 8017c00:	4651      	mov	r1, sl
 8017c02:	e7dc      	b.n	8017bbe <__lshift+0x52>
 8017c04:	3904      	subs	r1, #4
 8017c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8017c0e:	459c      	cmp	ip, r3
 8017c10:	d8f9      	bhi.n	8017c06 <__lshift+0x9a>
 8017c12:	e7e4      	b.n	8017bde <__lshift+0x72>

08017c14 <__mcmp>:
 8017c14:	6903      	ldr	r3, [r0, #16]
 8017c16:	690a      	ldr	r2, [r1, #16]
 8017c18:	1a9b      	subs	r3, r3, r2
 8017c1a:	b530      	push	{r4, r5, lr}
 8017c1c:	d10c      	bne.n	8017c38 <__mcmp+0x24>
 8017c1e:	0092      	lsls	r2, r2, #2
 8017c20:	3014      	adds	r0, #20
 8017c22:	3114      	adds	r1, #20
 8017c24:	1884      	adds	r4, r0, r2
 8017c26:	4411      	add	r1, r2
 8017c28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017c2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017c30:	4295      	cmp	r5, r2
 8017c32:	d003      	beq.n	8017c3c <__mcmp+0x28>
 8017c34:	d305      	bcc.n	8017c42 <__mcmp+0x2e>
 8017c36:	2301      	movs	r3, #1
 8017c38:	4618      	mov	r0, r3
 8017c3a:	bd30      	pop	{r4, r5, pc}
 8017c3c:	42a0      	cmp	r0, r4
 8017c3e:	d3f3      	bcc.n	8017c28 <__mcmp+0x14>
 8017c40:	e7fa      	b.n	8017c38 <__mcmp+0x24>
 8017c42:	f04f 33ff 	mov.w	r3, #4294967295
 8017c46:	e7f7      	b.n	8017c38 <__mcmp+0x24>

08017c48 <__mdiff>:
 8017c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c4c:	460d      	mov	r5, r1
 8017c4e:	4607      	mov	r7, r0
 8017c50:	4611      	mov	r1, r2
 8017c52:	4628      	mov	r0, r5
 8017c54:	4614      	mov	r4, r2
 8017c56:	f7ff ffdd 	bl	8017c14 <__mcmp>
 8017c5a:	1e06      	subs	r6, r0, #0
 8017c5c:	d108      	bne.n	8017c70 <__mdiff+0x28>
 8017c5e:	4631      	mov	r1, r6
 8017c60:	4638      	mov	r0, r7
 8017c62:	f7ff fd83 	bl	801776c <_Balloc>
 8017c66:	2301      	movs	r3, #1
 8017c68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c70:	bfa4      	itt	ge
 8017c72:	4623      	movge	r3, r4
 8017c74:	462c      	movge	r4, r5
 8017c76:	4638      	mov	r0, r7
 8017c78:	6861      	ldr	r1, [r4, #4]
 8017c7a:	bfa6      	itte	ge
 8017c7c:	461d      	movge	r5, r3
 8017c7e:	2600      	movge	r6, #0
 8017c80:	2601      	movlt	r6, #1
 8017c82:	f7ff fd73 	bl	801776c <_Balloc>
 8017c86:	692b      	ldr	r3, [r5, #16]
 8017c88:	60c6      	str	r6, [r0, #12]
 8017c8a:	6926      	ldr	r6, [r4, #16]
 8017c8c:	f105 0914 	add.w	r9, r5, #20
 8017c90:	f104 0214 	add.w	r2, r4, #20
 8017c94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017c98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017c9c:	f100 0514 	add.w	r5, r0, #20
 8017ca0:	f04f 0e00 	mov.w	lr, #0
 8017ca4:	f852 ab04 	ldr.w	sl, [r2], #4
 8017ca8:	f859 4b04 	ldr.w	r4, [r9], #4
 8017cac:	fa1e f18a 	uxtah	r1, lr, sl
 8017cb0:	b2a3      	uxth	r3, r4
 8017cb2:	1ac9      	subs	r1, r1, r3
 8017cb4:	0c23      	lsrs	r3, r4, #16
 8017cb6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017cba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017cbe:	b289      	uxth	r1, r1
 8017cc0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017cc4:	45c8      	cmp	r8, r9
 8017cc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017cca:	4694      	mov	ip, r2
 8017ccc:	f845 3b04 	str.w	r3, [r5], #4
 8017cd0:	d8e8      	bhi.n	8017ca4 <__mdiff+0x5c>
 8017cd2:	45bc      	cmp	ip, r7
 8017cd4:	d304      	bcc.n	8017ce0 <__mdiff+0x98>
 8017cd6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017cda:	b183      	cbz	r3, 8017cfe <__mdiff+0xb6>
 8017cdc:	6106      	str	r6, [r0, #16]
 8017cde:	e7c5      	b.n	8017c6c <__mdiff+0x24>
 8017ce0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017ce4:	fa1e f381 	uxtah	r3, lr, r1
 8017ce8:	141a      	asrs	r2, r3, #16
 8017cea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017cf4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017cf8:	f845 3b04 	str.w	r3, [r5], #4
 8017cfc:	e7e9      	b.n	8017cd2 <__mdiff+0x8a>
 8017cfe:	3e01      	subs	r6, #1
 8017d00:	e7e9      	b.n	8017cd6 <__mdiff+0x8e>
	...

08017d04 <__ulp>:
 8017d04:	4b12      	ldr	r3, [pc, #72]	; (8017d50 <__ulp+0x4c>)
 8017d06:	ee10 2a90 	vmov	r2, s1
 8017d0a:	401a      	ands	r2, r3
 8017d0c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	dd04      	ble.n	8017d1e <__ulp+0x1a>
 8017d14:	2000      	movs	r0, #0
 8017d16:	4619      	mov	r1, r3
 8017d18:	ec41 0b10 	vmov	d0, r0, r1
 8017d1c:	4770      	bx	lr
 8017d1e:	425b      	negs	r3, r3
 8017d20:	151b      	asrs	r3, r3, #20
 8017d22:	2b13      	cmp	r3, #19
 8017d24:	f04f 0000 	mov.w	r0, #0
 8017d28:	f04f 0100 	mov.w	r1, #0
 8017d2c:	dc04      	bgt.n	8017d38 <__ulp+0x34>
 8017d2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017d32:	fa42 f103 	asr.w	r1, r2, r3
 8017d36:	e7ef      	b.n	8017d18 <__ulp+0x14>
 8017d38:	3b14      	subs	r3, #20
 8017d3a:	2b1e      	cmp	r3, #30
 8017d3c:	f04f 0201 	mov.w	r2, #1
 8017d40:	bfda      	itte	le
 8017d42:	f1c3 031f 	rsble	r3, r3, #31
 8017d46:	fa02 f303 	lslle.w	r3, r2, r3
 8017d4a:	4613      	movgt	r3, r2
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	e7e3      	b.n	8017d18 <__ulp+0x14>
 8017d50:	7ff00000 	.word	0x7ff00000

08017d54 <__b2d>:
 8017d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d56:	6905      	ldr	r5, [r0, #16]
 8017d58:	f100 0714 	add.w	r7, r0, #20
 8017d5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017d60:	1f2e      	subs	r6, r5, #4
 8017d62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017d66:	4620      	mov	r0, r4
 8017d68:	f7ff fdc4 	bl	80178f4 <__hi0bits>
 8017d6c:	f1c0 0320 	rsb	r3, r0, #32
 8017d70:	280a      	cmp	r0, #10
 8017d72:	600b      	str	r3, [r1, #0]
 8017d74:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017dec <__b2d+0x98>
 8017d78:	dc14      	bgt.n	8017da4 <__b2d+0x50>
 8017d7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8017d7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8017d82:	42b7      	cmp	r7, r6
 8017d84:	ea41 030c 	orr.w	r3, r1, ip
 8017d88:	bf34      	ite	cc
 8017d8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017d8e:	2100      	movcs	r1, #0
 8017d90:	3015      	adds	r0, #21
 8017d92:	fa04 f000 	lsl.w	r0, r4, r0
 8017d96:	fa21 f10e 	lsr.w	r1, r1, lr
 8017d9a:	ea40 0201 	orr.w	r2, r0, r1
 8017d9e:	ec43 2b10 	vmov	d0, r2, r3
 8017da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017da4:	42b7      	cmp	r7, r6
 8017da6:	bf3a      	itte	cc
 8017da8:	f1a5 0608 	subcc.w	r6, r5, #8
 8017dac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017db0:	2100      	movcs	r1, #0
 8017db2:	380b      	subs	r0, #11
 8017db4:	d015      	beq.n	8017de2 <__b2d+0x8e>
 8017db6:	4084      	lsls	r4, r0
 8017db8:	f1c0 0520 	rsb	r5, r0, #32
 8017dbc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017dc0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017dc4:	42be      	cmp	r6, r7
 8017dc6:	fa21 fc05 	lsr.w	ip, r1, r5
 8017dca:	ea44 030c 	orr.w	r3, r4, ip
 8017dce:	bf8c      	ite	hi
 8017dd0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017dd4:	2400      	movls	r4, #0
 8017dd6:	fa01 f000 	lsl.w	r0, r1, r0
 8017dda:	40ec      	lsrs	r4, r5
 8017ddc:	ea40 0204 	orr.w	r2, r0, r4
 8017de0:	e7dd      	b.n	8017d9e <__b2d+0x4a>
 8017de2:	ea44 030c 	orr.w	r3, r4, ip
 8017de6:	460a      	mov	r2, r1
 8017de8:	e7d9      	b.n	8017d9e <__b2d+0x4a>
 8017dea:	bf00      	nop
 8017dec:	3ff00000 	.word	0x3ff00000

08017df0 <__d2b>:
 8017df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017df4:	460e      	mov	r6, r1
 8017df6:	2101      	movs	r1, #1
 8017df8:	ec59 8b10 	vmov	r8, r9, d0
 8017dfc:	4615      	mov	r5, r2
 8017dfe:	f7ff fcb5 	bl	801776c <_Balloc>
 8017e02:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017e06:	4607      	mov	r7, r0
 8017e08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017e0c:	bb34      	cbnz	r4, 8017e5c <__d2b+0x6c>
 8017e0e:	9301      	str	r3, [sp, #4]
 8017e10:	f1b8 0300 	subs.w	r3, r8, #0
 8017e14:	d027      	beq.n	8017e66 <__d2b+0x76>
 8017e16:	a802      	add	r0, sp, #8
 8017e18:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017e1c:	f7ff fd89 	bl	8017932 <__lo0bits>
 8017e20:	9900      	ldr	r1, [sp, #0]
 8017e22:	b1f0      	cbz	r0, 8017e62 <__d2b+0x72>
 8017e24:	9a01      	ldr	r2, [sp, #4]
 8017e26:	f1c0 0320 	rsb	r3, r0, #32
 8017e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8017e2e:	430b      	orrs	r3, r1
 8017e30:	40c2      	lsrs	r2, r0
 8017e32:	617b      	str	r3, [r7, #20]
 8017e34:	9201      	str	r2, [sp, #4]
 8017e36:	9b01      	ldr	r3, [sp, #4]
 8017e38:	61bb      	str	r3, [r7, #24]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	bf14      	ite	ne
 8017e3e:	2102      	movne	r1, #2
 8017e40:	2101      	moveq	r1, #1
 8017e42:	6139      	str	r1, [r7, #16]
 8017e44:	b1c4      	cbz	r4, 8017e78 <__d2b+0x88>
 8017e46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017e4a:	4404      	add	r4, r0
 8017e4c:	6034      	str	r4, [r6, #0]
 8017e4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017e52:	6028      	str	r0, [r5, #0]
 8017e54:	4638      	mov	r0, r7
 8017e56:	b003      	add	sp, #12
 8017e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017e60:	e7d5      	b.n	8017e0e <__d2b+0x1e>
 8017e62:	6179      	str	r1, [r7, #20]
 8017e64:	e7e7      	b.n	8017e36 <__d2b+0x46>
 8017e66:	a801      	add	r0, sp, #4
 8017e68:	f7ff fd63 	bl	8017932 <__lo0bits>
 8017e6c:	9b01      	ldr	r3, [sp, #4]
 8017e6e:	617b      	str	r3, [r7, #20]
 8017e70:	2101      	movs	r1, #1
 8017e72:	6139      	str	r1, [r7, #16]
 8017e74:	3020      	adds	r0, #32
 8017e76:	e7e5      	b.n	8017e44 <__d2b+0x54>
 8017e78:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017e7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017e80:	6030      	str	r0, [r6, #0]
 8017e82:	6918      	ldr	r0, [r3, #16]
 8017e84:	f7ff fd36 	bl	80178f4 <__hi0bits>
 8017e88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017e8c:	e7e1      	b.n	8017e52 <__d2b+0x62>

08017e8e <__ratio>:
 8017e8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e92:	4688      	mov	r8, r1
 8017e94:	4669      	mov	r1, sp
 8017e96:	4681      	mov	r9, r0
 8017e98:	f7ff ff5c 	bl	8017d54 <__b2d>
 8017e9c:	a901      	add	r1, sp, #4
 8017e9e:	4640      	mov	r0, r8
 8017ea0:	ec57 6b10 	vmov	r6, r7, d0
 8017ea4:	f7ff ff56 	bl	8017d54 <__b2d>
 8017ea8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017eac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017eb0:	eba3 0c02 	sub.w	ip, r3, r2
 8017eb4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017eb8:	1a9b      	subs	r3, r3, r2
 8017eba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017ebe:	ec5b ab10 	vmov	sl, fp, d0
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	bfce      	itee	gt
 8017ec6:	463a      	movgt	r2, r7
 8017ec8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017ecc:	465a      	movle	r2, fp
 8017ece:	4659      	mov	r1, fp
 8017ed0:	463d      	mov	r5, r7
 8017ed2:	bfd4      	ite	le
 8017ed4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017ed8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017edc:	4630      	mov	r0, r6
 8017ede:	ee10 2a10 	vmov	r2, s0
 8017ee2:	460b      	mov	r3, r1
 8017ee4:	4629      	mov	r1, r5
 8017ee6:	f7e8 fcc9 	bl	800087c <__aeabi_ddiv>
 8017eea:	ec41 0b10 	vmov	d0, r0, r1
 8017eee:	b003      	add	sp, #12
 8017ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ef4 <__copybits>:
 8017ef4:	3901      	subs	r1, #1
 8017ef6:	b510      	push	{r4, lr}
 8017ef8:	1149      	asrs	r1, r1, #5
 8017efa:	6914      	ldr	r4, [r2, #16]
 8017efc:	3101      	adds	r1, #1
 8017efe:	f102 0314 	add.w	r3, r2, #20
 8017f02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017f06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017f0a:	42a3      	cmp	r3, r4
 8017f0c:	4602      	mov	r2, r0
 8017f0e:	d303      	bcc.n	8017f18 <__copybits+0x24>
 8017f10:	2300      	movs	r3, #0
 8017f12:	428a      	cmp	r2, r1
 8017f14:	d305      	bcc.n	8017f22 <__copybits+0x2e>
 8017f16:	bd10      	pop	{r4, pc}
 8017f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f1c:	f840 2b04 	str.w	r2, [r0], #4
 8017f20:	e7f3      	b.n	8017f0a <__copybits+0x16>
 8017f22:	f842 3b04 	str.w	r3, [r2], #4
 8017f26:	e7f4      	b.n	8017f12 <__copybits+0x1e>

08017f28 <__any_on>:
 8017f28:	f100 0214 	add.w	r2, r0, #20
 8017f2c:	6900      	ldr	r0, [r0, #16]
 8017f2e:	114b      	asrs	r3, r1, #5
 8017f30:	4298      	cmp	r0, r3
 8017f32:	b510      	push	{r4, lr}
 8017f34:	db11      	blt.n	8017f5a <__any_on+0x32>
 8017f36:	dd0a      	ble.n	8017f4e <__any_on+0x26>
 8017f38:	f011 011f 	ands.w	r1, r1, #31
 8017f3c:	d007      	beq.n	8017f4e <__any_on+0x26>
 8017f3e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017f42:	fa24 f001 	lsr.w	r0, r4, r1
 8017f46:	fa00 f101 	lsl.w	r1, r0, r1
 8017f4a:	428c      	cmp	r4, r1
 8017f4c:	d10b      	bne.n	8017f66 <__any_on+0x3e>
 8017f4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017f52:	4293      	cmp	r3, r2
 8017f54:	d803      	bhi.n	8017f5e <__any_on+0x36>
 8017f56:	2000      	movs	r0, #0
 8017f58:	bd10      	pop	{r4, pc}
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	e7f7      	b.n	8017f4e <__any_on+0x26>
 8017f5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017f62:	2900      	cmp	r1, #0
 8017f64:	d0f5      	beq.n	8017f52 <__any_on+0x2a>
 8017f66:	2001      	movs	r0, #1
 8017f68:	e7f6      	b.n	8017f58 <__any_on+0x30>

08017f6a <_calloc_r>:
 8017f6a:	b538      	push	{r3, r4, r5, lr}
 8017f6c:	fb02 f401 	mul.w	r4, r2, r1
 8017f70:	4621      	mov	r1, r4
 8017f72:	f000 f857 	bl	8018024 <_malloc_r>
 8017f76:	4605      	mov	r5, r0
 8017f78:	b118      	cbz	r0, 8017f82 <_calloc_r+0x18>
 8017f7a:	4622      	mov	r2, r4
 8017f7c:	2100      	movs	r1, #0
 8017f7e:	f7fc fcaa 	bl	80148d6 <memset>
 8017f82:	4628      	mov	r0, r5
 8017f84:	bd38      	pop	{r3, r4, r5, pc}
	...

08017f88 <_free_r>:
 8017f88:	b538      	push	{r3, r4, r5, lr}
 8017f8a:	4605      	mov	r5, r0
 8017f8c:	2900      	cmp	r1, #0
 8017f8e:	d045      	beq.n	801801c <_free_r+0x94>
 8017f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f94:	1f0c      	subs	r4, r1, #4
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	bfb8      	it	lt
 8017f9a:	18e4      	addlt	r4, r4, r3
 8017f9c:	f000 fe30 	bl	8018c00 <__malloc_lock>
 8017fa0:	4a1f      	ldr	r2, [pc, #124]	; (8018020 <_free_r+0x98>)
 8017fa2:	6813      	ldr	r3, [r2, #0]
 8017fa4:	4610      	mov	r0, r2
 8017fa6:	b933      	cbnz	r3, 8017fb6 <_free_r+0x2e>
 8017fa8:	6063      	str	r3, [r4, #4]
 8017faa:	6014      	str	r4, [r2, #0]
 8017fac:	4628      	mov	r0, r5
 8017fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fb2:	f000 be26 	b.w	8018c02 <__malloc_unlock>
 8017fb6:	42a3      	cmp	r3, r4
 8017fb8:	d90c      	bls.n	8017fd4 <_free_r+0x4c>
 8017fba:	6821      	ldr	r1, [r4, #0]
 8017fbc:	1862      	adds	r2, r4, r1
 8017fbe:	4293      	cmp	r3, r2
 8017fc0:	bf04      	itt	eq
 8017fc2:	681a      	ldreq	r2, [r3, #0]
 8017fc4:	685b      	ldreq	r3, [r3, #4]
 8017fc6:	6063      	str	r3, [r4, #4]
 8017fc8:	bf04      	itt	eq
 8017fca:	1852      	addeq	r2, r2, r1
 8017fcc:	6022      	streq	r2, [r4, #0]
 8017fce:	6004      	str	r4, [r0, #0]
 8017fd0:	e7ec      	b.n	8017fac <_free_r+0x24>
 8017fd2:	4613      	mov	r3, r2
 8017fd4:	685a      	ldr	r2, [r3, #4]
 8017fd6:	b10a      	cbz	r2, 8017fdc <_free_r+0x54>
 8017fd8:	42a2      	cmp	r2, r4
 8017fda:	d9fa      	bls.n	8017fd2 <_free_r+0x4a>
 8017fdc:	6819      	ldr	r1, [r3, #0]
 8017fde:	1858      	adds	r0, r3, r1
 8017fe0:	42a0      	cmp	r0, r4
 8017fe2:	d10b      	bne.n	8017ffc <_free_r+0x74>
 8017fe4:	6820      	ldr	r0, [r4, #0]
 8017fe6:	4401      	add	r1, r0
 8017fe8:	1858      	adds	r0, r3, r1
 8017fea:	4282      	cmp	r2, r0
 8017fec:	6019      	str	r1, [r3, #0]
 8017fee:	d1dd      	bne.n	8017fac <_free_r+0x24>
 8017ff0:	6810      	ldr	r0, [r2, #0]
 8017ff2:	6852      	ldr	r2, [r2, #4]
 8017ff4:	605a      	str	r2, [r3, #4]
 8017ff6:	4401      	add	r1, r0
 8017ff8:	6019      	str	r1, [r3, #0]
 8017ffa:	e7d7      	b.n	8017fac <_free_r+0x24>
 8017ffc:	d902      	bls.n	8018004 <_free_r+0x7c>
 8017ffe:	230c      	movs	r3, #12
 8018000:	602b      	str	r3, [r5, #0]
 8018002:	e7d3      	b.n	8017fac <_free_r+0x24>
 8018004:	6820      	ldr	r0, [r4, #0]
 8018006:	1821      	adds	r1, r4, r0
 8018008:	428a      	cmp	r2, r1
 801800a:	bf04      	itt	eq
 801800c:	6811      	ldreq	r1, [r2, #0]
 801800e:	6852      	ldreq	r2, [r2, #4]
 8018010:	6062      	str	r2, [r4, #4]
 8018012:	bf04      	itt	eq
 8018014:	1809      	addeq	r1, r1, r0
 8018016:	6021      	streq	r1, [r4, #0]
 8018018:	605c      	str	r4, [r3, #4]
 801801a:	e7c7      	b.n	8017fac <_free_r+0x24>
 801801c:	bd38      	pop	{r3, r4, r5, pc}
 801801e:	bf00      	nop
 8018020:	2003c4d0 	.word	0x2003c4d0

08018024 <_malloc_r>:
 8018024:	b570      	push	{r4, r5, r6, lr}
 8018026:	1ccd      	adds	r5, r1, #3
 8018028:	f025 0503 	bic.w	r5, r5, #3
 801802c:	3508      	adds	r5, #8
 801802e:	2d0c      	cmp	r5, #12
 8018030:	bf38      	it	cc
 8018032:	250c      	movcc	r5, #12
 8018034:	2d00      	cmp	r5, #0
 8018036:	4606      	mov	r6, r0
 8018038:	db01      	blt.n	801803e <_malloc_r+0x1a>
 801803a:	42a9      	cmp	r1, r5
 801803c:	d903      	bls.n	8018046 <_malloc_r+0x22>
 801803e:	230c      	movs	r3, #12
 8018040:	6033      	str	r3, [r6, #0]
 8018042:	2000      	movs	r0, #0
 8018044:	bd70      	pop	{r4, r5, r6, pc}
 8018046:	f000 fddb 	bl	8018c00 <__malloc_lock>
 801804a:	4a21      	ldr	r2, [pc, #132]	; (80180d0 <_malloc_r+0xac>)
 801804c:	6814      	ldr	r4, [r2, #0]
 801804e:	4621      	mov	r1, r4
 8018050:	b991      	cbnz	r1, 8018078 <_malloc_r+0x54>
 8018052:	4c20      	ldr	r4, [pc, #128]	; (80180d4 <_malloc_r+0xb0>)
 8018054:	6823      	ldr	r3, [r4, #0]
 8018056:	b91b      	cbnz	r3, 8018060 <_malloc_r+0x3c>
 8018058:	4630      	mov	r0, r6
 801805a:	f000 fc91 	bl	8018980 <_sbrk_r>
 801805e:	6020      	str	r0, [r4, #0]
 8018060:	4629      	mov	r1, r5
 8018062:	4630      	mov	r0, r6
 8018064:	f000 fc8c 	bl	8018980 <_sbrk_r>
 8018068:	1c43      	adds	r3, r0, #1
 801806a:	d124      	bne.n	80180b6 <_malloc_r+0x92>
 801806c:	230c      	movs	r3, #12
 801806e:	6033      	str	r3, [r6, #0]
 8018070:	4630      	mov	r0, r6
 8018072:	f000 fdc6 	bl	8018c02 <__malloc_unlock>
 8018076:	e7e4      	b.n	8018042 <_malloc_r+0x1e>
 8018078:	680b      	ldr	r3, [r1, #0]
 801807a:	1b5b      	subs	r3, r3, r5
 801807c:	d418      	bmi.n	80180b0 <_malloc_r+0x8c>
 801807e:	2b0b      	cmp	r3, #11
 8018080:	d90f      	bls.n	80180a2 <_malloc_r+0x7e>
 8018082:	600b      	str	r3, [r1, #0]
 8018084:	50cd      	str	r5, [r1, r3]
 8018086:	18cc      	adds	r4, r1, r3
 8018088:	4630      	mov	r0, r6
 801808a:	f000 fdba 	bl	8018c02 <__malloc_unlock>
 801808e:	f104 000b 	add.w	r0, r4, #11
 8018092:	1d23      	adds	r3, r4, #4
 8018094:	f020 0007 	bic.w	r0, r0, #7
 8018098:	1ac3      	subs	r3, r0, r3
 801809a:	d0d3      	beq.n	8018044 <_malloc_r+0x20>
 801809c:	425a      	negs	r2, r3
 801809e:	50e2      	str	r2, [r4, r3]
 80180a0:	e7d0      	b.n	8018044 <_malloc_r+0x20>
 80180a2:	428c      	cmp	r4, r1
 80180a4:	684b      	ldr	r3, [r1, #4]
 80180a6:	bf16      	itet	ne
 80180a8:	6063      	strne	r3, [r4, #4]
 80180aa:	6013      	streq	r3, [r2, #0]
 80180ac:	460c      	movne	r4, r1
 80180ae:	e7eb      	b.n	8018088 <_malloc_r+0x64>
 80180b0:	460c      	mov	r4, r1
 80180b2:	6849      	ldr	r1, [r1, #4]
 80180b4:	e7cc      	b.n	8018050 <_malloc_r+0x2c>
 80180b6:	1cc4      	adds	r4, r0, #3
 80180b8:	f024 0403 	bic.w	r4, r4, #3
 80180bc:	42a0      	cmp	r0, r4
 80180be:	d005      	beq.n	80180cc <_malloc_r+0xa8>
 80180c0:	1a21      	subs	r1, r4, r0
 80180c2:	4630      	mov	r0, r6
 80180c4:	f000 fc5c 	bl	8018980 <_sbrk_r>
 80180c8:	3001      	adds	r0, #1
 80180ca:	d0cf      	beq.n	801806c <_malloc_r+0x48>
 80180cc:	6025      	str	r5, [r4, #0]
 80180ce:	e7db      	b.n	8018088 <_malloc_r+0x64>
 80180d0:	2003c4d0 	.word	0x2003c4d0
 80180d4:	2003c4d4 	.word	0x2003c4d4

080180d8 <__ssputs_r>:
 80180d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180dc:	688e      	ldr	r6, [r1, #8]
 80180de:	429e      	cmp	r6, r3
 80180e0:	4682      	mov	sl, r0
 80180e2:	460c      	mov	r4, r1
 80180e4:	4690      	mov	r8, r2
 80180e6:	4699      	mov	r9, r3
 80180e8:	d837      	bhi.n	801815a <__ssputs_r+0x82>
 80180ea:	898a      	ldrh	r2, [r1, #12]
 80180ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80180f0:	d031      	beq.n	8018156 <__ssputs_r+0x7e>
 80180f2:	6825      	ldr	r5, [r4, #0]
 80180f4:	6909      	ldr	r1, [r1, #16]
 80180f6:	1a6f      	subs	r7, r5, r1
 80180f8:	6965      	ldr	r5, [r4, #20]
 80180fa:	2302      	movs	r3, #2
 80180fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018100:	fb95 f5f3 	sdiv	r5, r5, r3
 8018104:	f109 0301 	add.w	r3, r9, #1
 8018108:	443b      	add	r3, r7
 801810a:	429d      	cmp	r5, r3
 801810c:	bf38      	it	cc
 801810e:	461d      	movcc	r5, r3
 8018110:	0553      	lsls	r3, r2, #21
 8018112:	d530      	bpl.n	8018176 <__ssputs_r+0x9e>
 8018114:	4629      	mov	r1, r5
 8018116:	f7ff ff85 	bl	8018024 <_malloc_r>
 801811a:	4606      	mov	r6, r0
 801811c:	b950      	cbnz	r0, 8018134 <__ssputs_r+0x5c>
 801811e:	230c      	movs	r3, #12
 8018120:	f8ca 3000 	str.w	r3, [sl]
 8018124:	89a3      	ldrh	r3, [r4, #12]
 8018126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801812a:	81a3      	strh	r3, [r4, #12]
 801812c:	f04f 30ff 	mov.w	r0, #4294967295
 8018130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018134:	463a      	mov	r2, r7
 8018136:	6921      	ldr	r1, [r4, #16]
 8018138:	f7fc fbc2 	bl	80148c0 <memcpy>
 801813c:	89a3      	ldrh	r3, [r4, #12]
 801813e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018146:	81a3      	strh	r3, [r4, #12]
 8018148:	6126      	str	r6, [r4, #16]
 801814a:	6165      	str	r5, [r4, #20]
 801814c:	443e      	add	r6, r7
 801814e:	1bed      	subs	r5, r5, r7
 8018150:	6026      	str	r6, [r4, #0]
 8018152:	60a5      	str	r5, [r4, #8]
 8018154:	464e      	mov	r6, r9
 8018156:	454e      	cmp	r6, r9
 8018158:	d900      	bls.n	801815c <__ssputs_r+0x84>
 801815a:	464e      	mov	r6, r9
 801815c:	4632      	mov	r2, r6
 801815e:	4641      	mov	r1, r8
 8018160:	6820      	ldr	r0, [r4, #0]
 8018162:	f000 fd34 	bl	8018bce <memmove>
 8018166:	68a3      	ldr	r3, [r4, #8]
 8018168:	1b9b      	subs	r3, r3, r6
 801816a:	60a3      	str	r3, [r4, #8]
 801816c:	6823      	ldr	r3, [r4, #0]
 801816e:	441e      	add	r6, r3
 8018170:	6026      	str	r6, [r4, #0]
 8018172:	2000      	movs	r0, #0
 8018174:	e7dc      	b.n	8018130 <__ssputs_r+0x58>
 8018176:	462a      	mov	r2, r5
 8018178:	f000 fd44 	bl	8018c04 <_realloc_r>
 801817c:	4606      	mov	r6, r0
 801817e:	2800      	cmp	r0, #0
 8018180:	d1e2      	bne.n	8018148 <__ssputs_r+0x70>
 8018182:	6921      	ldr	r1, [r4, #16]
 8018184:	4650      	mov	r0, sl
 8018186:	f7ff feff 	bl	8017f88 <_free_r>
 801818a:	e7c8      	b.n	801811e <__ssputs_r+0x46>

0801818c <_svfiprintf_r>:
 801818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018190:	461d      	mov	r5, r3
 8018192:	898b      	ldrh	r3, [r1, #12]
 8018194:	061f      	lsls	r7, r3, #24
 8018196:	b09d      	sub	sp, #116	; 0x74
 8018198:	4680      	mov	r8, r0
 801819a:	460c      	mov	r4, r1
 801819c:	4616      	mov	r6, r2
 801819e:	d50f      	bpl.n	80181c0 <_svfiprintf_r+0x34>
 80181a0:	690b      	ldr	r3, [r1, #16]
 80181a2:	b96b      	cbnz	r3, 80181c0 <_svfiprintf_r+0x34>
 80181a4:	2140      	movs	r1, #64	; 0x40
 80181a6:	f7ff ff3d 	bl	8018024 <_malloc_r>
 80181aa:	6020      	str	r0, [r4, #0]
 80181ac:	6120      	str	r0, [r4, #16]
 80181ae:	b928      	cbnz	r0, 80181bc <_svfiprintf_r+0x30>
 80181b0:	230c      	movs	r3, #12
 80181b2:	f8c8 3000 	str.w	r3, [r8]
 80181b6:	f04f 30ff 	mov.w	r0, #4294967295
 80181ba:	e0c8      	b.n	801834e <_svfiprintf_r+0x1c2>
 80181bc:	2340      	movs	r3, #64	; 0x40
 80181be:	6163      	str	r3, [r4, #20]
 80181c0:	2300      	movs	r3, #0
 80181c2:	9309      	str	r3, [sp, #36]	; 0x24
 80181c4:	2320      	movs	r3, #32
 80181c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80181ca:	2330      	movs	r3, #48	; 0x30
 80181cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80181d0:	9503      	str	r5, [sp, #12]
 80181d2:	f04f 0b01 	mov.w	fp, #1
 80181d6:	4637      	mov	r7, r6
 80181d8:	463d      	mov	r5, r7
 80181da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80181de:	b10b      	cbz	r3, 80181e4 <_svfiprintf_r+0x58>
 80181e0:	2b25      	cmp	r3, #37	; 0x25
 80181e2:	d13e      	bne.n	8018262 <_svfiprintf_r+0xd6>
 80181e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80181e8:	d00b      	beq.n	8018202 <_svfiprintf_r+0x76>
 80181ea:	4653      	mov	r3, sl
 80181ec:	4632      	mov	r2, r6
 80181ee:	4621      	mov	r1, r4
 80181f0:	4640      	mov	r0, r8
 80181f2:	f7ff ff71 	bl	80180d8 <__ssputs_r>
 80181f6:	3001      	adds	r0, #1
 80181f8:	f000 80a4 	beq.w	8018344 <_svfiprintf_r+0x1b8>
 80181fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181fe:	4453      	add	r3, sl
 8018200:	9309      	str	r3, [sp, #36]	; 0x24
 8018202:	783b      	ldrb	r3, [r7, #0]
 8018204:	2b00      	cmp	r3, #0
 8018206:	f000 809d 	beq.w	8018344 <_svfiprintf_r+0x1b8>
 801820a:	2300      	movs	r3, #0
 801820c:	f04f 32ff 	mov.w	r2, #4294967295
 8018210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018214:	9304      	str	r3, [sp, #16]
 8018216:	9307      	str	r3, [sp, #28]
 8018218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801821c:	931a      	str	r3, [sp, #104]	; 0x68
 801821e:	462f      	mov	r7, r5
 8018220:	2205      	movs	r2, #5
 8018222:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018226:	4850      	ldr	r0, [pc, #320]	; (8018368 <_svfiprintf_r+0x1dc>)
 8018228:	f7e7 fff2 	bl	8000210 <memchr>
 801822c:	9b04      	ldr	r3, [sp, #16]
 801822e:	b9d0      	cbnz	r0, 8018266 <_svfiprintf_r+0xda>
 8018230:	06d9      	lsls	r1, r3, #27
 8018232:	bf44      	itt	mi
 8018234:	2220      	movmi	r2, #32
 8018236:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801823a:	071a      	lsls	r2, r3, #28
 801823c:	bf44      	itt	mi
 801823e:	222b      	movmi	r2, #43	; 0x2b
 8018240:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018244:	782a      	ldrb	r2, [r5, #0]
 8018246:	2a2a      	cmp	r2, #42	; 0x2a
 8018248:	d015      	beq.n	8018276 <_svfiprintf_r+0xea>
 801824a:	9a07      	ldr	r2, [sp, #28]
 801824c:	462f      	mov	r7, r5
 801824e:	2000      	movs	r0, #0
 8018250:	250a      	movs	r5, #10
 8018252:	4639      	mov	r1, r7
 8018254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018258:	3b30      	subs	r3, #48	; 0x30
 801825a:	2b09      	cmp	r3, #9
 801825c:	d94d      	bls.n	80182fa <_svfiprintf_r+0x16e>
 801825e:	b1b8      	cbz	r0, 8018290 <_svfiprintf_r+0x104>
 8018260:	e00f      	b.n	8018282 <_svfiprintf_r+0xf6>
 8018262:	462f      	mov	r7, r5
 8018264:	e7b8      	b.n	80181d8 <_svfiprintf_r+0x4c>
 8018266:	4a40      	ldr	r2, [pc, #256]	; (8018368 <_svfiprintf_r+0x1dc>)
 8018268:	1a80      	subs	r0, r0, r2
 801826a:	fa0b f000 	lsl.w	r0, fp, r0
 801826e:	4318      	orrs	r0, r3
 8018270:	9004      	str	r0, [sp, #16]
 8018272:	463d      	mov	r5, r7
 8018274:	e7d3      	b.n	801821e <_svfiprintf_r+0x92>
 8018276:	9a03      	ldr	r2, [sp, #12]
 8018278:	1d11      	adds	r1, r2, #4
 801827a:	6812      	ldr	r2, [r2, #0]
 801827c:	9103      	str	r1, [sp, #12]
 801827e:	2a00      	cmp	r2, #0
 8018280:	db01      	blt.n	8018286 <_svfiprintf_r+0xfa>
 8018282:	9207      	str	r2, [sp, #28]
 8018284:	e004      	b.n	8018290 <_svfiprintf_r+0x104>
 8018286:	4252      	negs	r2, r2
 8018288:	f043 0302 	orr.w	r3, r3, #2
 801828c:	9207      	str	r2, [sp, #28]
 801828e:	9304      	str	r3, [sp, #16]
 8018290:	783b      	ldrb	r3, [r7, #0]
 8018292:	2b2e      	cmp	r3, #46	; 0x2e
 8018294:	d10c      	bne.n	80182b0 <_svfiprintf_r+0x124>
 8018296:	787b      	ldrb	r3, [r7, #1]
 8018298:	2b2a      	cmp	r3, #42	; 0x2a
 801829a:	d133      	bne.n	8018304 <_svfiprintf_r+0x178>
 801829c:	9b03      	ldr	r3, [sp, #12]
 801829e:	1d1a      	adds	r2, r3, #4
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	9203      	str	r2, [sp, #12]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	bfb8      	it	lt
 80182a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80182ac:	3702      	adds	r7, #2
 80182ae:	9305      	str	r3, [sp, #20]
 80182b0:	4d2e      	ldr	r5, [pc, #184]	; (801836c <_svfiprintf_r+0x1e0>)
 80182b2:	7839      	ldrb	r1, [r7, #0]
 80182b4:	2203      	movs	r2, #3
 80182b6:	4628      	mov	r0, r5
 80182b8:	f7e7 ffaa 	bl	8000210 <memchr>
 80182bc:	b138      	cbz	r0, 80182ce <_svfiprintf_r+0x142>
 80182be:	2340      	movs	r3, #64	; 0x40
 80182c0:	1b40      	subs	r0, r0, r5
 80182c2:	fa03 f000 	lsl.w	r0, r3, r0
 80182c6:	9b04      	ldr	r3, [sp, #16]
 80182c8:	4303      	orrs	r3, r0
 80182ca:	3701      	adds	r7, #1
 80182cc:	9304      	str	r3, [sp, #16]
 80182ce:	7839      	ldrb	r1, [r7, #0]
 80182d0:	4827      	ldr	r0, [pc, #156]	; (8018370 <_svfiprintf_r+0x1e4>)
 80182d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80182d6:	2206      	movs	r2, #6
 80182d8:	1c7e      	adds	r6, r7, #1
 80182da:	f7e7 ff99 	bl	8000210 <memchr>
 80182de:	2800      	cmp	r0, #0
 80182e0:	d038      	beq.n	8018354 <_svfiprintf_r+0x1c8>
 80182e2:	4b24      	ldr	r3, [pc, #144]	; (8018374 <_svfiprintf_r+0x1e8>)
 80182e4:	bb13      	cbnz	r3, 801832c <_svfiprintf_r+0x1a0>
 80182e6:	9b03      	ldr	r3, [sp, #12]
 80182e8:	3307      	adds	r3, #7
 80182ea:	f023 0307 	bic.w	r3, r3, #7
 80182ee:	3308      	adds	r3, #8
 80182f0:	9303      	str	r3, [sp, #12]
 80182f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182f4:	444b      	add	r3, r9
 80182f6:	9309      	str	r3, [sp, #36]	; 0x24
 80182f8:	e76d      	b.n	80181d6 <_svfiprintf_r+0x4a>
 80182fa:	fb05 3202 	mla	r2, r5, r2, r3
 80182fe:	2001      	movs	r0, #1
 8018300:	460f      	mov	r7, r1
 8018302:	e7a6      	b.n	8018252 <_svfiprintf_r+0xc6>
 8018304:	2300      	movs	r3, #0
 8018306:	3701      	adds	r7, #1
 8018308:	9305      	str	r3, [sp, #20]
 801830a:	4619      	mov	r1, r3
 801830c:	250a      	movs	r5, #10
 801830e:	4638      	mov	r0, r7
 8018310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018314:	3a30      	subs	r2, #48	; 0x30
 8018316:	2a09      	cmp	r2, #9
 8018318:	d903      	bls.n	8018322 <_svfiprintf_r+0x196>
 801831a:	2b00      	cmp	r3, #0
 801831c:	d0c8      	beq.n	80182b0 <_svfiprintf_r+0x124>
 801831e:	9105      	str	r1, [sp, #20]
 8018320:	e7c6      	b.n	80182b0 <_svfiprintf_r+0x124>
 8018322:	fb05 2101 	mla	r1, r5, r1, r2
 8018326:	2301      	movs	r3, #1
 8018328:	4607      	mov	r7, r0
 801832a:	e7f0      	b.n	801830e <_svfiprintf_r+0x182>
 801832c:	ab03      	add	r3, sp, #12
 801832e:	9300      	str	r3, [sp, #0]
 8018330:	4622      	mov	r2, r4
 8018332:	4b11      	ldr	r3, [pc, #68]	; (8018378 <_svfiprintf_r+0x1ec>)
 8018334:	a904      	add	r1, sp, #16
 8018336:	4640      	mov	r0, r8
 8018338:	f7fc fb6a 	bl	8014a10 <_printf_float>
 801833c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018340:	4681      	mov	r9, r0
 8018342:	d1d6      	bne.n	80182f2 <_svfiprintf_r+0x166>
 8018344:	89a3      	ldrh	r3, [r4, #12]
 8018346:	065b      	lsls	r3, r3, #25
 8018348:	f53f af35 	bmi.w	80181b6 <_svfiprintf_r+0x2a>
 801834c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801834e:	b01d      	add	sp, #116	; 0x74
 8018350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018354:	ab03      	add	r3, sp, #12
 8018356:	9300      	str	r3, [sp, #0]
 8018358:	4622      	mov	r2, r4
 801835a:	4b07      	ldr	r3, [pc, #28]	; (8018378 <_svfiprintf_r+0x1ec>)
 801835c:	a904      	add	r1, sp, #16
 801835e:	4640      	mov	r0, r8
 8018360:	f7fc fe0c 	bl	8014f7c <_printf_i>
 8018364:	e7ea      	b.n	801833c <_svfiprintf_r+0x1b0>
 8018366:	bf00      	nop
 8018368:	080196c4 	.word	0x080196c4
 801836c:	080196ca 	.word	0x080196ca
 8018370:	080196ce 	.word	0x080196ce
 8018374:	08014a11 	.word	0x08014a11
 8018378:	080180d9 	.word	0x080180d9

0801837c <_sungetc_r>:
 801837c:	b538      	push	{r3, r4, r5, lr}
 801837e:	1c4b      	adds	r3, r1, #1
 8018380:	4614      	mov	r4, r2
 8018382:	d103      	bne.n	801838c <_sungetc_r+0x10>
 8018384:	f04f 35ff 	mov.w	r5, #4294967295
 8018388:	4628      	mov	r0, r5
 801838a:	bd38      	pop	{r3, r4, r5, pc}
 801838c:	8993      	ldrh	r3, [r2, #12]
 801838e:	f023 0320 	bic.w	r3, r3, #32
 8018392:	8193      	strh	r3, [r2, #12]
 8018394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018396:	6852      	ldr	r2, [r2, #4]
 8018398:	b2cd      	uxtb	r5, r1
 801839a:	b18b      	cbz	r3, 80183c0 <_sungetc_r+0x44>
 801839c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801839e:	4293      	cmp	r3, r2
 80183a0:	dd08      	ble.n	80183b4 <_sungetc_r+0x38>
 80183a2:	6823      	ldr	r3, [r4, #0]
 80183a4:	1e5a      	subs	r2, r3, #1
 80183a6:	6022      	str	r2, [r4, #0]
 80183a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80183ac:	6863      	ldr	r3, [r4, #4]
 80183ae:	3301      	adds	r3, #1
 80183b0:	6063      	str	r3, [r4, #4]
 80183b2:	e7e9      	b.n	8018388 <_sungetc_r+0xc>
 80183b4:	4621      	mov	r1, r4
 80183b6:	f000 fbc3 	bl	8018b40 <__submore>
 80183ba:	2800      	cmp	r0, #0
 80183bc:	d0f1      	beq.n	80183a2 <_sungetc_r+0x26>
 80183be:	e7e1      	b.n	8018384 <_sungetc_r+0x8>
 80183c0:	6921      	ldr	r1, [r4, #16]
 80183c2:	6823      	ldr	r3, [r4, #0]
 80183c4:	b151      	cbz	r1, 80183dc <_sungetc_r+0x60>
 80183c6:	4299      	cmp	r1, r3
 80183c8:	d208      	bcs.n	80183dc <_sungetc_r+0x60>
 80183ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80183ce:	42a9      	cmp	r1, r5
 80183d0:	d104      	bne.n	80183dc <_sungetc_r+0x60>
 80183d2:	3b01      	subs	r3, #1
 80183d4:	3201      	adds	r2, #1
 80183d6:	6023      	str	r3, [r4, #0]
 80183d8:	6062      	str	r2, [r4, #4]
 80183da:	e7d5      	b.n	8018388 <_sungetc_r+0xc>
 80183dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80183e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80183e4:	6363      	str	r3, [r4, #52]	; 0x34
 80183e6:	2303      	movs	r3, #3
 80183e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80183ea:	4623      	mov	r3, r4
 80183ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80183f0:	6023      	str	r3, [r4, #0]
 80183f2:	2301      	movs	r3, #1
 80183f4:	e7dc      	b.n	80183b0 <_sungetc_r+0x34>

080183f6 <__ssrefill_r>:
 80183f6:	b510      	push	{r4, lr}
 80183f8:	460c      	mov	r4, r1
 80183fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80183fc:	b169      	cbz	r1, 801841a <__ssrefill_r+0x24>
 80183fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018402:	4299      	cmp	r1, r3
 8018404:	d001      	beq.n	801840a <__ssrefill_r+0x14>
 8018406:	f7ff fdbf 	bl	8017f88 <_free_r>
 801840a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801840c:	6063      	str	r3, [r4, #4]
 801840e:	2000      	movs	r0, #0
 8018410:	6360      	str	r0, [r4, #52]	; 0x34
 8018412:	b113      	cbz	r3, 801841a <__ssrefill_r+0x24>
 8018414:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018416:	6023      	str	r3, [r4, #0]
 8018418:	bd10      	pop	{r4, pc}
 801841a:	6923      	ldr	r3, [r4, #16]
 801841c:	6023      	str	r3, [r4, #0]
 801841e:	2300      	movs	r3, #0
 8018420:	6063      	str	r3, [r4, #4]
 8018422:	89a3      	ldrh	r3, [r4, #12]
 8018424:	f043 0320 	orr.w	r3, r3, #32
 8018428:	81a3      	strh	r3, [r4, #12]
 801842a:	f04f 30ff 	mov.w	r0, #4294967295
 801842e:	e7f3      	b.n	8018418 <__ssrefill_r+0x22>

08018430 <__ssvfiscanf_r>:
 8018430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018434:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018438:	460c      	mov	r4, r1
 801843a:	2100      	movs	r1, #0
 801843c:	9144      	str	r1, [sp, #272]	; 0x110
 801843e:	9145      	str	r1, [sp, #276]	; 0x114
 8018440:	499f      	ldr	r1, [pc, #636]	; (80186c0 <__ssvfiscanf_r+0x290>)
 8018442:	91a0      	str	r1, [sp, #640]	; 0x280
 8018444:	f10d 0804 	add.w	r8, sp, #4
 8018448:	499e      	ldr	r1, [pc, #632]	; (80186c4 <__ssvfiscanf_r+0x294>)
 801844a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80186c8 <__ssvfiscanf_r+0x298>
 801844e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018452:	4606      	mov	r6, r0
 8018454:	4692      	mov	sl, r2
 8018456:	91a1      	str	r1, [sp, #644]	; 0x284
 8018458:	9300      	str	r3, [sp, #0]
 801845a:	270a      	movs	r7, #10
 801845c:	f89a 3000 	ldrb.w	r3, [sl]
 8018460:	2b00      	cmp	r3, #0
 8018462:	f000 812a 	beq.w	80186ba <__ssvfiscanf_r+0x28a>
 8018466:	4655      	mov	r5, sl
 8018468:	f7ff f948 	bl	80176fc <__locale_ctype_ptr>
 801846c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018470:	4458      	add	r0, fp
 8018472:	7843      	ldrb	r3, [r0, #1]
 8018474:	f013 0308 	ands.w	r3, r3, #8
 8018478:	d01c      	beq.n	80184b4 <__ssvfiscanf_r+0x84>
 801847a:	6863      	ldr	r3, [r4, #4]
 801847c:	2b00      	cmp	r3, #0
 801847e:	dd12      	ble.n	80184a6 <__ssvfiscanf_r+0x76>
 8018480:	f7ff f93c 	bl	80176fc <__locale_ctype_ptr>
 8018484:	6823      	ldr	r3, [r4, #0]
 8018486:	781a      	ldrb	r2, [r3, #0]
 8018488:	4410      	add	r0, r2
 801848a:	7842      	ldrb	r2, [r0, #1]
 801848c:	0712      	lsls	r2, r2, #28
 801848e:	d401      	bmi.n	8018494 <__ssvfiscanf_r+0x64>
 8018490:	46aa      	mov	sl, r5
 8018492:	e7e3      	b.n	801845c <__ssvfiscanf_r+0x2c>
 8018494:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018496:	3201      	adds	r2, #1
 8018498:	9245      	str	r2, [sp, #276]	; 0x114
 801849a:	6862      	ldr	r2, [r4, #4]
 801849c:	3301      	adds	r3, #1
 801849e:	3a01      	subs	r2, #1
 80184a0:	6062      	str	r2, [r4, #4]
 80184a2:	6023      	str	r3, [r4, #0]
 80184a4:	e7e9      	b.n	801847a <__ssvfiscanf_r+0x4a>
 80184a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80184a8:	4621      	mov	r1, r4
 80184aa:	4630      	mov	r0, r6
 80184ac:	4798      	blx	r3
 80184ae:	2800      	cmp	r0, #0
 80184b0:	d0e6      	beq.n	8018480 <__ssvfiscanf_r+0x50>
 80184b2:	e7ed      	b.n	8018490 <__ssvfiscanf_r+0x60>
 80184b4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80184b8:	f040 8082 	bne.w	80185c0 <__ssvfiscanf_r+0x190>
 80184bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80184be:	9341      	str	r3, [sp, #260]	; 0x104
 80184c0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80184c4:	2b2a      	cmp	r3, #42	; 0x2a
 80184c6:	d103      	bne.n	80184d0 <__ssvfiscanf_r+0xa0>
 80184c8:	2310      	movs	r3, #16
 80184ca:	9341      	str	r3, [sp, #260]	; 0x104
 80184cc:	f10a 0502 	add.w	r5, sl, #2
 80184d0:	46aa      	mov	sl, r5
 80184d2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80184d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80184da:	2a09      	cmp	r2, #9
 80184dc:	d922      	bls.n	8018524 <__ssvfiscanf_r+0xf4>
 80184de:	2203      	movs	r2, #3
 80184e0:	4879      	ldr	r0, [pc, #484]	; (80186c8 <__ssvfiscanf_r+0x298>)
 80184e2:	f7e7 fe95 	bl	8000210 <memchr>
 80184e6:	b138      	cbz	r0, 80184f8 <__ssvfiscanf_r+0xc8>
 80184e8:	eba0 0309 	sub.w	r3, r0, r9
 80184ec:	2001      	movs	r0, #1
 80184ee:	4098      	lsls	r0, r3
 80184f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80184f2:	4318      	orrs	r0, r3
 80184f4:	9041      	str	r0, [sp, #260]	; 0x104
 80184f6:	46aa      	mov	sl, r5
 80184f8:	f89a 3000 	ldrb.w	r3, [sl]
 80184fc:	2b67      	cmp	r3, #103	; 0x67
 80184fe:	f10a 0501 	add.w	r5, sl, #1
 8018502:	d82b      	bhi.n	801855c <__ssvfiscanf_r+0x12c>
 8018504:	2b65      	cmp	r3, #101	; 0x65
 8018506:	f080 809f 	bcs.w	8018648 <__ssvfiscanf_r+0x218>
 801850a:	2b47      	cmp	r3, #71	; 0x47
 801850c:	d810      	bhi.n	8018530 <__ssvfiscanf_r+0x100>
 801850e:	2b45      	cmp	r3, #69	; 0x45
 8018510:	f080 809a 	bcs.w	8018648 <__ssvfiscanf_r+0x218>
 8018514:	2b00      	cmp	r3, #0
 8018516:	d06c      	beq.n	80185f2 <__ssvfiscanf_r+0x1c2>
 8018518:	2b25      	cmp	r3, #37	; 0x25
 801851a:	d051      	beq.n	80185c0 <__ssvfiscanf_r+0x190>
 801851c:	2303      	movs	r3, #3
 801851e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018520:	9742      	str	r7, [sp, #264]	; 0x108
 8018522:	e027      	b.n	8018574 <__ssvfiscanf_r+0x144>
 8018524:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018526:	fb07 1303 	mla	r3, r7, r3, r1
 801852a:	3b30      	subs	r3, #48	; 0x30
 801852c:	9343      	str	r3, [sp, #268]	; 0x10c
 801852e:	e7cf      	b.n	80184d0 <__ssvfiscanf_r+0xa0>
 8018530:	2b5b      	cmp	r3, #91	; 0x5b
 8018532:	d06a      	beq.n	801860a <__ssvfiscanf_r+0x1da>
 8018534:	d80c      	bhi.n	8018550 <__ssvfiscanf_r+0x120>
 8018536:	2b58      	cmp	r3, #88	; 0x58
 8018538:	d1f0      	bne.n	801851c <__ssvfiscanf_r+0xec>
 801853a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801853c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018540:	9241      	str	r2, [sp, #260]	; 0x104
 8018542:	2210      	movs	r2, #16
 8018544:	9242      	str	r2, [sp, #264]	; 0x108
 8018546:	2b6e      	cmp	r3, #110	; 0x6e
 8018548:	bf8c      	ite	hi
 801854a:	2304      	movhi	r3, #4
 801854c:	2303      	movls	r3, #3
 801854e:	e010      	b.n	8018572 <__ssvfiscanf_r+0x142>
 8018550:	2b63      	cmp	r3, #99	; 0x63
 8018552:	d065      	beq.n	8018620 <__ssvfiscanf_r+0x1f0>
 8018554:	2b64      	cmp	r3, #100	; 0x64
 8018556:	d1e1      	bne.n	801851c <__ssvfiscanf_r+0xec>
 8018558:	9742      	str	r7, [sp, #264]	; 0x108
 801855a:	e7f4      	b.n	8018546 <__ssvfiscanf_r+0x116>
 801855c:	2b70      	cmp	r3, #112	; 0x70
 801855e:	d04b      	beq.n	80185f8 <__ssvfiscanf_r+0x1c8>
 8018560:	d826      	bhi.n	80185b0 <__ssvfiscanf_r+0x180>
 8018562:	2b6e      	cmp	r3, #110	; 0x6e
 8018564:	d062      	beq.n	801862c <__ssvfiscanf_r+0x1fc>
 8018566:	d84c      	bhi.n	8018602 <__ssvfiscanf_r+0x1d2>
 8018568:	2b69      	cmp	r3, #105	; 0x69
 801856a:	d1d7      	bne.n	801851c <__ssvfiscanf_r+0xec>
 801856c:	2300      	movs	r3, #0
 801856e:	9342      	str	r3, [sp, #264]	; 0x108
 8018570:	2303      	movs	r3, #3
 8018572:	9347      	str	r3, [sp, #284]	; 0x11c
 8018574:	6863      	ldr	r3, [r4, #4]
 8018576:	2b00      	cmp	r3, #0
 8018578:	dd68      	ble.n	801864c <__ssvfiscanf_r+0x21c>
 801857a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801857c:	0659      	lsls	r1, r3, #25
 801857e:	d407      	bmi.n	8018590 <__ssvfiscanf_r+0x160>
 8018580:	f7ff f8bc 	bl	80176fc <__locale_ctype_ptr>
 8018584:	6823      	ldr	r3, [r4, #0]
 8018586:	781a      	ldrb	r2, [r3, #0]
 8018588:	4410      	add	r0, r2
 801858a:	7842      	ldrb	r2, [r0, #1]
 801858c:	0712      	lsls	r2, r2, #28
 801858e:	d464      	bmi.n	801865a <__ssvfiscanf_r+0x22a>
 8018590:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018592:	2b02      	cmp	r3, #2
 8018594:	dc73      	bgt.n	801867e <__ssvfiscanf_r+0x24e>
 8018596:	466b      	mov	r3, sp
 8018598:	4622      	mov	r2, r4
 801859a:	a941      	add	r1, sp, #260	; 0x104
 801859c:	4630      	mov	r0, r6
 801859e:	f000 f897 	bl	80186d0 <_scanf_chars>
 80185a2:	2801      	cmp	r0, #1
 80185a4:	f000 8089 	beq.w	80186ba <__ssvfiscanf_r+0x28a>
 80185a8:	2802      	cmp	r0, #2
 80185aa:	f47f af71 	bne.w	8018490 <__ssvfiscanf_r+0x60>
 80185ae:	e01d      	b.n	80185ec <__ssvfiscanf_r+0x1bc>
 80185b0:	2b75      	cmp	r3, #117	; 0x75
 80185b2:	d0d1      	beq.n	8018558 <__ssvfiscanf_r+0x128>
 80185b4:	2b78      	cmp	r3, #120	; 0x78
 80185b6:	d0c0      	beq.n	801853a <__ssvfiscanf_r+0x10a>
 80185b8:	2b73      	cmp	r3, #115	; 0x73
 80185ba:	d1af      	bne.n	801851c <__ssvfiscanf_r+0xec>
 80185bc:	2302      	movs	r3, #2
 80185be:	e7d8      	b.n	8018572 <__ssvfiscanf_r+0x142>
 80185c0:	6863      	ldr	r3, [r4, #4]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	dd0c      	ble.n	80185e0 <__ssvfiscanf_r+0x1b0>
 80185c6:	6823      	ldr	r3, [r4, #0]
 80185c8:	781a      	ldrb	r2, [r3, #0]
 80185ca:	455a      	cmp	r2, fp
 80185cc:	d175      	bne.n	80186ba <__ssvfiscanf_r+0x28a>
 80185ce:	3301      	adds	r3, #1
 80185d0:	6862      	ldr	r2, [r4, #4]
 80185d2:	6023      	str	r3, [r4, #0]
 80185d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80185d6:	3a01      	subs	r2, #1
 80185d8:	3301      	adds	r3, #1
 80185da:	6062      	str	r2, [r4, #4]
 80185dc:	9345      	str	r3, [sp, #276]	; 0x114
 80185de:	e757      	b.n	8018490 <__ssvfiscanf_r+0x60>
 80185e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80185e2:	4621      	mov	r1, r4
 80185e4:	4630      	mov	r0, r6
 80185e6:	4798      	blx	r3
 80185e8:	2800      	cmp	r0, #0
 80185ea:	d0ec      	beq.n	80185c6 <__ssvfiscanf_r+0x196>
 80185ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80185ee:	2800      	cmp	r0, #0
 80185f0:	d159      	bne.n	80186a6 <__ssvfiscanf_r+0x276>
 80185f2:	f04f 30ff 	mov.w	r0, #4294967295
 80185f6:	e05c      	b.n	80186b2 <__ssvfiscanf_r+0x282>
 80185f8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80185fa:	f042 0220 	orr.w	r2, r2, #32
 80185fe:	9241      	str	r2, [sp, #260]	; 0x104
 8018600:	e79b      	b.n	801853a <__ssvfiscanf_r+0x10a>
 8018602:	2308      	movs	r3, #8
 8018604:	9342      	str	r3, [sp, #264]	; 0x108
 8018606:	2304      	movs	r3, #4
 8018608:	e7b3      	b.n	8018572 <__ssvfiscanf_r+0x142>
 801860a:	4629      	mov	r1, r5
 801860c:	4640      	mov	r0, r8
 801860e:	f000 f9c7 	bl	80189a0 <__sccl>
 8018612:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018618:	9341      	str	r3, [sp, #260]	; 0x104
 801861a:	4605      	mov	r5, r0
 801861c:	2301      	movs	r3, #1
 801861e:	e7a8      	b.n	8018572 <__ssvfiscanf_r+0x142>
 8018620:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018626:	9341      	str	r3, [sp, #260]	; 0x104
 8018628:	2300      	movs	r3, #0
 801862a:	e7a2      	b.n	8018572 <__ssvfiscanf_r+0x142>
 801862c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801862e:	06c3      	lsls	r3, r0, #27
 8018630:	f53f af2e 	bmi.w	8018490 <__ssvfiscanf_r+0x60>
 8018634:	9b00      	ldr	r3, [sp, #0]
 8018636:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018638:	1d19      	adds	r1, r3, #4
 801863a:	9100      	str	r1, [sp, #0]
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	07c0      	lsls	r0, r0, #31
 8018640:	bf4c      	ite	mi
 8018642:	801a      	strhmi	r2, [r3, #0]
 8018644:	601a      	strpl	r2, [r3, #0]
 8018646:	e723      	b.n	8018490 <__ssvfiscanf_r+0x60>
 8018648:	2305      	movs	r3, #5
 801864a:	e792      	b.n	8018572 <__ssvfiscanf_r+0x142>
 801864c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801864e:	4621      	mov	r1, r4
 8018650:	4630      	mov	r0, r6
 8018652:	4798      	blx	r3
 8018654:	2800      	cmp	r0, #0
 8018656:	d090      	beq.n	801857a <__ssvfiscanf_r+0x14a>
 8018658:	e7c8      	b.n	80185ec <__ssvfiscanf_r+0x1bc>
 801865a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801865c:	3201      	adds	r2, #1
 801865e:	9245      	str	r2, [sp, #276]	; 0x114
 8018660:	6862      	ldr	r2, [r4, #4]
 8018662:	3a01      	subs	r2, #1
 8018664:	2a00      	cmp	r2, #0
 8018666:	6062      	str	r2, [r4, #4]
 8018668:	dd02      	ble.n	8018670 <__ssvfiscanf_r+0x240>
 801866a:	3301      	adds	r3, #1
 801866c:	6023      	str	r3, [r4, #0]
 801866e:	e787      	b.n	8018580 <__ssvfiscanf_r+0x150>
 8018670:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018672:	4621      	mov	r1, r4
 8018674:	4630      	mov	r0, r6
 8018676:	4798      	blx	r3
 8018678:	2800      	cmp	r0, #0
 801867a:	d081      	beq.n	8018580 <__ssvfiscanf_r+0x150>
 801867c:	e7b6      	b.n	80185ec <__ssvfiscanf_r+0x1bc>
 801867e:	2b04      	cmp	r3, #4
 8018680:	dc06      	bgt.n	8018690 <__ssvfiscanf_r+0x260>
 8018682:	466b      	mov	r3, sp
 8018684:	4622      	mov	r2, r4
 8018686:	a941      	add	r1, sp, #260	; 0x104
 8018688:	4630      	mov	r0, r6
 801868a:	f000 f885 	bl	8018798 <_scanf_i>
 801868e:	e788      	b.n	80185a2 <__ssvfiscanf_r+0x172>
 8018690:	4b0e      	ldr	r3, [pc, #56]	; (80186cc <__ssvfiscanf_r+0x29c>)
 8018692:	2b00      	cmp	r3, #0
 8018694:	f43f aefc 	beq.w	8018490 <__ssvfiscanf_r+0x60>
 8018698:	466b      	mov	r3, sp
 801869a:	4622      	mov	r2, r4
 801869c:	a941      	add	r1, sp, #260	; 0x104
 801869e:	4630      	mov	r0, r6
 80186a0:	f7fc fd7e 	bl	80151a0 <_scanf_float>
 80186a4:	e77d      	b.n	80185a2 <__ssvfiscanf_r+0x172>
 80186a6:	89a3      	ldrh	r3, [r4, #12]
 80186a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80186ac:	bf18      	it	ne
 80186ae:	f04f 30ff 	movne.w	r0, #4294967295
 80186b2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80186b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 80186bc:	e7f9      	b.n	80186b2 <__ssvfiscanf_r+0x282>
 80186be:	bf00      	nop
 80186c0:	0801837d 	.word	0x0801837d
 80186c4:	080183f7 	.word	0x080183f7
 80186c8:	080196ca 	.word	0x080196ca
 80186cc:	080151a1 	.word	0x080151a1

080186d0 <_scanf_chars>:
 80186d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186d4:	4615      	mov	r5, r2
 80186d6:	688a      	ldr	r2, [r1, #8]
 80186d8:	4680      	mov	r8, r0
 80186da:	460c      	mov	r4, r1
 80186dc:	b932      	cbnz	r2, 80186ec <_scanf_chars+0x1c>
 80186de:	698a      	ldr	r2, [r1, #24]
 80186e0:	2a00      	cmp	r2, #0
 80186e2:	bf14      	ite	ne
 80186e4:	f04f 32ff 	movne.w	r2, #4294967295
 80186e8:	2201      	moveq	r2, #1
 80186ea:	608a      	str	r2, [r1, #8]
 80186ec:	6822      	ldr	r2, [r4, #0]
 80186ee:	06d1      	lsls	r1, r2, #27
 80186f0:	bf5f      	itttt	pl
 80186f2:	681a      	ldrpl	r2, [r3, #0]
 80186f4:	1d11      	addpl	r1, r2, #4
 80186f6:	6019      	strpl	r1, [r3, #0]
 80186f8:	6817      	ldrpl	r7, [r2, #0]
 80186fa:	2600      	movs	r6, #0
 80186fc:	69a3      	ldr	r3, [r4, #24]
 80186fe:	b1db      	cbz	r3, 8018738 <_scanf_chars+0x68>
 8018700:	2b01      	cmp	r3, #1
 8018702:	d107      	bne.n	8018714 <_scanf_chars+0x44>
 8018704:	682b      	ldr	r3, [r5, #0]
 8018706:	6962      	ldr	r2, [r4, #20]
 8018708:	781b      	ldrb	r3, [r3, #0]
 801870a:	5cd3      	ldrb	r3, [r2, r3]
 801870c:	b9a3      	cbnz	r3, 8018738 <_scanf_chars+0x68>
 801870e:	2e00      	cmp	r6, #0
 8018710:	d132      	bne.n	8018778 <_scanf_chars+0xa8>
 8018712:	e006      	b.n	8018722 <_scanf_chars+0x52>
 8018714:	2b02      	cmp	r3, #2
 8018716:	d007      	beq.n	8018728 <_scanf_chars+0x58>
 8018718:	2e00      	cmp	r6, #0
 801871a:	d12d      	bne.n	8018778 <_scanf_chars+0xa8>
 801871c:	69a3      	ldr	r3, [r4, #24]
 801871e:	2b01      	cmp	r3, #1
 8018720:	d12a      	bne.n	8018778 <_scanf_chars+0xa8>
 8018722:	2001      	movs	r0, #1
 8018724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018728:	f7fe ffe8 	bl	80176fc <__locale_ctype_ptr>
 801872c:	682b      	ldr	r3, [r5, #0]
 801872e:	781b      	ldrb	r3, [r3, #0]
 8018730:	4418      	add	r0, r3
 8018732:	7843      	ldrb	r3, [r0, #1]
 8018734:	071b      	lsls	r3, r3, #28
 8018736:	d4ef      	bmi.n	8018718 <_scanf_chars+0x48>
 8018738:	6823      	ldr	r3, [r4, #0]
 801873a:	06da      	lsls	r2, r3, #27
 801873c:	bf5e      	ittt	pl
 801873e:	682b      	ldrpl	r3, [r5, #0]
 8018740:	781b      	ldrbpl	r3, [r3, #0]
 8018742:	703b      	strbpl	r3, [r7, #0]
 8018744:	682a      	ldr	r2, [r5, #0]
 8018746:	686b      	ldr	r3, [r5, #4]
 8018748:	f102 0201 	add.w	r2, r2, #1
 801874c:	602a      	str	r2, [r5, #0]
 801874e:	68a2      	ldr	r2, [r4, #8]
 8018750:	f103 33ff 	add.w	r3, r3, #4294967295
 8018754:	f102 32ff 	add.w	r2, r2, #4294967295
 8018758:	606b      	str	r3, [r5, #4]
 801875a:	f106 0601 	add.w	r6, r6, #1
 801875e:	bf58      	it	pl
 8018760:	3701      	addpl	r7, #1
 8018762:	60a2      	str	r2, [r4, #8]
 8018764:	b142      	cbz	r2, 8018778 <_scanf_chars+0xa8>
 8018766:	2b00      	cmp	r3, #0
 8018768:	dcc8      	bgt.n	80186fc <_scanf_chars+0x2c>
 801876a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801876e:	4629      	mov	r1, r5
 8018770:	4640      	mov	r0, r8
 8018772:	4798      	blx	r3
 8018774:	2800      	cmp	r0, #0
 8018776:	d0c1      	beq.n	80186fc <_scanf_chars+0x2c>
 8018778:	6823      	ldr	r3, [r4, #0]
 801877a:	f013 0310 	ands.w	r3, r3, #16
 801877e:	d105      	bne.n	801878c <_scanf_chars+0xbc>
 8018780:	68e2      	ldr	r2, [r4, #12]
 8018782:	3201      	adds	r2, #1
 8018784:	60e2      	str	r2, [r4, #12]
 8018786:	69a2      	ldr	r2, [r4, #24]
 8018788:	b102      	cbz	r2, 801878c <_scanf_chars+0xbc>
 801878a:	703b      	strb	r3, [r7, #0]
 801878c:	6923      	ldr	r3, [r4, #16]
 801878e:	441e      	add	r6, r3
 8018790:	6126      	str	r6, [r4, #16]
 8018792:	2000      	movs	r0, #0
 8018794:	e7c6      	b.n	8018724 <_scanf_chars+0x54>
	...

08018798 <_scanf_i>:
 8018798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801879c:	469a      	mov	sl, r3
 801879e:	4b74      	ldr	r3, [pc, #464]	; (8018970 <_scanf_i+0x1d8>)
 80187a0:	460c      	mov	r4, r1
 80187a2:	4683      	mov	fp, r0
 80187a4:	4616      	mov	r6, r2
 80187a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80187aa:	b087      	sub	sp, #28
 80187ac:	ab03      	add	r3, sp, #12
 80187ae:	68a7      	ldr	r7, [r4, #8]
 80187b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80187b4:	4b6f      	ldr	r3, [pc, #444]	; (8018974 <_scanf_i+0x1dc>)
 80187b6:	69a1      	ldr	r1, [r4, #24]
 80187b8:	4a6f      	ldr	r2, [pc, #444]	; (8018978 <_scanf_i+0x1e0>)
 80187ba:	2903      	cmp	r1, #3
 80187bc:	bf08      	it	eq
 80187be:	461a      	moveq	r2, r3
 80187c0:	1e7b      	subs	r3, r7, #1
 80187c2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80187c6:	bf84      	itt	hi
 80187c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80187cc:	60a3      	strhi	r3, [r4, #8]
 80187ce:	6823      	ldr	r3, [r4, #0]
 80187d0:	9200      	str	r2, [sp, #0]
 80187d2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80187d6:	bf88      	it	hi
 80187d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80187dc:	f104 091c 	add.w	r9, r4, #28
 80187e0:	6023      	str	r3, [r4, #0]
 80187e2:	bf8c      	ite	hi
 80187e4:	197f      	addhi	r7, r7, r5
 80187e6:	2700      	movls	r7, #0
 80187e8:	464b      	mov	r3, r9
 80187ea:	f04f 0800 	mov.w	r8, #0
 80187ee:	9301      	str	r3, [sp, #4]
 80187f0:	6831      	ldr	r1, [r6, #0]
 80187f2:	ab03      	add	r3, sp, #12
 80187f4:	2202      	movs	r2, #2
 80187f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80187fa:	7809      	ldrb	r1, [r1, #0]
 80187fc:	f7e7 fd08 	bl	8000210 <memchr>
 8018800:	9b01      	ldr	r3, [sp, #4]
 8018802:	b330      	cbz	r0, 8018852 <_scanf_i+0xba>
 8018804:	f1b8 0f01 	cmp.w	r8, #1
 8018808:	d15a      	bne.n	80188c0 <_scanf_i+0x128>
 801880a:	6862      	ldr	r2, [r4, #4]
 801880c:	b92a      	cbnz	r2, 801881a <_scanf_i+0x82>
 801880e:	6822      	ldr	r2, [r4, #0]
 8018810:	2108      	movs	r1, #8
 8018812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018816:	6061      	str	r1, [r4, #4]
 8018818:	6022      	str	r2, [r4, #0]
 801881a:	6822      	ldr	r2, [r4, #0]
 801881c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018820:	6022      	str	r2, [r4, #0]
 8018822:	68a2      	ldr	r2, [r4, #8]
 8018824:	1e51      	subs	r1, r2, #1
 8018826:	60a1      	str	r1, [r4, #8]
 8018828:	b19a      	cbz	r2, 8018852 <_scanf_i+0xba>
 801882a:	6832      	ldr	r2, [r6, #0]
 801882c:	1c51      	adds	r1, r2, #1
 801882e:	6031      	str	r1, [r6, #0]
 8018830:	7812      	ldrb	r2, [r2, #0]
 8018832:	701a      	strb	r2, [r3, #0]
 8018834:	1c5d      	adds	r5, r3, #1
 8018836:	6873      	ldr	r3, [r6, #4]
 8018838:	3b01      	subs	r3, #1
 801883a:	2b00      	cmp	r3, #0
 801883c:	6073      	str	r3, [r6, #4]
 801883e:	dc07      	bgt.n	8018850 <_scanf_i+0xb8>
 8018840:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018844:	4631      	mov	r1, r6
 8018846:	4658      	mov	r0, fp
 8018848:	4798      	blx	r3
 801884a:	2800      	cmp	r0, #0
 801884c:	f040 8086 	bne.w	801895c <_scanf_i+0x1c4>
 8018850:	462b      	mov	r3, r5
 8018852:	f108 0801 	add.w	r8, r8, #1
 8018856:	f1b8 0f03 	cmp.w	r8, #3
 801885a:	d1c8      	bne.n	80187ee <_scanf_i+0x56>
 801885c:	6862      	ldr	r2, [r4, #4]
 801885e:	b90a      	cbnz	r2, 8018864 <_scanf_i+0xcc>
 8018860:	220a      	movs	r2, #10
 8018862:	6062      	str	r2, [r4, #4]
 8018864:	6862      	ldr	r2, [r4, #4]
 8018866:	4945      	ldr	r1, [pc, #276]	; (801897c <_scanf_i+0x1e4>)
 8018868:	6960      	ldr	r0, [r4, #20]
 801886a:	9301      	str	r3, [sp, #4]
 801886c:	1a89      	subs	r1, r1, r2
 801886e:	f000 f897 	bl	80189a0 <__sccl>
 8018872:	9b01      	ldr	r3, [sp, #4]
 8018874:	f04f 0800 	mov.w	r8, #0
 8018878:	461d      	mov	r5, r3
 801887a:	68a3      	ldr	r3, [r4, #8]
 801887c:	6822      	ldr	r2, [r4, #0]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d03a      	beq.n	80188f8 <_scanf_i+0x160>
 8018882:	6831      	ldr	r1, [r6, #0]
 8018884:	6960      	ldr	r0, [r4, #20]
 8018886:	f891 c000 	ldrb.w	ip, [r1]
 801888a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801888e:	2800      	cmp	r0, #0
 8018890:	d032      	beq.n	80188f8 <_scanf_i+0x160>
 8018892:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018896:	d121      	bne.n	80188dc <_scanf_i+0x144>
 8018898:	0510      	lsls	r0, r2, #20
 801889a:	d51f      	bpl.n	80188dc <_scanf_i+0x144>
 801889c:	f108 0801 	add.w	r8, r8, #1
 80188a0:	b117      	cbz	r7, 80188a8 <_scanf_i+0x110>
 80188a2:	3301      	adds	r3, #1
 80188a4:	3f01      	subs	r7, #1
 80188a6:	60a3      	str	r3, [r4, #8]
 80188a8:	6873      	ldr	r3, [r6, #4]
 80188aa:	3b01      	subs	r3, #1
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	6073      	str	r3, [r6, #4]
 80188b0:	dd1b      	ble.n	80188ea <_scanf_i+0x152>
 80188b2:	6833      	ldr	r3, [r6, #0]
 80188b4:	3301      	adds	r3, #1
 80188b6:	6033      	str	r3, [r6, #0]
 80188b8:	68a3      	ldr	r3, [r4, #8]
 80188ba:	3b01      	subs	r3, #1
 80188bc:	60a3      	str	r3, [r4, #8]
 80188be:	e7dc      	b.n	801887a <_scanf_i+0xe2>
 80188c0:	f1b8 0f02 	cmp.w	r8, #2
 80188c4:	d1ad      	bne.n	8018822 <_scanf_i+0x8a>
 80188c6:	6822      	ldr	r2, [r4, #0]
 80188c8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80188cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80188d0:	d1bf      	bne.n	8018852 <_scanf_i+0xba>
 80188d2:	2110      	movs	r1, #16
 80188d4:	6061      	str	r1, [r4, #4]
 80188d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80188da:	e7a1      	b.n	8018820 <_scanf_i+0x88>
 80188dc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80188e0:	6022      	str	r2, [r4, #0]
 80188e2:	780b      	ldrb	r3, [r1, #0]
 80188e4:	702b      	strb	r3, [r5, #0]
 80188e6:	3501      	adds	r5, #1
 80188e8:	e7de      	b.n	80188a8 <_scanf_i+0x110>
 80188ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80188ee:	4631      	mov	r1, r6
 80188f0:	4658      	mov	r0, fp
 80188f2:	4798      	blx	r3
 80188f4:	2800      	cmp	r0, #0
 80188f6:	d0df      	beq.n	80188b8 <_scanf_i+0x120>
 80188f8:	6823      	ldr	r3, [r4, #0]
 80188fa:	05d9      	lsls	r1, r3, #23
 80188fc:	d50c      	bpl.n	8018918 <_scanf_i+0x180>
 80188fe:	454d      	cmp	r5, r9
 8018900:	d908      	bls.n	8018914 <_scanf_i+0x17c>
 8018902:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801890a:	4632      	mov	r2, r6
 801890c:	4658      	mov	r0, fp
 801890e:	4798      	blx	r3
 8018910:	1e6f      	subs	r7, r5, #1
 8018912:	463d      	mov	r5, r7
 8018914:	454d      	cmp	r5, r9
 8018916:	d029      	beq.n	801896c <_scanf_i+0x1d4>
 8018918:	6822      	ldr	r2, [r4, #0]
 801891a:	f012 0210 	ands.w	r2, r2, #16
 801891e:	d113      	bne.n	8018948 <_scanf_i+0x1b0>
 8018920:	702a      	strb	r2, [r5, #0]
 8018922:	6863      	ldr	r3, [r4, #4]
 8018924:	9e00      	ldr	r6, [sp, #0]
 8018926:	4649      	mov	r1, r9
 8018928:	4658      	mov	r0, fp
 801892a:	47b0      	blx	r6
 801892c:	f8da 3000 	ldr.w	r3, [sl]
 8018930:	6821      	ldr	r1, [r4, #0]
 8018932:	1d1a      	adds	r2, r3, #4
 8018934:	f8ca 2000 	str.w	r2, [sl]
 8018938:	f011 0f20 	tst.w	r1, #32
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	d010      	beq.n	8018962 <_scanf_i+0x1ca>
 8018940:	6018      	str	r0, [r3, #0]
 8018942:	68e3      	ldr	r3, [r4, #12]
 8018944:	3301      	adds	r3, #1
 8018946:	60e3      	str	r3, [r4, #12]
 8018948:	eba5 0509 	sub.w	r5, r5, r9
 801894c:	44a8      	add	r8, r5
 801894e:	6925      	ldr	r5, [r4, #16]
 8018950:	4445      	add	r5, r8
 8018952:	6125      	str	r5, [r4, #16]
 8018954:	2000      	movs	r0, #0
 8018956:	b007      	add	sp, #28
 8018958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801895c:	f04f 0800 	mov.w	r8, #0
 8018960:	e7ca      	b.n	80188f8 <_scanf_i+0x160>
 8018962:	07ca      	lsls	r2, r1, #31
 8018964:	bf4c      	ite	mi
 8018966:	8018      	strhmi	r0, [r3, #0]
 8018968:	6018      	strpl	r0, [r3, #0]
 801896a:	e7ea      	b.n	8018942 <_scanf_i+0x1aa>
 801896c:	2001      	movs	r0, #1
 801896e:	e7f2      	b.n	8018956 <_scanf_i+0x1be>
 8018970:	08019228 	.word	0x08019228
 8018974:	080163b9 	.word	0x080163b9
 8018978:	08018b1d 	.word	0x08018b1d
 801897c:	080196e5 	.word	0x080196e5

08018980 <_sbrk_r>:
 8018980:	b538      	push	{r3, r4, r5, lr}
 8018982:	4c06      	ldr	r4, [pc, #24]	; (801899c <_sbrk_r+0x1c>)
 8018984:	2300      	movs	r3, #0
 8018986:	4605      	mov	r5, r0
 8018988:	4608      	mov	r0, r1
 801898a:	6023      	str	r3, [r4, #0]
 801898c:	f7ee fbb4 	bl	80070f8 <_sbrk>
 8018990:	1c43      	adds	r3, r0, #1
 8018992:	d102      	bne.n	801899a <_sbrk_r+0x1a>
 8018994:	6823      	ldr	r3, [r4, #0]
 8018996:	b103      	cbz	r3, 801899a <_sbrk_r+0x1a>
 8018998:	602b      	str	r3, [r5, #0]
 801899a:	bd38      	pop	{r3, r4, r5, pc}
 801899c:	20040e6c 	.word	0x20040e6c

080189a0 <__sccl>:
 80189a0:	b570      	push	{r4, r5, r6, lr}
 80189a2:	780b      	ldrb	r3, [r1, #0]
 80189a4:	2b5e      	cmp	r3, #94	; 0x5e
 80189a6:	bf13      	iteet	ne
 80189a8:	1c4a      	addne	r2, r1, #1
 80189aa:	1c8a      	addeq	r2, r1, #2
 80189ac:	784b      	ldrbeq	r3, [r1, #1]
 80189ae:	2100      	movne	r1, #0
 80189b0:	bf08      	it	eq
 80189b2:	2101      	moveq	r1, #1
 80189b4:	1e44      	subs	r4, r0, #1
 80189b6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80189ba:	f804 1f01 	strb.w	r1, [r4, #1]!
 80189be:	42ac      	cmp	r4, r5
 80189c0:	d1fb      	bne.n	80189ba <__sccl+0x1a>
 80189c2:	b913      	cbnz	r3, 80189ca <__sccl+0x2a>
 80189c4:	3a01      	subs	r2, #1
 80189c6:	4610      	mov	r0, r2
 80189c8:	bd70      	pop	{r4, r5, r6, pc}
 80189ca:	f081 0401 	eor.w	r4, r1, #1
 80189ce:	54c4      	strb	r4, [r0, r3]
 80189d0:	1c51      	adds	r1, r2, #1
 80189d2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80189d6:	2d2d      	cmp	r5, #45	; 0x2d
 80189d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80189dc:	460a      	mov	r2, r1
 80189de:	d006      	beq.n	80189ee <__sccl+0x4e>
 80189e0:	2d5d      	cmp	r5, #93	; 0x5d
 80189e2:	d0f0      	beq.n	80189c6 <__sccl+0x26>
 80189e4:	b90d      	cbnz	r5, 80189ea <__sccl+0x4a>
 80189e6:	4632      	mov	r2, r6
 80189e8:	e7ed      	b.n	80189c6 <__sccl+0x26>
 80189ea:	462b      	mov	r3, r5
 80189ec:	e7ef      	b.n	80189ce <__sccl+0x2e>
 80189ee:	780e      	ldrb	r6, [r1, #0]
 80189f0:	2e5d      	cmp	r6, #93	; 0x5d
 80189f2:	d0fa      	beq.n	80189ea <__sccl+0x4a>
 80189f4:	42b3      	cmp	r3, r6
 80189f6:	dcf8      	bgt.n	80189ea <__sccl+0x4a>
 80189f8:	3301      	adds	r3, #1
 80189fa:	429e      	cmp	r6, r3
 80189fc:	54c4      	strb	r4, [r0, r3]
 80189fe:	dcfb      	bgt.n	80189f8 <__sccl+0x58>
 8018a00:	3102      	adds	r1, #2
 8018a02:	e7e6      	b.n	80189d2 <__sccl+0x32>

08018a04 <strncmp>:
 8018a04:	b510      	push	{r4, lr}
 8018a06:	b16a      	cbz	r2, 8018a24 <strncmp+0x20>
 8018a08:	3901      	subs	r1, #1
 8018a0a:	1884      	adds	r4, r0, r2
 8018a0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018a14:	4293      	cmp	r3, r2
 8018a16:	d103      	bne.n	8018a20 <strncmp+0x1c>
 8018a18:	42a0      	cmp	r0, r4
 8018a1a:	d001      	beq.n	8018a20 <strncmp+0x1c>
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d1f5      	bne.n	8018a0c <strncmp+0x8>
 8018a20:	1a98      	subs	r0, r3, r2
 8018a22:	bd10      	pop	{r4, pc}
 8018a24:	4610      	mov	r0, r2
 8018a26:	e7fc      	b.n	8018a22 <strncmp+0x1e>

08018a28 <_strtoul_l.isra.0>:
 8018a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a2c:	4680      	mov	r8, r0
 8018a2e:	4689      	mov	r9, r1
 8018a30:	4692      	mov	sl, r2
 8018a32:	461e      	mov	r6, r3
 8018a34:	460f      	mov	r7, r1
 8018a36:	463d      	mov	r5, r7
 8018a38:	9808      	ldr	r0, [sp, #32]
 8018a3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a3e:	f7fe fe59 	bl	80176f4 <__locale_ctype_ptr_l>
 8018a42:	4420      	add	r0, r4
 8018a44:	7843      	ldrb	r3, [r0, #1]
 8018a46:	f013 0308 	ands.w	r3, r3, #8
 8018a4a:	d130      	bne.n	8018aae <_strtoul_l.isra.0+0x86>
 8018a4c:	2c2d      	cmp	r4, #45	; 0x2d
 8018a4e:	d130      	bne.n	8018ab2 <_strtoul_l.isra.0+0x8a>
 8018a50:	787c      	ldrb	r4, [r7, #1]
 8018a52:	1cbd      	adds	r5, r7, #2
 8018a54:	2101      	movs	r1, #1
 8018a56:	2e00      	cmp	r6, #0
 8018a58:	d05c      	beq.n	8018b14 <_strtoul_l.isra.0+0xec>
 8018a5a:	2e10      	cmp	r6, #16
 8018a5c:	d109      	bne.n	8018a72 <_strtoul_l.isra.0+0x4a>
 8018a5e:	2c30      	cmp	r4, #48	; 0x30
 8018a60:	d107      	bne.n	8018a72 <_strtoul_l.isra.0+0x4a>
 8018a62:	782b      	ldrb	r3, [r5, #0]
 8018a64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018a68:	2b58      	cmp	r3, #88	; 0x58
 8018a6a:	d14e      	bne.n	8018b0a <_strtoul_l.isra.0+0xe2>
 8018a6c:	786c      	ldrb	r4, [r5, #1]
 8018a6e:	2610      	movs	r6, #16
 8018a70:	3502      	adds	r5, #2
 8018a72:	f04f 32ff 	mov.w	r2, #4294967295
 8018a76:	2300      	movs	r3, #0
 8018a78:	fbb2 f2f6 	udiv	r2, r2, r6
 8018a7c:	fb06 fc02 	mul.w	ip, r6, r2
 8018a80:	ea6f 0c0c 	mvn.w	ip, ip
 8018a84:	4618      	mov	r0, r3
 8018a86:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018a8a:	2f09      	cmp	r7, #9
 8018a8c:	d817      	bhi.n	8018abe <_strtoul_l.isra.0+0x96>
 8018a8e:	463c      	mov	r4, r7
 8018a90:	42a6      	cmp	r6, r4
 8018a92:	dd23      	ble.n	8018adc <_strtoul_l.isra.0+0xb4>
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	db1e      	blt.n	8018ad6 <_strtoul_l.isra.0+0xae>
 8018a98:	4282      	cmp	r2, r0
 8018a9a:	d31c      	bcc.n	8018ad6 <_strtoul_l.isra.0+0xae>
 8018a9c:	d101      	bne.n	8018aa2 <_strtoul_l.isra.0+0x7a>
 8018a9e:	45a4      	cmp	ip, r4
 8018aa0:	db19      	blt.n	8018ad6 <_strtoul_l.isra.0+0xae>
 8018aa2:	fb00 4006 	mla	r0, r0, r6, r4
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018aac:	e7eb      	b.n	8018a86 <_strtoul_l.isra.0+0x5e>
 8018aae:	462f      	mov	r7, r5
 8018ab0:	e7c1      	b.n	8018a36 <_strtoul_l.isra.0+0xe>
 8018ab2:	2c2b      	cmp	r4, #43	; 0x2b
 8018ab4:	bf04      	itt	eq
 8018ab6:	1cbd      	addeq	r5, r7, #2
 8018ab8:	787c      	ldrbeq	r4, [r7, #1]
 8018aba:	4619      	mov	r1, r3
 8018abc:	e7cb      	b.n	8018a56 <_strtoul_l.isra.0+0x2e>
 8018abe:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018ac2:	2f19      	cmp	r7, #25
 8018ac4:	d801      	bhi.n	8018aca <_strtoul_l.isra.0+0xa2>
 8018ac6:	3c37      	subs	r4, #55	; 0x37
 8018ac8:	e7e2      	b.n	8018a90 <_strtoul_l.isra.0+0x68>
 8018aca:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018ace:	2f19      	cmp	r7, #25
 8018ad0:	d804      	bhi.n	8018adc <_strtoul_l.isra.0+0xb4>
 8018ad2:	3c57      	subs	r4, #87	; 0x57
 8018ad4:	e7dc      	b.n	8018a90 <_strtoul_l.isra.0+0x68>
 8018ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8018ada:	e7e5      	b.n	8018aa8 <_strtoul_l.isra.0+0x80>
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	da09      	bge.n	8018af4 <_strtoul_l.isra.0+0xcc>
 8018ae0:	2322      	movs	r3, #34	; 0x22
 8018ae2:	f8c8 3000 	str.w	r3, [r8]
 8018ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8018aea:	f1ba 0f00 	cmp.w	sl, #0
 8018aee:	d107      	bne.n	8018b00 <_strtoul_l.isra.0+0xd8>
 8018af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018af4:	b101      	cbz	r1, 8018af8 <_strtoul_l.isra.0+0xd0>
 8018af6:	4240      	negs	r0, r0
 8018af8:	f1ba 0f00 	cmp.w	sl, #0
 8018afc:	d0f8      	beq.n	8018af0 <_strtoul_l.isra.0+0xc8>
 8018afe:	b10b      	cbz	r3, 8018b04 <_strtoul_l.isra.0+0xdc>
 8018b00:	f105 39ff 	add.w	r9, r5, #4294967295
 8018b04:	f8ca 9000 	str.w	r9, [sl]
 8018b08:	e7f2      	b.n	8018af0 <_strtoul_l.isra.0+0xc8>
 8018b0a:	2430      	movs	r4, #48	; 0x30
 8018b0c:	2e00      	cmp	r6, #0
 8018b0e:	d1b0      	bne.n	8018a72 <_strtoul_l.isra.0+0x4a>
 8018b10:	2608      	movs	r6, #8
 8018b12:	e7ae      	b.n	8018a72 <_strtoul_l.isra.0+0x4a>
 8018b14:	2c30      	cmp	r4, #48	; 0x30
 8018b16:	d0a4      	beq.n	8018a62 <_strtoul_l.isra.0+0x3a>
 8018b18:	260a      	movs	r6, #10
 8018b1a:	e7aa      	b.n	8018a72 <_strtoul_l.isra.0+0x4a>

08018b1c <_strtoul_r>:
 8018b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b1e:	4c06      	ldr	r4, [pc, #24]	; (8018b38 <_strtoul_r+0x1c>)
 8018b20:	4d06      	ldr	r5, [pc, #24]	; (8018b3c <_strtoul_r+0x20>)
 8018b22:	6824      	ldr	r4, [r4, #0]
 8018b24:	6a24      	ldr	r4, [r4, #32]
 8018b26:	2c00      	cmp	r4, #0
 8018b28:	bf08      	it	eq
 8018b2a:	462c      	moveq	r4, r5
 8018b2c:	9400      	str	r4, [sp, #0]
 8018b2e:	f7ff ff7b 	bl	8018a28 <_strtoul_l.isra.0>
 8018b32:	b003      	add	sp, #12
 8018b34:	bd30      	pop	{r4, r5, pc}
 8018b36:	bf00      	nop
 8018b38:	2000000c 	.word	0x2000000c
 8018b3c:	20000070 	.word	0x20000070

08018b40 <__submore>:
 8018b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b44:	460c      	mov	r4, r1
 8018b46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b4c:	4299      	cmp	r1, r3
 8018b4e:	d11d      	bne.n	8018b8c <__submore+0x4c>
 8018b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018b54:	f7ff fa66 	bl	8018024 <_malloc_r>
 8018b58:	b918      	cbnz	r0, 8018b62 <__submore+0x22>
 8018b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8018b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b66:	63a3      	str	r3, [r4, #56]	; 0x38
 8018b68:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018b6c:	6360      	str	r0, [r4, #52]	; 0x34
 8018b6e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018b72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018b76:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018b7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018b7e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018b82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018b86:	6020      	str	r0, [r4, #0]
 8018b88:	2000      	movs	r0, #0
 8018b8a:	e7e8      	b.n	8018b5e <__submore+0x1e>
 8018b8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018b8e:	0077      	lsls	r7, r6, #1
 8018b90:	463a      	mov	r2, r7
 8018b92:	f000 f837 	bl	8018c04 <_realloc_r>
 8018b96:	4605      	mov	r5, r0
 8018b98:	2800      	cmp	r0, #0
 8018b9a:	d0de      	beq.n	8018b5a <__submore+0x1a>
 8018b9c:	eb00 0806 	add.w	r8, r0, r6
 8018ba0:	4601      	mov	r1, r0
 8018ba2:	4632      	mov	r2, r6
 8018ba4:	4640      	mov	r0, r8
 8018ba6:	f7fb fe8b 	bl	80148c0 <memcpy>
 8018baa:	f8c4 8000 	str.w	r8, [r4]
 8018bae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018bb2:	e7e9      	b.n	8018b88 <__submore+0x48>

08018bb4 <__ascii_wctomb>:
 8018bb4:	b149      	cbz	r1, 8018bca <__ascii_wctomb+0x16>
 8018bb6:	2aff      	cmp	r2, #255	; 0xff
 8018bb8:	bf85      	ittet	hi
 8018bba:	238a      	movhi	r3, #138	; 0x8a
 8018bbc:	6003      	strhi	r3, [r0, #0]
 8018bbe:	700a      	strbls	r2, [r1, #0]
 8018bc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8018bc4:	bf98      	it	ls
 8018bc6:	2001      	movls	r0, #1
 8018bc8:	4770      	bx	lr
 8018bca:	4608      	mov	r0, r1
 8018bcc:	4770      	bx	lr

08018bce <memmove>:
 8018bce:	4288      	cmp	r0, r1
 8018bd0:	b510      	push	{r4, lr}
 8018bd2:	eb01 0302 	add.w	r3, r1, r2
 8018bd6:	d807      	bhi.n	8018be8 <memmove+0x1a>
 8018bd8:	1e42      	subs	r2, r0, #1
 8018bda:	4299      	cmp	r1, r3
 8018bdc:	d00a      	beq.n	8018bf4 <memmove+0x26>
 8018bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018be2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018be6:	e7f8      	b.n	8018bda <memmove+0xc>
 8018be8:	4283      	cmp	r3, r0
 8018bea:	d9f5      	bls.n	8018bd8 <memmove+0xa>
 8018bec:	1881      	adds	r1, r0, r2
 8018bee:	1ad2      	subs	r2, r2, r3
 8018bf0:	42d3      	cmn	r3, r2
 8018bf2:	d100      	bne.n	8018bf6 <memmove+0x28>
 8018bf4:	bd10      	pop	{r4, pc}
 8018bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018bfa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018bfe:	e7f7      	b.n	8018bf0 <memmove+0x22>

08018c00 <__malloc_lock>:
 8018c00:	4770      	bx	lr

08018c02 <__malloc_unlock>:
 8018c02:	4770      	bx	lr

08018c04 <_realloc_r>:
 8018c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c06:	4607      	mov	r7, r0
 8018c08:	4614      	mov	r4, r2
 8018c0a:	460e      	mov	r6, r1
 8018c0c:	b921      	cbnz	r1, 8018c18 <_realloc_r+0x14>
 8018c0e:	4611      	mov	r1, r2
 8018c10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018c14:	f7ff ba06 	b.w	8018024 <_malloc_r>
 8018c18:	b922      	cbnz	r2, 8018c24 <_realloc_r+0x20>
 8018c1a:	f7ff f9b5 	bl	8017f88 <_free_r>
 8018c1e:	4625      	mov	r5, r4
 8018c20:	4628      	mov	r0, r5
 8018c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c24:	f000 f814 	bl	8018c50 <_malloc_usable_size_r>
 8018c28:	42a0      	cmp	r0, r4
 8018c2a:	d20f      	bcs.n	8018c4c <_realloc_r+0x48>
 8018c2c:	4621      	mov	r1, r4
 8018c2e:	4638      	mov	r0, r7
 8018c30:	f7ff f9f8 	bl	8018024 <_malloc_r>
 8018c34:	4605      	mov	r5, r0
 8018c36:	2800      	cmp	r0, #0
 8018c38:	d0f2      	beq.n	8018c20 <_realloc_r+0x1c>
 8018c3a:	4631      	mov	r1, r6
 8018c3c:	4622      	mov	r2, r4
 8018c3e:	f7fb fe3f 	bl	80148c0 <memcpy>
 8018c42:	4631      	mov	r1, r6
 8018c44:	4638      	mov	r0, r7
 8018c46:	f7ff f99f 	bl	8017f88 <_free_r>
 8018c4a:	e7e9      	b.n	8018c20 <_realloc_r+0x1c>
 8018c4c:	4635      	mov	r5, r6
 8018c4e:	e7e7      	b.n	8018c20 <_realloc_r+0x1c>

08018c50 <_malloc_usable_size_r>:
 8018c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c54:	1f18      	subs	r0, r3, #4
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	bfbc      	itt	lt
 8018c5a:	580b      	ldrlt	r3, [r1, r0]
 8018c5c:	18c0      	addlt	r0, r0, r3
 8018c5e:	4770      	bx	lr

08018c60 <_init>:
 8018c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c62:	bf00      	nop
 8018c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c66:	bc08      	pop	{r3}
 8018c68:	469e      	mov	lr, r3
 8018c6a:	4770      	bx	lr

08018c6c <_fini>:
 8018c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c6e:	bf00      	nop
 8018c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c72:	bc08      	pop	{r3}
 8018c74:	469e      	mov	lr, r3
 8018c76:	4770      	bx	lr
