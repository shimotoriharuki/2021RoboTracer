
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014934  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  08014af8  08014af8  00024af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015444  08015444  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08015444  08015444  00025444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801544c  0801544c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801544c  0801544c  0002544c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015454  08015454  00025454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08015458  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c438  200001dc  08015634  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c614  08015634  0003c614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f5af  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006818  00000000  00000000  0005f7bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f20  00000000  00000000  00065fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c80  00000000  00000000  00067ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035395  00000000  00000000  00069b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021c77  00000000  00000000  0009ef0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010cadb  00000000  00000000  000c0b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cd65f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096e0  00000000  00000000  001cd6dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014adc 	.word	0x08014adc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08014adc 	.word	0x08014adc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f005 fae6 	bl	80065a8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000a1a0 	.word	0x2000a1a0

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f005 face 	bl	80065a8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000a1a0 	.word	0x2000a1a0

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f005 f957 	bl	80062d4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f003 febe 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f003 feb8 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f003 feb2 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f003 feac 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f003 fea6 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f003 fea0 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f003 fe9a 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f003 fe94 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f003 fe8e 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f003 fe88 	bl	8004da8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f003 fe7c 	bl	8004da8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f003 fe76 	bl	8004da8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f010 fc25 	bl	8011978 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:
#include "G_variables.h"

#define MAX_ENCODER_CNT 65535
#define CNT_OFFSET 32768

Encoder::Encoder() : cnt_l_(CNT_OFFSET), cnt_r_(CNT_OFFSET){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800116a:	805a      	strh	r2, [r3, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001184:	213c      	movs	r1, #60	; 0x3c
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <_ZN7Encoder4initEv+0x30>)
 8001188:	f008 fd5c 	bl	8009c44 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800118c:	213c      	movs	r1, #60	; 0x3c
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <_ZN7Encoder4initEv+0x34>)
 8001190:	f008 fd58 	bl	8009c44 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_ZN7Encoder4initEv+0x38>)
 8001196:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <_ZN7Encoder4initEv+0x3c>)
 800119e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000a3f4 	.word	0x2000a3f4
 80011b0:	2000a0d8 	.word	0x2000a0d8
 80011b4:	40010000 	.word	0x40010000
 80011b8:	40010400 	.word	0x40010400

080011bc <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	cnt_l_ = TIM1 -> CNT;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder9updateCntEv+0x28>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	801a      	strh	r2, [r3, #0]
	cnt_r_ = TIM8 -> CNT;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder9updateCntEv+0x2c>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	805a      	strh	r2, [r3, #2]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400

080011ec <_ZN7Encoder8clearCntEv>:
	cnt_l = CNT_OFFSET - cnt_l_;
	cnt_r = cnt_r_ - CNT_OFFSET;
}

void Encoder::clearCnt()
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	801a      	strh	r2, [r3, #0]
	cnt_r_ = 0;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	805a      	strh	r2, [r3, #2]
	TIM1 -> CNT = CNT_OFFSET;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <_ZN7Encoder8clearCntEv+0x30>)
 8001202:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <_ZN7Encoder8clearCntEv+0x34>)
 800120a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40010000 	.word	0x40010000
 8001220:	40010400 	.word	0x40010400

08001224 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af02      	add	r7, sp, #8
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 f918 	bl	8001470 <create_path>

	if(state == OVER_WRITE){
 8001240:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001244:	2b00      	cmp	r3, #0
 8001246:	d108      	bne.n	800125a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001248:	4822      	ldr	r0, [pc, #136]	; (80012d4 <sd_write_array_float+0xb0>)
 800124a:	f00d ff56 	bl	800f0fa <f_chdir>
		f_unlink(filepath);	//	一回消す
 800124e:	4822      	ldr	r0, [pc, #136]	; (80012d8 <sd_write_array_float+0xb4>)
 8001250:	f00e f9c1 	bl	800f5d6 <f_unlink>
		f_chdir("..");
 8001254:	4821      	ldr	r0, [pc, #132]	; (80012dc <sd_write_array_float+0xb8>)
 8001256:	f00d ff50 	bl	800f0fa <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800125a:	f000 f91f 	bl	800149c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800125e:	2300      	movs	r3, #0
 8001260:	82fb      	strh	r3, [r7, #22]
 8001262:	e028      	b.n	80012b6 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001264:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f981 	bl	8000578 <__aeabi_f2d>
 8001276:	4603      	mov	r3, r0
 8001278:	460c      	mov	r4, r1
 800127a:	e9cd 3400 	strd	r3, r4, [sp]
 800127e:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <sd_write_array_float+0xbc>)
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	4818      	ldr	r0, [pc, #96]	; (80012e4 <sd_write_array_float+0xc0>)
 8001284:	f00f fbe8 	bl	8010a58 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <sd_write_array_float+0xc4>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	4619      	mov	r1, r3
 800128e:	4816      	ldr	r0, [pc, #88]	; (80012e8 <sd_write_array_float+0xc4>)
 8001290:	f00d ff7d 	bl	800f18e <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001294:	4813      	ldr	r0, [pc, #76]	; (80012e4 <sd_write_array_float+0xc0>)
 8001296:	f7fe ffb3 	bl	8000200 <strlen>
 800129a:	4602      	mov	r2, r0
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <sd_write_array_float+0xc8>)
 800129e:	4911      	ldr	r1, [pc, #68]	; (80012e4 <sd_write_array_float+0xc0>)
 80012a0:	4811      	ldr	r0, [pc, #68]	; (80012e8 <sd_write_array_float+0xc4>)
 80012a2:	f00d fcee 	bl	800ec82 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80012a6:	f000 f913 	bl	80014d0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80012aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3301      	adds	r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	82fb      	strh	r3, [r7, #22]
 80012b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbd0      	blt.n	8001264 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <sd_write_array_float+0xc4>)
 80012c4:	f00d feef 	bl	800f0a6 <f_close>

	return ret;
 80012c8:	7d7b      	ldrb	r3, [r7, #21]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20008e54 	.word	0x20008e54
 80012d8:	20007d10 	.word	0x20007d10
 80012dc:	08014b00 	.word	0x08014b00
 80012e0:	08014af8 	.word	0x08014af8
 80012e4:	20008f54 	.word	0x20008f54
 80012e8:	20008fe4 	.word	0x20008fe4
 80012ec:	20008fd4 	.word	0x20008fd4

080012f0 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f8b2 	bl	8001470 <create_path>

	if(state == OVER_WRITE){
 800130c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d108      	bne.n	8001326 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001314:	481e      	ldr	r0, [pc, #120]	; (8001390 <sd_write_array_int+0xa0>)
 8001316:	f00d fef0 	bl	800f0fa <f_chdir>
		f_unlink(filepath);	//一回消す
 800131a:	481e      	ldr	r0, [pc, #120]	; (8001394 <sd_write_array_int+0xa4>)
 800131c:	f00e f95b 	bl	800f5d6 <f_unlink>
		f_chdir("..");
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <sd_write_array_int+0xa8>)
 8001322:	f00d feea 	bl	800f0fa <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001326:	f000 f8b9 	bl	800149c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800132a:	2300      	movs	r3, #0
 800132c:	82fb      	strh	r3, [r7, #22]
 800132e:	e021      	b.n	8001374 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001330:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a17      	ldr	r2, [pc, #92]	; (800139c <sd_write_array_int+0xac>)
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	4817      	ldr	r0, [pc, #92]	; (80013a0 <sd_write_array_int+0xb0>)
 8001342:	f00f fb89 	bl	8010a58 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <sd_write_array_int+0xb4>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	4619      	mov	r1, r3
 800134c:	4815      	ldr	r0, [pc, #84]	; (80013a4 <sd_write_array_int+0xb4>)
 800134e:	f00d ff1e 	bl	800f18e <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <sd_write_array_int+0xb0>)
 8001354:	f7fe ff54 	bl	8000200 <strlen>
 8001358:	4602      	mov	r2, r0
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <sd_write_array_int+0xb8>)
 800135c:	4910      	ldr	r1, [pc, #64]	; (80013a0 <sd_write_array_int+0xb0>)
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <sd_write_array_int+0xb4>)
 8001360:	f00d fc8f 	bl	800ec82 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001364:	f000 f8b4 	bl	80014d0 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001368:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800136c:	b29b      	uxth	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	82fb      	strh	r3, [r7, #22]
 8001374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbd7      	blt.n	8001330 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <sd_write_array_int+0xb4>)
 8001382:	f00d fe90 	bl	800f0a6 <f_close>

	return ret;
 8001386:	7d7b      	ldrb	r3, [r7, #21]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20008e54 	.word	0x20008e54
 8001394:	20007d10 	.word	0x20007d10
 8001398:	08014b00 	.word	0x08014b00
 800139c:	08014b04 	.word	0x08014b04
 80013a0:	20008f54 	.word	0x20008f54
 80013a4:	20008fe4 	.word	0x20008fe4
 80013a8:	20008fd4 	.word	0x20008fd4

080013ac <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	4613      	mov	r3, r2
 80013ba:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f852 	bl	8001470 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80013cc:	f000 f866 	bl	800149c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80013d0:	e019      	b.n	8001406 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 80013d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4913      	ldr	r1, [pc, #76]	; (800142c <sd_read_array_int+0x80>)
 80013e0:	4813      	ldr	r0, [pc, #76]	; (8001430 <sd_read_array_int+0x84>)
 80013e2:	f00f fb8d 	bl	8010b00 <siscanf>
		i++;
 80013e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80013f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	db03      	blt.n	8001406 <sd_read_array_int+0x5a>
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	3b01      	subs	r3, #1
 8001402:	b29b      	uxth	r3, r3
 8001404:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <sd_read_array_int+0x88>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <sd_read_array_int+0x84>)
 800140c:	f00e fabe 	bl	800f98c <f_gets>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1dd      	bne.n	80013d2 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001416:	f000 f85b 	bl	80014d0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <sd_read_array_int+0x88>)
 800141c:	f00d fe43 	bl	800f0a6 <f_close>

	return ret;
 8001420:	7d7b      	ldrb	r3, [r7, #21]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	08014b08 	.word	0x08014b08
 8001430:	20008f54 	.word	0x20008f54
 8001434:	20008fe4 	.word	0x20008fe4

08001438 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001442:	2201      	movs	r2, #1
 8001444:	4908      	ldr	r1, [pc, #32]	; (8001468 <sd_mount+0x30>)
 8001446:	4809      	ldr	r0, [pc, #36]	; (800146c <sd_mount+0x34>)
 8001448:	f00d f8aa 	bl	800e5a0 <f_mount>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <sd_mount+0x20>
 8001452:	2301      	movs	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
 8001456:	e001      	b.n	800145c <sd_mount+0x24>
	else ret = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800145c:	79fb      	ldrb	r3, [r7, #7]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	08014b0c 	.word	0x08014b0c
 800146c:	20007e10 	.word	0x20007e10

08001470 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <create_path+0x24>)
 800147e:	f00f fbae 	bl	8010bde <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001482:	6839      	ldr	r1, [r7, #0]
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <create_path+0x28>)
 8001486:	f00f fbaa 	bl	8010bde <strcpy>

}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20008e54 	.word	0x20008e54
 8001498:	20007d10 	.word	0x20007d10

0800149c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <fopen_folder_and_file+0x24>)
 80014a2:	f00e f959 	bl	800f758 <f_mkdir>

	f_chdir(dirpath);
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <fopen_folder_and_file+0x24>)
 80014a8:	f00d fe27 	bl	800f0fa <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80014ac:	2213      	movs	r2, #19
 80014ae:	4905      	ldr	r1, [pc, #20]	; (80014c4 <fopen_folder_and_file+0x28>)
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <fopen_folder_and_file+0x2c>)
 80014b2:	f00d f8bb 	bl	800e62c <f_open>

	f_chdir("..");
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <fopen_folder_and_file+0x30>)
 80014b8:	f00d fe1f 	bl	800f0fa <f_chdir>


}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20008e54 	.word	0x20008e54
 80014c4:	20007d10 	.word	0x20007d10
 80014c8:	20008fe4 	.word	0x20008fe4
 80014cc:	08014b00 	.word	0x08014b00

080014d0 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	e007      	b.n	80014ec <bufclear+0x1c>
		buffer[i] = '\0';
 80014dc:	4a08      	ldr	r2, [pc, #32]	; (8001500 <bufclear+0x30>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3301      	adds	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b7f      	cmp	r3, #127	; 0x7f
 80014f0:	ddf4      	ble.n	80014dc <bufclear+0xc>
	}
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20008f54 	.word	0x20008f54

08001504 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001514:	b2db      	uxtb	r3, r3
 8001516:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151e:	480e      	ldr	r0, [pc, #56]	; (8001558 <read_byte+0x54>)
 8001520:	f004 fed8 	bl	80062d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001524:	f107 010f 	add.w	r1, r7, #15
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	2201      	movs	r2, #1
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <read_byte+0x58>)
 800152e:	f007 fd4f 	bl	8008fd0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001532:	f107 010e 	add.w	r1, r7, #14
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	2201      	movs	r2, #1
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <read_byte+0x58>)
 800153c:	f007 fe7c 	bl	8009238 <HAL_SPI_Receive>
	CS_SET;
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <read_byte+0x54>)
 8001548:	f004 fec4 	bl	80062d4 <HAL_GPIO_WritePin>

	return val;
 800154c:	7bbb      	ldrb	r3, [r7, #14]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40020400 	.word	0x40020400
 800155c:	2000a080 	.word	0x2000a080

08001560 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001576:	b2db      	uxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <write_byte+0x54>)
 8001582:	f004 fea7 	bl	80062d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001586:	f107 010f 	add.w	r1, r7, #15
 800158a:	2364      	movs	r3, #100	; 0x64
 800158c:	2201      	movs	r2, #1
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <write_byte+0x58>)
 8001590:	f007 fd1e 	bl	8008fd0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001594:	1db9      	adds	r1, r7, #6
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	2201      	movs	r2, #1
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <write_byte+0x58>)
 800159c:	f007 fd18 	bl	8008fd0 <HAL_SPI_Transmit>
	CS_SET;
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <write_byte+0x54>)
 80015a8:	f004 fe94 	bl	80062d4 <HAL_GPIO_WritePin>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40020400 	.word	0x40020400
 80015b8:	2000a080 	.word	0x2000a080

080015bc <IMU_init>:

uint16_t IMU_init() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff ff9c 	bl	8001504 <read_byte>
 80015cc:	4603      	mov	r3, r0
 80015ce:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80015d0:	797b      	ldrb	r3, [r7, #5]
 80015d2:	2be0      	cmp	r3, #224	; 0xe0
 80015d4:	d119      	bne.n	800160a <IMU_init+0x4e>
		ret = 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80015da:	2101      	movs	r1, #1
 80015dc:	2006      	movs	r0, #6
 80015de:	f7ff ffbf 	bl	8001560 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80015e2:	2110      	movs	r1, #16
 80015e4:	2003      	movs	r0, #3
 80015e6:	f7ff ffbb 	bl	8001560 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80015ea:	2120      	movs	r1, #32
 80015ec:	207f      	movs	r0, #127	; 0x7f
 80015ee:	f7ff ffb7 	bl	8001560 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80015f2:	2106      	movs	r1, #6
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ffb3 	bl	8001560 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80015fa:	2106      	movs	r1, #6
 80015fc:	2014      	movs	r0, #20
 80015fe:	f7ff ffaf 	bl	8001560 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001602:	2100      	movs	r1, #0
 8001604:	207f      	movs	r0, #127	; 0x7f
 8001606:	f7ff ffab 	bl	8001560 <write_byte>
	}
	return ret;
 800160a:	88fb      	ldrh	r3, [r7, #6]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <read_gyro_data>:

void read_gyro_data() {
 8001614:	b598      	push	{r3, r4, r7, lr}
 8001616:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001618:	2033      	movs	r0, #51	; 0x33
 800161a:	f7ff ff73 	bl	8001504 <read_byte>
 800161e:	4603      	mov	r3, r0
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21c      	sxth	r4, r3
 8001624:	2034      	movs	r0, #52	; 0x34
 8001626:	f7ff ff6d 	bl	8001504 <read_byte>
 800162a:	4603      	mov	r3, r0
 800162c:	b21b      	sxth	r3, r3
 800162e:	4323      	orrs	r3, r4
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <read_gyro_data+0x64>)
 8001634:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001636:	2035      	movs	r0, #53	; 0x35
 8001638:	f7ff ff64 	bl	8001504 <read_byte>
 800163c:	4603      	mov	r3, r0
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21c      	sxth	r4, r3
 8001642:	2036      	movs	r0, #54	; 0x36
 8001644:	f7ff ff5e 	bl	8001504 <read_byte>
 8001648:	4603      	mov	r3, r0
 800164a:	b21b      	sxth	r3, r3
 800164c:	4323      	orrs	r3, r4
 800164e:	b21a      	sxth	r2, r3
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <read_gyro_data+0x68>)
 8001652:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001654:	2037      	movs	r0, #55	; 0x37
 8001656:	f7ff ff55 	bl	8001504 <read_byte>
 800165a:	4603      	mov	r3, r0
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b21c      	sxth	r4, r3
 8001660:	2038      	movs	r0, #56	; 0x38
 8001662:	f7ff ff4f 	bl	8001504 <read_byte>
 8001666:	4603      	mov	r3, r0
 8001668:	b21b      	sxth	r3, r3
 800166a:	4323      	orrs	r3, r4
 800166c:	b21a      	sxth	r2, r3
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <read_gyro_data+0x6c>)
 8001670:	801a      	strh	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	bd98      	pop	{r3, r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	2000a01c 	.word	0x2000a01c
 800167c:	2000a01a 	.word	0x2000a01a
 8001680:	2000a014 	.word	0x2000a014

08001684 <read_accel_data>:

void read_accel_data() {
 8001684:	b598      	push	{r3, r4, r7, lr}
 8001686:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001688:	202d      	movs	r0, #45	; 0x2d
 800168a:	f7ff ff3b 	bl	8001504 <read_byte>
 800168e:	4603      	mov	r3, r0
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21c      	sxth	r4, r3
 8001694:	202e      	movs	r0, #46	; 0x2e
 8001696:	f7ff ff35 	bl	8001504 <read_byte>
 800169a:	4603      	mov	r3, r0
 800169c:	b21b      	sxth	r3, r3
 800169e:	4323      	orrs	r3, r4
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <read_accel_data+0x64>)
 80016a4:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 80016a6:	202f      	movs	r0, #47	; 0x2f
 80016a8:	f7ff ff2c 	bl	8001504 <read_byte>
 80016ac:	4603      	mov	r3, r0
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b21c      	sxth	r4, r3
 80016b2:	2030      	movs	r0, #48	; 0x30
 80016b4:	f7ff ff26 	bl	8001504 <read_byte>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4323      	orrs	r3, r4
 80016be:	b21a      	sxth	r2, r3
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <read_accel_data+0x68>)
 80016c2:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 80016c4:	2031      	movs	r0, #49	; 0x31
 80016c6:	f7ff ff1d 	bl	8001504 <read_byte>
 80016ca:	4603      	mov	r3, r0
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21c      	sxth	r4, r3
 80016d0:	2032      	movs	r0, #50	; 0x32
 80016d2:	f7ff ff17 	bl	8001504 <read_byte>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4323      	orrs	r3, r4
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <read_accel_data+0x6c>)
 80016e0:	801a      	strh	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	bd98      	pop	{r3, r4, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000a018 	.word	0x2000a018
 80016ec:	2000a01e 	.word	0x2000a01e
 80016f0:	2000a016 	.word	0x2000a016

080016f4 <_ZN3IMUC1Ev>:
#include "ICM_20648.h"
#include "stm32f4xx_hal.h"
#include "stdio.h"
#include <vector>

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
{

}
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 800174c:	f7ff ff36 	bl	80015bc <IMU_init>
 8001750:	4603      	mov	r3, r0
 8001752:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	4619      	mov	r1, r3
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <_ZN3IMU4initEv+0x24>)
 800175a:	f00f f8e7 	bl	801092c <iprintf>

}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08014b10 	.word	0x08014b10

0800176c <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001774:	f7ff ff4e 	bl	8001614 <read_gyro_data>
	read_accel_data();
 8001778:	f7ff ff84 	bl	8001684 <read_accel_data>

	xa_ = xa;
 800177c:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <_ZN3IMU12updateValuesEv+0x90>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b21b      	sxth	r3, r3
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	edc3 7a00 	vstr	s15, [r3]
	ya_ = ya;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <_ZN3IMU12updateValuesEv+0x94>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	b21b      	sxth	r3, r3
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	edc3 7a01 	vstr	s15, [r3, #4]
	za_ = za;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <_ZN3IMU12updateValuesEv+0x98>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	edc3 7a02 	vstr	s15, [r3, #8]
	xg_ = xg;
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_ZN3IMU12updateValuesEv+0x9c>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edc3 7a03 	vstr	s15, [r3, #12]
	yg_ = yg;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <_ZN3IMU12updateValuesEv+0xa0>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	edc3 7a04 	vstr	s15, [r3, #16]
	zg_ = zg;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <_ZN3IMU12updateValuesEv+0xa4>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	edc3 7a05 	vstr	s15, [r3, #20]

}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000a018 	.word	0x2000a018
 8001800:	2000a01e 	.word	0x2000a01e
 8001804:	2000a016 	.word	0x2000a016
 8001808:	2000a01c 	.word	0x2000a01c
 800180c:	2000a01a 	.word	0x2000a01a
 8001810:	2000a014 	.word	0x2000a014

08001814 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	return zg_ - offset_;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a06 	vldr	s15, [r3, #24]
 8001828:	ee77 7a67 	vsub.f32	s15, s14, s15

}
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	f6ad 7dc4 	subw	sp, sp, #4036	; 0xfc4
 8001842:	af00      	add	r7, sp, #0
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	6018      	str	r0, [r3, #0]
	led.fullColor('G');
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	331c      	adds	r3, #28
 800184e:	2147      	movs	r1, #71	; 0x47
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f8e1 	bl	8001a18 <_ZN3LED9fullColorEc>

	//std::vector<float> zg_vals;
	float zg_vals[1000];
	for(uint16_t i = 0; i < 1000; i++){
 8001856:	2300      	movs	r3, #0
 8001858:	f8a7 3fbe 	strh.w	r3, [r7, #4030]	; 0xfbe
 800185c:	f8b7 3fbe 	ldrh.w	r3, [r7, #4030]	; 0xfbe
 8001860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001864:	d212      	bcs.n	800188c <_ZN3IMU11calibrationEv+0x50>
		zg_vals[i] = zg_;
 8001866:	f8b7 3fbe 	ldrh.w	r3, [r7, #4030]	; 0xfbe
 800186a:	1d3a      	adds	r2, r7, #4
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	6952      	ldr	r2, [r2, #20]
 8001870:	f107 0108 	add.w	r1, r7, #8
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	601a      	str	r2, [r3, #0]
		HAL_Delay(2);
 800187a:	2002      	movs	r0, #2
 800187c:	f003 fa94 	bl	8004da8 <HAL_Delay>
	for(uint16_t i = 0; i < 1000; i++){
 8001880:	f8b7 3fbe 	ldrh.w	r3, [r7, #4030]	; 0xfbe
 8001884:	3301      	adds	r3, #1
 8001886:	f8a7 3fbe 	strh.w	r3, [r7, #4030]	; 0xfbe
 800188a:	e7e7      	b.n	800185c <_ZN3IMU11calibrationEv+0x20>
	}

	float sum;
	for(const auto &v : zg_vals){
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	f8c7 3fb0 	str.w	r3, [r7, #4016]	; 0xfb0
 8001894:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001898:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 800189c:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 80018a0:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80018a4:	f8c7 3fac 	str.w	r3, [r7, #4012]	; 0xfac
 80018a8:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	; 0xfb4
 80018ac:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d017      	beq.n	80018e4 <_ZN3IMU11calibrationEv+0xa8>
 80018b4:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 80018b8:	f8c7 3fa8 	str.w	r3, [r7, #4008]	; 0xfa8
		sum += v;
 80018bc:	f8d7 3fa8 	ldr.w	r3, [r7, #4008]	; 0xfa8
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 80018d4:	edc3 7a00 	vstr	s15, [r3]
	for(const auto &v : zg_vals){
 80018d8:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 80018dc:	3304      	adds	r3, #4
 80018de:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 80018e2:	e7e1      	b.n	80018a8 <_ZN3IMU11calibrationEv+0x6c>
	}

	offset_ = sum / 1000;
 80018e4:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001930 <_ZN3IMU11calibrationEv+0xf4>
 80018f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	edc3 7a06 	vstr	s15, [r3, #24]

	printf("imu offset %f", offset_);
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe38 	bl	8000578 <__aeabi_f2d>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	461a      	mov	r2, r3
 800190e:	4623      	mov	r3, r4
 8001910:	4808      	ldr	r0, [pc, #32]	; (8001934 <_ZN3IMU11calibrationEv+0xf8>)
 8001912:	f00f f80b 	bl	801092c <iprintf>

	led.fullColor('B');
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	331c      	adds	r3, #28
 800191c:	2142      	movs	r1, #66	; 0x42
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f87a 	bl	8001a18 <_ZN3LED9fullColorEc>
}
 8001924:	bf00      	nop
 8001926:	f607 77c4 	addw	r7, r7, #4036	; 0xfc4
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}
 800192e:	bf00      	nop
 8001930:	447a0000 	.word	0x447a0000
 8001934:	08014b20 	.word	0x08014b20

08001938 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
{

}
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 800195c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001960:	482a      	ldr	r0, [pc, #168]	; (8001a0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001962:	f004 fc9f 	bl	80062a4 <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <_ZN8JoyStick8getValueEv+0x2e>
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800197e:	2101      	movs	r1, #1
 8001980:	4823      	ldr	r0, [pc, #140]	; (8001a10 <_ZN8JoyStick8getValueEv+0xc0>)
 8001982:	f004 fc8f 	bl	80062a4 <HAL_GPIO_ReadPin>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <_ZN8JoyStick8getValueEv+0x4e>
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800199e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a2:	481a      	ldr	r0, [pc, #104]	; (8001a0c <_ZN8JoyStick8getValueEv+0xbc>)
 80019a4:	f004 fc7e 	bl	80062a4 <HAL_GPIO_ReadPin>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <_ZN8JoyStick8getValueEv+0x70>
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80019c0:	2104      	movs	r1, #4
 80019c2:	4814      	ldr	r0, [pc, #80]	; (8001a14 <_ZN8JoyStick8getValueEv+0xc4>)
 80019c4:	f004 fc6e 	bl	80062a4 <HAL_GPIO_ReadPin>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf0c      	ite	eq
 80019ce:	2301      	moveq	r3, #1
 80019d0:	2300      	movne	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <_ZN8JoyStick8getValueEv+0x90>
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	480a      	ldr	r0, [pc, #40]	; (8001a0c <_ZN8JoyStick8getValueEv+0xbc>)
 80019e4:	f004 fc5e 	bl	80062a4 <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <_ZN8JoyStick8getValueEv+0xb0>
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001a00:	89fb      	ldrh	r3, [r7, #14]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40020400 	.word	0x40020400

08001a18 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	2b52      	cmp	r3, #82	; 0x52
 8001a28:	d112      	bne.n	8001a50 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a30:	4856      	ldr	r0, [pc, #344]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a32:	f004 fc4f 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a3c:	4853      	ldr	r0, [pc, #332]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a3e:	f004 fc49 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a48:	4850      	ldr	r0, [pc, #320]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a4a:	f004 fc43 	bl	80062d4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001a4e:	e098      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	2b47      	cmp	r3, #71	; 0x47
 8001a54:	d112      	bne.n	8001a7c <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5c:	484b      	ldr	r0, [pc, #300]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a5e:	f004 fc39 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a68:	4848      	ldr	r0, [pc, #288]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a6a:	f004 fc33 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a74:	4845      	ldr	r0, [pc, #276]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a76:	f004 fc2d 	bl	80062d4 <HAL_GPIO_WritePin>
}
 8001a7a:	e082      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	2b42      	cmp	r3, #66	; 0x42
 8001a80:	d112      	bne.n	8001aa8 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a88:	4840      	ldr	r0, [pc, #256]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a8a:	f004 fc23 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a94:	483d      	ldr	r0, [pc, #244]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001a96:	f004 fc1d 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa0:	483a      	ldr	r0, [pc, #232]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001aa2:	f004 fc17 	bl	80062d4 <HAL_GPIO_WritePin>
}
 8001aa6:	e06c      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	2b43      	cmp	r3, #67	; 0x43
 8001aac:	d112      	bne.n	8001ad4 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab4:	4835      	ldr	r0, [pc, #212]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001ab6:	f004 fc0d 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac0:	4832      	ldr	r0, [pc, #200]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001ac2:	f004 fc07 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001acc:	482f      	ldr	r0, [pc, #188]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001ace:	f004 fc01 	bl	80062d4 <HAL_GPIO_WritePin>
}
 8001ad2:	e056      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	2b4d      	cmp	r3, #77	; 0x4d
 8001ad8:	d112      	bne.n	8001b00 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae0:	482a      	ldr	r0, [pc, #168]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001ae2:	f004 fbf7 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aec:	4827      	ldr	r0, [pc, #156]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001aee:	f004 fbf1 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af8:	4824      	ldr	r0, [pc, #144]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001afa:	f004 fbeb 	bl	80062d4 <HAL_GPIO_WritePin>
}
 8001afe:	e040      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	2b59      	cmp	r3, #89	; 0x59
 8001b04:	d112      	bne.n	8001b2c <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b0e:	f004 fbe1 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b18:	481c      	ldr	r0, [pc, #112]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b1a:	f004 fbdb 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b24:	4819      	ldr	r0, [pc, #100]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b26:	f004 fbd5 	bl	80062d4 <HAL_GPIO_WritePin>
}
 8001b2a:	e02a      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	2b57      	cmp	r3, #87	; 0x57
 8001b30:	d112      	bne.n	8001b58 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b38:	4814      	ldr	r0, [pc, #80]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b3a:	f004 fbcb 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b44:	4811      	ldr	r0, [pc, #68]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b46:	f004 fbc5 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b50:	480e      	ldr	r0, [pc, #56]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b52:	f004 fbbf 	bl	80062d4 <HAL_GPIO_WritePin>
}
 8001b56:	e014      	b.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b7e      	cmp	r3, #126	; 0x7e
 8001b5c:	d111      	bne.n	8001b82 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b66:	f004 fbb5 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b70:	4806      	ldr	r0, [pc, #24]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b72:	f004 fbaf 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <_ZN3LED9fullColorEc+0x174>)
 8001b7e:	f004 fba9 	bl	80062d4 <HAL_GPIO_WritePin>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40020000 	.word	0x40020000

08001b90 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d106      	bne.n	8001bb6 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bae:	4813      	ldr	r0, [pc, #76]	; (8001bfc <_ZN3LED2LREaa+0x6c>)
 8001bb0:	f004 fb90 	bl	80062d4 <HAL_GPIO_WritePin>
 8001bb4:	e009      	b.n	8001bca <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <_ZN3LED2LREaa+0x6c>)
 8001bc6:	f004 fb85 	bl	80062d4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001bca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d106      	bne.n	8001be0 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <_ZN3LED2LREaa+0x6c>)
 8001bda:	f004 fb7b 	bl	80062d4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001bde:	e009      	b.n	8001bf4 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001be0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <_ZN3LED2LREaa+0x6c>)
 8001bf0:	f004 fb70 	bl	80062d4 <HAL_GPIO_WritePin>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40020000 	.word	0x40020000

08001c00 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b092      	sub	sp, #72	; 0x48
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe92 	bl	8001938 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
 8001c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1e:	331c      	adds	r3, #28
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
 8001c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d008      	beq.n	8001c3c <_ZN10LineSensorC1Ev+0x3c>
 8001c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8001c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c30:	2200      	movs	r2, #0
 8001c32:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8001c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c36:	3302      	adds	r3, #2
 8001c38:	647b      	str	r3, [r7, #68]	; 0x44
 8001c3a:	e7f2      	b.n	8001c22 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	643b      	str	r3, [r7, #64]	; 0x40
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	3338      	adds	r3, #56	; 0x38
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d009      	beq.n	8001c6a <_ZN10LineSensorC1Ev+0x6a>
 8001c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c58:	623b      	str	r3, [r7, #32]
		s = 0;
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8001c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c64:	3304      	adds	r3, #4
 8001c66:	643b      	str	r3, [r7, #64]	; 0x40
 8001c68:	e7f1      	b.n	8001c4e <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3338      	adds	r3, #56	; 0x38
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d009      	beq.n	8001c98 <_ZN10LineSensorC1Ev+0x98>
 8001c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c86:	617b      	str	r3, [r7, #20]
		m = 0;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8001c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c92:	3304      	adds	r3, #4
 8001c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c96:	e7f1      	b.n	8001c7c <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	3338      	adds	r3, #56	; 0x38
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d009      	beq.n	8001cc6 <_ZN10LineSensorC1Ev+0xc6>
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb4:	60bb      	str	r3, [r7, #8]
		s = 1;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cbc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc4:	e7f1      	b.n	8001caa <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3748      	adds	r7, #72	; 0x48
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	220e      	movs	r2, #14
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4803      	ldr	r0, [pc, #12]	; (8001cec <_ZN10LineSensor8ADCStartEv+0x1c>)
 8001ce0:	f003 f8c8 	bl	8004e74 <HAL_ADC_Start_DMA>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000a158 	.word	0x2000a158

08001cf0 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b0d      	cmp	r3, #13
 8001d00:	dc2f      	bgt.n	8001d62 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3392      	adds	r3, #146	; 0x92
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	33a0      	adds	r3, #160	; 0xa0
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a5b      	subs	r3, r3, r1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3306      	adds	r3, #6
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e7cc      	b.n	8001cfc <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d6c:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b09      	cmp	r3, #9
 8001d74:	d902      	bls.n	8001d7c <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]


}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	200001f8 	.word	0x200001f8

08001d8c <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8001d8c:	b490      	push	{r4, r7}
 8001d8e:	b08e      	sub	sp, #56	; 0x38
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d9e:	2b0d      	cmp	r3, #13
 8001da0:	f200 8087 	bhi.w	8001eb2 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001daa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	d81c      	bhi.n	8001dec <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8001db2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001db6:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8001dba:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4423      	add	r3, r4
 8001dca:	3306      	adds	r3, #6
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4403      	add	r3, r0
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	008b      	lsls	r3, r1, #2
 8001dd6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001dda:	440b      	add	r3, r1
 8001ddc:	3b30      	subs	r3, #48	; 0x30
 8001dde:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8001de0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001de4:	3301      	adds	r3, #1
 8001de6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001dea:	e7de      	b.n	8001daa <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001df2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	d84d      	bhi.n	8001e96 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8001dfa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001e04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d83e      	bhi.n	8001e8a <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8001e0c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e16:	4413      	add	r3, r2
 8001e18:	3b30      	subs	r3, #48	; 0x30
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b30      	subs	r3, #48	; 0x30
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d521      	bpl.n	8001e7e <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8001e3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e44:	4413      	add	r3, r2
 8001e46:	3b30      	subs	r3, #48	; 0x30
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8001e4c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001e50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e5a:	440a      	add	r2, r1
 8001e5c:	3a30      	subs	r2, #48	; 0x30
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e66:	440b      	add	r3, r1
 8001e68:	3b30      	subs	r3, #48	; 0x30
 8001e6a:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8001e6c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e76:	4413      	add	r3, r2
 8001e78:	3b30      	subs	r3, #48	; 0x30
 8001e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e7c:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8001e7e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e82:	3301      	adds	r3, #1
 8001e84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001e88:	e7bc      	b.n	8001e04 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8001e8a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001e94:	e7ad      	b.n	8001df2 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8001e96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	33b0      	adds	r3, #176	; 0xb0
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8001ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001eb0:	e773      	b.n	8001d9a <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 8001eb2:	bf00      	nop
 8001eb4:	3738      	adds	r7, #56	; 0x38
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc90      	pop	{r4, r7}
 8001eba:	4770      	bx	lr

08001ebc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b0a9      	sub	sp, #164	; 0xa4
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8001ec4:	2064      	movs	r0, #100	; 0x64
 8001ec6:	f002 ff6f 	bl	8004da8 <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001ed0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001ed4:	2b0d      	cmp	r3, #13
 8001ed6:	d823      	bhi.n	8001f20 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 8001ed8:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001edc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	32b0      	adds	r2, #176	; 0xb0
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	440a      	add	r2, r1
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3b60      	subs	r3, #96	; 0x60
 8001ef4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8001ef6:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001efa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	32b0      	adds	r2, #176	; 0xb0
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	440a      	add	r2, r1
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001f0e:	440b      	add	r3, r1
 8001f10:	3b98      	subs	r3, #152	; 0x98
 8001f12:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001f14:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001f1e:	e7d7      	b.n	8001ed0 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fd12 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d079      	beq.n	8002030 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001f42:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f46:	2b0d      	cmp	r3, #13
 8001f48:	d850      	bhi.n	8001fec <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 8001f4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001f54:	4413      	add	r3, r2
 8001f56:	3b60      	subs	r3, #96	; 0x60
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	33b0      	adds	r3, #176	; 0xb0
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	d50f      	bpl.n	8001f96 <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 8001f76:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001f7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	32b0      	adds	r2, #176	; 0xb0
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	440a      	add	r2, r1
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001f8e:	440b      	add	r3, r1
 8001f90:	3b60      	subs	r3, #96	; 0x60
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e024      	b.n	8001fe0 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 8001f96:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b98      	subs	r3, #152	; 0x98
 8001fa4:	ed93 7a00 	vldr	s14, [r3]
 8001fa8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	33b0      	adds	r3, #176	; 0xb0
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	dd0e      	ble.n	8001fe0 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 8001fc2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001fc6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	32b0      	adds	r2, #176	; 0xb0
 8001fce:	0092      	lsls	r2, r2, #2
 8001fd0:	440a      	add	r2, r1
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001fda:	440b      	add	r3, r1
 8001fdc:	3b98      	subs	r3, #152	; 0x98
 8001fde:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001fe0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001fea:	e7aa      	b.n	8001f42 <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fc5c 	bl	80028b0 <_ZN12RotarySwitch8getValueEv>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf0c      	ite	eq
 8001ffe:	2301      	moveq	r3, #1
 8002000:	2300      	movne	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800200e:	2201      	movs	r2, #1
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fdbb 	bl	8001b90 <_ZN3LED2LREaa>
 800201a:	e781      	b.n	8001f20 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002022:	2200      	movs	r2, #0
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fdb1 	bl	8001b90 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800202e:	e777      	b.n	8001f20 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 8002030:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800203c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002044:	3338      	adds	r3, #56	; 0x38
 8002046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800204a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800204e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002052:	429a      	cmp	r2, r3
 8002054:	d016      	beq.n	8002084 <_ZN10LineSensor11calibrationEv+0x1c8>
 8002056:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800205a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800205e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa87 	bl	8000578 <__aeabi_f2d>
 800206a:	4603      	mov	r3, r0
 800206c:	460c      	mov	r4, r1
 800206e:	461a      	mov	r2, r3
 8002070:	4623      	mov	r3, r4
 8002072:	4842      	ldr	r0, [pc, #264]	; (800217c <_ZN10LineSensor11calibrationEv+0x2c0>)
 8002074:	f00e fc5a 	bl	801092c <iprintf>
	for(const auto &m : max_values){
 8002078:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800207c:	3304      	adds	r3, #4
 800207e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002082:	e7e2      	b.n	800204a <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 8002084:	200a      	movs	r0, #10
 8002086:	f00e fc69 	bl	801095c <putchar>
	for(const auto &m : min_values){
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800209a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800209e:	3338      	adds	r3, #56	; 0x38
 80020a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d014      	beq.n	80020d6 <_ZN10LineSensor11calibrationEv+0x21a>
 80020ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020b0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80020b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa5e 	bl	8000578 <__aeabi_f2d>
 80020bc:	4603      	mov	r3, r0
 80020be:	460c      	mov	r4, r1
 80020c0:	461a      	mov	r2, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	482d      	ldr	r0, [pc, #180]	; (800217c <_ZN10LineSensor11calibrationEv+0x2c0>)
 80020c6:	f00e fc31 	bl	801092c <iprintf>
	for(const auto &m : min_values){
 80020ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020ce:	3304      	adds	r3, #4
 80020d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020d4:	e7e5      	b.n	80020a2 <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 80020d6:	200a      	movs	r0, #10
 80020d8:	f00e fc40 	bl	801095c <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80020dc:	2300      	movs	r3, #0
 80020de:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80020e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80020e6:	2b0d      	cmp	r3, #13
 80020e8:	d826      	bhi.n	8002138 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80020ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80020f4:	4413      	add	r3, r2
 80020f6:	3b60      	subs	r3, #96	; 0x60
 80020f8:	ed93 7a00 	vldr	s14, [r3]
 80020fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002106:	4413      	add	r3, r2
 8002108:	3b98      	subs	r3, #152	; 0x98
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002112:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002116:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002180 <_ZN10LineSensor11calibrationEv+0x2c4>
 800211a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	3392      	adds	r3, #146	; 0x92
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3304      	adds	r3, #4
 8002128:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800212c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002130:	3301      	adds	r3, #1
 8002132:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002136:	e7d4      	b.n	80020e2 <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002138:	2300      	movs	r3, #0
 800213a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800213e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002142:	2b0d      	cmp	r3, #13
 8002144:	d815      	bhi.n	8002172 <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 8002146:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800214a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002154:	440a      	add	r2, r1
 8002156:	3a98      	subs	r2, #152	; 0x98
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	33a0      	adds	r3, #160	; 0xa0
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3304      	adds	r3, #4
 8002164:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002166:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800216a:	3301      	adds	r3, #1
 800216c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002170:	e7e5      	b.n	800213e <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 8002172:	bf00      	nop
 8002174:	37a4      	adds	r7, #164	; 0xa4
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	bf00      	nop
 800217c:	08014b30 	.word	0x08014b30
 8002180:	447a0000 	.word	0x447a0000

08002184 <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	3338      	adds	r3, #56	; 0x38
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d012      	beq.n	80021d0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80021f0 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80021b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	db02      	blt.n	80021c8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	3301      	adds	r3, #1
 80021c6:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	3304      	adds	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e7e8      	b.n	80021a2 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 80021d0:	7ffb      	ldrb	r3, [r7, #31]
 80021d2:	2b0d      	cmp	r3, #13
 80021d4:	d902      	bls.n	80021dc <_ZN10LineSensor13emergencyStopEv+0x58>
 80021d6:	2301      	movs	r3, #1
 80021d8:	75fb      	strb	r3, [r7, #23]
 80021da:	e001      	b.n	80021e0 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80021dc:	2300      	movs	r3, #0
 80021de:	75fb      	strb	r3, [r7, #23]

	return flag;
 80021e0:	7dfb      	ldrb	r3, [r7, #23]

}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	44160000 	.word	0x44160000

080021f4 <_ZN9LineTraceC1EP5MotorP10LineSensor>:
 */

#include "LineTrace.hpp"
#include <stdio.h>

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	761a      	strb	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
	motor_ = motor;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	605a      	str	r2, [r3, #4]
}
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800227c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002294:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80022a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80022b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80022c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80022cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80022d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80022e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80022e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ec:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	ee07 3a90 	vmov	s15, r3

}
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	0000      	movs	r0, r0
	...

08002308 <_ZN9LineTrace3pidEv>:

void LineTrace::pid()
{
 8002308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff95 	bl	8002240 <_ZN9LineTrace9calcErrorEv>
 8002316:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002320:	ed97 7a07 	vldr	s14, [r7, #28]
 8002324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002328:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <_ZN9LineTrace3pidEv+0x130>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	edd7 6a07 	vldr	s13, [r7, #28]
 800233c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002344:	ee17 0a90 	vmov	r0, s15
 8002348:	f7fe f916 	bl	8000578 <__aeabi_f2d>
 800234c:	a338      	add	r3, pc, #224	; (adr r3, 8002430 <_ZN9LineTrace3pidEv+0x128>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe fa93 	bl	800087c <__aeabi_ddiv>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	4618      	mov	r0, r3
 800235c:	4621      	mov	r1, r4
 800235e:	f7fe fc5b 	bl	8000c18 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 8002366:	4b35      	ldr	r3, [pc, #212]	; (800243c <_ZN9LineTrace3pidEv+0x134>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe f904 	bl	8000578 <__aeabi_f2d>
 8002370:	4604      	mov	r4, r0
 8002372:	460d      	mov	r5, r1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	ed93 7a05 	vldr	s14, [r3, #20]
 800237a:	edd7 7a07 	vldr	s15, [r7, #28]
 800237e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002382:	ee17 0a90 	vmov	r0, s15
 8002386:	f7fe f8f7 	bl	8000578 <__aeabi_f2d>
 800238a:	a329      	add	r3, pc, #164	; (adr r3, 8002430 <_ZN9LineTrace3pidEv+0x128>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe f94a 	bl	8000628 <__aeabi_dmul>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4620      	mov	r0, r4
 800239a:	4629      	mov	r1, r5
 800239c:	f7fd ff8e 	bl	80002bc <__adddf3>
 80023a0:	4603      	mov	r3, r0
 80023a2:	460c      	mov	r4, r1
 80023a4:	4618      	mov	r0, r3
 80023a6:	4621      	mov	r1, r4
 80023a8:	f7fe fc36 	bl	8000c18 <__aeabi_d2f>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <_ZN9LineTrace3pidEv+0x134>)
 80023b0:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80023b8:	edd7 6a06 	vldr	s13, [r7, #24]
 80023bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80023c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <_ZN9LineTrace3pidEv+0x134>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80023dc:	edd7 6a06 	vldr	s13, [r7, #24]
 80023e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80023e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <_ZN9LineTrace3pidEv+0x134>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f6:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681c      	ldr	r4, [r3, #0]
 80023fe:	6938      	ldr	r0, [r7, #16]
 8002400:	f7fe f8ba 	bl	8000578 <__aeabi_f2d>
 8002404:	4605      	mov	r5, r0
 8002406:	460e      	mov	r6, r1
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7fe f8b5 	bl	8000578 <__aeabi_f2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	ec43 2b11 	vmov	d1, r2, r3
 8002416:	ec46 5b10 	vmov	d0, r5, r6
 800241a:	4620      	mov	r0, r4
 800241c:	f000 f9d6 	bl	80027cc <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 8002420:	4a05      	ldr	r2, [pc, #20]	; (8002438 <_ZN9LineTrace3pidEv+0x130>)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	6013      	str	r3, [r2, #0]


}
 8002426:	bf00      	nop
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800242e:	bf00      	nop
 8002430:	d2f1a9fc 	.word	0xd2f1a9fc
 8002434:	3f50624d 	.word	0x3f50624d
 8002438:	200001fc 	.word	0x200001fc
 800243c:	20000200 	.word	0x20000200

08002440 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	ed87 0a02 	vstr	s0, [r7, #8]
 800244c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002450:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	60da      	str	r2, [r3, #12]
	kd_ = kd;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	611a      	str	r2, [r3, #16]
	ki_ = ki;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	615a      	str	r2, [r3, #20]

}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio){
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	61da      	str	r2, [r3, #28]

}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7e1b      	ldrb	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <_ZN9LineTrace4flipEv+0x16>
		pid();
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff31 	bl	8002308 <_ZN9LineTrace3pidEv>
	}
	if(line_sensor_->emergencyStop() == true){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fe6a 	bl	8002184 <_ZN10LineSensor13emergencyStopEv>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d011      	beq.n	80024da <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80024f8 <_ZN9LineTrace4flipEv+0x68>
 80024be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80024f8 <_ZN9LineTrace4flipEv+0x68>
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f982 	bl	80027cc <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3308      	adds	r3, #8
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fb5c 	bl	8001b90 <_ZN3LED2LREaa>
		led_.LR(0, -1);

	}


}
 80024d8:	e007      	b.n	80024ea <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3308      	adds	r3, #8
 80024de:	f04f 32ff 	mov.w	r2, #4294967295
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fb53 	bl	8001b90 <_ZN3LED2LREaa>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	f3af 8000 	nop.w
	...

08002500 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	761a      	strb	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	0000      	movs	r0, r0
 800251c:	0000      	movs	r0, r0
	...

08002520 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	761a      	strb	r2, [r3, #24]
	motor_->setRatio(0, 0);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002548 <_ZN9LineTrace4stopEv+0x28>
 8002536:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002548 <_ZN9LineTrace4stopEv+0x28>
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f946 	bl	80027cc <_ZN5Motor8setRatioEdd>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
	...

08002550 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_(0){}
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800255e:	3330      	adds	r3, #48	; 0x30
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800256a:	3332      	adds	r3, #50	; 0x32
 800256c:	2200      	movs	r2, #0
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <_ZN6Logger10sdCardInitEv>:

void Logger::sdCardInit()
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af02      	add	r7, sp, #8
 8002586:	6078      	str	r0, [r7, #4]
	if(sd_mount() == 1){
 8002588:	f7fe ff56 	bl	8001438 <sd_mount>
 800258c:	4603      	mov	r3, r0
 800258e:	2b01      	cmp	r3, #1
 8002590:	bf0c      	ite	eq
 8002592:	2301      	moveq	r3, #1
 8002594:	2300      	movne	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <_ZN6Logger10sdCardInitEv+0x24>
	  printf("mount success\r\n");
 800259c:	4815      	ldr	r0, [pc, #84]	; (80025f4 <_ZN6Logger10sdCardInitEv+0x74>)
 800259e:	f00e fa4d 	bl	8010a3c <puts>
 80025a2:	e002      	b.n	80025aa <_ZN6Logger10sdCardInitEv+0x2a>
	}
	else{
	  printf("error\r\n");
 80025a4:	4814      	ldr	r0, [pc, #80]	; (80025f8 <_ZN6Logger10sdCardInitEv+0x78>)
 80025a6:	f00e fa49 	bl	8010a3c <puts>
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 80025aa:	2364      	movs	r3, #100	; 0x64
 80025ac:	60fb      	str	r3, [r7, #12]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 80025ae:	f107 020c 	add.w	r2, r7, #12
 80025b2:	2301      	movs	r3, #1
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	2201      	movs	r2, #1
 80025ba:	4910      	ldr	r1, [pc, #64]	; (80025fc <_ZN6Logger10sdCardInitEv+0x7c>)
 80025bc:	4810      	ldr	r0, [pc, #64]	; (8002600 <_ZN6Logger10sdCardInitEv+0x80>)
 80025be:	f7fe fe97 	bl	80012f0 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	2201      	movs	r2, #1
 80025c8:	490c      	ldr	r1, [pc, #48]	; (80025fc <_ZN6Logger10sdCardInitEv+0x7c>)
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <_ZN6Logger10sdCardInitEv+0x80>)
 80025cc:	f7fe feee 	bl	80013ac <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80025d0:	f107 0208 	add.w	r2, r7, #8
 80025d4:	2301      	movs	r3, #1
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	2201      	movs	r2, #1
 80025dc:	4909      	ldr	r1, [pc, #36]	; (8002604 <_ZN6Logger10sdCardInitEv+0x84>)
 80025de:	4808      	ldr	r0, [pc, #32]	; (8002600 <_ZN6Logger10sdCardInitEv+0x80>)
 80025e0:	f7fe fe86 	bl	80012f0 <sd_write_array_int>

	printf("sd write and read success!!\r\n");
 80025e4:	4808      	ldr	r0, [pc, #32]	; (8002608 <_ZN6Logger10sdCardInitEv+0x88>)
 80025e6:	f00e fa29 	bl	8010a3c <puts>
	//sd_unmount();
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	08014b70 	.word	0x08014b70
 80025f8:	08014b80 	.word	0x08014b80
 80025fc:	08014b88 	.word	0x08014b88
 8002600:	08014b94 	.word	0x08014b94
 8002604:	08014b9c 	.word	0x08014b9c
 8002608:	08014ba8 	.word	0x08014ba8

0800260c <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	ed87 0a00 	vstr	s0, [r7]

	if(recording_flag_ == true){
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800261e:	3330      	adds	r3, #48	; 0x30
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d024      	beq.n	8002670 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_] = data;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800262c:	3332      	adds	r3, #50	; 0x32
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	601a      	str	r2, [r3, #0]

		log_index_++;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002640:	3332      	adds	r3, #50	; 0x32
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800264e:	3332      	adds	r3, #50	; 0x32
 8002650:	801a      	strh	r2, [r3, #0]

		if(log_index_ >= LOG_DATA_SIZE) log_index_ = 0;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002658:	3332      	adds	r3, #50	; 0x32
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002660:	4293      	cmp	r3, r2
 8002662:	d905      	bls.n	8002670 <_ZN6Logger8storeLogEf+0x64>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800266a:	3332      	adds	r3, #50	; 0x32
 800266c:	2200      	movs	r2, #0
 800266e:	801a      	strh	r2, [r3, #0]
	}
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_ZN6Logger8saveLogsEPKcS1_>:
{

}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]

	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE, store_data_float_, OVER_WRITE); //write
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	2300      	movs	r3, #0
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	68b8      	ldr	r0, [r7, #8]
 8002698:	f7fe fdc4 	bl	8001224 <sd_write_array_float>

}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_ZN6Logger5startEv>:

	log_index_ = 0;
}

void Logger::start()
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80026b2:	3330      	adds	r3, #48	; 0x30
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80026d2:	3330      	adds	r3, #48	; 0x30
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	805a      	strh	r2, [r3, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002710:	2108      	movs	r1, #8
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <_ZN5Motor4initEv+0x20>)
 8002714:	f007 f9c6 	bl	8009aa4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002718:	210c      	movs	r1, #12
 800271a:	4803      	ldr	r0, [pc, #12]	; (8002728 <_ZN5Motor4initEv+0x20>)
 800271c:	f007 f9c2 	bl	8009aa4 <HAL_TIM_PWM_Start>

}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	2000a118 	.word	0x2000a118

0800272c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da0d      	bge.n	800275a <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800273e:	2200      	movs	r2, #0
 8002740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002744:	481f      	ldr	r0, [pc, #124]	; (80027c4 <_ZN5Motor9motorCtrlEv+0x98>)
 8002746:	f003 fdc5 	bl	80062d4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002750:	b29b      	uxth	r3, r3
 8002752:	425b      	negs	r3, r3
 8002754:	b29b      	uxth	r3, r3
 8002756:	81fb      	strh	r3, [r7, #14]
 8002758:	e00a      	b.n	8002770 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800275a:	2201      	movs	r2, #1
 800275c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002760:	4818      	ldr	r0, [pc, #96]	; (80027c4 <_ZN5Motor9motorCtrlEv+0x98>)
 8002762:	f003 fdb7 	bl	80062d4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276c:	b29b      	uxth	r3, r3
 800276e:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002776:	2b00      	cmp	r3, #0
 8002778:	da0d      	bge.n	8002796 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800277a:	2201      	movs	r2, #1
 800277c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002780:	4810      	ldr	r0, [pc, #64]	; (80027c4 <_ZN5Motor9motorCtrlEv+0x98>)
 8002782:	f003 fda7 	bl	80062d4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800278c:	b29b      	uxth	r3, r3
 800278e:	425b      	negs	r3, r3
 8002790:	b29b      	uxth	r3, r3
 8002792:	81bb      	strh	r3, [r7, #12]
 8002794:	e00a      	b.n	80027ac <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002796:	2200      	movs	r2, #0
 8002798:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <_ZN5Motor9motorCtrlEv+0x98>)
 800279e:	f003 fd99 	bl	80062d4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80027ac:	89fa      	ldrh	r2, [r7, #14]
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <_ZN5Motor9motorCtrlEv+0x9c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80027b4:	89ba      	ldrh	r2, [r7, #12]
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <_ZN5Motor9motorCtrlEv+0x9c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	2000a118 	.word	0x2000a118

080027cc <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6178      	str	r0, [r7, #20]
 80027d4:	ed87 0b02 	vstr	d0, [r7, #8]
 80027d8:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <_ZN5Motor8setRatioEdd+0xd8>)
 80027e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027e6:	f7fe f9af 	bl	8000b48 <__aeabi_dcmpgt>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <_ZN5Motor8setRatioEdd+0x30>
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	4c2b      	ldr	r4, [pc, #172]	; (80028a4 <_ZN5Motor8setRatioEdd+0xd8>)
 80027f6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80027fa:	e00e      	b.n	800281a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <_ZN5Motor8setRatioEdd+0xdc>)
 8002802:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002806:	f7fe f981 	bl	8000b0c <__aeabi_dcmplt>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <_ZN5Motor8setRatioEdd+0x4e>
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	4c24      	ldr	r4, [pc, #144]	; (80028a8 <_ZN5Motor8setRatioEdd+0xdc>)
 8002816:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <_ZN5Motor8setRatioEdd+0xd8>)
 8002820:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002824:	f7fe f990 	bl	8000b48 <__aeabi_dcmpgt>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <_ZN5Motor8setRatioEdd+0x6e>
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	4c1c      	ldr	r4, [pc, #112]	; (80028a4 <_ZN5Motor8setRatioEdd+0xd8>)
 8002834:	e9c7 3400 	strd	r3, r4, [r7]
 8002838:	e00e      	b.n	8002858 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <_ZN5Motor8setRatioEdd+0xdc>)
 8002840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002844:	f7fe f962 	bl	8000b0c <__aeabi_dcmplt>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <_ZN5Motor8setRatioEdd+0x8c>
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	4c15      	ldr	r4, [pc, #84]	; (80028a8 <_ZN5Motor8setRatioEdd+0xdc>)
 8002854:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <_ZN5Motor8setRatioEdd+0xe0>)
 800285e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002862:	f7fd fee1 	bl	8000628 <__aeabi_dmul>
 8002866:	4603      	mov	r3, r0
 8002868:	460c      	mov	r4, r1
 800286a:	4618      	mov	r0, r3
 800286c:	4621      	mov	r1, r4
 800286e:	f7fe f98b 	bl	8000b88 <__aeabi_d2iz>
 8002872:	4603      	mov	r3, r0
 8002874:	b21a      	sxth	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <_ZN5Motor8setRatioEdd+0xe0>)
 8002880:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002884:	f7fd fed0 	bl	8000628 <__aeabi_dmul>
 8002888:	4603      	mov	r3, r0
 800288a:	460c      	mov	r4, r1
 800288c:	4618      	mov	r0, r3
 800288e:	4621      	mov	r1, r4
 8002890:	f7fe f97a 	bl	8000b88 <__aeabi_d2iz>
 8002894:	4603      	mov	r3, r0
 8002896:	b21a      	sxth	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	805a      	strh	r2, [r3, #2]

}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	3ff00000 	.word	0x3ff00000
 80028a8:	bff00000 	.word	0xbff00000
 80028ac:	409c2000 	.word	0x409c2000

080028b0 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80028bc:	2102      	movs	r1, #2
 80028be:	4822      	ldr	r0, [pc, #136]	; (8002948 <_ZN12RotarySwitch8getValueEv+0x98>)
 80028c0:	f003 fcf0 	bl	80062a4 <HAL_GPIO_ReadPin>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <_ZN12RotarySwitch8getValueEv+0x2c>
 80028d4:	89fb      	ldrh	r3, [r7, #14]
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80028dc:	2108      	movs	r1, #8
 80028de:	481a      	ldr	r0, [pc, #104]	; (8002948 <_ZN12RotarySwitch8getValueEv+0x98>)
 80028e0:	f003 fce0 	bl	80062a4 <HAL_GPIO_ReadPin>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <_ZN12RotarySwitch8getValueEv+0x4c>
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	f043 0302 	orr.w	r3, r3, #2
 80028fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80028fc:	2110      	movs	r1, #16
 80028fe:	4812      	ldr	r0, [pc, #72]	; (8002948 <_ZN12RotarySwitch8getValueEv+0x98>)
 8002900:	f003 fcd0 	bl	80062a4 <HAL_GPIO_ReadPin>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <_ZN12RotarySwitch8getValueEv+0x6c>
 8002914:	89fb      	ldrh	r3, [r7, #14]
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 800291c:	2180      	movs	r1, #128	; 0x80
 800291e:	480a      	ldr	r0, [pc, #40]	; (8002948 <_ZN12RotarySwitch8getValueEv+0x98>)
 8002920:	f003 fcc0 	bl	80062a4 <HAL_GPIO_ReadPin>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <_ZN12RotarySwitch8getValueEv+0x8c>
 8002934:	89fb      	ldrh	r3, [r7, #14]
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800293c:	89fb      	ldrh	r3, [r7, #14]

}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40020c00 	.word	0x40020c00

0800294c <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
{

}
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	2b04      	cmp	r3, #4
 8002974:	d111      	bne.n	800299a <_ZN10SideSensor12updateStatusEt+0x36>
 8002976:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e010      	b.n	80029bc <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d10d      	bne.n	80029bc <_ZN10SideSensor12updateStatusEt+0x58>
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c2:	d111      	bne.n	80029e8 <_ZN10SideSensor12updateStatusEt+0x84>
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <_ZN10SideSensor12updateStatusEt+0xb8>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f083 0301 	eor.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	b29a      	uxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <_ZN10SideSensor12updateStatusEt+0xb8>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 80029e6:	e011      	b.n	8002a0c <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ee:	d10d      	bne.n	8002a0c <_ZN10SideSensor12updateStatusEt+0xa8>
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <_ZN10SideSensor12updateStatusEt+0xb8>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	f083 0302 	eor.w	r3, r3, #2
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	20000204 	.word	0x20000204
 8002a1c:	20000205 	.word	0x20000205

08002a20 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	615a      	str	r2, [r3, #20]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	621a      	str	r2, [r3, #32]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
	imu_ = imu;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <_ZN12VelocityCtrl9calcOmegaEv>:

	return current_velocity_;
}

float VelocityCtrl::calcOmega()
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	float omega = imu_->getOmega();
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fead 	bl	8001814 <_ZN3IMU8getOmegaEv>
 8002aba:	ed87 0a03 	vstr	s0, [r7, #12]
	current_omega_ = -(omega / 16.4) * PI / 180;
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7fd fd5a 	bl	8000578 <__aeabi_f2d>
 8002ac4:	a317      	add	r3, pc, #92	; (adr r3, 8002b24 <_ZN12VelocityCtrl9calcOmegaEv+0x7c>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd fed7 	bl	800087c <__aeabi_ddiv>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002ad8:	a314      	add	r3, pc, #80	; (adr r3, 8002b2c <_ZN12VelocityCtrl9calcOmegaEv+0x84>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	4620      	mov	r0, r4
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	f7fd fda1 	bl	8000628 <__aeabi_dmul>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	460c      	mov	r4, r1
 8002aea:	4618      	mov	r0, r3
 8002aec:	4621      	mov	r1, r4
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <_ZN12VelocityCtrl9calcOmegaEv+0x78>)
 8002af4:	f7fd fec2 	bl	800087c <__aeabi_ddiv>
 8002af8:	4603      	mov	r3, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	4618      	mov	r0, r3
 8002afe:	4621      	mov	r1, r4
 8002b00:	f7fe f88a 	bl	8000c18 <__aeabi_d2f>
 8002b04:	4602      	mov	r2, r0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60da      	str	r2, [r3, #12]
	//printf("omegao: %f\n", current_omega_);

	return current_omega_;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	ee07 3a90 	vmov	s15, r3
}
 8002b12:	eeb0 0a67 	vmov.f32	s0, s15
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1c:	f3af 8000 	nop.w
 8002b20:	40668000 	.word	0x40668000
 8002b24:	66666666 	.word	0x66666666
 8002b28:	40306666 	.word	0x40306666
 8002b2c:	54411744 	.word	0x54411744
 8002b30:	400921fb 	.word	0x400921fb

08002b34 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b40:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	605a      	str	r2, [r3, #4]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_ZN12VelocityCtrl5startEv>:
	return velocity;

}

void VelocityCtrl::start()
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	calcOmega();
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ff9b 	bl	8002aa8 <_ZN12VelocityCtrl9calcOmegaEv>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	0000      	movs	r0, r0
 8002b7c:	0000      	movs	r0, r0
	...

08002b80 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002bb0 <_ZN12VelocityCtrl4stopEv+0x30>
 8002b98:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002bb0 <_ZN12VelocityCtrl4stopEv+0x30>
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fe15 	bl	80027cc <_ZN5Motor8setRatioEdd>

}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	f3af 8000 	nop.w
	...

08002bb8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002bc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002bc4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002bd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002bd4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002bd8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00b      	beq.n	8002bf8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002be0:	e000      	b.n	8002be4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002be2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002be4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f9      	beq.n	8002be2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002bee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002bf8:	687b      	ldr	r3, [r7, #4]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e009      	b.n	8002c2c <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	60ba      	str	r2, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ffc9 	bl	8002bb8 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbf1      	blt.n	8002c18 <_write+0x12>
  }
  return len;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 fe2a 	bl	80048a4 <cppExit>
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8002c6a:	f001 fde1 	bl	8004830 <cppFlip1ms>

		tim6_timer++;
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c76:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d902      	bls.n	8002c88 <HAL_TIM_PeriodElapsedCallback+0x30>
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10e      	bne.n	8002cb0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8002c92:	f001 fded 	bl	8004870 <cppFlip100ns>

		tim7_timer++;
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c9e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d902      	bls.n	8002cb0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8002cba:	f001 fde3 	bl	8004884 <cppFlip10ms>

		tim13_timer++;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002cc6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a06      	ldr	r2, [pc, #24]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d902      	bls.n	8002cd8 <HAL_TIM_PeriodElapsedCallback+0x80>
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
	}

}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40001000 	.word	0x40001000
 8002ce4:	2000a288 	.word	0x2000a288
 8002ce8:	0001869f 	.word	0x0001869f
 8002cec:	40001400 	.word	0x40001400
 8002cf0:	2000a2cc 	.word	0x2000a2cc
 8002cf4:	40001c00 	.word	0x40001c00
 8002cf8:	2000a2d0 	.word	0x2000a2d0

08002cfc <init>:

void init()
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8002d00:	2201      	movs	r2, #1
 8002d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d06:	4808      	ldr	r0, [pc, #32]	; (8002d28 <init+0x2c>)
 8002d08:	f003 fae4 	bl	80062d4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8002d0c:	4807      	ldr	r0, [pc, #28]	; (8002d2c <init+0x30>)
 8002d0e:	f006 fe7a 	bl	8009a06 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002d12:	4807      	ldr	r0, [pc, #28]	; (8002d30 <init+0x34>)
 8002d14:	f006 fe77 	bl	8009a06 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8002d18:	4806      	ldr	r0, [pc, #24]	; (8002d34 <init+0x38>)
 8002d1a:	f006 fe74 	bl	8009a06 <HAL_TIM_Base_Start_IT>

	cppInit();
 8002d1e:	f001 fd51 	bl	80047c4 <cppInit>
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	2000a3b4 	.word	0x2000a3b4
 8002d30:	2000a558 	.word	0x2000a558
 8002d34:	2000a2d4 	.word	0x2000a2d4

08002d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d3c:	f001 ffc2 	bl	8004cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d40:	f000 f82a 	bl	8002d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d44:	f000 fdbc 	bl	80038c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d48:	f000 fd8a 	bl	8003860 <MX_DMA_Init>
  MX_I2C2_Init();
 8002d4c:	f000 f9e8 	bl	8003120 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002d50:	f000 fa14 	bl	800317c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8002d54:	f000 fa32 	bl	80031bc <MX_SPI2_Init>
  MX_TIM1_Init();
 8002d58:	f000 fa66 	bl	8003228 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002d5c:	f000 fb70 	bl	8003440 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002d60:	f000 fc3c 	bl	80035dc <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8002d64:	f000 fd52 	bl	800380c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002d68:	f008 fe20 	bl	800b9ac <MX_FATFS_Init>
  MX_TIM6_Init();
 8002d6c:	f000 fbcc 	bl	8003508 <MX_TIM6_Init>
  MX_I2C1_Init();
 8002d70:	f000 f9a8 	bl	80030c4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002d74:	f000 fb00 	bl	8003378 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002d78:	f000 fc88 	bl	800368c <MX_TIM10_Init>
  MX_TIM11_Init();
 8002d7c:	f000 fcd4 	bl	8003728 <MX_TIM11_Init>
  MX_ADC2_Init();
 8002d80:	f000 f898 	bl	8002eb4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8002d84:	f000 fbf6 	bl	8003574 <MX_TIM7_Init>
  MX_TIM13_Init();
 8002d88:	f000 fd1c 	bl	80037c4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8002d8c:	f7ff ffb6 	bl	8002cfc <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8002d90:	f001 fd98 	bl	80048c4 <cppLoop>
 8002d94:	e7fc      	b.n	8002d90 <main+0x58>
	...

08002d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b0a4      	sub	sp, #144	; 0x90
 8002d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002da2:	2234      	movs	r2, #52	; 0x34
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f00c ff7a 	bl	800fca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	223c      	movs	r2, #60	; 0x3c
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f00c ff6b 	bl	800fca0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <SystemClock_Config+0x114>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a36      	ldr	r2, [pc, #216]	; (8002eac <SystemClock_Config+0x114>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b34      	ldr	r3, [pc, #208]	; (8002eac <SystemClock_Config+0x114>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <SystemClock_Config+0x118>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a30      	ldr	r2, [pc, #192]	; (8002eb0 <SystemClock_Config+0x118>)
 8002df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <SystemClock_Config+0x118>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dfe:	607b      	str	r3, [r7, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e02:	2301      	movs	r3, #1
 8002e04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e14:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e16:	2308      	movs	r3, #8
 8002e18:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002e1a:	23b4      	movs	r3, #180	; 0xb4
 8002e1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e20:	2302      	movs	r3, #2
 8002e22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002e26:	2308      	movs	r3, #8
 8002e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 fb3c 	bl	80074b4 <HAL_RCC_OscConfig>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002e42:	f000 fe93 	bl	8003b6c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002e46:	f003 feb7 	bl	8006bb8 <HAL_PWREx_EnableOverDrive>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002e50:	f000 fe8c 	bl	8003b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e54:	230f      	movs	r3, #15
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e6a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e70:	2105      	movs	r1, #5
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 fef0 	bl	8006c58 <HAL_RCC_ClockConfig>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002e7e:	f000 fe75 	bl	8003b6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8002e82:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e86:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	4618      	mov	r0, r3
 8002e96:	f004 f8cf 	bl	8007038 <HAL_RCCEx_PeriphCLKConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8002ea0:	f000 fe64 	bl	8003b6c <Error_Handler>
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3790      	adds	r7, #144	; 0x90
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40007000 	.word	0x40007000

08002eb4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002eba:	463b      	mov	r3, r7
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002ec6:	4b7c      	ldr	r3, [pc, #496]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002ec8:	4a7c      	ldr	r2, [pc, #496]	; (80030bc <MX_ADC2_Init+0x208>)
 8002eca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ecc:	4b7a      	ldr	r3, [pc, #488]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002ece:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ed2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002ed4:	4b78      	ldr	r3, [pc, #480]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002eda:	4b77      	ldr	r3, [pc, #476]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002ee0:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002ee6:	4b74      	ldr	r3, [pc, #464]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002eee:	4b72      	ldr	r3, [pc, #456]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ef4:	4b70      	ldr	r3, [pc, #448]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002ef6:	4a72      	ldr	r2, [pc, #456]	; (80030c0 <MX_ADC2_Init+0x20c>)
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002efa:	4b6f      	ldr	r3, [pc, #444]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8002f00:	4b6d      	ldr	r3, [pc, #436]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002f02:	220e      	movs	r2, #14
 8002f04:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002f06:	4b6c      	ldr	r3, [pc, #432]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f0e:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002f14:	4868      	ldr	r0, [pc, #416]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002f16:	f001 ff69 	bl	8004dec <HAL_ADC_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002f20:	f000 fe24 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002f24:	230a      	movs	r3, #10
 8002f26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002f2c:	2306      	movs	r3, #6
 8002f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f30:	463b      	mov	r3, r7
 8002f32:	4619      	mov	r1, r3
 8002f34:	4860      	ldr	r0, [pc, #384]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002f36:	f002 f8ad 	bl	8005094 <HAL_ADC_ConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002f40:	f000 fe14 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002f44:	230b      	movs	r3, #11
 8002f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4859      	ldr	r0, [pc, #356]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002f52:	f002 f89f 	bl	8005094 <HAL_ADC_ConfigChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002f5c:	f000 fe06 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002f60:	230c      	movs	r3, #12
 8002f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002f64:	2303      	movs	r3, #3
 8002f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f68:	463b      	mov	r3, r7
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4852      	ldr	r0, [pc, #328]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002f6e:	f002 f891 	bl	8005094 <HAL_ADC_ConfigChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002f78:	f000 fdf8 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002f7c:	230d      	movs	r3, #13
 8002f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002f80:	2304      	movs	r3, #4
 8002f82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f84:	463b      	mov	r3, r7
 8002f86:	4619      	mov	r1, r3
 8002f88:	484b      	ldr	r0, [pc, #300]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002f8a:	f002 f883 	bl	8005094 <HAL_ADC_ConfigChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002f94:	f000 fdea 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002f9c:	2305      	movs	r3, #5
 8002f9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fa0:	463b      	mov	r3, r7
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4844      	ldr	r0, [pc, #272]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002fa6:	f002 f875 	bl	8005094 <HAL_ADC_ConfigChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8002fb0:	f000 fddc 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002fb8:	2306      	movs	r3, #6
 8002fba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	483d      	ldr	r0, [pc, #244]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002fc2:	f002 f867 	bl	8005094 <HAL_ADC_ConfigChannel>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8002fcc:	f000 fdce 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002fd4:	2307      	movs	r3, #7
 8002fd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fd8:	463b      	mov	r3, r7
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4836      	ldr	r0, [pc, #216]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002fde:	f002 f859 	bl	8005094 <HAL_ADC_ConfigChannel>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8002fe8:	f000 fdc0 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002fec:	2303      	movs	r3, #3
 8002fee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ff4:	463b      	mov	r3, r7
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	482f      	ldr	r0, [pc, #188]	; (80030b8 <MX_ADC2_Init+0x204>)
 8002ffa:	f002 f84b 	bl	8005094 <HAL_ADC_ConfigChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003004:	f000 fdb2 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003008:	2304      	movs	r3, #4
 800300a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800300c:	2309      	movs	r3, #9
 800300e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003010:	463b      	mov	r3, r7
 8003012:	4619      	mov	r1, r3
 8003014:	4828      	ldr	r0, [pc, #160]	; (80030b8 <MX_ADC2_Init+0x204>)
 8003016:	f002 f83d 	bl	8005094 <HAL_ADC_ConfigChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003020:	f000 fda4 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003024:	2305      	movs	r3, #5
 8003026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003028:	230a      	movs	r3, #10
 800302a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800302c:	463b      	mov	r3, r7
 800302e:	4619      	mov	r1, r3
 8003030:	4821      	ldr	r0, [pc, #132]	; (80030b8 <MX_ADC2_Init+0x204>)
 8003032:	f002 f82f 	bl	8005094 <HAL_ADC_ConfigChannel>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800303c:	f000 fd96 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003040:	2306      	movs	r3, #6
 8003042:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003044:	230b      	movs	r3, #11
 8003046:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003048:	463b      	mov	r3, r7
 800304a:	4619      	mov	r1, r3
 800304c:	481a      	ldr	r0, [pc, #104]	; (80030b8 <MX_ADC2_Init+0x204>)
 800304e:	f002 f821 	bl	8005094 <HAL_ADC_ConfigChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003058:	f000 fd88 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800305c:	2307      	movs	r3, #7
 800305e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003060:	230c      	movs	r3, #12
 8003062:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003064:	463b      	mov	r3, r7
 8003066:	4619      	mov	r1, r3
 8003068:	4813      	ldr	r0, [pc, #76]	; (80030b8 <MX_ADC2_Init+0x204>)
 800306a:	f002 f813 	bl	8005094 <HAL_ADC_ConfigChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003074:	f000 fd7a 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003078:	2308      	movs	r3, #8
 800307a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800307c:	230d      	movs	r3, #13
 800307e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003080:	463b      	mov	r3, r7
 8003082:	4619      	mov	r1, r3
 8003084:	480c      	ldr	r0, [pc, #48]	; (80030b8 <MX_ADC2_Init+0x204>)
 8003086:	f002 f805 	bl	8005094 <HAL_ADC_ConfigChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003090:	f000 fd6c 	bl	8003b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003094:	2309      	movs	r3, #9
 8003096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003098:	230e      	movs	r3, #14
 800309a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800309c:	463b      	mov	r3, r7
 800309e:	4619      	mov	r1, r3
 80030a0:	4805      	ldr	r0, [pc, #20]	; (80030b8 <MX_ADC2_Init+0x204>)
 80030a2:	f001 fff7 	bl	8005094 <HAL_ADC_ConfigChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80030ac:	f000 fd5e 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	2000a158 	.word	0x2000a158
 80030bc:	40012100 	.word	0x40012100
 80030c0:	0f000001 	.word	0x0f000001

080030c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <MX_I2C1_Init+0x50>)
 80030ca:	4a13      	ldr	r2, [pc, #76]	; (8003118 <MX_I2C1_Init+0x54>)
 80030cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <MX_I2C1_Init+0x50>)
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <MX_I2C1_Init+0x58>)
 80030d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <MX_I2C1_Init+0x50>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <MX_I2C1_Init+0x50>)
 80030dc:	2200      	movs	r2, #0
 80030de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <MX_I2C1_Init+0x50>)
 80030e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <MX_I2C1_Init+0x50>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <MX_I2C1_Init+0x50>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <MX_I2C1_Init+0x50>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <MX_I2C1_Init+0x50>)
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003100:	4804      	ldr	r0, [pc, #16]	; (8003114 <MX_I2C1_Init+0x50>)
 8003102:	f003 f919 	bl	8006338 <HAL_I2C_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800310c:	f000 fd2e 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}
 8003114:	2000a1a0 	.word	0x2000a1a0
 8003118:	40005400 	.word	0x40005400
 800311c:	000186a0 	.word	0x000186a0

08003120 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <MX_I2C2_Init+0x50>)
 8003126:	4a13      	ldr	r2, [pc, #76]	; (8003174 <MX_I2C2_Init+0x54>)
 8003128:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <MX_I2C2_Init+0x50>)
 800312c:	4a12      	ldr	r2, [pc, #72]	; (8003178 <MX_I2C2_Init+0x58>)
 800312e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <MX_I2C2_Init+0x50>)
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <MX_I2C2_Init+0x50>)
 8003138:	2200      	movs	r2, #0
 800313a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <MX_I2C2_Init+0x50>)
 800313e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003142:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <MX_I2C2_Init+0x50>)
 8003146:	2200      	movs	r2, #0
 8003148:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <MX_I2C2_Init+0x50>)
 800314c:	2200      	movs	r2, #0
 800314e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <MX_I2C2_Init+0x50>)
 8003152:	2200      	movs	r2, #0
 8003154:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <MX_I2C2_Init+0x50>)
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800315c:	4804      	ldr	r0, [pc, #16]	; (8003170 <MX_I2C2_Init+0x50>)
 800315e:	f003 f8eb 	bl	8006338 <HAL_I2C_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003168:	f000 fd00 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	2000a234 	.word	0x2000a234
 8003174:	40005800 	.word	0x40005800
 8003178:	000186a0 	.word	0x000186a0

0800317c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_SDIO_SD_Init+0x38>)
 8003182:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <MX_SDIO_SD_Init+0x3c>)
 8003184:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <MX_SDIO_SD_Init+0x38>)
 8003188:	2200      	movs	r2, #0
 800318a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_SDIO_SD_Init+0x38>)
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <MX_SDIO_SD_Init+0x38>)
 8003194:	2200      	movs	r2, #0
 8003196:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <MX_SDIO_SD_Init+0x38>)
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <MX_SDIO_SD_Init+0x38>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <MX_SDIO_SD_Init+0x38>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	2000a434 	.word	0x2000a434
 80031b8:	40012c00 	.word	0x40012c00

080031bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80031c0:	4b17      	ldr	r3, [pc, #92]	; (8003220 <MX_SPI2_Init+0x64>)
 80031c2:	4a18      	ldr	r2, [pc, #96]	; (8003224 <MX_SPI2_Init+0x68>)
 80031c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <MX_SPI2_Init+0x64>)
 80031c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <MX_SPI2_Init+0x64>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <MX_SPI2_Init+0x64>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <MX_SPI2_Init+0x64>)
 80031dc:	2202      	movs	r2, #2
 80031de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80031e0:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <MX_SPI2_Init+0x64>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <MX_SPI2_Init+0x64>)
 80031e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <MX_SPI2_Init+0x64>)
 80031f0:	2228      	movs	r2, #40	; 0x28
 80031f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <MX_SPI2_Init+0x64>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <MX_SPI2_Init+0x64>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003200:	4b07      	ldr	r3, [pc, #28]	; (8003220 <MX_SPI2_Init+0x64>)
 8003202:	2200      	movs	r2, #0
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <MX_SPI2_Init+0x64>)
 8003208:	220a      	movs	r2, #10
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800320c:	4804      	ldr	r0, [pc, #16]	; (8003220 <MX_SPI2_Init+0x64>)
 800320e:	f005 fe7b 	bl	8008f08 <HAL_SPI_Init>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003218:	f000 fca8 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}
 8003220:	2000a080 	.word	0x2000a080
 8003224:	40003800 	.word	0x40003800

08003228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b09a      	sub	sp, #104	; 0x68
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800322e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003232:	2224      	movs	r2, #36	; 0x24
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f00c fd32 	bl	800fca0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800323c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003246:	f107 0320 	add.w	r3, r7, #32
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	609a      	str	r2, [r3, #8]
 8003252:	60da      	str	r2, [r3, #12]
 8003254:	611a      	str	r2, [r3, #16]
 8003256:	615a      	str	r2, [r3, #20]
 8003258:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800325a:	463b      	mov	r3, r7
 800325c:	2220      	movs	r2, #32
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f00c fd1d 	bl	800fca0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003266:	4b42      	ldr	r3, [pc, #264]	; (8003370 <MX_TIM1_Init+0x148>)
 8003268:	4a42      	ldr	r2, [pc, #264]	; (8003374 <MX_TIM1_Init+0x14c>)
 800326a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800326c:	4b40      	ldr	r3, [pc, #256]	; (8003370 <MX_TIM1_Init+0x148>)
 800326e:	2200      	movs	r2, #0
 8003270:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003272:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <MX_TIM1_Init+0x148>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003278:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <MX_TIM1_Init+0x148>)
 800327a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003280:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <MX_TIM1_Init+0x148>)
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003286:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <MX_TIM1_Init+0x148>)
 8003288:	2200      	movs	r2, #0
 800328a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800328c:	4b38      	ldr	r3, [pc, #224]	; (8003370 <MX_TIM1_Init+0x148>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003292:	4837      	ldr	r0, [pc, #220]	; (8003370 <MX_TIM1_Init+0x148>)
 8003294:	f006 fbdb 	bl	8009a4e <HAL_TIM_PWM_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800329e:	f000 fc65 	bl	8003b6c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032a2:	2303      	movs	r3, #3
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032a6:	2300      	movs	r3, #0
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032aa:	2301      	movs	r3, #1
 80032ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032b6:	2300      	movs	r3, #0
 80032b8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032ba:	2301      	movs	r3, #1
 80032bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032be:	2300      	movs	r3, #0
 80032c0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80032c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032ca:	4619      	mov	r1, r3
 80032cc:	4828      	ldr	r0, [pc, #160]	; (8003370 <MX_TIM1_Init+0x148>)
 80032ce:	f006 fc27 	bl	8009b20 <HAL_TIM_Encoder_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80032d8:	f000 fc48 	bl	8003b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032e8:	4619      	mov	r1, r3
 80032ea:	4821      	ldr	r0, [pc, #132]	; (8003370 <MX_TIM1_Init+0x148>)
 80032ec:	f007 f94e 	bl	800a58c <HAL_TIMEx_MasterConfigSynchronization>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80032f6:	f000 fc39 	bl	8003b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032fa:	2360      	movs	r3, #96	; 0x60
 80032fc:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003302:	2300      	movs	r3, #0
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003306:	2300      	movs	r3, #0
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003316:	f107 0320 	add.w	r3, r7, #32
 800331a:	2208      	movs	r2, #8
 800331c:	4619      	mov	r1, r3
 800331e:	4814      	ldr	r0, [pc, #80]	; (8003370 <MX_TIM1_Init+0x148>)
 8003320:	f006 fdd0 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800332a:	f000 fc1f 	bl	8003b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800332e:	2300      	movs	r3, #0
 8003330:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003346:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800334c:	463b      	mov	r3, r7
 800334e:	4619      	mov	r1, r3
 8003350:	4807      	ldr	r0, [pc, #28]	; (8003370 <MX_TIM1_Init+0x148>)
 8003352:	f007 f997 	bl	800a684 <HAL_TIMEx_ConfigBreakDeadTime>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800335c:	f000 fc06 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003360:	4803      	ldr	r0, [pc, #12]	; (8003370 <MX_TIM1_Init+0x148>)
 8003362:	f000 ffeb 	bl	800433c <HAL_TIM_MspPostInit>

}
 8003366:	bf00      	nop
 8003368:	3768      	adds	r7, #104	; 0x68
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	2000a3f4 	.word	0x2000a3f4
 8003374:	40010000 	.word	0x40010000

08003378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003388:	1d3b      	adds	r3, r7, #4
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	611a      	str	r2, [r3, #16]
 8003396:	615a      	str	r2, [r3, #20]
 8003398:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <MX_TIM3_Init+0xc0>)
 800339c:	4a27      	ldr	r2, [pc, #156]	; (800343c <MX_TIM3_Init+0xc4>)
 800339e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <MX_TIM3_Init+0xc0>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <MX_TIM3_Init+0xc0>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <MX_TIM3_Init+0xc0>)
 80033ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b4:	4b20      	ldr	r3, [pc, #128]	; (8003438 <MX_TIM3_Init+0xc0>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ba:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <MX_TIM3_Init+0xc0>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033c0:	481d      	ldr	r0, [pc, #116]	; (8003438 <MX_TIM3_Init+0xc0>)
 80033c2:	f006 fb44 	bl	8009a4e <HAL_TIM_PWM_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80033cc:	f000 fbce 	bl	8003b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033d8:	f107 0320 	add.w	r3, r7, #32
 80033dc:	4619      	mov	r1, r3
 80033de:	4816      	ldr	r0, [pc, #88]	; (8003438 <MX_TIM3_Init+0xc0>)
 80033e0:	f007 f8d4 	bl	800a58c <HAL_TIMEx_MasterConfigSynchronization>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80033ea:	f000 fbbf 	bl	8003b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ee:	2360      	movs	r3, #96	; 0x60
 80033f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	2200      	movs	r2, #0
 8003402:	4619      	mov	r1, r3
 8003404:	480c      	ldr	r0, [pc, #48]	; (8003438 <MX_TIM3_Init+0xc0>)
 8003406:	f006 fd5d 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003410:	f000 fbac 	bl	8003b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	2204      	movs	r2, #4
 8003418:	4619      	mov	r1, r3
 800341a:	4807      	ldr	r0, [pc, #28]	; (8003438 <MX_TIM3_Init+0xc0>)
 800341c:	f006 fd52 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003426:	f000 fba1 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800342a:	4803      	ldr	r0, [pc, #12]	; (8003438 <MX_TIM3_Init+0xc0>)
 800342c:	f000 ff86 	bl	800433c <HAL_TIM_MspPostInit>

}
 8003430:	bf00      	nop
 8003432:	3728      	adds	r7, #40	; 0x28
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2000a28c 	.word	0x2000a28c
 800343c:	40000400 	.word	0x40000400

08003440 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	; 0x28
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003446:	f107 0320 	add.w	r3, r7, #32
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	611a      	str	r2, [r3, #16]
 800345e:	615a      	str	r2, [r3, #20]
 8003460:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003462:	4b27      	ldr	r3, [pc, #156]	; (8003500 <MX_TIM4_Init+0xc0>)
 8003464:	4a27      	ldr	r2, [pc, #156]	; (8003504 <MX_TIM4_Init+0xc4>)
 8003466:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <MX_TIM4_Init+0xc0>)
 800346a:	2200      	movs	r2, #0
 800346c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <MX_TIM4_Init+0xc0>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <MX_TIM4_Init+0xc0>)
 8003476:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800347a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <MX_TIM4_Init+0xc0>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003482:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <MX_TIM4_Init+0xc0>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003488:	481d      	ldr	r0, [pc, #116]	; (8003500 <MX_TIM4_Init+0xc0>)
 800348a:	f006 fae0 	bl	8009a4e <HAL_TIM_PWM_Init>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003494:	f000 fb6a 	bl	8003b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003498:	2300      	movs	r3, #0
 800349a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	4619      	mov	r1, r3
 80034a6:	4816      	ldr	r0, [pc, #88]	; (8003500 <MX_TIM4_Init+0xc0>)
 80034a8:	f007 f870 	bl	800a58c <HAL_TIMEx_MasterConfigSynchronization>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80034b2:	f000 fb5b 	bl	8003b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b6:	2360      	movs	r3, #96	; 0x60
 80034b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	2208      	movs	r2, #8
 80034ca:	4619      	mov	r1, r3
 80034cc:	480c      	ldr	r0, [pc, #48]	; (8003500 <MX_TIM4_Init+0xc0>)
 80034ce:	f006 fcf9 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80034d8:	f000 fb48 	bl	8003b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	220c      	movs	r2, #12
 80034e0:	4619      	mov	r1, r3
 80034e2:	4807      	ldr	r0, [pc, #28]	; (8003500 <MX_TIM4_Init+0xc0>)
 80034e4:	f006 fcee 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80034ee:	f000 fb3d 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80034f2:	4803      	ldr	r0, [pc, #12]	; (8003500 <MX_TIM4_Init+0xc0>)
 80034f4:	f000 ff22 	bl	800433c <HAL_TIM_MspPostInit>

}
 80034f8:	bf00      	nop
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	2000a118 	.word	0x2000a118
 8003504:	40000800 	.word	0x40000800

08003508 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800350e:	463b      	mov	r3, r7
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <MX_TIM6_Init+0x64>)
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <MX_TIM6_Init+0x68>)
 800351a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800351c:	4b13      	ldr	r3, [pc, #76]	; (800356c <MX_TIM6_Init+0x64>)
 800351e:	2259      	movs	r2, #89	; 0x59
 8003520:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <MX_TIM6_Init+0x64>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <MX_TIM6_Init+0x64>)
 800352a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800352e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <MX_TIM6_Init+0x64>)
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003536:	480d      	ldr	r0, [pc, #52]	; (800356c <MX_TIM6_Init+0x64>)
 8003538:	f006 fa3a 	bl	80099b0 <HAL_TIM_Base_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003542:	f000 fb13 	bl	8003b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800354e:	463b      	mov	r3, r7
 8003550:	4619      	mov	r1, r3
 8003552:	4806      	ldr	r0, [pc, #24]	; (800356c <MX_TIM6_Init+0x64>)
 8003554:	f007 f81a 	bl	800a58c <HAL_TIMEx_MasterConfigSynchronization>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800355e:	f000 fb05 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	2000a3b4 	.word	0x2000a3b4
 8003570:	40001000 	.word	0x40001000

08003574 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800357a:	463b      	mov	r3, r7
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <MX_TIM7_Init+0x60>)
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <MX_TIM7_Init+0x64>)
 8003586:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <MX_TIM7_Init+0x60>)
 800358a:	22b3      	movs	r2, #179	; 0xb3
 800358c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <MX_TIM7_Init+0x60>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <MX_TIM7_Init+0x60>)
 8003596:	2231      	movs	r2, #49	; 0x31
 8003598:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <MX_TIM7_Init+0x60>)
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80035a0:	480c      	ldr	r0, [pc, #48]	; (80035d4 <MX_TIM7_Init+0x60>)
 80035a2:	f006 fa05 	bl	80099b0 <HAL_TIM_Base_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80035ac:	f000 fade 	bl	8003b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b0:	2300      	movs	r3, #0
 80035b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035b8:	463b      	mov	r3, r7
 80035ba:	4619      	mov	r1, r3
 80035bc:	4805      	ldr	r0, [pc, #20]	; (80035d4 <MX_TIM7_Init+0x60>)
 80035be:	f006 ffe5 	bl	800a58c <HAL_TIMEx_MasterConfigSynchronization>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80035c8:	f000 fad0 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	2000a558 	.word	0x2000a558
 80035d8:	40001400 	.word	0x40001400

080035dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	; 0x30
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	2224      	movs	r2, #36	; 0x24
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f00c fb58 	bl	800fca0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <MX_TIM8_Init+0xa8>)
 80035fa:	4a23      	ldr	r2, [pc, #140]	; (8003688 <MX_TIM8_Init+0xac>)
 80035fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80035fe:	4b21      	ldr	r3, [pc, #132]	; (8003684 <MX_TIM8_Init+0xa8>)
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003604:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <MX_TIM8_Init+0xa8>)
 8003606:	2210      	movs	r2, #16
 8003608:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800360a:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <MX_TIM8_Init+0xa8>)
 800360c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003610:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <MX_TIM8_Init+0xa8>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <MX_TIM8_Init+0xa8>)
 800361a:	2200      	movs	r2, #0
 800361c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <MX_TIM8_Init+0xa8>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003624:	2303      	movs	r3, #3
 8003626:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800363c:	2301      	movs	r3, #1
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003640:	2300      	movs	r3, #0
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003648:	f107 030c 	add.w	r3, r7, #12
 800364c:	4619      	mov	r1, r3
 800364e:	480d      	ldr	r0, [pc, #52]	; (8003684 <MX_TIM8_Init+0xa8>)
 8003650:	f006 fa66 	bl	8009b20 <HAL_TIM_Encoder_Init>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800365a:	f000 fa87 	bl	8003b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4806      	ldr	r0, [pc, #24]	; (8003684 <MX_TIM8_Init+0xa8>)
 800366c:	f006 ff8e 	bl	800a58c <HAL_TIMEx_MasterConfigSynchronization>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003676:	f000 fa79 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800367a:	bf00      	nop
 800367c:	3730      	adds	r7, #48	; 0x30
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	2000a0d8 	.word	0x2000a0d8
 8003688:	40010400 	.word	0x40010400

0800368c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
 80036a0:	615a      	str	r2, [r3, #20]
 80036a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <MX_TIM10_Init+0x94>)
 80036a6:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <MX_TIM10_Init+0x98>)
 80036a8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <MX_TIM10_Init+0x94>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <MX_TIM10_Init+0x94>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <MX_TIM10_Init+0x94>)
 80036b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036bc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036be:	4b18      	ldr	r3, [pc, #96]	; (8003720 <MX_TIM10_Init+0x94>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c4:	4b16      	ldr	r3, [pc, #88]	; (8003720 <MX_TIM10_Init+0x94>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80036ca:	4815      	ldr	r0, [pc, #84]	; (8003720 <MX_TIM10_Init+0x94>)
 80036cc:	f006 f970 	bl	80099b0 <HAL_TIM_Base_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80036d6:	f000 fa49 	bl	8003b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80036da:	4811      	ldr	r0, [pc, #68]	; (8003720 <MX_TIM10_Init+0x94>)
 80036dc:	f006 f9b7 	bl	8009a4e <HAL_TIM_PWM_Init>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80036e6:	f000 fa41 	bl	8003b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036ea:	2360      	movs	r3, #96	; 0x60
 80036ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	2200      	movs	r2, #0
 80036fe:	4619      	mov	r1, r3
 8003700:	4807      	ldr	r0, [pc, #28]	; (8003720 <MX_TIM10_Init+0x94>)
 8003702:	f006 fbdf 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800370c:	f000 fa2e 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003710:	4803      	ldr	r0, [pc, #12]	; (8003720 <MX_TIM10_Init+0x94>)
 8003712:	f000 fe13 	bl	800433c <HAL_TIM_MspPostInit>

}
 8003716:	bf00      	nop
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	2000a1f4 	.word	0x2000a1f4
 8003724:	40014400 	.word	0x40014400

08003728 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
 800373c:	615a      	str	r2, [r3, #20]
 800373e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <MX_TIM11_Init+0x94>)
 8003742:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <MX_TIM11_Init+0x98>)
 8003744:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <MX_TIM11_Init+0x94>)
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <MX_TIM11_Init+0x94>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <MX_TIM11_Init+0x94>)
 8003754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003758:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <MX_TIM11_Init+0x94>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <MX_TIM11_Init+0x94>)
 8003762:	2200      	movs	r2, #0
 8003764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003766:	4815      	ldr	r0, [pc, #84]	; (80037bc <MX_TIM11_Init+0x94>)
 8003768:	f006 f922 	bl	80099b0 <HAL_TIM_Base_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003772:	f000 f9fb 	bl	8003b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003776:	4811      	ldr	r0, [pc, #68]	; (80037bc <MX_TIM11_Init+0x94>)
 8003778:	f006 f969 	bl	8009a4e <HAL_TIM_PWM_Init>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003782:	f000 f9f3 	bl	8003b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003786:	2360      	movs	r3, #96	; 0x60
 8003788:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	2200      	movs	r2, #0
 800379a:	4619      	mov	r1, r3
 800379c:	4807      	ldr	r0, [pc, #28]	; (80037bc <MX_TIM11_Init+0x94>)
 800379e:	f006 fb91 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80037a8:	f000 f9e0 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80037ac:	4803      	ldr	r0, [pc, #12]	; (80037bc <MX_TIM11_Init+0x94>)
 80037ae:	f000 fdc5 	bl	800433c <HAL_TIM_MspPostInit>

}
 80037b2:	bf00      	nop
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000a314 	.word	0x2000a314
 80037c0:	40014800 	.word	0x40014800

080037c4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80037c8:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <MX_TIM13_Init+0x40>)
 80037ca:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <MX_TIM13_Init+0x44>)
 80037cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <MX_TIM13_Init+0x40>)
 80037d0:	2259      	movs	r2, #89	; 0x59
 80037d2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <MX_TIM13_Init+0x40>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <MX_TIM13_Init+0x40>)
 80037dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80037e0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <MX_TIM13_Init+0x40>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <MX_TIM13_Init+0x40>)
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_TIM13_Init+0x40>)
 80037f0:	f006 f8de 	bl	80099b0 <HAL_TIM_Base_Init>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80037fa:	f000 f9b7 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	2000a2d4 	.word	0x2000a2d4
 8003808:	40001c00 	.word	0x40001c00

0800380c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <MX_USART2_UART_Init+0x50>)
 8003814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800381c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003832:	220c      	movs	r2, #12
 8003834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003842:	4805      	ldr	r0, [pc, #20]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003844:	f006 ff84 	bl	800a750 <HAL_UART_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800384e:	f000 f98d 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	2000a4b8 	.word	0x2000a4b8
 800385c:	40004400 	.word	0x40004400

08003860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <MX_DMA_Init+0x5c>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a13      	ldr	r2, [pc, #76]	; (80038bc <MX_DMA_Init+0x5c>)
 8003870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <MX_DMA_Init+0x5c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003882:	2200      	movs	r2, #0
 8003884:	2100      	movs	r1, #0
 8003886:	203a      	movs	r0, #58	; 0x3a
 8003888:	f001 ff8f 	bl	80057aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800388c:	203a      	movs	r0, #58	; 0x3a
 800388e:	f001 ffa8 	bl	80057e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	203b      	movs	r0, #59	; 0x3b
 8003898:	f001 ff87 	bl	80057aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800389c:	203b      	movs	r0, #59	; 0x3b
 800389e:	f001 ffa0 	bl	80057e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	2100      	movs	r1, #0
 80038a6:	2045      	movs	r0, #69	; 0x45
 80038a8:	f001 ff7f 	bl	80057aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80038ac:	2045      	movs	r0, #69	; 0x45
 80038ae:	f001 ff98 	bl	80057e2 <HAL_NVIC_EnableIRQ>

}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	; 0x30
 80038c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
 80038d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	4b9c      	ldr	r3, [pc, #624]	; (8003b4c <MX_GPIO_Init+0x28c>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a9b      	ldr	r2, [pc, #620]	; (8003b4c <MX_GPIO_Init+0x28c>)
 80038e0:	f043 0310 	orr.w	r3, r3, #16
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b99      	ldr	r3, [pc, #612]	; (8003b4c <MX_GPIO_Init+0x28c>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	4b95      	ldr	r3, [pc, #596]	; (8003b4c <MX_GPIO_Init+0x28c>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a94      	ldr	r2, [pc, #592]	; (8003b4c <MX_GPIO_Init+0x28c>)
 80038fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b92      	ldr	r3, [pc, #584]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	4b8e      	ldr	r3, [pc, #568]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a8d      	ldr	r2, [pc, #564]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b8b      	ldr	r3, [pc, #556]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b87      	ldr	r3, [pc, #540]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a86      	ldr	r2, [pc, #536]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b84      	ldr	r3, [pc, #528]	; (8003b4c <MX_GPIO_Init+0x28c>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	4b80      	ldr	r3, [pc, #512]	; (8003b4c <MX_GPIO_Init+0x28c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a7f      	ldr	r2, [pc, #508]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b7d      	ldr	r3, [pc, #500]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	4b79      	ldr	r3, [pc, #484]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a78      	ldr	r2, [pc, #480]	; (8003b4c <MX_GPIO_Init+0x28c>)
 800396c:	f043 0308 	orr.w	r3, r3, #8
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <MX_GPIO_Init+0x28c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800397e:	2200      	movs	r2, #0
 8003980:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003984:	4872      	ldr	r0, [pc, #456]	; (8003b50 <MX_GPIO_Init+0x290>)
 8003986:	f002 fca5 	bl	80062d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800398a:	2200      	movs	r2, #0
 800398c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003990:	4870      	ldr	r0, [pc, #448]	; (8003b54 <MX_GPIO_Init+0x294>)
 8003992:	f002 fc9f 	bl	80062d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8003996:	2200      	movs	r2, #0
 8003998:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800399c:	486e      	ldr	r0, [pc, #440]	; (8003b58 <MX_GPIO_Init+0x298>)
 800399e:	f002 fc99 	bl	80062d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80039a2:	2200      	movs	r2, #0
 80039a4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80039a8:	486c      	ldr	r0, [pc, #432]	; (8003b5c <MX_GPIO_Init+0x29c>)
 80039aa:	f002 fc93 	bl	80062d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039ae:	2304      	movs	r3, #4
 80039b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80039b2:	4b6b      	ldr	r3, [pc, #428]	; (8003b60 <MX_GPIO_Init+0x2a0>)
 80039b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ba:	f107 031c 	add.w	r3, r7, #28
 80039be:	4619      	mov	r1, r3
 80039c0:	4863      	ldr	r0, [pc, #396]	; (8003b50 <MX_GPIO_Init+0x290>)
 80039c2:	f002 fac5 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80039c6:	230f      	movs	r3, #15
 80039c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ca:	2303      	movs	r3, #3
 80039cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d2:	f107 031c 	add.w	r3, r7, #28
 80039d6:	4619      	mov	r1, r3
 80039d8:	4862      	ldr	r0, [pc, #392]	; (8003b64 <MX_GPIO_Init+0x2a4>)
 80039da:	f002 fab9 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039de:	23e1      	movs	r3, #225	; 0xe1
 80039e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e2:	2303      	movs	r3, #3
 80039e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	4619      	mov	r1, r3
 80039f0:	485a      	ldr	r0, [pc, #360]	; (8003b5c <MX_GPIO_Init+0x29c>)
 80039f2:	f002 faad 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039f6:	2303      	movs	r3, #3
 80039f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fa:	2303      	movs	r3, #3
 80039fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a02:	f107 031c 	add.w	r3, r7, #28
 8003a06:	4619      	mov	r1, r3
 8003a08:	4852      	ldr	r0, [pc, #328]	; (8003b54 <MX_GPIO_Init+0x294>)
 8003a0a:	f002 faa1 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a0e:	2304      	movs	r3, #4
 8003a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a12:	2300      	movs	r3, #0
 8003a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a16:	2301      	movs	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1a:	f107 031c 	add.w	r3, r7, #28
 8003a1e:	4619      	mov	r1, r3
 8003a20:	484c      	ldr	r0, [pc, #304]	; (8003b54 <MX_GPIO_Init+0x294>)
 8003a22:	f002 fa95 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8003a26:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8003a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a30:	2301      	movs	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a34:	f107 031c 	add.w	r3, r7, #28
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4845      	ldr	r0, [pc, #276]	; (8003b50 <MX_GPIO_Init+0x290>)
 8003a3c:	f002 fa88 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a46:	2301      	movs	r3, #1
 8003a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a52:	f107 031c 	add.w	r3, r7, #28
 8003a56:	4619      	mov	r1, r3
 8003a58:	483d      	ldr	r0, [pc, #244]	; (8003b50 <MX_GPIO_Init+0x290>)
 8003a5a:	f002 fa79 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a64:	2301      	movs	r3, #1
 8003a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	4619      	mov	r1, r3
 8003a76:	4837      	ldr	r0, [pc, #220]	; (8003b54 <MX_GPIO_Init+0x294>)
 8003a78:	f002 fa6a 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a82:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <MX_GPIO_Init+0x2a8>)
 8003a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4831      	ldr	r0, [pc, #196]	; (8003b58 <MX_GPIO_Init+0x298>)
 8003a92:	f002 fa5d 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa8:	f107 031c 	add.w	r3, r7, #28
 8003aac:	4619      	mov	r1, r3
 8003aae:	482a      	ldr	r0, [pc, #168]	; (8003b58 <MX_GPIO_Init+0x298>)
 8003ab0:	f002 fa4e 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aba:	2301      	movs	r3, #1
 8003abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ac6:	f107 031c 	add.w	r3, r7, #28
 8003aca:	4619      	mov	r1, r3
 8003acc:	4822      	ldr	r0, [pc, #136]	; (8003b58 <MX_GPIO_Init+0x298>)
 8003ace:	f002 fa3f 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003ad2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003ad6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	f107 031c 	add.w	r3, r7, #28
 8003ae8:	4619      	mov	r1, r3
 8003aea:	481c      	ldr	r0, [pc, #112]	; (8003b5c <MX_GPIO_Init+0x29c>)
 8003aec:	f002 fa30 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af6:	2300      	movs	r3, #0
 8003af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afe:	f107 031c 	add.w	r3, r7, #28
 8003b02:	4619      	mov	r1, r3
 8003b04:	4815      	ldr	r0, [pc, #84]	; (8003b5c <MX_GPIO_Init+0x29c>)
 8003b06:	f002 fa23 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003b0a:	239b      	movs	r3, #155	; 0x9b
 8003b0c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b12:	2301      	movs	r3, #1
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b16:	f107 031c 	add.w	r3, r7, #28
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	480e      	ldr	r0, [pc, #56]	; (8003b58 <MX_GPIO_Init+0x298>)
 8003b1e:	f002 fa17 	bl	8005f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003b22:	2200      	movs	r2, #0
 8003b24:	2100      	movs	r1, #0
 8003b26:	2008      	movs	r0, #8
 8003b28:	f001 fe3f 	bl	80057aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003b2c:	2008      	movs	r0, #8
 8003b2e:	f001 fe58 	bl	80057e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b32:	2200      	movs	r2, #0
 8003b34:	2100      	movs	r1, #0
 8003b36:	2017      	movs	r0, #23
 8003b38:	f001 fe37 	bl	80057aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b3c:	2017      	movs	r0, #23
 8003b3e:	f001 fe50 	bl	80057e2 <HAL_NVIC_EnableIRQ>

}
 8003b42:	bf00      	nop
 8003b44:	3730      	adds	r7, #48	; 0x30
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40020c00 	.word	0x40020c00
 8003b5c:	40020000 	.word	0x40020000
 8003b60:	10310000 	.word	0x10310000
 8003b64:	40020800 	.word	0x40020800
 8003b68:	10110000 	.word	0x10110000

08003b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b72:	e7fe      	b.n	8003b72 <Error_Handler+0x6>

08003b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <HAL_MspInit+0x4c>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	4a0f      	ldr	r2, [pc, #60]	; (8003bc0 <HAL_MspInit+0x4c>)
 8003b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b88:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <HAL_MspInit+0x4c>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_MspInit+0x4c>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <HAL_MspInit+0x4c>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_MspInit+0x4c>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800

08003bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	; 0x30
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 031c 	add.w	r3, r7, #28
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a4a      	ldr	r2, [pc, #296]	; (8003d0c <HAL_ADC_MspInit+0x148>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	f040 808e 	bne.w	8003d04 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	4b48      	ldr	r3, [pc, #288]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	4a47      	ldr	r2, [pc, #284]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf8:	4b45      	ldr	r3, [pc, #276]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	4a40      	ldr	r2, [pc, #256]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	6313      	str	r3, [r2, #48]	; 0x30
 8003c14:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	4b3a      	ldr	r3, [pc, #232]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	4a39      	ldr	r2, [pc, #228]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c30:	4b37      	ldr	r3, [pc, #220]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	4a32      	ldr	r2, [pc, #200]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003c46:	f043 0302 	orr.w	r3, r3, #2
 8003c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4c:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <HAL_ADC_MspInit+0x14c>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003c58:	230f      	movs	r3, #15
 8003c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c64:	f107 031c 	add.w	r3, r7, #28
 8003c68:	4619      	mov	r1, r3
 8003c6a:	482a      	ldr	r0, [pc, #168]	; (8003d14 <HAL_ADC_MspInit+0x150>)
 8003c6c:	f002 f970 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003c70:	23ff      	movs	r3, #255	; 0xff
 8003c72:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c74:	2303      	movs	r3, #3
 8003c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7c:	f107 031c 	add.w	r3, r7, #28
 8003c80:	4619      	mov	r1, r3
 8003c82:	4825      	ldr	r0, [pc, #148]	; (8003d18 <HAL_ADC_MspInit+0x154>)
 8003c84:	f002 f964 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c94:	f107 031c 	add.w	r3, r7, #28
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4820      	ldr	r0, [pc, #128]	; (8003d1c <HAL_ADC_MspInit+0x158>)
 8003c9c:	f002 f958 	bl	8005f50 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003ca2:	4a20      	ldr	r2, [pc, #128]	; (8003d24 <HAL_ADC_MspInit+0x160>)
 8003ca4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003ca6:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003cbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cc0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cc2:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003cd2:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ce0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003ce8:	480d      	ldr	r0, [pc, #52]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003cea:	f001 fd95 	bl	8005818 <HAL_DMA_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003cf4:	f7ff ff3a 	bl	8003b6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8003cfe:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <HAL_ADC_MspInit+0x15c>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003d04:	bf00      	nop
 8003d06:	3730      	adds	r7, #48	; 0x30
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40012100 	.word	0x40012100
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	40020400 	.word	0x40020400
 8003d20:	2000a4f8 	.word	0x2000a4f8
 8003d24:	40026440 	.word	0x40026440

08003d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	; 0x30
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 031c 	add.w	r3, r7, #28
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a32      	ldr	r2, [pc, #200]	; (8003e10 <HAL_I2C_MspInit+0xe8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d12c      	bne.n	8003da4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a30      	ldr	r2, [pc, #192]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d66:	23c0      	movs	r3, #192	; 0xc0
 8003d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d6a:	2312      	movs	r3, #18
 8003d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d72:	2303      	movs	r3, #3
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d76:	2304      	movs	r3, #4
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7a:	f107 031c 	add.w	r3, r7, #28
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4825      	ldr	r0, [pc, #148]	; (8003e18 <HAL_I2C_MspInit+0xf0>)
 8003d82:	f002 f8e5 	bl	8005f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40
 8003d96:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003da2:	e031      	b.n	8003e08 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <HAL_I2C_MspInit+0xf4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d12c      	bne.n	8003e08 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003dca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dd0:	2312      	movs	r3, #18
 8003dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003ddc:	2304      	movs	r3, #4
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de0:	f107 031c 	add.w	r3, r7, #28
 8003de4:	4619      	mov	r1, r3
 8003de6:	480c      	ldr	r0, [pc, #48]	; (8003e18 <HAL_I2C_MspInit+0xf0>)
 8003de8:	f002 f8b2 	bl	8005f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_I2C_MspInit+0xec>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3730      	adds	r7, #48	; 0x30
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40005400 	.word	0x40005400
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020400 	.word	0x40020400
 8003e1c:	40005800 	.word	0x40005800

08003e20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	; 0x28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a69      	ldr	r2, [pc, #420]	; (8003fe4 <HAL_SD_MspInit+0x1c4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f040 80cb 	bne.w	8003fda <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	4b67      	ldr	r3, [pc, #412]	; (8003fe8 <HAL_SD_MspInit+0x1c8>)
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	4a66      	ldr	r2, [pc, #408]	; (8003fe8 <HAL_SD_MspInit+0x1c8>)
 8003e4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e52:	6453      	str	r3, [r2, #68]	; 0x44
 8003e54:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <HAL_SD_MspInit+0x1c8>)
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	4b60      	ldr	r3, [pc, #384]	; (8003fe8 <HAL_SD_MspInit+0x1c8>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	4a5f      	ldr	r2, [pc, #380]	; (8003fe8 <HAL_SD_MspInit+0x1c8>)
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e70:	4b5d      	ldr	r3, [pc, #372]	; (8003fe8 <HAL_SD_MspInit+0x1c8>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_SD_MspInit+0x1c8>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	4a58      	ldr	r2, [pc, #352]	; (8003fe8 <HAL_SD_MspInit+0x1c8>)
 8003e86:	f043 0308 	orr.w	r3, r3, #8
 8003e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8c:	4b56      	ldr	r3, [pc, #344]	; (8003fe8 <HAL_SD_MspInit+0x1c8>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003e98:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003e9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003eaa:	230c      	movs	r3, #12
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eae:	f107 0314 	add.w	r3, r7, #20
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	484d      	ldr	r0, [pc, #308]	; (8003fec <HAL_SD_MspInit+0x1cc>)
 8003eb6:	f002 f84b 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003eba:	2304      	movs	r3, #4
 8003ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003eca:	230c      	movs	r3, #12
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4846      	ldr	r0, [pc, #280]	; (8003ff0 <HAL_SD_MspInit+0x1d0>)
 8003ed6:	f002 f83b 	bl	8005f50 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003eda:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003edc:	4a46      	ldr	r2, [pc, #280]	; (8003ff8 <HAL_SD_MspInit+0x1d8>)
 8003ede:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003ee0:	4b44      	ldr	r3, [pc, #272]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ee6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ee8:	4b42      	ldr	r3, [pc, #264]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ef4:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003efa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003efc:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003efe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f02:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f0a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003f0c:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f0e:	2220      	movs	r2, #32
 8003f10:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f12:	4b38      	ldr	r3, [pc, #224]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f18:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f20:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f22:	2203      	movs	r2, #3
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003f26:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003f2e:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003f36:	482f      	ldr	r0, [pc, #188]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f38:	f001 fc6e 	bl	8005818 <HAL_DMA_Init>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8003f42:	f7ff fe13 	bl	8003b6c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f4c:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <HAL_SD_MspInit+0x1d4>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f54:	4a2a      	ldr	r2, [pc, #168]	; (8004000 <HAL_SD_MspInit+0x1e0>)
 8003f56:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003f58:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f5e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f60:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f62:	2240      	movs	r2, #64	; 0x40
 8003f64:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f72:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f7a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f82:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f86:	2220      	movs	r2, #32
 8003f88:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f90:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f94:	2204      	movs	r2, #4
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f98:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003fa0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003fa4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003fa8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003fae:	4813      	ldr	r0, [pc, #76]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003fb0:	f001 fc32 	bl	8005818 <HAL_DMA_Init>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8003fba:	f7ff fdd7 	bl	8003b6c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003fc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <HAL_SD_MspInit+0x1dc>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2100      	movs	r1, #0
 8003fce:	2031      	movs	r0, #49	; 0x31
 8003fd0:	f001 fbeb 	bl	80057aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003fd4:	2031      	movs	r0, #49	; 0x31
 8003fd6:	f001 fc04 	bl	80057e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003fda:	bf00      	nop
 8003fdc:	3728      	adds	r7, #40	; 0x28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40020800 	.word	0x40020800
 8003ff0:	40020c00 	.word	0x40020c00
 8003ff4:	2000a020 	.word	0x2000a020
 8003ff8:	40026458 	.word	0x40026458
 8003ffc:	2000a354 	.word	0x2000a354
 8004000:	400264a0 	.word	0x400264a0

08004004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <HAL_SPI_MspInit+0x84>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d12c      	bne.n	8004080 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <HAL_SPI_MspInit+0x88>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_SPI_MspInit+0x88>)
 8004030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004034:	6413      	str	r3, [r2, #64]	; 0x40
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_SPI_MspInit+0x88>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <HAL_SPI_MspInit+0x88>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a10      	ldr	r2, [pc, #64]	; (800408c <HAL_SPI_MspInit+0x88>)
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <HAL_SPI_MspInit+0x88>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800405e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004064:	2302      	movs	r3, #2
 8004066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406c:	2303      	movs	r3, #3
 800406e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004070:	2305      	movs	r3, #5
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	4619      	mov	r1, r3
 800407a:	4805      	ldr	r0, [pc, #20]	; (8004090 <HAL_SPI_MspInit+0x8c>)
 800407c:	f001 ff68 	bl	8005f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004080:	bf00      	nop
 8004082:	3728      	adds	r7, #40	; 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40003800 	.word	0x40003800
 800408c:	40023800 	.word	0x40023800
 8004090:	40020400 	.word	0x40020400

08004094 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08c      	sub	sp, #48	; 0x30
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409c:	f107 031c 	add.w	r3, r7, #28
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	60da      	str	r2, [r3, #12]
 80040aa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a2d      	ldr	r2, [pc, #180]	; (8004168 <HAL_TIM_PWM_MspInit+0xd4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d12d      	bne.n	8004112 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	4b2c      	ldr	r3, [pc, #176]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4a2b      	ldr	r2, [pc, #172]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6453      	str	r3, [r2, #68]	; 0x44
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	4a24      	ldr	r2, [pc, #144]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 80040dc:	f043 0310 	orr.w	r3, r3, #16
 80040e0:	6313      	str	r3, [r2, #48]	; 0x30
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80040ee:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80040f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f4:	2302      	movs	r3, #2
 80040f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fc:	2300      	movs	r3, #0
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004100:	2301      	movs	r3, #1
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004104:	f107 031c 	add.w	r3, r7, #28
 8004108:	4619      	mov	r1, r3
 800410a:	4819      	ldr	r0, [pc, #100]	; (8004170 <HAL_TIM_PWM_MspInit+0xdc>)
 800410c:	f001 ff20 	bl	8005f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004110:	e026      	b.n	8004160 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_TIM_PWM_MspInit+0xe0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d10e      	bne.n	800413a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	4a11      	ldr	r2, [pc, #68]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 8004126:	f043 0302 	orr.w	r3, r3, #2
 800412a:	6413      	str	r3, [r2, #64]	; 0x40
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	693b      	ldr	r3, [r7, #16]
}
 8004138:	e012      	b.n	8004160 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a0e      	ldr	r2, [pc, #56]	; (8004178 <HAL_TIM_PWM_MspInit+0xe4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10d      	bne.n	8004160 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	4b08      	ldr	r3, [pc, #32]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	4a07      	ldr	r2, [pc, #28]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 800414e:	f043 0304 	orr.w	r3, r3, #4
 8004152:	6413      	str	r3, [r2, #64]	; 0x40
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_TIM_PWM_MspInit+0xd8>)
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
}
 8004160:	bf00      	nop
 8004162:	3730      	adds	r7, #48	; 0x30
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40010000 	.word	0x40010000
 800416c:	40023800 	.word	0x40023800
 8004170:	40021000 	.word	0x40021000
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800

0800417c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a3e      	ldr	r2, [pc, #248]	; (8004284 <HAL_TIM_Base_MspInit+0x108>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d116      	bne.n	80041bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004198:	f043 0310 	orr.w	r3, r3, #16
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2101      	movs	r1, #1
 80041ae:	2036      	movs	r0, #54	; 0x36
 80041b0:	f001 fafb 	bl	80057aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041b4:	2036      	movs	r0, #54	; 0x36
 80041b6:	f001 fb14 	bl	80057e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80041ba:	e05e      	b.n	800427a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a32      	ldr	r2, [pc, #200]	; (800428c <HAL_TIM_Base_MspInit+0x110>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d116      	bne.n	80041f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a2e      	ldr	r2, [pc, #184]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 80041d0:	f043 0320 	orr.w	r3, r3, #32
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80041e2:	2200      	movs	r2, #0
 80041e4:	2100      	movs	r1, #0
 80041e6:	2037      	movs	r0, #55	; 0x37
 80041e8:	f001 fadf 	bl	80057aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80041ec:	2037      	movs	r0, #55	; 0x37
 80041ee:	f001 faf8 	bl	80057e2 <HAL_NVIC_EnableIRQ>
}
 80041f2:	e042      	b.n	800427a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <HAL_TIM_Base_MspInit+0x114>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10e      	bne.n	800421c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	4b21      	ldr	r3, [pc, #132]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	4a20      	ldr	r2, [pc, #128]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800420c:	6453      	str	r3, [r2, #68]	; 0x44
 800420e:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	697b      	ldr	r3, [r7, #20]
}
 800421a:	e02e      	b.n	800427a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <HAL_TIM_Base_MspInit+0x118>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10e      	bne.n	8004244 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	4a16      	ldr	r2, [pc, #88]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6453      	str	r3, [r2, #68]	; 0x44
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]
}
 8004242:	e01a      	b.n	800427a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a13      	ldr	r2, [pc, #76]	; (8004298 <HAL_TIM_Base_MspInit+0x11c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d115      	bne.n	800427a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_TIM_Base_MspInit+0x10c>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2100      	movs	r1, #0
 800426e:	202c      	movs	r0, #44	; 0x2c
 8004270:	f001 fa9b 	bl	80057aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004274:	202c      	movs	r0, #44	; 0x2c
 8004276:	f001 fab4 	bl	80057e2 <HAL_NVIC_EnableIRQ>
}
 800427a:	bf00      	nop
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40001000 	.word	0x40001000
 8004288:	40023800 	.word	0x40023800
 800428c:	40001400 	.word	0x40001400
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800
 8004298:	40001c00 	.word	0x40001c00

0800429c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	f107 0314 	add.w	r3, r7, #20
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_TIM_Encoder_MspInit+0x94>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d133      	bne.n	8004326 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <HAL_TIM_Encoder_MspInit+0x98>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <HAL_TIM_Encoder_MspInit+0x98>)
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	6453      	str	r3, [r2, #68]	; 0x44
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_TIM_Encoder_MspInit+0x98>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <HAL_TIM_Encoder_MspInit+0x98>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	4a14      	ldr	r2, [pc, #80]	; (8004334 <HAL_TIM_Encoder_MspInit+0x98>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_TIM_Encoder_MspInit+0x98>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042f6:	23c0      	movs	r3, #192	; 0xc0
 80042f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fa:	2302      	movs	r3, #2
 80042fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004302:	2300      	movs	r3, #0
 8004304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004306:	2303      	movs	r3, #3
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	4619      	mov	r1, r3
 8004310:	4809      	ldr	r0, [pc, #36]	; (8004338 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004312:	f001 fe1d 	bl	8005f50 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004316:	2200      	movs	r2, #0
 8004318:	2100      	movs	r1, #0
 800431a:	202c      	movs	r0, #44	; 0x2c
 800431c:	f001 fa45 	bl	80057aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004320:	202c      	movs	r0, #44	; 0x2c
 8004322:	f001 fa5e 	bl	80057e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004326:	bf00      	nop
 8004328:	3728      	adds	r7, #40	; 0x28
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40010400 	.word	0x40010400
 8004334:	40023800 	.word	0x40023800
 8004338:	40020800 	.word	0x40020800

0800433c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	; 0x30
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5c      	ldr	r2, [pc, #368]	; (80044cc <HAL_TIM_MspPostInit+0x190>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d11f      	bne.n	800439e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	4b5b      	ldr	r3, [pc, #364]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	4a5a      	ldr	r2, [pc, #360]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 8004368:	f043 0310 	orr.w	r3, r3, #16
 800436c:	6313      	str	r3, [r2, #48]	; 0x30
 800436e:	4b58      	ldr	r3, [pc, #352]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800437a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800437e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004380:	2302      	movs	r3, #2
 8004382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004388:	2300      	movs	r3, #0
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800438c:	2301      	movs	r3, #1
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004390:	f107 031c 	add.w	r3, r7, #28
 8004394:	4619      	mov	r1, r3
 8004396:	484f      	ldr	r0, [pc, #316]	; (80044d4 <HAL_TIM_MspPostInit+0x198>)
 8004398:	f001 fdda 	bl	8005f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800439c:	e091      	b.n	80044c2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a4d      	ldr	r2, [pc, #308]	; (80044d8 <HAL_TIM_MspPostInit+0x19c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d11e      	bne.n	80043e6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	4b48      	ldr	r3, [pc, #288]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	4a47      	ldr	r2, [pc, #284]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	6313      	str	r3, [r2, #48]	; 0x30
 80043b8:	4b45      	ldr	r3, [pc, #276]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80043c4:	2330      	movs	r3, #48	; 0x30
 80043c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c8:	2302      	movs	r3, #2
 80043ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d0:	2300      	movs	r3, #0
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043d4:	2302      	movs	r3, #2
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d8:	f107 031c 	add.w	r3, r7, #28
 80043dc:	4619      	mov	r1, r3
 80043de:	483f      	ldr	r0, [pc, #252]	; (80044dc <HAL_TIM_MspPostInit+0x1a0>)
 80043e0:	f001 fdb6 	bl	8005f50 <HAL_GPIO_Init>
}
 80043e4:	e06d      	b.n	80044c2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3d      	ldr	r2, [pc, #244]	; (80044e0 <HAL_TIM_MspPostInit+0x1a4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d11f      	bne.n	8004430 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	4a35      	ldr	r2, [pc, #212]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 80043fa:	f043 0308 	orr.w	r3, r3, #8
 80043fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004400:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800440c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004412:	2302      	movs	r3, #2
 8004414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441a:	2300      	movs	r3, #0
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800441e:	2302      	movs	r3, #2
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004422:	f107 031c 	add.w	r3, r7, #28
 8004426:	4619      	mov	r1, r3
 8004428:	482e      	ldr	r0, [pc, #184]	; (80044e4 <HAL_TIM_MspPostInit+0x1a8>)
 800442a:	f001 fd91 	bl	8005f50 <HAL_GPIO_Init>
}
 800442e:	e048      	b.n	80044c2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <HAL_TIM_MspPostInit+0x1ac>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d11f      	bne.n	800447a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	4a23      	ldr	r2, [pc, #140]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 8004444:	f043 0302 	orr.w	r3, r3, #2
 8004448:	6313      	str	r3, [r2, #48]	; 0x30
 800444a:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800445a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445c:	2302      	movs	r3, #2
 800445e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004464:	2300      	movs	r3, #0
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004468:	2303      	movs	r3, #3
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	4619      	mov	r1, r3
 8004472:	481a      	ldr	r0, [pc, #104]	; (80044dc <HAL_TIM_MspPostInit+0x1a0>)
 8004474:	f001 fd6c 	bl	8005f50 <HAL_GPIO_Init>
}
 8004478:	e023      	b.n	80044c2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_TIM_MspPostInit+0x1b0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d11e      	bne.n	80044c2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 800448e:	f043 0302 	orr.w	r3, r3, #2
 8004492:	6313      	str	r3, [r2, #48]	; 0x30
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HAL_TIM_MspPostInit+0x194>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ae:	2300      	movs	r3, #0
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80044b2:	2303      	movs	r3, #3
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b6:	f107 031c 	add.w	r3, r7, #28
 80044ba:	4619      	mov	r1, r3
 80044bc:	4807      	ldr	r0, [pc, #28]	; (80044dc <HAL_TIM_MspPostInit+0x1a0>)
 80044be:	f001 fd47 	bl	8005f50 <HAL_GPIO_Init>
}
 80044c2:	bf00      	nop
 80044c4:	3730      	adds	r7, #48	; 0x30
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40020400 	.word	0x40020400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40020c00 	.word	0x40020c00
 80044e8:	40014400 	.word	0x40014400
 80044ec:	40014800 	.word	0x40014800

080044f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_UART_MspInit+0x84>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d12b      	bne.n	800456a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_UART_MspInit+0x88>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a17      	ldr	r2, [pc, #92]	; (8004578 <HAL_UART_MspInit+0x88>)
 800451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_UART_MspInit+0x88>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <HAL_UART_MspInit+0x88>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	4a10      	ldr	r2, [pc, #64]	; (8004578 <HAL_UART_MspInit+0x88>)
 8004538:	f043 0308 	orr.w	r3, r3, #8
 800453c:	6313      	str	r3, [r2, #48]	; 0x30
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_UART_MspInit+0x88>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800454a:	2360      	movs	r3, #96	; 0x60
 800454c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454e:	2302      	movs	r3, #2
 8004550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004556:	2303      	movs	r3, #3
 8004558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800455a:	2307      	movs	r3, #7
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	4619      	mov	r1, r3
 8004564:	4805      	ldr	r0, [pc, #20]	; (800457c <HAL_UART_MspInit+0x8c>)
 8004566:	f001 fcf3 	bl	8005f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800456a:	bf00      	nop
 800456c:	3728      	adds	r7, #40	; 0x28
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40004400 	.word	0x40004400
 8004578:	40023800 	.word	0x40023800
 800457c:	40020c00 	.word	0x40020c00

08004580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004584:	e7fe      	b.n	8004584 <NMI_Handler+0x4>

08004586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800458a:	e7fe      	b.n	800458a <HardFault_Handler+0x4>

0800458c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004590:	e7fe      	b.n	8004590 <MemManage_Handler+0x4>

08004592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004592:	b480      	push	{r7}
 8004594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004596:	e7fe      	b.n	8004596 <BusFault_Handler+0x4>

08004598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800459c:	e7fe      	b.n	800459c <UsageFault_Handler+0x4>

0800459e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045ba:	b480      	push	{r7}
 80045bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045cc:	f000 fbcc 	bl	8004d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80045d8:	2004      	movs	r0, #4
 80045da:	f001 fe95 	bl	8006308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80045e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80045ea:	f001 fe8d 	bl	8006308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80045f8:	4803      	ldr	r0, [pc, #12]	; (8004608 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80045fa:	f005 fb5a 	bl	8009cb2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80045fe:	4803      	ldr	r0, [pc, #12]	; (800460c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004600:	f005 fb57 	bl	8009cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004604:	bf00      	nop
 8004606:	bd80      	pop	{r7, pc}
 8004608:	2000a0d8 	.word	0x2000a0d8
 800460c:	2000a2d4 	.word	0x2000a2d4

08004610 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004614:	4802      	ldr	r0, [pc, #8]	; (8004620 <SDIO_IRQHandler+0x10>)
 8004616:	f003 fbf3 	bl	8007e00 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	2000a434 	.word	0x2000a434

08004624 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004628:	4802      	ldr	r0, [pc, #8]	; (8004634 <TIM6_DAC_IRQHandler+0x10>)
 800462a:	f005 fb42 	bl	8009cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	2000a3b4 	.word	0x2000a3b4

08004638 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800463c:	4802      	ldr	r0, [pc, #8]	; (8004648 <TIM7_IRQHandler+0x10>)
 800463e:	f005 fb38 	bl	8009cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2000a558 	.word	0x2000a558

0800464c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004650:	4802      	ldr	r0, [pc, #8]	; (800465c <DMA2_Stream2_IRQHandler+0x10>)
 8004652:	f001 fa09 	bl	8005a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	2000a4f8 	.word	0x2000a4f8

08004660 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004664:	4802      	ldr	r0, [pc, #8]	; (8004670 <DMA2_Stream3_IRQHandler+0x10>)
 8004666:	f001 f9ff 	bl	8005a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2000a020 	.word	0x2000a020

08004674 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8004678:	4802      	ldr	r0, [pc, #8]	; (8004684 <DMA2_Stream6_IRQHandler+0x10>)
 800467a:	f001 f9f5 	bl	8005a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	2000a354 	.word	0x2000a354

08004688 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	e00a      	b.n	80046b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800469a:	f3af 8000 	nop.w
 800469e:	4601      	mov	r1, r0
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	60ba      	str	r2, [r7, #8]
 80046a6:	b2ca      	uxtb	r2, r1
 80046a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	3301      	adds	r3, #1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	dbf0      	blt.n	800469a <_read+0x12>
	}

return len;
 80046b8:	687b      	ldr	r3, [r7, #4]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
	return -1;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046ea:	605a      	str	r2, [r3, #4]
	return 0;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <_isatty>:

int _isatty(int file)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
	return 1;
 8004702:	2301      	movs	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
	return 0;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004734:	4a14      	ldr	r2, [pc, #80]	; (8004788 <_sbrk+0x5c>)
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <_sbrk+0x60>)
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004740:	4b13      	ldr	r3, [pc, #76]	; (8004790 <_sbrk+0x64>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004748:	4b11      	ldr	r3, [pc, #68]	; (8004790 <_sbrk+0x64>)
 800474a:	4a12      	ldr	r2, [pc, #72]	; (8004794 <_sbrk+0x68>)
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <_sbrk+0x64>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d207      	bcs.n	800476c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800475c:	f00b fa76 	bl	800fc4c <__errno>
 8004760:	4602      	mov	r2, r0
 8004762:	230c      	movs	r3, #12
 8004764:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	e009      	b.n	8004780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800476c:	4b08      	ldr	r3, [pc, #32]	; (8004790 <_sbrk+0x64>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <_sbrk+0x64>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	4a05      	ldr	r2, [pc, #20]	; (8004790 <_sbrk+0x64>)
 800477c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20050000 	.word	0x20050000
 800478c:	00000400 	.word	0x00000400
 8004790:	20000208 	.word	0x20000208
 8004794:	2000c618 	.word	0x2000c618

08004798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <SystemInit+0x28>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	4a07      	ldr	r2, [pc, #28]	; (80047c0 <SystemInit+0x28>)
 80047a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <SystemInit+0x28>)
 80047ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047b2:	609a      	str	r2, [r3, #8]
#endif
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <cppInit>:
LineTrace line_trace(&motor, &line_sensor);

float velocity;

void cppInit(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
	line_sensor.ADCStart();
 80047c8:	4810      	ldr	r0, [pc, #64]	; (800480c <cppInit+0x48>)
 80047ca:	f7fd fa81 	bl	8001cd0 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80047ce:	4810      	ldr	r0, [pc, #64]	; (8004810 <cppInit+0x4c>)
 80047d0:	f7fd ff9a 	bl	8002708 <_ZN5Motor4initEv>
	encoder.init();
 80047d4:	480f      	ldr	r0, [pc, #60]	; (8004814 <cppInit+0x50>)
 80047d6:	f7fc fcd1 	bl	800117c <_ZN7Encoder4initEv>
	//power_sensor.init();
	lcd_init();
 80047da:	f7fc fc1d 	bl	8001018 <lcd_init>
	imu.init();
 80047de:	480e      	ldr	r0, [pc, #56]	; (8004818 <cppInit+0x54>)
 80047e0:	f7fc ffb0 	bl	8001744 <_ZN3IMU4initEv>

	line_sensor.calibration();
 80047e4:	4809      	ldr	r0, [pc, #36]	; (800480c <cppInit+0x48>)
 80047e6:	f7fd fb69 	bl	8001ebc <_ZN10LineSensor11calibrationEv>
	imu.calibration();
 80047ea:	480b      	ldr	r0, [pc, #44]	; (8004818 <cppInit+0x54>)
 80047ec:	f7fd f826 	bl	800183c <_ZN3IMU11calibrationEv>
	//printf("imu offset %f", imu.getOffsetVal());

	line_trace.setGain(0.0005, 0.000003, 0);
 80047f0:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800481c <cppInit+0x58>
 80047f4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8004820 <cppInit+0x5c>
 80047f8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8004824 <cppInit+0x60>
 80047fc:	480a      	ldr	r0, [pc, #40]	; (8004828 <cppInit+0x64>)
 80047fe:	f7fd fe1f 	bl	8002440 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	//velocity_ctrl.setVelocityGain(0, 0, 0);
	//velocity_ctrl.setOmegaGain(0.15, 0, 20);

	logger.sdCardInit();
 8004802:	480a      	ldr	r0, [pc, #40]	; (800482c <cppInit+0x68>)
 8004804:	f7fd febc 	bl	8002580 <_ZN6Logger10sdCardInitEv>
}
 8004808:	bf00      	nop
 800480a:	bd80      	pop	{r7, pc}
 800480c:	2000020c 	.word	0x2000020c
 8004810:	20000510 	.word	0x20000510
 8004814:	20007a6c 	.word	0x20007a6c
 8004818:	20000518 	.word	0x20000518
 800481c:	00000000 	.word	0x00000000
 8004820:	3649539c 	.word	0x3649539c
 8004824:	3a03126f 	.word	0x3a03126f
 8004828:	20007aa8 	.word	0x20007aa8
 800482c:	20000538 	.word	0x20000538

08004830 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8004834:	4809      	ldr	r0, [pc, #36]	; (800485c <cppFlip1ms+0x2c>)
 8004836:	f7fd faa9 	bl	8001d8c <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800483a:	4809      	ldr	r0, [pc, #36]	; (8004860 <cppFlip1ms+0x30>)
 800483c:	f7fc ff96 	bl	800176c <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8004840:	4808      	ldr	r0, [pc, #32]	; (8004864 <cppFlip1ms+0x34>)
 8004842:	f7fc fcbb 	bl	80011bc <_ZN7Encoder9updateCntEv>

	//velocity = velocity_ctrl.flip();
	line_trace.flip();
 8004846:	4808      	ldr	r0, [pc, #32]	; (8004868 <cppFlip1ms+0x38>)
 8004848:	f7fd fe22 	bl	8002490 <_ZN9LineTrace4flipEv>

	motor.motorCtrl();
 800484c:	4807      	ldr	r0, [pc, #28]	; (800486c <cppFlip1ms+0x3c>)
 800484e:	f7fd ff6d 	bl	800272c <_ZN5Motor9motorCtrlEv>

	encoder.clearCnt();
 8004852:	4804      	ldr	r0, [pc, #16]	; (8004864 <cppFlip1ms+0x34>)
 8004854:	f7fc fcca 	bl	80011ec <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8004858:	bf00      	nop
 800485a:	bd80      	pop	{r7, pc}
 800485c:	2000020c 	.word	0x2000020c
 8004860:	20000518 	.word	0x20000518
 8004864:	20007a6c 	.word	0x20007a6c
 8004868:	20007aa8 	.word	0x20007aa8
 800486c:	20000510 	.word	0x20000510

08004870 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8004874:	4802      	ldr	r0, [pc, #8]	; (8004880 <cppFlip100ns+0x10>)
 8004876:	f7fd fa3b 	bl	8001cf0 <_ZN10LineSensor17storeSensorValuesEv>
}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2000020c 	.word	0x2000020c

08004884 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8004888:	4b04      	ldr	r3, [pc, #16]	; (800489c <cppFlip10ms+0x18>)
 800488a:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 800488e:	eeb0 0a67 	vmov.f32	s0, s15
 8004892:	4803      	ldr	r0, [pc, #12]	; (80048a0 <cppFlip10ms+0x1c>)
 8004894:	f7fd feba 	bl	800260c <_ZN6Logger8storeLogEf>
}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}
 800489c:	2000020c 	.word	0x2000020c
 80048a0:	20000538 	.word	0x20000538

080048a4 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	4619      	mov	r1, r3
 80048b2:	4803      	ldr	r0, [pc, #12]	; (80048c0 <cppExit+0x1c>)
 80048b4:	f7fe f856 	bl	8002964 <_ZN10SideSensor12updateStatusEt>
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000504 	.word	0x20000504

080048c4 <cppLoop>:

void cppLoop(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
	switch(rotary_switch.getValue()){
 80048c8:	48ad      	ldr	r0, [pc, #692]	; (8004b80 <cppLoop+0x2bc>)
 80048ca:	f7fd fff1 	bl	80028b0 <_ZN12RotarySwitch8getValueEv>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b0f      	cmp	r3, #15
 80048d2:	f200 8146 	bhi.w	8004b62 <cppLoop+0x29e>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <cppLoop+0x18>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	0800491d 	.word	0x0800491d
 80048e0:	0800493f 	.word	0x0800493f
 80048e4:	080049c7 	.word	0x080049c7
 80048e8:	08004a23 	.word	0x08004a23
 80048ec:	08004adb 	.word	0x08004adb
 80048f0:	08004b63 	.word	0x08004b63
 80048f4:	08004b63 	.word	0x08004b63
 80048f8:	08004b63 	.word	0x08004b63
 80048fc:	08004b63 	.word	0x08004b63
 8004900:	08004b63 	.word	0x08004b63
 8004904:	08004b63 	.word	0x08004b63
 8004908:	08004b63 	.word	0x08004b63
 800490c:	08004b63 	.word	0x08004b63
 8004910:	08004b63 	.word	0x08004b63
 8004914:	08004b63 	.word	0x08004b63
 8004918:	08004b63 	.word	0x08004b63

	case 0:
		lcd_clear();
 800491c:	f7fc fbc0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004920:	2100      	movs	r1, #0
 8004922:	2000      	movs	r0, #0
 8004924:	f7fc fbcc 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8004928:	4896      	ldr	r0, [pc, #600]	; (8004b84 <cppLoop+0x2c0>)
 800492a:	f7fc fbf3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800492e:	2101      	movs	r1, #1
 8004930:	2000      	movs	r0, #0
 8004932:	f7fc fbc5 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8004936:	4894      	ldr	r0, [pc, #592]	; (8004b88 <cppLoop+0x2c4>)
 8004938:	f7fc fbec 	bl	8001114 <lcd_printf>
		break;
 800493c:	e11a      	b.n	8004b74 <cppLoop+0x2b0>

	case 1:
		lcd_clear();
 800493e:	f7fc fbaf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004942:	2100      	movs	r1, #0
 8004944:	2000      	movs	r0, #0
 8004946:	f7fc fbbb 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 800494a:	4890      	ldr	r0, [pc, #576]	; (8004b8c <cppLoop+0x2c8>)
 800494c:	f7fc fbe2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8004950:	2101      	movs	r1, #1
 8004952:	2000      	movs	r0, #0
 8004954:	f7fc fbb4 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8004958:	488d      	ldr	r0, [pc, #564]	; (8004b90 <cppLoop+0x2cc>)
 800495a:	f7fc fbdb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800495e:	488d      	ldr	r0, [pc, #564]	; (8004b94 <cppLoop+0x2d0>)
 8004960:	f7fc fff6 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8004964:	4603      	mov	r3, r0
 8004966:	2b02      	cmp	r3, #2
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80f8 	beq.w	8004b66 <cppLoop+0x2a2>
			HAL_Delay(500);
 8004976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800497a:	f000 fa15 	bl	8004da8 <HAL_Delay>

			logger.start();
 800497e:	4886      	ldr	r0, [pc, #536]	; (8004b98 <cppLoop+0x2d4>)
 8004980:	f7fd fe90 	bl	80026a4 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8004984:	4885      	ldr	r0, [pc, #532]	; (8004b9c <cppLoop+0x2d8>)
 8004986:	f7fe f8e9 	bl	8002b5c <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 3.14/2);
 800498a:	eddf 0a85 	vldr	s1, [pc, #532]	; 8004ba0 <cppLoop+0x2dc>
 800498e:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8004ba4 <cppLoop+0x2e0>
 8004992:	4882      	ldr	r0, [pc, #520]	; (8004b9c <cppLoop+0x2d8>)
 8004994:	f7fe f8ce 	bl	8002b34 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8004998:	f04f 32ff 	mov.w	r2, #4294967295
 800499c:	2101      	movs	r1, #1
 800499e:	4882      	ldr	r0, [pc, #520]	; (8004ba8 <cppLoop+0x2e4>)
 80049a0:	f7fd f8f6 	bl	8001b90 <_ZN3LED2LREaa>

			HAL_Delay(2000);
 80049a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80049a8:	f000 f9fe 	bl	8004da8 <HAL_Delay>

			velocity_ctrl.stop();
 80049ac:	487b      	ldr	r0, [pc, #492]	; (8004b9c <cppLoop+0x2d8>)
 80049ae:	f7fe f8e7 	bl	8002b80 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 80049b2:	f04f 32ff 	mov.w	r2, #4294967295
 80049b6:	2100      	movs	r1, #0
 80049b8:	487b      	ldr	r0, [pc, #492]	; (8004ba8 <cppLoop+0x2e4>)
 80049ba:	f7fd f8e9 	bl	8001b90 <_ZN3LED2LREaa>

			logger.stop();
 80049be:	4876      	ldr	r0, [pc, #472]	; (8004b98 <cppLoop+0x2d4>)
 80049c0:	f7fd fe80 	bl	80026c4 <_ZN6Logger4stopEv>
		}

		break;
 80049c4:	e0cf      	b.n	8004b66 <cppLoop+0x2a2>

	case 2:
		lcd_clear();
 80049c6:	f7fc fb6b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80049ca:	2100      	movs	r1, #0
 80049cc:	2000      	movs	r0, #0
 80049ce:	f7fc fb77 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 80049d2:	4876      	ldr	r0, [pc, #472]	; (8004bac <cppLoop+0x2e8>)
 80049d4:	f7fc fb9e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80049d8:	2101      	movs	r1, #1
 80049da:	2000      	movs	r0, #0
 80049dc:	f7fc fb70 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 80049e0:	4873      	ldr	r0, [pc, #460]	; (8004bb0 <cppLoop+0x2ec>)
 80049e2:	f7fc fb97 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80049e6:	486b      	ldr	r0, [pc, #428]	; (8004b94 <cppLoop+0x2d0>)
 80049e8:	f7fc ffb2 	bl	8001950 <_ZN8JoyStick8getValueEv>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	bf0c      	ite	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	2300      	movne	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80b6 	beq.w	8004b6a <cppLoop+0x2a6>
			led.LR(1, -1);
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004a02:	2101      	movs	r1, #1
 8004a04:	4868      	ldr	r0, [pc, #416]	; (8004ba8 <cppLoop+0x2e4>)
 8004a06:	f7fd f8c3 	bl	8001b90 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor6.csv");
 8004a0a:	4a6a      	ldr	r2, [pc, #424]	; (8004bb4 <cppLoop+0x2f0>)
 8004a0c:	496a      	ldr	r1, [pc, #424]	; (8004bb8 <cppLoop+0x2f4>)
 8004a0e:	4862      	ldr	r0, [pc, #392]	; (8004b98 <cppLoop+0x2d4>)
 8004a10:	f7fd fe34 	bl	800267c <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8004a14:	f04f 32ff 	mov.w	r2, #4294967295
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4863      	ldr	r0, [pc, #396]	; (8004ba8 <cppLoop+0x2e4>)
 8004a1c:	f7fd f8b8 	bl	8001b90 <_ZN3LED2LREaa>
		}
		break;
 8004a20:	e0a3      	b.n	8004b6a <cppLoop+0x2a6>

	case 3:
		led.fullColor('C');
 8004a22:	2143      	movs	r1, #67	; 0x43
 8004a24:	4860      	ldr	r0, [pc, #384]	; (8004ba8 <cppLoop+0x2e4>)
 8004a26:	f7fc fff7 	bl	8001a18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8004a2a:	f7fc fb39 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004a2e:	2100      	movs	r1, #0
 8004a30:	2000      	movs	r0, #0
 8004a32:	f7fc fb45 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8004a36:	4861      	ldr	r0, [pc, #388]	; (8004bbc <cppLoop+0x2f8>)
 8004a38:	f7fc fb6c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f7fc fb3e 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8004a44:	485e      	ldr	r0, [pc, #376]	; (8004bc0 <cppLoop+0x2fc>)
 8004a46:	f7fc fb65 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8004a4a:	4852      	ldr	r0, [pc, #328]	; (8004b94 <cppLoop+0x2d0>)
 8004a4c:	f7fc ff80 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	bf0c      	ite	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	2300      	movne	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8086 	beq.w	8004b6e <cppLoop+0x2aa>
			led.LR(-1, 1);
 8004a62:	2201      	movs	r2, #1
 8004a64:	f04f 31ff 	mov.w	r1, #4294967295
 8004a68:	484f      	ldr	r0, [pc, #316]	; (8004ba8 <cppLoop+0x2e4>)
 8004a6a:	f7fd f891 	bl	8001b90 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8004a6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a72:	f000 f999 	bl	8004da8 <HAL_Delay>

			logger.start();
 8004a76:	4848      	ldr	r0, [pc, #288]	; (8004b98 <cppLoop+0x2d4>)
 8004a78:	f7fd fe14 	bl	80026a4 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8004a7c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8004bc4 <cppLoop+0x300>
 8004a80:	4851      	ldr	r0, [pc, #324]	; (8004bc8 <cppLoop+0x304>)
 8004a82:	f7fd fcf6 	bl	8002472 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8004a86:	4850      	ldr	r0, [pc, #320]	; (8004bc8 <cppLoop+0x304>)
 8004a88:	f7fd fd3a 	bl	8002500 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8004a8c:	f241 3088 	movw	r0, #5000	; 0x1388
 8004a90:	f000 f98a 	bl	8004da8 <HAL_Delay>

			logger.stop();
 8004a94:	4840      	ldr	r0, [pc, #256]	; (8004b98 <cppLoop+0x2d4>)
 8004a96:	f7fd fe15 	bl	80026c4 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8004a9a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8004bc4 <cppLoop+0x300>
 8004a9e:	484a      	ldr	r0, [pc, #296]	; (8004bc8 <cppLoop+0x304>)
 8004aa0:	f7fd fce7 	bl	8002472 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8004aa4:	4848      	ldr	r0, [pc, #288]	; (8004bc8 <cppLoop+0x304>)
 8004aa6:	f7fd fd3b 	bl	8002520 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8004aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004aae:	2101      	movs	r1, #1
 8004ab0:	483d      	ldr	r0, [pc, #244]	; (8004ba8 <cppLoop+0x2e4>)
 8004ab2:	f7fd f86d 	bl	8001b90 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8004ab6:	4a45      	ldr	r2, [pc, #276]	; (8004bcc <cppLoop+0x308>)
 8004ab8:	493f      	ldr	r1, [pc, #252]	; (8004bb8 <cppLoop+0x2f4>)
 8004aba:	4837      	ldr	r0, [pc, #220]	; (8004b98 <cppLoop+0x2d4>)
 8004abc:	f7fd fdde 	bl	800267c <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8004ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4838      	ldr	r0, [pc, #224]	; (8004ba8 <cppLoop+0x2e4>)
 8004ac8:	f7fd f862 	bl	8001b90 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8004acc:	2200      	movs	r2, #0
 8004ace:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad2:	4835      	ldr	r0, [pc, #212]	; (8004ba8 <cppLoop+0x2e4>)
 8004ad4:	f7fd f85c 	bl	8001b90 <_ZN3LED2LREaa>
		}

		break;
 8004ad8:	e049      	b.n	8004b6e <cppLoop+0x2aa>

	case 4:
		led.fullColor('M');
 8004ada:	214d      	movs	r1, #77	; 0x4d
 8004adc:	4832      	ldr	r0, [pc, #200]	; (8004ba8 <cppLoop+0x2e4>)
 8004ade:	f7fc ff9b 	bl	8001a18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8004ae2:	f7fc fadd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f7fc fae9 	bl	80010c0 <lcd_locate>
		lcd_printf("Contiue");
 8004aee:	4838      	ldr	r0, [pc, #224]	; (8004bd0 <cppLoop+0x30c>)
 8004af0:	f7fc fb10 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8004af4:	2101      	movs	r1, #1
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fc fae2 	bl	80010c0 <lcd_locate>
		lcd_printf("SaveTest");
 8004afc:	4835      	ldr	r0, [pc, #212]	; (8004bd4 <cppLoop+0x310>)
 8004afe:	f7fc fb09 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_C){
 8004b02:	4824      	ldr	r0, [pc, #144]	; (8004b94 <cppLoop+0x2d0>)
 8004b04:	f7fc ff24 	bl	8001950 <_ZN8JoyStick8getValueEv>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02c      	beq.n	8004b72 <cppLoop+0x2ae>
			led.LR(-1, 1);
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b1e:	4822      	ldr	r0, [pc, #136]	; (8004ba8 <cppLoop+0x2e4>)
 8004b20:	f7fd f836 	bl	8001b90 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8004b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b28:	f000 f93e 	bl	8004da8 <HAL_Delay>

			line_trace.setNormalRatio(0.1);
 8004b2c:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8004bc4 <cppLoop+0x300>
 8004b30:	4825      	ldr	r0, [pc, #148]	; (8004bc8 <cppLoop+0x304>)
 8004b32:	f7fd fc9e 	bl	8002472 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8004b36:	4824      	ldr	r0, [pc, #144]	; (8004bc8 <cppLoop+0x304>)
 8004b38:	f7fd fce2 	bl	8002500 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8004b3c:	f241 3088 	movw	r0, #5000	; 0x1388
 8004b40:	f000 f932 	bl	8004da8 <HAL_Delay>

			line_trace.setNormalRatio(0.1);
 8004b44:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004bc4 <cppLoop+0x300>
 8004b48:	481f      	ldr	r0, [pc, #124]	; (8004bc8 <cppLoop+0x304>)
 8004b4a:	f7fd fc92 	bl	8002472 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8004b4e:	481e      	ldr	r0, [pc, #120]	; (8004bc8 <cppLoop+0x304>)
 8004b50:	f7fd fce6 	bl	8002520 <_ZN9LineTrace4stopEv>


			led.LR(-1, 0);
 8004b54:	2200      	movs	r2, #0
 8004b56:	f04f 31ff 	mov.w	r1, #4294967295
 8004b5a:	4813      	ldr	r0, [pc, #76]	; (8004ba8 <cppLoop+0x2e4>)
 8004b5c:	f7fd f818 	bl	8001b90 <_ZN3LED2LREaa>
		}
		break;
 8004b60:	e007      	b.n	8004b72 <cppLoop+0x2ae>
	case 15:

		break;

	default:
		break;
 8004b62:	bf00      	nop
 8004b64:	e006      	b.n	8004b74 <cppLoop+0x2b0>
		break;
 8004b66:	bf00      	nop
 8004b68:	e004      	b.n	8004b74 <cppLoop+0x2b0>
		break;
 8004b6a:	bf00      	nop
 8004b6c:	e002      	b.n	8004b74 <cppLoop+0x2b0>
		break;
 8004b6e:	bf00      	nop
 8004b70:	e000      	b.n	8004b74 <cppLoop+0x2b0>
		break;
 8004b72:	bf00      	nop

	}

	HAL_Delay(10);
 8004b74:	200a      	movs	r0, #10
 8004b76:	f000 f917 	bl	8004da8 <HAL_Delay>

}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	2000050c 	.word	0x2000050c
 8004b84:	08014bc8 	.word	0x08014bc8
 8004b88:	08014bcc 	.word	0x08014bcc
 8004b8c:	08014bd4 	.word	0x08014bd4
 8004b90:	08014be0 	.word	0x08014be0
 8004b94:	20000508 	.word	0x20000508
 8004b98:	20000538 	.word	0x20000538
 8004b9c:	20007a70 	.word	0x20007a70
 8004ba0:	3fc8f5c3 	.word	0x3fc8f5c3
 8004ba4:	00000000 	.word	0x00000000
 8004ba8:	20000514 	.word	0x20000514
 8004bac:	08014be8 	.word	0x08014be8
 8004bb0:	08014bec 	.word	0x08014bec
 8004bb4:	08014bf4 	.word	0x08014bf4
 8004bb8:	08014c00 	.word	0x08014c00
 8004bbc:	08014c10 	.word	0x08014c10
 8004bc0:	08014c18 	.word	0x08014c18
 8004bc4:	3dcccccd 	.word	0x3dcccccd
 8004bc8:	20007aa8 	.word	0x20007aa8
 8004bcc:	08014c20 	.word	0x08014c20
 8004bd0:	08014c2c 	.word	0x08014c2c
 8004bd4:	08014c34 	.word	0x08014c34

08004bd8 <_Z41__static_initialization_and_destruction_0ii>:
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d124      	bne.n	8004c32 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d11f      	bne.n	8004c32 <_Z41__static_initialization_and_destruction_0ii+0x5a>
LineSensor line_sensor;
 8004bf2:	4812      	ldr	r0, [pc, #72]	; (8004c3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004bf4:	f7fd f804 	bl	8001c00 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8004bf8:	4811      	ldr	r0, [pc, #68]	; (8004c40 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004bfa:	f7fd fea7 	bl	800294c <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8004bfe:	4811      	ldr	r0, [pc, #68]	; (8004c44 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004c00:	f7fc fe9a 	bl	8001938 <_ZN8JoyStickC1Ev>
Motor motor;
 8004c04:	4810      	ldr	r0, [pc, #64]	; (8004c48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004c06:	f7fd fd6d 	bl	80026e4 <_ZN5MotorC1Ev>
IMU imu;
 8004c0a:	4810      	ldr	r0, [pc, #64]	; (8004c4c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c0c:	f7fc fd72 	bl	80016f4 <_ZN3IMUC1Ev>
Logger logger;
 8004c10:	480f      	ldr	r0, [pc, #60]	; (8004c50 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004c12:	f7fd fc9d 	bl	8002550 <_ZN6LoggerC1Ev>
Encoder encoder;
 8004c16:	480f      	ldr	r0, [pc, #60]	; (8004c54 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004c18:	f7fc fa9c 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c1e:	4a0d      	ldr	r2, [pc, #52]	; (8004c54 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004c20:	4909      	ldr	r1, [pc, #36]	; (8004c48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004c22:	480d      	ldr	r0, [pc, #52]	; (8004c58 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004c24:	f7fd fefc 	bl	8002a20 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor);
 8004c28:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004c2a:	4907      	ldr	r1, [pc, #28]	; (8004c48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004c2c:	480b      	ldr	r0, [pc, #44]	; (8004c5c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004c2e:	f7fd fae1 	bl	80021f4 <_ZN9LineTraceC1EP5MotorP10LineSensor>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	2000020c 	.word	0x2000020c
 8004c40:	20000504 	.word	0x20000504
 8004c44:	20000508 	.word	0x20000508
 8004c48:	20000510 	.word	0x20000510
 8004c4c:	20000518 	.word	0x20000518
 8004c50:	20000538 	.word	0x20000538
 8004c54:	20007a6c 	.word	0x20007a6c
 8004c58:	20007a70 	.word	0x20007a70
 8004c5c:	20007aa8 	.word	0x20007aa8

08004c60 <_GLOBAL__sub_I_line_sensor>:
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c68:	2001      	movs	r0, #1
 8004c6a:	f7ff ffb5 	bl	8004bd8 <_Z41__static_initialization_and_destruction_0ii>
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ca8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c76:	e003      	b.n	8004c80 <LoopCopyDataInit>

08004c78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c7e:	3104      	adds	r1, #4

08004c80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c80:	480b      	ldr	r0, [pc, #44]	; (8004cb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c88:	d3f6      	bcc.n	8004c78 <CopyDataInit>
  ldr  r2, =_sbss
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c8c:	e002      	b.n	8004c94 <LoopFillZerobss>

08004c8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c90:	f842 3b04 	str.w	r3, [r2], #4

08004c94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c94:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c98:	d3f9      	bcc.n	8004c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c9a:	f7ff fd7d 	bl	8004798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c9e:	f00a ffdb 	bl	800fc58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ca2:	f7fe f849 	bl	8002d38 <main>
  bx  lr    
 8004ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ca8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004cac:	08015458 	.word	0x08015458
  ldr  r0, =_sdata
 8004cb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004cb4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8004cb8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8004cbc:	2000c614 	.word	0x2000c614

08004cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cc0:	e7fe      	b.n	8004cc0 <ADC_IRQHandler>
	...

08004cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <HAL_Init+0x40>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <HAL_Init+0x40>)
 8004cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_Init+0x40>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <HAL_Init+0x40>)
 8004cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ce0:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_Init+0x40>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <HAL_Init+0x40>)
 8004ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cec:	2003      	movs	r0, #3
 8004cee:	f000 fd51 	bl	8005794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f000 f808 	bl	8004d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cf8:	f7fe ff3c 	bl	8003b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40023c00 	.word	0x40023c00

08004d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_InitTick+0x54>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_InitTick+0x58>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fd69 	bl	80057fe <HAL_SYSTICK_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e00e      	b.n	8004d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b0f      	cmp	r3, #15
 8004d3a:	d80a      	bhi.n	8004d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	f000 fd31 	bl	80057aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d48:	4a06      	ldr	r2, [pc, #24]	; (8004d64 <HAL_InitTick+0x5c>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e000      	b.n	8004d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000000 	.word	0x20000000
 8004d60:	20000008 	.word	0x20000008
 8004d64:	20000004 	.word	0x20000004

08004d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_IncTick+0x20>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_IncTick+0x24>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4413      	add	r3, r2
 8004d78:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <HAL_IncTick+0x24>)
 8004d7a:	6013      	str	r3, [r2, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000008 	.word	0x20000008
 8004d8c:	2000a598 	.word	0x2000a598

08004d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return uwTick;
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <HAL_GetTick+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	2000a598 	.word	0x2000a598

08004da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004db0:	f7ff ffee 	bl	8004d90 <HAL_GetTick>
 8004db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d005      	beq.n	8004dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dc2:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_Delay+0x40>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004dce:	bf00      	nop
 8004dd0:	f7ff ffde 	bl	8004d90 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d8f7      	bhi.n	8004dd0 <HAL_Delay+0x28>
  {
  }
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000008 	.word	0x20000008

08004dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e033      	b.n	8004e6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fe feda 	bl	8003bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e32:	f023 0302 	bic.w	r3, r3, #2
 8004e36:	f043 0202 	orr.w	r2, r3, #2
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa5a 	bl	80052f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	f043 0201 	orr.w	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
 8004e5a:	e001      	b.n	8004e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_ADC_Start_DMA+0x1e>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e0cc      	b.n	800502c <HAL_ADC_Start_DMA+0x1b8>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d018      	beq.n	8004eda <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004eb8:	4b5e      	ldr	r3, [pc, #376]	; (8005034 <HAL_ADC_Start_DMA+0x1c0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a5e      	ldr	r2, [pc, #376]	; (8005038 <HAL_ADC_Start_DMA+0x1c4>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	0c9a      	lsrs	r2, r3, #18
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ecc:	e002      	b.n	8004ed4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f9      	bne.n	8004ece <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 80a0 	bne.w	800502a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f28:	d106      	bne.n	8004f38 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	f023 0206 	bic.w	r2, r3, #6
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
 8004f36:	e002      	b.n	8004f3e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f46:	4b3d      	ldr	r3, [pc, #244]	; (800503c <HAL_ADC_Start_DMA+0x1c8>)
 8004f48:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <HAL_ADC_Start_DMA+0x1cc>)
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	4a3b      	ldr	r2, [pc, #236]	; (8005044 <HAL_ADC_Start_DMA+0x1d0>)
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	4a3a      	ldr	r2, [pc, #232]	; (8005048 <HAL_ADC_Start_DMA+0x1d4>)
 8004f60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004f6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004f7a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f8a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	334c      	adds	r3, #76	; 0x4c
 8004f96:	4619      	mov	r1, r3
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f000 fcea 	bl	8005974 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d12a      	bne.n	8005002 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a26      	ldr	r2, [pc, #152]	; (800504c <HAL_ADC_Start_DMA+0x1d8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d015      	beq.n	8004fe2 <HAL_ADC_Start_DMA+0x16e>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a25      	ldr	r2, [pc, #148]	; (8005050 <HAL_ADC_Start_DMA+0x1dc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d105      	bne.n	8004fcc <HAL_ADC_Start_DMA+0x158>
 8004fc0:	4b1e      	ldr	r3, [pc, #120]	; (800503c <HAL_ADC_Start_DMA+0x1c8>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_ADC_Start_DMA+0x1e0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d129      	bne.n	800502a <HAL_ADC_Start_DMA+0x1b6>
 8004fd6:	4b19      	ldr	r3, [pc, #100]	; (800503c <HAL_ADC_Start_DMA+0x1c8>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2b0f      	cmp	r3, #15
 8004fe0:	d823      	bhi.n	800502a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d11c      	bne.n	800502a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	e013      	b.n	800502a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a11      	ldr	r2, [pc, #68]	; (800504c <HAL_ADC_Start_DMA+0x1d8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d10e      	bne.n	800502a <HAL_ADC_Start_DMA+0x1b6>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d107      	bne.n	800502a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005028:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000000 	.word	0x20000000
 8005038:	431bde83 	.word	0x431bde83
 800503c:	40012300 	.word	0x40012300
 8005040:	080054f1 	.word	0x080054f1
 8005044:	080055ab 	.word	0x080055ab
 8005048:	080055c7 	.word	0x080055c7
 800504c:	40012000 	.word	0x40012000
 8005050:	40012100 	.word	0x40012100
 8005054:	40012200 	.word	0x40012200

08005058 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x1c>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e113      	b.n	80052d8 <HAL_ADC_ConfigChannel+0x244>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b09      	cmp	r3, #9
 80050be:	d925      	bls.n	800510c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68d9      	ldr	r1, [r3, #12]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	4613      	mov	r3, r2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4413      	add	r3, r2
 80050d4:	3b1e      	subs	r3, #30
 80050d6:	2207      	movs	r2, #7
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43da      	mvns	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	400a      	ands	r2, r1
 80050e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68d9      	ldr	r1, [r3, #12]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4618      	mov	r0, r3
 80050f8:	4603      	mov	r3, r0
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	4403      	add	r3, r0
 80050fe:	3b1e      	subs	r3, #30
 8005100:	409a      	lsls	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	e022      	b.n	8005152 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6919      	ldr	r1, [r3, #16]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	4613      	mov	r3, r2
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	4413      	add	r3, r2
 8005120:	2207      	movs	r2, #7
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43da      	mvns	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	400a      	ands	r2, r1
 800512e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6919      	ldr	r1, [r3, #16]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	4618      	mov	r0, r3
 8005142:	4603      	mov	r3, r0
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4403      	add	r3, r0
 8005148:	409a      	lsls	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b06      	cmp	r3, #6
 8005158:	d824      	bhi.n	80051a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	3b05      	subs	r3, #5
 800516c:	221f      	movs	r2, #31
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43da      	mvns	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	400a      	ands	r2, r1
 800517a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	4618      	mov	r0, r3
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	3b05      	subs	r3, #5
 8005196:	fa00 f203 	lsl.w	r2, r0, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	635a      	str	r2, [r3, #52]	; 0x34
 80051a2:	e04c      	b.n	800523e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	d824      	bhi.n	80051f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	3b23      	subs	r3, #35	; 0x23
 80051be:	221f      	movs	r2, #31
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43da      	mvns	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	400a      	ands	r2, r1
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4618      	mov	r0, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	3b23      	subs	r3, #35	; 0x23
 80051e8:	fa00 f203 	lsl.w	r2, r0, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
 80051f4:	e023      	b.n	800523e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	3b41      	subs	r3, #65	; 0x41
 8005208:	221f      	movs	r2, #31
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	43da      	mvns	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	400a      	ands	r2, r1
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	4618      	mov	r0, r3
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	3b41      	subs	r3, #65	; 0x41
 8005232:	fa00 f203 	lsl.w	r2, r0, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800523e:	4b29      	ldr	r3, [pc, #164]	; (80052e4 <HAL_ADC_ConfigChannel+0x250>)
 8005240:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a28      	ldr	r2, [pc, #160]	; (80052e8 <HAL_ADC_ConfigChannel+0x254>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d10f      	bne.n	800526c <HAL_ADC_ConfigChannel+0x1d8>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b12      	cmp	r3, #18
 8005252:	d10b      	bne.n	800526c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_ADC_ConfigChannel+0x254>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d12b      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x23a>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <HAL_ADC_ConfigChannel+0x258>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <HAL_ADC_ConfigChannel+0x1f4>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b11      	cmp	r3, #17
 8005286:	d122      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a11      	ldr	r2, [pc, #68]	; (80052ec <HAL_ADC_ConfigChannel+0x258>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d111      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052aa:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <HAL_ADC_ConfigChannel+0x25c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a11      	ldr	r2, [pc, #68]	; (80052f4 <HAL_ADC_ConfigChannel+0x260>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	0c9a      	lsrs	r2, r3, #18
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052c0:	e002      	b.n	80052c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f9      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40012300 	.word	0x40012300
 80052e8:	40012000 	.word	0x40012000
 80052ec:	10000012 	.word	0x10000012
 80052f0:	20000000 	.word	0x20000000
 80052f4:	431bde83 	.word	0x431bde83

080052f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005300:	4b79      	ldr	r3, [pc, #484]	; (80054e8 <ADC_Init+0x1f0>)
 8005302:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800532c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6859      	ldr	r1, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	021a      	lsls	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6899      	ldr	r1, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	4a58      	ldr	r2, [pc, #352]	; (80054ec <ADC_Init+0x1f4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d022      	beq.n	80053d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800539e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6899      	ldr	r1, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6899      	ldr	r1, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	e00f      	b.n	80053f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0202 	bic.w	r2, r2, #2
 8005404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6899      	ldr	r1, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	7e1b      	ldrb	r3, [r3, #24]
 8005410:	005a      	lsls	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01b      	beq.n	800545c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005432:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005442:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	3b01      	subs	r3, #1
 8005450:	035a      	lsls	r2, r3, #13
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	e007      	b.n	800546c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800546a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	3b01      	subs	r3, #1
 8005488:	051a      	lsls	r2, r3, #20
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6899      	ldr	r1, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054ae:	025a      	lsls	r2, r3, #9
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6899      	ldr	r1, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	029a      	lsls	r2, r3, #10
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40012300 	.word	0x40012300
 80054ec:	0f000001 	.word	0x0f000001

080054f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005506:	2b00      	cmp	r3, #0
 8005508:	d13c      	bne.n	8005584 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d12b      	bne.n	800557c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005528:	2b00      	cmp	r3, #0
 800552a:	d127      	bne.n	800557c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005536:	2b00      	cmp	r3, #0
 8005538:	d006      	beq.n	8005548 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005544:	2b00      	cmp	r3, #0
 8005546:	d119      	bne.n	800557c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0220 	bic.w	r2, r2, #32
 8005556:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	f043 0201 	orr.w	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f7ff fd6b 	bl	8005058 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005582:	e00e      	b.n	80055a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff fd75 	bl	8005080 <HAL_ADC_ErrorCallback>
}
 8005596:	e004      	b.n	80055a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff fd57 	bl	800506c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2240      	movs	r2, #64	; 0x40
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	f043 0204 	orr.w	r2, r3, #4
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f7ff fd4a 	bl	8005080 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <__NVIC_SetPriorityGrouping>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <__NVIC_SetPriorityGrouping+0x44>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005610:	4013      	ands	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800561c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005626:	4a04      	ldr	r2, [pc, #16]	; (8005638 <__NVIC_SetPriorityGrouping+0x44>)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	60d3      	str	r3, [r2, #12]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	e000ed00 	.word	0xe000ed00

0800563c <__NVIC_GetPriorityGrouping>:
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <__NVIC_GetPriorityGrouping+0x18>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	0a1b      	lsrs	r3, r3, #8
 8005646:	f003 0307 	and.w	r3, r3, #7
}
 800564a:	4618      	mov	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	e000ed00 	.word	0xe000ed00

08005658 <__NVIC_EnableIRQ>:
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	2b00      	cmp	r3, #0
 8005668:	db0b      	blt.n	8005682 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	f003 021f 	and.w	r2, r3, #31
 8005670:	4907      	ldr	r1, [pc, #28]	; (8005690 <__NVIC_EnableIRQ+0x38>)
 8005672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	2001      	movs	r0, #1
 800567a:	fa00 f202 	lsl.w	r2, r0, r2
 800567e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	e000e100 	.word	0xe000e100

08005694 <__NVIC_SetPriority>:
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	6039      	str	r1, [r7, #0]
 800569e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	db0a      	blt.n	80056be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	490c      	ldr	r1, [pc, #48]	; (80056e0 <__NVIC_SetPriority+0x4c>)
 80056ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b2:	0112      	lsls	r2, r2, #4
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	440b      	add	r3, r1
 80056b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056bc:	e00a      	b.n	80056d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	4908      	ldr	r1, [pc, #32]	; (80056e4 <__NVIC_SetPriority+0x50>)
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	3b04      	subs	r3, #4
 80056cc:	0112      	lsls	r2, r2, #4
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	440b      	add	r3, r1
 80056d2:	761a      	strb	r2, [r3, #24]
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	e000e100 	.word	0xe000e100
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <NVIC_EncodePriority>:
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f1c3 0307 	rsb	r3, r3, #7
 8005702:	2b04      	cmp	r3, #4
 8005704:	bf28      	it	cs
 8005706:	2304      	movcs	r3, #4
 8005708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3304      	adds	r3, #4
 800570e:	2b06      	cmp	r3, #6
 8005710:	d902      	bls.n	8005718 <NVIC_EncodePriority+0x30>
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	3b03      	subs	r3, #3
 8005716:	e000      	b.n	800571a <NVIC_EncodePriority+0x32>
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800571c:	f04f 32ff 	mov.w	r2, #4294967295
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	43da      	mvns	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	401a      	ands	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005730:	f04f 31ff 	mov.w	r1, #4294967295
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	43d9      	mvns	r1, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005740:	4313      	orrs	r3, r2
}
 8005742:	4618      	mov	r0, r3
 8005744:	3724      	adds	r7, #36	; 0x24
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <SysTick_Config>:
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3b01      	subs	r3, #1
 800575c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005760:	d301      	bcc.n	8005766 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005762:	2301      	movs	r3, #1
 8005764:	e00f      	b.n	8005786 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <SysTick_Config+0x40>)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3b01      	subs	r3, #1
 800576c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800576e:	210f      	movs	r1, #15
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	f7ff ff8e 	bl	8005694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005778:	4b05      	ldr	r3, [pc, #20]	; (8005790 <SysTick_Config+0x40>)
 800577a:	2200      	movs	r2, #0
 800577c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800577e:	4b04      	ldr	r3, [pc, #16]	; (8005790 <SysTick_Config+0x40>)
 8005780:	2207      	movs	r2, #7
 8005782:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	e000e010 	.word	0xe000e010

08005794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ff29 	bl	80055f4 <__NVIC_SetPriorityGrouping>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b086      	sub	sp, #24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	4603      	mov	r3, r0
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057bc:	f7ff ff3e 	bl	800563c <__NVIC_GetPriorityGrouping>
 80057c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	6978      	ldr	r0, [r7, #20]
 80057c8:	f7ff ff8e 	bl	80056e8 <NVIC_EncodePriority>
 80057cc:	4602      	mov	r2, r0
 80057ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057d2:	4611      	mov	r1, r2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff ff5d 	bl	8005694 <__NVIC_SetPriority>
}
 80057da:	bf00      	nop
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	4603      	mov	r3, r0
 80057ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff ff31 	bl	8005658 <__NVIC_EnableIRQ>
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff ffa2 	bl	8005750 <SysTick_Config>
 800580c:	4603      	mov	r3, r0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005824:	f7ff fab4 	bl	8004d90 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e099      	b.n	8005968 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0201 	bic.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005854:	e00f      	b.n	8005876 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005856:	f7ff fa9b 	bl	8004d90 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b05      	cmp	r3, #5
 8005862:	d908      	bls.n	8005876 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2203      	movs	r2, #3
 800586e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e078      	b.n	8005968 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e8      	bne.n	8005856 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4b38      	ldr	r3, [pc, #224]	; (8005970 <HAL_DMA_Init+0x158>)
 8005890:	4013      	ands	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d107      	bne.n	80058e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	4313      	orrs	r3, r2
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f023 0307 	bic.w	r3, r3, #7
 80058f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b04      	cmp	r3, #4
 8005908:	d117      	bne.n	800593a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fa9d 	bl	8005e5c <DMA_CheckFifoParam>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2240      	movs	r2, #64	; 0x40
 800592c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005936:	2301      	movs	r3, #1
 8005938:	e016      	b.n	8005968 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fa54 	bl	8005df0 <DMA_CalcBaseAndBitshift>
 8005948:	4603      	mov	r3, r0
 800594a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005950:	223f      	movs	r2, #63	; 0x3f
 8005952:	409a      	lsls	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	f010803f 	.word	0xf010803f

08005974 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_DMA_Start_IT+0x26>
 8005996:	2302      	movs	r3, #2
 8005998:	e040      	b.n	8005a1c <HAL_DMA_Start_IT+0xa8>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d12f      	bne.n	8005a0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2202      	movs	r2, #2
 80059b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f9e6 	bl	8005d94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059cc:	223f      	movs	r2, #63	; 0x3f
 80059ce:	409a      	lsls	r2, r3
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0216 	orr.w	r2, r2, #22
 80059e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d007      	beq.n	80059fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0208 	orr.w	r2, r2, #8
 80059fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	e005      	b.n	8005a1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
 8005a18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d004      	beq.n	8005a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2280      	movs	r2, #128	; 0x80
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e00c      	b.n	8005a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2205      	movs	r2, #5
 8005a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a74:	4b92      	ldr	r3, [pc, #584]	; (8005cc0 <HAL_DMA_IRQHandler+0x258>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a92      	ldr	r2, [pc, #584]	; (8005cc4 <HAL_DMA_IRQHandler+0x25c>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	0a9b      	lsrs	r3, r3, #10
 8005a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a92:	2208      	movs	r2, #8
 8005a94:	409a      	lsls	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01a      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0204 	bic.w	r2, r2, #4
 8005aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005acc:	f043 0201 	orr.w	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad8:	2201      	movs	r2, #1
 8005ada:	409a      	lsls	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d012      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	2201      	movs	r2, #1
 8005af8:	409a      	lsls	r2, r3
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b02:	f043 0202 	orr.w	r2, r3, #2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0e:	2204      	movs	r2, #4
 8005b10:	409a      	lsls	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d012      	beq.n	8005b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	f043 0204 	orr.w	r2, r3, #4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b44:	2210      	movs	r2, #16
 8005b46:	409a      	lsls	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d043      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d03c      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	2210      	movs	r2, #16
 8005b64:	409a      	lsls	r2, r3
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d108      	bne.n	8005b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d024      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
 8005b96:	e01f      	b.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	4798      	blx	r3
 8005ba8:	e016      	b.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d107      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0208 	bic.w	r2, r2, #8
 8005bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	2220      	movs	r2, #32
 8005bde:	409a      	lsls	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 808e 	beq.w	8005d06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8086 	beq.w	8005d06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfe:	2220      	movs	r2, #32
 8005c00:	409a      	lsls	r2, r3
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d136      	bne.n	8005c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0216 	bic.w	r2, r2, #22
 8005c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <HAL_DMA_IRQHandler+0x1da>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0208 	bic.w	r2, r2, #8
 8005c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c56:	223f      	movs	r2, #63	; 0x3f
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d07d      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
        }
        return;
 8005c7e:	e078      	b.n	8005d72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01c      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d108      	bne.n	8005cae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d030      	beq.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
 8005cac:	e02b      	b.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d027      	beq.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4798      	blx	r3
 8005cbe:	e022      	b.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
 8005cc0:	20000000 	.word	0x20000000
 8005cc4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0210 	bic.w	r2, r2, #16
 8005ce4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d032      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d022      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2205      	movs	r2, #5
 8005d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d307      	bcc.n	8005d4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f2      	bne.n	8005d32 <HAL_DMA_IRQHandler+0x2ca>
 8005d4c:	e000      	b.n	8005d50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005d4e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
 8005d70:	e000      	b.n	8005d74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005d72:	bf00      	nop
    }
  }
}
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop

08005d7c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005db0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d108      	bne.n	8005dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005dd2:	e007      	b.n	8005de4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	60da      	str	r2, [r3, #12]
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	3b10      	subs	r3, #16
 8005e00:	4a14      	ldr	r2, [pc, #80]	; (8005e54 <DMA_CalcBaseAndBitshift+0x64>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e0a:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <DMA_CalcBaseAndBitshift+0x68>)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d909      	bls.n	8005e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e26:	f023 0303 	bic.w	r3, r3, #3
 8005e2a:	1d1a      	adds	r2, r3, #4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8005e30:	e007      	b.n	8005e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e3a:	f023 0303 	bic.w	r3, r3, #3
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	aaaaaaab 	.word	0xaaaaaaab
 8005e58:	08014cac 	.word	0x08014cac

08005e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d11f      	bne.n	8005eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d855      	bhi.n	8005f28 <DMA_CheckFifoParam+0xcc>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <DMA_CheckFifoParam+0x28>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005e95 	.word	0x08005e95
 8005e88:	08005ea7 	.word	0x08005ea7
 8005e8c:	08005e95 	.word	0x08005e95
 8005e90:	08005f29 	.word	0x08005f29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d045      	beq.n	8005f2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ea4:	e042      	b.n	8005f2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005eae:	d13f      	bne.n	8005f30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eb4:	e03c      	b.n	8005f30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebe:	d121      	bne.n	8005f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d836      	bhi.n	8005f34 <DMA_CheckFifoParam+0xd8>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <DMA_CheckFifoParam+0x70>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005edd 	.word	0x08005edd
 8005ed0:	08005ee3 	.word	0x08005ee3
 8005ed4:	08005edd 	.word	0x08005edd
 8005ed8:	08005ef5 	.word	0x08005ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee0:	e02f      	b.n	8005f42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d024      	beq.n	8005f38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ef2:	e021      	b.n	8005f38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005efc:	d11e      	bne.n	8005f3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f02:	e01b      	b.n	8005f3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d902      	bls.n	8005f10 <DMA_CheckFifoParam+0xb4>
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d003      	beq.n	8005f16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f0e:	e018      	b.n	8005f42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
      break;
 8005f14:	e015      	b.n	8005f42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	73fb      	strb	r3, [r7, #15]
      break;
 8005f26:	e00b      	b.n	8005f40 <DMA_CheckFifoParam+0xe4>
      break;
 8005f28:	bf00      	nop
 8005f2a:	e00a      	b.n	8005f42 <DMA_CheckFifoParam+0xe6>
      break;
 8005f2c:	bf00      	nop
 8005f2e:	e008      	b.n	8005f42 <DMA_CheckFifoParam+0xe6>
      break;
 8005f30:	bf00      	nop
 8005f32:	e006      	b.n	8005f42 <DMA_CheckFifoParam+0xe6>
      break;
 8005f34:	bf00      	nop
 8005f36:	e004      	b.n	8005f42 <DMA_CheckFifoParam+0xe6>
      break;
 8005f38:	bf00      	nop
 8005f3a:	e002      	b.n	8005f42 <DMA_CheckFifoParam+0xe6>
      break;   
 8005f3c:	bf00      	nop
 8005f3e:	e000      	b.n	8005f42 <DMA_CheckFifoParam+0xe6>
      break;
 8005f40:	bf00      	nop
    }
  } 
  
  return status; 
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b089      	sub	sp, #36	; 0x24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	e177      	b.n	800625c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	f040 8166 	bne.w	8006256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d00b      	beq.n	8005faa <HAL_GPIO_Init+0x5a>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d007      	beq.n	8005faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f9e:	2b11      	cmp	r3, #17
 8005fa0:	d003      	beq.n	8005faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b12      	cmp	r3, #18
 8005fa8:	d130      	bne.n	800600c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	f003 0201 	and.w	r2, r3, #1
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	4313      	orrs	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	2203      	movs	r2, #3
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	43db      	mvns	r3, r3
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4013      	ands	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d003      	beq.n	800604c <HAL_GPIO_Init+0xfc>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b12      	cmp	r3, #18
 800604a:	d123      	bne.n	8006094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	08da      	lsrs	r2, r3, #3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3208      	adds	r2, #8
 8006054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	220f      	movs	r2, #15
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	43db      	mvns	r3, r3
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4013      	ands	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4313      	orrs	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	08da      	lsrs	r2, r3, #3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3208      	adds	r2, #8
 800608e:	69b9      	ldr	r1, [r7, #24]
 8006090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	2203      	movs	r2, #3
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f003 0203 	and.w	r2, r3, #3
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80c0 	beq.w	8006256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	4b65      	ldr	r3, [pc, #404]	; (8006270 <HAL_GPIO_Init+0x320>)
 80060dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060de:	4a64      	ldr	r2, [pc, #400]	; (8006270 <HAL_GPIO_Init+0x320>)
 80060e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060e4:	6453      	str	r3, [r2, #68]	; 0x44
 80060e6:	4b62      	ldr	r3, [pc, #392]	; (8006270 <HAL_GPIO_Init+0x320>)
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060f2:	4a60      	ldr	r2, [pc, #384]	; (8006274 <HAL_GPIO_Init+0x324>)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	089b      	lsrs	r3, r3, #2
 80060f8:	3302      	adds	r3, #2
 80060fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	220f      	movs	r2, #15
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4013      	ands	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a57      	ldr	r2, [pc, #348]	; (8006278 <HAL_GPIO_Init+0x328>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d037      	beq.n	800618e <HAL_GPIO_Init+0x23e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a56      	ldr	r2, [pc, #344]	; (800627c <HAL_GPIO_Init+0x32c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d031      	beq.n	800618a <HAL_GPIO_Init+0x23a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a55      	ldr	r2, [pc, #340]	; (8006280 <HAL_GPIO_Init+0x330>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d02b      	beq.n	8006186 <HAL_GPIO_Init+0x236>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a54      	ldr	r2, [pc, #336]	; (8006284 <HAL_GPIO_Init+0x334>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d025      	beq.n	8006182 <HAL_GPIO_Init+0x232>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a53      	ldr	r2, [pc, #332]	; (8006288 <HAL_GPIO_Init+0x338>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01f      	beq.n	800617e <HAL_GPIO_Init+0x22e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a52      	ldr	r2, [pc, #328]	; (800628c <HAL_GPIO_Init+0x33c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d019      	beq.n	800617a <HAL_GPIO_Init+0x22a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a51      	ldr	r2, [pc, #324]	; (8006290 <HAL_GPIO_Init+0x340>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_GPIO_Init+0x226>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a50      	ldr	r2, [pc, #320]	; (8006294 <HAL_GPIO_Init+0x344>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00d      	beq.n	8006172 <HAL_GPIO_Init+0x222>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a4f      	ldr	r2, [pc, #316]	; (8006298 <HAL_GPIO_Init+0x348>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d007      	beq.n	800616e <HAL_GPIO_Init+0x21e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a4e      	ldr	r2, [pc, #312]	; (800629c <HAL_GPIO_Init+0x34c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d101      	bne.n	800616a <HAL_GPIO_Init+0x21a>
 8006166:	2309      	movs	r3, #9
 8006168:	e012      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800616a:	230a      	movs	r3, #10
 800616c:	e010      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800616e:	2308      	movs	r3, #8
 8006170:	e00e      	b.n	8006190 <HAL_GPIO_Init+0x240>
 8006172:	2307      	movs	r3, #7
 8006174:	e00c      	b.n	8006190 <HAL_GPIO_Init+0x240>
 8006176:	2306      	movs	r3, #6
 8006178:	e00a      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800617a:	2305      	movs	r3, #5
 800617c:	e008      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800617e:	2304      	movs	r3, #4
 8006180:	e006      	b.n	8006190 <HAL_GPIO_Init+0x240>
 8006182:	2303      	movs	r3, #3
 8006184:	e004      	b.n	8006190 <HAL_GPIO_Init+0x240>
 8006186:	2302      	movs	r3, #2
 8006188:	e002      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800618e:	2300      	movs	r3, #0
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	f002 0203 	and.w	r2, r2, #3
 8006196:	0092      	lsls	r2, r2, #2
 8006198:	4093      	lsls	r3, r2
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4313      	orrs	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061a0:	4934      	ldr	r1, [pc, #208]	; (8006274 <HAL_GPIO_Init+0x324>)
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	089b      	lsrs	r3, r3, #2
 80061a6:	3302      	adds	r3, #2
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061ae:	4b3c      	ldr	r3, [pc, #240]	; (80062a0 <HAL_GPIO_Init+0x350>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061d2:	4a33      	ldr	r2, [pc, #204]	; (80062a0 <HAL_GPIO_Init+0x350>)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80061d8:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <HAL_GPIO_Init+0x350>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061fc:	4a28      	ldr	r2, [pc, #160]	; (80062a0 <HAL_GPIO_Init+0x350>)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006202:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <HAL_GPIO_Init+0x350>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	43db      	mvns	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4013      	ands	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006226:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <HAL_GPIO_Init+0x350>)
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800622c:	4b1c      	ldr	r3, [pc, #112]	; (80062a0 <HAL_GPIO_Init+0x350>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	43db      	mvns	r3, r3
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	4013      	ands	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006250:	4a13      	ldr	r2, [pc, #76]	; (80062a0 <HAL_GPIO_Init+0x350>)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3301      	adds	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b0f      	cmp	r3, #15
 8006260:	f67f ae84 	bls.w	8005f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006264:	bf00      	nop
 8006266:	3724      	adds	r7, #36	; 0x24
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	40023800 	.word	0x40023800
 8006274:	40013800 	.word	0x40013800
 8006278:	40020000 	.word	0x40020000
 800627c:	40020400 	.word	0x40020400
 8006280:	40020800 	.word	0x40020800
 8006284:	40020c00 	.word	0x40020c00
 8006288:	40021000 	.word	0x40021000
 800628c:	40021400 	.word	0x40021400
 8006290:	40021800 	.word	0x40021800
 8006294:	40021c00 	.word	0x40021c00
 8006298:	40022000 	.word	0x40022000
 800629c:	40022400 	.word	0x40022400
 80062a0:	40013c00 	.word	0x40013c00

080062a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
 80062c0:	e001      	b.n	80062c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	807b      	strh	r3, [r7, #2]
 80062e0:	4613      	mov	r3, r2
 80062e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062e4:	787b      	ldrb	r3, [r7, #1]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ea:	887a      	ldrh	r2, [r7, #2]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062f0:	e003      	b.n	80062fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062f2:	887b      	ldrh	r3, [r7, #2]
 80062f4:	041a      	lsls	r2, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	619a      	str	r2, [r3, #24]
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006312:	4b08      	ldr	r3, [pc, #32]	; (8006334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	4013      	ands	r3, r2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800631e:	4a05      	ldr	r2, [pc, #20]	; (8006334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	4618      	mov	r0, r3
 8006328:	f7fc fc89 	bl	8002c3e <HAL_GPIO_EXTI_Callback>
  }
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40013c00 	.word	0x40013c00

08006338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e11f      	b.n	800658a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fd fce2 	bl	8003d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2224      	movs	r2, #36	; 0x24
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800638a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800639a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800639c:	f000 fe24 	bl	8006fe8 <HAL_RCC_GetPCLK1Freq>
 80063a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4a7b      	ldr	r2, [pc, #492]	; (8006594 <HAL_I2C_Init+0x25c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d807      	bhi.n	80063bc <HAL_I2C_Init+0x84>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4a7a      	ldr	r2, [pc, #488]	; (8006598 <HAL_I2C_Init+0x260>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	bf94      	ite	ls
 80063b4:	2301      	movls	r3, #1
 80063b6:	2300      	movhi	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e006      	b.n	80063ca <HAL_I2C_Init+0x92>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4a77      	ldr	r2, [pc, #476]	; (800659c <HAL_I2C_Init+0x264>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	bf94      	ite	ls
 80063c4:	2301      	movls	r3, #1
 80063c6:	2300      	movhi	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e0db      	b.n	800658a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4a72      	ldr	r2, [pc, #456]	; (80065a0 <HAL_I2C_Init+0x268>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	0c9b      	lsrs	r3, r3, #18
 80063dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4a64      	ldr	r2, [pc, #400]	; (8006594 <HAL_I2C_Init+0x25c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d802      	bhi.n	800640c <HAL_I2C_Init+0xd4>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	3301      	adds	r3, #1
 800640a:	e009      	b.n	8006420 <HAL_I2C_Init+0xe8>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	4a63      	ldr	r2, [pc, #396]	; (80065a4 <HAL_I2C_Init+0x26c>)
 8006418:	fba2 2303 	umull	r2, r3, r2, r3
 800641c:	099b      	lsrs	r3, r3, #6
 800641e:	3301      	adds	r3, #1
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	430b      	orrs	r3, r1
 8006426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4956      	ldr	r1, [pc, #344]	; (8006594 <HAL_I2C_Init+0x25c>)
 800643c:	428b      	cmp	r3, r1
 800643e:	d80d      	bhi.n	800645c <HAL_I2C_Init+0x124>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	1e59      	subs	r1, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	fbb1 f3f3 	udiv	r3, r1, r3
 800644e:	3301      	adds	r3, #1
 8006450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006454:	2b04      	cmp	r3, #4
 8006456:	bf38      	it	cc
 8006458:	2304      	movcc	r3, #4
 800645a:	e04f      	b.n	80064fc <HAL_I2C_Init+0x1c4>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d111      	bne.n	8006488 <HAL_I2C_Init+0x150>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1e58      	subs	r0, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6859      	ldr	r1, [r3, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	440b      	add	r3, r1
 8006472:	fbb0 f3f3 	udiv	r3, r0, r3
 8006476:	3301      	adds	r3, #1
 8006478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800647c:	2b00      	cmp	r3, #0
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	e012      	b.n	80064ae <HAL_I2C_Init+0x176>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	1e58      	subs	r0, r3, #1
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6859      	ldr	r1, [r3, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	0099      	lsls	r1, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	fbb0 f3f3 	udiv	r3, r0, r3
 800649e:	3301      	adds	r3, #1
 80064a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bf0c      	ite	eq
 80064a8:	2301      	moveq	r3, #1
 80064aa:	2300      	movne	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <HAL_I2C_Init+0x17e>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e022      	b.n	80064fc <HAL_I2C_Init+0x1c4>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10e      	bne.n	80064dc <HAL_I2C_Init+0x1a4>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1e58      	subs	r0, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6859      	ldr	r1, [r3, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	440b      	add	r3, r1
 80064cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80064d0:	3301      	adds	r3, #1
 80064d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064da:	e00f      	b.n	80064fc <HAL_I2C_Init+0x1c4>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	1e58      	subs	r0, r3, #1
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6859      	ldr	r1, [r3, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	0099      	lsls	r1, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80064f2:	3301      	adds	r3, #1
 80064f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	6809      	ldr	r1, [r1, #0]
 8006500:	4313      	orrs	r3, r2
 8006502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69da      	ldr	r2, [r3, #28]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800652a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6911      	ldr	r1, [r2, #16]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68d2      	ldr	r2, [r2, #12]
 8006536:	4311      	orrs	r1, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	430b      	orrs	r3, r1
 800653e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695a      	ldr	r2, [r3, #20]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	000186a0 	.word	0x000186a0
 8006598:	001e847f 	.word	0x001e847f
 800659c:	003d08ff 	.word	0x003d08ff
 80065a0:	431bde83 	.word	0x431bde83
 80065a4:	10624dd3 	.word	0x10624dd3

080065a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	461a      	mov	r2, r3
 80065b4:	460b      	mov	r3, r1
 80065b6:	817b      	strh	r3, [r7, #10]
 80065b8:	4613      	mov	r3, r2
 80065ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065bc:	f7fe fbe8 	bl	8004d90 <HAL_GetTick>
 80065c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	f040 80e0 	bne.w	8006790 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2319      	movs	r3, #25
 80065d6:	2201      	movs	r2, #1
 80065d8:	4970      	ldr	r1, [pc, #448]	; (800679c <HAL_I2C_Master_Transmit+0x1f4>)
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f964 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065e6:	2302      	movs	r3, #2
 80065e8:	e0d3      	b.n	8006792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_I2C_Master_Transmit+0x50>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e0cc      	b.n	8006792 <HAL_I2C_Master_Transmit+0x1ea>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b01      	cmp	r3, #1
 800660c:	d007      	beq.n	800661e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0201 	orr.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800662c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2221      	movs	r2, #33	; 0x21
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2210      	movs	r2, #16
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	893a      	ldrh	r2, [r7, #8]
 800664e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a50      	ldr	r2, [pc, #320]	; (80067a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800665e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006660:	8979      	ldrh	r1, [r7, #10]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f89c 	bl	80067a4 <I2C_MasterRequestWrite>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e08d      	b.n	8006792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006676:	2300      	movs	r3, #0
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800668c:	e066      	b.n	800675c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	6a39      	ldr	r1, [r7, #32]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f9de 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d107      	bne.n	80066b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e06b      	b.n	8006792 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d11b      	bne.n	8006730 <HAL_I2C_Master_Transmit+0x188>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d017      	beq.n	8006730 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	781a      	ldrb	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	6a39      	ldr	r1, [r7, #32]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f9ce 	bl	8006ad6 <I2C_WaitOnBTFFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00d      	beq.n	800675c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	2b04      	cmp	r3, #4
 8006746:	d107      	bne.n	8006758 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006756:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e01a      	b.n	8006792 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006760:	2b00      	cmp	r3, #0
 8006762:	d194      	bne.n	800668e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e000      	b.n	8006792 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006790:	2302      	movs	r3, #2
  }
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	00100002 	.word	0x00100002
 80067a0:	ffff0000 	.word	0xffff0000

080067a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	460b      	mov	r3, r1
 80067b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d006      	beq.n	80067ce <I2C_MasterRequestWrite+0x2a>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d003      	beq.n	80067ce <I2C_MasterRequestWrite+0x2a>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067cc:	d108      	bne.n	80067e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e00b      	b.n	80067f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	2b12      	cmp	r3, #18
 80067e6:	d107      	bne.n	80067f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f84f 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00d      	beq.n	800682c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681e:	d103      	bne.n	8006828 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e035      	b.n	8006898 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006834:	d108      	bne.n	8006848 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006836:	897b      	ldrh	r3, [r7, #10]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006844:	611a      	str	r2, [r3, #16]
 8006846:	e01b      	b.n	8006880 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006848:	897b      	ldrh	r3, [r7, #10]
 800684a:	11db      	asrs	r3, r3, #7
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0306 	and.w	r3, r3, #6
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f063 030f 	orn	r3, r3, #15
 8006858:	b2da      	uxtb	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	490e      	ldr	r1, [pc, #56]	; (80068a0 <I2C_MasterRequestWrite+0xfc>)
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f875 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e010      	b.n	8006898 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006876:	897b      	ldrh	r3, [r7, #10]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	4907      	ldr	r1, [pc, #28]	; (80068a4 <I2C_MasterRequestWrite+0x100>)
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f865 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	00010008 	.word	0x00010008
 80068a4:	00010002 	.word	0x00010002

080068a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068b8:	e025      	b.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d021      	beq.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c2:	f7fe fa65 	bl	8004d90 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d302      	bcc.n	80068d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d116      	bne.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f043 0220 	orr.w	r2, r3, #32
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e023      	b.n	800694e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b01      	cmp	r3, #1
 800690e:	d10d      	bne.n	800692c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	43da      	mvns	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	e00c      	b.n	8006946 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	43da      	mvns	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4013      	ands	r3, r2
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	bf0c      	ite	eq
 800693e:	2301      	moveq	r3, #1
 8006940:	2300      	movne	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	429a      	cmp	r2, r3
 800694a:	d0b6      	beq.n	80068ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006964:	e051      	b.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006974:	d123      	bne.n	80069be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006984:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800698e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f043 0204 	orr.w	r2, r3, #4
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e046      	b.n	8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d021      	beq.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7fe f9e3 	bl	8004d90 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d116      	bne.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f043 0220 	orr.w	r2, r3, #32
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e020      	b.n	8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d10c      	bne.n	8006a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	43da      	mvns	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf14      	ite	ne
 8006a26:	2301      	movne	r3, #1
 8006a28:	2300      	moveq	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	e00b      	b.n	8006a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	43da      	mvns	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bf14      	ite	ne
 8006a40:	2301      	movne	r3, #1
 8006a42:	2300      	moveq	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d18d      	bne.n	8006966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a60:	e02d      	b.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f878 	bl	8006b58 <I2C_IsAcknowledgeFailed>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e02d      	b.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d021      	beq.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fe f989 	bl	8004d90 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d116      	bne.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f043 0220 	orr.w	r2, r3, #32
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e007      	b.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac8:	2b80      	cmp	r3, #128	; 0x80
 8006aca:	d1ca      	bne.n	8006a62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ae2:	e02d      	b.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f837 	bl	8006b58 <I2C_IsAcknowledgeFailed>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e02d      	b.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d021      	beq.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006afc:	f7fe f948 	bl	8004d90 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d302      	bcc.n	8006b12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d116      	bne.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e007      	b.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d1ca      	bne.n	8006ae4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b6e:	d11b      	bne.n	8006ba8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	f043 0204 	orr.w	r2, r3, #4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
	...

08006bb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	4b20      	ldr	r3, [pc, #128]	; (8006c48 <HAL_PWREx_EnableOverDrive+0x90>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <HAL_PWREx_EnableOverDrive+0x90>)
 8006bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bd2:	4b1d      	ldr	r3, [pc, #116]	; (8006c48 <HAL_PWREx_EnableOverDrive+0x90>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006bde:	4b1b      	ldr	r3, [pc, #108]	; (8006c4c <HAL_PWREx_EnableOverDrive+0x94>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006be4:	f7fe f8d4 	bl	8004d90 <HAL_GetTick>
 8006be8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006bea:	e009      	b.n	8006c00 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006bec:	f7fe f8d0 	bl	8004d90 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bfa:	d901      	bls.n	8006c00 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e01f      	b.n	8006c40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c00:	4b13      	ldr	r3, [pc, #76]	; (8006c50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0c:	d1ee      	bne.n	8006bec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006c0e:	4b11      	ldr	r3, [pc, #68]	; (8006c54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c14:	f7fe f8bc 	bl	8004d90 <HAL_GetTick>
 8006c18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c1a:	e009      	b.n	8006c30 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c1c:	f7fe f8b8 	bl	8004d90 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c2a:	d901      	bls.n	8006c30 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e007      	b.n	8006c40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c3c:	d1ee      	bne.n	8006c1c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	420e0040 	.word	0x420e0040
 8006c50:	40007000 	.word	0x40007000
 8006c54:	420e0044 	.word	0x420e0044

08006c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0cc      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c6c:	4b68      	ldr	r3, [pc, #416]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d90c      	bls.n	8006c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7a:	4b65      	ldr	r3, [pc, #404]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b63      	ldr	r3, [pc, #396]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0b8      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cac:	4b59      	ldr	r3, [pc, #356]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	4a58      	ldr	r2, [pc, #352]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc4:	4b53      	ldr	r3, [pc, #332]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4a52      	ldr	r2, [pc, #328]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd0:	4b50      	ldr	r3, [pc, #320]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	494d      	ldr	r1, [pc, #308]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d044      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d107      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf6:	4b47      	ldr	r3, [pc, #284]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d119      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e07f      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d003      	beq.n	8006d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d107      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d16:	4b3f      	ldr	r3, [pc, #252]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e06f      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d26:	4b3b      	ldr	r3, [pc, #236]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e067      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d36:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f023 0203 	bic.w	r2, r3, #3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	4934      	ldr	r1, [pc, #208]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d48:	f7fe f822 	bl	8004d90 <HAL_GetTick>
 8006d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d50:	f7fe f81e 	bl	8004d90 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e04f      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d66:	4b2b      	ldr	r3, [pc, #172]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 020c 	and.w	r2, r3, #12
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d1eb      	bne.n	8006d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d20c      	bcs.n	8006da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d8e:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d001      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e032      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dac:	4b19      	ldr	r3, [pc, #100]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4916      	ldr	r1, [pc, #88]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dca:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	490e      	ldr	r1, [pc, #56]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dde:	f000 f821 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 8006de2:	4601      	mov	r1, r0
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	091b      	lsrs	r3, r3, #4
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <HAL_RCC_ClockConfig+0x1c0>)
 8006df0:	5cd3      	ldrb	r3, [r2, r3]
 8006df2:	fa21 f303 	lsr.w	r3, r1, r3
 8006df6:	4a09      	ldr	r2, [pc, #36]	; (8006e1c <HAL_RCC_ClockConfig+0x1c4>)
 8006df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dfa:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fd ff82 	bl	8004d08 <HAL_InitTick>

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40023c00 	.word	0x40023c00
 8006e14:	40023800 	.word	0x40023800
 8006e18:	08014c94 	.word	0x08014c94
 8006e1c:	20000000 	.word	0x20000000
 8006e20:	20000004 	.word	0x20000004

08006e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	2300      	movs	r3, #0
 8006e34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e3a:	4b63      	ldr	r3, [pc, #396]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 030c 	and.w	r3, r3, #12
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d007      	beq.n	8006e56 <HAL_RCC_GetSysClockFreq+0x32>
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d008      	beq.n	8006e5c <HAL_RCC_GetSysClockFreq+0x38>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 80b4 	bne.w	8006fb8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e50:	4b5e      	ldr	r3, [pc, #376]	; (8006fcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006e52:	60bb      	str	r3, [r7, #8]
       break;
 8006e54:	e0b3      	b.n	8006fbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e56:	4b5d      	ldr	r3, [pc, #372]	; (8006fcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006e58:	60bb      	str	r3, [r7, #8]
      break;
 8006e5a:	e0b0      	b.n	8006fbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e5c:	4b5a      	ldr	r3, [pc, #360]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e66:	4b58      	ldr	r3, [pc, #352]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d04a      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e72:	4b55      	ldr	r3, [pc, #340]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	099b      	lsrs	r3, r3, #6
 8006e78:	f04f 0400 	mov.w	r4, #0
 8006e7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	ea03 0501 	and.w	r5, r3, r1
 8006e88:	ea04 0602 	and.w	r6, r4, r2
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	4632      	mov	r2, r6
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	f04f 0400 	mov.w	r4, #0
 8006e98:	0154      	lsls	r4, r2, #5
 8006e9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e9e:	014b      	lsls	r3, r1, #5
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	1b49      	subs	r1, r1, r5
 8006ea6:	eb62 0206 	sbc.w	r2, r2, r6
 8006eaa:	f04f 0300 	mov.w	r3, #0
 8006eae:	f04f 0400 	mov.w	r4, #0
 8006eb2:	0194      	lsls	r4, r2, #6
 8006eb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006eb8:	018b      	lsls	r3, r1, #6
 8006eba:	1a5b      	subs	r3, r3, r1
 8006ebc:	eb64 0402 	sbc.w	r4, r4, r2
 8006ec0:	f04f 0100 	mov.w	r1, #0
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	00e2      	lsls	r2, r4, #3
 8006eca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006ece:	00d9      	lsls	r1, r3, #3
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	195b      	adds	r3, r3, r5
 8006ed6:	eb44 0406 	adc.w	r4, r4, r6
 8006eda:	f04f 0100 	mov.w	r1, #0
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	02a2      	lsls	r2, r4, #10
 8006ee4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ee8:	0299      	lsls	r1, r3, #10
 8006eea:	460b      	mov	r3, r1
 8006eec:	4614      	mov	r4, r2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f04f 0400 	mov.w	r4, #0
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4623      	mov	r3, r4
 8006efc:	f7f9 fedc 	bl	8000cb8 <__aeabi_uldivmod>
 8006f00:	4603      	mov	r3, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e049      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f08:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	099b      	lsrs	r3, r3, #6
 8006f0e:	f04f 0400 	mov.w	r4, #0
 8006f12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f16:	f04f 0200 	mov.w	r2, #0
 8006f1a:	ea03 0501 	and.w	r5, r3, r1
 8006f1e:	ea04 0602 	and.w	r6, r4, r2
 8006f22:	4629      	mov	r1, r5
 8006f24:	4632      	mov	r2, r6
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	f04f 0400 	mov.w	r4, #0
 8006f2e:	0154      	lsls	r4, r2, #5
 8006f30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f34:	014b      	lsls	r3, r1, #5
 8006f36:	4619      	mov	r1, r3
 8006f38:	4622      	mov	r2, r4
 8006f3a:	1b49      	subs	r1, r1, r5
 8006f3c:	eb62 0206 	sbc.w	r2, r2, r6
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	f04f 0400 	mov.w	r4, #0
 8006f48:	0194      	lsls	r4, r2, #6
 8006f4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f4e:	018b      	lsls	r3, r1, #6
 8006f50:	1a5b      	subs	r3, r3, r1
 8006f52:	eb64 0402 	sbc.w	r4, r4, r2
 8006f56:	f04f 0100 	mov.w	r1, #0
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	00e2      	lsls	r2, r4, #3
 8006f60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f64:	00d9      	lsls	r1, r3, #3
 8006f66:	460b      	mov	r3, r1
 8006f68:	4614      	mov	r4, r2
 8006f6a:	195b      	adds	r3, r3, r5
 8006f6c:	eb44 0406 	adc.w	r4, r4, r6
 8006f70:	f04f 0100 	mov.w	r1, #0
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	02a2      	lsls	r2, r4, #10
 8006f7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006f7e:	0299      	lsls	r1, r3, #10
 8006f80:	460b      	mov	r3, r1
 8006f82:	4614      	mov	r4, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	4621      	mov	r1, r4
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f04f 0400 	mov.w	r4, #0
 8006f8e:	461a      	mov	r2, r3
 8006f90:	4623      	mov	r3, r4
 8006f92:	f7f9 fe91 	bl	8000cb8 <__aeabi_uldivmod>
 8006f96:	4603      	mov	r3, r0
 8006f98:	460c      	mov	r4, r1
 8006f9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb4:	60bb      	str	r3, [r7, #8]
      break;
 8006fb6:	e002      	b.n	8006fbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006fba:	60bb      	str	r3, [r7, #8]
      break;
 8006fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	00f42400 	.word	0x00f42400

08006fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fd4:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000000 	.word	0x20000000

08006fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fec:	f7ff fff0 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8006ff0:	4601      	mov	r1, r0
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	0a9b      	lsrs	r3, r3, #10
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	4a03      	ldr	r2, [pc, #12]	; (800700c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ffe:	5cd3      	ldrb	r3, [r2, r3]
 8007000:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007004:	4618      	mov	r0, r3
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40023800 	.word	0x40023800
 800700c:	08014ca4 	.word	0x08014ca4

08007010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007014:	f7ff ffdc 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8007018:	4601      	mov	r1, r0
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	0b5b      	lsrs	r3, r3, #13
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	4a03      	ldr	r2, [pc, #12]	; (8007034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007026:	5cd3      	ldrb	r3, [r2, r3]
 8007028:	fa21 f303 	lsr.w	r3, r1, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40023800 	.word	0x40023800
 8007034:	08014ca4 	.word	0x08014ca4

08007038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007060:	4b66      	ldr	r3, [pc, #408]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007066:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706e:	4963      	ldr	r1, [pc, #396]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007082:	4b5e      	ldr	r3, [pc, #376]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007088:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	495a      	ldr	r1, [pc, #360]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d105      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d075      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070bc:	4b50      	ldr	r3, [pc, #320]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070c2:	f7fd fe65 	bl	8004d90 <HAL_GetTick>
 80070c6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070c8:	e008      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070ca:	f7fd fe61 	bl	8004d90 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e1dc      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070dc:	4b47      	ldr	r3, [pc, #284]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1f0      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	019a      	lsls	r2, r3, #6
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	071b      	lsls	r3, r3, #28
 8007100:	493e      	ldr	r1, [pc, #248]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007102:	4313      	orrs	r3, r2
 8007104:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01f      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007114:	4b39      	ldr	r3, [pc, #228]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711a:	0f1b      	lsrs	r3, r3, #28
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	019a      	lsls	r2, r3, #6
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	061b      	lsls	r3, r3, #24
 800712e:	431a      	orrs	r2, r3
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	071b      	lsls	r3, r3, #28
 8007134:	4931      	ldr	r1, [pc, #196]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007136:	4313      	orrs	r3, r2
 8007138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800713c:	4b2f      	ldr	r3, [pc, #188]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800713e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007142:	f023 021f 	bic.w	r2, r3, #31
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	3b01      	subs	r3, #1
 800714c:	492b      	ldr	r1, [pc, #172]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00d      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	019a      	lsls	r2, r3, #6
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	061b      	lsls	r3, r3, #24
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	071b      	lsls	r3, r3, #28
 8007174:	4921      	ldr	r1, [pc, #132]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800717c:	4b20      	ldr	r3, [pc, #128]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800717e:	2201      	movs	r2, #1
 8007180:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007182:	f7fd fe05 	bl	8004d90 <HAL_GetTick>
 8007186:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007188:	e008      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800718a:	f7fd fe01 	bl	8004d90 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e17c      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800719c:	4b17      	ldr	r3, [pc, #92]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f0      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d112      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10c      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80ce 	beq.w	800736a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80071d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d6:	f040 80c8 	bne.w	800736a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071da:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071e0:	f7fd fdd6 	bl	8004d90 <HAL_GetTick>
 80071e4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071e6:	e00f      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071e8:	f7fd fdd2 	bl	8004d90 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d908      	bls.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e14d      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80071fa:	bf00      	nop
 80071fc:	40023800 	.word	0x40023800
 8007200:	42470068 	.word	0x42470068
 8007204:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007208:	4ba5      	ldr	r3, [pc, #660]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007214:	d0e8      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d02e      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007222:	4b9f      	ldr	r3, [pc, #636]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	f003 0303 	and.w	r3, r3, #3
 800722e:	3301      	adds	r3, #1
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007234:	4b9a      	ldr	r3, [pc, #616]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723a:	0f1b      	lsrs	r3, r3, #28
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	019a      	lsls	r2, r3, #6
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	3b01      	subs	r3, #1
 800724e:	041b      	lsls	r3, r3, #16
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	061b      	lsls	r3, r3, #24
 8007258:	431a      	orrs	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	071b      	lsls	r3, r3, #28
 800725e:	4990      	ldr	r1, [pc, #576]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007260:	4313      	orrs	r3, r2
 8007262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007266:	4b8e      	ldr	r3, [pc, #568]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800726c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	3b01      	subs	r3, #1
 8007276:	021b      	lsls	r3, r3, #8
 8007278:	4989      	ldr	r1, [pc, #548]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b00      	cmp	r3, #0
 800728a:	d02c      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800728c:	4b84      	ldr	r3, [pc, #528]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007292:	0c1b      	lsrs	r3, r3, #16
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	3301      	adds	r3, #1
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800729e:	4b80      	ldr	r3, [pc, #512]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a4:	0e1b      	lsrs	r3, r3, #24
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	019a      	lsls	r2, r3, #6
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	3b01      	subs	r3, #1
 80072b8:	041b      	lsls	r3, r3, #16
 80072ba:	431a      	orrs	r2, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	061b      	lsls	r3, r3, #24
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	071b      	lsls	r3, r3, #28
 80072c8:	4975      	ldr	r1, [pc, #468]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072d0:	4b73      	ldr	r3, [pc, #460]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	4970      	ldr	r1, [pc, #448]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d024      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80072f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072fa:	d11f      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072fc:	4b68      	ldr	r3, [pc, #416]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007302:	0e1b      	lsrs	r3, r3, #24
 8007304:	f003 030f 	and.w	r3, r3, #15
 8007308:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800730a:	4b65      	ldr	r3, [pc, #404]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800730c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007310:	0f1b      	lsrs	r3, r3, #28
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	019a      	lsls	r2, r3, #6
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	3b01      	subs	r3, #1
 8007326:	041b      	lsls	r3, r3, #16
 8007328:	431a      	orrs	r2, r3
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	061b      	lsls	r3, r3, #24
 800732e:	431a      	orrs	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	071b      	lsls	r3, r3, #28
 8007334:	495a      	ldr	r1, [pc, #360]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800733c:	4b59      	ldr	r3, [pc, #356]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800733e:	2201      	movs	r2, #1
 8007340:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007342:	f7fd fd25 	bl	8004d90 <HAL_GetTick>
 8007346:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007348:	e008      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800734a:	f7fd fd21 	bl	8004d90 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d901      	bls.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e09c      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800735c:	4b50      	ldr	r3, [pc, #320]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007368:	d1ef      	bne.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 8083 	beq.w	800747e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007378:	2300      	movs	r3, #0
 800737a:	60bb      	str	r3, [r7, #8]
 800737c:	4b48      	ldr	r3, [pc, #288]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	4a47      	ldr	r2, [pc, #284]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007386:	6413      	str	r3, [r2, #64]	; 0x40
 8007388:	4b45      	ldr	r3, [pc, #276]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007394:	4b44      	ldr	r3, [pc, #272]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a43      	ldr	r2, [pc, #268]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800739a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800739e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073a0:	f7fd fcf6 	bl	8004d90 <HAL_GetTick>
 80073a4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073a8:	f7fd fcf2 	bl	8004d90 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e06d      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073ba:	4b3b      	ldr	r3, [pc, #236]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ce:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d02f      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d028      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073e4:	4b2e      	ldr	r3, [pc, #184]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ec:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073ee:	4b2f      	ldr	r3, [pc, #188]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073f4:	4b2d      	ldr	r3, [pc, #180]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073fa:	4a29      	ldr	r2, [pc, #164]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007400:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b01      	cmp	r3, #1
 800740a:	d114      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800740c:	f7fd fcc0 	bl	8004d90 <HAL_GetTick>
 8007410:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007412:	e00a      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007414:	f7fd fcbc 	bl	8004d90 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007422:	4293      	cmp	r3, r2
 8007424:	d901      	bls.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e035      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800742a:	4b1d      	ldr	r3, [pc, #116]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0ee      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800743e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007442:	d10d      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007444:	4b16      	ldr	r3, [pc, #88]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007458:	4911      	ldr	r1, [pc, #68]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800745a:	4313      	orrs	r3, r2
 800745c:	608b      	str	r3, [r1, #8]
 800745e:	e005      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007460:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	4a0e      	ldr	r2, [pc, #56]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007466:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800746a:	6093      	str	r3, [r2, #8]
 800746c:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800746e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007478:	4909      	ldr	r1, [pc, #36]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800747a:	4313      	orrs	r3, r2
 800747c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2b00      	cmp	r3, #0
 8007488:	d004      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8007492:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	40023800 	.word	0x40023800
 80074a4:	42470070 	.word	0x42470070
 80074a8:	40007000 	.word	0x40007000
 80074ac:	42470e40 	.word	0x42470e40
 80074b0:	424711e0 	.word	0x424711e0

080074b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d075      	beq.n	80075b8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80074cc:	4ba2      	ldr	r3, [pc, #648]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d00c      	beq.n	80074f2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074d8:	4b9f      	ldr	r3, [pc, #636]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d112      	bne.n	800750a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074e4:	4b9c      	ldr	r3, [pc, #624]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f0:	d10b      	bne.n	800750a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f2:	4b99      	ldr	r3, [pc, #612]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d05b      	beq.n	80075b6 <HAL_RCC_OscConfig+0x102>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d157      	bne.n	80075b6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e20b      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007512:	d106      	bne.n	8007522 <HAL_RCC_OscConfig+0x6e>
 8007514:	4b90      	ldr	r3, [pc, #576]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a8f      	ldr	r2, [pc, #572]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800751a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e01d      	b.n	800755e <HAL_RCC_OscConfig+0xaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800752a:	d10c      	bne.n	8007546 <HAL_RCC_OscConfig+0x92>
 800752c:	4b8a      	ldr	r3, [pc, #552]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a89      	ldr	r2, [pc, #548]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	4b87      	ldr	r3, [pc, #540]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a86      	ldr	r2, [pc, #536]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800753e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	e00b      	b.n	800755e <HAL_RCC_OscConfig+0xaa>
 8007546:	4b84      	ldr	r3, [pc, #528]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a83      	ldr	r2, [pc, #524]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800754c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	4b81      	ldr	r3, [pc, #516]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a80      	ldr	r2, [pc, #512]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800755c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d013      	beq.n	800758e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007566:	f7fd fc13 	bl	8004d90 <HAL_GetTick>
 800756a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800756c:	e008      	b.n	8007580 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800756e:	f7fd fc0f 	bl	8004d90 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b64      	cmp	r3, #100	; 0x64
 800757a:	d901      	bls.n	8007580 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e1d0      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007580:	4b75      	ldr	r3, [pc, #468]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0f0      	beq.n	800756e <HAL_RCC_OscConfig+0xba>
 800758c:	e014      	b.n	80075b8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758e:	f7fd fbff 	bl	8004d90 <HAL_GetTick>
 8007592:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007596:	f7fd fbfb 	bl	8004d90 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b64      	cmp	r3, #100	; 0x64
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e1bc      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075a8:	4b6b      	ldr	r3, [pc, #428]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <HAL_RCC_OscConfig+0xe2>
 80075b4:	e000      	b.n	80075b8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d063      	beq.n	800768c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80075c4:	4b64      	ldr	r3, [pc, #400]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 030c 	and.w	r3, r3, #12
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075d0:	4b61      	ldr	r3, [pc, #388]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d11c      	bne.n	8007616 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075dc:	4b5e      	ldr	r3, [pc, #376]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d116      	bne.n	8007616 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075e8:	4b5b      	ldr	r3, [pc, #364]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_OscConfig+0x14c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e190      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007600:	4b55      	ldr	r3, [pc, #340]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	4952      	ldr	r1, [pc, #328]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007610:	4313      	orrs	r3, r2
 8007612:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007614:	e03a      	b.n	800768c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d020      	beq.n	8007660 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800761e:	4b4f      	ldr	r3, [pc, #316]	; (800775c <HAL_RCC_OscConfig+0x2a8>)
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007624:	f7fd fbb4 	bl	8004d90 <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800762c:	f7fd fbb0 	bl	8004d90 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e171      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763e:	4b46      	ldr	r3, [pc, #280]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f0      	beq.n	800762c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800764a:	4b43      	ldr	r3, [pc, #268]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	493f      	ldr	r1, [pc, #252]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800765a:	4313      	orrs	r3, r2
 800765c:	600b      	str	r3, [r1, #0]
 800765e:	e015      	b.n	800768c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007660:	4b3e      	ldr	r3, [pc, #248]	; (800775c <HAL_RCC_OscConfig+0x2a8>)
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007666:	f7fd fb93 	bl	8004d90 <HAL_GetTick>
 800766a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800766c:	e008      	b.n	8007680 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800766e:	f7fd fb8f 	bl	8004d90 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e150      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007680:	4b35      	ldr	r3, [pc, #212]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f0      	bne.n	800766e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d030      	beq.n	80076fa <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d016      	beq.n	80076ce <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076a0:	4b2f      	ldr	r3, [pc, #188]	; (8007760 <HAL_RCC_OscConfig+0x2ac>)
 80076a2:	2201      	movs	r2, #1
 80076a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a6:	f7fd fb73 	bl	8004d90 <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ac:	e008      	b.n	80076c0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ae:	f7fd fb6f 	bl	8004d90 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e130      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076c0:	4b25      	ldr	r3, [pc, #148]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80076c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0f0      	beq.n	80076ae <HAL_RCC_OscConfig+0x1fa>
 80076cc:	e015      	b.n	80076fa <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076ce:	4b24      	ldr	r3, [pc, #144]	; (8007760 <HAL_RCC_OscConfig+0x2ac>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d4:	f7fd fb5c 	bl	8004d90 <HAL_GetTick>
 80076d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076dc:	f7fd fb58 	bl	8004d90 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e119      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ee:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80076f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1f0      	bne.n	80076dc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 809f 	beq.w	8007846 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007708:	2300      	movs	r3, #0
 800770a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800770c:	4b12      	ldr	r3, [pc, #72]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800770e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10f      	bne.n	8007738 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800771e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007720:	4a0d      	ldr	r2, [pc, #52]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 8007722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007726:	6413      	str	r3, [r2, #64]	; 0x40
 8007728:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007734:	2301      	movs	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <HAL_RCC_OscConfig+0x2b0>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007740:	2b00      	cmp	r3, #0
 8007742:	d120      	bne.n	8007786 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007744:	4b07      	ldr	r3, [pc, #28]	; (8007764 <HAL_RCC_OscConfig+0x2b0>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a06      	ldr	r2, [pc, #24]	; (8007764 <HAL_RCC_OscConfig+0x2b0>)
 800774a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800774e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007750:	f7fd fb1e 	bl	8004d90 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007756:	e010      	b.n	800777a <HAL_RCC_OscConfig+0x2c6>
 8007758:	40023800 	.word	0x40023800
 800775c:	42470000 	.word	0x42470000
 8007760:	42470e80 	.word	0x42470e80
 8007764:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007768:	f7fd fb12 	bl	8004d90 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e0d3      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800777a:	4b6c      	ldr	r3, [pc, #432]	; (800792c <HAL_RCC_OscConfig+0x478>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f0      	beq.n	8007768 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d106      	bne.n	800779c <HAL_RCC_OscConfig+0x2e8>
 800778e:	4b68      	ldr	r3, [pc, #416]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	4a67      	ldr	r2, [pc, #412]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	6713      	str	r3, [r2, #112]	; 0x70
 800779a:	e01c      	b.n	80077d6 <HAL_RCC_OscConfig+0x322>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	d10c      	bne.n	80077be <HAL_RCC_OscConfig+0x30a>
 80077a4:	4b62      	ldr	r3, [pc, #392]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80077a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a8:	4a61      	ldr	r2, [pc, #388]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80077aa:	f043 0304 	orr.w	r3, r3, #4
 80077ae:	6713      	str	r3, [r2, #112]	; 0x70
 80077b0:	4b5f      	ldr	r3, [pc, #380]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80077b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b4:	4a5e      	ldr	r2, [pc, #376]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	6713      	str	r3, [r2, #112]	; 0x70
 80077bc:	e00b      	b.n	80077d6 <HAL_RCC_OscConfig+0x322>
 80077be:	4b5c      	ldr	r3, [pc, #368]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	4a5b      	ldr	r2, [pc, #364]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	6713      	str	r3, [r2, #112]	; 0x70
 80077ca:	4b59      	ldr	r3, [pc, #356]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	4a58      	ldr	r2, [pc, #352]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80077d0:	f023 0304 	bic.w	r3, r3, #4
 80077d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d015      	beq.n	800780a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077de:	f7fd fad7 	bl	8004d90 <HAL_GetTick>
 80077e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e4:	e00a      	b.n	80077fc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077e6:	f7fd fad3 	bl	8004d90 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e092      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077fc:	4b4c      	ldr	r3, [pc, #304]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0ee      	beq.n	80077e6 <HAL_RCC_OscConfig+0x332>
 8007808:	e014      	b.n	8007834 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800780a:	f7fd fac1 	bl	8004d90 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007810:	e00a      	b.n	8007828 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007812:	f7fd fabd 	bl	8004d90 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007820:	4293      	cmp	r3, r2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e07c      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007828:	4b41      	ldr	r3, [pc, #260]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 800782a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1ee      	bne.n	8007812 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d105      	bne.n	8007846 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800783a:	4b3d      	ldr	r3, [pc, #244]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	4a3c      	ldr	r2, [pc, #240]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 8007840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007844:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d068      	beq.n	8007920 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800784e:	4b38      	ldr	r3, [pc, #224]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 030c 	and.w	r3, r3, #12
 8007856:	2b08      	cmp	r3, #8
 8007858:	d060      	beq.n	800791c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d145      	bne.n	80078ee <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007862:	4b34      	ldr	r3, [pc, #208]	; (8007934 <HAL_RCC_OscConfig+0x480>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007868:	f7fd fa92 	bl	8004d90 <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007870:	f7fd fa8e 	bl	8004d90 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e04f      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007882:	4b2b      	ldr	r3, [pc, #172]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1f0      	bne.n	8007870 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	69da      	ldr	r2, [r3, #28]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a4:	085b      	lsrs	r3, r3, #1
 80078a6:	3b01      	subs	r3, #1
 80078a8:	041b      	lsls	r3, r3, #16
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	061b      	lsls	r3, r3, #24
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	071b      	lsls	r3, r3, #28
 80078ba:	491d      	ldr	r1, [pc, #116]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078c0:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <HAL_RCC_OscConfig+0x480>)
 80078c2:	2201      	movs	r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c6:	f7fd fa63 	bl	8004d90 <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078cc:	e008      	b.n	80078e0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ce:	f7fd fa5f 	bl	8004d90 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e020      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078e0:	4b13      	ldr	r3, [pc, #76]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0f0      	beq.n	80078ce <HAL_RCC_OscConfig+0x41a>
 80078ec:	e018      	b.n	8007920 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ee:	4b11      	ldr	r3, [pc, #68]	; (8007934 <HAL_RCC_OscConfig+0x480>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f4:	f7fd fa4c 	bl	8004d90 <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078fc:	f7fd fa48 	bl	8004d90 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e009      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800790e:	4b08      	ldr	r3, [pc, #32]	; (8007930 <HAL_RCC_OscConfig+0x47c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1f0      	bne.n	80078fc <HAL_RCC_OscConfig+0x448>
 800791a:	e001      	b.n	8007920 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e000      	b.n	8007922 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	40007000 	.word	0x40007000
 8007930:	40023800 	.word	0x40023800
 8007934:	42470060 	.word	0x42470060

08007938 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e022      	b.n	8007990 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d105      	bne.n	8007962 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7fc fa5f 	bl	8003e20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2203      	movs	r2, #3
 8007966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f814 	bl	8007998 <HAL_SD_InitCard>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e00a      	b.n	8007990 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007998:	b5b0      	push	{r4, r5, r7, lr}
 800799a:	b08e      	sub	sp, #56	; 0x38
 800799c:	af04      	add	r7, sp, #16
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80079b4:	2376      	movs	r3, #118	; 0x76
 80079b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681d      	ldr	r5, [r3, #0]
 80079bc:	466c      	mov	r4, sp
 80079be:	f107 0314 	add.w	r3, r7, #20
 80079c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079ca:	f107 0308 	add.w	r3, r7, #8
 80079ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079d0:	4628      	mov	r0, r5
 80079d2:	f003 fa87 	bl	800aee4 <SDIO_Init>
 80079d6:	4603      	mov	r3, r0
 80079d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80079dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e031      	b.n	8007a4c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80079e8:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <HAL_SD_InitCard+0xbc>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f003 fabf 	bl	800af76 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80079f8:	4b16      	ldr	r3, [pc, #88]	; (8007a54 <HAL_SD_InitCard+0xbc>)
 80079fa:	2201      	movs	r2, #1
 80079fc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 ffc6 	bl	8008990 <SD_PowerON>
 8007a04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e013      	b.n	8007a4c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fee5 	bl	80087f4 <SD_InitCard>
 8007a2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3728      	adds	r7, #40	; 0x28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bdb0      	pop	{r4, r5, r7, pc}
 8007a54:	422580a0 	.word	0x422580a0

08007a58 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08c      	sub	sp, #48	; 0x30
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d107      	bne.n	8007a80 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e0c7      	b.n	8007c10 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	f040 80c0 	bne.w	8007c0e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	441a      	add	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d907      	bls.n	8007ab2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e0ae      	b.n	8007c10 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007ad0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	4a50      	ldr	r2, [pc, #320]	; (8007c18 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007ad8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	4a4f      	ldr	r2, [pc, #316]	; (8007c1c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8007ae0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3380      	adds	r3, #128	; 0x80
 8007af4:	4619      	mov	r1, r3
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	025b      	lsls	r3, r3, #9
 8007afc:	089b      	lsrs	r3, r3, #2
 8007afe:	f7fd ff39 	bl	8005974 <HAL_DMA_Start_IT>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d017      	beq.n	8007b38 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007b16:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a40      	ldr	r2, [pc, #256]	; (8007c20 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007b1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e06b      	b.n	8007c10 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007b38:	4b3a      	ldr	r3, [pc, #232]	; (8007c24 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d002      	beq.n	8007b4c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	025b      	lsls	r3, r3, #9
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b54:	4618      	mov	r0, r3
 8007b56:	f003 faa1 	bl	800b09c <SDMMC_CmdBlockLength>
 8007b5a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00f      	beq.n	8007b82 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a2e      	ldr	r2, [pc, #184]	; (8007c20 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	431a      	orrs	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e046      	b.n	8007c10 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b82:	f04f 33ff 	mov.w	r3, #4294967295
 8007b86:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	025b      	lsls	r3, r3, #9
 8007b8c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007b8e:	2390      	movs	r3, #144	; 0x90
 8007b90:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007b92:	2302      	movs	r3, #2
 8007b94:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f107 0210 	add.w	r2, r7, #16
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f003 fa4b 	bl	800b044 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d90a      	bls.n	8007bca <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2282      	movs	r2, #130	; 0x82
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f003 faaf 	bl	800b124 <SDMMC_CmdReadMultiBlock>
 8007bc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007bc8:	e009      	b.n	8007bde <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2281      	movs	r2, #129	; 0x81
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f003 fa82 	bl	800b0e0 <SDMMC_CmdReadSingleBlock>
 8007bdc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d012      	beq.n	8007c0a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a0d      	ldr	r2, [pc, #52]	; (8007c20 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e002      	b.n	8007c10 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e000      	b.n	8007c10 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007c0e:	2302      	movs	r3, #2
  }
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3730      	adds	r7, #48	; 0x30
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	08008603 	.word	0x08008603
 8007c1c:	08008675 	.word	0x08008675
 8007c20:	004005ff 	.word	0x004005ff
 8007c24:	4225858c 	.word	0x4225858c

08007c28 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08c      	sub	sp, #48	; 0x30
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e0ca      	b.n	8007de6 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	f040 80c3 	bne.w	8007de4 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	441a      	add	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d907      	bls.n	8007c82 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e0b1      	b.n	8007de6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2203      	movs	r2, #3
 8007c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 021a 	orr.w	r2, r2, #26
 8007ca0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca6:	4a52      	ldr	r2, [pc, #328]	; (8007df0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	4a51      	ldr	r2, [pc, #324]	; (8007df4 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8007cb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d002      	beq.n	8007cc8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	025b      	lsls	r3, r3, #9
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f003 f9e3 	bl	800b09c <SDMMC_CmdBlockLength>
 8007cd6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00f      	beq.n	8007cfe <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a45      	ldr	r2, [pc, #276]	; (8007df8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007ce4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e073      	b.n	8007de6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d90a      	bls.n	8007d1a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	22a0      	movs	r2, #160	; 0xa0
 8007d08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d10:	4618      	mov	r0, r3
 8007d12:	f003 fa4b 	bl	800b1ac <SDMMC_CmdWriteMultiBlock>
 8007d16:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d18:	e009      	b.n	8007d2e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2290      	movs	r2, #144	; 0x90
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d26:	4618      	mov	r0, r3
 8007d28:	f003 fa1e 	bl	800b168 <SDMMC_CmdWriteSingleBlock>
 8007d2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d012      	beq.n	8007d5a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a2f      	ldr	r2, [pc, #188]	; (8007df8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	431a      	orrs	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e045      	b.n	8007de6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007d5a:	4b28      	ldr	r3, [pc, #160]	; (8007dfc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3380      	adds	r3, #128	; 0x80
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	025b      	lsls	r3, r3, #9
 8007d72:	089b      	lsrs	r3, r3, #2
 8007d74:	f7fd fdfe 	bl	8005974 <HAL_DMA_Start_IT>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01a      	beq.n	8007db4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 021a 	bic.w	r2, r2, #26
 8007d8c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007d94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e018      	b.n	8007de6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007db4:	f04f 33ff 	mov.w	r3, #4294967295
 8007db8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	025b      	lsls	r3, r3, #9
 8007dbe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007dc0:	2390      	movs	r3, #144	; 0x90
 8007dc2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f107 0210 	add.w	r2, r7, #16
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f003 f932 	bl	800b044 <SDIO_ConfigData>

      return HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e000      	b.n	8007de6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8007de4:	2302      	movs	r3, #2
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3730      	adds	r7, #48	; 0x30
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	080085d9 	.word	0x080085d9
 8007df4:	08008675 	.word	0x08008675
 8007df8:	004005ff 	.word	0x004005ff
 8007dfc:	4225858c 	.word	0x4225858c

08007e00 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d008      	beq.n	8007e2e <HAL_SD_IRQHandler+0x2e>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 0308 	and.w	r3, r3, #8
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 ffc8 	bl	8008dbc <SD_Read_IT>
 8007e2c:	e155      	b.n	80080da <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 808f 	beq.w	8007f5c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	6812      	ldr	r2, [r2, #0]
 8007e52:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007e56:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007e5a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f003 0308 	and.w	r3, r3, #8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d039      	beq.n	8007eea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <HAL_SD_IRQHandler+0x8a>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f003 0320 	and.w	r3, r3, #32
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d011      	beq.n	8007eae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f003 f9ae 	bl	800b1f0 <SDMMC_CmdStopTransfer>
 8007e94:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f91f 	bl	80080ec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f240 523a 	movw	r2, #1338	; 0x53a
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <HAL_SD_IRQHandler+0xda>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f003 fe0c 	bl	800baf8 <HAL_SD_RxCpltCallback>
 8007ee0:	e0fb      	b.n	80080da <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f003 fdfe 	bl	800bae4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ee8:	e0f7      	b.n	80080da <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80f2 	beq.w	80080da <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d011      	beq.n	8007f24 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f003 f973 	bl	800b1f0 <SDMMC_CmdStopTransfer>
 8007f0a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d008      	beq.n	8007f24 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f8e4 	bl	80080ec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f040 80d5 	bne.w	80080da <HAL_SD_IRQHandler+0x2da>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f040 80cf 	bne.w	80080da <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0208 	bic.w	r2, r2, #8
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f003 fdc5 	bl	800bae4 <HAL_SD_TxCpltCallback>
}
 8007f5a:	e0be      	b.n	80080da <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <HAL_SD_IRQHandler+0x17c>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 ff72 	bl	8008e5e <SD_Write_IT>
 8007f7a:	e0ae      	b.n	80080da <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f82:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80a7 	beq.w	80080da <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	f043 0202 	orr.w	r2, r3, #2
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb8:	f043 0208 	orr.w	r2, r3, #8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc6:	f003 0320 	and.w	r3, r3, #32
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	f043 0220 	orr.w	r2, r3, #32
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	f043 0210 	orr.w	r2, r3, #16
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f240 523a 	movw	r2, #1338	; 0x53a
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800800c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f003 f8ec 	bl	800b1f0 <SDMMC_CmdStopTransfer>
 8008018:	4602      	mov	r2, r0
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f855 	bl	80080ec <HAL_SD_ErrorCallback>
}
 8008042:	e04a      	b.n	80080da <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804a:	2b00      	cmp	r3, #0
 800804c:	d045      	beq.n	80080da <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <HAL_SD_IRQHandler+0x262>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d011      	beq.n	8008086 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	4a1f      	ldr	r2, [pc, #124]	; (80080e4 <HAL_SD_IRQHandler+0x2e4>)
 8008068:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806e:	4618      	mov	r0, r3
 8008070:	f7fd fcd8 	bl	8005a24 <HAL_DMA_Abort_IT>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d02f      	beq.n	80080da <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fb4a 	bl	8008718 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008084:	e029      	b.n	80080da <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d104      	bne.n	800809a <HAL_SD_IRQHandler+0x29a>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d011      	beq.n	80080be <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	4a12      	ldr	r2, [pc, #72]	; (80080e8 <HAL_SD_IRQHandler+0x2e8>)
 80080a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fd fcbc 	bl	8005a24 <HAL_DMA_Abort_IT>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d013      	beq.n	80080da <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fb65 	bl	8008786 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80080bc:	e00d      	b.n	80080da <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f003 fcfc 	bl	800bad0 <HAL_SD_AbortCallback>
}
 80080d8:	e7ff      	b.n	80080da <HAL_SD_IRQHandler+0x2da>
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	08008719 	.word	0x08008719
 80080e8:	08008787 	.word	0x08008787

080080ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800810e:	0f9b      	lsrs	r3, r3, #30
 8008110:	b2da      	uxtb	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811a:	0e9b      	lsrs	r3, r3, #26
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 030f 	and.w	r3, r3, #15
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812c:	0e1b      	lsrs	r3, r3, #24
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	b2da      	uxtb	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800813e:	0c1b      	lsrs	r3, r3, #16
 8008140:	b2da      	uxtb	r2, r3
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800814a:	0a1b      	lsrs	r3, r3, #8
 800814c:	b2da      	uxtb	r2, r3
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008160:	0d1b      	lsrs	r3, r3, #20
 8008162:	b29a      	uxth	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800816c:	0c1b      	lsrs	r3, r3, #16
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	b2da      	uxtb	r2, r3
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800817e:	0bdb      	lsrs	r3, r3, #15
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008190:	0b9b      	lsrs	r3, r3, #14
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	b2da      	uxtb	r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081a2:	0b5b      	lsrs	r3, r3, #13
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081b4:	0b1b      	lsrs	r3, r3, #12
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2200      	movs	r2, #0
 80081c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d163      	bne.n	8008298 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d4:	009a      	lsls	r2, r3, #2
 80081d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80081da:	4013      	ands	r3, r2
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80081e0:	0f92      	lsrs	r2, r2, #30
 80081e2:	431a      	orrs	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ec:	0edb      	lsrs	r3, r3, #27
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081fe:	0e1b      	lsrs	r3, r3, #24
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	b2da      	uxtb	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008210:	0d5b      	lsrs	r3, r3, #21
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0307 	and.w	r3, r3, #7
 8008218:	b2da      	uxtb	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008222:	0c9b      	lsrs	r3, r3, #18
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	b2da      	uxtb	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008234:	0bdb      	lsrs	r3, r3, #15
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	b2da      	uxtb	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	7e1b      	ldrb	r3, [r3, #24]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	3302      	adds	r3, #2
 8008258:	2201      	movs	r2, #1
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008262:	fb02 f203 	mul.w	r2, r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	7a1b      	ldrb	r3, [r3, #8]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	f003 030f 	and.w	r3, r3, #15
 8008274:	2201      	movs	r2, #1
 8008276:	409a      	lsls	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008284:	0a52      	lsrs	r2, r2, #9
 8008286:	fb02 f203 	mul.w	r2, r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008294:	661a      	str	r2, [r3, #96]	; 0x60
 8008296:	e031      	b.n	80082fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829c:	2b01      	cmp	r3, #1
 800829e:	d11d      	bne.n	80082dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082a4:	041b      	lsls	r3, r3, #16
 80082a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ae:	0c1b      	lsrs	r3, r3, #16
 80082b0:	431a      	orrs	r2, r3
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	3301      	adds	r3, #1
 80082bc:	029a      	lsls	r2, r3, #10
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	661a      	str	r2, [r3, #96]	; 0x60
 80082da:	e00f      	b.n	80082fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a58      	ldr	r2, [pc, #352]	; (8008444 <HAL_SD_GetCardCSD+0x344>)
 80082e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e09d      	b.n	8008438 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008300:	0b9b      	lsrs	r3, r3, #14
 8008302:	b2db      	uxtb	r3, r3
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	b2da      	uxtb	r2, r3
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008312:	09db      	lsrs	r3, r3, #7
 8008314:	b2db      	uxtb	r3, r3
 8008316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831a:	b2da      	uxtb	r2, r3
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008324:	b2db      	uxtb	r3, r3
 8008326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832a:	b2da      	uxtb	r2, r3
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008334:	0fdb      	lsrs	r3, r3, #31
 8008336:	b2da      	uxtb	r2, r3
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008340:	0f5b      	lsrs	r3, r3, #29
 8008342:	b2db      	uxtb	r3, r3
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	b2da      	uxtb	r2, r3
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	0e9b      	lsrs	r3, r3, #26
 8008354:	b2db      	uxtb	r3, r3
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	b2da      	uxtb	r2, r3
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008364:	0d9b      	lsrs	r3, r3, #22
 8008366:	b2db      	uxtb	r3, r3
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	b2da      	uxtb	r2, r3
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008376:	0d5b      	lsrs	r3, r3, #21
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	b2da      	uxtb	r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008392:	0c1b      	lsrs	r3, r3, #16
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	b2da      	uxtb	r2, r3
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	0bdb      	lsrs	r3, r3, #15
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ba:	0b9b      	lsrs	r3, r3, #14
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	0b5b      	lsrs	r3, r3, #13
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	0b1b      	lsrs	r3, r3, #12
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f6:	0a9b      	lsrs	r3, r3, #10
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840a:	0a1b      	lsrs	r3, r3, #8
 800840c:	b2db      	uxtb	r3, r3
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	b2da      	uxtb	r2, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	085b      	lsrs	r3, r3, #1
 8008420:	b2db      	uxtb	r3, r3
 8008422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008426:	b2da      	uxtb	r2, r3
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	004005ff 	.word	0x004005ff

08008448 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80084a0:	b5b0      	push	{r4, r5, r7, lr}
 80084a2:	b08e      	sub	sp, #56	; 0x38
 80084a4:	af04      	add	r7, sp, #16
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2203      	movs	r2, #3
 80084ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d02e      	beq.n	8008518 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c0:	d106      	bne.n	80084d0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	639a      	str	r2, [r3, #56]	; 0x38
 80084ce:	e029      	b.n	8008524 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d6:	d10a      	bne.n	80084ee <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fb0f 	bl	8008afc <SD_WideBus_Enable>
 80084de:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	431a      	orrs	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	639a      	str	r2, [r3, #56]	; 0x38
 80084ec:	e01a      	b.n	8008524 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb4c 	bl	8008b92 <SD_WideBus_Disable>
 80084fa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	639a      	str	r2, [r3, #56]	; 0x38
 8008508:	e00c      	b.n	8008524 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	639a      	str	r2, [r3, #56]	; 0x38
 8008516:	e005      	b.n	8008524 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	2b00      	cmp	r3, #0
 800852a:	d009      	beq.n	8008540 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a18      	ldr	r2, [pc, #96]	; (8008594 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008532:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e024      	b.n	800858a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681d      	ldr	r5, [r3, #0]
 8008566:	466c      	mov	r4, sp
 8008568:	f107 0318 	add.w	r3, r7, #24
 800856c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008574:	f107 030c 	add.w	r3, r7, #12
 8008578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800857a:	4628      	mov	r0, r5
 800857c:	f002 fcb2 	bl	800aee4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3728      	adds	r7, #40	; 0x28
 800858e:	46bd      	mov	sp, r7
 8008590:	bdb0      	pop	{r4, r5, r7, pc}
 8008592:	bf00      	nop
 8008594:	004005ff 	.word	0x004005ff

08008598 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80085a4:	f107 030c 	add.w	r3, r7, #12
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa7e 	bl	8008aac <SD_SendStatus>
 80085b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	431a      	orrs	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	0a5b      	lsrs	r3, r3, #9
 80085c8:	f003 030f 	and.w	r3, r3, #15
 80085cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80085ce:	693b      	ldr	r3, [r7, #16]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	2b82      	cmp	r3, #130	; 0x82
 8008616:	d111      	bne.n	800863c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4618      	mov	r0, r3
 800861e:	f002 fde7 	bl	800b1f0 <SDMMC_CmdStopTransfer>
 8008622:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d008      	beq.n	800863c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	431a      	orrs	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7ff fd58 	bl	80080ec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0208 	bic.w	r2, r2, #8
 800864a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f240 523a 	movw	r2, #1338	; 0x53a
 8008654:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f003 fa47 	bl	800baf8 <HAL_SD_RxCpltCallback>
#endif
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008680:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7fd fb7a 	bl	8005d7c <HAL_DMA_GetError>
 8008688:	4603      	mov	r3, r0
 800868a:	2b02      	cmp	r3, #2
 800868c:	d03e      	beq.n	800870c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008694:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d002      	beq.n	80086aa <SD_DMAError+0x36>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d12d      	bne.n	8008706 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a19      	ldr	r2, [pc, #100]	; (8008714 <SD_DMAError+0xa0>)
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80086c0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80086ce:	6978      	ldr	r0, [r7, #20]
 80086d0:	f7ff ff62 	bl	8008598 <HAL_SD_GetCardState>
 80086d4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2b06      	cmp	r3, #6
 80086da:	d002      	beq.n	80086e2 <SD_DMAError+0x6e>
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d10a      	bne.n	80086f8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f002 fd82 	bl	800b1f0 <SDMMC_CmdStopTransfer>
 80086ec:	4602      	mov	r2, r0
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	431a      	orrs	r2, r3
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2200      	movs	r2, #0
 8008704:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008706:	6978      	ldr	r0, [r7, #20]
 8008708:	f7ff fcf0 	bl	80080ec <HAL_SD_ErrorCallback>
#endif
  }
}
 800870c:	bf00      	nop
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	004005ff 	.word	0x004005ff

08008718 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f240 523a 	movw	r2, #1338	; 0x53a
 800872e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff ff31 	bl	8008598 <HAL_SD_GetCardState>
 8008736:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b06      	cmp	r3, #6
 800874a:	d002      	beq.n	8008752 <SD_DMATxAbort+0x3a>
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b05      	cmp	r3, #5
 8008750:	d10a      	bne.n	8008768 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4618      	mov	r0, r3
 8008758:	f002 fd4a 	bl	800b1f0 <SDMMC_CmdStopTransfer>
 800875c:	4602      	mov	r2, r0
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008762:	431a      	orrs	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	2b00      	cmp	r3, #0
 800876e:	d103      	bne.n	8008778 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f003 f9ad 	bl	800bad0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008776:	e002      	b.n	800877e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f7ff fcb7 	bl	80080ec <HAL_SD_ErrorCallback>
}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f240 523a 	movw	r2, #1338	; 0x53a
 800879c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f7ff fefa 	bl	8008598 <HAL_SD_GetCardState>
 80087a4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b06      	cmp	r3, #6
 80087b8:	d002      	beq.n	80087c0 <SD_DMARxAbort+0x3a>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b05      	cmp	r3, #5
 80087be:	d10a      	bne.n	80087d6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f002 fd13 	bl	800b1f0 <SDMMC_CmdStopTransfer>
 80087ca:	4602      	mov	r2, r0
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	431a      	orrs	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d103      	bne.n	80087e6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f003 f976 	bl	800bad0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80087e4:	e002      	b.n	80087ec <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f7ff fc80 	bl	80080ec <HAL_SD_ErrorCallback>
}
 80087ec:	bf00      	nop
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087f4:	b5b0      	push	{r4, r5, r7, lr}
 80087f6:	b094      	sub	sp, #80	; 0x50
 80087f8:	af04      	add	r7, sp, #16
 80087fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80087fc:	2301      	movs	r3, #1
 80087fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4618      	mov	r0, r3
 8008806:	f002 fbc5 	bl	800af94 <SDIO_GetPowerState>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008810:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008814:	e0b7      	b.n	8008986 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881a:	2b03      	cmp	r3, #3
 800881c:	d02f      	beq.n	800887e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4618      	mov	r0, r3
 8008824:	f002 fdee 	bl	800b404 <SDMMC_CmdSendCID>
 8008828:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800882a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <SD_InitCard+0x40>
    {
      return errorstate;
 8008830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008832:	e0a8      	b.n	8008986 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2100      	movs	r1, #0
 800883a:	4618      	mov	r0, r3
 800883c:	f002 fbef 	bl	800b01e <SDIO_GetResponse>
 8008840:	4602      	mov	r2, r0
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2104      	movs	r1, #4
 800884c:	4618      	mov	r0, r3
 800884e:	f002 fbe6 	bl	800b01e <SDIO_GetResponse>
 8008852:	4602      	mov	r2, r0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2108      	movs	r1, #8
 800885e:	4618      	mov	r0, r3
 8008860:	f002 fbdd 	bl	800b01e <SDIO_GetResponse>
 8008864:	4602      	mov	r2, r0
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	210c      	movs	r1, #12
 8008870:	4618      	mov	r0, r3
 8008872:	f002 fbd4 	bl	800b01e <SDIO_GetResponse>
 8008876:	4602      	mov	r2, r0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008882:	2b03      	cmp	r3, #3
 8008884:	d00d      	beq.n	80088a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f107 020e 	add.w	r2, r7, #14
 800888e:	4611      	mov	r1, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f002 fdf4 	bl	800b47e <SDMMC_CmdSetRelAdd>
 8008896:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800889e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a0:	e071      	b.n	8008986 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d036      	beq.n	8008918 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80088aa:	89fb      	ldrh	r3, [r7, #14]
 80088ac:	461a      	mov	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f002 fdbe 	bl	800b440 <SDMMC_CmdSendCSD>
 80088c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80088cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ce:	e05a      	b.n	8008986 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2100      	movs	r1, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f002 fba1 	bl	800b01e <SDIO_GetResponse>
 80088dc:	4602      	mov	r2, r0
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2104      	movs	r1, #4
 80088e8:	4618      	mov	r0, r3
 80088ea:	f002 fb98 	bl	800b01e <SDIO_GetResponse>
 80088ee:	4602      	mov	r2, r0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2108      	movs	r1, #8
 80088fa:	4618      	mov	r0, r3
 80088fc:	f002 fb8f 	bl	800b01e <SDIO_GetResponse>
 8008900:	4602      	mov	r2, r0
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	210c      	movs	r1, #12
 800890c:	4618      	mov	r0, r3
 800890e:	f002 fb86 	bl	800b01e <SDIO_GetResponse>
 8008912:	4602      	mov	r2, r0
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2104      	movs	r1, #4
 800891e:	4618      	mov	r0, r3
 8008920:	f002 fb7d 	bl	800b01e <SDIO_GetResponse>
 8008924:	4603      	mov	r3, r0
 8008926:	0d1a      	lsrs	r2, r3, #20
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800892c:	f107 0310 	add.w	r3, r7, #16
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff fbe4 	bl	8008100 <HAL_SD_GetCardCSD>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800893e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008942:	e020      	b.n	8008986 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6819      	ldr	r1, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894c:	041b      	lsls	r3, r3, #16
 800894e:	f04f 0400 	mov.w	r4, #0
 8008952:	461a      	mov	r2, r3
 8008954:	4623      	mov	r3, r4
 8008956:	4608      	mov	r0, r1
 8008958:	f002 fc6c 	bl	800b234 <SDMMC_CmdSelDesel>
 800895c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800895e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <SD_InitCard+0x174>
  {
    return errorstate;
 8008964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008966:	e00e      	b.n	8008986 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681d      	ldr	r5, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	466c      	mov	r4, sp
 8008970:	f103 0210 	add.w	r2, r3, #16
 8008974:	ca07      	ldmia	r2, {r0, r1, r2}
 8008976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800897a:	3304      	adds	r3, #4
 800897c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800897e:	4628      	mov	r0, r5
 8008980:	f002 fab0 	bl	800aee4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3740      	adds	r7, #64	; 0x40
 800898a:	46bd      	mov	sp, r7
 800898c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008990 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	2300      	movs	r3, #0
 80089a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 fc66 	bl	800b27a <SDMMC_CmdGoIdleState>
 80089ae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <SD_PowerON+0x2a>
  {
    return errorstate;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	e072      	b.n	8008aa0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f002 fc79 	bl	800b2b6 <SDMMC_CmdOperCond>
 80089c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00d      	beq.n	80089e8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f002 fc4f 	bl	800b27a <SDMMC_CmdGoIdleState>
 80089dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <SD_PowerON+0x5e>
    {
      return errorstate;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	e05b      	b.n	8008aa0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d137      	bne.n	8008a66 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2100      	movs	r1, #0
 80089fc:	4618      	mov	r0, r3
 80089fe:	f002 fc79 	bl	800b2f4 <SDMMC_CmdAppCommand>
 8008a02:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d02d      	beq.n	8008a66 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a0e:	e047      	b.n	8008aa0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f002 fc6c 	bl	800b2f4 <SDMMC_CmdAppCommand>
 8008a1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <SD_PowerON+0x98>
    {
      return errorstate;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	e03b      	b.n	8008aa0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	491e      	ldr	r1, [pc, #120]	; (8008aa8 <SD_PowerON+0x118>)
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f002 fc82 	bl	800b338 <SDMMC_CmdAppOperCommand>
 8008a34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a40:	e02e      	b.n	8008aa0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2100      	movs	r1, #0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f002 fae8 	bl	800b01e <SDIO_GetResponse>
 8008a4e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	0fdb      	lsrs	r3, r3, #31
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <SD_PowerON+0xcc>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e000      	b.n	8008a5e <SD_PowerON+0xce>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	613b      	str	r3, [r7, #16]

    count++;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	3301      	adds	r3, #1
 8008a64:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d802      	bhi.n	8008a76 <SD_PowerON+0xe6>
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0cc      	beq.n	8008a10 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d902      	bls.n	8008a86 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a84:	e00c      	b.n	8008aa0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	645a      	str	r2, [r3, #68]	; 0x44
 8008a96:	e002      	b.n	8008a9e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	c1100000 	.word	0xc1100000

08008aac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ac0:	e018      	b.n	8008af4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aca:	041b      	lsls	r3, r3, #16
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	f002 fcf6 	bl	800b4c0 <SDMMC_CmdSendStatus>
 8008ad4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	e009      	b.n	8008af4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f002 fa99 	bl	800b01e <SDIO_GetResponse>
 8008aec:	4602      	mov	r2, r0
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	2300      	movs	r3, #0
 8008b0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2100      	movs	r1, #0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f002 fa83 	bl	800b01e <SDIO_GetResponse>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b22:	d102      	bne.n	8008b2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b28:	e02f      	b.n	8008b8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b2a:	f107 030c 	add.w	r3, r7, #12
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f879 	bl	8008c28 <SD_FindSCR>
 8008b36:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	e023      	b.n	8008b8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01c      	beq.n	8008b86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b54:	041b      	lsls	r3, r3, #16
 8008b56:	4619      	mov	r1, r3
 8008b58:	4610      	mov	r0, r2
 8008b5a:	f002 fbcb 	bl	800b2f4 <SDMMC_CmdAppCommand>
 8008b5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	e00f      	b.n	8008b8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2102      	movs	r1, #2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 fc04 	bl	800b37e <SDMMC_CmdBusWidth>
 8008b76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	e003      	b.n	8008b8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e001      	b.n	8008b8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f002 fa38 	bl	800b01e <SDIO_GetResponse>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bb8:	d102      	bne.n	8008bc0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008bba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bbe:	e02f      	b.n	8008c20 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008bc0:	f107 030c 	add.w	r3, r7, #12
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f82e 	bl	8008c28 <SD_FindSCR>
 8008bcc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	e023      	b.n	8008c20 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01c      	beq.n	8008c1c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bea:	041b      	lsls	r3, r3, #16
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f002 fb80 	bl	800b2f4 <SDMMC_CmdAppCommand>
 8008bf4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	e00f      	b.n	8008c20 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f002 fbb9 	bl	800b37e <SDMMC_CmdBusWidth>
 8008c0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	e003      	b.n	8008c20 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e001      	b.n	8008c20 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008c28:	b590      	push	{r4, r7, lr}
 8008c2a:	b08f      	sub	sp, #60	; 0x3c
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c32:	f7fc f8ad 	bl	8004d90 <HAL_GetTick>
 8008c36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60bb      	str	r3, [r7, #8]
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2108      	movs	r1, #8
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f002 fa24 	bl	800b09c <SDMMC_CmdBlockLength>
 8008c54:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	e0a9      	b.n	8008db4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c68:	041b      	lsls	r3, r3, #16
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	f002 fb41 	bl	800b2f4 <SDMMC_CmdAppCommand>
 8008c72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	e09a      	b.n	8008db4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c82:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c84:	2308      	movs	r3, #8
 8008c86:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008c88:	2330      	movs	r3, #48	; 0x30
 8008c8a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008c94:	2301      	movs	r3, #1
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f107 0210 	add.w	r2, r7, #16
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f002 f9ce 	bl	800b044 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f002 fb88 	bl	800b3c2 <SDMMC_CmdSendSCR>
 8008cb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d022      	beq.n	8008d00 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	e07a      	b.n	8008db4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00e      	beq.n	8008cea <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6819      	ldr	r1, [r3, #0]
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	f107 0208 	add.w	r2, r7, #8
 8008cd8:	18d4      	adds	r4, r2, r3
 8008cda:	4608      	mov	r0, r1
 8008cdc:	f002 f92d 	bl	800af3a <SDIO_ReadFIFO>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	6023      	str	r3, [r4, #0]
      index++;
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cea:	f7fc f851 	bl	8004d90 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf8:	d102      	bne.n	8008d00 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cfe:	e059      	b.n	8008db4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d06:	f240 432a 	movw	r3, #1066	; 0x42a
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0d6      	beq.n	8008cbe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d16:	f003 0308 	and.w	r3, r3, #8
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d005      	beq.n	8008d2a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2208      	movs	r2, #8
 8008d24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d26:	2308      	movs	r3, #8
 8008d28:	e044      	b.n	8008db4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d40:	2302      	movs	r3, #2
 8008d42:	e037      	b.n	8008db4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2220      	movs	r2, #32
 8008d58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d5a:	2320      	movs	r3, #32
 8008d5c:	e02a      	b.n	8008db4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	061a      	lsls	r2, r3, #24
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	0a1b      	lsrs	r3, r3, #8
 8008d7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d7e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	0e1b      	lsrs	r3, r3, #24
 8008d84:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	601a      	str	r2, [r3, #0]
    scr++;
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	061a      	lsls	r2, r3, #24
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	021b      	lsls	r3, r3, #8
 8008d98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	0a1b      	lsrs	r3, r3, #8
 8008da2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008da6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	0e1b      	lsrs	r3, r3, #24
 8008dac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	373c      	adds	r7, #60	; 0x3c
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd90      	pop	{r4, r7, pc}

08008dbc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d03f      	beq.n	8008e56 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	e033      	b.n	8008e44 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f002 f8aa 	bl	800af3a <SDIO_ReadFIFO>
 8008de6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3301      	adds	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	0a1b      	lsrs	r3, r3, #8
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	0c1b      	lsrs	r3, r3, #16
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	0e1b      	lsrs	r3, r3, #24
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3301      	adds	r3, #1
 8008e36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	3301      	adds	r3, #1
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2b07      	cmp	r3, #7
 8008e48:	d9c8      	bls.n	8008ddc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008e56:	bf00      	nop
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d043      	beq.n	8008f00 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	617b      	str	r3, [r7, #20]
 8008e7c:	e037      	b.n	8008eee <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3301      	adds	r3, #1
 8008e88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	021a      	lsls	r2, r3, #8
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	041a      	lsls	r2, r3, #16
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	061a      	lsls	r2, r3, #24
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f107 0208 	add.w	r2, r7, #8
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f002 f836 	bl	800af54 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	3301      	adds	r3, #1
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b07      	cmp	r3, #7
 8008ef2:	d9c4      	bls.n	8008e7e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008f00:	bf00      	nop
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e056      	b.n	8008fc8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d106      	bne.n	8008f3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7fb f865 	bl	8004004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	ea42 0103 	orr.w	r1, r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	0c1b      	lsrs	r3, r3, #16
 8008f98:	f003 0104 	and.w	r1, r3, #4
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69da      	ldr	r2, [r3, #28]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <HAL_SPI_Transmit+0x22>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e11e      	b.n	8009230 <HAL_SPI_Transmit+0x260>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ffa:	f7fb fec9 	bl	8004d90 <HAL_GetTick>
 8008ffe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b01      	cmp	r3, #1
 800900e:	d002      	beq.n	8009016 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009010:	2302      	movs	r3, #2
 8009012:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009014:	e103      	b.n	800921e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <HAL_SPI_Transmit+0x52>
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d102      	bne.n	8009028 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009026:	e0fa      	b.n	800921e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2203      	movs	r2, #3
 800902c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	88fa      	ldrh	r2, [r7, #6]
 8009040:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	88fa      	ldrh	r2, [r7, #6]
 8009046:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800906e:	d107      	bne.n	8009080 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800907e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908a:	2b40      	cmp	r3, #64	; 0x40
 800908c:	d007      	beq.n	800909e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800909c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090a6:	d14b      	bne.n	8009140 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <HAL_SPI_Transmit+0xe6>
 80090b0:	8afb      	ldrh	r3, [r7, #22]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d13e      	bne.n	8009134 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	881a      	ldrh	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	1c9a      	adds	r2, r3, #2
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80090da:	e02b      	b.n	8009134 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d112      	bne.n	8009110 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	881a      	ldrh	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	1c9a      	adds	r2, r3, #2
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	86da      	strh	r2, [r3, #54]	; 0x36
 800910e:	e011      	b.n	8009134 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009110:	f7fb fe3e 	bl	8004d90 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	429a      	cmp	r2, r3
 800911e:	d803      	bhi.n	8009128 <HAL_SPI_Transmit+0x158>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d102      	bne.n	800912e <HAL_SPI_Transmit+0x15e>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009132:	e074      	b.n	800921e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009138:	b29b      	uxth	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1ce      	bne.n	80090dc <HAL_SPI_Transmit+0x10c>
 800913e:	e04c      	b.n	80091da <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <HAL_SPI_Transmit+0x17e>
 8009148:	8afb      	ldrh	r3, [r7, #22]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d140      	bne.n	80091d0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	330c      	adds	r3, #12
 8009158:	7812      	ldrb	r2, [r2, #0]
 800915a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009174:	e02c      	b.n	80091d0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	2b02      	cmp	r3, #2
 8009182:	d113      	bne.n	80091ac <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	330c      	adds	r3, #12
 800918e:	7812      	ldrb	r2, [r2, #0]
 8009190:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80091aa:	e011      	b.n	80091d0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ac:	f7fb fdf0 	bl	8004d90 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d803      	bhi.n	80091c4 <HAL_SPI_Transmit+0x1f4>
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c2:	d102      	bne.n	80091ca <HAL_SPI_Transmit+0x1fa>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d102      	bne.n	80091d0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091ce:	e026      	b.n	800921e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1cd      	bne.n	8009176 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 fba4 	bl	800992c <SPI_EndRxTxTransaction>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2220      	movs	r2, #32
 80091ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091f8:	2300      	movs	r3, #0
 80091fa:	613b      	str	r3, [r7, #16]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	613b      	str	r3, [r7, #16]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	613b      	str	r3, [r7, #16]
 800920c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	77fb      	strb	r3, [r7, #31]
 800921a:	e000      	b.n	800921e <HAL_SPI_Transmit+0x24e>
  }

error:
 800921c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800922e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3720      	adds	r7, #32
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af02      	add	r7, sp, #8
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	4613      	mov	r3, r2
 8009246:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009254:	d112      	bne.n	800927c <HAL_SPI_Receive+0x44>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10e      	bne.n	800927c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2204      	movs	r2, #4
 8009262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009266:	88fa      	ldrh	r2, [r7, #6]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	4613      	mov	r3, r2
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 f8e9 	bl	800944a <HAL_SPI_TransmitReceive>
 8009278:	4603      	mov	r3, r0
 800927a:	e0e2      	b.n	8009442 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_SPI_Receive+0x52>
 8009286:	2302      	movs	r3, #2
 8009288:	e0db      	b.n	8009442 <HAL_SPI_Receive+0x20a>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009292:	f7fb fd7d 	bl	8004d90 <HAL_GetTick>
 8009296:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d002      	beq.n	80092aa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80092a4:	2302      	movs	r3, #2
 80092a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092a8:	e0c2      	b.n	8009430 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <HAL_SPI_Receive+0x7e>
 80092b0:	88fb      	ldrh	r3, [r7, #6]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d102      	bne.n	80092bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092ba:	e0b9      	b.n	8009430 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2204      	movs	r2, #4
 80092c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	88fa      	ldrh	r2, [r7, #6]
 80092da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009302:	d107      	bne.n	8009314 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009312:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931e:	2b40      	cmp	r3, #64	; 0x40
 8009320:	d007      	beq.n	8009332 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009330:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d162      	bne.n	8009400 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800933a:	e02e      	b.n	800939a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b01      	cmp	r3, #1
 8009348:	d115      	bne.n	8009376 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f103 020c 	add.w	r2, r3, #12
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	7812      	ldrb	r2, [r2, #0]
 8009358:	b2d2      	uxtb	r2, r2
 800935a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800936a:	b29b      	uxth	r3, r3
 800936c:	3b01      	subs	r3, #1
 800936e:	b29a      	uxth	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009374:	e011      	b.n	800939a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009376:	f7fb fd0b 	bl	8004d90 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d803      	bhi.n	800938e <HAL_SPI_Receive+0x156>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938c:	d102      	bne.n	8009394 <HAL_SPI_Receive+0x15c>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009398:	e04a      	b.n	8009430 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800939e:	b29b      	uxth	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1cb      	bne.n	800933c <HAL_SPI_Receive+0x104>
 80093a4:	e031      	b.n	800940a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d113      	bne.n	80093dc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	b292      	uxth	r2, r2
 80093c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	1c9a      	adds	r2, r3, #2
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	3b01      	subs	r3, #1
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093da:	e011      	b.n	8009400 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093dc:	f7fb fcd8 	bl	8004d90 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d803      	bhi.n	80093f4 <HAL_SPI_Receive+0x1bc>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f2:	d102      	bne.n	80093fa <HAL_SPI_Receive+0x1c2>
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80093fe:	e017      	b.n	8009430 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009404:	b29b      	uxth	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1cd      	bne.n	80093a6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 fa27 	bl	8009862 <SPI_EndRxTransaction>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2220      	movs	r2, #32
 800941e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]
 800942c:	e000      	b.n	8009430 <HAL_SPI_Receive+0x1f8>
  }

error :
 800942e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b08c      	sub	sp, #48	; 0x30
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	60b9      	str	r1, [r7, #8]
 8009454:	607a      	str	r2, [r7, #4]
 8009456:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009458:	2301      	movs	r3, #1
 800945a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_SPI_TransmitReceive+0x26>
 800946c:	2302      	movs	r3, #2
 800946e:	e18a      	b.n	8009786 <HAL_SPI_TransmitReceive+0x33c>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009478:	f7fb fc8a 	bl	8004d90 <HAL_GetTick>
 800947c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800948e:	887b      	ldrh	r3, [r7, #2]
 8009490:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009496:	2b01      	cmp	r3, #1
 8009498:	d00f      	beq.n	80094ba <HAL_SPI_TransmitReceive+0x70>
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094a0:	d107      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d103      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x68>
 80094aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d003      	beq.n	80094ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80094b2:	2302      	movs	r3, #2
 80094b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80094b8:	e15b      	b.n	8009772 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <HAL_SPI_TransmitReceive+0x82>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <HAL_SPI_TransmitReceive+0x82>
 80094c6:	887b      	ldrh	r3, [r7, #2]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d103      	bne.n	80094d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80094d2:	e14e      	b.n	8009772 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d003      	beq.n	80094e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2205      	movs	r2, #5
 80094e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	887a      	ldrh	r2, [r7, #2]
 80094f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	887a      	ldrh	r2, [r7, #2]
 80094fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	887a      	ldrh	r2, [r7, #2]
 800950a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	887a      	ldrh	r2, [r7, #2]
 8009510:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b40      	cmp	r3, #64	; 0x40
 800952a:	d007      	beq.n	800953c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800953a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009544:	d178      	bne.n	8009638 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <HAL_SPI_TransmitReceive+0x10a>
 800954e:	8b7b      	ldrh	r3, [r7, #26]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d166      	bne.n	8009622 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009558:	881a      	ldrh	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009564:	1c9a      	adds	r2, r3, #2
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800956e:	b29b      	uxth	r3, r3
 8009570:	3b01      	subs	r3, #1
 8009572:	b29a      	uxth	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009578:	e053      	b.n	8009622 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f003 0302 	and.w	r3, r3, #2
 8009584:	2b02      	cmp	r3, #2
 8009586:	d11b      	bne.n	80095c0 <HAL_SPI_TransmitReceive+0x176>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800958c:	b29b      	uxth	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d016      	beq.n	80095c0 <HAL_SPI_TransmitReceive+0x176>
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	2b01      	cmp	r3, #1
 8009596:	d113      	bne.n	80095c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959c:	881a      	ldrh	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a8:	1c9a      	adds	r2, r3, #2
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d119      	bne.n	8009602 <HAL_SPI_TransmitReceive+0x1b8>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d014      	beq.n	8009602 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e2:	b292      	uxth	r2, r2
 80095e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ea:	1c9a      	adds	r2, r3, #2
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095fe:	2301      	movs	r3, #1
 8009600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009602:	f7fb fbc5 	bl	8004d90 <HAL_GetTick>
 8009606:	4602      	mov	r2, r0
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800960e:	429a      	cmp	r2, r3
 8009610:	d807      	bhi.n	8009622 <HAL_SPI_TransmitReceive+0x1d8>
 8009612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009618:	d003      	beq.n	8009622 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009620:	e0a7      	b.n	8009772 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009626:	b29b      	uxth	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1a6      	bne.n	800957a <HAL_SPI_TransmitReceive+0x130>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009630:	b29b      	uxth	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1a1      	bne.n	800957a <HAL_SPI_TransmitReceive+0x130>
 8009636:	e07c      	b.n	8009732 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <HAL_SPI_TransmitReceive+0x1fc>
 8009640:	8b7b      	ldrh	r3, [r7, #26]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d16b      	bne.n	800971e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	330c      	adds	r3, #12
 8009650:	7812      	ldrb	r2, [r2, #0]
 8009652:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009662:	b29b      	uxth	r3, r3
 8009664:	3b01      	subs	r3, #1
 8009666:	b29a      	uxth	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800966c:	e057      	b.n	800971e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b02      	cmp	r3, #2
 800967a:	d11c      	bne.n	80096b6 <HAL_SPI_TransmitReceive+0x26c>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009680:	b29b      	uxth	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d017      	beq.n	80096b6 <HAL_SPI_TransmitReceive+0x26c>
 8009686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009688:	2b01      	cmp	r3, #1
 800968a:	d114      	bne.n	80096b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	330c      	adds	r3, #12
 8009696:	7812      	ldrb	r2, [r2, #0]
 8009698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	3b01      	subs	r3, #1
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096b2:	2300      	movs	r3, #0
 80096b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d119      	bne.n	80096f8 <HAL_SPI_TransmitReceive+0x2ae>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d014      	beq.n	80096f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68da      	ldr	r2, [r3, #12]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	3b01      	subs	r3, #1
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80096f4:	2301      	movs	r3, #1
 80096f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80096f8:	f7fb fb4a 	bl	8004d90 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009704:	429a      	cmp	r2, r3
 8009706:	d803      	bhi.n	8009710 <HAL_SPI_TransmitReceive+0x2c6>
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970e:	d102      	bne.n	8009716 <HAL_SPI_TransmitReceive+0x2cc>
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	2b00      	cmp	r3, #0
 8009714:	d103      	bne.n	800971e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800971c:	e029      	b.n	8009772 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009722:	b29b      	uxth	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1a2      	bne.n	800966e <HAL_SPI_TransmitReceive+0x224>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800972c:	b29b      	uxth	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d19d      	bne.n	800966e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f8f8 	bl	800992c <SPI_EndRxTxTransaction>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d006      	beq.n	8009750 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2220      	movs	r2, #32
 800974c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800974e:	e010      	b.n	8009772 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10b      	bne.n	8009770 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009758:	2300      	movs	r3, #0
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	617b      	str	r3, [r7, #20]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	e000      	b.n	8009772 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009770:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009786:	4618      	mov	r0, r3
 8009788:	3730      	adds	r7, #48	; 0x30
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	60b9      	str	r1, [r7, #8]
 8009798:	603b      	str	r3, [r7, #0]
 800979a:	4613      	mov	r3, r2
 800979c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800979e:	e04c      	b.n	800983a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a6:	d048      	beq.n	800983a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80097a8:	f7fb faf2 	bl	8004d90 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d902      	bls.n	80097be <SPI_WaitFlagStateUntilTimeout+0x30>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d13d      	bne.n	800983a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097d6:	d111      	bne.n	80097fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097e0:	d004      	beq.n	80097ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ea:	d107      	bne.n	80097fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009804:	d10f      	bne.n	8009826 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e00f      	b.n	800985a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	4013      	ands	r3, r2
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	bf0c      	ite	eq
 800984a:	2301      	moveq	r3, #1
 800984c:	2300      	movne	r3, #0
 800984e:	b2db      	uxtb	r3, r3
 8009850:	461a      	mov	r2, r3
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	429a      	cmp	r2, r3
 8009856:	d1a3      	bne.n	80097a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b086      	sub	sp, #24
 8009866:	af02      	add	r7, sp, #8
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009876:	d111      	bne.n	800989c <SPI_EndRxTransaction+0x3a>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009880:	d004      	beq.n	800988c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800988a:	d107      	bne.n	800989c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800989a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098a4:	d12a      	bne.n	80098fc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ae:	d012      	beq.n	80098d6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2200      	movs	r2, #0
 80098b8:	2180      	movs	r1, #128	; 0x80
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f7ff ff67 	bl	800978e <SPI_WaitFlagStateUntilTimeout>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d02d      	beq.n	8009922 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ca:	f043 0220 	orr.w	r2, r3, #32
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e026      	b.n	8009924 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	2101      	movs	r1, #1
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7ff ff54 	bl	800978e <SPI_WaitFlagStateUntilTimeout>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d01a      	beq.n	8009922 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f0:	f043 0220 	orr.w	r2, r3, #32
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e013      	b.n	8009924 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2200      	movs	r2, #0
 8009904:	2101      	movs	r1, #1
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f7ff ff41 	bl	800978e <SPI_WaitFlagStateUntilTimeout>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d007      	beq.n	8009922 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009916:	f043 0220 	orr.w	r2, r3, #32
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e000      	b.n	8009924 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af02      	add	r7, sp, #8
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009938:	4b1b      	ldr	r3, [pc, #108]	; (80099a8 <SPI_EndRxTxTransaction+0x7c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a1b      	ldr	r2, [pc, #108]	; (80099ac <SPI_EndRxTxTransaction+0x80>)
 800993e:	fba2 2303 	umull	r2, r3, r2, r3
 8009942:	0d5b      	lsrs	r3, r3, #21
 8009944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009948:	fb02 f303 	mul.w	r3, r2, r3
 800994c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009956:	d112      	bne.n	800997e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2200      	movs	r2, #0
 8009960:	2180      	movs	r1, #128	; 0x80
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff ff13 	bl	800978e <SPI_WaitFlagStateUntilTimeout>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d016      	beq.n	800999c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009972:	f043 0220 	orr.w	r2, r3, #32
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e00f      	b.n	800999e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00a      	beq.n	800999a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	3b01      	subs	r3, #1
 8009988:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009994:	2b80      	cmp	r3, #128	; 0x80
 8009996:	d0f2      	beq.n	800997e <SPI_EndRxTxTransaction+0x52>
 8009998:	e000      	b.n	800999c <SPI_EndRxTxTransaction+0x70>
        break;
 800999a:	bf00      	nop
  }

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20000000 	.word	0x20000000
 80099ac:	165e9f81 	.word	0x165e9f81

080099b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e01d      	b.n	80099fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d106      	bne.n	80099dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7fa fbd0 	bl	800417c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3304      	adds	r3, #4
 80099ec:	4619      	mov	r1, r3
 80099ee:	4610      	mov	r0, r2
 80099f0:	f000 fb56 	bl	800a0a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68da      	ldr	r2, [r3, #12]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f042 0201 	orr.w	r2, r2, #1
 8009a1c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f003 0307 	and.w	r3, r3, #7
 8009a28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b06      	cmp	r3, #6
 8009a2e:	d007      	beq.n	8009a40 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0201 	orr.w	r2, r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e01d      	b.n	8009a9c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fa fb0d 	bl	8004094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f000 fb07 	bl	800a0a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fd42 	bl	800a540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a15      	ldr	r2, [pc, #84]	; (8009b18 <HAL_TIM_PWM_Start+0x74>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d004      	beq.n	8009ad0 <HAL_TIM_PWM_Start+0x2c>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a14      	ldr	r2, [pc, #80]	; (8009b1c <HAL_TIM_PWM_Start+0x78>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d101      	bne.n	8009ad4 <HAL_TIM_PWM_Start+0x30>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e000      	b.n	8009ad6 <HAL_TIM_PWM_Start+0x32>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d007      	beq.n	8009aea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ae8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f003 0307 	and.w	r3, r3, #7
 8009af4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b06      	cmp	r3, #6
 8009afa:	d007      	beq.n	8009b0c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0201 	orr.w	r2, r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	40010000 	.word	0x40010000
 8009b1c:	40010400 	.word	0x40010400

08009b20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e083      	b.n	8009c3c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d106      	bne.n	8009b4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7fa fba7 	bl	800429c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2202      	movs	r2, #2
 8009b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6812      	ldr	r2, [r2, #0]
 8009b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b64:	f023 0307 	bic.w	r3, r3, #7
 8009b68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	3304      	adds	r3, #4
 8009b72:	4619      	mov	r1, r3
 8009b74:	4610      	mov	r0, r2
 8009b76:	f000 fa93 	bl	800a0a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ba2:	f023 0303 	bic.w	r3, r3, #3
 8009ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009bc0:	f023 030c 	bic.w	r3, r3, #12
 8009bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68da      	ldr	r2, [r3, #12]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	021b      	lsls	r3, r3, #8
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	011a      	lsls	r2, r3, #4
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	031b      	lsls	r3, r3, #12
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009bfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009c06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	011b      	lsls	r3, r3, #4
 8009c12:	4313      	orrs	r3, r2
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <HAL_TIM_Encoder_Start+0x16>
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	d008      	beq.n	8009c6a <HAL_TIM_Encoder_Start+0x26>
 8009c58:	e00f      	b.n	8009c7a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fc6c 	bl	800a540 <TIM_CCxChannelCmd>
      break;
 8009c68:	e016      	b.n	8009c98 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	2104      	movs	r1, #4
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fc64 	bl	800a540 <TIM_CCxChannelCmd>
      break;
 8009c78:	e00e      	b.n	8009c98 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 fc5c 	bl	800a540 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	2104      	movs	r1, #4
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fc55 	bl	800a540 <TIM_CCxChannelCmd>
      break;
 8009c96:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f042 0201 	orr.w	r2, r2, #1
 8009ca6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	f003 0302 	and.w	r3, r3, #2
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d122      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d11b      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f06f 0202 	mvn.w	r2, #2
 8009cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f9b5 	bl	800a064 <HAL_TIM_IC_CaptureCallback>
 8009cfa:	e005      	b.n	8009d08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f9a7 	bl	800a050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f9b8 	bl	800a078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d122      	bne.n	8009d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f003 0304 	and.w	r3, r3, #4
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d11b      	bne.n	8009d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f06f 0204 	mvn.w	r2, #4
 8009d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f98b 	bl	800a064 <HAL_TIM_IC_CaptureCallback>
 8009d4e:	e005      	b.n	8009d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f97d 	bl	800a050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f98e 	bl	800a078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	f003 0308 	and.w	r3, r3, #8
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d122      	bne.n	8009db6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	f003 0308 	and.w	r3, r3, #8
 8009d7a:	2b08      	cmp	r3, #8
 8009d7c:	d11b      	bne.n	8009db6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f06f 0208 	mvn.w	r2, #8
 8009d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2204      	movs	r2, #4
 8009d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	f003 0303 	and.w	r3, r3, #3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f961 	bl	800a064 <HAL_TIM_IC_CaptureCallback>
 8009da2:	e005      	b.n	8009db0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f953 	bl	800a050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f964 	bl	800a078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	f003 0310 	and.w	r3, r3, #16
 8009dc0:	2b10      	cmp	r3, #16
 8009dc2:	d122      	bne.n	8009e0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f003 0310 	and.w	r3, r3, #16
 8009dce:	2b10      	cmp	r3, #16
 8009dd0:	d11b      	bne.n	8009e0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f06f 0210 	mvn.w	r2, #16
 8009dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2208      	movs	r2, #8
 8009de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f937 	bl	800a064 <HAL_TIM_IC_CaptureCallback>
 8009df6:	e005      	b.n	8009e04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f929 	bl	800a050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f93a 	bl	800a078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d10e      	bne.n	8009e36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d107      	bne.n	8009e36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f06f 0201 	mvn.w	r2, #1
 8009e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7f8 ff11 	bl	8002c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e40:	2b80      	cmp	r3, #128	; 0x80
 8009e42:	d10e      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4e:	2b80      	cmp	r3, #128	; 0x80
 8009e50:	d107      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fc6d 	bl	800a73c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6c:	2b40      	cmp	r3, #64	; 0x40
 8009e6e:	d10e      	bne.n	8009e8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7a:	2b40      	cmp	r3, #64	; 0x40
 8009e7c:	d107      	bne.n	8009e8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f8ff 	bl	800a08c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	f003 0320 	and.w	r3, r3, #32
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	d10e      	bne.n	8009eba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f003 0320 	and.w	r3, r3, #32
 8009ea6:	2b20      	cmp	r3, #32
 8009ea8:	d107      	bne.n	8009eba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f06f 0220 	mvn.w	r2, #32
 8009eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fc37 	bl	800a728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d101      	bne.n	8009ede <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009eda:	2302      	movs	r3, #2
 8009edc:	e0b4      	b.n	800a048 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b0c      	cmp	r3, #12
 8009ef2:	f200 809f 	bhi.w	800a034 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f31 	.word	0x08009f31
 8009f00:	0800a035 	.word	0x0800a035
 8009f04:	0800a035 	.word	0x0800a035
 8009f08:	0800a035 	.word	0x0800a035
 8009f0c:	08009f71 	.word	0x08009f71
 8009f10:	0800a035 	.word	0x0800a035
 8009f14:	0800a035 	.word	0x0800a035
 8009f18:	0800a035 	.word	0x0800a035
 8009f1c:	08009fb3 	.word	0x08009fb3
 8009f20:	0800a035 	.word	0x0800a035
 8009f24:	0800a035 	.word	0x0800a035
 8009f28:	0800a035 	.word	0x0800a035
 8009f2c:	08009ff3 	.word	0x08009ff3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 f952 	bl	800a1e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	699a      	ldr	r2, [r3, #24]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 0208 	orr.w	r2, r2, #8
 8009f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	699a      	ldr	r2, [r3, #24]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0204 	bic.w	r2, r2, #4
 8009f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6999      	ldr	r1, [r3, #24]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	691a      	ldr	r2, [r3, #16]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	619a      	str	r2, [r3, #24]
      break;
 8009f6e:	e062      	b.n	800a036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68b9      	ldr	r1, [r7, #8]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 f9a2 	bl	800a2c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	699a      	ldr	r2, [r3, #24]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	699a      	ldr	r2, [r3, #24]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6999      	ldr	r1, [r3, #24]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	021a      	lsls	r2, r3, #8
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	430a      	orrs	r2, r1
 8009fae:	619a      	str	r2, [r3, #24]
      break;
 8009fb0:	e041      	b.n	800a036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 f9f7 	bl	800a3ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69da      	ldr	r2, [r3, #28]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f042 0208 	orr.w	r2, r2, #8
 8009fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	69da      	ldr	r2, [r3, #28]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0204 	bic.w	r2, r2, #4
 8009fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	69d9      	ldr	r1, [r3, #28]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	691a      	ldr	r2, [r3, #16]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	430a      	orrs	r2, r1
 8009fee:	61da      	str	r2, [r3, #28]
      break;
 8009ff0:	e021      	b.n	800a036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 fa4b 	bl	800a494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69da      	ldr	r2, [r3, #28]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a00c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69da      	ldr	r2, [r3, #28]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a01c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	69d9      	ldr	r1, [r3, #28]
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	021a      	lsls	r2, r3, #8
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	61da      	str	r2, [r3, #28]
      break;
 800a032:	e000      	b.n	800a036 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a034:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a40      	ldr	r2, [pc, #256]	; (800a1b4 <TIM_Base_SetConfig+0x114>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d013      	beq.n	800a0e0 <TIM_Base_SetConfig+0x40>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0be:	d00f      	beq.n	800a0e0 <TIM_Base_SetConfig+0x40>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a3d      	ldr	r2, [pc, #244]	; (800a1b8 <TIM_Base_SetConfig+0x118>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d00b      	beq.n	800a0e0 <TIM_Base_SetConfig+0x40>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a3c      	ldr	r2, [pc, #240]	; (800a1bc <TIM_Base_SetConfig+0x11c>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d007      	beq.n	800a0e0 <TIM_Base_SetConfig+0x40>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a3b      	ldr	r2, [pc, #236]	; (800a1c0 <TIM_Base_SetConfig+0x120>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d003      	beq.n	800a0e0 <TIM_Base_SetConfig+0x40>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a3a      	ldr	r2, [pc, #232]	; (800a1c4 <TIM_Base_SetConfig+0x124>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d108      	bne.n	800a0f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a2f      	ldr	r2, [pc, #188]	; (800a1b4 <TIM_Base_SetConfig+0x114>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d02b      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a100:	d027      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a2c      	ldr	r2, [pc, #176]	; (800a1b8 <TIM_Base_SetConfig+0x118>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d023      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a2b      	ldr	r2, [pc, #172]	; (800a1bc <TIM_Base_SetConfig+0x11c>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d01f      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a2a      	ldr	r2, [pc, #168]	; (800a1c0 <TIM_Base_SetConfig+0x120>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d01b      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a29      	ldr	r2, [pc, #164]	; (800a1c4 <TIM_Base_SetConfig+0x124>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d017      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a28      	ldr	r2, [pc, #160]	; (800a1c8 <TIM_Base_SetConfig+0x128>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d013      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a27      	ldr	r2, [pc, #156]	; (800a1cc <TIM_Base_SetConfig+0x12c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d00f      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a26      	ldr	r2, [pc, #152]	; (800a1d0 <TIM_Base_SetConfig+0x130>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d00b      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a25      	ldr	r2, [pc, #148]	; (800a1d4 <TIM_Base_SetConfig+0x134>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d007      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a24      	ldr	r2, [pc, #144]	; (800a1d8 <TIM_Base_SetConfig+0x138>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d003      	beq.n	800a152 <TIM_Base_SetConfig+0xb2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a23      	ldr	r2, [pc, #140]	; (800a1dc <TIM_Base_SetConfig+0x13c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d108      	bne.n	800a164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	689a      	ldr	r2, [r3, #8]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a0a      	ldr	r2, [pc, #40]	; (800a1b4 <TIM_Base_SetConfig+0x114>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d003      	beq.n	800a198 <TIM_Base_SetConfig+0xf8>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a0c      	ldr	r2, [pc, #48]	; (800a1c4 <TIM_Base_SetConfig+0x124>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d103      	bne.n	800a1a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	691a      	ldr	r2, [r3, #16]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	615a      	str	r2, [r3, #20]
}
 800a1a6:	bf00      	nop
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	40010000 	.word	0x40010000
 800a1b8:	40000400 	.word	0x40000400
 800a1bc:	40000800 	.word	0x40000800
 800a1c0:	40000c00 	.word	0x40000c00
 800a1c4:	40010400 	.word	0x40010400
 800a1c8:	40014000 	.word	0x40014000
 800a1cc:	40014400 	.word	0x40014400
 800a1d0:	40014800 	.word	0x40014800
 800a1d4:	40001800 	.word	0x40001800
 800a1d8:	40001c00 	.word	0x40001c00
 800a1dc:	40002000 	.word	0x40002000

0800a1e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	f023 0201 	bic.w	r2, r3, #1
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f023 0302 	bic.w	r3, r3, #2
 800a228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	4313      	orrs	r3, r2
 800a232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a20      	ldr	r2, [pc, #128]	; (800a2b8 <TIM_OC1_SetConfig+0xd8>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_OC1_SetConfig+0x64>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a1f      	ldr	r2, [pc, #124]	; (800a2bc <TIM_OC1_SetConfig+0xdc>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d10c      	bne.n	800a25e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f023 0308 	bic.w	r3, r3, #8
 800a24a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	4313      	orrs	r3, r2
 800a254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f023 0304 	bic.w	r3, r3, #4
 800a25c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a15      	ldr	r2, [pc, #84]	; (800a2b8 <TIM_OC1_SetConfig+0xd8>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d003      	beq.n	800a26e <TIM_OC1_SetConfig+0x8e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a14      	ldr	r2, [pc, #80]	; (800a2bc <TIM_OC1_SetConfig+0xdc>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d111      	bne.n	800a292 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a27c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	4313      	orrs	r3, r2
 800a286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	4313      	orrs	r3, r2
 800a290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	621a      	str	r2, [r3, #32]
}
 800a2ac:	bf00      	nop
 800a2ae:	371c      	adds	r7, #28
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	40010000 	.word	0x40010000
 800a2bc:	40010400 	.word	0x40010400

0800a2c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	f023 0210 	bic.w	r2, r3, #16
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	4313      	orrs	r3, r2
 800a302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f023 0320 	bic.w	r3, r3, #32
 800a30a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	4313      	orrs	r3, r2
 800a316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a22      	ldr	r2, [pc, #136]	; (800a3a4 <TIM_OC2_SetConfig+0xe4>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d003      	beq.n	800a328 <TIM_OC2_SetConfig+0x68>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a21      	ldr	r2, [pc, #132]	; (800a3a8 <TIM_OC2_SetConfig+0xe8>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d10d      	bne.n	800a344 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a32e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	011b      	lsls	r3, r3, #4
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	4313      	orrs	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a17      	ldr	r2, [pc, #92]	; (800a3a4 <TIM_OC2_SetConfig+0xe4>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d003      	beq.n	800a354 <TIM_OC2_SetConfig+0x94>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a16      	ldr	r2, [pc, #88]	; (800a3a8 <TIM_OC2_SetConfig+0xe8>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d113      	bne.n	800a37c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a35a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	4313      	orrs	r3, r2
 800a37a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	621a      	str	r2, [r3, #32]
}
 800a396:	bf00      	nop
 800a398:	371c      	adds	r7, #28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	40010000 	.word	0x40010000
 800a3a8:	40010400 	.word	0x40010400

0800a3ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 0303 	bic.w	r3, r3, #3
 800a3e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	021b      	lsls	r3, r3, #8
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a21      	ldr	r2, [pc, #132]	; (800a48c <TIM_OC3_SetConfig+0xe0>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d003      	beq.n	800a412 <TIM_OC3_SetConfig+0x66>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a20      	ldr	r2, [pc, #128]	; (800a490 <TIM_OC3_SetConfig+0xe4>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d10d      	bne.n	800a42e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	021b      	lsls	r3, r3, #8
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	4313      	orrs	r3, r2
 800a424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a42c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a16      	ldr	r2, [pc, #88]	; (800a48c <TIM_OC3_SetConfig+0xe0>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d003      	beq.n	800a43e <TIM_OC3_SetConfig+0x92>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a15      	ldr	r2, [pc, #84]	; (800a490 <TIM_OC3_SetConfig+0xe4>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d113      	bne.n	800a466 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a44c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	4313      	orrs	r3, r2
 800a464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	621a      	str	r2, [r3, #32]
}
 800a480:	bf00      	nop
 800a482:	371c      	adds	r7, #28
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	40010000 	.word	0x40010000
 800a490:	40010400 	.word	0x40010400

0800a494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	021b      	lsls	r3, r3, #8
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	031b      	lsls	r3, r3, #12
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a12      	ldr	r2, [pc, #72]	; (800a538 <TIM_OC4_SetConfig+0xa4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d003      	beq.n	800a4fc <TIM_OC4_SetConfig+0x68>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a11      	ldr	r2, [pc, #68]	; (800a53c <TIM_OC4_SetConfig+0xa8>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d109      	bne.n	800a510 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	019b      	lsls	r3, r3, #6
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	621a      	str	r2, [r3, #32]
}
 800a52a:	bf00      	nop
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	40010000 	.word	0x40010000
 800a53c:	40010400 	.word	0x40010400

0800a540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f003 031f 	and.w	r3, r3, #31
 800a552:	2201      	movs	r2, #1
 800a554:	fa02 f303 	lsl.w	r3, r2, r3
 800a558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6a1a      	ldr	r2, [r3, #32]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	43db      	mvns	r3, r3
 800a562:	401a      	ands	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6a1a      	ldr	r2, [r3, #32]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f003 031f 	and.w	r3, r3, #31
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	fa01 f303 	lsl.w	r3, r1, r3
 800a578:	431a      	orrs	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	621a      	str	r2, [r3, #32]
}
 800a57e:	bf00      	nop
 800a580:	371c      	adds	r7, #28
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
	...

0800a58c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d101      	bne.n	800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	e05a      	b.n	800a65a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a21      	ldr	r2, [pc, #132]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d022      	beq.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5f0:	d01d      	beq.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a1d      	ldr	r2, [pc, #116]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d018      	beq.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a1b      	ldr	r2, [pc, #108]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d013      	beq.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a1a      	ldr	r2, [pc, #104]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d00e      	beq.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a18      	ldr	r2, [pc, #96]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d009      	beq.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a17      	ldr	r2, [pc, #92]	; (800a67c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d004      	beq.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a15      	ldr	r2, [pc, #84]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d10c      	bne.n	800a648 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	40010000 	.word	0x40010000
 800a66c:	40000400 	.word	0x40000400
 800a670:	40000800 	.word	0x40000800
 800a674:	40000c00 	.word	0x40000c00
 800a678:	40010400 	.word	0x40010400
 800a67c:	40014000 	.word	0x40014000
 800a680:	40001800 	.word	0x40001800

0800a684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d101      	bne.n	800a6a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a69c:	2302      	movs	r3, #2
 800a69e:	e03d      	b.n	800a71c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	4313      	orrs	r3, r2
 800a708:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e03f      	b.n	800a7e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7f9 feba 	bl	80044f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2224      	movs	r2, #36	; 0x24
 800a780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68da      	ldr	r2, [r3, #12]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f829 	bl	800a7ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	691a      	ldr	r2, [r3, #16]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	695a      	ldr	r2, [r3, #20]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68da      	ldr	r2, [r3, #12]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2220      	movs	r2, #32
 800a7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	b085      	sub	sp, #20
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	430a      	orrs	r2, r1
 800a80a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	431a      	orrs	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	431a      	orrs	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	69db      	ldr	r3, [r3, #28]
 800a820:	4313      	orrs	r3, r2
 800a822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a82e:	f023 030c 	bic.w	r3, r3, #12
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	6812      	ldr	r2, [r2, #0]
 800a836:	68f9      	ldr	r1, [r7, #12]
 800a838:	430b      	orrs	r3, r1
 800a83a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	699a      	ldr	r2, [r3, #24]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a85a:	f040 818b 	bne.w	800ab74 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4ac1      	ldr	r2, [pc, #772]	; (800ab68 <UART_SetConfig+0x37c>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d005      	beq.n	800a874 <UART_SetConfig+0x88>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4abf      	ldr	r2, [pc, #764]	; (800ab6c <UART_SetConfig+0x380>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	f040 80bd 	bne.w	800a9ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a874:	f7fc fbcc 	bl	8007010 <HAL_RCC_GetPCLK2Freq>
 800a878:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	461d      	mov	r5, r3
 800a87e:	f04f 0600 	mov.w	r6, #0
 800a882:	46a8      	mov	r8, r5
 800a884:	46b1      	mov	r9, r6
 800a886:	eb18 0308 	adds.w	r3, r8, r8
 800a88a:	eb49 0409 	adc.w	r4, r9, r9
 800a88e:	4698      	mov	r8, r3
 800a890:	46a1      	mov	r9, r4
 800a892:	eb18 0805 	adds.w	r8, r8, r5
 800a896:	eb49 0906 	adc.w	r9, r9, r6
 800a89a:	f04f 0100 	mov.w	r1, #0
 800a89e:	f04f 0200 	mov.w	r2, #0
 800a8a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a8a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a8aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8ae:	4688      	mov	r8, r1
 800a8b0:	4691      	mov	r9, r2
 800a8b2:	eb18 0005 	adds.w	r0, r8, r5
 800a8b6:	eb49 0106 	adc.w	r1, r9, r6
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	461d      	mov	r5, r3
 800a8c0:	f04f 0600 	mov.w	r6, #0
 800a8c4:	196b      	adds	r3, r5, r5
 800a8c6:	eb46 0406 	adc.w	r4, r6, r6
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	4623      	mov	r3, r4
 800a8ce:	f7f6 f9f3 	bl	8000cb8 <__aeabi_uldivmod>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	4ba5      	ldr	r3, [pc, #660]	; (800ab70 <UART_SetConfig+0x384>)
 800a8da:	fba3 2302 	umull	r2, r3, r3, r2
 800a8de:	095b      	lsrs	r3, r3, #5
 800a8e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	461d      	mov	r5, r3
 800a8e8:	f04f 0600 	mov.w	r6, #0
 800a8ec:	46a9      	mov	r9, r5
 800a8ee:	46b2      	mov	sl, r6
 800a8f0:	eb19 0309 	adds.w	r3, r9, r9
 800a8f4:	eb4a 040a 	adc.w	r4, sl, sl
 800a8f8:	4699      	mov	r9, r3
 800a8fa:	46a2      	mov	sl, r4
 800a8fc:	eb19 0905 	adds.w	r9, r9, r5
 800a900:	eb4a 0a06 	adc.w	sl, sl, r6
 800a904:	f04f 0100 	mov.w	r1, #0
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a910:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a914:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a918:	4689      	mov	r9, r1
 800a91a:	4692      	mov	sl, r2
 800a91c:	eb19 0005 	adds.w	r0, r9, r5
 800a920:	eb4a 0106 	adc.w	r1, sl, r6
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	461d      	mov	r5, r3
 800a92a:	f04f 0600 	mov.w	r6, #0
 800a92e:	196b      	adds	r3, r5, r5
 800a930:	eb46 0406 	adc.w	r4, r6, r6
 800a934:	461a      	mov	r2, r3
 800a936:	4623      	mov	r3, r4
 800a938:	f7f6 f9be 	bl	8000cb8 <__aeabi_uldivmod>
 800a93c:	4603      	mov	r3, r0
 800a93e:	460c      	mov	r4, r1
 800a940:	461a      	mov	r2, r3
 800a942:	4b8b      	ldr	r3, [pc, #556]	; (800ab70 <UART_SetConfig+0x384>)
 800a944:	fba3 1302 	umull	r1, r3, r3, r2
 800a948:	095b      	lsrs	r3, r3, #5
 800a94a:	2164      	movs	r1, #100	; 0x64
 800a94c:	fb01 f303 	mul.w	r3, r1, r3
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	3332      	adds	r3, #50	; 0x32
 800a956:	4a86      	ldr	r2, [pc, #536]	; (800ab70 <UART_SetConfig+0x384>)
 800a958:	fba2 2303 	umull	r2, r3, r2, r3
 800a95c:	095b      	lsrs	r3, r3, #5
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a964:	4498      	add	r8, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	461d      	mov	r5, r3
 800a96a:	f04f 0600 	mov.w	r6, #0
 800a96e:	46a9      	mov	r9, r5
 800a970:	46b2      	mov	sl, r6
 800a972:	eb19 0309 	adds.w	r3, r9, r9
 800a976:	eb4a 040a 	adc.w	r4, sl, sl
 800a97a:	4699      	mov	r9, r3
 800a97c:	46a2      	mov	sl, r4
 800a97e:	eb19 0905 	adds.w	r9, r9, r5
 800a982:	eb4a 0a06 	adc.w	sl, sl, r6
 800a986:	f04f 0100 	mov.w	r1, #0
 800a98a:	f04f 0200 	mov.w	r2, #0
 800a98e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a992:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a996:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a99a:	4689      	mov	r9, r1
 800a99c:	4692      	mov	sl, r2
 800a99e:	eb19 0005 	adds.w	r0, r9, r5
 800a9a2:	eb4a 0106 	adc.w	r1, sl, r6
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	461d      	mov	r5, r3
 800a9ac:	f04f 0600 	mov.w	r6, #0
 800a9b0:	196b      	adds	r3, r5, r5
 800a9b2:	eb46 0406 	adc.w	r4, r6, r6
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	4623      	mov	r3, r4
 800a9ba:	f7f6 f97d 	bl	8000cb8 <__aeabi_uldivmod>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4b6a      	ldr	r3, [pc, #424]	; (800ab70 <UART_SetConfig+0x384>)
 800a9c6:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ca:	095b      	lsrs	r3, r3, #5
 800a9cc:	2164      	movs	r1, #100	; 0x64
 800a9ce:	fb01 f303 	mul.w	r3, r1, r3
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	3332      	adds	r3, #50	; 0x32
 800a9d8:	4a65      	ldr	r2, [pc, #404]	; (800ab70 <UART_SetConfig+0x384>)
 800a9da:	fba2 2303 	umull	r2, r3, r2, r3
 800a9de:	095b      	lsrs	r3, r3, #5
 800a9e0:	f003 0207 	and.w	r2, r3, #7
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4442      	add	r2, r8
 800a9ea:	609a      	str	r2, [r3, #8]
 800a9ec:	e26f      	b.n	800aece <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a9ee:	f7fc fafb 	bl	8006fe8 <HAL_RCC_GetPCLK1Freq>
 800a9f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	461d      	mov	r5, r3
 800a9f8:	f04f 0600 	mov.w	r6, #0
 800a9fc:	46a8      	mov	r8, r5
 800a9fe:	46b1      	mov	r9, r6
 800aa00:	eb18 0308 	adds.w	r3, r8, r8
 800aa04:	eb49 0409 	adc.w	r4, r9, r9
 800aa08:	4698      	mov	r8, r3
 800aa0a:	46a1      	mov	r9, r4
 800aa0c:	eb18 0805 	adds.w	r8, r8, r5
 800aa10:	eb49 0906 	adc.w	r9, r9, r6
 800aa14:	f04f 0100 	mov.w	r1, #0
 800aa18:	f04f 0200 	mov.w	r2, #0
 800aa1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa28:	4688      	mov	r8, r1
 800aa2a:	4691      	mov	r9, r2
 800aa2c:	eb18 0005 	adds.w	r0, r8, r5
 800aa30:	eb49 0106 	adc.w	r1, r9, r6
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	461d      	mov	r5, r3
 800aa3a:	f04f 0600 	mov.w	r6, #0
 800aa3e:	196b      	adds	r3, r5, r5
 800aa40:	eb46 0406 	adc.w	r4, r6, r6
 800aa44:	461a      	mov	r2, r3
 800aa46:	4623      	mov	r3, r4
 800aa48:	f7f6 f936 	bl	8000cb8 <__aeabi_uldivmod>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	461a      	mov	r2, r3
 800aa52:	4b47      	ldr	r3, [pc, #284]	; (800ab70 <UART_SetConfig+0x384>)
 800aa54:	fba3 2302 	umull	r2, r3, r3, r2
 800aa58:	095b      	lsrs	r3, r3, #5
 800aa5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	461d      	mov	r5, r3
 800aa62:	f04f 0600 	mov.w	r6, #0
 800aa66:	46a9      	mov	r9, r5
 800aa68:	46b2      	mov	sl, r6
 800aa6a:	eb19 0309 	adds.w	r3, r9, r9
 800aa6e:	eb4a 040a 	adc.w	r4, sl, sl
 800aa72:	4699      	mov	r9, r3
 800aa74:	46a2      	mov	sl, r4
 800aa76:	eb19 0905 	adds.w	r9, r9, r5
 800aa7a:	eb4a 0a06 	adc.w	sl, sl, r6
 800aa7e:	f04f 0100 	mov.w	r1, #0
 800aa82:	f04f 0200 	mov.w	r2, #0
 800aa86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa92:	4689      	mov	r9, r1
 800aa94:	4692      	mov	sl, r2
 800aa96:	eb19 0005 	adds.w	r0, r9, r5
 800aa9a:	eb4a 0106 	adc.w	r1, sl, r6
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	461d      	mov	r5, r3
 800aaa4:	f04f 0600 	mov.w	r6, #0
 800aaa8:	196b      	adds	r3, r5, r5
 800aaaa:	eb46 0406 	adc.w	r4, r6, r6
 800aaae:	461a      	mov	r2, r3
 800aab0:	4623      	mov	r3, r4
 800aab2:	f7f6 f901 	bl	8000cb8 <__aeabi_uldivmod>
 800aab6:	4603      	mov	r3, r0
 800aab8:	460c      	mov	r4, r1
 800aaba:	461a      	mov	r2, r3
 800aabc:	4b2c      	ldr	r3, [pc, #176]	; (800ab70 <UART_SetConfig+0x384>)
 800aabe:	fba3 1302 	umull	r1, r3, r3, r2
 800aac2:	095b      	lsrs	r3, r3, #5
 800aac4:	2164      	movs	r1, #100	; 0x64
 800aac6:	fb01 f303 	mul.w	r3, r1, r3
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	3332      	adds	r3, #50	; 0x32
 800aad0:	4a27      	ldr	r2, [pc, #156]	; (800ab70 <UART_SetConfig+0x384>)
 800aad2:	fba2 2303 	umull	r2, r3, r2, r3
 800aad6:	095b      	lsrs	r3, r3, #5
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aade:	4498      	add	r8, r3
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	461d      	mov	r5, r3
 800aae4:	f04f 0600 	mov.w	r6, #0
 800aae8:	46a9      	mov	r9, r5
 800aaea:	46b2      	mov	sl, r6
 800aaec:	eb19 0309 	adds.w	r3, r9, r9
 800aaf0:	eb4a 040a 	adc.w	r4, sl, sl
 800aaf4:	4699      	mov	r9, r3
 800aaf6:	46a2      	mov	sl, r4
 800aaf8:	eb19 0905 	adds.w	r9, r9, r5
 800aafc:	eb4a 0a06 	adc.w	sl, sl, r6
 800ab00:	f04f 0100 	mov.w	r1, #0
 800ab04:	f04f 0200 	mov.w	r2, #0
 800ab08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab14:	4689      	mov	r9, r1
 800ab16:	4692      	mov	sl, r2
 800ab18:	eb19 0005 	adds.w	r0, r9, r5
 800ab1c:	eb4a 0106 	adc.w	r1, sl, r6
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	461d      	mov	r5, r3
 800ab26:	f04f 0600 	mov.w	r6, #0
 800ab2a:	196b      	adds	r3, r5, r5
 800ab2c:	eb46 0406 	adc.w	r4, r6, r6
 800ab30:	461a      	mov	r2, r3
 800ab32:	4623      	mov	r3, r4
 800ab34:	f7f6 f8c0 	bl	8000cb8 <__aeabi_uldivmod>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <UART_SetConfig+0x384>)
 800ab40:	fba3 1302 	umull	r1, r3, r3, r2
 800ab44:	095b      	lsrs	r3, r3, #5
 800ab46:	2164      	movs	r1, #100	; 0x64
 800ab48:	fb01 f303 	mul.w	r3, r1, r3
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	3332      	adds	r3, #50	; 0x32
 800ab52:	4a07      	ldr	r2, [pc, #28]	; (800ab70 <UART_SetConfig+0x384>)
 800ab54:	fba2 2303 	umull	r2, r3, r2, r3
 800ab58:	095b      	lsrs	r3, r3, #5
 800ab5a:	f003 0207 	and.w	r2, r3, #7
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4442      	add	r2, r8
 800ab64:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ab66:	e1b2      	b.n	800aece <UART_SetConfig+0x6e2>
 800ab68:	40011000 	.word	0x40011000
 800ab6c:	40011400 	.word	0x40011400
 800ab70:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4ad7      	ldr	r2, [pc, #860]	; (800aed8 <UART_SetConfig+0x6ec>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d005      	beq.n	800ab8a <UART_SetConfig+0x39e>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4ad6      	ldr	r2, [pc, #856]	; (800aedc <UART_SetConfig+0x6f0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	f040 80d1 	bne.w	800ad2c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab8a:	f7fc fa41 	bl	8007010 <HAL_RCC_GetPCLK2Freq>
 800ab8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	469a      	mov	sl, r3
 800ab94:	f04f 0b00 	mov.w	fp, #0
 800ab98:	46d0      	mov	r8, sl
 800ab9a:	46d9      	mov	r9, fp
 800ab9c:	eb18 0308 	adds.w	r3, r8, r8
 800aba0:	eb49 0409 	adc.w	r4, r9, r9
 800aba4:	4698      	mov	r8, r3
 800aba6:	46a1      	mov	r9, r4
 800aba8:	eb18 080a 	adds.w	r8, r8, sl
 800abac:	eb49 090b 	adc.w	r9, r9, fp
 800abb0:	f04f 0100 	mov.w	r1, #0
 800abb4:	f04f 0200 	mov.w	r2, #0
 800abb8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800abbc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800abc0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800abc4:	4688      	mov	r8, r1
 800abc6:	4691      	mov	r9, r2
 800abc8:	eb1a 0508 	adds.w	r5, sl, r8
 800abcc:	eb4b 0609 	adc.w	r6, fp, r9
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	4619      	mov	r1, r3
 800abd6:	f04f 0200 	mov.w	r2, #0
 800abda:	f04f 0300 	mov.w	r3, #0
 800abde:	f04f 0400 	mov.w	r4, #0
 800abe2:	0094      	lsls	r4, r2, #2
 800abe4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abe8:	008b      	lsls	r3, r1, #2
 800abea:	461a      	mov	r2, r3
 800abec:	4623      	mov	r3, r4
 800abee:	4628      	mov	r0, r5
 800abf0:	4631      	mov	r1, r6
 800abf2:	f7f6 f861 	bl	8000cb8 <__aeabi_uldivmod>
 800abf6:	4603      	mov	r3, r0
 800abf8:	460c      	mov	r4, r1
 800abfa:	461a      	mov	r2, r3
 800abfc:	4bb8      	ldr	r3, [pc, #736]	; (800aee0 <UART_SetConfig+0x6f4>)
 800abfe:	fba3 2302 	umull	r2, r3, r3, r2
 800ac02:	095b      	lsrs	r3, r3, #5
 800ac04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	469b      	mov	fp, r3
 800ac0c:	f04f 0c00 	mov.w	ip, #0
 800ac10:	46d9      	mov	r9, fp
 800ac12:	46e2      	mov	sl, ip
 800ac14:	eb19 0309 	adds.w	r3, r9, r9
 800ac18:	eb4a 040a 	adc.w	r4, sl, sl
 800ac1c:	4699      	mov	r9, r3
 800ac1e:	46a2      	mov	sl, r4
 800ac20:	eb19 090b 	adds.w	r9, r9, fp
 800ac24:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac28:	f04f 0100 	mov.w	r1, #0
 800ac2c:	f04f 0200 	mov.w	r2, #0
 800ac30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac3c:	4689      	mov	r9, r1
 800ac3e:	4692      	mov	sl, r2
 800ac40:	eb1b 0509 	adds.w	r5, fp, r9
 800ac44:	eb4c 060a 	adc.w	r6, ip, sl
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	f04f 0200 	mov.w	r2, #0
 800ac52:	f04f 0300 	mov.w	r3, #0
 800ac56:	f04f 0400 	mov.w	r4, #0
 800ac5a:	0094      	lsls	r4, r2, #2
 800ac5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac60:	008b      	lsls	r3, r1, #2
 800ac62:	461a      	mov	r2, r3
 800ac64:	4623      	mov	r3, r4
 800ac66:	4628      	mov	r0, r5
 800ac68:	4631      	mov	r1, r6
 800ac6a:	f7f6 f825 	bl	8000cb8 <__aeabi_uldivmod>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	460c      	mov	r4, r1
 800ac72:	461a      	mov	r2, r3
 800ac74:	4b9a      	ldr	r3, [pc, #616]	; (800aee0 <UART_SetConfig+0x6f4>)
 800ac76:	fba3 1302 	umull	r1, r3, r3, r2
 800ac7a:	095b      	lsrs	r3, r3, #5
 800ac7c:	2164      	movs	r1, #100	; 0x64
 800ac7e:	fb01 f303 	mul.w	r3, r1, r3
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	011b      	lsls	r3, r3, #4
 800ac86:	3332      	adds	r3, #50	; 0x32
 800ac88:	4a95      	ldr	r2, [pc, #596]	; (800aee0 <UART_SetConfig+0x6f4>)
 800ac8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac8e:	095b      	lsrs	r3, r3, #5
 800ac90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac94:	4498      	add	r8, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	469b      	mov	fp, r3
 800ac9a:	f04f 0c00 	mov.w	ip, #0
 800ac9e:	46d9      	mov	r9, fp
 800aca0:	46e2      	mov	sl, ip
 800aca2:	eb19 0309 	adds.w	r3, r9, r9
 800aca6:	eb4a 040a 	adc.w	r4, sl, sl
 800acaa:	4699      	mov	r9, r3
 800acac:	46a2      	mov	sl, r4
 800acae:	eb19 090b 	adds.w	r9, r9, fp
 800acb2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800acb6:	f04f 0100 	mov.w	r1, #0
 800acba:	f04f 0200 	mov.w	r2, #0
 800acbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800acc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800acca:	4689      	mov	r9, r1
 800accc:	4692      	mov	sl, r2
 800acce:	eb1b 0509 	adds.w	r5, fp, r9
 800acd2:	eb4c 060a 	adc.w	r6, ip, sl
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	4619      	mov	r1, r3
 800acdc:	f04f 0200 	mov.w	r2, #0
 800ace0:	f04f 0300 	mov.w	r3, #0
 800ace4:	f04f 0400 	mov.w	r4, #0
 800ace8:	0094      	lsls	r4, r2, #2
 800acea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800acee:	008b      	lsls	r3, r1, #2
 800acf0:	461a      	mov	r2, r3
 800acf2:	4623      	mov	r3, r4
 800acf4:	4628      	mov	r0, r5
 800acf6:	4631      	mov	r1, r6
 800acf8:	f7f5 ffde 	bl	8000cb8 <__aeabi_uldivmod>
 800acfc:	4603      	mov	r3, r0
 800acfe:	460c      	mov	r4, r1
 800ad00:	461a      	mov	r2, r3
 800ad02:	4b77      	ldr	r3, [pc, #476]	; (800aee0 <UART_SetConfig+0x6f4>)
 800ad04:	fba3 1302 	umull	r1, r3, r3, r2
 800ad08:	095b      	lsrs	r3, r3, #5
 800ad0a:	2164      	movs	r1, #100	; 0x64
 800ad0c:	fb01 f303 	mul.w	r3, r1, r3
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	3332      	adds	r3, #50	; 0x32
 800ad16:	4a72      	ldr	r2, [pc, #456]	; (800aee0 <UART_SetConfig+0x6f4>)
 800ad18:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1c:	095b      	lsrs	r3, r3, #5
 800ad1e:	f003 020f 	and.w	r2, r3, #15
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4442      	add	r2, r8
 800ad28:	609a      	str	r2, [r3, #8]
 800ad2a:	e0d0      	b.n	800aece <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad2c:	f7fc f95c 	bl	8006fe8 <HAL_RCC_GetPCLK1Freq>
 800ad30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	469a      	mov	sl, r3
 800ad36:	f04f 0b00 	mov.w	fp, #0
 800ad3a:	46d0      	mov	r8, sl
 800ad3c:	46d9      	mov	r9, fp
 800ad3e:	eb18 0308 	adds.w	r3, r8, r8
 800ad42:	eb49 0409 	adc.w	r4, r9, r9
 800ad46:	4698      	mov	r8, r3
 800ad48:	46a1      	mov	r9, r4
 800ad4a:	eb18 080a 	adds.w	r8, r8, sl
 800ad4e:	eb49 090b 	adc.w	r9, r9, fp
 800ad52:	f04f 0100 	mov.w	r1, #0
 800ad56:	f04f 0200 	mov.w	r2, #0
 800ad5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ad5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ad62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ad66:	4688      	mov	r8, r1
 800ad68:	4691      	mov	r9, r2
 800ad6a:	eb1a 0508 	adds.w	r5, sl, r8
 800ad6e:	eb4b 0609 	adc.w	r6, fp, r9
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	4619      	mov	r1, r3
 800ad78:	f04f 0200 	mov.w	r2, #0
 800ad7c:	f04f 0300 	mov.w	r3, #0
 800ad80:	f04f 0400 	mov.w	r4, #0
 800ad84:	0094      	lsls	r4, r2, #2
 800ad86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad8a:	008b      	lsls	r3, r1, #2
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	4623      	mov	r3, r4
 800ad90:	4628      	mov	r0, r5
 800ad92:	4631      	mov	r1, r6
 800ad94:	f7f5 ff90 	bl	8000cb8 <__aeabi_uldivmod>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	4b50      	ldr	r3, [pc, #320]	; (800aee0 <UART_SetConfig+0x6f4>)
 800ada0:	fba3 2302 	umull	r2, r3, r3, r2
 800ada4:	095b      	lsrs	r3, r3, #5
 800ada6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	469b      	mov	fp, r3
 800adae:	f04f 0c00 	mov.w	ip, #0
 800adb2:	46d9      	mov	r9, fp
 800adb4:	46e2      	mov	sl, ip
 800adb6:	eb19 0309 	adds.w	r3, r9, r9
 800adba:	eb4a 040a 	adc.w	r4, sl, sl
 800adbe:	4699      	mov	r9, r3
 800adc0:	46a2      	mov	sl, r4
 800adc2:	eb19 090b 	adds.w	r9, r9, fp
 800adc6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800adca:	f04f 0100 	mov.w	r1, #0
 800adce:	f04f 0200 	mov.w	r2, #0
 800add2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800add6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800adda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800adde:	4689      	mov	r9, r1
 800ade0:	4692      	mov	sl, r2
 800ade2:	eb1b 0509 	adds.w	r5, fp, r9
 800ade6:	eb4c 060a 	adc.w	r6, ip, sl
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	4619      	mov	r1, r3
 800adf0:	f04f 0200 	mov.w	r2, #0
 800adf4:	f04f 0300 	mov.w	r3, #0
 800adf8:	f04f 0400 	mov.w	r4, #0
 800adfc:	0094      	lsls	r4, r2, #2
 800adfe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ae02:	008b      	lsls	r3, r1, #2
 800ae04:	461a      	mov	r2, r3
 800ae06:	4623      	mov	r3, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	4631      	mov	r1, r6
 800ae0c:	f7f5 ff54 	bl	8000cb8 <__aeabi_uldivmod>
 800ae10:	4603      	mov	r3, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	461a      	mov	r2, r3
 800ae16:	4b32      	ldr	r3, [pc, #200]	; (800aee0 <UART_SetConfig+0x6f4>)
 800ae18:	fba3 1302 	umull	r1, r3, r3, r2
 800ae1c:	095b      	lsrs	r3, r3, #5
 800ae1e:	2164      	movs	r1, #100	; 0x64
 800ae20:	fb01 f303 	mul.w	r3, r1, r3
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	011b      	lsls	r3, r3, #4
 800ae28:	3332      	adds	r3, #50	; 0x32
 800ae2a:	4a2d      	ldr	r2, [pc, #180]	; (800aee0 <UART_SetConfig+0x6f4>)
 800ae2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae30:	095b      	lsrs	r3, r3, #5
 800ae32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae36:	4498      	add	r8, r3
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	469b      	mov	fp, r3
 800ae3c:	f04f 0c00 	mov.w	ip, #0
 800ae40:	46d9      	mov	r9, fp
 800ae42:	46e2      	mov	sl, ip
 800ae44:	eb19 0309 	adds.w	r3, r9, r9
 800ae48:	eb4a 040a 	adc.w	r4, sl, sl
 800ae4c:	4699      	mov	r9, r3
 800ae4e:	46a2      	mov	sl, r4
 800ae50:	eb19 090b 	adds.w	r9, r9, fp
 800ae54:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ae58:	f04f 0100 	mov.w	r1, #0
 800ae5c:	f04f 0200 	mov.w	r2, #0
 800ae60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae6c:	4689      	mov	r9, r1
 800ae6e:	4692      	mov	sl, r2
 800ae70:	eb1b 0509 	adds.w	r5, fp, r9
 800ae74:	eb4c 060a 	adc.w	r6, ip, sl
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f04f 0200 	mov.w	r2, #0
 800ae82:	f04f 0300 	mov.w	r3, #0
 800ae86:	f04f 0400 	mov.w	r4, #0
 800ae8a:	0094      	lsls	r4, r2, #2
 800ae8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ae90:	008b      	lsls	r3, r1, #2
 800ae92:	461a      	mov	r2, r3
 800ae94:	4623      	mov	r3, r4
 800ae96:	4628      	mov	r0, r5
 800ae98:	4631      	mov	r1, r6
 800ae9a:	f7f5 ff0d 	bl	8000cb8 <__aeabi_uldivmod>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	460c      	mov	r4, r1
 800aea2:	461a      	mov	r2, r3
 800aea4:	4b0e      	ldr	r3, [pc, #56]	; (800aee0 <UART_SetConfig+0x6f4>)
 800aea6:	fba3 1302 	umull	r1, r3, r3, r2
 800aeaa:	095b      	lsrs	r3, r3, #5
 800aeac:	2164      	movs	r1, #100	; 0x64
 800aeae:	fb01 f303 	mul.w	r3, r1, r3
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	011b      	lsls	r3, r3, #4
 800aeb6:	3332      	adds	r3, #50	; 0x32
 800aeb8:	4a09      	ldr	r2, [pc, #36]	; (800aee0 <UART_SetConfig+0x6f4>)
 800aeba:	fba2 2303 	umull	r2, r3, r2, r3
 800aebe:	095b      	lsrs	r3, r3, #5
 800aec0:	f003 020f 	and.w	r2, r3, #15
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4442      	add	r2, r8
 800aeca:	609a      	str	r2, [r3, #8]
}
 800aecc:	e7ff      	b.n	800aece <UART_SetConfig+0x6e2>
 800aece:	bf00      	nop
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed8:	40011000 	.word	0x40011000
 800aedc:	40011400 	.word	0x40011400
 800aee0:	51eb851f 	.word	0x51eb851f

0800aee4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800aee4:	b084      	sub	sp, #16
 800aee6:	b480      	push	{r7}
 800aee8:	b085      	sub	sp, #20
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	f107 001c 	add.w	r0, r7, #28
 800aef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aefa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aefc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aefe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800af02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800af06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800af0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800af0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800af1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	431a      	orrs	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	b004      	add	sp, #16
 800af38:	4770      	bx	lr

0800af3a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b083      	sub	sp, #12
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800af48:	4618      	mov	r0, r3
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800af76:	b580      	push	{r7, lr}
 800af78:	b082      	sub	sp, #8
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2203      	movs	r2, #3
 800af82:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800af84:	2002      	movs	r0, #2
 800af86:	f7f9 ff0f 	bl	8004da8 <HAL_Delay>
  
  return HAL_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 0303 	and.w	r3, r3, #3
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800afce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800afd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800afda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	4313      	orrs	r3, r2
 800afe0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800afea:	f023 030f 	bic.w	r3, r3, #15
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	431a      	orrs	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	b2db      	uxtb	r3, r3
}
 800b012:	4618      	mov	r0, r3
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b01e:	b480      	push	{r7}
 800b020:	b085      	sub	sp, #20
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3314      	adds	r3, #20
 800b02c:	461a      	mov	r2, r3
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	4413      	add	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
}  
 800b038:	4618      	mov	r0, r3
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b06a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b070:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b076:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	431a      	orrs	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b08e:	2300      	movs	r3, #0

}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b088      	sub	sp, #32
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b0aa:	2310      	movs	r3, #16
 800b0ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0ae:	2340      	movs	r3, #64	; 0x40
 800b0b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0bc:	f107 0308 	add.w	r3, r7, #8
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff ff74 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b0c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0cc:	2110      	movs	r1, #16
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fa40 	bl	800b554 <SDMMC_GetCmdResp1>
 800b0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0d6:	69fb      	ldr	r3, [r7, #28]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3720      	adds	r7, #32
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b0ee:	2311      	movs	r3, #17
 800b0f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0f2:	2340      	movs	r3, #64	; 0x40
 800b0f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b100:	f107 0308 	add.w	r3, r7, #8
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7ff ff52 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b110:	2111      	movs	r1, #17
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fa1e 	bl	800b554 <SDMMC_GetCmdResp1>
 800b118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b11a:	69fb      	ldr	r3, [r7, #28]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3720      	adds	r7, #32
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b088      	sub	sp, #32
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b132:	2312      	movs	r3, #18
 800b134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b136:	2340      	movs	r3, #64	; 0x40
 800b138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b13a:	2300      	movs	r3, #0
 800b13c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b13e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b142:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b144:	f107 0308 	add.w	r3, r7, #8
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7ff ff30 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b150:	f241 3288 	movw	r2, #5000	; 0x1388
 800b154:	2112      	movs	r1, #18
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f9fc 	bl	800b554 <SDMMC_GetCmdResp1>
 800b15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b15e:	69fb      	ldr	r3, [r7, #28]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3720      	adds	r7, #32
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b176:	2318      	movs	r3, #24
 800b178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b17a:	2340      	movs	r3, #64	; 0x40
 800b17c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b17e:	2300      	movs	r3, #0
 800b180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b186:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b188:	f107 0308 	add.w	r3, r7, #8
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff ff0e 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b194:	f241 3288 	movw	r2, #5000	; 0x1388
 800b198:	2118      	movs	r1, #24
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f9da 	bl	800b554 <SDMMC_GetCmdResp1>
 800b1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1a2:	69fb      	ldr	r3, [r7, #28]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3720      	adds	r7, #32
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b1ba:	2319      	movs	r3, #25
 800b1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1be:	2340      	movs	r3, #64	; 0x40
 800b1c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1cc:	f107 0308 	add.w	r3, r7, #8
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff feec 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1dc:	2119      	movs	r1, #25
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f9b8 	bl	800b554 <SDMMC_GetCmdResp1>
 800b1e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1e6:	69fb      	ldr	r3, [r7, #28]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3720      	adds	r7, #32
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b088      	sub	sp, #32
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b1fc:	230c      	movs	r3, #12
 800b1fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b200:	2340      	movs	r3, #64	; 0x40
 800b202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b204:	2300      	movs	r3, #0
 800b206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b20c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b20e:	f107 0308 	add.w	r3, r7, #8
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff fecb 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b21a:	4a05      	ldr	r2, [pc, #20]	; (800b230 <SDMMC_CmdStopTransfer+0x40>)
 800b21c:	210c      	movs	r1, #12
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f998 	bl	800b554 <SDMMC_GetCmdResp1>
 800b224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b226:	69fb      	ldr	r3, [r7, #28]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	05f5e100 	.word	0x05f5e100

0800b234 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b08a      	sub	sp, #40	; 0x28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b244:	2307      	movs	r3, #7
 800b246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b248:	2340      	movs	r3, #64	; 0x40
 800b24a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b24c:	2300      	movs	r3, #0
 800b24e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b254:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b256:	f107 0310 	add.w	r3, r7, #16
 800b25a:	4619      	mov	r1, r3
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f7ff fea7 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b262:	f241 3288 	movw	r2, #5000	; 0x1388
 800b266:	2107      	movs	r1, #7
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f000 f973 	bl	800b554 <SDMMC_GetCmdResp1>
 800b26e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b272:	4618      	mov	r0, r3
 800b274:	3728      	adds	r7, #40	; 0x28
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b088      	sub	sp, #32
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b282:	2300      	movs	r3, #0
 800b284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b286:	2300      	movs	r3, #0
 800b288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b28a:	2300      	movs	r3, #0
 800b28c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b28e:	2300      	movs	r3, #0
 800b290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b296:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b298:	f107 0308 	add.w	r3, r7, #8
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff fe86 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f92d 	bl	800b504 <SDMMC_GetCmdError>
 800b2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b088      	sub	sp, #32
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b2be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b2c4:	2308      	movs	r3, #8
 800b2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2c8:	2340      	movs	r3, #64	; 0x40
 800b2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2d6:	f107 0308 	add.w	r3, r7, #8
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff fe67 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fb16 	bl	800b914 <SDMMC_GetCmdResp7>
 800b2e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ea:	69fb      	ldr	r3, [r7, #28]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3720      	adds	r7, #32
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b302:	2337      	movs	r3, #55	; 0x37
 800b304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b306:	2340      	movs	r3, #64	; 0x40
 800b308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b312:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b314:	f107 0308 	add.w	r3, r7, #8
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7ff fe48 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b320:	f241 3288 	movw	r2, #5000	; 0x1388
 800b324:	2137      	movs	r1, #55	; 0x37
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f914 	bl	800b554 <SDMMC_GetCmdResp1>
 800b32c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b32e:	69fb      	ldr	r3, [r7, #28]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3720      	adds	r7, #32
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b088      	sub	sp, #32
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b34e:	2329      	movs	r3, #41	; 0x29
 800b350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b352:	2340      	movs	r3, #64	; 0x40
 800b354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b356:	2300      	movs	r3, #0
 800b358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b35e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b360:	f107 0308 	add.w	r3, r7, #8
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff fe22 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fa23 	bl	800b7b8 <SDMMC_GetCmdResp3>
 800b372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b374:	69fb      	ldr	r3, [r7, #28]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3720      	adds	r7, #32
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b088      	sub	sp, #32
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b38c:	2306      	movs	r3, #6
 800b38e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b390:	2340      	movs	r3, #64	; 0x40
 800b392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b39c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b39e:	f107 0308 	add.w	r3, r7, #8
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7ff fe03 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ae:	2106      	movs	r1, #6
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f8cf 	bl	800b554 <SDMMC_GetCmdResp1>
 800b3b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3720      	adds	r7, #32
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b088      	sub	sp, #32
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b3ce:	2333      	movs	r3, #51	; 0x33
 800b3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3d2:	2340      	movs	r3, #64	; 0x40
 800b3d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3e0:	f107 0308 	add.w	r3, r7, #8
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7ff fde2 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f0:	2133      	movs	r1, #51	; 0x33
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f8ae 	bl	800b554 <SDMMC_GetCmdResp1>
 800b3f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3fa:	69fb      	ldr	r3, [r7, #28]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3720      	adds	r7, #32
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b088      	sub	sp, #32
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b410:	2302      	movs	r3, #2
 800b412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b414:	23c0      	movs	r3, #192	; 0xc0
 800b416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b418:	2300      	movs	r3, #0
 800b41a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b41c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b420:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b422:	f107 0308 	add.w	r3, r7, #8
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7ff fdc1 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f97c 	bl	800b72c <SDMMC_GetCmdResp2>
 800b434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b436:	69fb      	ldr	r3, [r7, #28]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3720      	adds	r7, #32
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b088      	sub	sp, #32
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b44e:	2309      	movs	r3, #9
 800b450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b452:	23c0      	movs	r3, #192	; 0xc0
 800b454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b456:	2300      	movs	r3, #0
 800b458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b45a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b45e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b460:	f107 0308 	add.w	r3, r7, #8
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff fda2 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f95d 	bl	800b72c <SDMMC_GetCmdResp2>
 800b472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b474:	69fb      	ldr	r3, [r7, #28]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3720      	adds	r7, #32
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b088      	sub	sp, #32
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b488:	2300      	movs	r3, #0
 800b48a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b48c:	2303      	movs	r3, #3
 800b48e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b494:	2300      	movs	r3, #0
 800b496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b49c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b49e:	f107 0308 	add.w	r3, r7, #8
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff fd83 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	2103      	movs	r1, #3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f9bc 	bl	800b82c <SDMMC_GetCmdResp6>
 800b4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4b6:	69fb      	ldr	r3, [r7, #28]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3720      	adds	r7, #32
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b4ce:	230d      	movs	r3, #13
 800b4d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4d2:	2340      	movs	r3, #64	; 0x40
 800b4d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4e0:	f107 0308 	add.w	r3, r7, #8
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff fd62 	bl	800afb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f0:	210d      	movs	r1, #13
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f82e 	bl	800b554 <SDMMC_GetCmdResp1>
 800b4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b504:	b490      	push	{r4, r7}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b50c:	4b0f      	ldr	r3, [pc, #60]	; (800b54c <SDMMC_GetCmdError+0x48>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a0f      	ldr	r2, [pc, #60]	; (800b550 <SDMMC_GetCmdError+0x4c>)
 800b512:	fba2 2303 	umull	r2, r3, r2, r3
 800b516:	0a5b      	lsrs	r3, r3, #9
 800b518:	f241 3288 	movw	r2, #5000	; 0x1388
 800b51c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b520:	4623      	mov	r3, r4
 800b522:	1e5c      	subs	r4, r3, #1
 800b524:	2b00      	cmp	r3, #0
 800b526:	d102      	bne.n	800b52e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b528:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b52c:	e009      	b.n	800b542 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0f2      	beq.n	800b520 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	22c5      	movs	r2, #197	; 0xc5
 800b53e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bc90      	pop	{r4, r7}
 800b54a:	4770      	bx	lr
 800b54c:	20000000 	.word	0x20000000
 800b550:	10624dd3 	.word	0x10624dd3

0800b554 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b554:	b590      	push	{r4, r7, lr}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	460b      	mov	r3, r1
 800b55e:	607a      	str	r2, [r7, #4]
 800b560:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b562:	4b6f      	ldr	r3, [pc, #444]	; (800b720 <SDMMC_GetCmdResp1+0x1cc>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a6f      	ldr	r2, [pc, #444]	; (800b724 <SDMMC_GetCmdResp1+0x1d0>)
 800b568:	fba2 2303 	umull	r2, r3, r2, r3
 800b56c:	0a5b      	lsrs	r3, r3, #9
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b574:	4623      	mov	r3, r4
 800b576:	1e5c      	subs	r4, r3, #1
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d102      	bne.n	800b582 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b57c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b580:	e0c9      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b586:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d0f0      	beq.n	800b574 <SDMMC_GetCmdResp1+0x20>
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1eb      	bne.n	800b574 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a0:	f003 0304 	and.w	r3, r3, #4
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d004      	beq.n	800b5b2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2204      	movs	r2, #4
 800b5ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5ae:	2304      	movs	r3, #4
 800b5b0:	e0b1      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d004      	beq.n	800b5c8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e0a6      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	22c5      	movs	r2, #197	; 0xc5
 800b5cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f7ff fd18 	bl	800b004 <SDIO_GetCommandResponse>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	7afb      	ldrb	r3, [r7, #11]
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d001      	beq.n	800b5e2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e099      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f7ff fd1a 	bl	800b01e <SDIO_GetResponse>
 800b5ea:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	4b4e      	ldr	r3, [pc, #312]	; (800b728 <SDMMC_GetCmdResp1+0x1d4>)
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e08d      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	da02      	bge.n	800b606 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b604:	e087      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b610:	2340      	movs	r3, #64	; 0x40
 800b612:	e080      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b61e:	2380      	movs	r3, #128	; 0x80
 800b620:	e079      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b62c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b630:	e071      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b63c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b640:	e069      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b64c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b650:	e061      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b65c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b660:	e059      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b670:	e051      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b67c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b680:	e049      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b68c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b690:	e041      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b69c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6a0:	e039      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b6ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6b0:	e031      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b6bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6c0:	e029      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6d0:	e021      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6e0:	e019      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b6ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6f0:	e011      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b6fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b700:	e009      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	f003 0308 	and.w	r3, r3, #8
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b70c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b710:	e001      	b.n	800b716 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b716:	4618      	mov	r0, r3
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd90      	pop	{r4, r7, pc}
 800b71e:	bf00      	nop
 800b720:	20000000 	.word	0x20000000
 800b724:	10624dd3 	.word	0x10624dd3
 800b728:	fdffe008 	.word	0xfdffe008

0800b72c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b72c:	b490      	push	{r4, r7}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b734:	4b1e      	ldr	r3, [pc, #120]	; (800b7b0 <SDMMC_GetCmdResp2+0x84>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a1e      	ldr	r2, [pc, #120]	; (800b7b4 <SDMMC_GetCmdResp2+0x88>)
 800b73a:	fba2 2303 	umull	r2, r3, r2, r3
 800b73e:	0a5b      	lsrs	r3, r3, #9
 800b740:	f241 3288 	movw	r2, #5000	; 0x1388
 800b744:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b748:	4623      	mov	r3, r4
 800b74a:	1e5c      	subs	r4, r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d102      	bne.n	800b756 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b754:	e026      	b.n	800b7a4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b762:	2b00      	cmp	r3, #0
 800b764:	d0f0      	beq.n	800b748 <SDMMC_GetCmdResp2+0x1c>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1eb      	bne.n	800b748 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b774:	f003 0304 	and.w	r3, r3, #4
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d004      	beq.n	800b786 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2204      	movs	r2, #4
 800b780:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b782:	2304      	movs	r3, #4
 800b784:	e00e      	b.n	800b7a4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78a:	f003 0301 	and.w	r3, r3, #1
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d004      	beq.n	800b79c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b798:	2301      	movs	r3, #1
 800b79a:	e003      	b.n	800b7a4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	22c5      	movs	r2, #197	; 0xc5
 800b7a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bc90      	pop	{r4, r7}
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	20000000 	.word	0x20000000
 800b7b4:	10624dd3 	.word	0x10624dd3

0800b7b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b7b8:	b490      	push	{r4, r7}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7c0:	4b18      	ldr	r3, [pc, #96]	; (800b824 <SDMMC_GetCmdResp3+0x6c>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a18      	ldr	r2, [pc, #96]	; (800b828 <SDMMC_GetCmdResp3+0x70>)
 800b7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ca:	0a5b      	lsrs	r3, r3, #9
 800b7cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7d4:	4623      	mov	r3, r4
 800b7d6:	1e5c      	subs	r4, r3, #1
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7e0:	e01b      	b.n	800b81a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0f0      	beq.n	800b7d4 <SDMMC_GetCmdResp3+0x1c>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1eb      	bne.n	800b7d4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2204      	movs	r2, #4
 800b80c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b80e:	2304      	movs	r3, #4
 800b810:	e003      	b.n	800b81a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	22c5      	movs	r2, #197	; 0xc5
 800b816:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bc90      	pop	{r4, r7}
 800b822:	4770      	bx	lr
 800b824:	20000000 	.word	0x20000000
 800b828:	10624dd3 	.word	0x10624dd3

0800b82c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b82c:	b590      	push	{r4, r7, lr}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	460b      	mov	r3, r1
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b83a:	4b34      	ldr	r3, [pc, #208]	; (800b90c <SDMMC_GetCmdResp6+0xe0>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a34      	ldr	r2, [pc, #208]	; (800b910 <SDMMC_GetCmdResp6+0xe4>)
 800b840:	fba2 2303 	umull	r2, r3, r2, r3
 800b844:	0a5b      	lsrs	r3, r3, #9
 800b846:	f241 3288 	movw	r2, #5000	; 0x1388
 800b84a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b84e:	4623      	mov	r3, r4
 800b850:	1e5c      	subs	r4, r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	d102      	bne.n	800b85c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b856:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b85a:	e052      	b.n	800b902 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b860:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d0f0      	beq.n	800b84e <SDMMC_GetCmdResp6+0x22>
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1eb      	bne.n	800b84e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87a:	f003 0304 	and.w	r3, r3, #4
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d004      	beq.n	800b88c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2204      	movs	r2, #4
 800b886:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b888:	2304      	movs	r3, #4
 800b88a:	e03a      	b.n	800b902 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2201      	movs	r2, #1
 800b89c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e02f      	b.n	800b902 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f7ff fbae 	bl	800b004 <SDIO_GetCommandResponse>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	7afb      	ldrb	r3, [r7, #11]
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d001      	beq.n	800b8b6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e025      	b.n	800b902 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	22c5      	movs	r2, #197	; 0xc5
 800b8ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b8bc:	2100      	movs	r1, #0
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7ff fbad 	bl	800b01e <SDIO_GetResponse>
 800b8c4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d106      	bne.n	800b8de <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	0c1b      	lsrs	r3, r3, #16
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e011      	b.n	800b902 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8ec:	e009      	b.n	800b902 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8fc:	e001      	b.n	800b902 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b8fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b902:	4618      	mov	r0, r3
 800b904:	371c      	adds	r7, #28
 800b906:	46bd      	mov	sp, r7
 800b908:	bd90      	pop	{r4, r7, pc}
 800b90a:	bf00      	nop
 800b90c:	20000000 	.word	0x20000000
 800b910:	10624dd3 	.word	0x10624dd3

0800b914 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b914:	b490      	push	{r4, r7}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b91c:	4b21      	ldr	r3, [pc, #132]	; (800b9a4 <SDMMC_GetCmdResp7+0x90>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a21      	ldr	r2, [pc, #132]	; (800b9a8 <SDMMC_GetCmdResp7+0x94>)
 800b922:	fba2 2303 	umull	r2, r3, r2, r3
 800b926:	0a5b      	lsrs	r3, r3, #9
 800b928:	f241 3288 	movw	r2, #5000	; 0x1388
 800b92c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b930:	4623      	mov	r3, r4
 800b932:	1e5c      	subs	r4, r3, #1
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b938:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b93c:	e02c      	b.n	800b998 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b942:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d0f0      	beq.n	800b930 <SDMMC_GetCmdResp7+0x1c>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1eb      	bne.n	800b930 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95c:	f003 0304 	and.w	r3, r3, #4
 800b960:	2b00      	cmp	r3, #0
 800b962:	d004      	beq.n	800b96e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2204      	movs	r2, #4
 800b968:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b96a:	2304      	movs	r3, #4
 800b96c:	e014      	b.n	800b998 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	2b00      	cmp	r3, #0
 800b978:	d004      	beq.n	800b984 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b980:	2301      	movs	r3, #1
 800b982:	e009      	b.n	800b998 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2240      	movs	r2, #64	; 0x40
 800b994:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b996:	2300      	movs	r3, #0
  
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bc90      	pop	{r4, r7}
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	20000000 	.word	0x20000000
 800b9a8:	10624dd3 	.word	0x10624dd3

0800b9ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b9b0:	4904      	ldr	r1, [pc, #16]	; (800b9c4 <MX_FATFS_Init+0x18>)
 800b9b2:	4805      	ldr	r0, [pc, #20]	; (800b9c8 <MX_FATFS_Init+0x1c>)
 800b9b4:	f004 f874 	bl	800faa0 <FATFS_LinkDriver>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4b03      	ldr	r3, [pc, #12]	; (800b9cc <MX_FATFS_Init+0x20>)
 800b9be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b9c0:	bf00      	nop
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	2000a5a0 	.word	0x2000a5a0
 800b9c8:	08014cb4 	.word	0x08014cb4
 800b9cc:	2000a59c 	.word	0x2000a59c

0800b9d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b9d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b9ea:	f000 f896 	bl	800bb1a <BSP_SD_IsDetected>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d001      	beq.n	800b9f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e012      	b.n	800ba1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b9f8:	480b      	ldr	r0, [pc, #44]	; (800ba28 <BSP_SD_Init+0x48>)
 800b9fa:	f7fb ff9d 	bl	8007938 <HAL_SD_Init>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d109      	bne.n	800ba1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ba08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ba0c:	4806      	ldr	r0, [pc, #24]	; (800ba28 <BSP_SD_Init+0x48>)
 800ba0e:	f7fc fd47 	bl	80084a0 <HAL_SD_ConfigWideBusOperation>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d001      	beq.n	800ba1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	2000a434 	.word	0x2000a434

0800ba2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	68f9      	ldr	r1, [r7, #12]
 800ba42:	4806      	ldr	r0, [pc, #24]	; (800ba5c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ba44:	f7fc f808 	bl	8007a58 <HAL_SD_ReadBlocks_DMA>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3718      	adds	r7, #24
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	2000a434 	.word	0x2000a434

0800ba60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	68f9      	ldr	r1, [r7, #12]
 800ba76:	4806      	ldr	r0, [pc, #24]	; (800ba90 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ba78:	f7fc f8d6 	bl	8007c28 <HAL_SD_WriteBlocks_DMA>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d001      	beq.n	800ba86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3718      	adds	r7, #24
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	2000a434 	.word	0x2000a434

0800ba94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ba98:	4805      	ldr	r0, [pc, #20]	; (800bab0 <BSP_SD_GetCardState+0x1c>)
 800ba9a:	f7fc fd7d 	bl	8008598 <HAL_SD_GetCardState>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b04      	cmp	r3, #4
 800baa2:	bf14      	ite	ne
 800baa4:	2301      	movne	r3, #1
 800baa6:	2300      	moveq	r3, #0
 800baa8:	b2db      	uxtb	r3, r3
}
 800baaa:	4618      	mov	r0, r3
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	2000a434 	.word	0x2000a434

0800bab4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	4803      	ldr	r0, [pc, #12]	; (800bacc <BSP_SD_GetCardInfo+0x18>)
 800bac0:	f7fc fcc2 	bl	8008448 <HAL_SD_GetCardInfo>
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	2000a434 	.word	0x2000a434

0800bad0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800bad8:	f000 f818 	bl	800bb0c <BSP_SD_AbortCallback>
}
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800baec:	f000 f9a8 	bl	800be40 <BSP_SD_WriteCpltCallback>
}
 800baf0:	bf00      	nop
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bb00:	f000 f9aa 	bl	800be58 <BSP_SD_ReadCpltCallback>
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	af00      	add	r7, sp, #0

}
 800bb10:	bf00      	nop
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bb20:	2301      	movs	r3, #1
 800bb22:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bb24:	f000 f80c 	bl	800bb40 <BSP_PlatformIsDetected>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bb32:	79fb      	ldrb	r3, [r7, #7]
 800bb34:	b2db      	uxtb	r3, r3
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
	...

0800bb40 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bb46:	2301      	movs	r3, #1
 800bb48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bb4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb4e:	4806      	ldr	r0, [pc, #24]	; (800bb68 <BSP_PlatformIsDetected+0x28>)
 800bb50:	f7fa fba8 	bl	80062a4 <HAL_GPIO_ReadPin>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	40020000 	.word	0x40020000

0800bb6c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bb74:	f7f9 f90c 	bl	8004d90 <HAL_GetTick>
 800bb78:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bb7a:	e006      	b.n	800bb8a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb7c:	f7ff ff8a 	bl	800ba94 <BSP_SD_GetCardState>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	e009      	b.n	800bb9e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bb8a:	f7f9 f901 	bl	8004d90 <HAL_GetTick>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	1ad3      	subs	r3, r2, r3
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d8f0      	bhi.n	800bb7c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bb9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
	...

0800bba8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bbb2:	4b0b      	ldr	r3, [pc, #44]	; (800bbe0 <SD_CheckStatus+0x38>)
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bbb8:	f7ff ff6c 	bl	800ba94 <BSP_SD_GetCardState>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d107      	bne.n	800bbd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bbc2:	4b07      	ldr	r3, [pc, #28]	; (800bbe0 <SD_CheckStatus+0x38>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	f023 0301 	bic.w	r3, r3, #1
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <SD_CheckStatus+0x38>)
 800bbd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bbd2:	4b03      	ldr	r3, [pc, #12]	; (800bbe0 <SD_CheckStatus+0x38>)
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	b2db      	uxtb	r3, r3
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	20000009 	.word	0x20000009

0800bbe4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bbee:	f7ff fef7 	bl	800b9e0 <BSP_SD_Init>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d107      	bne.n	800bc08 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff ffd4 	bl	800bba8 <SD_CheckStatus>
 800bc00:	4603      	mov	r3, r0
 800bc02:	461a      	mov	r2, r3
 800bc04:	4b04      	ldr	r3, [pc, #16]	; (800bc18 <SD_initialize+0x34>)
 800bc06:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bc08:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <SD_initialize+0x34>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	b2db      	uxtb	r3, r3
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	20000009 	.word	0x20000009

0800bc1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bc26:	79fb      	ldrb	r3, [r7, #7]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7ff ffbd 	bl	800bba8 <SD_CheckStatus>
 800bc2e:	4603      	mov	r3, r0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	607a      	str	r2, [r7, #4]
 800bc42:	603b      	str	r3, [r7, #0]
 800bc44:	4603      	mov	r3, r0
 800bc46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc4c:	f247 5030 	movw	r0, #30000	; 0x7530
 800bc50:	f7ff ff8c 	bl	800bb6c <SD_CheckStatusWithTimeout>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	da01      	bge.n	800bc5e <SD_read+0x26>
  {
    return res;
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
 800bc5c:	e03b      	b.n	800bcd6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	6879      	ldr	r1, [r7, #4]
 800bc62:	68b8      	ldr	r0, [r7, #8]
 800bc64:	f7ff fee2 	bl	800ba2c <BSP_SD_ReadBlocks_DMA>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d132      	bne.n	800bcd4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bc6e:	4b1c      	ldr	r3, [pc, #112]	; (800bce0 <SD_read+0xa8>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bc74:	f7f9 f88c 	bl	8004d90 <HAL_GetTick>
 800bc78:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bc7a:	bf00      	nop
 800bc7c:	4b18      	ldr	r3, [pc, #96]	; (800bce0 <SD_read+0xa8>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d108      	bne.n	800bc96 <SD_read+0x5e>
 800bc84:	f7f9 f884 	bl	8004d90 <HAL_GetTick>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	1ad3      	subs	r3, r2, r3
 800bc8e:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d9f2      	bls.n	800bc7c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800bc96:	4b12      	ldr	r3, [pc, #72]	; (800bce0 <SD_read+0xa8>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d102      	bne.n	800bca4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	75fb      	strb	r3, [r7, #23]
 800bca2:	e017      	b.n	800bcd4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bca4:	4b0e      	ldr	r3, [pc, #56]	; (800bce0 <SD_read+0xa8>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bcaa:	f7f9 f871 	bl	8004d90 <HAL_GetTick>
 800bcae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bcb0:	e007      	b.n	800bcc2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bcb2:	f7ff feef 	bl	800ba94 <BSP_SD_GetCardState>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <SD_read+0x8a>
          {
            res = RES_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bcc0:	e008      	b.n	800bcd4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bcc2:	f7f9 f865 	bl	8004d90 <HAL_GetTick>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	f247 522f 	movw	r2, #29999	; 0x752f
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d9ee      	bls.n	800bcb2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20007acc 	.word	0x20007acc

0800bce4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60b9      	str	r1, [r7, #8]
 800bcec:	607a      	str	r2, [r7, #4]
 800bcee:	603b      	str	r3, [r7, #0]
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bcf8:	4b24      	ldr	r3, [pc, #144]	; (800bd8c <SD_write+0xa8>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bcfe:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd02:	f7ff ff33 	bl	800bb6c <SD_CheckStatusWithTimeout>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	da01      	bge.n	800bd10 <SD_write+0x2c>
  {
    return res;
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	e038      	b.n	800bd82 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	68b8      	ldr	r0, [r7, #8]
 800bd16:	f7ff fea3 	bl	800ba60 <BSP_SD_WriteBlocks_DMA>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d12f      	bne.n	800bd80 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bd20:	f7f9 f836 	bl	8004d90 <HAL_GetTick>
 800bd24:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bd26:	bf00      	nop
 800bd28:	4b18      	ldr	r3, [pc, #96]	; (800bd8c <SD_write+0xa8>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d108      	bne.n	800bd42 <SD_write+0x5e>
 800bd30:	f7f9 f82e 	bl	8004d90 <HAL_GetTick>
 800bd34:	4602      	mov	r2, r0
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d9f2      	bls.n	800bd28 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800bd42:	4b12      	ldr	r3, [pc, #72]	; (800bd8c <SD_write+0xa8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d102      	bne.n	800bd50 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	75fb      	strb	r3, [r7, #23]
 800bd4e:	e017      	b.n	800bd80 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800bd50:	4b0e      	ldr	r3, [pc, #56]	; (800bd8c <SD_write+0xa8>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bd56:	f7f9 f81b 	bl	8004d90 <HAL_GetTick>
 800bd5a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bd5c:	e007      	b.n	800bd6e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd5e:	f7ff fe99 	bl	800ba94 <BSP_SD_GetCardState>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d102      	bne.n	800bd6e <SD_write+0x8a>
          {
            res = RES_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	75fb      	strb	r3, [r7, #23]
            break;
 800bd6c:	e008      	b.n	800bd80 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bd6e:	f7f9 f80f 	bl	8004d90 <HAL_GetTick>
 800bd72:	4602      	mov	r2, r0
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d9ee      	bls.n	800bd5e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20007ac8 	.word	0x20007ac8

0800bd90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08c      	sub	sp, #48	; 0x30
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	603a      	str	r2, [r7, #0]
 800bd9a:	71fb      	strb	r3, [r7, #7]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bda6:	4b25      	ldr	r3, [pc, #148]	; (800be3c <SD_ioctl+0xac>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <SD_ioctl+0x28>
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e03c      	b.n	800be32 <SD_ioctl+0xa2>

  switch (cmd)
 800bdb8:	79bb      	ldrb	r3, [r7, #6]
 800bdba:	2b03      	cmp	r3, #3
 800bdbc:	d834      	bhi.n	800be28 <SD_ioctl+0x98>
 800bdbe:	a201      	add	r2, pc, #4	; (adr r2, 800bdc4 <SD_ioctl+0x34>)
 800bdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc4:	0800bdd5 	.word	0x0800bdd5
 800bdc8:	0800bddd 	.word	0x0800bddd
 800bdcc:	0800bdf5 	.word	0x0800bdf5
 800bdd0:	0800be0f 	.word	0x0800be0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdda:	e028      	b.n	800be2e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bddc:	f107 030c 	add.w	r3, r7, #12
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7ff fe67 	bl	800bab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bde6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdf2:	e01c      	b.n	800be2e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdf4:	f107 030c 	add.w	r3, r7, #12
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff fe5b 	bl	800bab4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	b29a      	uxth	r2, r3
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be0c:	e00f      	b.n	800be2e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be0e:	f107 030c 	add.w	r3, r7, #12
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff fe4e 	bl	800bab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	0a5a      	lsrs	r2, r3, #9
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be26:	e002      	b.n	800be2e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800be28:	2304      	movs	r3, #4
 800be2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800be2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be32:	4618      	mov	r0, r3
 800be34:	3730      	adds	r7, #48	; 0x30
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	20000009 	.word	0x20000009

0800be40 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800be40:	b480      	push	{r7}
 800be42:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800be44:	4b03      	ldr	r3, [pc, #12]	; (800be54 <BSP_SD_WriteCpltCallback+0x14>)
 800be46:	2201      	movs	r2, #1
 800be48:	601a      	str	r2, [r3, #0]
}
 800be4a:	bf00      	nop
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	20007ac8 	.word	0x20007ac8

0800be58 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800be5c:	4b03      	ldr	r3, [pc, #12]	; (800be6c <BSP_SD_ReadCpltCallback+0x14>)
 800be5e:	2201      	movs	r2, #1
 800be60:	601a      	str	r2, [r3, #0]
}
 800be62:	bf00      	nop
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20007acc 	.word	0x20007acc

0800be70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	4a08      	ldr	r2, [pc, #32]	; (800bea0 <disk_status+0x30>)
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	79fa      	ldrb	r2, [r7, #7]
 800be88:	4905      	ldr	r1, [pc, #20]	; (800bea0 <disk_status+0x30>)
 800be8a:	440a      	add	r2, r1
 800be8c:	7a12      	ldrb	r2, [r2, #8]
 800be8e:	4610      	mov	r0, r2
 800be90:	4798      	blx	r3
 800be92:	4603      	mov	r3, r0
 800be94:	73fb      	strb	r3, [r7, #15]
  return stat;
 800be96:	7bfb      	ldrb	r3, [r7, #15]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20007cf8 	.word	0x20007cf8

0800bea4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800beb2:	79fb      	ldrb	r3, [r7, #7]
 800beb4:	4a0d      	ldr	r2, [pc, #52]	; (800beec <disk_initialize+0x48>)
 800beb6:	5cd3      	ldrb	r3, [r2, r3]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d111      	bne.n	800bee0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bebc:	79fb      	ldrb	r3, [r7, #7]
 800bebe:	4a0b      	ldr	r2, [pc, #44]	; (800beec <disk_initialize+0x48>)
 800bec0:	2101      	movs	r1, #1
 800bec2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bec4:	79fb      	ldrb	r3, [r7, #7]
 800bec6:	4a09      	ldr	r2, [pc, #36]	; (800beec <disk_initialize+0x48>)
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	79fa      	ldrb	r2, [r7, #7]
 800bed2:	4906      	ldr	r1, [pc, #24]	; (800beec <disk_initialize+0x48>)
 800bed4:	440a      	add	r2, r1
 800bed6:	7a12      	ldrb	r2, [r2, #8]
 800bed8:	4610      	mov	r0, r2
 800beda:	4798      	blx	r3
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	20007cf8 	.word	0x20007cf8

0800bef0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bef0:	b590      	push	{r4, r7, lr}
 800bef2:	b087      	sub	sp, #28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60b9      	str	r1, [r7, #8]
 800bef8:	607a      	str	r2, [r7, #4]
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	4603      	mov	r3, r0
 800befe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	4a0a      	ldr	r2, [pc, #40]	; (800bf2c <disk_read+0x3c>)
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	4413      	add	r3, r2
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	689c      	ldr	r4, [r3, #8]
 800bf0c:	7bfb      	ldrb	r3, [r7, #15]
 800bf0e:	4a07      	ldr	r2, [pc, #28]	; (800bf2c <disk_read+0x3c>)
 800bf10:	4413      	add	r3, r2
 800bf12:	7a18      	ldrb	r0, [r3, #8]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	68b9      	ldr	r1, [r7, #8]
 800bf1a:	47a0      	blx	r4
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd90      	pop	{r4, r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20007cf8 	.word	0x20007cf8

0800bf30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bf30:	b590      	push	{r4, r7, lr}
 800bf32:	b087      	sub	sp, #28
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60b9      	str	r1, [r7, #8]
 800bf38:	607a      	str	r2, [r7, #4]
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
 800bf42:	4a0a      	ldr	r2, [pc, #40]	; (800bf6c <disk_write+0x3c>)
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	68dc      	ldr	r4, [r3, #12]
 800bf4c:	7bfb      	ldrb	r3, [r7, #15]
 800bf4e:	4a07      	ldr	r2, [pc, #28]	; (800bf6c <disk_write+0x3c>)
 800bf50:	4413      	add	r3, r2
 800bf52:	7a18      	ldrb	r0, [r3, #8]
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	68b9      	ldr	r1, [r7, #8]
 800bf5a:	47a0      	blx	r4
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	371c      	adds	r7, #28
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd90      	pop	{r4, r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20007cf8 	.word	0x20007cf8

0800bf70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	4603      	mov	r3, r0
 800bf78:	603a      	str	r2, [r7, #0]
 800bf7a:	71fb      	strb	r3, [r7, #7]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bf80:	79fb      	ldrb	r3, [r7, #7]
 800bf82:	4a09      	ldr	r2, [pc, #36]	; (800bfa8 <disk_ioctl+0x38>)
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	79fa      	ldrb	r2, [r7, #7]
 800bf8e:	4906      	ldr	r1, [pc, #24]	; (800bfa8 <disk_ioctl+0x38>)
 800bf90:	440a      	add	r2, r1
 800bf92:	7a10      	ldrb	r0, [r2, #8]
 800bf94:	79b9      	ldrb	r1, [r7, #6]
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	4798      	blx	r3
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	73fb      	strb	r3, [r7, #15]
  return res;
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	20007cf8 	.word	0x20007cf8

0800bfac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bfbc:	89fb      	ldrh	r3, [r7, #14]
 800bfbe:	021b      	lsls	r3, r3, #8
 800bfc0:	b21a      	sxth	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	b21b      	sxth	r3, r3
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	b21b      	sxth	r3, r3
 800bfcc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bfce:	89fb      	ldrh	r3, [r7, #14]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	3303      	adds	r3, #3
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	021b      	lsls	r3, r3, #8
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	3202      	adds	r2, #2
 800bff4:	7812      	ldrb	r2, [r2, #0]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	021b      	lsls	r3, r3, #8
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	3201      	adds	r2, #1
 800c002:	7812      	ldrb	r2, [r2, #0]
 800c004:	4313      	orrs	r3, r2
 800c006:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	021b      	lsls	r3, r3, #8
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	7812      	ldrb	r2, [r2, #0]
 800c010:	4313      	orrs	r3, r2
 800c012:	60fb      	str	r3, [r7, #12]
	return rv;
 800c014:	68fb      	ldr	r3, [r7, #12]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c022:	b480      	push	{r7}
 800c024:	b083      	sub	sp, #12
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	460b      	mov	r3, r1
 800c02c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	887a      	ldrh	r2, [r7, #2]
 800c036:	b2d2      	uxtb	r2, r2
 800c038:	701a      	strb	r2, [r3, #0]
 800c03a:	887b      	ldrh	r3, [r7, #2]
 800c03c:	0a1b      	lsrs	r3, r3, #8
 800c03e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	607a      	str	r2, [r7, #4]
 800c046:	887a      	ldrh	r2, [r7, #2]
 800c048:	b2d2      	uxtb	r2, r2
 800c04a:	701a      	strb	r2, [r3, #0]
}
 800c04c:	bf00      	nop
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	1c5a      	adds	r2, r3, #1
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	b2d2      	uxtb	r2, r2
 800c06c:	701a      	strb	r2, [r3, #0]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	0a1b      	lsrs	r3, r3, #8
 800c072:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	607a      	str	r2, [r7, #4]
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	b2d2      	uxtb	r2, r2
 800c07e:	701a      	strb	r2, [r3, #0]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	0a1b      	lsrs	r3, r3, #8
 800c084:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	b2d2      	uxtb	r2, r2
 800c090:	701a      	strb	r2, [r3, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	0a1b      	lsrs	r3, r3, #8
 800c096:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	607a      	str	r2, [r7, #4]
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	b2d2      	uxtb	r2, r2
 800c0a2:	701a      	strb	r2, [r3, #0]
}
 800c0a4:	bf00      	nop
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c0b0:	b480      	push	{r7}
 800c0b2:	b087      	sub	sp, #28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00d      	beq.n	800c0e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c0ca:	693a      	ldr	r2, [r7, #16]
 800c0cc:	1c53      	adds	r3, r2, #1
 800c0ce:	613b      	str	r3, [r7, #16]
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	1c59      	adds	r1, r3, #1
 800c0d4:	6179      	str	r1, [r7, #20]
 800c0d6:	7812      	ldrb	r2, [r2, #0]
 800c0d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	607b      	str	r3, [r7, #4]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1f1      	bne.n	800c0ca <mem_cpy+0x1a>
	}
}
 800c0e6:	bf00      	nop
 800c0e8:	371c      	adds	r7, #28
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c0f2:	b480      	push	{r7}
 800c0f4:	b087      	sub	sp, #28
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	60f8      	str	r0, [r7, #12]
 800c0fa:	60b9      	str	r1, [r7, #8]
 800c0fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	617a      	str	r2, [r7, #20]
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	b2d2      	uxtb	r2, r2
 800c10c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	3b01      	subs	r3, #1
 800c112:	607b      	str	r3, [r7, #4]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1f3      	bne.n	800c102 <mem_set+0x10>
}
 800c11a:	bf00      	nop
 800c11c:	371c      	adds	r7, #28
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c126:	b480      	push	{r7}
 800c128:	b089      	sub	sp, #36	; 0x24
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	60f8      	str	r0, [r7, #12]
 800c12e:	60b9      	str	r1, [r7, #8]
 800c130:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	61fb      	str	r3, [r7, #28]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	61fa      	str	r2, [r7, #28]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	4619      	mov	r1, r3
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	1c5a      	adds	r2, r3, #1
 800c14c:	61ba      	str	r2, [r7, #24]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	1acb      	subs	r3, r1, r3
 800c152:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3b01      	subs	r3, #1
 800c158:	607b      	str	r3, [r7, #4]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <mem_cmp+0x40>
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0eb      	beq.n	800c13e <mem_cmp+0x18>

	return r;
 800c166:	697b      	ldr	r3, [r7, #20]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3724      	adds	r7, #36	; 0x24
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c17e:	e002      	b.n	800c186 <chk_chr+0x12>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	3301      	adds	r3, #1
 800c184:	607b      	str	r3, [r7, #4]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d005      	beq.n	800c19a <chk_chr+0x26>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	4293      	cmp	r3, r2
 800c198:	d1f2      	bne.n	800c180 <chk_chr+0xc>
	return *str;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	781b      	ldrb	r3, [r3, #0]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
	...

0800c1ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60bb      	str	r3, [r7, #8]
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	60fb      	str	r3, [r7, #12]
 800c1be:	e029      	b.n	800c214 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c1c0:	4a27      	ldr	r2, [pc, #156]	; (800c260 <chk_lock+0xb4>)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	4413      	add	r3, r2
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d01d      	beq.n	800c20a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1ce:	4a24      	ldr	r2, [pc, #144]	; (800c260 <chk_lock+0xb4>)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	011b      	lsls	r3, r3, #4
 800c1d4:	4413      	add	r3, r2
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d116      	bne.n	800c20e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c1e0:	4a1f      	ldr	r2, [pc, #124]	; (800c260 <chk_lock+0xb4>)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	011b      	lsls	r3, r3, #4
 800c1e6:	4413      	add	r3, r2
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d10c      	bne.n	800c20e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1f4:	4a1a      	ldr	r2, [pc, #104]	; (800c260 <chk_lock+0xb4>)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	011b      	lsls	r3, r3, #4
 800c1fa:	4413      	add	r3, r2
 800c1fc:	3308      	adds	r3, #8
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c204:	429a      	cmp	r2, r3
 800c206:	d102      	bne.n	800c20e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c208:	e007      	b.n	800c21a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c20a:	2301      	movs	r3, #1
 800c20c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3301      	adds	r3, #1
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d9d2      	bls.n	800c1c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	d109      	bne.n	800c234 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d102      	bne.n	800c22c <chk_lock+0x80>
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d101      	bne.n	800c230 <chk_lock+0x84>
 800c22c:	2300      	movs	r3, #0
 800c22e:	e010      	b.n	800c252 <chk_lock+0xa6>
 800c230:	2312      	movs	r3, #18
 800c232:	e00e      	b.n	800c252 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d108      	bne.n	800c24c <chk_lock+0xa0>
 800c23a:	4a09      	ldr	r2, [pc, #36]	; (800c260 <chk_lock+0xb4>)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	011b      	lsls	r3, r3, #4
 800c240:	4413      	add	r3, r2
 800c242:	330c      	adds	r3, #12
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c24a:	d101      	bne.n	800c250 <chk_lock+0xa4>
 800c24c:	2310      	movs	r3, #16
 800c24e:	e000      	b.n	800c252 <chk_lock+0xa6>
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3714      	adds	r7, #20
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	20007ad8 	.word	0x20007ad8

0800c264 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c26a:	2300      	movs	r3, #0
 800c26c:	607b      	str	r3, [r7, #4]
 800c26e:	e002      	b.n	800c276 <enq_lock+0x12>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3301      	adds	r3, #1
 800c274:	607b      	str	r3, [r7, #4]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d806      	bhi.n	800c28a <enq_lock+0x26>
 800c27c:	4a09      	ldr	r2, [pc, #36]	; (800c2a4 <enq_lock+0x40>)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	011b      	lsls	r3, r3, #4
 800c282:	4413      	add	r3, r2
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1f2      	bne.n	800c270 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	bf14      	ite	ne
 800c290:	2301      	movne	r3, #1
 800c292:	2300      	moveq	r3, #0
 800c294:	b2db      	uxtb	r3, r3
}
 800c296:	4618      	mov	r0, r3
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	20007ad8 	.word	0x20007ad8

0800c2a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	60fb      	str	r3, [r7, #12]
 800c2b6:	e01f      	b.n	800c2f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c2b8:	4a41      	ldr	r2, [pc, #260]	; (800c3c0 <inc_lock+0x118>)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	011b      	lsls	r3, r3, #4
 800c2be:	4413      	add	r3, r2
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d113      	bne.n	800c2f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c2ca:	4a3d      	ldr	r2, [pc, #244]	; (800c3c0 <inc_lock+0x118>)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	011b      	lsls	r3, r3, #4
 800c2d0:	4413      	add	r3, r2
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d109      	bne.n	800c2f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c2de:	4a38      	ldr	r2, [pc, #224]	; (800c3c0 <inc_lock+0x118>)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	011b      	lsls	r3, r3, #4
 800c2e4:	4413      	add	r3, r2
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d006      	beq.n	800c300 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	60fb      	str	r3, [r7, #12]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d9dc      	bls.n	800c2b8 <inc_lock+0x10>
 800c2fe:	e000      	b.n	800c302 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c300:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2b02      	cmp	r3, #2
 800c306:	d132      	bne.n	800c36e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c308:	2300      	movs	r3, #0
 800c30a:	60fb      	str	r3, [r7, #12]
 800c30c:	e002      	b.n	800c314 <inc_lock+0x6c>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3301      	adds	r3, #1
 800c312:	60fb      	str	r3, [r7, #12]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d806      	bhi.n	800c328 <inc_lock+0x80>
 800c31a:	4a29      	ldr	r2, [pc, #164]	; (800c3c0 <inc_lock+0x118>)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	011b      	lsls	r3, r3, #4
 800c320:	4413      	add	r3, r2
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d1f2      	bne.n	800c30e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d101      	bne.n	800c332 <inc_lock+0x8a>
 800c32e:	2300      	movs	r3, #0
 800c330:	e040      	b.n	800c3b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	4922      	ldr	r1, [pc, #136]	; (800c3c0 <inc_lock+0x118>)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	011b      	lsls	r3, r3, #4
 800c33c:	440b      	add	r3, r1
 800c33e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	689a      	ldr	r2, [r3, #8]
 800c344:	491e      	ldr	r1, [pc, #120]	; (800c3c0 <inc_lock+0x118>)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	011b      	lsls	r3, r3, #4
 800c34a:	440b      	add	r3, r1
 800c34c:	3304      	adds	r3, #4
 800c34e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	695a      	ldr	r2, [r3, #20]
 800c354:	491a      	ldr	r1, [pc, #104]	; (800c3c0 <inc_lock+0x118>)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	440b      	add	r3, r1
 800c35c:	3308      	adds	r3, #8
 800c35e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c360:	4a17      	ldr	r2, [pc, #92]	; (800c3c0 <inc_lock+0x118>)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	011b      	lsls	r3, r3, #4
 800c366:	4413      	add	r3, r2
 800c368:	330c      	adds	r3, #12
 800c36a:	2200      	movs	r2, #0
 800c36c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d009      	beq.n	800c388 <inc_lock+0xe0>
 800c374:	4a12      	ldr	r2, [pc, #72]	; (800c3c0 <inc_lock+0x118>)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	011b      	lsls	r3, r3, #4
 800c37a:	4413      	add	r3, r2
 800c37c:	330c      	adds	r3, #12
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <inc_lock+0xe0>
 800c384:	2300      	movs	r3, #0
 800c386:	e015      	b.n	800c3b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d108      	bne.n	800c3a0 <inc_lock+0xf8>
 800c38e:	4a0c      	ldr	r2, [pc, #48]	; (800c3c0 <inc_lock+0x118>)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	011b      	lsls	r3, r3, #4
 800c394:	4413      	add	r3, r2
 800c396:	330c      	adds	r3, #12
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	3301      	adds	r3, #1
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	e001      	b.n	800c3a4 <inc_lock+0xfc>
 800c3a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3a4:	4906      	ldr	r1, [pc, #24]	; (800c3c0 <inc_lock+0x118>)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	011b      	lsls	r3, r3, #4
 800c3aa:	440b      	add	r3, r1
 800c3ac:	330c      	adds	r3, #12
 800c3ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	3301      	adds	r3, #1
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3714      	adds	r7, #20
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	20007ad8 	.word	0x20007ad8

0800c3c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	607b      	str	r3, [r7, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d825      	bhi.n	800c424 <dec_lock+0x60>
		n = Files[i].ctr;
 800c3d8:	4a17      	ldr	r2, [pc, #92]	; (800c438 <dec_lock+0x74>)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	011b      	lsls	r3, r3, #4
 800c3de:	4413      	add	r3, r2
 800c3e0:	330c      	adds	r3, #12
 800c3e2:	881b      	ldrh	r3, [r3, #0]
 800c3e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c3e6:	89fb      	ldrh	r3, [r7, #14]
 800c3e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ec:	d101      	bne.n	800c3f2 <dec_lock+0x2e>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c3f2:	89fb      	ldrh	r3, [r7, #14]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <dec_lock+0x3a>
 800c3f8:	89fb      	ldrh	r3, [r7, #14]
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c3fe:	4a0e      	ldr	r2, [pc, #56]	; (800c438 <dec_lock+0x74>)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	011b      	lsls	r3, r3, #4
 800c404:	4413      	add	r3, r2
 800c406:	330c      	adds	r3, #12
 800c408:	89fa      	ldrh	r2, [r7, #14]
 800c40a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c40c:	89fb      	ldrh	r3, [r7, #14]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d105      	bne.n	800c41e <dec_lock+0x5a>
 800c412:	4a09      	ldr	r2, [pc, #36]	; (800c438 <dec_lock+0x74>)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	011b      	lsls	r3, r3, #4
 800c418:	4413      	add	r3, r2
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	737b      	strb	r3, [r7, #13]
 800c422:	e001      	b.n	800c428 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c424:	2302      	movs	r3, #2
 800c426:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c428:	7b7b      	ldrb	r3, [r7, #13]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	20007ad8 	.word	0x20007ad8

0800c43c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c444:	2300      	movs	r3, #0
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	e010      	b.n	800c46c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c44a:	4a0d      	ldr	r2, [pc, #52]	; (800c480 <clear_lock+0x44>)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	011b      	lsls	r3, r3, #4
 800c450:	4413      	add	r3, r2
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	429a      	cmp	r2, r3
 800c458:	d105      	bne.n	800c466 <clear_lock+0x2a>
 800c45a:	4a09      	ldr	r2, [pc, #36]	; (800c480 <clear_lock+0x44>)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	011b      	lsls	r3, r3, #4
 800c460:	4413      	add	r3, r2
 800c462:	2200      	movs	r2, #0
 800c464:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3301      	adds	r3, #1
 800c46a:	60fb      	str	r3, [r7, #12]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d9eb      	bls.n	800c44a <clear_lock+0xe>
	}
}
 800c472:	bf00      	nop
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	20007ad8 	.word	0x20007ad8

0800c484 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	78db      	ldrb	r3, [r3, #3]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d034      	beq.n	800c502 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	7858      	ldrb	r0, [r3, #1]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	697a      	ldr	r2, [r7, #20]
 800c4ac:	f7ff fd40 	bl	800bf30 <disk_write>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <sync_window+0x38>
			res = FR_DISK_ERR;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	73fb      	strb	r3, [r7, #15]
 800c4ba:	e022      	b.n	800c502 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	1ad2      	subs	r2, r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d217      	bcs.n	800c502 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	789b      	ldrb	r3, [r3, #2]
 800c4d6:	613b      	str	r3, [r7, #16]
 800c4d8:	e010      	b.n	800c4fc <sync_window+0x78>
					wsect += fs->fsize;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	7858      	ldrb	r0, [r3, #1]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	f7ff fd1d 	bl	800bf30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	613b      	str	r3, [r7, #16]
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d8eb      	bhi.n	800c4da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c502:	7bfb      	ldrb	r3, [r7, #15]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3718      	adds	r7, #24
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	429a      	cmp	r2, r3
 800c522:	d01b      	beq.n	800c55c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7ff ffad 	bl	800c484 <sync_window>
 800c52a:	4603      	mov	r3, r0
 800c52c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d113      	bne.n	800c55c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	7858      	ldrb	r0, [r3, #1]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c53e:	2301      	movs	r3, #1
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	f7ff fcd5 	bl	800bef0 <disk_read>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d004      	beq.n	800c556 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c54c:	f04f 33ff 	mov.w	r3, #4294967295
 800c550:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c552:	2301      	movs	r3, #1
 800c554:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	683a      	ldr	r2, [r7, #0]
 800c55a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
	...

0800c568 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7ff ff87 	bl	800c484 <sync_window>
 800c576:	4603      	mov	r3, r0
 800c578:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c57a:	7bfb      	ldrb	r3, [r7, #15]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d159      	bne.n	800c634 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b03      	cmp	r3, #3
 800c586:	d149      	bne.n	800c61c <sync_fs+0xb4>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	791b      	ldrb	r3, [r3, #4]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d145      	bne.n	800c61c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	899b      	ldrh	r3, [r3, #12]
 800c59a:	461a      	mov	r2, r3
 800c59c:	2100      	movs	r1, #0
 800c59e:	f7ff fda8 	bl	800c0f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	333c      	adds	r3, #60	; 0x3c
 800c5a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5aa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7ff fd37 	bl	800c022 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	333c      	adds	r3, #60	; 0x3c
 800c5b8:	4921      	ldr	r1, [pc, #132]	; (800c640 <sync_fs+0xd8>)
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7ff fd4c 	bl	800c058 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	333c      	adds	r3, #60	; 0x3c
 800c5c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c5c8:	491e      	ldr	r1, [pc, #120]	; (800c644 <sync_fs+0xdc>)
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7ff fd44 	bl	800c058 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	333c      	adds	r3, #60	; 0x3c
 800c5d4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	699b      	ldr	r3, [r3, #24]
 800c5dc:	4619      	mov	r1, r3
 800c5de:	4610      	mov	r0, r2
 800c5e0:	f7ff fd3a 	bl	800c058 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	333c      	adds	r3, #60	; 0x3c
 800c5e8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	695b      	ldr	r3, [r3, #20]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	4610      	mov	r0, r2
 800c5f4:	f7ff fd30 	bl	800c058 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fc:	1c5a      	adds	r2, r3, #1
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	7858      	ldrb	r0, [r3, #1]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c610:	2301      	movs	r3, #1
 800c612:	f7ff fc8d 	bl	800bf30 <disk_write>
			fs->fsi_flag = 0;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	785b      	ldrb	r3, [r3, #1]
 800c620:	2200      	movs	r2, #0
 800c622:	2100      	movs	r1, #0
 800c624:	4618      	mov	r0, r3
 800c626:	f7ff fca3 	bl	800bf70 <disk_ioctl>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <sync_fs+0xcc>
 800c630:	2301      	movs	r3, #1
 800c632:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	41615252 	.word	0x41615252
 800c644:	61417272 	.word	0x61417272

0800c648 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	3b02      	subs	r3, #2
 800c656:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6a1b      	ldr	r3, [r3, #32]
 800c65c:	3b02      	subs	r3, #2
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	429a      	cmp	r2, r3
 800c662:	d301      	bcc.n	800c668 <clust2sect+0x20>
 800c664:	2300      	movs	r3, #0
 800c666:	e008      	b.n	800c67a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	895b      	ldrh	r3, [r3, #10]
 800c66c:	461a      	mov	r2, r3
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	fb03 f202 	mul.w	r2, r3, r2
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c678:	4413      	add	r3, r2
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b086      	sub	sp, #24
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d904      	bls.n	800c6a6 <get_fat+0x20>
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	6a1b      	ldr	r3, [r3, #32]
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d302      	bcc.n	800c6ac <get_fat+0x26>
		val = 1;	/* Internal error */
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	e0b7      	b.n	800c81c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d05a      	beq.n	800c770 <get_fat+0xea>
 800c6ba:	2b03      	cmp	r3, #3
 800c6bc:	d07d      	beq.n	800c7ba <get_fat+0x134>
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	f040 80a2 	bne.w	800c808 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	60fb      	str	r3, [r7, #12]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	085b      	lsrs	r3, r3, #1
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	899b      	ldrh	r3, [r3, #12]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6e2:	4413      	add	r3, r2
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6938      	ldr	r0, [r7, #16]
 800c6e8:	f7ff ff10 	bl	800c50c <move_window>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f040 808d 	bne.w	800c80e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	60fa      	str	r2, [r7, #12]
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	8992      	ldrh	r2, [r2, #12]
 800c6fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800c702:	fb02 f201 	mul.w	r2, r2, r1
 800c706:	1a9b      	subs	r3, r3, r2
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	4413      	add	r3, r2
 800c70c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c710:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	899b      	ldrh	r3, [r3, #12]
 800c71a:	4619      	mov	r1, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c722:	4413      	add	r3, r2
 800c724:	4619      	mov	r1, r3
 800c726:	6938      	ldr	r0, [r7, #16]
 800c728:	f7ff fef0 	bl	800c50c <move_window>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d16f      	bne.n	800c812 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	899b      	ldrh	r3, [r3, #12]
 800c736:	461a      	mov	r2, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c73e:	fb02 f201 	mul.w	r2, r2, r1
 800c742:	1a9b      	subs	r3, r3, r2
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	4413      	add	r3, r2
 800c748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c74c:	021b      	lsls	r3, r3, #8
 800c74e:	461a      	mov	r2, r3
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	4313      	orrs	r3, r2
 800c754:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <get_fat+0xe0>
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	091b      	lsrs	r3, r3, #4
 800c764:	e002      	b.n	800c76c <get_fat+0xe6>
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c76c:	617b      	str	r3, [r7, #20]
			break;
 800c76e:	e055      	b.n	800c81c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	899b      	ldrh	r3, [r3, #12]
 800c778:	085b      	lsrs	r3, r3, #1
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	4619      	mov	r1, r3
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	fbb3 f3f1 	udiv	r3, r3, r1
 800c784:	4413      	add	r3, r2
 800c786:	4619      	mov	r1, r3
 800c788:	6938      	ldr	r0, [r7, #16]
 800c78a:	f7ff febf 	bl	800c50c <move_window>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d140      	bne.n	800c816 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	8992      	ldrh	r2, [r2, #12]
 800c7a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7a6:	fb02 f200 	mul.w	r2, r2, r0
 800c7aa:	1a9b      	subs	r3, r3, r2
 800c7ac:	440b      	add	r3, r1
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff fbfc 	bl	800bfac <ld_word>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	617b      	str	r3, [r7, #20]
			break;
 800c7b8:	e030      	b.n	800c81c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	899b      	ldrh	r3, [r3, #12]
 800c7c2:	089b      	lsrs	r3, r3, #2
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7ce:	4413      	add	r3, r2
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	6938      	ldr	r0, [r7, #16]
 800c7d4:	f7ff fe9a 	bl	800c50c <move_window>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d11d      	bne.n	800c81a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	8992      	ldrh	r2, [r2, #12]
 800c7ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7f0:	fb02 f200 	mul.w	r2, r2, r0
 800c7f4:	1a9b      	subs	r3, r3, r2
 800c7f6:	440b      	add	r3, r1
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7ff fbef 	bl	800bfdc <ld_dword>
 800c7fe:	4603      	mov	r3, r0
 800c800:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c804:	617b      	str	r3, [r7, #20]
			break;
 800c806:	e009      	b.n	800c81c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c808:	2301      	movs	r3, #1
 800c80a:	617b      	str	r3, [r7, #20]
 800c80c:	e006      	b.n	800c81c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c80e:	bf00      	nop
 800c810:	e004      	b.n	800c81c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c812:	bf00      	nop
 800c814:	e002      	b.n	800c81c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c816:	bf00      	nop
 800c818:	e000      	b.n	800c81c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c81a:	bf00      	nop
		}
	}

	return val;
 800c81c:	697b      	ldr	r3, [r7, #20]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c826:	b590      	push	{r4, r7, lr}
 800c828:	b089      	sub	sp, #36	; 0x24
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	60f8      	str	r0, [r7, #12]
 800c82e:	60b9      	str	r1, [r7, #8]
 800c830:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c832:	2302      	movs	r3, #2
 800c834:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	f240 8106 	bls.w	800ca4a <put_fat+0x224>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6a1b      	ldr	r3, [r3, #32]
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	429a      	cmp	r2, r3
 800c846:	f080 8100 	bcs.w	800ca4a <put_fat+0x224>
		switch (fs->fs_type) {
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	2b02      	cmp	r3, #2
 800c850:	f000 8088 	beq.w	800c964 <put_fat+0x13e>
 800c854:	2b03      	cmp	r3, #3
 800c856:	f000 80b0 	beq.w	800c9ba <put_fat+0x194>
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	f040 80f5 	bne.w	800ca4a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	61bb      	str	r3, [r7, #24]
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	085b      	lsrs	r3, r3, #1
 800c868:	69ba      	ldr	r2, [r7, #24]
 800c86a:	4413      	add	r3, r2
 800c86c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	899b      	ldrh	r3, [r3, #12]
 800c876:	4619      	mov	r1, r3
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c87e:	4413      	add	r3, r2
 800c880:	4619      	mov	r1, r3
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f7ff fe42 	bl	800c50c <move_window>
 800c888:	4603      	mov	r3, r0
 800c88a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c88c:	7ffb      	ldrb	r3, [r7, #31]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f040 80d4 	bne.w	800ca3c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	61ba      	str	r2, [r7, #24]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	8992      	ldrh	r2, [r2, #12]
 800c8a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8a8:	fb02 f200 	mul.w	r2, r2, r0
 800c8ac:	1a9b      	subs	r3, r3, r2
 800c8ae:	440b      	add	r3, r1
 800c8b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00d      	beq.n	800c8d8 <put_fat+0xb2>
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	b25b      	sxtb	r3, r3
 800c8c2:	f003 030f 	and.w	r3, r3, #15
 800c8c6:	b25a      	sxtb	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	011b      	lsls	r3, r3, #4
 800c8ce:	b25b      	sxtb	r3, r3
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	b25b      	sxtb	r3, r3
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	e001      	b.n	800c8dc <put_fat+0xb6>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	899b      	ldrh	r3, [r3, #12]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8f6:	4413      	add	r3, r2
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f7ff fe06 	bl	800c50c <move_window>
 800c900:	4603      	mov	r3, r0
 800c902:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c904:	7ffb      	ldrb	r3, [r7, #31]
 800c906:	2b00      	cmp	r3, #0
 800c908:	f040 809a 	bne.w	800ca40 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	899b      	ldrh	r3, [r3, #12]
 800c916:	461a      	mov	r2, r3
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c91e:	fb02 f200 	mul.w	r2, r2, r0
 800c922:	1a9b      	subs	r3, r3, r2
 800c924:	440b      	add	r3, r1
 800c926:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	f003 0301 	and.w	r3, r3, #1
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <put_fat+0x114>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	091b      	lsrs	r3, r3, #4
 800c936:	b2db      	uxtb	r3, r3
 800c938:	e00e      	b.n	800c958 <put_fat+0x132>
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	b25b      	sxtb	r3, r3
 800c940:	f023 030f 	bic.w	r3, r3, #15
 800c944:	b25a      	sxtb	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	0a1b      	lsrs	r3, r3, #8
 800c94a:	b25b      	sxtb	r3, r3
 800c94c:	f003 030f 	and.w	r3, r3, #15
 800c950:	b25b      	sxtb	r3, r3
 800c952:	4313      	orrs	r3, r2
 800c954:	b25b      	sxtb	r3, r3
 800c956:	b2db      	uxtb	r3, r3
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2201      	movs	r2, #1
 800c960:	70da      	strb	r2, [r3, #3]
			break;
 800c962:	e072      	b.n	800ca4a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	899b      	ldrh	r3, [r3, #12]
 800c96c:	085b      	lsrs	r3, r3, #1
 800c96e:	b29b      	uxth	r3, r3
 800c970:	4619      	mov	r1, r3
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	fbb3 f3f1 	udiv	r3, r3, r1
 800c978:	4413      	add	r3, r2
 800c97a:	4619      	mov	r1, r3
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f7ff fdc5 	bl	800c50c <move_window>
 800c982:	4603      	mov	r3, r0
 800c984:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c986:	7ffb      	ldrb	r3, [r7, #31]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d15b      	bne.n	800ca44 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	8992      	ldrh	r2, [r2, #12]
 800c99a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c99e:	fb02 f200 	mul.w	r2, r2, r0
 800c9a2:	1a9b      	subs	r3, r3, r2
 800c9a4:	440b      	add	r3, r1
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	b292      	uxth	r2, r2
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7ff fb38 	bl	800c022 <st_word>
			fs->wflag = 1;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	70da      	strb	r2, [r3, #3]
			break;
 800c9b8:	e047      	b.n	800ca4a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	899b      	ldrh	r3, [r3, #12]
 800c9c2:	089b      	lsrs	r3, r3, #2
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9ce:	4413      	add	r3, r2
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f7ff fd9a 	bl	800c50c <move_window>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9dc:	7ffb      	ldrb	r3, [r7, #31]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d132      	bne.n	800ca48 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	8992      	ldrh	r2, [r2, #12]
 800c9f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9fa:	fb02 f200 	mul.w	r2, r2, r0
 800c9fe:	1a9b      	subs	r3, r3, r2
 800ca00:	440b      	add	r3, r1
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff faea 	bl	800bfdc <ld_dword>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ca0e:	4323      	orrs	r3, r4
 800ca10:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	8992      	ldrh	r2, [r2, #12]
 800ca20:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca24:	fb02 f200 	mul.w	r2, r2, r0
 800ca28:	1a9b      	subs	r3, r3, r2
 800ca2a:	440b      	add	r3, r1
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7ff fb12 	bl	800c058 <st_dword>
			fs->wflag = 1;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2201      	movs	r2, #1
 800ca38:	70da      	strb	r2, [r3, #3]
			break;
 800ca3a:	e006      	b.n	800ca4a <put_fat+0x224>
			if (res != FR_OK) break;
 800ca3c:	bf00      	nop
 800ca3e:	e004      	b.n	800ca4a <put_fat+0x224>
			if (res != FR_OK) break;
 800ca40:	bf00      	nop
 800ca42:	e002      	b.n	800ca4a <put_fat+0x224>
			if (res != FR_OK) break;
 800ca44:	bf00      	nop
 800ca46:	e000      	b.n	800ca4a <put_fat+0x224>
			if (res != FR_OK) break;
 800ca48:	bf00      	nop
		}
	}
	return res;
 800ca4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3724      	adds	r7, #36	; 0x24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd90      	pop	{r4, r7, pc}

0800ca54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d904      	bls.n	800ca7a <remove_chain+0x26>
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	6a1b      	ldr	r3, [r3, #32]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d301      	bcc.n	800ca7e <remove_chain+0x2a>
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	e04b      	b.n	800cb16 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00c      	beq.n	800ca9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ca84:	f04f 32ff 	mov.w	r2, #4294967295
 800ca88:	6879      	ldr	r1, [r7, #4]
 800ca8a:	69b8      	ldr	r0, [r7, #24]
 800ca8c:	f7ff fecb 	bl	800c826 <put_fat>
 800ca90:	4603      	mov	r3, r0
 800ca92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ca94:	7ffb      	ldrb	r3, [r7, #31]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <remove_chain+0x4a>
 800ca9a:	7ffb      	ldrb	r3, [r7, #31]
 800ca9c:	e03b      	b.n	800cb16 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7ff fdf0 	bl	800c686 <get_fat>
 800caa6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d031      	beq.n	800cb12 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d101      	bne.n	800cab8 <remove_chain+0x64>
 800cab4:	2302      	movs	r3, #2
 800cab6:	e02e      	b.n	800cb16 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cabe:	d101      	bne.n	800cac4 <remove_chain+0x70>
 800cac0:	2301      	movs	r3, #1
 800cac2:	e028      	b.n	800cb16 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cac4:	2200      	movs	r2, #0
 800cac6:	68b9      	ldr	r1, [r7, #8]
 800cac8:	69b8      	ldr	r0, [r7, #24]
 800caca:	f7ff feac 	bl	800c826 <put_fat>
 800cace:	4603      	mov	r3, r0
 800cad0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cad2:	7ffb      	ldrb	r3, [r7, #31]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d001      	beq.n	800cadc <remove_chain+0x88>
 800cad8:	7ffb      	ldrb	r3, [r7, #31]
 800cada:	e01c      	b.n	800cb16 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	699a      	ldr	r2, [r3, #24]
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	6a1b      	ldr	r3, [r3, #32]
 800cae4:	3b02      	subs	r3, #2
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d20b      	bcs.n	800cb02 <remove_chain+0xae>
			fs->free_clst++;
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	1c5a      	adds	r2, r3, #1
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	791b      	ldrb	r3, [r3, #4]
 800caf8:	f043 0301 	orr.w	r3, r3, #1
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	6a1b      	ldr	r3, [r3, #32]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d3c6      	bcc.n	800ca9e <remove_chain+0x4a>
 800cb10:	e000      	b.n	800cb14 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cb12:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3720      	adds	r7, #32
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b088      	sub	sp, #32
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10d      	bne.n	800cb50 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	695b      	ldr	r3, [r3, #20]
 800cb38:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d004      	beq.n	800cb4a <create_chain+0x2c>
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	6a1b      	ldr	r3, [r3, #32]
 800cb44:	69ba      	ldr	r2, [r7, #24]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d31b      	bcc.n	800cb82 <create_chain+0x64>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	61bb      	str	r3, [r7, #24]
 800cb4e:	e018      	b.n	800cb82 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7ff fd97 	bl	800c686 <get_fat>
 800cb58:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d801      	bhi.n	800cb64 <create_chain+0x46>
 800cb60:	2301      	movs	r3, #1
 800cb62:	e070      	b.n	800cc46 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6a:	d101      	bne.n	800cb70 <create_chain+0x52>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	e06a      	b.n	800cc46 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	6a1b      	ldr	r3, [r3, #32]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d201      	bcs.n	800cb7e <create_chain+0x60>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	e063      	b.n	800cc46 <create_chain+0x128>
		scl = clst;
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	6a1b      	ldr	r3, [r3, #32]
 800cb90:	69fa      	ldr	r2, [r7, #28]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d307      	bcc.n	800cba6 <create_chain+0x88>
				ncl = 2;
 800cb96:	2302      	movs	r3, #2
 800cb98:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cb9a:	69fa      	ldr	r2, [r7, #28]
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d901      	bls.n	800cba6 <create_chain+0x88>
 800cba2:	2300      	movs	r3, #0
 800cba4:	e04f      	b.n	800cc46 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cba6:	69f9      	ldr	r1, [r7, #28]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff fd6c 	bl	800c686 <get_fat>
 800cbae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00e      	beq.n	800cbd4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d003      	beq.n	800cbc4 <create_chain+0xa6>
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc2:	d101      	bne.n	800cbc8 <create_chain+0xaa>
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	e03e      	b.n	800cc46 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cbc8:	69fa      	ldr	r2, [r7, #28]
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d1da      	bne.n	800cb86 <create_chain+0x68>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	e038      	b.n	800cc46 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cbd4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbda:	69f9      	ldr	r1, [r7, #28]
 800cbdc:	6938      	ldr	r0, [r7, #16]
 800cbde:	f7ff fe22 	bl	800c826 <put_fat>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cbe6:	7dfb      	ldrb	r3, [r7, #23]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d109      	bne.n	800cc00 <create_chain+0xe2>
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d006      	beq.n	800cc00 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cbf2:	69fa      	ldr	r2, [r7, #28]
 800cbf4:	6839      	ldr	r1, [r7, #0]
 800cbf6:	6938      	ldr	r0, [r7, #16]
 800cbf8:	f7ff fe15 	bl	800c826 <put_fat>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cc00:	7dfb      	ldrb	r3, [r7, #23]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d116      	bne.n	800cc34 <create_chain+0x116>
		fs->last_clst = ncl;
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	69fa      	ldr	r2, [r7, #28]
 800cc0a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	699a      	ldr	r2, [r3, #24]
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	6a1b      	ldr	r3, [r3, #32]
 800cc14:	3b02      	subs	r3, #2
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d804      	bhi.n	800cc24 <create_chain+0x106>
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	699b      	ldr	r3, [r3, #24]
 800cc1e:	1e5a      	subs	r2, r3, #1
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	791b      	ldrb	r3, [r3, #4]
 800cc28:	f043 0301 	orr.w	r3, r3, #1
 800cc2c:	b2da      	uxtb	r2, r3
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	711a      	strb	r2, [r3, #4]
 800cc32:	e007      	b.n	800cc44 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d102      	bne.n	800cc40 <create_chain+0x122>
 800cc3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc3e:	e000      	b.n	800cc42 <create_chain+0x124>
 800cc40:	2301      	movs	r3, #1
 800cc42:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cc44:	69fb      	ldr	r3, [r7, #28]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3720      	adds	r7, #32
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b087      	sub	sp, #28
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc62:	3304      	adds	r3, #4
 800cc64:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	899b      	ldrh	r3, [r3, #12]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	8952      	ldrh	r2, [r2, #10]
 800cc76:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc7a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	1d1a      	adds	r2, r3, #4
 800cc80:	613a      	str	r2, [r7, #16]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d101      	bne.n	800cc90 <clmt_clust+0x42>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	e010      	b.n	800ccb2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d307      	bcc.n	800cca8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	617b      	str	r3, [r7, #20]
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	3304      	adds	r3, #4
 800cca4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cca6:	e7e9      	b.n	800cc7c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cca8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	4413      	add	r3, r2
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	371c      	adds	r7, #28
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b086      	sub	sp, #24
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ccd4:	d204      	bcs.n	800cce0 <dir_sdi+0x22>
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	f003 031f 	and.w	r3, r3, #31
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cce0:	2302      	movs	r3, #2
 800cce2:	e071      	b.n	800cdc8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d106      	bne.n	800cd04 <dir_sdi+0x46>
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d902      	bls.n	800cd04 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd02:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10c      	bne.n	800cd24 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	095b      	lsrs	r3, r3, #5
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	8912      	ldrh	r2, [r2, #8]
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d301      	bcc.n	800cd1a <dir_sdi+0x5c>
 800cd16:	2302      	movs	r3, #2
 800cd18:	e056      	b.n	800cdc8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	61da      	str	r2, [r3, #28]
 800cd22:	e02d      	b.n	800cd80 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	895b      	ldrh	r3, [r3, #10]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	899b      	ldrh	r3, [r3, #12]
 800cd2e:	fb03 f302 	mul.w	r3, r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd34:	e019      	b.n	800cd6a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6979      	ldr	r1, [r7, #20]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff fca3 	bl	800c686 <get_fat>
 800cd40:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd48:	d101      	bne.n	800cd4e <dir_sdi+0x90>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e03c      	b.n	800cdc8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d904      	bls.n	800cd5e <dir_sdi+0xa0>
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	6a1b      	ldr	r3, [r3, #32]
 800cd58:	697a      	ldr	r2, [r7, #20]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d301      	bcc.n	800cd62 <dir_sdi+0xa4>
 800cd5e:	2302      	movs	r3, #2
 800cd60:	e032      	b.n	800cdc8 <dir_sdi+0x10a>
			ofs -= csz;
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd6a:	683a      	ldr	r2, [r7, #0]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d2e1      	bcs.n	800cd36 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cd72:	6979      	ldr	r1, [r7, #20]
 800cd74:	6938      	ldr	r0, [r7, #16]
 800cd76:	f7ff fc67 	bl	800c648 <clust2sect>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	69db      	ldr	r3, [r3, #28]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <dir_sdi+0xd4>
 800cd8e:	2302      	movs	r3, #2
 800cd90:	e01a      	b.n	800cdc8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	69da      	ldr	r2, [r3, #28]
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	899b      	ldrh	r3, [r3, #12]
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cda2:	441a      	add	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	899b      	ldrh	r3, [r3, #12]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdba:	fb02 f200 	mul.w	r2, r2, r0
 800cdbe:	1a9b      	subs	r3, r3, r2
 800cdc0:	18ca      	adds	r2, r1, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3718      	adds	r7, #24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	695b      	ldr	r3, [r3, #20]
 800cde4:	3320      	adds	r3, #32
 800cde6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	69db      	ldr	r3, [r3, #28]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d003      	beq.n	800cdf8 <dir_next+0x28>
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdf6:	d301      	bcc.n	800cdfc <dir_next+0x2c>
 800cdf8:	2304      	movs	r3, #4
 800cdfa:	e0bb      	b.n	800cf74 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	899b      	ldrh	r3, [r3, #12]
 800ce00:	461a      	mov	r2, r3
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce08:	fb02 f201 	mul.w	r2, r2, r1
 800ce0c:	1a9b      	subs	r3, r3, r2
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f040 809d 	bne.w	800cf4e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	69db      	ldr	r3, [r3, #28]
 800ce18:	1c5a      	adds	r2, r3, #1
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	699b      	ldr	r3, [r3, #24]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d10b      	bne.n	800ce3e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	095b      	lsrs	r3, r3, #5
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	8912      	ldrh	r2, [r2, #8]
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	f0c0 808d 	bcc.w	800cf4e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	61da      	str	r2, [r3, #28]
 800ce3a:	2304      	movs	r3, #4
 800ce3c:	e09a      	b.n	800cf74 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	899b      	ldrh	r3, [r3, #12]
 800ce42:	461a      	mov	r2, r3
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	8952      	ldrh	r2, [r2, #10]
 800ce4e:	3a01      	subs	r2, #1
 800ce50:	4013      	ands	r3, r2
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d17b      	bne.n	800cf4e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4610      	mov	r0, r2
 800ce60:	f7ff fc11 	bl	800c686 <get_fat>
 800ce64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d801      	bhi.n	800ce70 <dir_next+0xa0>
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	e081      	b.n	800cf74 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce76:	d101      	bne.n	800ce7c <dir_next+0xac>
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e07b      	b.n	800cf74 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	6a1b      	ldr	r3, [r3, #32]
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d359      	bcc.n	800cf3a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d104      	bne.n	800ce96 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	61da      	str	r2, [r3, #28]
 800ce92:	2304      	movs	r3, #4
 800ce94:	e06e      	b.n	800cf74 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	699b      	ldr	r3, [r3, #24]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	4610      	mov	r0, r2
 800cea0:	f7ff fe3d 	bl	800cb1e <create_chain>
 800cea4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d101      	bne.n	800ceb0 <dir_next+0xe0>
 800ceac:	2307      	movs	r3, #7
 800ceae:	e061      	b.n	800cf74 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d101      	bne.n	800ceba <dir_next+0xea>
 800ceb6:	2302      	movs	r3, #2
 800ceb8:	e05c      	b.n	800cf74 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec0:	d101      	bne.n	800cec6 <dir_next+0xf6>
 800cec2:	2301      	movs	r3, #1
 800cec4:	e056      	b.n	800cf74 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f7ff fadc 	bl	800c484 <sync_window>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d001      	beq.n	800ced6 <dir_next+0x106>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e04e      	b.n	800cf74 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	899b      	ldrh	r3, [r3, #12]
 800cee0:	461a      	mov	r2, r3
 800cee2:	2100      	movs	r1, #0
 800cee4:	f7ff f905 	bl	800c0f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cee8:	2300      	movs	r3, #0
 800ceea:	613b      	str	r3, [r7, #16]
 800ceec:	6979      	ldr	r1, [r7, #20]
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f7ff fbaa 	bl	800c648 <clust2sect>
 800cef4:	4602      	mov	r2, r0
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	639a      	str	r2, [r3, #56]	; 0x38
 800cefa:	e012      	b.n	800cf22 <dir_next+0x152>
						fs->wflag = 1;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2201      	movs	r2, #1
 800cf00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f7ff fabe 	bl	800c484 <sync_window>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <dir_next+0x142>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e030      	b.n	800cf74 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	3301      	adds	r3, #1
 800cf16:	613b      	str	r3, [r7, #16]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1c:	1c5a      	adds	r2, r3, #1
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	639a      	str	r2, [r3, #56]	; 0x38
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	895b      	ldrh	r3, [r3, #10]
 800cf26:	461a      	mov	r2, r3
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d3e6      	bcc.n	800cefc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	1ad2      	subs	r2, r2, r3
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	697a      	ldr	r2, [r7, #20]
 800cf3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cf40:	6979      	ldr	r1, [r7, #20]
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff fb80 	bl	800c648 <clust2sect>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	68ba      	ldr	r2, [r7, #8]
 800cf52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	899b      	ldrh	r3, [r3, #12]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf66:	fb02 f200 	mul.w	r2, r2, r0
 800cf6a:	1a9b      	subs	r3, r3, r2
 800cf6c:	18ca      	adds	r2, r1, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7ff fe95 	bl	800ccbe <dir_sdi>
 800cf94:	4603      	mov	r3, r0
 800cf96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d12b      	bne.n	800cff6 <dir_alloc+0x7a>
		n = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	69db      	ldr	r3, [r3, #28]
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f7ff faaf 	bl	800c50c <move_window>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cfb2:	7dfb      	ldrb	r3, [r7, #23]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d11d      	bne.n	800cff4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a1b      	ldr	r3, [r3, #32]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	2be5      	cmp	r3, #229	; 0xe5
 800cfc0:	d004      	beq.n	800cfcc <dir_alloc+0x50>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d107      	bne.n	800cfdc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	613b      	str	r3, [r7, #16]
 800cfd2:	693a      	ldr	r2, [r7, #16]
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d102      	bne.n	800cfe0 <dir_alloc+0x64>
 800cfda:	e00c      	b.n	800cff6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cfdc:	2300      	movs	r3, #0
 800cfde:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cfe0:	2101      	movs	r1, #1
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7ff fef4 	bl	800cdd0 <dir_next>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cfec:	7dfb      	ldrb	r3, [r7, #23]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d0d7      	beq.n	800cfa2 <dir_alloc+0x26>
 800cff2:	e000      	b.n	800cff6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cff4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cff6:	7dfb      	ldrb	r3, [r7, #23]
 800cff8:	2b04      	cmp	r3, #4
 800cffa:	d101      	bne.n	800d000 <dir_alloc+0x84>
 800cffc:	2307      	movs	r3, #7
 800cffe:	75fb      	strb	r3, [r7, #23]
	return res;
 800d000:	7dfb      	ldrb	r3, [r7, #23]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b084      	sub	sp, #16
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	331a      	adds	r3, #26
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fe ffc7 	bl	800bfac <ld_word>
 800d01e:	4603      	mov	r3, r0
 800d020:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b03      	cmp	r3, #3
 800d028:	d109      	bne.n	800d03e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	3314      	adds	r3, #20
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe ffbc 	bl	800bfac <ld_word>
 800d034:	4603      	mov	r3, r0
 800d036:	041b      	lsls	r3, r3, #16
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d03e:	68fb      	ldr	r3, [r7, #12]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	331a      	adds	r3, #26
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	b292      	uxth	r2, r2
 800d05c:	4611      	mov	r1, r2
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fe ffdf 	bl	800c022 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	2b03      	cmp	r3, #3
 800d06a:	d109      	bne.n	800d080 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	f103 0214 	add.w	r2, r3, #20
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	0c1b      	lsrs	r3, r3, #16
 800d076:	b29b      	uxth	r3, r3
 800d078:	4619      	mov	r1, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	f7fe ffd1 	bl	800c022 <st_word>
	}
}
 800d080:	bf00      	nop
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d088:	b590      	push	{r4, r7, lr}
 800d08a:	b087      	sub	sp, #28
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	331a      	adds	r3, #26
 800d096:	4618      	mov	r0, r3
 800d098:	f7fe ff88 	bl	800bfac <ld_word>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <cmp_lfn+0x1e>
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e059      	b.n	800d15a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0ae:	1e5a      	subs	r2, r3, #1
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	4413      	add	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4413      	add	r3, r2
 800d0ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d0bc:	2301      	movs	r3, #1
 800d0be:	81fb      	strh	r3, [r7, #14]
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	613b      	str	r3, [r7, #16]
 800d0c4:	e033      	b.n	800d12e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d0c6:	4a27      	ldr	r2, [pc, #156]	; (800d164 <cmp_lfn+0xdc>)
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fe ff69 	bl	800bfac <ld_word>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d0de:	89fb      	ldrh	r3, [r7, #14]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d01a      	beq.n	800d11a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	2bfe      	cmp	r3, #254	; 0xfe
 800d0e8:	d812      	bhi.n	800d110 <cmp_lfn+0x88>
 800d0ea:	89bb      	ldrh	r3, [r7, #12]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f002 fd23 	bl	800fb38 <ff_wtoupper>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	461c      	mov	r4, r3
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	1c5a      	adds	r2, r3, #1
 800d0fa:	617a      	str	r2, [r7, #20]
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	4413      	add	r3, r2
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	4618      	mov	r0, r3
 800d106:	f002 fd17 	bl	800fb38 <ff_wtoupper>
 800d10a:	4603      	mov	r3, r0
 800d10c:	429c      	cmp	r4, r3
 800d10e:	d001      	beq.n	800d114 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d110:	2300      	movs	r3, #0
 800d112:	e022      	b.n	800d15a <cmp_lfn+0xd2>
			}
			wc = uc;
 800d114:	89bb      	ldrh	r3, [r7, #12]
 800d116:	81fb      	strh	r3, [r7, #14]
 800d118:	e006      	b.n	800d128 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d11a:	89bb      	ldrh	r3, [r7, #12]
 800d11c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d120:	4293      	cmp	r3, r2
 800d122:	d001      	beq.n	800d128 <cmp_lfn+0xa0>
 800d124:	2300      	movs	r3, #0
 800d126:	e018      	b.n	800d15a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	3301      	adds	r3, #1
 800d12c:	613b      	str	r3, [r7, #16]
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	2b0c      	cmp	r3, #12
 800d132:	d9c8      	bls.n	800d0c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00b      	beq.n	800d158 <cmp_lfn+0xd0>
 800d140:	89fb      	ldrh	r3, [r7, #14]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d008      	beq.n	800d158 <cmp_lfn+0xd0>
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	4413      	add	r3, r2
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d001      	beq.n	800d158 <cmp_lfn+0xd0>
 800d154:	2300      	movs	r3, #0
 800d156:	e000      	b.n	800d15a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d158:	2301      	movs	r3, #1
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	371c      	adds	r7, #28
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd90      	pop	{r4, r7, pc}
 800d162:	bf00      	nop
 800d164:	08014d48 	.word	0x08014d48

0800d168 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	331a      	adds	r3, #26
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe ff18 	bl	800bfac <ld_word>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <pick_lfn+0x1e>
 800d182:	2300      	movs	r3, #0
 800d184:	e04d      	b.n	800d222 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d18e:	1e5a      	subs	r2, r3, #1
 800d190:	4613      	mov	r3, r2
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	4413      	add	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d19c:	2301      	movs	r3, #1
 800d19e:	81fb      	strh	r3, [r7, #14]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	613b      	str	r3, [r7, #16]
 800d1a4:	e028      	b.n	800d1f8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d1a6:	4a21      	ldr	r2, [pc, #132]	; (800d22c <pick_lfn+0xc4>)
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fe fef9 	bl	800bfac <ld_word>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d1be:	89fb      	ldrh	r3, [r7, #14]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00f      	beq.n	800d1e4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2bfe      	cmp	r3, #254	; 0xfe
 800d1c8:	d901      	bls.n	800d1ce <pick_lfn+0x66>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	e029      	b.n	800d222 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d1ce:	89bb      	ldrh	r3, [r7, #12]
 800d1d0:	81fb      	strh	r3, [r7, #14]
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	617a      	str	r2, [r7, #20]
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	4413      	add	r3, r2
 800d1de:	89fa      	ldrh	r2, [r7, #14]
 800d1e0:	801a      	strh	r2, [r3, #0]
 800d1e2:	e006      	b.n	800d1f2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d1e4:	89bb      	ldrh	r3, [r7, #12]
 800d1e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d001      	beq.n	800d1f2 <pick_lfn+0x8a>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	e017      	b.n	800d222 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	613b      	str	r3, [r7, #16]
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	2b0c      	cmp	r3, #12
 800d1fc:	d9d3      	bls.n	800d1a6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00a      	beq.n	800d220 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2bfe      	cmp	r3, #254	; 0xfe
 800d20e:	d901      	bls.n	800d214 <pick_lfn+0xac>
 800d210:	2300      	movs	r3, #0
 800d212:	e006      	b.n	800d222 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	005b      	lsls	r3, r3, #1
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	4413      	add	r3, r2
 800d21c:	2200      	movs	r2, #0
 800d21e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d220:	2301      	movs	r3, #1
}
 800d222:	4618      	mov	r0, r3
 800d224:	3718      	adds	r7, #24
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	08014d48 	.word	0x08014d48

0800d230 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	4611      	mov	r1, r2
 800d23c:	461a      	mov	r2, r3
 800d23e:	460b      	mov	r3, r1
 800d240:	71fb      	strb	r3, [r7, #7]
 800d242:	4613      	mov	r3, r2
 800d244:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	330d      	adds	r3, #13
 800d24a:	79ba      	ldrb	r2, [r7, #6]
 800d24c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	330b      	adds	r3, #11
 800d252:	220f      	movs	r2, #15
 800d254:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	330c      	adds	r3, #12
 800d25a:	2200      	movs	r2, #0
 800d25c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	331a      	adds	r3, #26
 800d262:	2100      	movs	r1, #0
 800d264:	4618      	mov	r0, r3
 800d266:	f7fe fedc 	bl	800c022 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d26a:	79fb      	ldrb	r3, [r7, #7]
 800d26c:	1e5a      	subs	r2, r3, #1
 800d26e:	4613      	mov	r3, r2
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	4413      	add	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	82fb      	strh	r3, [r7, #22]
 800d27e:	2300      	movs	r3, #0
 800d280:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d282:	8afb      	ldrh	r3, [r7, #22]
 800d284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d288:	4293      	cmp	r3, r2
 800d28a:	d007      	beq.n	800d29c <put_lfn+0x6c>
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	61fa      	str	r2, [r7, #28]
 800d292:	005b      	lsls	r3, r3, #1
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	4413      	add	r3, r2
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d29c:	4a17      	ldr	r2, [pc, #92]	; (800d2fc <put_lfn+0xcc>)
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	8afa      	ldrh	r2, [r7, #22]
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fe feb7 	bl	800c022 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d2b4:	8afb      	ldrh	r3, [r7, #22]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d102      	bne.n	800d2c0 <put_lfn+0x90>
 800d2ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2be:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	61bb      	str	r3, [r7, #24]
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	2b0c      	cmp	r3, #12
 800d2ca:	d9da      	bls.n	800d282 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d2cc:	8afb      	ldrh	r3, [r7, #22]
 800d2ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d006      	beq.n	800d2e4 <put_lfn+0xb4>
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	005b      	lsls	r3, r3, #1
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	4413      	add	r3, r2
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d103      	bne.n	800d2ec <put_lfn+0xbc>
 800d2e4:	79fb      	ldrb	r3, [r7, #7]
 800d2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ea:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	79fa      	ldrb	r2, [r7, #7]
 800d2f0:	701a      	strb	r2, [r3, #0]
}
 800d2f2:	bf00      	nop
 800d2f4:	3720      	adds	r7, #32
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	08014d48 	.word	0x08014d48

0800d300 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08c      	sub	sp, #48	; 0x30
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
 800d30c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d30e:	220b      	movs	r2, #11
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f7fe fecc 	bl	800c0b0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b05      	cmp	r3, #5
 800d31c:	d92b      	bls.n	800d376 <gen_numname+0x76>
		sr = seq;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d322:	e022      	b.n	800d36a <gen_numname+0x6a>
			wc = *lfn++;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	1c9a      	adds	r2, r3, #2
 800d328:	607a      	str	r2, [r7, #4]
 800d32a:	881b      	ldrh	r3, [r3, #0]
 800d32c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d32e:	2300      	movs	r3, #0
 800d330:	62bb      	str	r3, [r7, #40]	; 0x28
 800d332:	e017      	b.n	800d364 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	005a      	lsls	r2, r3, #1
 800d338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d33a:	f003 0301 	and.w	r3, r3, #1
 800d33e:	4413      	add	r3, r2
 800d340:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d344:	085b      	lsrs	r3, r3, #1
 800d346:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d005      	beq.n	800d35e <gen_numname+0x5e>
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d358:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d35c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d360:	3301      	adds	r3, #1
 800d362:	62bb      	str	r3, [r7, #40]	; 0x28
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	2b0f      	cmp	r3, #15
 800d368:	d9e4      	bls.n	800d334 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1d8      	bne.n	800d324 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d376:	2307      	movs	r3, #7
 800d378:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	f003 030f 	and.w	r3, r3, #15
 800d382:	b2db      	uxtb	r3, r3
 800d384:	3330      	adds	r3, #48	; 0x30
 800d386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d38a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d38e:	2b39      	cmp	r3, #57	; 0x39
 800d390:	d904      	bls.n	800d39c <gen_numname+0x9c>
 800d392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d396:	3307      	adds	r3, #7
 800d398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39e:	1e5a      	subs	r2, r3, #1
 800d3a0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d3a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d3ac:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	091b      	lsrs	r3, r3, #4
 800d3b4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1de      	bne.n	800d37a <gen_numname+0x7a>
	ns[i] = '~';
 800d3bc:	f107 0214 	add.w	r2, r7, #20
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	4413      	add	r3, r2
 800d3c4:	227e      	movs	r2, #126	; 0x7e
 800d3c6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d3cc:	e002      	b.n	800d3d4 <gen_numname+0xd4>
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d205      	bcs.n	800d3e8 <gen_numname+0xe8>
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e0:	4413      	add	r3, r2
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	2b20      	cmp	r3, #32
 800d3e6:	d1f2      	bne.n	800d3ce <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ea:	2b07      	cmp	r3, #7
 800d3ec:	d808      	bhi.n	800d400 <gen_numname+0x100>
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	1c5a      	adds	r2, r3, #1
 800d3f2:	62ba      	str	r2, [r7, #40]	; 0x28
 800d3f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d3fe:	e000      	b.n	800d402 <gen_numname+0x102>
 800d400:	2120      	movs	r1, #32
 800d402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	627a      	str	r2, [r7, #36]	; 0x24
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	4413      	add	r3, r2
 800d40c:	460a      	mov	r2, r1
 800d40e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	2b07      	cmp	r3, #7
 800d414:	d9e8      	bls.n	800d3e8 <gen_numname+0xe8>
}
 800d416:	bf00      	nop
 800d418:	3730      	adds	r7, #48	; 0x30
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d41e:	b480      	push	{r7}
 800d420:	b085      	sub	sp, #20
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d42a:	230b      	movs	r3, #11
 800d42c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
 800d430:	b2da      	uxtb	r2, r3
 800d432:	0852      	lsrs	r2, r2, #1
 800d434:	01db      	lsls	r3, r3, #7
 800d436:	4313      	orrs	r3, r2
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	1c59      	adds	r1, r3, #1
 800d43e:	6079      	str	r1, [r7, #4]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	4413      	add	r3, r2
 800d444:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	3b01      	subs	r3, #1
 800d44a:	60bb      	str	r3, [r7, #8]
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1ed      	bne.n	800d42e <sum_sfn+0x10>
	return sum;
 800d452:	7bfb      	ldrb	r3, [r7, #15]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d46a:	2304      	movs	r3, #4
 800d46c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d474:	23ff      	movs	r3, #255	; 0xff
 800d476:	757b      	strb	r3, [r7, #21]
 800d478:	23ff      	movs	r3, #255	; 0xff
 800d47a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d47c:	e081      	b.n	800d582 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	69db      	ldr	r3, [r3, #28]
 800d482:	4619      	mov	r1, r3
 800d484:	6938      	ldr	r0, [r7, #16]
 800d486:	f7ff f841 	bl	800c50c <move_window>
 800d48a:	4603      	mov	r3, r0
 800d48c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d17c      	bne.n	800d58e <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6a1b      	ldr	r3, [r3, #32]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d49c:	7dbb      	ldrb	r3, [r7, #22]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d102      	bne.n	800d4a8 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d4a2:	2304      	movs	r3, #4
 800d4a4:	75fb      	strb	r3, [r7, #23]
 800d4a6:	e077      	b.n	800d598 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a1b      	ldr	r3, [r3, #32]
 800d4ac:	330b      	adds	r3, #11
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4b4:	73fb      	strb	r3, [r7, #15]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7bfa      	ldrb	r2, [r7, #15]
 800d4ba:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d4bc:	7dbb      	ldrb	r3, [r7, #22]
 800d4be:	2be5      	cmp	r3, #229	; 0xe5
 800d4c0:	d00e      	beq.n	800d4e0 <dir_read+0x80>
 800d4c2:	7dbb      	ldrb	r3, [r7, #22]
 800d4c4:	2b2e      	cmp	r3, #46	; 0x2e
 800d4c6:	d00b      	beq.n	800d4e0 <dir_read+0x80>
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ca:	f023 0320 	bic.w	r3, r3, #32
 800d4ce:	2b08      	cmp	r3, #8
 800d4d0:	bf0c      	ite	eq
 800d4d2:	2301      	moveq	r3, #1
 800d4d4:	2300      	movne	r3, #0
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	461a      	mov	r2, r3
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d002      	beq.n	800d4e6 <dir_read+0x86>
				ord = 0xFF;
 800d4e0:	23ff      	movs	r3, #255	; 0xff
 800d4e2:	757b      	strb	r3, [r7, #21]
 800d4e4:	e044      	b.n	800d570 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
 800d4e8:	2b0f      	cmp	r3, #15
 800d4ea:	d12f      	bne.n	800d54c <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d4ec:	7dbb      	ldrb	r3, [r7, #22]
 800d4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00d      	beq.n	800d512 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	7b5b      	ldrb	r3, [r3, #13]
 800d4fc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d4fe:	7dbb      	ldrb	r3, [r7, #22]
 800d500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d504:	75bb      	strb	r3, [r7, #22]
 800d506:	7dbb      	ldrb	r3, [r7, #22]
 800d508:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	695a      	ldr	r2, [r3, #20]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d512:	7dba      	ldrb	r2, [r7, #22]
 800d514:	7d7b      	ldrb	r3, [r7, #21]
 800d516:	429a      	cmp	r2, r3
 800d518:	d115      	bne.n	800d546 <dir_read+0xe6>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	330d      	adds	r3, #13
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	7d3a      	ldrb	r2, [r7, #20]
 800d524:	429a      	cmp	r2, r3
 800d526:	d10e      	bne.n	800d546 <dir_read+0xe6>
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	691a      	ldr	r2, [r3, #16]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6a1b      	ldr	r3, [r3, #32]
 800d530:	4619      	mov	r1, r3
 800d532:	4610      	mov	r0, r2
 800d534:	f7ff fe18 	bl	800d168 <pick_lfn>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d003      	beq.n	800d546 <dir_read+0xe6>
 800d53e:	7d7b      	ldrb	r3, [r7, #21]
 800d540:	3b01      	subs	r3, #1
 800d542:	b2db      	uxtb	r3, r3
 800d544:	e000      	b.n	800d548 <dir_read+0xe8>
 800d546:	23ff      	movs	r3, #255	; 0xff
 800d548:	757b      	strb	r3, [r7, #21]
 800d54a:	e011      	b.n	800d570 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d54c:	7d7b      	ldrb	r3, [r7, #21]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d109      	bne.n	800d566 <dir_read+0x106>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff ff61 	bl	800d41e <sum_sfn>
 800d55c:	4603      	mov	r3, r0
 800d55e:	461a      	mov	r2, r3
 800d560:	7d3b      	ldrb	r3, [r7, #20]
 800d562:	4293      	cmp	r3, r2
 800d564:	d015      	beq.n	800d592 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f04f 32ff 	mov.w	r2, #4294967295
 800d56c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d56e:	e010      	b.n	800d592 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d570:	2100      	movs	r1, #0
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fc2c 	bl	800cdd0 <dir_next>
 800d578:	4603      	mov	r3, r0
 800d57a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d109      	bne.n	800d596 <dir_read+0x136>
	while (dp->sect) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	2b00      	cmp	r3, #0
 800d588:	f47f af79 	bne.w	800d47e <dir_read+0x1e>
 800d58c:	e004      	b.n	800d598 <dir_read+0x138>
		if (res != FR_OK) break;
 800d58e:	bf00      	nop
 800d590:	e002      	b.n	800d598 <dir_read+0x138>
					break;
 800d592:	bf00      	nop
 800d594:	e000      	b.n	800d598 <dir_read+0x138>
		if (res != FR_OK) break;
 800d596:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d598:	7dfb      	ldrb	r3, [r7, #23]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d002      	beq.n	800d5a4 <dir_read+0x144>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	61da      	str	r2, [r3, #28]
	return res;
 800d5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3718      	adds	r7, #24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b086      	sub	sp, #24
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d5bc:	2100      	movs	r1, #0
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff fb7d 	bl	800ccbe <dir_sdi>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d5c8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d001      	beq.n	800d5d2 <dir_find+0x24>
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
 800d5d0:	e0a9      	b.n	800d726 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d5d2:	23ff      	movs	r3, #255	; 0xff
 800d5d4:	753b      	strb	r3, [r7, #20]
 800d5d6:	7d3b      	ldrb	r3, [r7, #20]
 800d5d8:	757b      	strb	r3, [r7, #21]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	69db      	ldr	r3, [r3, #28]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6938      	ldr	r0, [r7, #16]
 800d5ea:	f7fe ff8f 	bl	800c50c <move_window>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f040 8090 	bne.w	800d71a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d602:	7dbb      	ldrb	r3, [r7, #22]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d102      	bne.n	800d60e <dir_find+0x60>
 800d608:	2304      	movs	r3, #4
 800d60a:	75fb      	strb	r3, [r7, #23]
 800d60c:	e08a      	b.n	800d724 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	330b      	adds	r3, #11
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d61a:	73fb      	strb	r3, [r7, #15]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	7bfa      	ldrb	r2, [r7, #15]
 800d620:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d622:	7dbb      	ldrb	r3, [r7, #22]
 800d624:	2be5      	cmp	r3, #229	; 0xe5
 800d626:	d007      	beq.n	800d638 <dir_find+0x8a>
 800d628:	7bfb      	ldrb	r3, [r7, #15]
 800d62a:	f003 0308 	and.w	r3, r3, #8
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d009      	beq.n	800d646 <dir_find+0x98>
 800d632:	7bfb      	ldrb	r3, [r7, #15]
 800d634:	2b0f      	cmp	r3, #15
 800d636:	d006      	beq.n	800d646 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d638:	23ff      	movs	r3, #255	; 0xff
 800d63a:	757b      	strb	r3, [r7, #21]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f04f 32ff 	mov.w	r2, #4294967295
 800d642:	631a      	str	r2, [r3, #48]	; 0x30
 800d644:	e05e      	b.n	800d704 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d646:	7bfb      	ldrb	r3, [r7, #15]
 800d648:	2b0f      	cmp	r3, #15
 800d64a:	d136      	bne.n	800d6ba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d656:	2b00      	cmp	r3, #0
 800d658:	d154      	bne.n	800d704 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d65a:	7dbb      	ldrb	r3, [r7, #22]
 800d65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00d      	beq.n	800d680 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	7b5b      	ldrb	r3, [r3, #13]
 800d66a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d66c:	7dbb      	ldrb	r3, [r7, #22]
 800d66e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d672:	75bb      	strb	r3, [r7, #22]
 800d674:	7dbb      	ldrb	r3, [r7, #22]
 800d676:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	695a      	ldr	r2, [r3, #20]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d680:	7dba      	ldrb	r2, [r7, #22]
 800d682:	7d7b      	ldrb	r3, [r7, #21]
 800d684:	429a      	cmp	r2, r3
 800d686:	d115      	bne.n	800d6b4 <dir_find+0x106>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	330d      	adds	r3, #13
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	7d3a      	ldrb	r2, [r7, #20]
 800d692:	429a      	cmp	r2, r3
 800d694:	d10e      	bne.n	800d6b4 <dir_find+0x106>
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	691a      	ldr	r2, [r3, #16]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6a1b      	ldr	r3, [r3, #32]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f7ff fcf1 	bl	800d088 <cmp_lfn>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <dir_find+0x106>
 800d6ac:	7d7b      	ldrb	r3, [r7, #21]
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	e000      	b.n	800d6b6 <dir_find+0x108>
 800d6b4:	23ff      	movs	r3, #255	; 0xff
 800d6b6:	757b      	strb	r3, [r7, #21]
 800d6b8:	e024      	b.n	800d704 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d6ba:	7d7b      	ldrb	r3, [r7, #21]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d109      	bne.n	800d6d4 <dir_find+0x126>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7ff feaa 	bl	800d41e <sum_sfn>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	7d3b      	ldrb	r3, [r7, #20]
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d024      	beq.n	800d71e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10a      	bne.n	800d6f8 <dir_find+0x14a>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a18      	ldr	r0, [r3, #32]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	3324      	adds	r3, #36	; 0x24
 800d6ea:	220b      	movs	r2, #11
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	f7fe fd1a 	bl	800c126 <mem_cmp>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d014      	beq.n	800d722 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d6f8:	23ff      	movs	r3, #255	; 0xff
 800d6fa:	757b      	strb	r3, [r7, #21]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d702:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d704:	2100      	movs	r1, #0
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7ff fb62 	bl	800cdd0 <dir_next>
 800d70c:	4603      	mov	r3, r0
 800d70e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d710:	7dfb      	ldrb	r3, [r7, #23]
 800d712:	2b00      	cmp	r3, #0
 800d714:	f43f af65 	beq.w	800d5e2 <dir_find+0x34>
 800d718:	e004      	b.n	800d724 <dir_find+0x176>
		if (res != FR_OK) break;
 800d71a:	bf00      	nop
 800d71c:	e002      	b.n	800d724 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d71e:	bf00      	nop
 800d720:	e000      	b.n	800d724 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d722:	bf00      	nop

	return res;
 800d724:	7dfb      	ldrb	r3, [r7, #23]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3718      	adds	r7, #24
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
	...

0800d730 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b08c      	sub	sp, #48	; 0x30
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d744:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d001      	beq.n	800d750 <dir_register+0x20>
 800d74c:	2306      	movs	r3, #6
 800d74e:	e0e0      	b.n	800d912 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d750:	2300      	movs	r3, #0
 800d752:	627b      	str	r3, [r7, #36]	; 0x24
 800d754:	e002      	b.n	800d75c <dir_register+0x2c>
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	3301      	adds	r3, #1
 800d75a:	627b      	str	r3, [r7, #36]	; 0x24
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	691a      	ldr	r2, [r3, #16]
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	4413      	add	r3, r2
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1f4      	bne.n	800d756 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d772:	f107 030c 	add.w	r3, r7, #12
 800d776:	220c      	movs	r2, #12
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fe fc99 	bl	800c0b0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d77e:	7dfb      	ldrb	r3, [r7, #23]
 800d780:	f003 0301 	and.w	r3, r3, #1
 800d784:	2b00      	cmp	r3, #0
 800d786:	d032      	beq.n	800d7ee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2240      	movs	r2, #64	; 0x40
 800d78c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d790:	2301      	movs	r3, #1
 800d792:	62bb      	str	r3, [r7, #40]	; 0x28
 800d794:	e016      	b.n	800d7c4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	691a      	ldr	r2, [r3, #16]
 800d7a0:	f107 010c 	add.w	r1, r7, #12
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	f7ff fdab 	bl	800d300 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7ff feff 	bl	800d5ae <dir_find>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	2b63      	cmp	r3, #99	; 0x63
 800d7c8:	d9e5      	bls.n	800d796 <dir_register+0x66>
 800d7ca:	e000      	b.n	800d7ce <dir_register+0x9e>
			if (res != FR_OK) break;
 800d7cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d0:	2b64      	cmp	r3, #100	; 0x64
 800d7d2:	d101      	bne.n	800d7d8 <dir_register+0xa8>
 800d7d4:	2307      	movs	r3, #7
 800d7d6:	e09c      	b.n	800d912 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d7d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7dc:	2b04      	cmp	r3, #4
 800d7de:	d002      	beq.n	800d7e6 <dir_register+0xb6>
 800d7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7e4:	e095      	b.n	800d912 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d7e6:	7dfa      	ldrb	r2, [r7, #23]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
 800d7f0:	f003 0302 	and.w	r3, r3, #2
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d007      	beq.n	800d808 <dir_register+0xd8>
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	330c      	adds	r3, #12
 800d7fc:	4a47      	ldr	r2, [pc, #284]	; (800d91c <dir_register+0x1ec>)
 800d7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d802:	089b      	lsrs	r3, r3, #2
 800d804:	3301      	adds	r3, #1
 800d806:	e000      	b.n	800d80a <dir_register+0xda>
 800d808:	2301      	movs	r3, #1
 800d80a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d80c:	6a39      	ldr	r1, [r7, #32]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fbb4 	bl	800cf7c <dir_alloc>
 800d814:	4603      	mov	r3, r0
 800d816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d148      	bne.n	800d8b4 <dir_register+0x184>
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	3b01      	subs	r3, #1
 800d826:	623b      	str	r3, [r7, #32]
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d042      	beq.n	800d8b4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	695a      	ldr	r2, [r3, #20]
 800d832:	6a3b      	ldr	r3, [r7, #32]
 800d834:	015b      	lsls	r3, r3, #5
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	4619      	mov	r1, r3
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7ff fa3f 	bl	800ccbe <dir_sdi>
 800d840:	4603      	mov	r3, r0
 800d842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d132      	bne.n	800d8b4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	3324      	adds	r3, #36	; 0x24
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff fde3 	bl	800d41e <sum_sfn>
 800d858:	4603      	mov	r3, r0
 800d85a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	4619      	mov	r1, r3
 800d862:	69f8      	ldr	r0, [r7, #28]
 800d864:	f7fe fe52 	bl	800c50c <move_window>
 800d868:	4603      	mov	r3, r0
 800d86a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d86e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d872:	2b00      	cmp	r3, #0
 800d874:	d11d      	bne.n	800d8b2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	6918      	ldr	r0, [r3, #16]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a19      	ldr	r1, [r3, #32]
 800d87e:	6a3b      	ldr	r3, [r7, #32]
 800d880:	b2da      	uxtb	r2, r3
 800d882:	7efb      	ldrb	r3, [r7, #27]
 800d884:	f7ff fcd4 	bl	800d230 <put_lfn>
				fs->wflag = 1;
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	2201      	movs	r2, #1
 800d88c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d88e:	2100      	movs	r1, #0
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff fa9d 	bl	800cdd0 <dir_next>
 800d896:	4603      	mov	r3, r0
 800d898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d89c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d107      	bne.n	800d8b4 <dir_register+0x184>
 800d8a4:	6a3b      	ldr	r3, [r7, #32]
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	623b      	str	r3, [r7, #32]
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1d5      	bne.n	800d85c <dir_register+0x12c>
 800d8b0:	e000      	b.n	800d8b4 <dir_register+0x184>
				if (res != FR_OK) break;
 800d8b2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d8b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d128      	bne.n	800d90e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	69db      	ldr	r3, [r3, #28]
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	69f8      	ldr	r0, [r7, #28]
 800d8c4:	f7fe fe22 	bl	800c50c <move_window>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d11b      	bne.n	800d90e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6a1b      	ldr	r3, [r3, #32]
 800d8da:	2220      	movs	r2, #32
 800d8dc:	2100      	movs	r1, #0
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fe fc07 	bl	800c0f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6a18      	ldr	r0, [r3, #32]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	3324      	adds	r3, #36	; 0x24
 800d8ec:	220b      	movs	r2, #11
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	f7fe fbde 	bl	800c0b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a1b      	ldr	r3, [r3, #32]
 800d8fe:	330c      	adds	r3, #12
 800d900:	f002 0218 	and.w	r2, r2, #24
 800d904:	b2d2      	uxtb	r2, r2
 800d906:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	2201      	movs	r2, #1
 800d90c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d90e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d912:	4618      	mov	r0, r3
 800d914:	3730      	adds	r7, #48	; 0x30
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	4ec4ec4f 	.word	0x4ec4ec4f

0800d920 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	695b      	ldr	r3, [r3, #20]
 800d932:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93c:	d007      	beq.n	800d94e <dir_remove+0x2e>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d942:	4619      	mov	r1, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7ff f9ba 	bl	800ccbe <dir_sdi>
 800d94a:	4603      	mov	r3, r0
 800d94c:	e000      	b.n	800d950 <dir_remove+0x30>
 800d94e:	2300      	movs	r3, #0
 800d950:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d952:	7dfb      	ldrb	r3, [r7, #23]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d128      	bne.n	800d9aa <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	69db      	ldr	r3, [r3, #28]
 800d95c:	4619      	mov	r1, r3
 800d95e:	6938      	ldr	r0, [r7, #16]
 800d960:	f7fe fdd4 	bl	800c50c <move_window>
 800d964:	4603      	mov	r3, r0
 800d966:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d968:	7dfb      	ldrb	r3, [r7, #23]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d115      	bne.n	800d99a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	22e5      	movs	r2, #229	; 0xe5
 800d974:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	2201      	movs	r2, #1
 800d97a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	695b      	ldr	r3, [r3, #20]
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	429a      	cmp	r2, r3
 800d984:	d90b      	bls.n	800d99e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800d986:	2100      	movs	r1, #0
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff fa21 	bl	800cdd0 <dir_next>
 800d98e:	4603      	mov	r3, r0
 800d990:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800d992:	7dfb      	ldrb	r3, [r7, #23]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d0df      	beq.n	800d958 <dir_remove+0x38>
 800d998:	e002      	b.n	800d9a0 <dir_remove+0x80>
			if (res != FR_OK) break;
 800d99a:	bf00      	nop
 800d99c:	e000      	b.n	800d9a0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d99e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800d9a0:	7dfb      	ldrb	r3, [r7, #23]
 800d9a2:	2b04      	cmp	r3, #4
 800d9a4:	d101      	bne.n	800d9aa <dir_remove+0x8a>
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b08a      	sub	sp, #40	; 0x28
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	613b      	str	r3, [r7, #16]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	60fb      	str	r3, [r7, #12]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	1c5a      	adds	r2, r3, #1
 800d9d8:	61ba      	str	r2, [r7, #24]
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	4413      	add	r3, r2
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d9e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9e4:	2b1f      	cmp	r3, #31
 800d9e6:	d940      	bls.n	800da6a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d9e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9ea:	2b2f      	cmp	r3, #47	; 0x2f
 800d9ec:	d006      	beq.n	800d9fc <create_name+0x48>
 800d9ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f0:	2b5c      	cmp	r3, #92	; 0x5c
 800d9f2:	d110      	bne.n	800da16 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d9f4:	e002      	b.n	800d9fc <create_name+0x48>
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	61bb      	str	r3, [r7, #24]
 800d9fc:	693a      	ldr	r2, [r7, #16]
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	4413      	add	r3, r2
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	2b2f      	cmp	r3, #47	; 0x2f
 800da06:	d0f6      	beq.n	800d9f6 <create_name+0x42>
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	4413      	add	r3, r2
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b5c      	cmp	r3, #92	; 0x5c
 800da12:	d0f0      	beq.n	800d9f6 <create_name+0x42>
			break;
 800da14:	e02a      	b.n	800da6c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	2bfe      	cmp	r3, #254	; 0xfe
 800da1a:	d901      	bls.n	800da20 <create_name+0x6c>
 800da1c:	2306      	movs	r3, #6
 800da1e:	e1c9      	b.n	800ddb4 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800da20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da22:	b2db      	uxtb	r3, r3
 800da24:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800da26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da28:	2101      	movs	r1, #1
 800da2a:	4618      	mov	r0, r3
 800da2c:	f002 f848 	bl	800fac0 <ff_convert>
 800da30:	4603      	mov	r3, r0
 800da32:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800da34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da36:	2b00      	cmp	r3, #0
 800da38:	d101      	bne.n	800da3e <create_name+0x8a>
 800da3a:	2306      	movs	r3, #6
 800da3c:	e1ba      	b.n	800ddb4 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800da3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da40:	2b7f      	cmp	r3, #127	; 0x7f
 800da42:	d809      	bhi.n	800da58 <create_name+0xa4>
 800da44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da46:	4619      	mov	r1, r3
 800da48:	48a5      	ldr	r0, [pc, #660]	; (800dce0 <create_name+0x32c>)
 800da4a:	f7fe fb93 	bl	800c174 <chk_chr>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d001      	beq.n	800da58 <create_name+0xa4>
 800da54:	2306      	movs	r3, #6
 800da56:	e1ad      	b.n	800ddb4 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	1c5a      	adds	r2, r3, #1
 800da5c:	617a      	str	r2, [r7, #20]
 800da5e:	005b      	lsls	r3, r3, #1
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	4413      	add	r3, r2
 800da64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da66:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800da68:	e7b4      	b.n	800d9d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800da6a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800da6c:	693a      	ldr	r2, [r7, #16]
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	441a      	add	r2, r3
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800da76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da78:	2b1f      	cmp	r3, #31
 800da7a:	d801      	bhi.n	800da80 <create_name+0xcc>
 800da7c:	2304      	movs	r3, #4
 800da7e:	e000      	b.n	800da82 <create_name+0xce>
 800da80:	2300      	movs	r3, #0
 800da82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d109      	bne.n	800daa0 <create_name+0xec>
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da92:	3b01      	subs	r3, #1
 800da94:	005b      	lsls	r3, r3, #1
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	4413      	add	r3, r2
 800da9a:	881b      	ldrh	r3, [r3, #0]
 800da9c:	2b2e      	cmp	r3, #46	; 0x2e
 800da9e:	d016      	beq.n	800dace <create_name+0x11a>
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d14e      	bne.n	800db44 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800daac:	3b01      	subs	r3, #1
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	4413      	add	r3, r2
 800dab4:	881b      	ldrh	r3, [r3, #0]
 800dab6:	2b2e      	cmp	r3, #46	; 0x2e
 800dab8:	d144      	bne.n	800db44 <create_name+0x190>
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dac0:	3b02      	subs	r3, #2
 800dac2:	005b      	lsls	r3, r3, #1
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	4413      	add	r3, r2
 800dac8:	881b      	ldrh	r3, [r3, #0]
 800daca:	2b2e      	cmp	r3, #46	; 0x2e
 800dacc:	d13a      	bne.n	800db44 <create_name+0x190>
		lfn[di] = 0;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	4413      	add	r3, r2
 800dad6:	2200      	movs	r2, #0
 800dad8:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800dada:	2300      	movs	r3, #0
 800dadc:	623b      	str	r3, [r7, #32]
 800dade:	e00f      	b.n	800db00 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800dae0:	6a3a      	ldr	r2, [r7, #32]
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d201      	bcs.n	800daec <create_name+0x138>
 800dae8:	212e      	movs	r1, #46	; 0x2e
 800daea:	e000      	b.n	800daee <create_name+0x13a>
 800daec:	2120      	movs	r1, #32
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	4413      	add	r3, r2
 800daf4:	3324      	adds	r3, #36	; 0x24
 800daf6:	460a      	mov	r2, r1
 800daf8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800dafa:	6a3b      	ldr	r3, [r7, #32]
 800dafc:	3301      	adds	r3, #1
 800dafe:	623b      	str	r3, [r7, #32]
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	2b0a      	cmp	r3, #10
 800db04:	d9ec      	bls.n	800dae0 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800db06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db0a:	f043 0320 	orr.w	r3, r3, #32
 800db0e:	b2d9      	uxtb	r1, r3
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	4413      	add	r3, r2
 800db16:	3324      	adds	r3, #36	; 0x24
 800db18:	460a      	mov	r2, r1
 800db1a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800db1c:	2300      	movs	r3, #0
 800db1e:	e149      	b.n	800ddb4 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db26:	3b01      	subs	r3, #1
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	4413      	add	r3, r2
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800db32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db34:	2b20      	cmp	r3, #32
 800db36:	d002      	beq.n	800db3e <create_name+0x18a>
 800db38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db3a:	2b2e      	cmp	r3, #46	; 0x2e
 800db3c:	d106      	bne.n	800db4c <create_name+0x198>
		di--;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	3b01      	subs	r3, #1
 800db42:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1ea      	bne.n	800db20 <create_name+0x16c>
 800db4a:	e000      	b.n	800db4e <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800db4c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	4413      	add	r3, r2
 800db56:	2200      	movs	r2, #0
 800db58:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <create_name+0x1b0>
 800db60:	2306      	movs	r3, #6
 800db62:	e127      	b.n	800ddb4 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	3324      	adds	r3, #36	; 0x24
 800db68:	220b      	movs	r2, #11
 800db6a:	2120      	movs	r1, #32
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fe fac0 	bl	800c0f2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800db72:	2300      	movs	r3, #0
 800db74:	61bb      	str	r3, [r7, #24]
 800db76:	e002      	b.n	800db7e <create_name+0x1ca>
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	3301      	adds	r3, #1
 800db7c:	61bb      	str	r3, [r7, #24]
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	005b      	lsls	r3, r3, #1
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	4413      	add	r3, r2
 800db86:	881b      	ldrh	r3, [r3, #0]
 800db88:	2b20      	cmp	r3, #32
 800db8a:	d0f5      	beq.n	800db78 <create_name+0x1c4>
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	005b      	lsls	r3, r3, #1
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	4413      	add	r3, r2
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	2b2e      	cmp	r3, #46	; 0x2e
 800db98:	d0ee      	beq.n	800db78 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d009      	beq.n	800dbb4 <create_name+0x200>
 800dba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dba4:	f043 0303 	orr.w	r3, r3, #3
 800dba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dbac:	e002      	b.n	800dbb4 <create_name+0x200>
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	617b      	str	r3, [r7, #20]
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d009      	beq.n	800dbce <create_name+0x21a>
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	881b      	ldrh	r3, [r3, #0]
 800dbca:	2b2e      	cmp	r3, #46	; 0x2e
 800dbcc:	d1ef      	bne.n	800dbae <create_name+0x1fa>

	i = b = 0; ni = 8;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	623b      	str	r3, [r7, #32]
 800dbd8:	2308      	movs	r3, #8
 800dbda:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	1c5a      	adds	r2, r3, #1
 800dbe0:	61ba      	str	r2, [r7, #24]
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	881b      	ldrh	r3, [r3, #0]
 800dbea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dbec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f000 8096 	beq.w	800dd20 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dbf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbf6:	2b20      	cmp	r3, #32
 800dbf8:	d006      	beq.n	800dc08 <create_name+0x254>
 800dbfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbfc:	2b2e      	cmp	r3, #46	; 0x2e
 800dbfe:	d10a      	bne.n	800dc16 <create_name+0x262>
 800dc00:	69ba      	ldr	r2, [r7, #24]
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d006      	beq.n	800dc16 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800dc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc0c:	f043 0303 	orr.w	r3, r3, #3
 800dc10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc14:	e083      	b.n	800dd1e <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dc16:	6a3a      	ldr	r2, [r7, #32]
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d203      	bcs.n	800dc26 <create_name+0x272>
 800dc1e:	69ba      	ldr	r2, [r7, #24]
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d123      	bne.n	800dc6e <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	2b0b      	cmp	r3, #11
 800dc2a:	d106      	bne.n	800dc3a <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800dc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc30:	f043 0303 	orr.w	r3, r3, #3
 800dc34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc38:	e075      	b.n	800dd26 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dc3a:	69ba      	ldr	r2, [r7, #24]
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d005      	beq.n	800dc4e <create_name+0x29a>
 800dc42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc46:	f043 0303 	orr.w	r3, r3, #3
 800dc4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dc4e:	69ba      	ldr	r2, [r7, #24]
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d866      	bhi.n	800dd24 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	61bb      	str	r3, [r7, #24]
 800dc5a:	2308      	movs	r3, #8
 800dc5c:	623b      	str	r3, [r7, #32]
 800dc5e:	230b      	movs	r3, #11
 800dc60:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dc62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc6c:	e057      	b.n	800dd1e <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dc6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc70:	2b7f      	cmp	r3, #127	; 0x7f
 800dc72:	d914      	bls.n	800dc9e <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dc74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc76:	2100      	movs	r1, #0
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f001 ff21 	bl	800fac0 <ff_convert>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dc82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d004      	beq.n	800dc92 <create_name+0x2de>
 800dc88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc8a:	3b80      	subs	r3, #128	; 0x80
 800dc8c:	4a15      	ldr	r2, [pc, #84]	; (800dce4 <create_name+0x330>)
 800dc8e:	5cd3      	ldrb	r3, [r2, r3]
 800dc90:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dc92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc96:	f043 0302 	orr.w	r3, r3, #2
 800dc9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dc9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d007      	beq.n	800dcb4 <create_name+0x300>
 800dca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dca6:	4619      	mov	r1, r3
 800dca8:	480f      	ldr	r0, [pc, #60]	; (800dce8 <create_name+0x334>)
 800dcaa:	f7fe fa63 	bl	800c174 <chk_chr>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d008      	beq.n	800dcc6 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dcb4:	235f      	movs	r3, #95	; 0x5f
 800dcb6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dcb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcbc:	f043 0303 	orr.w	r3, r3, #3
 800dcc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcc4:	e021      	b.n	800dd0a <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dcc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcc8:	2b40      	cmp	r3, #64	; 0x40
 800dcca:	d90f      	bls.n	800dcec <create_name+0x338>
 800dccc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcce:	2b5a      	cmp	r3, #90	; 0x5a
 800dcd0:	d80c      	bhi.n	800dcec <create_name+0x338>
					b |= 2;
 800dcd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcd6:	f043 0302 	orr.w	r3, r3, #2
 800dcda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dcde:	e014      	b.n	800dd0a <create_name+0x356>
 800dce0:	08014c40 	.word	0x08014c40
 800dce4:	08014cc8 	.word	0x08014cc8
 800dce8:	08014c4c 	.word	0x08014c4c
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dcec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcee:	2b60      	cmp	r3, #96	; 0x60
 800dcf0:	d90b      	bls.n	800dd0a <create_name+0x356>
 800dcf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcf4:	2b7a      	cmp	r3, #122	; 0x7a
 800dcf6:	d808      	bhi.n	800dd0a <create_name+0x356>
						b |= 1; w -= 0x20;
 800dcf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcfc:	f043 0301 	orr.w	r3, r3, #1
 800dd00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd06:	3b20      	subs	r3, #32
 800dd08:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dd0a:	6a3b      	ldr	r3, [r7, #32]
 800dd0c:	1c5a      	adds	r2, r3, #1
 800dd0e:	623a      	str	r2, [r7, #32]
 800dd10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd12:	b2d1      	uxtb	r1, r2
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	4413      	add	r3, r2
 800dd18:	460a      	mov	r2, r1
 800dd1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dd1e:	e75d      	b.n	800dbdc <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800dd20:	bf00      	nop
 800dd22:	e000      	b.n	800dd26 <create_name+0x372>
			if (si > di) break;			/* No extension */
 800dd24:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dd2c:	2be5      	cmp	r3, #229	; 0xe5
 800dd2e:	d103      	bne.n	800dd38 <create_name+0x384>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2205      	movs	r2, #5
 800dd34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	2b08      	cmp	r3, #8
 800dd3c:	d104      	bne.n	800dd48 <create_name+0x394>
 800dd3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dd48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd4c:	f003 030c 	and.w	r3, r3, #12
 800dd50:	2b0c      	cmp	r3, #12
 800dd52:	d005      	beq.n	800dd60 <create_name+0x3ac>
 800dd54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd58:	f003 0303 	and.w	r3, r3, #3
 800dd5c:	2b03      	cmp	r3, #3
 800dd5e:	d105      	bne.n	800dd6c <create_name+0x3b8>
 800dd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd64:	f043 0302 	orr.w	r3, r3, #2
 800dd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dd6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd70:	f003 0302 	and.w	r3, r3, #2
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d117      	bne.n	800dda8 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dd78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd7c:	f003 0303 	and.w	r3, r3, #3
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d105      	bne.n	800dd90 <create_name+0x3dc>
 800dd84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd88:	f043 0310 	orr.w	r3, r3, #16
 800dd8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dd90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd94:	f003 030c 	and.w	r3, r3, #12
 800dd98:	2b04      	cmp	r3, #4
 800dd9a:	d105      	bne.n	800dda8 <create_name+0x3f4>
 800dd9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dda0:	f043 0308 	orr.w	r3, r3, #8
 800dda4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ddae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ddb2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3728      	adds	r7, #40	; 0x28
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b086      	sub	sp, #24
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	2b2f      	cmp	r3, #47	; 0x2f
 800ddd6:	d00b      	beq.n	800ddf0 <follow_path+0x34>
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	2b5c      	cmp	r3, #92	; 0x5c
 800ddde:	d007      	beq.n	800ddf0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	69da      	ldr	r2, [r3, #28]
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	609a      	str	r2, [r3, #8]
 800dde8:	e00d      	b.n	800de06 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	3301      	adds	r3, #1
 800ddee:	603b      	str	r3, [r7, #0]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	2b2f      	cmp	r3, #47	; 0x2f
 800ddf6:	d0f8      	beq.n	800ddea <follow_path+0x2e>
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b5c      	cmp	r3, #92	; 0x5c
 800ddfe:	d0f4      	beq.n	800ddea <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	2200      	movs	r2, #0
 800de04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	2b1f      	cmp	r3, #31
 800de0c:	d80a      	bhi.n	800de24 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2280      	movs	r2, #128	; 0x80
 800de12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800de16:	2100      	movs	r1, #0
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7fe ff50 	bl	800ccbe <dir_sdi>
 800de1e:	4603      	mov	r3, r0
 800de20:	75fb      	strb	r3, [r7, #23]
 800de22:	e05b      	b.n	800dedc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de24:	463b      	mov	r3, r7
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7ff fdc3 	bl	800d9b4 <create_name>
 800de2e:	4603      	mov	r3, r0
 800de30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de32:	7dfb      	ldrb	r3, [r7, #23]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d14c      	bne.n	800ded2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7ff fbb8 	bl	800d5ae <dir_find>
 800de3e:	4603      	mov	r3, r0
 800de40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d01b      	beq.n	800de88 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800de50:	7dfb      	ldrb	r3, [r7, #23]
 800de52:	2b04      	cmp	r3, #4
 800de54:	d13f      	bne.n	800ded6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800de56:	7afb      	ldrb	r3, [r7, #11]
 800de58:	f003 0320 	and.w	r3, r3, #32
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00b      	beq.n	800de78 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800de60:	7afb      	ldrb	r3, [r7, #11]
 800de62:	f003 0304 	and.w	r3, r3, #4
 800de66:	2b00      	cmp	r3, #0
 800de68:	d031      	beq.n	800dece <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2280      	movs	r2, #128	; 0x80
 800de6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800de76:	e02e      	b.n	800ded6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800de78:	7afb      	ldrb	r3, [r7, #11]
 800de7a:	f003 0304 	and.w	r3, r3, #4
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d129      	bne.n	800ded6 <follow_path+0x11a>
 800de82:	2305      	movs	r3, #5
 800de84:	75fb      	strb	r3, [r7, #23]
				break;
 800de86:	e026      	b.n	800ded6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de88:	7afb      	ldrb	r3, [r7, #11]
 800de8a:	f003 0304 	and.w	r3, r3, #4
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d123      	bne.n	800deda <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	799b      	ldrb	r3, [r3, #6]
 800de96:	f003 0310 	and.w	r3, r3, #16
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d102      	bne.n	800dea4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800de9e:	2305      	movs	r3, #5
 800dea0:	75fb      	strb	r3, [r7, #23]
 800dea2:	e01b      	b.n	800dedc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	8992      	ldrh	r2, [r2, #12]
 800deb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800deb6:	fb02 f200 	mul.w	r2, r2, r0
 800deba:	1a9b      	subs	r3, r3, r2
 800debc:	440b      	add	r3, r1
 800debe:	4619      	mov	r1, r3
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f7ff f8a2 	bl	800d00a <ld_clust>
 800dec6:	4602      	mov	r2, r0
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	609a      	str	r2, [r3, #8]
 800decc:	e7aa      	b.n	800de24 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800dece:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ded0:	e7a8      	b.n	800de24 <follow_path+0x68>
			if (res != FR_OK) break;
 800ded2:	bf00      	nop
 800ded4:	e002      	b.n	800dedc <follow_path+0x120>
				break;
 800ded6:	bf00      	nop
 800ded8:	e000      	b.n	800dedc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800deda:	bf00      	nop
			}
		}
	}

	return res;
 800dedc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3718      	adds	r7, #24
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dee6:	b480      	push	{r7}
 800dee8:	b087      	sub	sp, #28
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800deee:	f04f 33ff 	mov.w	r3, #4294967295
 800def2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d031      	beq.n	800df60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	617b      	str	r3, [r7, #20]
 800df02:	e002      	b.n	800df0a <get_ldnumber+0x24>
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	3301      	adds	r3, #1
 800df08:	617b      	str	r3, [r7, #20]
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	2b1f      	cmp	r3, #31
 800df10:	d903      	bls.n	800df1a <get_ldnumber+0x34>
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	2b3a      	cmp	r3, #58	; 0x3a
 800df18:	d1f4      	bne.n	800df04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b3a      	cmp	r3, #58	; 0x3a
 800df20:	d11c      	bne.n	800df5c <get_ldnumber+0x76>
			tp = *path;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	60fa      	str	r2, [r7, #12]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	3b30      	subs	r3, #48	; 0x30
 800df32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	2b09      	cmp	r3, #9
 800df38:	d80e      	bhi.n	800df58 <get_ldnumber+0x72>
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d10a      	bne.n	800df58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d107      	bne.n	800df58 <get_ldnumber+0x72>
					vol = (int)i;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	3301      	adds	r3, #1
 800df50:	617b      	str	r3, [r7, #20]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	697a      	ldr	r2, [r7, #20]
 800df56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	e002      	b.n	800df62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800df5c:	2300      	movs	r3, #0
 800df5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800df60:	693b      	ldr	r3, [r7, #16]
}
 800df62:	4618      	mov	r0, r3
 800df64:	371c      	adds	r7, #28
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
	...

0800df70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	70da      	strb	r2, [r3, #3]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f04f 32ff 	mov.w	r2, #4294967295
 800df86:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7fe fabe 	bl	800c50c <move_window>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d001      	beq.n	800df9a <check_fs+0x2a>
 800df96:	2304      	movs	r3, #4
 800df98:	e038      	b.n	800e00c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	333c      	adds	r3, #60	; 0x3c
 800df9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe f802 	bl	800bfac <ld_word>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	461a      	mov	r2, r3
 800dfac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d001      	beq.n	800dfb8 <check_fs+0x48>
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e029      	b.n	800e00c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfbe:	2be9      	cmp	r3, #233	; 0xe9
 800dfc0:	d009      	beq.n	800dfd6 <check_fs+0x66>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfc8:	2beb      	cmp	r3, #235	; 0xeb
 800dfca:	d11e      	bne.n	800e00a <check_fs+0x9a>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dfd2:	2b90      	cmp	r3, #144	; 0x90
 800dfd4:	d119      	bne.n	800e00a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	333c      	adds	r3, #60	; 0x3c
 800dfda:	3336      	adds	r3, #54	; 0x36
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fd fffd 	bl	800bfdc <ld_dword>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dfe8:	4a0a      	ldr	r2, [pc, #40]	; (800e014 <check_fs+0xa4>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d101      	bne.n	800dff2 <check_fs+0x82>
 800dfee:	2300      	movs	r3, #0
 800dff0:	e00c      	b.n	800e00c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	333c      	adds	r3, #60	; 0x3c
 800dff6:	3352      	adds	r3, #82	; 0x52
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fd ffef 	bl	800bfdc <ld_dword>
 800dffe:	4602      	mov	r2, r0
 800e000:	4b05      	ldr	r3, [pc, #20]	; (800e018 <check_fs+0xa8>)
 800e002:	429a      	cmp	r2, r3
 800e004:	d101      	bne.n	800e00a <check_fs+0x9a>
 800e006:	2300      	movs	r3, #0
 800e008:	e000      	b.n	800e00c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e00a:	2302      	movs	r3, #2
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	00544146 	.word	0x00544146
 800e018:	33544146 	.word	0x33544146

0800e01c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b096      	sub	sp, #88	; 0x58
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	4613      	mov	r3, r2
 800e028:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2200      	movs	r2, #0
 800e02e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7ff ff58 	bl	800dee6 <get_ldnumber>
 800e036:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	da01      	bge.n	800e042 <find_volume+0x26>
 800e03e:	230b      	movs	r3, #11
 800e040:	e26b      	b.n	800e51a <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e042:	4ab0      	ldr	r2, [pc, #704]	; (800e304 <find_volume+0x2e8>)
 800e044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e04a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <find_volume+0x3a>
 800e052:	230c      	movs	r3, #12
 800e054:	e261      	b.n	800e51a <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e05a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	f023 0301 	bic.w	r3, r3, #1
 800e062:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d01a      	beq.n	800e0a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06e:	785b      	ldrb	r3, [r3, #1]
 800e070:	4618      	mov	r0, r3
 800e072:	f7fd fefd 	bl	800be70 <disk_status>
 800e076:	4603      	mov	r3, r0
 800e078:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e07c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e080:	f003 0301 	and.w	r3, r3, #1
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10c      	bne.n	800e0a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e088:	79fb      	ldrb	r3, [r7, #7]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d007      	beq.n	800e09e <find_volume+0x82>
 800e08e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e092:	f003 0304 	and.w	r3, r3, #4
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e09a:	230a      	movs	r3, #10
 800e09c:	e23d      	b.n	800e51a <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e23b      	b.n	800e51a <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	785b      	ldrb	r3, [r3, #1]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fd fef5 	bl	800bea4 <disk_initialize>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e0c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0c4:	f003 0301 	and.w	r3, r3, #1
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d001      	beq.n	800e0d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e224      	b.n	800e51a <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e0d0:	79fb      	ldrb	r3, [r7, #7]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d007      	beq.n	800e0e6 <find_volume+0xca>
 800e0d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0da:	f003 0304 	and.w	r3, r3, #4
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d001      	beq.n	800e0e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e0e2:	230a      	movs	r3, #10
 800e0e4:	e219      	b.n	800e51a <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e8:	7858      	ldrb	r0, [r3, #1]
 800e0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ec:	330c      	adds	r3, #12
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	2102      	movs	r1, #2
 800e0f2:	f7fd ff3d 	bl	800bf70 <disk_ioctl>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <find_volume+0xe4>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e20c      	b.n	800e51a <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	899b      	ldrh	r3, [r3, #12]
 800e104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e108:	d80d      	bhi.n	800e126 <find_volume+0x10a>
 800e10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10c:	899b      	ldrh	r3, [r3, #12]
 800e10e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e112:	d308      	bcc.n	800e126 <find_volume+0x10a>
 800e114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e116:	899b      	ldrh	r3, [r3, #12]
 800e118:	461a      	mov	r2, r3
 800e11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11c:	899b      	ldrh	r3, [r3, #12]
 800e11e:	3b01      	subs	r3, #1
 800e120:	4013      	ands	r3, r2
 800e122:	2b00      	cmp	r3, #0
 800e124:	d001      	beq.n	800e12a <find_volume+0x10e>
 800e126:	2301      	movs	r3, #1
 800e128:	e1f7      	b.n	800e51a <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e12a:	2300      	movs	r3, #0
 800e12c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e12e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e132:	f7ff ff1d 	bl	800df70 <check_fs>
 800e136:	4603      	mov	r3, r0
 800e138:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e13c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e140:	2b02      	cmp	r3, #2
 800e142:	d14b      	bne.n	800e1dc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e144:	2300      	movs	r3, #0
 800e146:	643b      	str	r3, [r7, #64]	; 0x40
 800e148:	e01f      	b.n	800e18a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e152:	011b      	lsls	r3, r3, #4
 800e154:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e158:	4413      	add	r3, r2
 800e15a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15e:	3304      	adds	r3, #4
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d006      	beq.n	800e174 <find_volume+0x158>
 800e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e168:	3308      	adds	r3, #8
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fd ff36 	bl	800bfdc <ld_dword>
 800e170:	4602      	mov	r2, r0
 800e172:	e000      	b.n	800e176 <find_volume+0x15a>
 800e174:	2200      	movs	r2, #0
 800e176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e17e:	440b      	add	r3, r1
 800e180:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e186:	3301      	adds	r3, #1
 800e188:	643b      	str	r3, [r7, #64]	; 0x40
 800e18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e18c:	2b03      	cmp	r3, #3
 800e18e:	d9dc      	bls.n	800e14a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e190:	2300      	movs	r3, #0
 800e192:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e196:	2b00      	cmp	r3, #0
 800e198:	d002      	beq.n	800e1a0 <find_volume+0x184>
 800e19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e19c:	3b01      	subs	r3, #1
 800e19e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e1a8:	4413      	add	r3, r2
 800e1aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e1ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d005      	beq.n	800e1c2 <find_volume+0x1a6>
 800e1b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1ba:	f7ff fed9 	bl	800df70 <check_fs>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	e000      	b.n	800e1c4 <find_volume+0x1a8>
 800e1c2:	2303      	movs	r3, #3
 800e1c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e1c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d905      	bls.n	800e1dc <find_volume+0x1c0>
 800e1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	643b      	str	r3, [r7, #64]	; 0x40
 800e1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	d9e1      	bls.n	800e1a0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e1dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1e0:	2b04      	cmp	r3, #4
 800e1e2:	d101      	bne.n	800e1e8 <find_volume+0x1cc>
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e198      	b.n	800e51a <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d901      	bls.n	800e1f4 <find_volume+0x1d8>
 800e1f0:	230d      	movs	r3, #13
 800e1f2:	e192      	b.n	800e51a <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f6:	333c      	adds	r3, #60	; 0x3c
 800e1f8:	330b      	adds	r3, #11
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fd fed6 	bl	800bfac <ld_word>
 800e200:	4603      	mov	r3, r0
 800e202:	461a      	mov	r2, r3
 800e204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e206:	899b      	ldrh	r3, [r3, #12]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d001      	beq.n	800e210 <find_volume+0x1f4>
 800e20c:	230d      	movs	r3, #13
 800e20e:	e184      	b.n	800e51a <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e212:	333c      	adds	r3, #60	; 0x3c
 800e214:	3316      	adds	r3, #22
 800e216:	4618      	mov	r0, r3
 800e218:	f7fd fec8 	bl	800bfac <ld_word>
 800e21c:	4603      	mov	r3, r0
 800e21e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <find_volume+0x218>
 800e226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e228:	333c      	adds	r3, #60	; 0x3c
 800e22a:	3324      	adds	r3, #36	; 0x24
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fd fed5 	bl	800bfdc <ld_dword>
 800e232:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e238:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800e240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e242:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e246:	789b      	ldrb	r3, [r3, #2]
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d005      	beq.n	800e258 <find_volume+0x23c>
 800e24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24e:	789b      	ldrb	r3, [r3, #2]
 800e250:	2b02      	cmp	r3, #2
 800e252:	d001      	beq.n	800e258 <find_volume+0x23c>
 800e254:	230d      	movs	r3, #13
 800e256:	e160      	b.n	800e51a <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	789b      	ldrb	r3, [r3, #2]
 800e25c:	461a      	mov	r2, r3
 800e25e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e260:	fb02 f303 	mul.w	r3, r2, r3
 800e264:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e268:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e270:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e274:	895b      	ldrh	r3, [r3, #10]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d008      	beq.n	800e28c <find_volume+0x270>
 800e27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27c:	895b      	ldrh	r3, [r3, #10]
 800e27e:	461a      	mov	r2, r3
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	895b      	ldrh	r3, [r3, #10]
 800e284:	3b01      	subs	r3, #1
 800e286:	4013      	ands	r3, r2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d001      	beq.n	800e290 <find_volume+0x274>
 800e28c:	230d      	movs	r3, #13
 800e28e:	e144      	b.n	800e51a <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	333c      	adds	r3, #60	; 0x3c
 800e294:	3311      	adds	r3, #17
 800e296:	4618      	mov	r0, r3
 800e298:	f7fd fe88 	bl	800bfac <ld_word>
 800e29c:	4603      	mov	r3, r0
 800e29e:	461a      	mov	r2, r3
 800e2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a6:	891b      	ldrh	r3, [r3, #8]
 800e2a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2aa:	8992      	ldrh	r2, [r2, #12]
 800e2ac:	0952      	lsrs	r2, r2, #5
 800e2ae:	b292      	uxth	r2, r2
 800e2b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2b4:	fb02 f201 	mul.w	r2, r2, r1
 800e2b8:	1a9b      	subs	r3, r3, r2
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d001      	beq.n	800e2c4 <find_volume+0x2a8>
 800e2c0:	230d      	movs	r3, #13
 800e2c2:	e12a      	b.n	800e51a <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c6:	333c      	adds	r3, #60	; 0x3c
 800e2c8:	3313      	adds	r3, #19
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fd fe6e 	bl	800bfac <ld_word>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e2d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d106      	bne.n	800e2e8 <find_volume+0x2cc>
 800e2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2dc:	333c      	adds	r3, #60	; 0x3c
 800e2de:	3320      	adds	r3, #32
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fd fe7b 	bl	800bfdc <ld_dword>
 800e2e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	333c      	adds	r3, #60	; 0x3c
 800e2ec:	330e      	adds	r3, #14
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fd fe5c 	bl	800bfac <ld_word>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e2f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d104      	bne.n	800e308 <find_volume+0x2ec>
 800e2fe:	230d      	movs	r3, #13
 800e300:	e10b      	b.n	800e51a <find_volume+0x4fe>
 800e302:	bf00      	nop
 800e304:	20007ad0 	.word	0x20007ad0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e308:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e30c:	4413      	add	r3, r2
 800e30e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e310:	8911      	ldrh	r1, [r2, #8]
 800e312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e314:	8992      	ldrh	r2, [r2, #12]
 800e316:	0952      	lsrs	r2, r2, #5
 800e318:	b292      	uxth	r2, r2
 800e31a:	fbb1 f2f2 	udiv	r2, r1, r2
 800e31e:	b292      	uxth	r2, r2
 800e320:	4413      	add	r3, r2
 800e322:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e328:	429a      	cmp	r2, r3
 800e32a:	d201      	bcs.n	800e330 <find_volume+0x314>
 800e32c:	230d      	movs	r3, #13
 800e32e:	e0f4      	b.n	800e51a <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e338:	8952      	ldrh	r2, [r2, #10]
 800e33a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e33e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	2b00      	cmp	r3, #0
 800e344:	d101      	bne.n	800e34a <find_volume+0x32e>
 800e346:	230d      	movs	r3, #13
 800e348:	e0e7      	b.n	800e51a <find_volume+0x4fe>
		fmt = FS_FAT32;
 800e34a:	2303      	movs	r3, #3
 800e34c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e352:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e356:	4293      	cmp	r3, r2
 800e358:	d802      	bhi.n	800e360 <find_volume+0x344>
 800e35a:	2302      	movs	r3, #2
 800e35c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e362:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e366:	4293      	cmp	r3, r2
 800e368:	d802      	bhi.n	800e370 <find_volume+0x354>
 800e36a:	2301      	movs	r3, #1
 800e36c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	1c9a      	adds	r2, r3, #2
 800e374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e376:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800e378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e37c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e37e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e382:	441a      	add	r2, r3
 800e384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e386:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800e388:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38c:	441a      	add	r2, r3
 800e38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e390:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800e392:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e396:	2b03      	cmp	r3, #3
 800e398:	d11e      	bne.n	800e3d8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39c:	333c      	adds	r3, #60	; 0x3c
 800e39e:	332a      	adds	r3, #42	; 0x2a
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fd fe03 	bl	800bfac <ld_word>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d001      	beq.n	800e3b0 <find_volume+0x394>
 800e3ac:	230d      	movs	r3, #13
 800e3ae:	e0b4      	b.n	800e51a <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b2:	891b      	ldrh	r3, [r3, #8]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <find_volume+0x3a0>
 800e3b8:	230d      	movs	r3, #13
 800e3ba:	e0ae      	b.n	800e51a <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3be:	333c      	adds	r3, #60	; 0x3c
 800e3c0:	332c      	adds	r3, #44	; 0x2c
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fd fe0a 	bl	800bfdc <ld_dword>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3cc:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	647b      	str	r3, [r7, #68]	; 0x44
 800e3d6:	e01f      	b.n	800e418 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3da:	891b      	ldrh	r3, [r3, #8]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d101      	bne.n	800e3e4 <find_volume+0x3c8>
 800e3e0:	230d      	movs	r3, #13
 800e3e2:	e09a      	b.n	800e51a <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3ea:	441a      	add	r2, r3
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ee:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e3f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3f4:	2b02      	cmp	r3, #2
 800e3f6:	d103      	bne.n	800e400 <find_volume+0x3e4>
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fa:	6a1b      	ldr	r3, [r3, #32]
 800e3fc:	005b      	lsls	r3, r3, #1
 800e3fe:	e00a      	b.n	800e416 <find_volume+0x3fa>
 800e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e402:	6a1a      	ldr	r2, [r3, #32]
 800e404:	4613      	mov	r3, r2
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	4413      	add	r3, r2
 800e40a:	085a      	lsrs	r2, r3, #1
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	6a1b      	ldr	r3, [r3, #32]
 800e410:	f003 0301 	and.w	r3, r3, #1
 800e414:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e416:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	899b      	ldrh	r3, [r3, #12]
 800e420:	4619      	mov	r1, r3
 800e422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e424:	440b      	add	r3, r1
 800e426:	3b01      	subs	r3, #1
 800e428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e42a:	8989      	ldrh	r1, [r1, #12]
 800e42c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e430:	429a      	cmp	r2, r3
 800e432:	d201      	bcs.n	800e438 <find_volume+0x41c>
 800e434:	230d      	movs	r3, #13
 800e436:	e070      	b.n	800e51a <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43a:	f04f 32ff 	mov.w	r2, #4294967295
 800e43e:	619a      	str	r2, [r3, #24]
 800e440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e442:	699a      	ldr	r2, [r3, #24]
 800e444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e446:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44a:	2280      	movs	r2, #128	; 0x80
 800e44c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e44e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e452:	2b03      	cmp	r3, #3
 800e454:	d149      	bne.n	800e4ea <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e458:	333c      	adds	r3, #60	; 0x3c
 800e45a:	3330      	adds	r3, #48	; 0x30
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fd fda5 	bl	800bfac <ld_word>
 800e462:	4603      	mov	r3, r0
 800e464:	2b01      	cmp	r3, #1
 800e466:	d140      	bne.n	800e4ea <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e46a:	3301      	adds	r3, #1
 800e46c:	4619      	mov	r1, r3
 800e46e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e470:	f7fe f84c 	bl	800c50c <move_window>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d137      	bne.n	800e4ea <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800e47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47c:	2200      	movs	r2, #0
 800e47e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e482:	333c      	adds	r3, #60	; 0x3c
 800e484:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fd fd8f 	bl	800bfac <ld_word>
 800e48e:	4603      	mov	r3, r0
 800e490:	461a      	mov	r2, r3
 800e492:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e496:	429a      	cmp	r2, r3
 800e498:	d127      	bne.n	800e4ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49c:	333c      	adds	r3, #60	; 0x3c
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fd fd9c 	bl	800bfdc <ld_dword>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	4b1f      	ldr	r3, [pc, #124]	; (800e524 <find_volume+0x508>)
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d11e      	bne.n	800e4ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ae:	333c      	adds	r3, #60	; 0x3c
 800e4b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fd fd91 	bl	800bfdc <ld_dword>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	4b1a      	ldr	r3, [pc, #104]	; (800e528 <find_volume+0x50c>)
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d113      	bne.n	800e4ea <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c4:	333c      	adds	r3, #60	; 0x3c
 800e4c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fd fd86 	bl	800bfdc <ld_dword>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d8:	333c      	adds	r3, #60	; 0x3c
 800e4da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fd fd7c 	bl	800bfdc <ld_dword>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e4f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e4f2:	4b0e      	ldr	r3, [pc, #56]	; (800e52c <find_volume+0x510>)
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	4b0c      	ldr	r3, [pc, #48]	; (800e52c <find_volume+0x510>)
 800e4fc:	801a      	strh	r2, [r3, #0]
 800e4fe:	4b0b      	ldr	r3, [pc, #44]	; (800e52c <find_volume+0x510>)
 800e500:	881a      	ldrh	r2, [r3, #0]
 800e502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e504:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e508:	4a09      	ldr	r2, [pc, #36]	; (800e530 <find_volume+0x514>)
 800e50a:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800e50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50e:	2200      	movs	r2, #0
 800e510:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e512:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e514:	f7fd ff92 	bl	800c43c <clear_lock>
#endif
	return FR_OK;
 800e518:	2300      	movs	r3, #0
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3758      	adds	r7, #88	; 0x58
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	41615252 	.word	0x41615252
 800e528:	61417272 	.word	0x61417272
 800e52c:	20007ad4 	.word	0x20007ad4
 800e530:	20007af8 	.word	0x20007af8

0800e534 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e53e:	2309      	movs	r3, #9
 800e540:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d01c      	beq.n	800e582 <validate+0x4e>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d018      	beq.n	800e582 <validate+0x4e>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d013      	beq.n	800e582 <validate+0x4e>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	889a      	ldrh	r2, [r3, #4]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	88db      	ldrh	r3, [r3, #6]
 800e564:	429a      	cmp	r2, r3
 800e566:	d10c      	bne.n	800e582 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	785b      	ldrb	r3, [r3, #1]
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fd fc7e 	bl	800be70 <disk_status>
 800e574:	4603      	mov	r3, r0
 800e576:	f003 0301 	and.w	r3, r3, #1
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d101      	bne.n	800e582 <validate+0x4e>
			res = FR_OK;
 800e57e:	2300      	movs	r3, #0
 800e580:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e582:	7bfb      	ldrb	r3, [r7, #15]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d102      	bne.n	800e58e <validate+0x5a>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	e000      	b.n	800e590 <validate+0x5c>
 800e58e:	2300      	movs	r3, #0
 800e590:	683a      	ldr	r2, [r7, #0]
 800e592:	6013      	str	r3, [r2, #0]
	return res;
 800e594:	7bfb      	ldrb	r3, [r7, #15]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
	...

0800e5a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b088      	sub	sp, #32
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e5b2:	f107 0310 	add.w	r3, r7, #16
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7ff fc95 	bl	800dee6 <get_ldnumber>
 800e5bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	da01      	bge.n	800e5c8 <f_mount+0x28>
 800e5c4:	230b      	movs	r3, #11
 800e5c6:	e02b      	b.n	800e620 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e5c8:	4a17      	ldr	r2, [pc, #92]	; (800e628 <f_mount+0x88>)
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d005      	beq.n	800e5e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e5d8:	69b8      	ldr	r0, [r7, #24]
 800e5da:	f7fd ff2f 	bl	800c43c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d002      	beq.n	800e5f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	490d      	ldr	r1, [pc, #52]	; (800e628 <f_mount+0x88>)
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <f_mount+0x66>
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	2b01      	cmp	r3, #1
 800e604:	d001      	beq.n	800e60a <f_mount+0x6a>
 800e606:	2300      	movs	r3, #0
 800e608:	e00a      	b.n	800e620 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e60a:	f107 010c 	add.w	r1, r7, #12
 800e60e:	f107 0308 	add.w	r3, r7, #8
 800e612:	2200      	movs	r2, #0
 800e614:	4618      	mov	r0, r3
 800e616:	f7ff fd01 	bl	800e01c <find_volume>
 800e61a:	4603      	mov	r3, r0
 800e61c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3720      	adds	r7, #32
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	20007ad0 	.word	0x20007ad0

0800e62c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b09a      	sub	sp, #104	; 0x68
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <f_open+0x18>
 800e640:	2309      	movs	r3, #9
 800e642:	e1bb      	b.n	800e9bc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e644:	79fb      	ldrb	r3, [r7, #7]
 800e646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e64a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e64c:	79fa      	ldrb	r2, [r7, #7]
 800e64e:	f107 0114 	add.w	r1, r7, #20
 800e652:	f107 0308 	add.w	r3, r7, #8
 800e656:	4618      	mov	r0, r3
 800e658:	f7ff fce0 	bl	800e01c <find_volume>
 800e65c:	4603      	mov	r3, r0
 800e65e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e662:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e666:	2b00      	cmp	r3, #0
 800e668:	f040 819f 	bne.w	800e9aa <f_open+0x37e>
		dj.obj.fs = fs;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e670:	68ba      	ldr	r2, [r7, #8]
 800e672:	f107 0318 	add.w	r3, r7, #24
 800e676:	4611      	mov	r1, r2
 800e678:	4618      	mov	r0, r3
 800e67a:	f7ff fb9f 	bl	800ddbc <follow_path>
 800e67e:	4603      	mov	r3, r0
 800e680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e684:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d11a      	bne.n	800e6c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e68c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e690:	b25b      	sxtb	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	da03      	bge.n	800e69e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e696:	2306      	movs	r3, #6
 800e698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e69c:	e011      	b.n	800e6c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e69e:	79fb      	ldrb	r3, [r7, #7]
 800e6a0:	f023 0301 	bic.w	r3, r3, #1
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	bf14      	ite	ne
 800e6a8:	2301      	movne	r3, #1
 800e6aa:	2300      	moveq	r3, #0
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	f107 0318 	add.w	r3, r7, #24
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fd fd78 	bl	800c1ac <chk_lock>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e6c2:	79fb      	ldrb	r3, [r7, #7]
 800e6c4:	f003 031c 	and.w	r3, r3, #28
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d07f      	beq.n	800e7cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e6cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d017      	beq.n	800e704 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e6d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6d8:	2b04      	cmp	r3, #4
 800e6da:	d10e      	bne.n	800e6fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e6dc:	f7fd fdc2 	bl	800c264 <enq_lock>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d006      	beq.n	800e6f4 <f_open+0xc8>
 800e6e6:	f107 0318 	add.w	r3, r7, #24
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7ff f820 	bl	800d730 <dir_register>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	e000      	b.n	800e6f6 <f_open+0xca>
 800e6f4:	2312      	movs	r3, #18
 800e6f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e6fa:	79fb      	ldrb	r3, [r7, #7]
 800e6fc:	f043 0308 	orr.w	r3, r3, #8
 800e700:	71fb      	strb	r3, [r7, #7]
 800e702:	e010      	b.n	800e726 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e704:	7fbb      	ldrb	r3, [r7, #30]
 800e706:	f003 0311 	and.w	r3, r3, #17
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d003      	beq.n	800e716 <f_open+0xea>
					res = FR_DENIED;
 800e70e:	2307      	movs	r3, #7
 800e710:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e714:	e007      	b.n	800e726 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e716:	79fb      	ldrb	r3, [r7, #7]
 800e718:	f003 0304 	and.w	r3, r3, #4
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <f_open+0xfa>
 800e720:	2308      	movs	r3, #8
 800e722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e726:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d168      	bne.n	800e800 <f_open+0x1d4>
 800e72e:	79fb      	ldrb	r3, [r7, #7]
 800e730:	f003 0308 	and.w	r3, r3, #8
 800e734:	2b00      	cmp	r3, #0
 800e736:	d063      	beq.n	800e800 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e738:	f7fd f94a 	bl	800b9d0 <get_fattime>
 800e73c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e740:	330e      	adds	r3, #14
 800e742:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e744:	4618      	mov	r0, r3
 800e746:	f7fd fc87 	bl	800c058 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74c:	3316      	adds	r3, #22
 800e74e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e750:	4618      	mov	r0, r3
 800e752:	f7fd fc81 	bl	800c058 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	330b      	adds	r3, #11
 800e75a:	2220      	movs	r2, #32
 800e75c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e762:	4611      	mov	r1, r2
 800e764:	4618      	mov	r0, r3
 800e766:	f7fe fc50 	bl	800d00a <ld_clust>
 800e76a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e770:	2200      	movs	r2, #0
 800e772:	4618      	mov	r0, r3
 800e774:	f7fe fc68 	bl	800d048 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	331c      	adds	r3, #28
 800e77c:	2100      	movs	r1, #0
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fd fc6a 	bl	800c058 <st_dword>
					fs->wflag = 1;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2201      	movs	r2, #1
 800e788:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d037      	beq.n	800e800 <f_open+0x1d4>
						dw = fs->winsect;
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e794:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e796:	f107 0318 	add.w	r3, r7, #24
 800e79a:	2200      	movs	r2, #0
 800e79c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe f958 	bl	800ca54 <remove_chain>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e7aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d126      	bne.n	800e800 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fd fea8 	bl	800c50c <move_window>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e7c6:	3a01      	subs	r2, #1
 800e7c8:	615a      	str	r2, [r3, #20]
 800e7ca:	e019      	b.n	800e800 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e7cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d115      	bne.n	800e800 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e7d4:	7fbb      	ldrb	r3, [r7, #30]
 800e7d6:	f003 0310 	and.w	r3, r3, #16
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e7de:	2304      	movs	r3, #4
 800e7e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e7e4:	e00c      	b.n	800e800 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	f003 0302 	and.w	r3, r3, #2
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d007      	beq.n	800e800 <f_open+0x1d4>
 800e7f0:	7fbb      	ldrb	r3, [r7, #30]
 800e7f2:	f003 0301 	and.w	r3, r3, #1
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d002      	beq.n	800e800 <f_open+0x1d4>
						res = FR_DENIED;
 800e7fa:	2307      	movs	r3, #7
 800e7fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e800:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e804:	2b00      	cmp	r3, #0
 800e806:	d128      	bne.n	800e85a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e808:	79fb      	ldrb	r3, [r7, #7]
 800e80a:	f003 0308 	and.w	r3, r3, #8
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d003      	beq.n	800e81a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e812:	79fb      	ldrb	r3, [r7, #7]
 800e814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e818:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e828:	79fb      	ldrb	r3, [r7, #7]
 800e82a:	f023 0301 	bic.w	r3, r3, #1
 800e82e:	2b00      	cmp	r3, #0
 800e830:	bf14      	ite	ne
 800e832:	2301      	movne	r3, #1
 800e834:	2300      	moveq	r3, #0
 800e836:	b2db      	uxtb	r3, r3
 800e838:	461a      	mov	r2, r3
 800e83a:	f107 0318 	add.w	r3, r7, #24
 800e83e:	4611      	mov	r1, r2
 800e840:	4618      	mov	r0, r3
 800e842:	f7fd fd31 	bl	800c2a8 <inc_lock>
 800e846:	4602      	mov	r2, r0
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	691b      	ldr	r3, [r3, #16]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d102      	bne.n	800e85a <f_open+0x22e>
 800e854:	2302      	movs	r3, #2
 800e856:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e85a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f040 80a3 	bne.w	800e9aa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e868:	4611      	mov	r1, r2
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fe fbcd 	bl	800d00a <ld_clust>
 800e870:	4602      	mov	r2, r0
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e878:	331c      	adds	r3, #28
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fd fbae 	bl	800bfdc <ld_dword>
 800e880:	4602      	mov	r2, r0
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2200      	movs	r2, #0
 800e88a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e88c:	697a      	ldr	r2, [r7, #20]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	88da      	ldrh	r2, [r3, #6]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	79fa      	ldrb	r2, [r7, #7]
 800e89e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	3330      	adds	r3, #48	; 0x30
 800e8b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fd fc18 	bl	800c0f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e8c2:	79fb      	ldrb	r3, [r7, #7]
 800e8c4:	f003 0320 	and.w	r3, r3, #32
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d06e      	beq.n	800e9aa <f_open+0x37e>
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d06a      	beq.n	800e9aa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	68da      	ldr	r2, [r3, #12]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	895b      	ldrh	r3, [r3, #10]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	899b      	ldrh	r3, [r3, #12]
 800e8e6:	fb03 f302 	mul.w	r3, r3, r2
 800e8ea:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8f8:	e016      	b.n	800e928 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fd fec1 	bl	800c686 <get_fat>
 800e904:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d802      	bhi.n	800e912 <f_open+0x2e6>
 800e90c:	2302      	movs	r3, #2
 800e90e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e918:	d102      	bne.n	800e920 <f_open+0x2f4>
 800e91a:	2301      	movs	r3, #1
 800e91c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e920:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e928:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d103      	bne.n	800e938 <f_open+0x30c>
 800e930:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e934:	429a      	cmp	r2, r3
 800e936:	d8e0      	bhi.n	800e8fa <f_open+0x2ce>
				}
				fp->clust = clst;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e93c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e93e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e942:	2b00      	cmp	r3, #0
 800e944:	d131      	bne.n	800e9aa <f_open+0x37e>
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	899b      	ldrh	r3, [r3, #12]
 800e94a:	461a      	mov	r2, r3
 800e94c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e94e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e952:	fb02 f201 	mul.w	r2, r2, r1
 800e956:	1a9b      	subs	r3, r3, r2
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d026      	beq.n	800e9aa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e960:	4618      	mov	r0, r3
 800e962:	f7fd fe71 	bl	800c648 <clust2sect>
 800e966:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d103      	bne.n	800e976 <f_open+0x34a>
						res = FR_INT_ERR;
 800e96e:	2302      	movs	r3, #2
 800e970:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e974:	e019      	b.n	800e9aa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	899b      	ldrh	r3, [r3, #12]
 800e97a:	461a      	mov	r2, r3
 800e97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e97e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e984:	441a      	add	r2, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	7858      	ldrb	r0, [r3, #1]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6a1a      	ldr	r2, [r3, #32]
 800e998:	2301      	movs	r3, #1
 800e99a:	f7fd faa9 	bl	800bef0 <disk_read>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d002      	beq.n	800e9aa <f_open+0x37e>
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e9aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d002      	beq.n	800e9b8 <f_open+0x38c>
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e9b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3768      	adds	r7, #104	; 0x68
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b08e      	sub	sp, #56	; 0x38
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
 800e9d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f107 0214 	add.w	r2, r7, #20
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7ff fda5 	bl	800e534 <validate>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e9f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d107      	bne.n	800ea08 <f_read+0x44>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	7d5b      	ldrb	r3, [r3, #21]
 800e9fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ea00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d002      	beq.n	800ea0e <f_read+0x4a>
 800ea08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea0c:	e135      	b.n	800ec7a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	7d1b      	ldrb	r3, [r3, #20]
 800ea12:	f003 0301 	and.w	r3, r3, #1
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d101      	bne.n	800ea1e <f_read+0x5a>
 800ea1a:	2307      	movs	r3, #7
 800ea1c:	e12d      	b.n	800ec7a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	68da      	ldr	r2, [r3, #12]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	699b      	ldr	r3, [r3, #24]
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	6a3b      	ldr	r3, [r7, #32]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	f240 811e 	bls.w	800ec70 <f_read+0x2ac>
 800ea34:	6a3b      	ldr	r3, [r7, #32]
 800ea36:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ea38:	e11a      	b.n	800ec70 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	8992      	ldrh	r2, [r2, #12]
 800ea42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea46:	fb02 f201 	mul.w	r2, r2, r1
 800ea4a:	1a9b      	subs	r3, r3, r2
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f040 80d5 	bne.w	800ebfc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	699b      	ldr	r3, [r3, #24]
 800ea56:	697a      	ldr	r2, [r7, #20]
 800ea58:	8992      	ldrh	r2, [r2, #12]
 800ea5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	8952      	ldrh	r2, [r2, #10]
 800ea62:	3a01      	subs	r2, #1
 800ea64:	4013      	ands	r3, r2
 800ea66:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d12f      	bne.n	800eace <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	699b      	ldr	r3, [r3, #24]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d103      	bne.n	800ea7e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	633b      	str	r3, [r7, #48]	; 0x30
 800ea7c:	e013      	b.n	800eaa6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d007      	beq.n	800ea96 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	699b      	ldr	r3, [r3, #24]
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f7fe f8de 	bl	800cc4e <clmt_clust>
 800ea92:	6338      	str	r0, [r7, #48]	; 0x30
 800ea94:	e007      	b.n	800eaa6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	69db      	ldr	r3, [r3, #28]
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	f7fd fdf1 	bl	800c686 <get_fat>
 800eaa4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d804      	bhi.n	800eab6 <f_read+0xf2>
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2202      	movs	r2, #2
 800eab0:	755a      	strb	r2, [r3, #21]
 800eab2:	2302      	movs	r3, #2
 800eab4:	e0e1      	b.n	800ec7a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eabc:	d104      	bne.n	800eac8 <f_read+0x104>
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2201      	movs	r2, #1
 800eac2:	755a      	strb	r2, [r3, #21]
 800eac4:	2301      	movs	r3, #1
 800eac6:	e0d8      	b.n	800ec7a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eacc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	69db      	ldr	r3, [r3, #28]
 800ead4:	4619      	mov	r1, r3
 800ead6:	4610      	mov	r0, r2
 800ead8:	f7fd fdb6 	bl	800c648 <clust2sect>
 800eadc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eade:	69bb      	ldr	r3, [r7, #24]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d104      	bne.n	800eaee <f_read+0x12a>
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2202      	movs	r2, #2
 800eae8:	755a      	strb	r2, [r3, #21]
 800eaea:	2302      	movs	r3, #2
 800eaec:	e0c5      	b.n	800ec7a <f_read+0x2b6>
			sect += csect;
 800eaee:	69ba      	ldr	r2, [r7, #24]
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	899b      	ldrh	r3, [r3, #12]
 800eafa:	461a      	mov	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb02:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d041      	beq.n	800eb8e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eb0a:	69fa      	ldr	r2, [r7, #28]
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	4413      	add	r3, r2
 800eb10:	697a      	ldr	r2, [r7, #20]
 800eb12:	8952      	ldrh	r2, [r2, #10]
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d905      	bls.n	800eb24 <f_read+0x160>
					cc = fs->csize - csect;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	895b      	ldrh	r3, [r3, #10]
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	7858      	ldrb	r0, [r3, #1]
 800eb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2a:	69ba      	ldr	r2, [r7, #24]
 800eb2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb2e:	f7fd f9df 	bl	800bef0 <disk_read>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d004      	beq.n	800eb42 <f_read+0x17e>
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	755a      	strb	r2, [r3, #21]
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e09b      	b.n	800ec7a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	7d1b      	ldrb	r3, [r3, #20]
 800eb46:	b25b      	sxtb	r3, r3
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	da18      	bge.n	800eb7e <f_read+0x1ba>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6a1a      	ldr	r2, [r3, #32]
 800eb50:	69bb      	ldr	r3, [r7, #24]
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d911      	bls.n	800eb7e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	6a1a      	ldr	r2, [r3, #32]
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	697a      	ldr	r2, [r7, #20]
 800eb64:	8992      	ldrh	r2, [r2, #12]
 800eb66:	fb02 f303 	mul.w	r3, r2, r3
 800eb6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb6c:	18d0      	adds	r0, r2, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	899b      	ldrh	r3, [r3, #12]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	f7fd fa99 	bl	800c0b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	899b      	ldrh	r3, [r3, #12]
 800eb82:	461a      	mov	r2, r3
 800eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb86:	fb02 f303 	mul.w	r3, r2, r3
 800eb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800eb8c:	e05c      	b.n	800ec48 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6a1b      	ldr	r3, [r3, #32]
 800eb92:	69ba      	ldr	r2, [r7, #24]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d02e      	beq.n	800ebf6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	7d1b      	ldrb	r3, [r3, #20]
 800eb9c:	b25b      	sxtb	r3, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	da18      	bge.n	800ebd4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	7858      	ldrb	r0, [r3, #1]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6a1a      	ldr	r2, [r3, #32]
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	f7fd f9bd 	bl	800bf30 <disk_write>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d004      	beq.n	800ebc6 <f_read+0x202>
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	755a      	strb	r2, [r3, #21]
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e059      	b.n	800ec7a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	7d1b      	ldrb	r3, [r3, #20]
 800ebca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebce:	b2da      	uxtb	r2, r3
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	7858      	ldrb	r0, [r3, #1]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebde:	2301      	movs	r3, #1
 800ebe0:	69ba      	ldr	r2, [r7, #24]
 800ebe2:	f7fd f985 	bl	800bef0 <disk_read>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d004      	beq.n	800ebf6 <f_read+0x232>
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	755a      	strb	r2, [r3, #21]
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	e041      	b.n	800ec7a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	69ba      	ldr	r2, [r7, #24]
 800ebfa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	899b      	ldrh	r3, [r3, #12]
 800ec00:	4618      	mov	r0, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	699b      	ldr	r3, [r3, #24]
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	8992      	ldrh	r2, [r2, #12]
 800ec0a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec0e:	fb02 f201 	mul.w	r2, r2, r1
 800ec12:	1a9b      	subs	r3, r3, r2
 800ec14:	1ac3      	subs	r3, r0, r3
 800ec16:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ec18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d901      	bls.n	800ec24 <f_read+0x260>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	699b      	ldr	r3, [r3, #24]
 800ec2e:	697a      	ldr	r2, [r7, #20]
 800ec30:	8992      	ldrh	r2, [r2, #12]
 800ec32:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec36:	fb02 f200 	mul.w	r2, r2, r0
 800ec3a:	1a9b      	subs	r3, r3, r2
 800ec3c:	440b      	add	r3, r1
 800ec3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec40:	4619      	mov	r1, r3
 800ec42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec44:	f7fd fa34 	bl	800c0b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ec48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4c:	4413      	add	r3, r2
 800ec4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	699a      	ldr	r2, [r3, #24]
 800ec54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec56:	441a      	add	r2, r3
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	619a      	str	r2, [r3, #24]
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec62:	441a      	add	r2, r3
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	f47f aee1 	bne.w	800ea3a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3738      	adds	r7, #56	; 0x38
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b08c      	sub	sp, #48	; 0x30
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	60f8      	str	r0, [r7, #12]
 800ec8a:	60b9      	str	r1, [r7, #8]
 800ec8c:	607a      	str	r2, [r7, #4]
 800ec8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	2200      	movs	r2, #0
 800ec98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f107 0210 	add.w	r2, r7, #16
 800eca0:	4611      	mov	r1, r2
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7ff fc46 	bl	800e534 <validate>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ecae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d107      	bne.n	800ecc6 <f_write+0x44>
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	7d5b      	ldrb	r3, [r3, #21]
 800ecba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ecbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d002      	beq.n	800eccc <f_write+0x4a>
 800ecc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecca:	e16a      	b.n	800efa2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	7d1b      	ldrb	r3, [r3, #20]
 800ecd0:	f003 0302 	and.w	r3, r3, #2
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d101      	bne.n	800ecdc <f_write+0x5a>
 800ecd8:	2307      	movs	r3, #7
 800ecda:	e162      	b.n	800efa2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	699a      	ldr	r2, [r3, #24]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	441a      	add	r2, r3
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	699b      	ldr	r3, [r3, #24]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	f080 814c 	bcs.w	800ef86 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	43db      	mvns	r3, r3
 800ecf4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ecf6:	e146      	b.n	800ef86 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	699b      	ldr	r3, [r3, #24]
 800ecfc:	693a      	ldr	r2, [r7, #16]
 800ecfe:	8992      	ldrh	r2, [r2, #12]
 800ed00:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed04:	fb02 f201 	mul.w	r2, r2, r1
 800ed08:	1a9b      	subs	r3, r3, r2
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f040 80f1 	bne.w	800eef2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	699b      	ldr	r3, [r3, #24]
 800ed14:	693a      	ldr	r2, [r7, #16]
 800ed16:	8992      	ldrh	r2, [r2, #12]
 800ed18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed1c:	693a      	ldr	r2, [r7, #16]
 800ed1e:	8952      	ldrh	r2, [r2, #10]
 800ed20:	3a01      	subs	r2, #1
 800ed22:	4013      	ands	r3, r2
 800ed24:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d143      	bne.n	800edb4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	699b      	ldr	r3, [r3, #24]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10c      	bne.n	800ed4e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d11a      	bne.n	800ed76 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2100      	movs	r1, #0
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7fd feea 	bl	800cb1e <create_chain>
 800ed4a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ed4c:	e013      	b.n	800ed76 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d007      	beq.n	800ed66 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	699b      	ldr	r3, [r3, #24]
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7fd ff76 	bl	800cc4e <clmt_clust>
 800ed62:	62b8      	str	r0, [r7, #40]	; 0x28
 800ed64:	e007      	b.n	800ed76 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	69db      	ldr	r3, [r3, #28]
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4610      	mov	r0, r2
 800ed70:	f7fd fed5 	bl	800cb1e <create_chain>
 800ed74:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f000 8109 	beq.w	800ef90 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ed7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d104      	bne.n	800ed8e <f_write+0x10c>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2202      	movs	r2, #2
 800ed88:	755a      	strb	r2, [r3, #21]
 800ed8a:	2302      	movs	r3, #2
 800ed8c:	e109      	b.n	800efa2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed94:	d104      	bne.n	800eda0 <f_write+0x11e>
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	755a      	strb	r2, [r3, #21]
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	e100      	b.n	800efa2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eda4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d102      	bne.n	800edb4 <f_write+0x132>
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edb2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	7d1b      	ldrb	r3, [r3, #20]
 800edb8:	b25b      	sxtb	r3, r3
 800edba:	2b00      	cmp	r3, #0
 800edbc:	da18      	bge.n	800edf0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	7858      	ldrb	r0, [r3, #1]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6a1a      	ldr	r2, [r3, #32]
 800edcc:	2301      	movs	r3, #1
 800edce:	f7fd f8af 	bl	800bf30 <disk_write>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d004      	beq.n	800ede2 <f_write+0x160>
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2201      	movs	r2, #1
 800eddc:	755a      	strb	r2, [r3, #21]
 800edde:	2301      	movs	r3, #1
 800ede0:	e0df      	b.n	800efa2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	7d1b      	ldrb	r3, [r3, #20]
 800ede6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edea:	b2da      	uxtb	r2, r3
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800edf0:	693a      	ldr	r2, [r7, #16]
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	69db      	ldr	r3, [r3, #28]
 800edf6:	4619      	mov	r1, r3
 800edf8:	4610      	mov	r0, r2
 800edfa:	f7fd fc25 	bl	800c648 <clust2sect>
 800edfe:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d104      	bne.n	800ee10 <f_write+0x18e>
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2202      	movs	r2, #2
 800ee0a:	755a      	strb	r2, [r3, #21]
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	e0c8      	b.n	800efa2 <f_write+0x320>
			sect += csect;
 800ee10:	697a      	ldr	r2, [r7, #20]
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	4413      	add	r3, r2
 800ee16:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	899b      	ldrh	r3, [r3, #12]
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee24:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ee26:	6a3b      	ldr	r3, [r7, #32]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d043      	beq.n	800eeb4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ee2c:	69ba      	ldr	r2, [r7, #24]
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	4413      	add	r3, r2
 800ee32:	693a      	ldr	r2, [r7, #16]
 800ee34:	8952      	ldrh	r2, [r2, #10]
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d905      	bls.n	800ee46 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	895b      	ldrh	r3, [r3, #10]
 800ee3e:	461a      	mov	r2, r3
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	7858      	ldrb	r0, [r3, #1]
 800ee4a:	6a3b      	ldr	r3, [r7, #32]
 800ee4c:	697a      	ldr	r2, [r7, #20]
 800ee4e:	69f9      	ldr	r1, [r7, #28]
 800ee50:	f7fd f86e 	bl	800bf30 <disk_write>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d004      	beq.n	800ee64 <f_write+0x1e2>
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	755a      	strb	r2, [r3, #21]
 800ee60:	2301      	movs	r3, #1
 800ee62:	e09e      	b.n	800efa2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6a1a      	ldr	r2, [r3, #32]
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	6a3a      	ldr	r2, [r7, #32]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d918      	bls.n	800eea4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6a1a      	ldr	r2, [r3, #32]
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	1ad3      	subs	r3, r2, r3
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	8992      	ldrh	r2, [r2, #12]
 800ee84:	fb02 f303 	mul.w	r3, r2, r3
 800ee88:	69fa      	ldr	r2, [r7, #28]
 800ee8a:	18d1      	adds	r1, r2, r3
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	899b      	ldrh	r3, [r3, #12]
 800ee90:	461a      	mov	r2, r3
 800ee92:	f7fd f90d 	bl	800c0b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	7d1b      	ldrb	r3, [r3, #20]
 800ee9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee9e:	b2da      	uxtb	r2, r3
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	899b      	ldrh	r3, [r3, #12]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	fb02 f303 	mul.w	r3, r2, r3
 800eeb0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800eeb2:	e04b      	b.n	800ef4c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	697a      	ldr	r2, [r7, #20]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d016      	beq.n	800eeec <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	699a      	ldr	r2, [r3, #24]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d210      	bcs.n	800eeec <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	7858      	ldrb	r0, [r3, #1]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eed4:	2301      	movs	r3, #1
 800eed6:	697a      	ldr	r2, [r7, #20]
 800eed8:	f7fd f80a 	bl	800bef0 <disk_read>
 800eedc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d004      	beq.n	800eeec <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2201      	movs	r2, #1
 800eee6:	755a      	strb	r2, [r3, #21]
 800eee8:	2301      	movs	r3, #1
 800eeea:	e05a      	b.n	800efa2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	697a      	ldr	r2, [r7, #20]
 800eef0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	899b      	ldrh	r3, [r3, #12]
 800eef6:	4618      	mov	r0, r3
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	699b      	ldr	r3, [r3, #24]
 800eefc:	693a      	ldr	r2, [r7, #16]
 800eefe:	8992      	ldrh	r2, [r2, #12]
 800ef00:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef04:	fb02 f201 	mul.w	r2, r2, r1
 800ef08:	1a9b      	subs	r3, r3, r2
 800ef0a:	1ac3      	subs	r3, r0, r3
 800ef0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ef0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d901      	bls.n	800ef1a <f_write+0x298>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	699b      	ldr	r3, [r3, #24]
 800ef24:	693a      	ldr	r2, [r7, #16]
 800ef26:	8992      	ldrh	r2, [r2, #12]
 800ef28:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef2c:	fb02 f200 	mul.w	r2, r2, r0
 800ef30:	1a9b      	subs	r3, r3, r2
 800ef32:	440b      	add	r3, r1
 800ef34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef36:	69f9      	ldr	r1, [r7, #28]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7fd f8b9 	bl	800c0b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	7d1b      	ldrb	r3, [r3, #20]
 800ef42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ef4c:	69fa      	ldr	r2, [r7, #28]
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	4413      	add	r3, r2
 800ef52:	61fb      	str	r3, [r7, #28]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	699a      	ldr	r2, [r3, #24]
 800ef58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5a:	441a      	add	r2, r3
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	619a      	str	r2, [r3, #24]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	68da      	ldr	r2, [r3, #12]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	699b      	ldr	r3, [r3, #24]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	bf38      	it	cc
 800ef6c:	461a      	movcc	r2, r3
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	60da      	str	r2, [r3, #12]
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef78:	441a      	add	r2, r3
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	1ad3      	subs	r3, r2, r3
 800ef84:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	f47f aeb5 	bne.w	800ecf8 <f_write+0x76>
 800ef8e:	e000      	b.n	800ef92 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ef90:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	7d1b      	ldrb	r3, [r3, #20]
 800ef96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef9a:	b2da      	uxtb	r2, r3
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3730      	adds	r7, #48	; 0x30
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b086      	sub	sp, #24
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f107 0208 	add.w	r2, r7, #8
 800efb8:	4611      	mov	r1, r2
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff faba 	bl	800e534 <validate>
 800efc0:	4603      	mov	r3, r0
 800efc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800efc4:	7dfb      	ldrb	r3, [r7, #23]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d168      	bne.n	800f09c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	7d1b      	ldrb	r3, [r3, #20]
 800efce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d062      	beq.n	800f09c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	7d1b      	ldrb	r3, [r3, #20]
 800efda:	b25b      	sxtb	r3, r3
 800efdc:	2b00      	cmp	r3, #0
 800efde:	da15      	bge.n	800f00c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	7858      	ldrb	r0, [r3, #1]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a1a      	ldr	r2, [r3, #32]
 800efee:	2301      	movs	r3, #1
 800eff0:	f7fc ff9e 	bl	800bf30 <disk_write>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <f_sync+0x54>
 800effa:	2301      	movs	r3, #1
 800effc:	e04f      	b.n	800f09e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	7d1b      	ldrb	r3, [r3, #20]
 800f002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f006:	b2da      	uxtb	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f00c:	f7fc fce0 	bl	800b9d0 <get_fattime>
 800f010:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f012:	68ba      	ldr	r2, [r7, #8]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f018:	4619      	mov	r1, r3
 800f01a:	4610      	mov	r0, r2
 800f01c:	f7fd fa76 	bl	800c50c <move_window>
 800f020:	4603      	mov	r3, r0
 800f022:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f024:	7dfb      	ldrb	r3, [r7, #23]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d138      	bne.n	800f09c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f02e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	330b      	adds	r3, #11
 800f034:	781a      	ldrb	r2, [r3, #0]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	330b      	adds	r3, #11
 800f03a:	f042 0220 	orr.w	r2, r2, #32
 800f03e:	b2d2      	uxtb	r2, r2
 800f040:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6818      	ldr	r0, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	461a      	mov	r2, r3
 800f04c:	68f9      	ldr	r1, [r7, #12]
 800f04e:	f7fd fffb 	bl	800d048 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f103 021c 	add.w	r2, r3, #28
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	4619      	mov	r1, r3
 800f05e:	4610      	mov	r0, r2
 800f060:	f7fc fffa 	bl	800c058 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	3316      	adds	r3, #22
 800f068:	6939      	ldr	r1, [r7, #16]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fc fff4 	bl	800c058 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3312      	adds	r3, #18
 800f074:	2100      	movs	r1, #0
 800f076:	4618      	mov	r0, r3
 800f078:	f7fc ffd3 	bl	800c022 <st_word>
					fs->wflag = 1;
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	2201      	movs	r2, #1
 800f080:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	4618      	mov	r0, r3
 800f086:	f7fd fa6f 	bl	800c568 <sync_fs>
 800f08a:	4603      	mov	r3, r0
 800f08c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	7d1b      	ldrb	r3, [r3, #20]
 800f092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f096:	b2da      	uxtb	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f09c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b084      	sub	sp, #16
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7ff ff7b 	bl	800efaa <f_sync>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d118      	bne.n	800f0f0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f107 0208 	add.w	r2, r7, #8
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7ff fa34 	bl	800e534 <validate>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d10c      	bne.n	800f0f0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fd f972 	bl	800c3c4 <dec_lock>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d102      	bne.n	800f0f0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f0fa:	b590      	push	{r4, r7, lr}
 800f0fc:	b093      	sub	sp, #76	; 0x4c
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f102:	f107 010c 	add.w	r1, r7, #12
 800f106:	1d3b      	adds	r3, r7, #4
 800f108:	2200      	movs	r2, #0
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fe ff86 	bl	800e01c <find_volume>
 800f110:	4603      	mov	r3, r0
 800f112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800f116:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d131      	bne.n	800f182 <f_chdir+0x88>
		dj.obj.fs = fs;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	f107 0310 	add.w	r3, r7, #16
 800f128:	4611      	mov	r1, r2
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fe fe46 	bl	800ddbc <follow_path>
 800f130:	4603      	mov	r3, r0
 800f132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 800f136:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d11a      	bne.n	800f174 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f13e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f142:	b25b      	sxtb	r3, r3
 800f144:	2b00      	cmp	r3, #0
 800f146:	da03      	bge.n	800f150 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	69ba      	ldr	r2, [r7, #24]
 800f14c:	61da      	str	r2, [r3, #28]
 800f14e:	e011      	b.n	800f174 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800f150:	7dbb      	ldrb	r3, [r7, #22]
 800f152:	f003 0310 	and.w	r3, r3, #16
 800f156:	2b00      	cmp	r3, #0
 800f158:	d009      	beq.n	800f16e <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f15e:	68fc      	ldr	r4, [r7, #12]
 800f160:	4611      	mov	r1, r2
 800f162:	4618      	mov	r0, r3
 800f164:	f7fd ff51 	bl	800d00a <ld_clust>
 800f168:	4603      	mov	r3, r0
 800f16a:	61e3      	str	r3, [r4, #28]
 800f16c:	e002      	b.n	800f174 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800f16e:	2305      	movs	r3, #5
 800f170:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f174:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f178:	2b04      	cmp	r3, #4
 800f17a:	d102      	bne.n	800f182 <f_chdir+0x88>
 800f17c:	2305      	movs	r3, #5
 800f17e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 800f182:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800f186:	4618      	mov	r0, r3
 800f188:	374c      	adds	r7, #76	; 0x4c
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd90      	pop	{r4, r7, pc}

0800f18e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f18e:	b580      	push	{r7, lr}
 800f190:	b090      	sub	sp, #64	; 0x40
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
 800f196:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f107 0208 	add.w	r2, r7, #8
 800f19e:	4611      	mov	r1, r2
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7ff f9c7 	bl	800e534 <validate>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f1ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d103      	bne.n	800f1bc <f_lseek+0x2e>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	7d5b      	ldrb	r3, [r3, #21]
 800f1b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f1bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <f_lseek+0x3c>
 800f1c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1c8:	e201      	b.n	800f5ce <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f000 80d9 	beq.w	800f386 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1da:	d15a      	bne.n	800f292 <f_lseek+0x104>
			tbl = fp->cltbl;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e4:	1d1a      	adds	r2, r3, #4
 800f1e6:	627a      	str	r2, [r7, #36]	; 0x24
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	617b      	str	r3, [r7, #20]
 800f1ec:	2302      	movs	r3, #2
 800f1ee:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d03a      	beq.n	800f272 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fe:	613b      	str	r3, [r7, #16]
 800f200:	2300      	movs	r3, #0
 800f202:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f206:	3302      	adds	r3, #2
 800f208:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20c:	60fb      	str	r3, [r7, #12]
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	3301      	adds	r3, #1
 800f212:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fd fa34 	bl	800c686 <get_fat>
 800f21e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	2b01      	cmp	r3, #1
 800f224:	d804      	bhi.n	800f230 <f_lseek+0xa2>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2202      	movs	r2, #2
 800f22a:	755a      	strb	r2, [r3, #21]
 800f22c:	2302      	movs	r3, #2
 800f22e:	e1ce      	b.n	800f5ce <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f236:	d104      	bne.n	800f242 <f_lseek+0xb4>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2201      	movs	r2, #1
 800f23c:	755a      	strb	r2, [r3, #21]
 800f23e:	2301      	movs	r3, #1
 800f240:	e1c5      	b.n	800f5ce <f_lseek+0x440>
					} while (cl == pcl + 1);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	3301      	adds	r3, #1
 800f246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f248:	429a      	cmp	r2, r3
 800f24a:	d0de      	beq.n	800f20a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	429a      	cmp	r2, r3
 800f252:	d809      	bhi.n	800f268 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	1d1a      	adds	r2, r3, #4
 800f258:	627a      	str	r2, [r7, #36]	; 0x24
 800f25a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f25c:	601a      	str	r2, [r3, #0]
 800f25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f260:	1d1a      	adds	r2, r3, #4
 800f262:	627a      	str	r2, [r7, #36]	; 0x24
 800f264:	693a      	ldr	r2, [r7, #16]
 800f266:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	6a1b      	ldr	r3, [r3, #32]
 800f26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f26e:	429a      	cmp	r2, r3
 800f270:	d3c4      	bcc.n	800f1fc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f278:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f27a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d803      	bhi.n	800f28a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f284:	2200      	movs	r2, #0
 800f286:	601a      	str	r2, [r3, #0]
 800f288:	e19f      	b.n	800f5ca <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f28a:	2311      	movs	r3, #17
 800f28c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f290:	e19b      	b.n	800f5ca <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	683a      	ldr	r2, [r7, #0]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d902      	bls.n	800f2a2 <f_lseek+0x114>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	683a      	ldr	r2, [r7, #0]
 800f2a6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 818d 	beq.w	800f5ca <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7fd fcc9 	bl	800cc4e <clmt_clust>
 800f2bc:	4602      	mov	r2, r0
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	69db      	ldr	r3, [r3, #28]
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	4610      	mov	r0, r2
 800f2cc:	f7fd f9bc 	bl	800c648 <clust2sect>
 800f2d0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d104      	bne.n	800f2e2 <f_lseek+0x154>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2202      	movs	r2, #2
 800f2dc:	755a      	strb	r2, [r3, #21]
 800f2de:	2302      	movs	r3, #2
 800f2e0:	e175      	b.n	800f5ce <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	8992      	ldrh	r2, [r2, #12]
 800f2ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2ee:	68ba      	ldr	r2, [r7, #8]
 800f2f0:	8952      	ldrh	r2, [r2, #10]
 800f2f2:	3a01      	subs	r2, #1
 800f2f4:	4013      	ands	r3, r2
 800f2f6:	69ba      	ldr	r2, [r7, #24]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	699b      	ldr	r3, [r3, #24]
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	8992      	ldrh	r2, [r2, #12]
 800f304:	fbb3 f1f2 	udiv	r1, r3, r2
 800f308:	fb02 f201 	mul.w	r2, r2, r1
 800f30c:	1a9b      	subs	r3, r3, r2
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f000 815b 	beq.w	800f5ca <f_lseek+0x43c>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6a1b      	ldr	r3, [r3, #32]
 800f318:	69ba      	ldr	r2, [r7, #24]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	f000 8155 	beq.w	800f5ca <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	7d1b      	ldrb	r3, [r3, #20]
 800f324:	b25b      	sxtb	r3, r3
 800f326:	2b00      	cmp	r3, #0
 800f328:	da18      	bge.n	800f35c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	7858      	ldrb	r0, [r3, #1]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6a1a      	ldr	r2, [r3, #32]
 800f338:	2301      	movs	r3, #1
 800f33a:	f7fc fdf9 	bl	800bf30 <disk_write>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d004      	beq.n	800f34e <f_lseek+0x1c0>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	755a      	strb	r2, [r3, #21]
 800f34a:	2301      	movs	r3, #1
 800f34c:	e13f      	b.n	800f5ce <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	7d1b      	ldrb	r3, [r3, #20]
 800f352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f356:	b2da      	uxtb	r2, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	7858      	ldrb	r0, [r3, #1]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f366:	2301      	movs	r3, #1
 800f368:	69ba      	ldr	r2, [r7, #24]
 800f36a:	f7fc fdc1 	bl	800bef0 <disk_read>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d004      	beq.n	800f37e <f_lseek+0x1f0>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2201      	movs	r2, #1
 800f378:	755a      	strb	r2, [r3, #21]
 800f37a:	2301      	movs	r3, #1
 800f37c:	e127      	b.n	800f5ce <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	69ba      	ldr	r2, [r7, #24]
 800f382:	621a      	str	r2, [r3, #32]
 800f384:	e121      	b.n	800f5ca <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	683a      	ldr	r2, [r7, #0]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d908      	bls.n	800f3a2 <f_lseek+0x214>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	7d1b      	ldrb	r3, [r3, #20]
 800f394:	f003 0302 	and.w	r3, r3, #2
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d102      	bne.n	800f3a2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	699b      	ldr	r3, [r3, #24]
 800f3a6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	637b      	str	r3, [r7, #52]	; 0x34
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3b0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f000 80b5 	beq.w	800f524 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	895b      	ldrh	r3, [r3, #10]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	899b      	ldrh	r3, [r3, #12]
 800f3c4:	fb03 f302 	mul.w	r3, r3, r2
 800f3c8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d01b      	beq.n	800f408 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	1e5a      	subs	r2, r3, #1
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800f3da:	6a3b      	ldr	r3, [r7, #32]
 800f3dc:	1e59      	subs	r1, r3, #1
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d30f      	bcc.n	800f408 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f3e8:	6a3b      	ldr	r3, [r7, #32]
 800f3ea:	1e5a      	subs	r2, r3, #1
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	425b      	negs	r3, r3
 800f3f0:	401a      	ands	r2, r3
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	699b      	ldr	r3, [r3, #24]
 800f3fa:	683a      	ldr	r2, [r7, #0]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	69db      	ldr	r3, [r3, #28]
 800f404:	63bb      	str	r3, [r7, #56]	; 0x38
 800f406:	e022      	b.n	800f44e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f410:	2b00      	cmp	r3, #0
 800f412:	d119      	bne.n	800f448 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2100      	movs	r1, #0
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fd fb80 	bl	800cb1e <create_chain>
 800f41e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f422:	2b01      	cmp	r3, #1
 800f424:	d104      	bne.n	800f430 <f_lseek+0x2a2>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2202      	movs	r2, #2
 800f42a:	755a      	strb	r2, [r3, #21]
 800f42c:	2302      	movs	r3, #2
 800f42e:	e0ce      	b.n	800f5ce <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f436:	d104      	bne.n	800f442 <f_lseek+0x2b4>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	755a      	strb	r2, [r3, #21]
 800f43e:	2301      	movs	r3, #1
 800f440:	e0c5      	b.n	800f5ce <f_lseek+0x440>
					fp->obj.sclust = clst;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f446:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f44c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f450:	2b00      	cmp	r3, #0
 800f452:	d067      	beq.n	800f524 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800f454:	e03a      	b.n	800f4cc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800f456:	683a      	ldr	r2, [r7, #0]
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	603b      	str	r3, [r7, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	699a      	ldr	r2, [r3, #24]
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	441a      	add	r2, r3
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	7d1b      	ldrb	r3, [r3, #20]
 800f46e:	f003 0302 	and.w	r3, r3, #2
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00b      	beq.n	800f48e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fd fb4f 	bl	800cb1e <create_chain>
 800f480:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	2b00      	cmp	r3, #0
 800f486:	d108      	bne.n	800f49a <f_lseek+0x30c>
							ofs = 0; break;
 800f488:	2300      	movs	r3, #0
 800f48a:	603b      	str	r3, [r7, #0]
 800f48c:	e022      	b.n	800f4d4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f492:	4618      	mov	r0, r3
 800f494:	f7fd f8f7 	bl	800c686 <get_fat>
 800f498:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4a0:	d104      	bne.n	800f4ac <f_lseek+0x31e>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	755a      	strb	r2, [r3, #21]
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	e090      	b.n	800f5ce <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d904      	bls.n	800f4bc <f_lseek+0x32e>
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	6a1b      	ldr	r3, [r3, #32]
 800f4b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d304      	bcc.n	800f4c6 <f_lseek+0x338>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2202      	movs	r2, #2
 800f4c0:	755a      	strb	r2, [r3, #21]
 800f4c2:	2302      	movs	r3, #2
 800f4c4:	e083      	b.n	800f5ce <f_lseek+0x440>
					fp->clust = clst;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4ca:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d8c0      	bhi.n	800f456 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	699a      	ldr	r2, [r3, #24]
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	441a      	add	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	899b      	ldrh	r3, [r3, #12]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4ec:	fb02 f201 	mul.w	r2, r2, r1
 800f4f0:	1a9b      	subs	r3, r3, r2
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d016      	beq.n	800f524 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fd f8a4 	bl	800c648 <clust2sect>
 800f500:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f504:	2b00      	cmp	r3, #0
 800f506:	d104      	bne.n	800f512 <f_lseek+0x384>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2202      	movs	r2, #2
 800f50c:	755a      	strb	r2, [r3, #21]
 800f50e:	2302      	movs	r3, #2
 800f510:	e05d      	b.n	800f5ce <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	899b      	ldrh	r3, [r3, #12]
 800f516:	461a      	mov	r2, r3
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f51e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f520:	4413      	add	r3, r2
 800f522:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	699a      	ldr	r2, [r3, #24]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d90a      	bls.n	800f546 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	699a      	ldr	r2, [r3, #24]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	7d1b      	ldrb	r3, [r3, #20]
 800f53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f540:	b2da      	uxtb	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	699b      	ldr	r3, [r3, #24]
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	8992      	ldrh	r2, [r2, #12]
 800f54e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f552:	fb02 f201 	mul.w	r2, r2, r1
 800f556:	1a9b      	subs	r3, r3, r2
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d036      	beq.n	800f5ca <f_lseek+0x43c>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6a1b      	ldr	r3, [r3, #32]
 800f560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f562:	429a      	cmp	r2, r3
 800f564:	d031      	beq.n	800f5ca <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	7d1b      	ldrb	r3, [r3, #20]
 800f56a:	b25b      	sxtb	r3, r3
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	da18      	bge.n	800f5a2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	7858      	ldrb	r0, [r3, #1]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6a1a      	ldr	r2, [r3, #32]
 800f57e:	2301      	movs	r3, #1
 800f580:	f7fc fcd6 	bl	800bf30 <disk_write>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d004      	beq.n	800f594 <f_lseek+0x406>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2201      	movs	r2, #1
 800f58e:	755a      	strb	r2, [r3, #21]
 800f590:	2301      	movs	r3, #1
 800f592:	e01c      	b.n	800f5ce <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	7d1b      	ldrb	r3, [r3, #20]
 800f598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f59c:	b2da      	uxtb	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	7858      	ldrb	r0, [r3, #1]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5b0:	f7fc fc9e 	bl	800bef0 <disk_read>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d004      	beq.n	800f5c4 <f_lseek+0x436>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2201      	movs	r2, #1
 800f5be:	755a      	strb	r2, [r3, #21]
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e004      	b.n	800f5ce <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5c8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f5ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3740      	adds	r7, #64	; 0x40
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b0a0      	sub	sp, #128	; 0x80
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f5e2:	f107 010c 	add.w	r1, r7, #12
 800f5e6:	1d3b      	adds	r3, r7, #4
 800f5e8:	2202      	movs	r2, #2
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7fe fd16 	bl	800e01c <find_volume>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800f5fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f040 80a4 	bne.w	800f74c <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f60a:	4611      	mov	r1, r2
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fe fbd5 	bl	800ddbc <follow_path>
 800f612:	4603      	mov	r3, r0
 800f614:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 800f618:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d108      	bne.n	800f632 <f_unlink+0x5c>
 800f620:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f624:	f003 0320 	and.w	r3, r3, #32
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d002      	beq.n	800f632 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800f62c:	2306      	movs	r3, #6
 800f62e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800f632:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f636:	2b00      	cmp	r3, #0
 800f638:	d108      	bne.n	800f64c <f_unlink+0x76>
 800f63a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f63e:	2102      	movs	r1, #2
 800f640:	4618      	mov	r0, r3
 800f642:	f7fc fdb3 	bl	800c1ac <chk_lock>
 800f646:	4603      	mov	r3, r0
 800f648:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800f64c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f650:	2b00      	cmp	r3, #0
 800f652:	d17b      	bne.n	800f74c <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f654:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f658:	b25b      	sxtb	r3, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	da03      	bge.n	800f666 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800f65e:	2306      	movs	r3, #6
 800f660:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f664:	e008      	b.n	800f678 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800f666:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800f66a:	f003 0301 	and.w	r3, r3, #1
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d002      	beq.n	800f678 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800f672:	2307      	movs	r3, #7
 800f674:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800f678:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d13d      	bne.n	800f6fc <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f684:	4611      	mov	r1, r2
 800f686:	4618      	mov	r0, r3
 800f688:	f7fd fcbf 	bl	800d00a <ld_clust>
 800f68c:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800f68e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800f692:	f003 0310 	and.w	r3, r3, #16
 800f696:	2b00      	cmp	r3, #0
 800f698:	d030      	beq.n	800f6fc <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	69db      	ldr	r3, [r3, #28]
 800f69e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d103      	bne.n	800f6ac <f_unlink+0xd6>
						res = FR_DENIED;
 800f6a4:	2307      	movs	r3, #7
 800f6a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f6aa:	e027      	b.n	800f6fc <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800f6b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6b2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800f6b4:	f107 0310 	add.w	r3, r7, #16
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fd faff 	bl	800ccbe <dir_sdi>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800f6c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d116      	bne.n	800f6fc <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 800f6ce:	f107 0310 	add.w	r3, r7, #16
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7fd fec3 	bl	800d460 <dir_read>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800f6e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d102      	bne.n	800f6ee <f_unlink+0x118>
 800f6e8:	2307      	movs	r3, #7
 800f6ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800f6ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f6f2:	2b04      	cmp	r3, #4
 800f6f4:	d102      	bne.n	800f6fc <f_unlink+0x126>
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800f6fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f700:	2b00      	cmp	r3, #0
 800f702:	d123      	bne.n	800f74c <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800f704:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fe f909 	bl	800d920 <dir_remove>
 800f70e:	4603      	mov	r3, r0
 800f710:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800f714:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d10c      	bne.n	800f736 <f_unlink+0x160>
 800f71c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d009      	beq.n	800f736 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800f722:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f726:	2200      	movs	r2, #0
 800f728:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fd f992 	bl	800ca54 <remove_chain>
 800f730:	4603      	mov	r3, r0
 800f732:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800f736:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d106      	bne.n	800f74c <f_unlink+0x176>
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	4618      	mov	r0, r3
 800f742:	f7fc ff11 	bl	800c568 <sync_fs>
 800f746:	4603      	mov	r3, r0
 800f748:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f74c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f750:	4618      	mov	r0, r3
 800f752:	3780      	adds	r7, #128	; 0x80
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b098      	sub	sp, #96	; 0x60
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f760:	f107 010c 	add.w	r1, r7, #12
 800f764:	1d3b      	adds	r3, r7, #4
 800f766:	2202      	movs	r2, #2
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fe fc57 	bl	800e01c <find_volume>
 800f76e:	4603      	mov	r3, r0
 800f770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800f778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f040 80ff 	bne.w	800f980 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	f107 0310 	add.w	r3, r7, #16
 800f788:	4611      	mov	r1, r2
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fe fb16 	bl	800ddbc <follow_path>
 800f790:	4603      	mov	r3, r0
 800f792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d102      	bne.n	800f7a4 <f_mkdir+0x4c>
 800f79e:	2308      	movs	r3, #8
 800f7a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800f7a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7a8:	2b04      	cmp	r3, #4
 800f7aa:	d108      	bne.n	800f7be <f_mkdir+0x66>
 800f7ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f7b0:	f003 0320 	and.w	r3, r3, #32
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d002      	beq.n	800f7be <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800f7b8:	2306      	movs	r3, #6
 800f7ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f7be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7c2:	2b04      	cmp	r3, #4
 800f7c4:	f040 80dc 	bne.w	800f980 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f7c8:	f107 0310 	add.w	r3, r7, #16
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fd f9a5 	bl	800cb1e <create_chain>
 800f7d4:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	895b      	ldrh	r3, [r3, #10]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	899b      	ldrh	r3, [r3, #12]
 800f7e0:	fb03 f302 	mul.w	r3, r3, r2
 800f7e4:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d102      	bne.n	800f7f8 <f_mkdir+0xa0>
 800f7f2:	2307      	movs	r3, #7
 800f7f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800f7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	d102      	bne.n	800f804 <f_mkdir+0xac>
 800f7fe:	2302      	movs	r3, #2
 800f800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f80a:	d102      	bne.n	800f812 <f_mkdir+0xba>
 800f80c:	2301      	movs	r3, #1
 800f80e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f816:	2b00      	cmp	r3, #0
 800f818:	d106      	bne.n	800f828 <f_mkdir+0xd0>
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fc fe31 	bl	800c484 <sync_window>
 800f822:	4603      	mov	r3, r0
 800f824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800f828:	f7fc f8d2 	bl	800b9d0 <get_fattime>
 800f82c:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f832:	2b00      	cmp	r3, #0
 800f834:	d16c      	bne.n	800f910 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fc ff04 	bl	800c648 <clust2sect>
 800f840:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	333c      	adds	r3, #60	; 0x3c
 800f846:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	899b      	ldrh	r3, [r3, #12]
 800f84c:	461a      	mov	r2, r3
 800f84e:	2100      	movs	r1, #0
 800f850:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f852:	f7fc fc4e 	bl	800c0f2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f856:	220b      	movs	r2, #11
 800f858:	2120      	movs	r1, #32
 800f85a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f85c:	f7fc fc49 	bl	800c0f2 <mem_set>
					dir[DIR_Name] = '.';
 800f860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f862:	222e      	movs	r2, #46	; 0x2e
 800f864:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f868:	330b      	adds	r3, #11
 800f86a:	2210      	movs	r2, #16
 800f86c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800f86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f870:	3316      	adds	r3, #22
 800f872:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f874:	4618      	mov	r0, r3
 800f876:	f7fc fbef 	bl	800c058 <st_dword>
					st_clust(fs, dir, dcl);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f87e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f880:	4618      	mov	r0, r3
 800f882:	f7fd fbe1 	bl	800d048 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f888:	3320      	adds	r3, #32
 800f88a:	2220      	movs	r2, #32
 800f88c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fc fc0e 	bl	800c0b0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f896:	3321      	adds	r3, #33	; 0x21
 800f898:	222e      	movs	r2, #46	; 0x2e
 800f89a:	701a      	strb	r2, [r3, #0]
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	2b03      	cmp	r3, #3
 800f8a6:	d106      	bne.n	800f8b6 <f_mkdir+0x15e>
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d101      	bne.n	800f8b6 <f_mkdir+0x15e>
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8ba:	3320      	adds	r3, #32
 800f8bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8be:	4619      	mov	r1, r3
 800f8c0:	f7fd fbc2 	bl	800d048 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	895b      	ldrh	r3, [r3, #10]
 800f8c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8ca:	e01c      	b.n	800f906 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800f8cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8ce:	1c5a      	adds	r2, r3, #1
 800f8d0:	657a      	str	r2, [r7, #84]	; 0x54
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fc fdd0 	bl	800c484 <sync_window>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800f8ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d10d      	bne.n	800f90e <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	899b      	ldrh	r3, [r3, #12]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f8fc:	f7fc fbf9 	bl	800c0f2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f902:	3b01      	subs	r3, #1
 800f904:	65bb      	str	r3, [r7, #88]	; 0x58
 800f906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d1df      	bne.n	800f8cc <f_mkdir+0x174>
 800f90c:	e000      	b.n	800f910 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800f90e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f914:	2b00      	cmp	r3, #0
 800f916:	d107      	bne.n	800f928 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f918:	f107 0310 	add.w	r3, r7, #16
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fd ff07 	bl	800d730 <dir_register>
 800f922:	4603      	mov	r3, r0
 800f924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800f928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d120      	bne.n	800f972 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f932:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f936:	3316      	adds	r3, #22
 800f938:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fc fb8c 	bl	800c058 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f944:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f946:	4618      	mov	r0, r3
 800f948:	f7fd fb7e 	bl	800d048 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f94e:	330b      	adds	r3, #11
 800f950:	2210      	movs	r2, #16
 800f952:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2201      	movs	r2, #1
 800f958:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f95a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d10e      	bne.n	800f980 <f_mkdir+0x228>
					res = sync_fs(fs);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	4618      	mov	r0, r3
 800f966:	f7fc fdff 	bl	800c568 <sync_fs>
 800f96a:	4603      	mov	r3, r0
 800f96c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f970:	e006      	b.n	800f980 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f972:	f107 0310 	add.w	r3, r7, #16
 800f976:	2200      	movs	r2, #0
 800f978:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fd f86a 	bl	800ca54 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f984:	4618      	mov	r0, r3
 800f986:	3760      	adds	r7, #96	; 0x60
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b088      	sub	sp, #32
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
	int n = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f9a0:	e01b      	b.n	800f9da <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800f9a2:	f107 0310 	add.w	r3, r7, #16
 800f9a6:	f107 0114 	add.w	r1, r7, #20
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f7ff f809 	bl	800e9c4 <f_read>
		if (rc != 1) break;
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d116      	bne.n	800f9e6 <f_gets+0x5a>
		c = s[0];
 800f9b8:	7d3b      	ldrb	r3, [r7, #20]
 800f9ba:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800f9bc:	7dfb      	ldrb	r3, [r7, #23]
 800f9be:	2b0d      	cmp	r3, #13
 800f9c0:	d100      	bne.n	800f9c4 <f_gets+0x38>
 800f9c2:	e00a      	b.n	800f9da <f_gets+0x4e>
		*p++ = c;
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	1c5a      	adds	r2, r3, #1
 800f9c8:	61ba      	str	r2, [r7, #24]
 800f9ca:	7dfa      	ldrb	r2, [r7, #23]
 800f9cc:	701a      	strb	r2, [r3, #0]
		n++;
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800f9d4:	7dfb      	ldrb	r3, [r7, #23]
 800f9d6:	2b0a      	cmp	r3, #10
 800f9d8:	d007      	beq.n	800f9ea <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	3b01      	subs	r3, #1
 800f9de:	69fa      	ldr	r2, [r7, #28]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	dbde      	blt.n	800f9a2 <f_gets+0x16>
 800f9e4:	e002      	b.n	800f9ec <f_gets+0x60>
		if (rc != 1) break;
 800f9e6:	bf00      	nop
 800f9e8:	e000      	b.n	800f9ec <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800f9ea:	bf00      	nop
	}
	*p = 0;
 800f9ec:	69bb      	ldr	r3, [r7, #24]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d001      	beq.n	800f9fc <f_gets+0x70>
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	e000      	b.n	800f9fe <f_gets+0x72>
 800f9fc:	2300      	movs	r3, #0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3720      	adds	r7, #32
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
	...

0800fa08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b087      	sub	sp, #28
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	4613      	mov	r3, r2
 800fa14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fa16:	2301      	movs	r3, #1
 800fa18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fa1e:	4b1f      	ldr	r3, [pc, #124]	; (800fa9c <FATFS_LinkDriverEx+0x94>)
 800fa20:	7a5b      	ldrb	r3, [r3, #9]
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d131      	bne.n	800fa8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fa28:	4b1c      	ldr	r3, [pc, #112]	; (800fa9c <FATFS_LinkDriverEx+0x94>)
 800fa2a:	7a5b      	ldrb	r3, [r3, #9]
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	461a      	mov	r2, r3
 800fa30:	4b1a      	ldr	r3, [pc, #104]	; (800fa9c <FATFS_LinkDriverEx+0x94>)
 800fa32:	2100      	movs	r1, #0
 800fa34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fa36:	4b19      	ldr	r3, [pc, #100]	; (800fa9c <FATFS_LinkDriverEx+0x94>)
 800fa38:	7a5b      	ldrb	r3, [r3, #9]
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	4a17      	ldr	r2, [pc, #92]	; (800fa9c <FATFS_LinkDriverEx+0x94>)
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	4413      	add	r3, r2
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fa46:	4b15      	ldr	r3, [pc, #84]	; (800fa9c <FATFS_LinkDriverEx+0x94>)
 800fa48:	7a5b      	ldrb	r3, [r3, #9]
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4b13      	ldr	r3, [pc, #76]	; (800fa9c <FATFS_LinkDriverEx+0x94>)
 800fa50:	4413      	add	r3, r2
 800fa52:	79fa      	ldrb	r2, [r7, #7]
 800fa54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fa56:	4b11      	ldr	r3, [pc, #68]	; (800fa9c <FATFS_LinkDriverEx+0x94>)
 800fa58:	7a5b      	ldrb	r3, [r3, #9]
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	1c5a      	adds	r2, r3, #1
 800fa5e:	b2d1      	uxtb	r1, r2
 800fa60:	4a0e      	ldr	r2, [pc, #56]	; (800fa9c <FATFS_LinkDriverEx+0x94>)
 800fa62:	7251      	strb	r1, [r2, #9]
 800fa64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fa66:	7dbb      	ldrb	r3, [r7, #22]
 800fa68:	3330      	adds	r3, #48	; 0x30
 800fa6a:	b2da      	uxtb	r2, r3
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	3301      	adds	r3, #1
 800fa74:	223a      	movs	r2, #58	; 0x3a
 800fa76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	3302      	adds	r3, #2
 800fa7c:	222f      	movs	r2, #47	; 0x2f
 800fa7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	3303      	adds	r3, #3
 800fa84:	2200      	movs	r2, #0
 800fa86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fa8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	371c      	adds	r7, #28
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	20007cf8 	.word	0x20007cf8

0800faa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800faaa:	2200      	movs	r2, #0
 800faac:	6839      	ldr	r1, [r7, #0]
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7ff ffaa 	bl	800fa08 <FATFS_LinkDriverEx>
 800fab4:	4603      	mov	r3, r0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
	...

0800fac0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	4603      	mov	r3, r0
 800fac8:	6039      	str	r1, [r7, #0]
 800faca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800facc:	88fb      	ldrh	r3, [r7, #6]
 800face:	2b7f      	cmp	r3, #127	; 0x7f
 800fad0:	d802      	bhi.n	800fad8 <ff_convert+0x18>
		c = chr;
 800fad2:	88fb      	ldrh	r3, [r7, #6]
 800fad4:	81fb      	strh	r3, [r7, #14]
 800fad6:	e025      	b.n	800fb24 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00b      	beq.n	800faf6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fade:	88fb      	ldrh	r3, [r7, #6]
 800fae0:	2bff      	cmp	r3, #255	; 0xff
 800fae2:	d805      	bhi.n	800faf0 <ff_convert+0x30>
 800fae4:	88fb      	ldrh	r3, [r7, #6]
 800fae6:	3b80      	subs	r3, #128	; 0x80
 800fae8:	4a12      	ldr	r2, [pc, #72]	; (800fb34 <ff_convert+0x74>)
 800faea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800faee:	e000      	b.n	800faf2 <ff_convert+0x32>
 800faf0:	2300      	movs	r3, #0
 800faf2:	81fb      	strh	r3, [r7, #14]
 800faf4:	e016      	b.n	800fb24 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800faf6:	2300      	movs	r3, #0
 800faf8:	81fb      	strh	r3, [r7, #14]
 800fafa:	e009      	b.n	800fb10 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fafc:	89fb      	ldrh	r3, [r7, #14]
 800fafe:	4a0d      	ldr	r2, [pc, #52]	; (800fb34 <ff_convert+0x74>)
 800fb00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb04:	88fa      	ldrh	r2, [r7, #6]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d006      	beq.n	800fb18 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fb0a:	89fb      	ldrh	r3, [r7, #14]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	81fb      	strh	r3, [r7, #14]
 800fb10:	89fb      	ldrh	r3, [r7, #14]
 800fb12:	2b7f      	cmp	r3, #127	; 0x7f
 800fb14:	d9f2      	bls.n	800fafc <ff_convert+0x3c>
 800fb16:	e000      	b.n	800fb1a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fb18:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fb1a:	89fb      	ldrh	r3, [r7, #14]
 800fb1c:	3380      	adds	r3, #128	; 0x80
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fb24:	89fb      	ldrh	r3, [r7, #14]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3714      	adds	r7, #20
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	08014d58 	.word	0x08014d58

0800fb38 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b087      	sub	sp, #28
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	4603      	mov	r3, r0
 800fb40:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fb42:	88fb      	ldrh	r3, [r7, #6]
 800fb44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb48:	d201      	bcs.n	800fb4e <ff_wtoupper+0x16>
 800fb4a:	4b3e      	ldr	r3, [pc, #248]	; (800fc44 <ff_wtoupper+0x10c>)
 800fb4c:	e000      	b.n	800fb50 <ff_wtoupper+0x18>
 800fb4e:	4b3e      	ldr	r3, [pc, #248]	; (800fc48 <ff_wtoupper+0x110>)
 800fb50:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	1c9a      	adds	r2, r3, #2
 800fb56:	617a      	str	r2, [r7, #20]
 800fb58:	881b      	ldrh	r3, [r3, #0]
 800fb5a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fb5c:	8a7b      	ldrh	r3, [r7, #18]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d068      	beq.n	800fc34 <ff_wtoupper+0xfc>
 800fb62:	88fa      	ldrh	r2, [r7, #6]
 800fb64:	8a7b      	ldrh	r3, [r7, #18]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d364      	bcc.n	800fc34 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	1c9a      	adds	r2, r3, #2
 800fb6e:	617a      	str	r2, [r7, #20]
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	823b      	strh	r3, [r7, #16]
 800fb74:	8a3b      	ldrh	r3, [r7, #16]
 800fb76:	0a1b      	lsrs	r3, r3, #8
 800fb78:	81fb      	strh	r3, [r7, #14]
 800fb7a:	8a3b      	ldrh	r3, [r7, #16]
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fb80:	88fa      	ldrh	r2, [r7, #6]
 800fb82:	8a79      	ldrh	r1, [r7, #18]
 800fb84:	8a3b      	ldrh	r3, [r7, #16]
 800fb86:	440b      	add	r3, r1
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	da49      	bge.n	800fc20 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fb8c:	89fb      	ldrh	r3, [r7, #14]
 800fb8e:	2b08      	cmp	r3, #8
 800fb90:	d84f      	bhi.n	800fc32 <ff_wtoupper+0xfa>
 800fb92:	a201      	add	r2, pc, #4	; (adr r2, 800fb98 <ff_wtoupper+0x60>)
 800fb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb98:	0800fbbd 	.word	0x0800fbbd
 800fb9c:	0800fbcf 	.word	0x0800fbcf
 800fba0:	0800fbe5 	.word	0x0800fbe5
 800fba4:	0800fbed 	.word	0x0800fbed
 800fba8:	0800fbf5 	.word	0x0800fbf5
 800fbac:	0800fbfd 	.word	0x0800fbfd
 800fbb0:	0800fc05 	.word	0x0800fc05
 800fbb4:	0800fc0d 	.word	0x0800fc0d
 800fbb8:	0800fc15 	.word	0x0800fc15
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fbbc:	88fa      	ldrh	r2, [r7, #6]
 800fbbe:	8a7b      	ldrh	r3, [r7, #18]
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	005b      	lsls	r3, r3, #1
 800fbc4:	697a      	ldr	r2, [r7, #20]
 800fbc6:	4413      	add	r3, r2
 800fbc8:	881b      	ldrh	r3, [r3, #0]
 800fbca:	80fb      	strh	r3, [r7, #6]
 800fbcc:	e027      	b.n	800fc1e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fbce:	88fa      	ldrh	r2, [r7, #6]
 800fbd0:	8a7b      	ldrh	r3, [r7, #18]
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	f003 0301 	and.w	r3, r3, #1
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	88fa      	ldrh	r2, [r7, #6]
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	80fb      	strh	r3, [r7, #6]
 800fbe2:	e01c      	b.n	800fc1e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fbe4:	88fb      	ldrh	r3, [r7, #6]
 800fbe6:	3b10      	subs	r3, #16
 800fbe8:	80fb      	strh	r3, [r7, #6]
 800fbea:	e018      	b.n	800fc1e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fbec:	88fb      	ldrh	r3, [r7, #6]
 800fbee:	3b20      	subs	r3, #32
 800fbf0:	80fb      	strh	r3, [r7, #6]
 800fbf2:	e014      	b.n	800fc1e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fbf4:	88fb      	ldrh	r3, [r7, #6]
 800fbf6:	3b30      	subs	r3, #48	; 0x30
 800fbf8:	80fb      	strh	r3, [r7, #6]
 800fbfa:	e010      	b.n	800fc1e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fbfc:	88fb      	ldrh	r3, [r7, #6]
 800fbfe:	3b1a      	subs	r3, #26
 800fc00:	80fb      	strh	r3, [r7, #6]
 800fc02:	e00c      	b.n	800fc1e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fc04:	88fb      	ldrh	r3, [r7, #6]
 800fc06:	3308      	adds	r3, #8
 800fc08:	80fb      	strh	r3, [r7, #6]
 800fc0a:	e008      	b.n	800fc1e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fc0c:	88fb      	ldrh	r3, [r7, #6]
 800fc0e:	3b50      	subs	r3, #80	; 0x50
 800fc10:	80fb      	strh	r3, [r7, #6]
 800fc12:	e004      	b.n	800fc1e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fc14:	88fb      	ldrh	r3, [r7, #6]
 800fc16:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fc1a:	80fb      	strh	r3, [r7, #6]
 800fc1c:	bf00      	nop
			}
			break;
 800fc1e:	e008      	b.n	800fc32 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fc20:	89fb      	ldrh	r3, [r7, #14]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d195      	bne.n	800fb52 <ff_wtoupper+0x1a>
 800fc26:	8a3b      	ldrh	r3, [r7, #16]
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	697a      	ldr	r2, [r7, #20]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fc30:	e78f      	b.n	800fb52 <ff_wtoupper+0x1a>
			break;
 800fc32:	bf00      	nop
	}

	return chr;
 800fc34:	88fb      	ldrh	r3, [r7, #6]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	371c      	adds	r7, #28
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	08014e58 	.word	0x08014e58
 800fc48:	0801504c 	.word	0x0801504c

0800fc4c <__errno>:
 800fc4c:	4b01      	ldr	r3, [pc, #4]	; (800fc54 <__errno+0x8>)
 800fc4e:	6818      	ldr	r0, [r3, #0]
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	2000000c 	.word	0x2000000c

0800fc58 <__libc_init_array>:
 800fc58:	b570      	push	{r4, r5, r6, lr}
 800fc5a:	4e0d      	ldr	r6, [pc, #52]	; (800fc90 <__libc_init_array+0x38>)
 800fc5c:	4c0d      	ldr	r4, [pc, #52]	; (800fc94 <__libc_init_array+0x3c>)
 800fc5e:	1ba4      	subs	r4, r4, r6
 800fc60:	10a4      	asrs	r4, r4, #2
 800fc62:	2500      	movs	r5, #0
 800fc64:	42a5      	cmp	r5, r4
 800fc66:	d109      	bne.n	800fc7c <__libc_init_array+0x24>
 800fc68:	4e0b      	ldr	r6, [pc, #44]	; (800fc98 <__libc_init_array+0x40>)
 800fc6a:	4c0c      	ldr	r4, [pc, #48]	; (800fc9c <__libc_init_array+0x44>)
 800fc6c:	f004 ff36 	bl	8014adc <_init>
 800fc70:	1ba4      	subs	r4, r4, r6
 800fc72:	10a4      	asrs	r4, r4, #2
 800fc74:	2500      	movs	r5, #0
 800fc76:	42a5      	cmp	r5, r4
 800fc78:	d105      	bne.n	800fc86 <__libc_init_array+0x2e>
 800fc7a:	bd70      	pop	{r4, r5, r6, pc}
 800fc7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fc80:	4798      	blx	r3
 800fc82:	3501      	adds	r5, #1
 800fc84:	e7ee      	b.n	800fc64 <__libc_init_array+0xc>
 800fc86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fc8a:	4798      	blx	r3
 800fc8c:	3501      	adds	r5, #1
 800fc8e:	e7f2      	b.n	800fc76 <__libc_init_array+0x1e>
 800fc90:	0801544c 	.word	0x0801544c
 800fc94:	0801544c 	.word	0x0801544c
 800fc98:	0801544c 	.word	0x0801544c
 800fc9c:	08015454 	.word	0x08015454

0800fca0 <memset>:
 800fca0:	4402      	add	r2, r0
 800fca2:	4603      	mov	r3, r0
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d100      	bne.n	800fcaa <memset+0xa>
 800fca8:	4770      	bx	lr
 800fcaa:	f803 1b01 	strb.w	r1, [r3], #1
 800fcae:	e7f9      	b.n	800fca4 <memset+0x4>

0800fcb0 <__cvt>:
 800fcb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcb4:	ec55 4b10 	vmov	r4, r5, d0
 800fcb8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fcba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fcbe:	2d00      	cmp	r5, #0
 800fcc0:	460e      	mov	r6, r1
 800fcc2:	4691      	mov	r9, r2
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	bfb8      	it	lt
 800fcc8:	4622      	movlt	r2, r4
 800fcca:	462b      	mov	r3, r5
 800fccc:	f027 0720 	bic.w	r7, r7, #32
 800fcd0:	bfbb      	ittet	lt
 800fcd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fcd6:	461d      	movlt	r5, r3
 800fcd8:	2300      	movge	r3, #0
 800fcda:	232d      	movlt	r3, #45	; 0x2d
 800fcdc:	bfb8      	it	lt
 800fcde:	4614      	movlt	r4, r2
 800fce0:	2f46      	cmp	r7, #70	; 0x46
 800fce2:	700b      	strb	r3, [r1, #0]
 800fce4:	d004      	beq.n	800fcf0 <__cvt+0x40>
 800fce6:	2f45      	cmp	r7, #69	; 0x45
 800fce8:	d100      	bne.n	800fcec <__cvt+0x3c>
 800fcea:	3601      	adds	r6, #1
 800fcec:	2102      	movs	r1, #2
 800fcee:	e000      	b.n	800fcf2 <__cvt+0x42>
 800fcf0:	2103      	movs	r1, #3
 800fcf2:	ab03      	add	r3, sp, #12
 800fcf4:	9301      	str	r3, [sp, #4]
 800fcf6:	ab02      	add	r3, sp, #8
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	4632      	mov	r2, r6
 800fcfc:	4653      	mov	r3, sl
 800fcfe:	ec45 4b10 	vmov	d0, r4, r5
 800fd02:	f001 ffb1 	bl	8011c68 <_dtoa_r>
 800fd06:	2f47      	cmp	r7, #71	; 0x47
 800fd08:	4680      	mov	r8, r0
 800fd0a:	d102      	bne.n	800fd12 <__cvt+0x62>
 800fd0c:	f019 0f01 	tst.w	r9, #1
 800fd10:	d026      	beq.n	800fd60 <__cvt+0xb0>
 800fd12:	2f46      	cmp	r7, #70	; 0x46
 800fd14:	eb08 0906 	add.w	r9, r8, r6
 800fd18:	d111      	bne.n	800fd3e <__cvt+0x8e>
 800fd1a:	f898 3000 	ldrb.w	r3, [r8]
 800fd1e:	2b30      	cmp	r3, #48	; 0x30
 800fd20:	d10a      	bne.n	800fd38 <__cvt+0x88>
 800fd22:	2200      	movs	r2, #0
 800fd24:	2300      	movs	r3, #0
 800fd26:	4620      	mov	r0, r4
 800fd28:	4629      	mov	r1, r5
 800fd2a:	f7f0 fee5 	bl	8000af8 <__aeabi_dcmpeq>
 800fd2e:	b918      	cbnz	r0, 800fd38 <__cvt+0x88>
 800fd30:	f1c6 0601 	rsb	r6, r6, #1
 800fd34:	f8ca 6000 	str.w	r6, [sl]
 800fd38:	f8da 3000 	ldr.w	r3, [sl]
 800fd3c:	4499      	add	r9, r3
 800fd3e:	2200      	movs	r2, #0
 800fd40:	2300      	movs	r3, #0
 800fd42:	4620      	mov	r0, r4
 800fd44:	4629      	mov	r1, r5
 800fd46:	f7f0 fed7 	bl	8000af8 <__aeabi_dcmpeq>
 800fd4a:	b938      	cbnz	r0, 800fd5c <__cvt+0xac>
 800fd4c:	2230      	movs	r2, #48	; 0x30
 800fd4e:	9b03      	ldr	r3, [sp, #12]
 800fd50:	454b      	cmp	r3, r9
 800fd52:	d205      	bcs.n	800fd60 <__cvt+0xb0>
 800fd54:	1c59      	adds	r1, r3, #1
 800fd56:	9103      	str	r1, [sp, #12]
 800fd58:	701a      	strb	r2, [r3, #0]
 800fd5a:	e7f8      	b.n	800fd4e <__cvt+0x9e>
 800fd5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd60:	9b03      	ldr	r3, [sp, #12]
 800fd62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd64:	eba3 0308 	sub.w	r3, r3, r8
 800fd68:	4640      	mov	r0, r8
 800fd6a:	6013      	str	r3, [r2, #0]
 800fd6c:	b004      	add	sp, #16
 800fd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fd72 <__exponent>:
 800fd72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd74:	2900      	cmp	r1, #0
 800fd76:	4604      	mov	r4, r0
 800fd78:	bfba      	itte	lt
 800fd7a:	4249      	neglt	r1, r1
 800fd7c:	232d      	movlt	r3, #45	; 0x2d
 800fd7e:	232b      	movge	r3, #43	; 0x2b
 800fd80:	2909      	cmp	r1, #9
 800fd82:	f804 2b02 	strb.w	r2, [r4], #2
 800fd86:	7043      	strb	r3, [r0, #1]
 800fd88:	dd20      	ble.n	800fdcc <__exponent+0x5a>
 800fd8a:	f10d 0307 	add.w	r3, sp, #7
 800fd8e:	461f      	mov	r7, r3
 800fd90:	260a      	movs	r6, #10
 800fd92:	fb91 f5f6 	sdiv	r5, r1, r6
 800fd96:	fb06 1115 	mls	r1, r6, r5, r1
 800fd9a:	3130      	adds	r1, #48	; 0x30
 800fd9c:	2d09      	cmp	r5, #9
 800fd9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fda2:	f103 32ff 	add.w	r2, r3, #4294967295
 800fda6:	4629      	mov	r1, r5
 800fda8:	dc09      	bgt.n	800fdbe <__exponent+0x4c>
 800fdaa:	3130      	adds	r1, #48	; 0x30
 800fdac:	3b02      	subs	r3, #2
 800fdae:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fdb2:	42bb      	cmp	r3, r7
 800fdb4:	4622      	mov	r2, r4
 800fdb6:	d304      	bcc.n	800fdc2 <__exponent+0x50>
 800fdb8:	1a10      	subs	r0, r2, r0
 800fdba:	b003      	add	sp, #12
 800fdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	e7e7      	b.n	800fd92 <__exponent+0x20>
 800fdc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdc6:	f804 2b01 	strb.w	r2, [r4], #1
 800fdca:	e7f2      	b.n	800fdb2 <__exponent+0x40>
 800fdcc:	2330      	movs	r3, #48	; 0x30
 800fdce:	4419      	add	r1, r3
 800fdd0:	7083      	strb	r3, [r0, #2]
 800fdd2:	1d02      	adds	r2, r0, #4
 800fdd4:	70c1      	strb	r1, [r0, #3]
 800fdd6:	e7ef      	b.n	800fdb8 <__exponent+0x46>

0800fdd8 <_printf_float>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	b08d      	sub	sp, #52	; 0x34
 800fdde:	460c      	mov	r4, r1
 800fde0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800fde4:	4616      	mov	r6, r2
 800fde6:	461f      	mov	r7, r3
 800fde8:	4605      	mov	r5, r0
 800fdea:	f003 f9a9 	bl	8013140 <_localeconv_r>
 800fdee:	6803      	ldr	r3, [r0, #0]
 800fdf0:	9304      	str	r3, [sp, #16]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7f0 fa04 	bl	8000200 <strlen>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	930a      	str	r3, [sp, #40]	; 0x28
 800fdfc:	f8d8 3000 	ldr.w	r3, [r8]
 800fe00:	9005      	str	r0, [sp, #20]
 800fe02:	3307      	adds	r3, #7
 800fe04:	f023 0307 	bic.w	r3, r3, #7
 800fe08:	f103 0208 	add.w	r2, r3, #8
 800fe0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fe10:	f8d4 b000 	ldr.w	fp, [r4]
 800fe14:	f8c8 2000 	str.w	r2, [r8]
 800fe18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fe20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fe24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fe28:	9307      	str	r3, [sp, #28]
 800fe2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800fe2e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe32:	4ba7      	ldr	r3, [pc, #668]	; (80100d0 <_printf_float+0x2f8>)
 800fe34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe38:	f7f0 fe90 	bl	8000b5c <__aeabi_dcmpun>
 800fe3c:	bb70      	cbnz	r0, 800fe9c <_printf_float+0xc4>
 800fe3e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe42:	4ba3      	ldr	r3, [pc, #652]	; (80100d0 <_printf_float+0x2f8>)
 800fe44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe48:	f7f0 fe6a 	bl	8000b20 <__aeabi_dcmple>
 800fe4c:	bb30      	cbnz	r0, 800fe9c <_printf_float+0xc4>
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2300      	movs	r3, #0
 800fe52:	4640      	mov	r0, r8
 800fe54:	4649      	mov	r1, r9
 800fe56:	f7f0 fe59 	bl	8000b0c <__aeabi_dcmplt>
 800fe5a:	b110      	cbz	r0, 800fe62 <_printf_float+0x8a>
 800fe5c:	232d      	movs	r3, #45	; 0x2d
 800fe5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe62:	4a9c      	ldr	r2, [pc, #624]	; (80100d4 <_printf_float+0x2fc>)
 800fe64:	4b9c      	ldr	r3, [pc, #624]	; (80100d8 <_printf_float+0x300>)
 800fe66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fe6a:	bf8c      	ite	hi
 800fe6c:	4690      	movhi	r8, r2
 800fe6e:	4698      	movls	r8, r3
 800fe70:	2303      	movs	r3, #3
 800fe72:	f02b 0204 	bic.w	r2, fp, #4
 800fe76:	6123      	str	r3, [r4, #16]
 800fe78:	6022      	str	r2, [r4, #0]
 800fe7a:	f04f 0900 	mov.w	r9, #0
 800fe7e:	9700      	str	r7, [sp, #0]
 800fe80:	4633      	mov	r3, r6
 800fe82:	aa0b      	add	r2, sp, #44	; 0x2c
 800fe84:	4621      	mov	r1, r4
 800fe86:	4628      	mov	r0, r5
 800fe88:	f000 f9e6 	bl	8010258 <_printf_common>
 800fe8c:	3001      	adds	r0, #1
 800fe8e:	f040 808d 	bne.w	800ffac <_printf_float+0x1d4>
 800fe92:	f04f 30ff 	mov.w	r0, #4294967295
 800fe96:	b00d      	add	sp, #52	; 0x34
 800fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe9c:	4642      	mov	r2, r8
 800fe9e:	464b      	mov	r3, r9
 800fea0:	4640      	mov	r0, r8
 800fea2:	4649      	mov	r1, r9
 800fea4:	f7f0 fe5a 	bl	8000b5c <__aeabi_dcmpun>
 800fea8:	b110      	cbz	r0, 800feb0 <_printf_float+0xd8>
 800feaa:	4a8c      	ldr	r2, [pc, #560]	; (80100dc <_printf_float+0x304>)
 800feac:	4b8c      	ldr	r3, [pc, #560]	; (80100e0 <_printf_float+0x308>)
 800feae:	e7da      	b.n	800fe66 <_printf_float+0x8e>
 800feb0:	6861      	ldr	r1, [r4, #4]
 800feb2:	1c4b      	adds	r3, r1, #1
 800feb4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800feb8:	a80a      	add	r0, sp, #40	; 0x28
 800feba:	d13e      	bne.n	800ff3a <_printf_float+0x162>
 800febc:	2306      	movs	r3, #6
 800febe:	6063      	str	r3, [r4, #4]
 800fec0:	2300      	movs	r3, #0
 800fec2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fec6:	ab09      	add	r3, sp, #36	; 0x24
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	ec49 8b10 	vmov	d0, r8, r9
 800fece:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fed2:	6022      	str	r2, [r4, #0]
 800fed4:	f8cd a004 	str.w	sl, [sp, #4]
 800fed8:	6861      	ldr	r1, [r4, #4]
 800feda:	4628      	mov	r0, r5
 800fedc:	f7ff fee8 	bl	800fcb0 <__cvt>
 800fee0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800fee4:	2b47      	cmp	r3, #71	; 0x47
 800fee6:	4680      	mov	r8, r0
 800fee8:	d109      	bne.n	800fefe <_printf_float+0x126>
 800feea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feec:	1cd8      	adds	r0, r3, #3
 800feee:	db02      	blt.n	800fef6 <_printf_float+0x11e>
 800fef0:	6862      	ldr	r2, [r4, #4]
 800fef2:	4293      	cmp	r3, r2
 800fef4:	dd47      	ble.n	800ff86 <_printf_float+0x1ae>
 800fef6:	f1aa 0a02 	sub.w	sl, sl, #2
 800fefa:	fa5f fa8a 	uxtb.w	sl, sl
 800fefe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ff02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff04:	d824      	bhi.n	800ff50 <_printf_float+0x178>
 800ff06:	3901      	subs	r1, #1
 800ff08:	4652      	mov	r2, sl
 800ff0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff0e:	9109      	str	r1, [sp, #36]	; 0x24
 800ff10:	f7ff ff2f 	bl	800fd72 <__exponent>
 800ff14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff16:	1813      	adds	r3, r2, r0
 800ff18:	2a01      	cmp	r2, #1
 800ff1a:	4681      	mov	r9, r0
 800ff1c:	6123      	str	r3, [r4, #16]
 800ff1e:	dc02      	bgt.n	800ff26 <_printf_float+0x14e>
 800ff20:	6822      	ldr	r2, [r4, #0]
 800ff22:	07d1      	lsls	r1, r2, #31
 800ff24:	d501      	bpl.n	800ff2a <_printf_float+0x152>
 800ff26:	3301      	adds	r3, #1
 800ff28:	6123      	str	r3, [r4, #16]
 800ff2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d0a5      	beq.n	800fe7e <_printf_float+0xa6>
 800ff32:	232d      	movs	r3, #45	; 0x2d
 800ff34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff38:	e7a1      	b.n	800fe7e <_printf_float+0xa6>
 800ff3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ff3e:	f000 8177 	beq.w	8010230 <_printf_float+0x458>
 800ff42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ff46:	d1bb      	bne.n	800fec0 <_printf_float+0xe8>
 800ff48:	2900      	cmp	r1, #0
 800ff4a:	d1b9      	bne.n	800fec0 <_printf_float+0xe8>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e7b6      	b.n	800febe <_printf_float+0xe6>
 800ff50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ff54:	d119      	bne.n	800ff8a <_printf_float+0x1b2>
 800ff56:	2900      	cmp	r1, #0
 800ff58:	6863      	ldr	r3, [r4, #4]
 800ff5a:	dd0c      	ble.n	800ff76 <_printf_float+0x19e>
 800ff5c:	6121      	str	r1, [r4, #16]
 800ff5e:	b913      	cbnz	r3, 800ff66 <_printf_float+0x18e>
 800ff60:	6822      	ldr	r2, [r4, #0]
 800ff62:	07d2      	lsls	r2, r2, #31
 800ff64:	d502      	bpl.n	800ff6c <_printf_float+0x194>
 800ff66:	3301      	adds	r3, #1
 800ff68:	440b      	add	r3, r1
 800ff6a:	6123      	str	r3, [r4, #16]
 800ff6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff6e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ff70:	f04f 0900 	mov.w	r9, #0
 800ff74:	e7d9      	b.n	800ff2a <_printf_float+0x152>
 800ff76:	b913      	cbnz	r3, 800ff7e <_printf_float+0x1a6>
 800ff78:	6822      	ldr	r2, [r4, #0]
 800ff7a:	07d0      	lsls	r0, r2, #31
 800ff7c:	d501      	bpl.n	800ff82 <_printf_float+0x1aa>
 800ff7e:	3302      	adds	r3, #2
 800ff80:	e7f3      	b.n	800ff6a <_printf_float+0x192>
 800ff82:	2301      	movs	r3, #1
 800ff84:	e7f1      	b.n	800ff6a <_printf_float+0x192>
 800ff86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ff8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	db05      	blt.n	800ff9e <_printf_float+0x1c6>
 800ff92:	6822      	ldr	r2, [r4, #0]
 800ff94:	6123      	str	r3, [r4, #16]
 800ff96:	07d1      	lsls	r1, r2, #31
 800ff98:	d5e8      	bpl.n	800ff6c <_printf_float+0x194>
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	e7e5      	b.n	800ff6a <_printf_float+0x192>
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	bfd4      	ite	le
 800ffa2:	f1c3 0302 	rsble	r3, r3, #2
 800ffa6:	2301      	movgt	r3, #1
 800ffa8:	4413      	add	r3, r2
 800ffaa:	e7de      	b.n	800ff6a <_printf_float+0x192>
 800ffac:	6823      	ldr	r3, [r4, #0]
 800ffae:	055a      	lsls	r2, r3, #21
 800ffb0:	d407      	bmi.n	800ffc2 <_printf_float+0x1ea>
 800ffb2:	6923      	ldr	r3, [r4, #16]
 800ffb4:	4642      	mov	r2, r8
 800ffb6:	4631      	mov	r1, r6
 800ffb8:	4628      	mov	r0, r5
 800ffba:	47b8      	blx	r7
 800ffbc:	3001      	adds	r0, #1
 800ffbe:	d12b      	bne.n	8010018 <_printf_float+0x240>
 800ffc0:	e767      	b.n	800fe92 <_printf_float+0xba>
 800ffc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ffc6:	f240 80dc 	bls.w	8010182 <_printf_float+0x3aa>
 800ffca:	2200      	movs	r2, #0
 800ffcc:	2300      	movs	r3, #0
 800ffce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ffd2:	f7f0 fd91 	bl	8000af8 <__aeabi_dcmpeq>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d033      	beq.n	8010042 <_printf_float+0x26a>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	4a41      	ldr	r2, [pc, #260]	; (80100e4 <_printf_float+0x30c>)
 800ffde:	4631      	mov	r1, r6
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	47b8      	blx	r7
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	f43f af54 	beq.w	800fe92 <_printf_float+0xba>
 800ffea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffee:	429a      	cmp	r2, r3
 800fff0:	db02      	blt.n	800fff8 <_printf_float+0x220>
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	07d8      	lsls	r0, r3, #31
 800fff6:	d50f      	bpl.n	8010018 <_printf_float+0x240>
 800fff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fffc:	4631      	mov	r1, r6
 800fffe:	4628      	mov	r0, r5
 8010000:	47b8      	blx	r7
 8010002:	3001      	adds	r0, #1
 8010004:	f43f af45 	beq.w	800fe92 <_printf_float+0xba>
 8010008:	f04f 0800 	mov.w	r8, #0
 801000c:	f104 091a 	add.w	r9, r4, #26
 8010010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010012:	3b01      	subs	r3, #1
 8010014:	4543      	cmp	r3, r8
 8010016:	dc09      	bgt.n	801002c <_printf_float+0x254>
 8010018:	6823      	ldr	r3, [r4, #0]
 801001a:	079b      	lsls	r3, r3, #30
 801001c:	f100 8103 	bmi.w	8010226 <_printf_float+0x44e>
 8010020:	68e0      	ldr	r0, [r4, #12]
 8010022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010024:	4298      	cmp	r0, r3
 8010026:	bfb8      	it	lt
 8010028:	4618      	movlt	r0, r3
 801002a:	e734      	b.n	800fe96 <_printf_float+0xbe>
 801002c:	2301      	movs	r3, #1
 801002e:	464a      	mov	r2, r9
 8010030:	4631      	mov	r1, r6
 8010032:	4628      	mov	r0, r5
 8010034:	47b8      	blx	r7
 8010036:	3001      	adds	r0, #1
 8010038:	f43f af2b 	beq.w	800fe92 <_printf_float+0xba>
 801003c:	f108 0801 	add.w	r8, r8, #1
 8010040:	e7e6      	b.n	8010010 <_printf_float+0x238>
 8010042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010044:	2b00      	cmp	r3, #0
 8010046:	dc2b      	bgt.n	80100a0 <_printf_float+0x2c8>
 8010048:	2301      	movs	r3, #1
 801004a:	4a26      	ldr	r2, [pc, #152]	; (80100e4 <_printf_float+0x30c>)
 801004c:	4631      	mov	r1, r6
 801004e:	4628      	mov	r0, r5
 8010050:	47b8      	blx	r7
 8010052:	3001      	adds	r0, #1
 8010054:	f43f af1d 	beq.w	800fe92 <_printf_float+0xba>
 8010058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801005a:	b923      	cbnz	r3, 8010066 <_printf_float+0x28e>
 801005c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801005e:	b913      	cbnz	r3, 8010066 <_printf_float+0x28e>
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	07d9      	lsls	r1, r3, #31
 8010064:	d5d8      	bpl.n	8010018 <_printf_float+0x240>
 8010066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801006a:	4631      	mov	r1, r6
 801006c:	4628      	mov	r0, r5
 801006e:	47b8      	blx	r7
 8010070:	3001      	adds	r0, #1
 8010072:	f43f af0e 	beq.w	800fe92 <_printf_float+0xba>
 8010076:	f04f 0900 	mov.w	r9, #0
 801007a:	f104 0a1a 	add.w	sl, r4, #26
 801007e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010080:	425b      	negs	r3, r3
 8010082:	454b      	cmp	r3, r9
 8010084:	dc01      	bgt.n	801008a <_printf_float+0x2b2>
 8010086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010088:	e794      	b.n	800ffb4 <_printf_float+0x1dc>
 801008a:	2301      	movs	r3, #1
 801008c:	4652      	mov	r2, sl
 801008e:	4631      	mov	r1, r6
 8010090:	4628      	mov	r0, r5
 8010092:	47b8      	blx	r7
 8010094:	3001      	adds	r0, #1
 8010096:	f43f aefc 	beq.w	800fe92 <_printf_float+0xba>
 801009a:	f109 0901 	add.w	r9, r9, #1
 801009e:	e7ee      	b.n	801007e <_printf_float+0x2a6>
 80100a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100a4:	429a      	cmp	r2, r3
 80100a6:	bfa8      	it	ge
 80100a8:	461a      	movge	r2, r3
 80100aa:	2a00      	cmp	r2, #0
 80100ac:	4691      	mov	r9, r2
 80100ae:	dd07      	ble.n	80100c0 <_printf_float+0x2e8>
 80100b0:	4613      	mov	r3, r2
 80100b2:	4631      	mov	r1, r6
 80100b4:	4642      	mov	r2, r8
 80100b6:	4628      	mov	r0, r5
 80100b8:	47b8      	blx	r7
 80100ba:	3001      	adds	r0, #1
 80100bc:	f43f aee9 	beq.w	800fe92 <_printf_float+0xba>
 80100c0:	f104 031a 	add.w	r3, r4, #26
 80100c4:	f04f 0b00 	mov.w	fp, #0
 80100c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100cc:	9306      	str	r3, [sp, #24]
 80100ce:	e015      	b.n	80100fc <_printf_float+0x324>
 80100d0:	7fefffff 	.word	0x7fefffff
 80100d4:	08015110 	.word	0x08015110
 80100d8:	0801510c 	.word	0x0801510c
 80100dc:	08015118 	.word	0x08015118
 80100e0:	08015114 	.word	0x08015114
 80100e4:	0801533b 	.word	0x0801533b
 80100e8:	2301      	movs	r3, #1
 80100ea:	9a06      	ldr	r2, [sp, #24]
 80100ec:	4631      	mov	r1, r6
 80100ee:	4628      	mov	r0, r5
 80100f0:	47b8      	blx	r7
 80100f2:	3001      	adds	r0, #1
 80100f4:	f43f aecd 	beq.w	800fe92 <_printf_float+0xba>
 80100f8:	f10b 0b01 	add.w	fp, fp, #1
 80100fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010100:	ebaa 0309 	sub.w	r3, sl, r9
 8010104:	455b      	cmp	r3, fp
 8010106:	dcef      	bgt.n	80100e8 <_printf_float+0x310>
 8010108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801010c:	429a      	cmp	r2, r3
 801010e:	44d0      	add	r8, sl
 8010110:	db15      	blt.n	801013e <_printf_float+0x366>
 8010112:	6823      	ldr	r3, [r4, #0]
 8010114:	07da      	lsls	r2, r3, #31
 8010116:	d412      	bmi.n	801013e <_printf_float+0x366>
 8010118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801011a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801011c:	eba3 020a 	sub.w	r2, r3, sl
 8010120:	eba3 0a01 	sub.w	sl, r3, r1
 8010124:	4592      	cmp	sl, r2
 8010126:	bfa8      	it	ge
 8010128:	4692      	movge	sl, r2
 801012a:	f1ba 0f00 	cmp.w	sl, #0
 801012e:	dc0e      	bgt.n	801014e <_printf_float+0x376>
 8010130:	f04f 0800 	mov.w	r8, #0
 8010134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010138:	f104 091a 	add.w	r9, r4, #26
 801013c:	e019      	b.n	8010172 <_printf_float+0x39a>
 801013e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010142:	4631      	mov	r1, r6
 8010144:	4628      	mov	r0, r5
 8010146:	47b8      	blx	r7
 8010148:	3001      	adds	r0, #1
 801014a:	d1e5      	bne.n	8010118 <_printf_float+0x340>
 801014c:	e6a1      	b.n	800fe92 <_printf_float+0xba>
 801014e:	4653      	mov	r3, sl
 8010150:	4642      	mov	r2, r8
 8010152:	4631      	mov	r1, r6
 8010154:	4628      	mov	r0, r5
 8010156:	47b8      	blx	r7
 8010158:	3001      	adds	r0, #1
 801015a:	d1e9      	bne.n	8010130 <_printf_float+0x358>
 801015c:	e699      	b.n	800fe92 <_printf_float+0xba>
 801015e:	2301      	movs	r3, #1
 8010160:	464a      	mov	r2, r9
 8010162:	4631      	mov	r1, r6
 8010164:	4628      	mov	r0, r5
 8010166:	47b8      	blx	r7
 8010168:	3001      	adds	r0, #1
 801016a:	f43f ae92 	beq.w	800fe92 <_printf_float+0xba>
 801016e:	f108 0801 	add.w	r8, r8, #1
 8010172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010176:	1a9b      	subs	r3, r3, r2
 8010178:	eba3 030a 	sub.w	r3, r3, sl
 801017c:	4543      	cmp	r3, r8
 801017e:	dcee      	bgt.n	801015e <_printf_float+0x386>
 8010180:	e74a      	b.n	8010018 <_printf_float+0x240>
 8010182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010184:	2a01      	cmp	r2, #1
 8010186:	dc01      	bgt.n	801018c <_printf_float+0x3b4>
 8010188:	07db      	lsls	r3, r3, #31
 801018a:	d53a      	bpl.n	8010202 <_printf_float+0x42a>
 801018c:	2301      	movs	r3, #1
 801018e:	4642      	mov	r2, r8
 8010190:	4631      	mov	r1, r6
 8010192:	4628      	mov	r0, r5
 8010194:	47b8      	blx	r7
 8010196:	3001      	adds	r0, #1
 8010198:	f43f ae7b 	beq.w	800fe92 <_printf_float+0xba>
 801019c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101a0:	4631      	mov	r1, r6
 80101a2:	4628      	mov	r0, r5
 80101a4:	47b8      	blx	r7
 80101a6:	3001      	adds	r0, #1
 80101a8:	f108 0801 	add.w	r8, r8, #1
 80101ac:	f43f ae71 	beq.w	800fe92 <_printf_float+0xba>
 80101b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b2:	2200      	movs	r2, #0
 80101b4:	f103 3aff 	add.w	sl, r3, #4294967295
 80101b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80101bc:	2300      	movs	r3, #0
 80101be:	f7f0 fc9b 	bl	8000af8 <__aeabi_dcmpeq>
 80101c2:	b9c8      	cbnz	r0, 80101f8 <_printf_float+0x420>
 80101c4:	4653      	mov	r3, sl
 80101c6:	4642      	mov	r2, r8
 80101c8:	4631      	mov	r1, r6
 80101ca:	4628      	mov	r0, r5
 80101cc:	47b8      	blx	r7
 80101ce:	3001      	adds	r0, #1
 80101d0:	d10e      	bne.n	80101f0 <_printf_float+0x418>
 80101d2:	e65e      	b.n	800fe92 <_printf_float+0xba>
 80101d4:	2301      	movs	r3, #1
 80101d6:	4652      	mov	r2, sl
 80101d8:	4631      	mov	r1, r6
 80101da:	4628      	mov	r0, r5
 80101dc:	47b8      	blx	r7
 80101de:	3001      	adds	r0, #1
 80101e0:	f43f ae57 	beq.w	800fe92 <_printf_float+0xba>
 80101e4:	f108 0801 	add.w	r8, r8, #1
 80101e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101ea:	3b01      	subs	r3, #1
 80101ec:	4543      	cmp	r3, r8
 80101ee:	dcf1      	bgt.n	80101d4 <_printf_float+0x3fc>
 80101f0:	464b      	mov	r3, r9
 80101f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80101f6:	e6de      	b.n	800ffb6 <_printf_float+0x1de>
 80101f8:	f04f 0800 	mov.w	r8, #0
 80101fc:	f104 0a1a 	add.w	sl, r4, #26
 8010200:	e7f2      	b.n	80101e8 <_printf_float+0x410>
 8010202:	2301      	movs	r3, #1
 8010204:	e7df      	b.n	80101c6 <_printf_float+0x3ee>
 8010206:	2301      	movs	r3, #1
 8010208:	464a      	mov	r2, r9
 801020a:	4631      	mov	r1, r6
 801020c:	4628      	mov	r0, r5
 801020e:	47b8      	blx	r7
 8010210:	3001      	adds	r0, #1
 8010212:	f43f ae3e 	beq.w	800fe92 <_printf_float+0xba>
 8010216:	f108 0801 	add.w	r8, r8, #1
 801021a:	68e3      	ldr	r3, [r4, #12]
 801021c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801021e:	1a9b      	subs	r3, r3, r2
 8010220:	4543      	cmp	r3, r8
 8010222:	dcf0      	bgt.n	8010206 <_printf_float+0x42e>
 8010224:	e6fc      	b.n	8010020 <_printf_float+0x248>
 8010226:	f04f 0800 	mov.w	r8, #0
 801022a:	f104 0919 	add.w	r9, r4, #25
 801022e:	e7f4      	b.n	801021a <_printf_float+0x442>
 8010230:	2900      	cmp	r1, #0
 8010232:	f43f ae8b 	beq.w	800ff4c <_printf_float+0x174>
 8010236:	2300      	movs	r3, #0
 8010238:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801023c:	ab09      	add	r3, sp, #36	; 0x24
 801023e:	9300      	str	r3, [sp, #0]
 8010240:	ec49 8b10 	vmov	d0, r8, r9
 8010244:	6022      	str	r2, [r4, #0]
 8010246:	f8cd a004 	str.w	sl, [sp, #4]
 801024a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801024e:	4628      	mov	r0, r5
 8010250:	f7ff fd2e 	bl	800fcb0 <__cvt>
 8010254:	4680      	mov	r8, r0
 8010256:	e648      	b.n	800feea <_printf_float+0x112>

08010258 <_printf_common>:
 8010258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801025c:	4691      	mov	r9, r2
 801025e:	461f      	mov	r7, r3
 8010260:	688a      	ldr	r2, [r1, #8]
 8010262:	690b      	ldr	r3, [r1, #16]
 8010264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010268:	4293      	cmp	r3, r2
 801026a:	bfb8      	it	lt
 801026c:	4613      	movlt	r3, r2
 801026e:	f8c9 3000 	str.w	r3, [r9]
 8010272:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010276:	4606      	mov	r6, r0
 8010278:	460c      	mov	r4, r1
 801027a:	b112      	cbz	r2, 8010282 <_printf_common+0x2a>
 801027c:	3301      	adds	r3, #1
 801027e:	f8c9 3000 	str.w	r3, [r9]
 8010282:	6823      	ldr	r3, [r4, #0]
 8010284:	0699      	lsls	r1, r3, #26
 8010286:	bf42      	ittt	mi
 8010288:	f8d9 3000 	ldrmi.w	r3, [r9]
 801028c:	3302      	addmi	r3, #2
 801028e:	f8c9 3000 	strmi.w	r3, [r9]
 8010292:	6825      	ldr	r5, [r4, #0]
 8010294:	f015 0506 	ands.w	r5, r5, #6
 8010298:	d107      	bne.n	80102aa <_printf_common+0x52>
 801029a:	f104 0a19 	add.w	sl, r4, #25
 801029e:	68e3      	ldr	r3, [r4, #12]
 80102a0:	f8d9 2000 	ldr.w	r2, [r9]
 80102a4:	1a9b      	subs	r3, r3, r2
 80102a6:	42ab      	cmp	r3, r5
 80102a8:	dc28      	bgt.n	80102fc <_printf_common+0xa4>
 80102aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80102ae:	6822      	ldr	r2, [r4, #0]
 80102b0:	3300      	adds	r3, #0
 80102b2:	bf18      	it	ne
 80102b4:	2301      	movne	r3, #1
 80102b6:	0692      	lsls	r2, r2, #26
 80102b8:	d42d      	bmi.n	8010316 <_printf_common+0xbe>
 80102ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102be:	4639      	mov	r1, r7
 80102c0:	4630      	mov	r0, r6
 80102c2:	47c0      	blx	r8
 80102c4:	3001      	adds	r0, #1
 80102c6:	d020      	beq.n	801030a <_printf_common+0xb2>
 80102c8:	6823      	ldr	r3, [r4, #0]
 80102ca:	68e5      	ldr	r5, [r4, #12]
 80102cc:	f8d9 2000 	ldr.w	r2, [r9]
 80102d0:	f003 0306 	and.w	r3, r3, #6
 80102d4:	2b04      	cmp	r3, #4
 80102d6:	bf08      	it	eq
 80102d8:	1aad      	subeq	r5, r5, r2
 80102da:	68a3      	ldr	r3, [r4, #8]
 80102dc:	6922      	ldr	r2, [r4, #16]
 80102de:	bf0c      	ite	eq
 80102e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102e4:	2500      	movne	r5, #0
 80102e6:	4293      	cmp	r3, r2
 80102e8:	bfc4      	itt	gt
 80102ea:	1a9b      	subgt	r3, r3, r2
 80102ec:	18ed      	addgt	r5, r5, r3
 80102ee:	f04f 0900 	mov.w	r9, #0
 80102f2:	341a      	adds	r4, #26
 80102f4:	454d      	cmp	r5, r9
 80102f6:	d11a      	bne.n	801032e <_printf_common+0xd6>
 80102f8:	2000      	movs	r0, #0
 80102fa:	e008      	b.n	801030e <_printf_common+0xb6>
 80102fc:	2301      	movs	r3, #1
 80102fe:	4652      	mov	r2, sl
 8010300:	4639      	mov	r1, r7
 8010302:	4630      	mov	r0, r6
 8010304:	47c0      	blx	r8
 8010306:	3001      	adds	r0, #1
 8010308:	d103      	bne.n	8010312 <_printf_common+0xba>
 801030a:	f04f 30ff 	mov.w	r0, #4294967295
 801030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010312:	3501      	adds	r5, #1
 8010314:	e7c3      	b.n	801029e <_printf_common+0x46>
 8010316:	18e1      	adds	r1, r4, r3
 8010318:	1c5a      	adds	r2, r3, #1
 801031a:	2030      	movs	r0, #48	; 0x30
 801031c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010320:	4422      	add	r2, r4
 8010322:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801032a:	3302      	adds	r3, #2
 801032c:	e7c5      	b.n	80102ba <_printf_common+0x62>
 801032e:	2301      	movs	r3, #1
 8010330:	4622      	mov	r2, r4
 8010332:	4639      	mov	r1, r7
 8010334:	4630      	mov	r0, r6
 8010336:	47c0      	blx	r8
 8010338:	3001      	adds	r0, #1
 801033a:	d0e6      	beq.n	801030a <_printf_common+0xb2>
 801033c:	f109 0901 	add.w	r9, r9, #1
 8010340:	e7d8      	b.n	80102f4 <_printf_common+0x9c>
	...

08010344 <_printf_i>:
 8010344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010348:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801034c:	460c      	mov	r4, r1
 801034e:	7e09      	ldrb	r1, [r1, #24]
 8010350:	b085      	sub	sp, #20
 8010352:	296e      	cmp	r1, #110	; 0x6e
 8010354:	4617      	mov	r7, r2
 8010356:	4606      	mov	r6, r0
 8010358:	4698      	mov	r8, r3
 801035a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801035c:	f000 80b3 	beq.w	80104c6 <_printf_i+0x182>
 8010360:	d822      	bhi.n	80103a8 <_printf_i+0x64>
 8010362:	2963      	cmp	r1, #99	; 0x63
 8010364:	d036      	beq.n	80103d4 <_printf_i+0x90>
 8010366:	d80a      	bhi.n	801037e <_printf_i+0x3a>
 8010368:	2900      	cmp	r1, #0
 801036a:	f000 80b9 	beq.w	80104e0 <_printf_i+0x19c>
 801036e:	2958      	cmp	r1, #88	; 0x58
 8010370:	f000 8083 	beq.w	801047a <_printf_i+0x136>
 8010374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010378:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801037c:	e032      	b.n	80103e4 <_printf_i+0xa0>
 801037e:	2964      	cmp	r1, #100	; 0x64
 8010380:	d001      	beq.n	8010386 <_printf_i+0x42>
 8010382:	2969      	cmp	r1, #105	; 0x69
 8010384:	d1f6      	bne.n	8010374 <_printf_i+0x30>
 8010386:	6820      	ldr	r0, [r4, #0]
 8010388:	6813      	ldr	r3, [r2, #0]
 801038a:	0605      	lsls	r5, r0, #24
 801038c:	f103 0104 	add.w	r1, r3, #4
 8010390:	d52a      	bpl.n	80103e8 <_printf_i+0xa4>
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	6011      	str	r1, [r2, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	da03      	bge.n	80103a2 <_printf_i+0x5e>
 801039a:	222d      	movs	r2, #45	; 0x2d
 801039c:	425b      	negs	r3, r3
 801039e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80103a2:	486f      	ldr	r0, [pc, #444]	; (8010560 <_printf_i+0x21c>)
 80103a4:	220a      	movs	r2, #10
 80103a6:	e039      	b.n	801041c <_printf_i+0xd8>
 80103a8:	2973      	cmp	r1, #115	; 0x73
 80103aa:	f000 809d 	beq.w	80104e8 <_printf_i+0x1a4>
 80103ae:	d808      	bhi.n	80103c2 <_printf_i+0x7e>
 80103b0:	296f      	cmp	r1, #111	; 0x6f
 80103b2:	d020      	beq.n	80103f6 <_printf_i+0xb2>
 80103b4:	2970      	cmp	r1, #112	; 0x70
 80103b6:	d1dd      	bne.n	8010374 <_printf_i+0x30>
 80103b8:	6823      	ldr	r3, [r4, #0]
 80103ba:	f043 0320 	orr.w	r3, r3, #32
 80103be:	6023      	str	r3, [r4, #0]
 80103c0:	e003      	b.n	80103ca <_printf_i+0x86>
 80103c2:	2975      	cmp	r1, #117	; 0x75
 80103c4:	d017      	beq.n	80103f6 <_printf_i+0xb2>
 80103c6:	2978      	cmp	r1, #120	; 0x78
 80103c8:	d1d4      	bne.n	8010374 <_printf_i+0x30>
 80103ca:	2378      	movs	r3, #120	; 0x78
 80103cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80103d0:	4864      	ldr	r0, [pc, #400]	; (8010564 <_printf_i+0x220>)
 80103d2:	e055      	b.n	8010480 <_printf_i+0x13c>
 80103d4:	6813      	ldr	r3, [r2, #0]
 80103d6:	1d19      	adds	r1, r3, #4
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6011      	str	r1, [r2, #0]
 80103dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103e4:	2301      	movs	r3, #1
 80103e6:	e08c      	b.n	8010502 <_printf_i+0x1be>
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	6011      	str	r1, [r2, #0]
 80103ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80103f0:	bf18      	it	ne
 80103f2:	b21b      	sxthne	r3, r3
 80103f4:	e7cf      	b.n	8010396 <_printf_i+0x52>
 80103f6:	6813      	ldr	r3, [r2, #0]
 80103f8:	6825      	ldr	r5, [r4, #0]
 80103fa:	1d18      	adds	r0, r3, #4
 80103fc:	6010      	str	r0, [r2, #0]
 80103fe:	0628      	lsls	r0, r5, #24
 8010400:	d501      	bpl.n	8010406 <_printf_i+0xc2>
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	e002      	b.n	801040c <_printf_i+0xc8>
 8010406:	0668      	lsls	r0, r5, #25
 8010408:	d5fb      	bpl.n	8010402 <_printf_i+0xbe>
 801040a:	881b      	ldrh	r3, [r3, #0]
 801040c:	4854      	ldr	r0, [pc, #336]	; (8010560 <_printf_i+0x21c>)
 801040e:	296f      	cmp	r1, #111	; 0x6f
 8010410:	bf14      	ite	ne
 8010412:	220a      	movne	r2, #10
 8010414:	2208      	moveq	r2, #8
 8010416:	2100      	movs	r1, #0
 8010418:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801041c:	6865      	ldr	r5, [r4, #4]
 801041e:	60a5      	str	r5, [r4, #8]
 8010420:	2d00      	cmp	r5, #0
 8010422:	f2c0 8095 	blt.w	8010550 <_printf_i+0x20c>
 8010426:	6821      	ldr	r1, [r4, #0]
 8010428:	f021 0104 	bic.w	r1, r1, #4
 801042c:	6021      	str	r1, [r4, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d13d      	bne.n	80104ae <_printf_i+0x16a>
 8010432:	2d00      	cmp	r5, #0
 8010434:	f040 808e 	bne.w	8010554 <_printf_i+0x210>
 8010438:	4665      	mov	r5, ip
 801043a:	2a08      	cmp	r2, #8
 801043c:	d10b      	bne.n	8010456 <_printf_i+0x112>
 801043e:	6823      	ldr	r3, [r4, #0]
 8010440:	07db      	lsls	r3, r3, #31
 8010442:	d508      	bpl.n	8010456 <_printf_i+0x112>
 8010444:	6923      	ldr	r3, [r4, #16]
 8010446:	6862      	ldr	r2, [r4, #4]
 8010448:	429a      	cmp	r2, r3
 801044a:	bfde      	ittt	le
 801044c:	2330      	movle	r3, #48	; 0x30
 801044e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010452:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010456:	ebac 0305 	sub.w	r3, ip, r5
 801045a:	6123      	str	r3, [r4, #16]
 801045c:	f8cd 8000 	str.w	r8, [sp]
 8010460:	463b      	mov	r3, r7
 8010462:	aa03      	add	r2, sp, #12
 8010464:	4621      	mov	r1, r4
 8010466:	4630      	mov	r0, r6
 8010468:	f7ff fef6 	bl	8010258 <_printf_common>
 801046c:	3001      	adds	r0, #1
 801046e:	d14d      	bne.n	801050c <_printf_i+0x1c8>
 8010470:	f04f 30ff 	mov.w	r0, #4294967295
 8010474:	b005      	add	sp, #20
 8010476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801047a:	4839      	ldr	r0, [pc, #228]	; (8010560 <_printf_i+0x21c>)
 801047c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010480:	6813      	ldr	r3, [r2, #0]
 8010482:	6821      	ldr	r1, [r4, #0]
 8010484:	1d1d      	adds	r5, r3, #4
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	6015      	str	r5, [r2, #0]
 801048a:	060a      	lsls	r2, r1, #24
 801048c:	d50b      	bpl.n	80104a6 <_printf_i+0x162>
 801048e:	07ca      	lsls	r2, r1, #31
 8010490:	bf44      	itt	mi
 8010492:	f041 0120 	orrmi.w	r1, r1, #32
 8010496:	6021      	strmi	r1, [r4, #0]
 8010498:	b91b      	cbnz	r3, 80104a2 <_printf_i+0x15e>
 801049a:	6822      	ldr	r2, [r4, #0]
 801049c:	f022 0220 	bic.w	r2, r2, #32
 80104a0:	6022      	str	r2, [r4, #0]
 80104a2:	2210      	movs	r2, #16
 80104a4:	e7b7      	b.n	8010416 <_printf_i+0xd2>
 80104a6:	064d      	lsls	r5, r1, #25
 80104a8:	bf48      	it	mi
 80104aa:	b29b      	uxthmi	r3, r3
 80104ac:	e7ef      	b.n	801048e <_printf_i+0x14a>
 80104ae:	4665      	mov	r5, ip
 80104b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80104b4:	fb02 3311 	mls	r3, r2, r1, r3
 80104b8:	5cc3      	ldrb	r3, [r0, r3]
 80104ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80104be:	460b      	mov	r3, r1
 80104c0:	2900      	cmp	r1, #0
 80104c2:	d1f5      	bne.n	80104b0 <_printf_i+0x16c>
 80104c4:	e7b9      	b.n	801043a <_printf_i+0xf6>
 80104c6:	6813      	ldr	r3, [r2, #0]
 80104c8:	6825      	ldr	r5, [r4, #0]
 80104ca:	6961      	ldr	r1, [r4, #20]
 80104cc:	1d18      	adds	r0, r3, #4
 80104ce:	6010      	str	r0, [r2, #0]
 80104d0:	0628      	lsls	r0, r5, #24
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	d501      	bpl.n	80104da <_printf_i+0x196>
 80104d6:	6019      	str	r1, [r3, #0]
 80104d8:	e002      	b.n	80104e0 <_printf_i+0x19c>
 80104da:	066a      	lsls	r2, r5, #25
 80104dc:	d5fb      	bpl.n	80104d6 <_printf_i+0x192>
 80104de:	8019      	strh	r1, [r3, #0]
 80104e0:	2300      	movs	r3, #0
 80104e2:	6123      	str	r3, [r4, #16]
 80104e4:	4665      	mov	r5, ip
 80104e6:	e7b9      	b.n	801045c <_printf_i+0x118>
 80104e8:	6813      	ldr	r3, [r2, #0]
 80104ea:	1d19      	adds	r1, r3, #4
 80104ec:	6011      	str	r1, [r2, #0]
 80104ee:	681d      	ldr	r5, [r3, #0]
 80104f0:	6862      	ldr	r2, [r4, #4]
 80104f2:	2100      	movs	r1, #0
 80104f4:	4628      	mov	r0, r5
 80104f6:	f7ef fe8b 	bl	8000210 <memchr>
 80104fa:	b108      	cbz	r0, 8010500 <_printf_i+0x1bc>
 80104fc:	1b40      	subs	r0, r0, r5
 80104fe:	6060      	str	r0, [r4, #4]
 8010500:	6863      	ldr	r3, [r4, #4]
 8010502:	6123      	str	r3, [r4, #16]
 8010504:	2300      	movs	r3, #0
 8010506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801050a:	e7a7      	b.n	801045c <_printf_i+0x118>
 801050c:	6923      	ldr	r3, [r4, #16]
 801050e:	462a      	mov	r2, r5
 8010510:	4639      	mov	r1, r7
 8010512:	4630      	mov	r0, r6
 8010514:	47c0      	blx	r8
 8010516:	3001      	adds	r0, #1
 8010518:	d0aa      	beq.n	8010470 <_printf_i+0x12c>
 801051a:	6823      	ldr	r3, [r4, #0]
 801051c:	079b      	lsls	r3, r3, #30
 801051e:	d413      	bmi.n	8010548 <_printf_i+0x204>
 8010520:	68e0      	ldr	r0, [r4, #12]
 8010522:	9b03      	ldr	r3, [sp, #12]
 8010524:	4298      	cmp	r0, r3
 8010526:	bfb8      	it	lt
 8010528:	4618      	movlt	r0, r3
 801052a:	e7a3      	b.n	8010474 <_printf_i+0x130>
 801052c:	2301      	movs	r3, #1
 801052e:	464a      	mov	r2, r9
 8010530:	4639      	mov	r1, r7
 8010532:	4630      	mov	r0, r6
 8010534:	47c0      	blx	r8
 8010536:	3001      	adds	r0, #1
 8010538:	d09a      	beq.n	8010470 <_printf_i+0x12c>
 801053a:	3501      	adds	r5, #1
 801053c:	68e3      	ldr	r3, [r4, #12]
 801053e:	9a03      	ldr	r2, [sp, #12]
 8010540:	1a9b      	subs	r3, r3, r2
 8010542:	42ab      	cmp	r3, r5
 8010544:	dcf2      	bgt.n	801052c <_printf_i+0x1e8>
 8010546:	e7eb      	b.n	8010520 <_printf_i+0x1dc>
 8010548:	2500      	movs	r5, #0
 801054a:	f104 0919 	add.w	r9, r4, #25
 801054e:	e7f5      	b.n	801053c <_printf_i+0x1f8>
 8010550:	2b00      	cmp	r3, #0
 8010552:	d1ac      	bne.n	80104ae <_printf_i+0x16a>
 8010554:	7803      	ldrb	r3, [r0, #0]
 8010556:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801055a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801055e:	e76c      	b.n	801043a <_printf_i+0xf6>
 8010560:	0801511c 	.word	0x0801511c
 8010564:	0801512d 	.word	0x0801512d

08010568 <_scanf_float>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	469a      	mov	sl, r3
 801056e:	688b      	ldr	r3, [r1, #8]
 8010570:	4616      	mov	r6, r2
 8010572:	1e5a      	subs	r2, r3, #1
 8010574:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010578:	b087      	sub	sp, #28
 801057a:	bf83      	ittte	hi
 801057c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010580:	189b      	addhi	r3, r3, r2
 8010582:	9301      	strhi	r3, [sp, #4]
 8010584:	2300      	movls	r3, #0
 8010586:	bf86      	itte	hi
 8010588:	f240 135d 	movwhi	r3, #349	; 0x15d
 801058c:	608b      	strhi	r3, [r1, #8]
 801058e:	9301      	strls	r3, [sp, #4]
 8010590:	680b      	ldr	r3, [r1, #0]
 8010592:	4688      	mov	r8, r1
 8010594:	f04f 0b00 	mov.w	fp, #0
 8010598:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801059c:	f848 3b1c 	str.w	r3, [r8], #28
 80105a0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80105a4:	4607      	mov	r7, r0
 80105a6:	460c      	mov	r4, r1
 80105a8:	4645      	mov	r5, r8
 80105aa:	465a      	mov	r2, fp
 80105ac:	46d9      	mov	r9, fp
 80105ae:	f8cd b008 	str.w	fp, [sp, #8]
 80105b2:	68a1      	ldr	r1, [r4, #8]
 80105b4:	b181      	cbz	r1, 80105d8 <_scanf_float+0x70>
 80105b6:	6833      	ldr	r3, [r6, #0]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	2b49      	cmp	r3, #73	; 0x49
 80105bc:	d071      	beq.n	80106a2 <_scanf_float+0x13a>
 80105be:	d84d      	bhi.n	801065c <_scanf_float+0xf4>
 80105c0:	2b39      	cmp	r3, #57	; 0x39
 80105c2:	d840      	bhi.n	8010646 <_scanf_float+0xde>
 80105c4:	2b31      	cmp	r3, #49	; 0x31
 80105c6:	f080 8088 	bcs.w	80106da <_scanf_float+0x172>
 80105ca:	2b2d      	cmp	r3, #45	; 0x2d
 80105cc:	f000 8090 	beq.w	80106f0 <_scanf_float+0x188>
 80105d0:	d815      	bhi.n	80105fe <_scanf_float+0x96>
 80105d2:	2b2b      	cmp	r3, #43	; 0x2b
 80105d4:	f000 808c 	beq.w	80106f0 <_scanf_float+0x188>
 80105d8:	f1b9 0f00 	cmp.w	r9, #0
 80105dc:	d003      	beq.n	80105e6 <_scanf_float+0x7e>
 80105de:	6823      	ldr	r3, [r4, #0]
 80105e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105e4:	6023      	str	r3, [r4, #0]
 80105e6:	3a01      	subs	r2, #1
 80105e8:	2a01      	cmp	r2, #1
 80105ea:	f200 80ea 	bhi.w	80107c2 <_scanf_float+0x25a>
 80105ee:	4545      	cmp	r5, r8
 80105f0:	f200 80dc 	bhi.w	80107ac <_scanf_float+0x244>
 80105f4:	2601      	movs	r6, #1
 80105f6:	4630      	mov	r0, r6
 80105f8:	b007      	add	sp, #28
 80105fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105fe:	2b2e      	cmp	r3, #46	; 0x2e
 8010600:	f000 809f 	beq.w	8010742 <_scanf_float+0x1da>
 8010604:	2b30      	cmp	r3, #48	; 0x30
 8010606:	d1e7      	bne.n	80105d8 <_scanf_float+0x70>
 8010608:	6820      	ldr	r0, [r4, #0]
 801060a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801060e:	d064      	beq.n	80106da <_scanf_float+0x172>
 8010610:	9b01      	ldr	r3, [sp, #4]
 8010612:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010616:	6020      	str	r0, [r4, #0]
 8010618:	f109 0901 	add.w	r9, r9, #1
 801061c:	b11b      	cbz	r3, 8010626 <_scanf_float+0xbe>
 801061e:	3b01      	subs	r3, #1
 8010620:	3101      	adds	r1, #1
 8010622:	9301      	str	r3, [sp, #4]
 8010624:	60a1      	str	r1, [r4, #8]
 8010626:	68a3      	ldr	r3, [r4, #8]
 8010628:	3b01      	subs	r3, #1
 801062a:	60a3      	str	r3, [r4, #8]
 801062c:	6923      	ldr	r3, [r4, #16]
 801062e:	3301      	adds	r3, #1
 8010630:	6123      	str	r3, [r4, #16]
 8010632:	6873      	ldr	r3, [r6, #4]
 8010634:	3b01      	subs	r3, #1
 8010636:	2b00      	cmp	r3, #0
 8010638:	6073      	str	r3, [r6, #4]
 801063a:	f340 80ac 	ble.w	8010796 <_scanf_float+0x22e>
 801063e:	6833      	ldr	r3, [r6, #0]
 8010640:	3301      	adds	r3, #1
 8010642:	6033      	str	r3, [r6, #0]
 8010644:	e7b5      	b.n	80105b2 <_scanf_float+0x4a>
 8010646:	2b45      	cmp	r3, #69	; 0x45
 8010648:	f000 8085 	beq.w	8010756 <_scanf_float+0x1ee>
 801064c:	2b46      	cmp	r3, #70	; 0x46
 801064e:	d06a      	beq.n	8010726 <_scanf_float+0x1be>
 8010650:	2b41      	cmp	r3, #65	; 0x41
 8010652:	d1c1      	bne.n	80105d8 <_scanf_float+0x70>
 8010654:	2a01      	cmp	r2, #1
 8010656:	d1bf      	bne.n	80105d8 <_scanf_float+0x70>
 8010658:	2202      	movs	r2, #2
 801065a:	e046      	b.n	80106ea <_scanf_float+0x182>
 801065c:	2b65      	cmp	r3, #101	; 0x65
 801065e:	d07a      	beq.n	8010756 <_scanf_float+0x1ee>
 8010660:	d818      	bhi.n	8010694 <_scanf_float+0x12c>
 8010662:	2b54      	cmp	r3, #84	; 0x54
 8010664:	d066      	beq.n	8010734 <_scanf_float+0x1cc>
 8010666:	d811      	bhi.n	801068c <_scanf_float+0x124>
 8010668:	2b4e      	cmp	r3, #78	; 0x4e
 801066a:	d1b5      	bne.n	80105d8 <_scanf_float+0x70>
 801066c:	2a00      	cmp	r2, #0
 801066e:	d146      	bne.n	80106fe <_scanf_float+0x196>
 8010670:	f1b9 0f00 	cmp.w	r9, #0
 8010674:	d145      	bne.n	8010702 <_scanf_float+0x19a>
 8010676:	6821      	ldr	r1, [r4, #0]
 8010678:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801067c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010680:	d13f      	bne.n	8010702 <_scanf_float+0x19a>
 8010682:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010686:	6021      	str	r1, [r4, #0]
 8010688:	2201      	movs	r2, #1
 801068a:	e02e      	b.n	80106ea <_scanf_float+0x182>
 801068c:	2b59      	cmp	r3, #89	; 0x59
 801068e:	d01e      	beq.n	80106ce <_scanf_float+0x166>
 8010690:	2b61      	cmp	r3, #97	; 0x61
 8010692:	e7de      	b.n	8010652 <_scanf_float+0xea>
 8010694:	2b6e      	cmp	r3, #110	; 0x6e
 8010696:	d0e9      	beq.n	801066c <_scanf_float+0x104>
 8010698:	d815      	bhi.n	80106c6 <_scanf_float+0x15e>
 801069a:	2b66      	cmp	r3, #102	; 0x66
 801069c:	d043      	beq.n	8010726 <_scanf_float+0x1be>
 801069e:	2b69      	cmp	r3, #105	; 0x69
 80106a0:	d19a      	bne.n	80105d8 <_scanf_float+0x70>
 80106a2:	f1bb 0f00 	cmp.w	fp, #0
 80106a6:	d138      	bne.n	801071a <_scanf_float+0x1b2>
 80106a8:	f1b9 0f00 	cmp.w	r9, #0
 80106ac:	d197      	bne.n	80105de <_scanf_float+0x76>
 80106ae:	6821      	ldr	r1, [r4, #0]
 80106b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80106b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80106b8:	d195      	bne.n	80105e6 <_scanf_float+0x7e>
 80106ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80106be:	6021      	str	r1, [r4, #0]
 80106c0:	f04f 0b01 	mov.w	fp, #1
 80106c4:	e011      	b.n	80106ea <_scanf_float+0x182>
 80106c6:	2b74      	cmp	r3, #116	; 0x74
 80106c8:	d034      	beq.n	8010734 <_scanf_float+0x1cc>
 80106ca:	2b79      	cmp	r3, #121	; 0x79
 80106cc:	d184      	bne.n	80105d8 <_scanf_float+0x70>
 80106ce:	f1bb 0f07 	cmp.w	fp, #7
 80106d2:	d181      	bne.n	80105d8 <_scanf_float+0x70>
 80106d4:	f04f 0b08 	mov.w	fp, #8
 80106d8:	e007      	b.n	80106ea <_scanf_float+0x182>
 80106da:	eb12 0f0b 	cmn.w	r2, fp
 80106de:	f47f af7b 	bne.w	80105d8 <_scanf_float+0x70>
 80106e2:	6821      	ldr	r1, [r4, #0]
 80106e4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80106e8:	6021      	str	r1, [r4, #0]
 80106ea:	702b      	strb	r3, [r5, #0]
 80106ec:	3501      	adds	r5, #1
 80106ee:	e79a      	b.n	8010626 <_scanf_float+0xbe>
 80106f0:	6821      	ldr	r1, [r4, #0]
 80106f2:	0608      	lsls	r0, r1, #24
 80106f4:	f57f af70 	bpl.w	80105d8 <_scanf_float+0x70>
 80106f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80106fc:	e7f4      	b.n	80106e8 <_scanf_float+0x180>
 80106fe:	2a02      	cmp	r2, #2
 8010700:	d047      	beq.n	8010792 <_scanf_float+0x22a>
 8010702:	f1bb 0f01 	cmp.w	fp, #1
 8010706:	d003      	beq.n	8010710 <_scanf_float+0x1a8>
 8010708:	f1bb 0f04 	cmp.w	fp, #4
 801070c:	f47f af64 	bne.w	80105d8 <_scanf_float+0x70>
 8010710:	f10b 0b01 	add.w	fp, fp, #1
 8010714:	fa5f fb8b 	uxtb.w	fp, fp
 8010718:	e7e7      	b.n	80106ea <_scanf_float+0x182>
 801071a:	f1bb 0f03 	cmp.w	fp, #3
 801071e:	d0f7      	beq.n	8010710 <_scanf_float+0x1a8>
 8010720:	f1bb 0f05 	cmp.w	fp, #5
 8010724:	e7f2      	b.n	801070c <_scanf_float+0x1a4>
 8010726:	f1bb 0f02 	cmp.w	fp, #2
 801072a:	f47f af55 	bne.w	80105d8 <_scanf_float+0x70>
 801072e:	f04f 0b03 	mov.w	fp, #3
 8010732:	e7da      	b.n	80106ea <_scanf_float+0x182>
 8010734:	f1bb 0f06 	cmp.w	fp, #6
 8010738:	f47f af4e 	bne.w	80105d8 <_scanf_float+0x70>
 801073c:	f04f 0b07 	mov.w	fp, #7
 8010740:	e7d3      	b.n	80106ea <_scanf_float+0x182>
 8010742:	6821      	ldr	r1, [r4, #0]
 8010744:	0588      	lsls	r0, r1, #22
 8010746:	f57f af47 	bpl.w	80105d8 <_scanf_float+0x70>
 801074a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801074e:	6021      	str	r1, [r4, #0]
 8010750:	f8cd 9008 	str.w	r9, [sp, #8]
 8010754:	e7c9      	b.n	80106ea <_scanf_float+0x182>
 8010756:	6821      	ldr	r1, [r4, #0]
 8010758:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801075c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010760:	d006      	beq.n	8010770 <_scanf_float+0x208>
 8010762:	0548      	lsls	r0, r1, #21
 8010764:	f57f af38 	bpl.w	80105d8 <_scanf_float+0x70>
 8010768:	f1b9 0f00 	cmp.w	r9, #0
 801076c:	f43f af3b 	beq.w	80105e6 <_scanf_float+0x7e>
 8010770:	0588      	lsls	r0, r1, #22
 8010772:	bf58      	it	pl
 8010774:	9802      	ldrpl	r0, [sp, #8]
 8010776:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801077a:	bf58      	it	pl
 801077c:	eba9 0000 	subpl.w	r0, r9, r0
 8010780:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010784:	bf58      	it	pl
 8010786:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801078a:	6021      	str	r1, [r4, #0]
 801078c:	f04f 0900 	mov.w	r9, #0
 8010790:	e7ab      	b.n	80106ea <_scanf_float+0x182>
 8010792:	2203      	movs	r2, #3
 8010794:	e7a9      	b.n	80106ea <_scanf_float+0x182>
 8010796:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801079a:	9205      	str	r2, [sp, #20]
 801079c:	4631      	mov	r1, r6
 801079e:	4638      	mov	r0, r7
 80107a0:	4798      	blx	r3
 80107a2:	9a05      	ldr	r2, [sp, #20]
 80107a4:	2800      	cmp	r0, #0
 80107a6:	f43f af04 	beq.w	80105b2 <_scanf_float+0x4a>
 80107aa:	e715      	b.n	80105d8 <_scanf_float+0x70>
 80107ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80107b4:	4632      	mov	r2, r6
 80107b6:	4638      	mov	r0, r7
 80107b8:	4798      	blx	r3
 80107ba:	6923      	ldr	r3, [r4, #16]
 80107bc:	3b01      	subs	r3, #1
 80107be:	6123      	str	r3, [r4, #16]
 80107c0:	e715      	b.n	80105ee <_scanf_float+0x86>
 80107c2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80107c6:	2b06      	cmp	r3, #6
 80107c8:	d80a      	bhi.n	80107e0 <_scanf_float+0x278>
 80107ca:	f1bb 0f02 	cmp.w	fp, #2
 80107ce:	d968      	bls.n	80108a2 <_scanf_float+0x33a>
 80107d0:	f1ab 0b03 	sub.w	fp, fp, #3
 80107d4:	fa5f fb8b 	uxtb.w	fp, fp
 80107d8:	eba5 0b0b 	sub.w	fp, r5, fp
 80107dc:	455d      	cmp	r5, fp
 80107de:	d14b      	bne.n	8010878 <_scanf_float+0x310>
 80107e0:	6823      	ldr	r3, [r4, #0]
 80107e2:	05da      	lsls	r2, r3, #23
 80107e4:	d51f      	bpl.n	8010826 <_scanf_float+0x2be>
 80107e6:	055b      	lsls	r3, r3, #21
 80107e8:	d468      	bmi.n	80108bc <_scanf_float+0x354>
 80107ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80107ee:	6923      	ldr	r3, [r4, #16]
 80107f0:	2965      	cmp	r1, #101	; 0x65
 80107f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80107f6:	f105 3bff 	add.w	fp, r5, #4294967295
 80107fa:	6123      	str	r3, [r4, #16]
 80107fc:	d00d      	beq.n	801081a <_scanf_float+0x2b2>
 80107fe:	2945      	cmp	r1, #69	; 0x45
 8010800:	d00b      	beq.n	801081a <_scanf_float+0x2b2>
 8010802:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010806:	4632      	mov	r2, r6
 8010808:	4638      	mov	r0, r7
 801080a:	4798      	blx	r3
 801080c:	6923      	ldr	r3, [r4, #16]
 801080e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010812:	3b01      	subs	r3, #1
 8010814:	f1a5 0b02 	sub.w	fp, r5, #2
 8010818:	6123      	str	r3, [r4, #16]
 801081a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801081e:	4632      	mov	r2, r6
 8010820:	4638      	mov	r0, r7
 8010822:	4798      	blx	r3
 8010824:	465d      	mov	r5, fp
 8010826:	6826      	ldr	r6, [r4, #0]
 8010828:	f016 0610 	ands.w	r6, r6, #16
 801082c:	d17a      	bne.n	8010924 <_scanf_float+0x3bc>
 801082e:	702e      	strb	r6, [r5, #0]
 8010830:	6823      	ldr	r3, [r4, #0]
 8010832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801083a:	d142      	bne.n	80108c2 <_scanf_float+0x35a>
 801083c:	9b02      	ldr	r3, [sp, #8]
 801083e:	eba9 0303 	sub.w	r3, r9, r3
 8010842:	425a      	negs	r2, r3
 8010844:	2b00      	cmp	r3, #0
 8010846:	d149      	bne.n	80108dc <_scanf_float+0x374>
 8010848:	2200      	movs	r2, #0
 801084a:	4641      	mov	r1, r8
 801084c:	4638      	mov	r0, r7
 801084e:	f000 ffdf 	bl	8011810 <_strtod_r>
 8010852:	6825      	ldr	r5, [r4, #0]
 8010854:	f8da 3000 	ldr.w	r3, [sl]
 8010858:	f015 0f02 	tst.w	r5, #2
 801085c:	f103 0204 	add.w	r2, r3, #4
 8010860:	ec59 8b10 	vmov	r8, r9, d0
 8010864:	f8ca 2000 	str.w	r2, [sl]
 8010868:	d043      	beq.n	80108f2 <_scanf_float+0x38a>
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	e9c3 8900 	strd	r8, r9, [r3]
 8010870:	68e3      	ldr	r3, [r4, #12]
 8010872:	3301      	adds	r3, #1
 8010874:	60e3      	str	r3, [r4, #12]
 8010876:	e6be      	b.n	80105f6 <_scanf_float+0x8e>
 8010878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801087c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010880:	4632      	mov	r2, r6
 8010882:	4638      	mov	r0, r7
 8010884:	4798      	blx	r3
 8010886:	6923      	ldr	r3, [r4, #16]
 8010888:	3b01      	subs	r3, #1
 801088a:	6123      	str	r3, [r4, #16]
 801088c:	e7a6      	b.n	80107dc <_scanf_float+0x274>
 801088e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010892:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010896:	4632      	mov	r2, r6
 8010898:	4638      	mov	r0, r7
 801089a:	4798      	blx	r3
 801089c:	6923      	ldr	r3, [r4, #16]
 801089e:	3b01      	subs	r3, #1
 80108a0:	6123      	str	r3, [r4, #16]
 80108a2:	4545      	cmp	r5, r8
 80108a4:	d8f3      	bhi.n	801088e <_scanf_float+0x326>
 80108a6:	e6a5      	b.n	80105f4 <_scanf_float+0x8c>
 80108a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80108b0:	4632      	mov	r2, r6
 80108b2:	4638      	mov	r0, r7
 80108b4:	4798      	blx	r3
 80108b6:	6923      	ldr	r3, [r4, #16]
 80108b8:	3b01      	subs	r3, #1
 80108ba:	6123      	str	r3, [r4, #16]
 80108bc:	4545      	cmp	r5, r8
 80108be:	d8f3      	bhi.n	80108a8 <_scanf_float+0x340>
 80108c0:	e698      	b.n	80105f4 <_scanf_float+0x8c>
 80108c2:	9b03      	ldr	r3, [sp, #12]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d0bf      	beq.n	8010848 <_scanf_float+0x2e0>
 80108c8:	9904      	ldr	r1, [sp, #16]
 80108ca:	230a      	movs	r3, #10
 80108cc:	4632      	mov	r2, r6
 80108ce:	3101      	adds	r1, #1
 80108d0:	4638      	mov	r0, r7
 80108d2:	f001 f829 	bl	8011928 <_strtol_r>
 80108d6:	9b03      	ldr	r3, [sp, #12]
 80108d8:	9d04      	ldr	r5, [sp, #16]
 80108da:	1ac2      	subs	r2, r0, r3
 80108dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80108e0:	429d      	cmp	r5, r3
 80108e2:	bf28      	it	cs
 80108e4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80108e8:	490f      	ldr	r1, [pc, #60]	; (8010928 <_scanf_float+0x3c0>)
 80108ea:	4628      	mov	r0, r5
 80108ec:	f000 f8e8 	bl	8010ac0 <siprintf>
 80108f0:	e7aa      	b.n	8010848 <_scanf_float+0x2e0>
 80108f2:	f015 0504 	ands.w	r5, r5, #4
 80108f6:	d1b8      	bne.n	801086a <_scanf_float+0x302>
 80108f8:	681f      	ldr	r7, [r3, #0]
 80108fa:	ee10 2a10 	vmov	r2, s0
 80108fe:	464b      	mov	r3, r9
 8010900:	ee10 0a10 	vmov	r0, s0
 8010904:	4649      	mov	r1, r9
 8010906:	f7f0 f929 	bl	8000b5c <__aeabi_dcmpun>
 801090a:	b128      	cbz	r0, 8010918 <_scanf_float+0x3b0>
 801090c:	4628      	mov	r0, r5
 801090e:	f000 f89d 	bl	8010a4c <nanf>
 8010912:	ed87 0a00 	vstr	s0, [r7]
 8010916:	e7ab      	b.n	8010870 <_scanf_float+0x308>
 8010918:	4640      	mov	r0, r8
 801091a:	4649      	mov	r1, r9
 801091c:	f7f0 f97c 	bl	8000c18 <__aeabi_d2f>
 8010920:	6038      	str	r0, [r7, #0]
 8010922:	e7a5      	b.n	8010870 <_scanf_float+0x308>
 8010924:	2600      	movs	r6, #0
 8010926:	e666      	b.n	80105f6 <_scanf_float+0x8e>
 8010928:	0801513e 	.word	0x0801513e

0801092c <iprintf>:
 801092c:	b40f      	push	{r0, r1, r2, r3}
 801092e:	4b0a      	ldr	r3, [pc, #40]	; (8010958 <iprintf+0x2c>)
 8010930:	b513      	push	{r0, r1, r4, lr}
 8010932:	681c      	ldr	r4, [r3, #0]
 8010934:	b124      	cbz	r4, 8010940 <iprintf+0x14>
 8010936:	69a3      	ldr	r3, [r4, #24]
 8010938:	b913      	cbnz	r3, 8010940 <iprintf+0x14>
 801093a:	4620      	mov	r0, r4
 801093c:	f002 f83c 	bl	80129b8 <__sinit>
 8010940:	ab05      	add	r3, sp, #20
 8010942:	9a04      	ldr	r2, [sp, #16]
 8010944:	68a1      	ldr	r1, [r4, #8]
 8010946:	9301      	str	r3, [sp, #4]
 8010948:	4620      	mov	r0, r4
 801094a:	f003 fc7d 	bl	8014248 <_vfiprintf_r>
 801094e:	b002      	add	sp, #8
 8010950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010954:	b004      	add	sp, #16
 8010956:	4770      	bx	lr
 8010958:	2000000c 	.word	0x2000000c

0801095c <putchar>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	4b08      	ldr	r3, [pc, #32]	; (8010980 <putchar+0x24>)
 8010960:	681c      	ldr	r4, [r3, #0]
 8010962:	4605      	mov	r5, r0
 8010964:	b124      	cbz	r4, 8010970 <putchar+0x14>
 8010966:	69a3      	ldr	r3, [r4, #24]
 8010968:	b913      	cbnz	r3, 8010970 <putchar+0x14>
 801096a:	4620      	mov	r0, r4
 801096c:	f002 f824 	bl	80129b8 <__sinit>
 8010970:	68a2      	ldr	r2, [r4, #8]
 8010972:	4629      	mov	r1, r5
 8010974:	4620      	mov	r0, r4
 8010976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801097a:	f003 bed3 	b.w	8014724 <_putc_r>
 801097e:	bf00      	nop
 8010980:	2000000c 	.word	0x2000000c

08010984 <_puts_r>:
 8010984:	b570      	push	{r4, r5, r6, lr}
 8010986:	460e      	mov	r6, r1
 8010988:	4605      	mov	r5, r0
 801098a:	b118      	cbz	r0, 8010994 <_puts_r+0x10>
 801098c:	6983      	ldr	r3, [r0, #24]
 801098e:	b90b      	cbnz	r3, 8010994 <_puts_r+0x10>
 8010990:	f002 f812 	bl	80129b8 <__sinit>
 8010994:	69ab      	ldr	r3, [r5, #24]
 8010996:	68ac      	ldr	r4, [r5, #8]
 8010998:	b913      	cbnz	r3, 80109a0 <_puts_r+0x1c>
 801099a:	4628      	mov	r0, r5
 801099c:	f002 f80c 	bl	80129b8 <__sinit>
 80109a0:	4b23      	ldr	r3, [pc, #140]	; (8010a30 <_puts_r+0xac>)
 80109a2:	429c      	cmp	r4, r3
 80109a4:	d117      	bne.n	80109d6 <_puts_r+0x52>
 80109a6:	686c      	ldr	r4, [r5, #4]
 80109a8:	89a3      	ldrh	r3, [r4, #12]
 80109aa:	071b      	lsls	r3, r3, #28
 80109ac:	d51d      	bpl.n	80109ea <_puts_r+0x66>
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	b1db      	cbz	r3, 80109ea <_puts_r+0x66>
 80109b2:	3e01      	subs	r6, #1
 80109b4:	68a3      	ldr	r3, [r4, #8]
 80109b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80109ba:	3b01      	subs	r3, #1
 80109bc:	60a3      	str	r3, [r4, #8]
 80109be:	b9e9      	cbnz	r1, 80109fc <_puts_r+0x78>
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	da2e      	bge.n	8010a22 <_puts_r+0x9e>
 80109c4:	4622      	mov	r2, r4
 80109c6:	210a      	movs	r1, #10
 80109c8:	4628      	mov	r0, r5
 80109ca:	f000 ffdf 	bl	801198c <__swbuf_r>
 80109ce:	3001      	adds	r0, #1
 80109d0:	d011      	beq.n	80109f6 <_puts_r+0x72>
 80109d2:	200a      	movs	r0, #10
 80109d4:	e011      	b.n	80109fa <_puts_r+0x76>
 80109d6:	4b17      	ldr	r3, [pc, #92]	; (8010a34 <_puts_r+0xb0>)
 80109d8:	429c      	cmp	r4, r3
 80109da:	d101      	bne.n	80109e0 <_puts_r+0x5c>
 80109dc:	68ac      	ldr	r4, [r5, #8]
 80109de:	e7e3      	b.n	80109a8 <_puts_r+0x24>
 80109e0:	4b15      	ldr	r3, [pc, #84]	; (8010a38 <_puts_r+0xb4>)
 80109e2:	429c      	cmp	r4, r3
 80109e4:	bf08      	it	eq
 80109e6:	68ec      	ldreq	r4, [r5, #12]
 80109e8:	e7de      	b.n	80109a8 <_puts_r+0x24>
 80109ea:	4621      	mov	r1, r4
 80109ec:	4628      	mov	r0, r5
 80109ee:	f001 f831 	bl	8011a54 <__swsetup_r>
 80109f2:	2800      	cmp	r0, #0
 80109f4:	d0dd      	beq.n	80109b2 <_puts_r+0x2e>
 80109f6:	f04f 30ff 	mov.w	r0, #4294967295
 80109fa:	bd70      	pop	{r4, r5, r6, pc}
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	da04      	bge.n	8010a0a <_puts_r+0x86>
 8010a00:	69a2      	ldr	r2, [r4, #24]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	dc06      	bgt.n	8010a14 <_puts_r+0x90>
 8010a06:	290a      	cmp	r1, #10
 8010a08:	d004      	beq.n	8010a14 <_puts_r+0x90>
 8010a0a:	6823      	ldr	r3, [r4, #0]
 8010a0c:	1c5a      	adds	r2, r3, #1
 8010a0e:	6022      	str	r2, [r4, #0]
 8010a10:	7019      	strb	r1, [r3, #0]
 8010a12:	e7cf      	b.n	80109b4 <_puts_r+0x30>
 8010a14:	4622      	mov	r2, r4
 8010a16:	4628      	mov	r0, r5
 8010a18:	f000 ffb8 	bl	801198c <__swbuf_r>
 8010a1c:	3001      	adds	r0, #1
 8010a1e:	d1c9      	bne.n	80109b4 <_puts_r+0x30>
 8010a20:	e7e9      	b.n	80109f6 <_puts_r+0x72>
 8010a22:	6823      	ldr	r3, [r4, #0]
 8010a24:	200a      	movs	r0, #10
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	6022      	str	r2, [r4, #0]
 8010a2a:	7018      	strb	r0, [r3, #0]
 8010a2c:	e7e5      	b.n	80109fa <_puts_r+0x76>
 8010a2e:	bf00      	nop
 8010a30:	080151c8 	.word	0x080151c8
 8010a34:	080151e8 	.word	0x080151e8
 8010a38:	080151a8 	.word	0x080151a8

08010a3c <puts>:
 8010a3c:	4b02      	ldr	r3, [pc, #8]	; (8010a48 <puts+0xc>)
 8010a3e:	4601      	mov	r1, r0
 8010a40:	6818      	ldr	r0, [r3, #0]
 8010a42:	f7ff bf9f 	b.w	8010984 <_puts_r>
 8010a46:	bf00      	nop
 8010a48:	2000000c 	.word	0x2000000c

08010a4c <nanf>:
 8010a4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010a54 <nanf+0x8>
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	7fc00000 	.word	0x7fc00000

08010a58 <sniprintf>:
 8010a58:	b40c      	push	{r2, r3}
 8010a5a:	b530      	push	{r4, r5, lr}
 8010a5c:	4b17      	ldr	r3, [pc, #92]	; (8010abc <sniprintf+0x64>)
 8010a5e:	1e0c      	subs	r4, r1, #0
 8010a60:	b09d      	sub	sp, #116	; 0x74
 8010a62:	681d      	ldr	r5, [r3, #0]
 8010a64:	da08      	bge.n	8010a78 <sniprintf+0x20>
 8010a66:	238b      	movs	r3, #139	; 0x8b
 8010a68:	602b      	str	r3, [r5, #0]
 8010a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a6e:	b01d      	add	sp, #116	; 0x74
 8010a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a74:	b002      	add	sp, #8
 8010a76:	4770      	bx	lr
 8010a78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010a7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010a80:	bf14      	ite	ne
 8010a82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010a86:	4623      	moveq	r3, r4
 8010a88:	9304      	str	r3, [sp, #16]
 8010a8a:	9307      	str	r3, [sp, #28]
 8010a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a90:	9002      	str	r0, [sp, #8]
 8010a92:	9006      	str	r0, [sp, #24]
 8010a94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010a9a:	ab21      	add	r3, sp, #132	; 0x84
 8010a9c:	a902      	add	r1, sp, #8
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	9301      	str	r3, [sp, #4]
 8010aa2:	f003 f905 	bl	8013cb0 <_svfiprintf_r>
 8010aa6:	1c43      	adds	r3, r0, #1
 8010aa8:	bfbc      	itt	lt
 8010aaa:	238b      	movlt	r3, #139	; 0x8b
 8010aac:	602b      	strlt	r3, [r5, #0]
 8010aae:	2c00      	cmp	r4, #0
 8010ab0:	d0dd      	beq.n	8010a6e <sniprintf+0x16>
 8010ab2:	9b02      	ldr	r3, [sp, #8]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	701a      	strb	r2, [r3, #0]
 8010ab8:	e7d9      	b.n	8010a6e <sniprintf+0x16>
 8010aba:	bf00      	nop
 8010abc:	2000000c 	.word	0x2000000c

08010ac0 <siprintf>:
 8010ac0:	b40e      	push	{r1, r2, r3}
 8010ac2:	b500      	push	{lr}
 8010ac4:	b09c      	sub	sp, #112	; 0x70
 8010ac6:	ab1d      	add	r3, sp, #116	; 0x74
 8010ac8:	9002      	str	r0, [sp, #8]
 8010aca:	9006      	str	r0, [sp, #24]
 8010acc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ad0:	4809      	ldr	r0, [pc, #36]	; (8010af8 <siprintf+0x38>)
 8010ad2:	9107      	str	r1, [sp, #28]
 8010ad4:	9104      	str	r1, [sp, #16]
 8010ad6:	4909      	ldr	r1, [pc, #36]	; (8010afc <siprintf+0x3c>)
 8010ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010adc:	9105      	str	r1, [sp, #20]
 8010ade:	6800      	ldr	r0, [r0, #0]
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	a902      	add	r1, sp, #8
 8010ae4:	f003 f8e4 	bl	8013cb0 <_svfiprintf_r>
 8010ae8:	9b02      	ldr	r3, [sp, #8]
 8010aea:	2200      	movs	r2, #0
 8010aec:	701a      	strb	r2, [r3, #0]
 8010aee:	b01c      	add	sp, #112	; 0x70
 8010af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010af4:	b003      	add	sp, #12
 8010af6:	4770      	bx	lr
 8010af8:	2000000c 	.word	0x2000000c
 8010afc:	ffff0208 	.word	0xffff0208

08010b00 <siscanf>:
 8010b00:	b40e      	push	{r1, r2, r3}
 8010b02:	b530      	push	{r4, r5, lr}
 8010b04:	b09c      	sub	sp, #112	; 0x70
 8010b06:	ac1f      	add	r4, sp, #124	; 0x7c
 8010b08:	f44f 7201 	mov.w	r2, #516	; 0x204
 8010b0c:	f854 5b04 	ldr.w	r5, [r4], #4
 8010b10:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010b14:	9002      	str	r0, [sp, #8]
 8010b16:	9006      	str	r0, [sp, #24]
 8010b18:	f7ef fb72 	bl	8000200 <strlen>
 8010b1c:	4b0b      	ldr	r3, [pc, #44]	; (8010b4c <siscanf+0x4c>)
 8010b1e:	9003      	str	r0, [sp, #12]
 8010b20:	9007      	str	r0, [sp, #28]
 8010b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b24:	480a      	ldr	r0, [pc, #40]	; (8010b50 <siscanf+0x50>)
 8010b26:	9401      	str	r4, [sp, #4]
 8010b28:	2300      	movs	r3, #0
 8010b2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b2c:	9314      	str	r3, [sp, #80]	; 0x50
 8010b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010b36:	462a      	mov	r2, r5
 8010b38:	4623      	mov	r3, r4
 8010b3a:	a902      	add	r1, sp, #8
 8010b3c:	6800      	ldr	r0, [r0, #0]
 8010b3e:	f003 fa09 	bl	8013f54 <__ssvfiscanf_r>
 8010b42:	b01c      	add	sp, #112	; 0x70
 8010b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b48:	b003      	add	sp, #12
 8010b4a:	4770      	bx	lr
 8010b4c:	08010b77 	.word	0x08010b77
 8010b50:	2000000c 	.word	0x2000000c

08010b54 <__sread>:
 8010b54:	b510      	push	{r4, lr}
 8010b56:	460c      	mov	r4, r1
 8010b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b5c:	f003 fe18 	bl	8014790 <_read_r>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	bfab      	itete	ge
 8010b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b66:	89a3      	ldrhlt	r3, [r4, #12]
 8010b68:	181b      	addge	r3, r3, r0
 8010b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b6e:	bfac      	ite	ge
 8010b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b72:	81a3      	strhlt	r3, [r4, #12]
 8010b74:	bd10      	pop	{r4, pc}

08010b76 <__seofread>:
 8010b76:	2000      	movs	r0, #0
 8010b78:	4770      	bx	lr

08010b7a <__swrite>:
 8010b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7e:	461f      	mov	r7, r3
 8010b80:	898b      	ldrh	r3, [r1, #12]
 8010b82:	05db      	lsls	r3, r3, #23
 8010b84:	4605      	mov	r5, r0
 8010b86:	460c      	mov	r4, r1
 8010b88:	4616      	mov	r6, r2
 8010b8a:	d505      	bpl.n	8010b98 <__swrite+0x1e>
 8010b8c:	2302      	movs	r3, #2
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b94:	f002 fae2 	bl	801315c <_lseek_r>
 8010b98:	89a3      	ldrh	r3, [r4, #12]
 8010b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ba2:	81a3      	strh	r3, [r4, #12]
 8010ba4:	4632      	mov	r2, r6
 8010ba6:	463b      	mov	r3, r7
 8010ba8:	4628      	mov	r0, r5
 8010baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bae:	f000 bf3f 	b.w	8011a30 <_write_r>

08010bb2 <__sseek>:
 8010bb2:	b510      	push	{r4, lr}
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bba:	f002 facf 	bl	801315c <_lseek_r>
 8010bbe:	1c43      	adds	r3, r0, #1
 8010bc0:	89a3      	ldrh	r3, [r4, #12]
 8010bc2:	bf15      	itete	ne
 8010bc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010bc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010bca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010bce:	81a3      	strheq	r3, [r4, #12]
 8010bd0:	bf18      	it	ne
 8010bd2:	81a3      	strhne	r3, [r4, #12]
 8010bd4:	bd10      	pop	{r4, pc}

08010bd6 <__sclose>:
 8010bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bda:	f000 bfa9 	b.w	8011b30 <_close_r>

08010bde <strcpy>:
 8010bde:	4603      	mov	r3, r0
 8010be0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010be4:	f803 2b01 	strb.w	r2, [r3], #1
 8010be8:	2a00      	cmp	r2, #0
 8010bea:	d1f9      	bne.n	8010be0 <strcpy+0x2>
 8010bec:	4770      	bx	lr

08010bee <sulp>:
 8010bee:	b570      	push	{r4, r5, r6, lr}
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	460d      	mov	r5, r1
 8010bf4:	ec45 4b10 	vmov	d0, r4, r5
 8010bf8:	4616      	mov	r6, r2
 8010bfa:	f002 fe15 	bl	8013828 <__ulp>
 8010bfe:	ec51 0b10 	vmov	r0, r1, d0
 8010c02:	b17e      	cbz	r6, 8010c24 <sulp+0x36>
 8010c04:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010c08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	dd09      	ble.n	8010c24 <sulp+0x36>
 8010c10:	051b      	lsls	r3, r3, #20
 8010c12:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010c16:	2400      	movs	r4, #0
 8010c18:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010c1c:	4622      	mov	r2, r4
 8010c1e:	462b      	mov	r3, r5
 8010c20:	f7ef fd02 	bl	8000628 <__aeabi_dmul>
 8010c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c28 <_strtod_l>:
 8010c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c2c:	461f      	mov	r7, r3
 8010c2e:	b0a1      	sub	sp, #132	; 0x84
 8010c30:	2300      	movs	r3, #0
 8010c32:	4681      	mov	r9, r0
 8010c34:	4638      	mov	r0, r7
 8010c36:	460e      	mov	r6, r1
 8010c38:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c3a:	931c      	str	r3, [sp, #112]	; 0x70
 8010c3c:	f002 fa7e 	bl	801313c <__localeconv_l>
 8010c40:	4680      	mov	r8, r0
 8010c42:	6800      	ldr	r0, [r0, #0]
 8010c44:	f7ef fadc 	bl	8000200 <strlen>
 8010c48:	f04f 0a00 	mov.w	sl, #0
 8010c4c:	4604      	mov	r4, r0
 8010c4e:	f04f 0b00 	mov.w	fp, #0
 8010c52:	961b      	str	r6, [sp, #108]	; 0x6c
 8010c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c56:	781a      	ldrb	r2, [r3, #0]
 8010c58:	2a0d      	cmp	r2, #13
 8010c5a:	d832      	bhi.n	8010cc2 <_strtod_l+0x9a>
 8010c5c:	2a09      	cmp	r2, #9
 8010c5e:	d236      	bcs.n	8010cce <_strtod_l+0xa6>
 8010c60:	2a00      	cmp	r2, #0
 8010c62:	d03e      	beq.n	8010ce2 <_strtod_l+0xba>
 8010c64:	2300      	movs	r3, #0
 8010c66:	930d      	str	r3, [sp, #52]	; 0x34
 8010c68:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010c6a:	782b      	ldrb	r3, [r5, #0]
 8010c6c:	2b30      	cmp	r3, #48	; 0x30
 8010c6e:	f040 80ac 	bne.w	8010dca <_strtod_l+0x1a2>
 8010c72:	786b      	ldrb	r3, [r5, #1]
 8010c74:	2b58      	cmp	r3, #88	; 0x58
 8010c76:	d001      	beq.n	8010c7c <_strtod_l+0x54>
 8010c78:	2b78      	cmp	r3, #120	; 0x78
 8010c7a:	d167      	bne.n	8010d4c <_strtod_l+0x124>
 8010c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c7e:	9301      	str	r3, [sp, #4]
 8010c80:	ab1c      	add	r3, sp, #112	; 0x70
 8010c82:	9300      	str	r3, [sp, #0]
 8010c84:	9702      	str	r7, [sp, #8]
 8010c86:	ab1d      	add	r3, sp, #116	; 0x74
 8010c88:	4a88      	ldr	r2, [pc, #544]	; (8010eac <_strtod_l+0x284>)
 8010c8a:	a91b      	add	r1, sp, #108	; 0x6c
 8010c8c:	4648      	mov	r0, r9
 8010c8e:	f001 ff6c 	bl	8012b6a <__gethex>
 8010c92:	f010 0407 	ands.w	r4, r0, #7
 8010c96:	4606      	mov	r6, r0
 8010c98:	d005      	beq.n	8010ca6 <_strtod_l+0x7e>
 8010c9a:	2c06      	cmp	r4, #6
 8010c9c:	d12b      	bne.n	8010cf6 <_strtod_l+0xce>
 8010c9e:	3501      	adds	r5, #1
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	951b      	str	r5, [sp, #108]	; 0x6c
 8010ca4:	930d      	str	r3, [sp, #52]	; 0x34
 8010ca6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	f040 859a 	bne.w	80117e2 <_strtod_l+0xbba>
 8010cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cb0:	b1e3      	cbz	r3, 8010cec <_strtod_l+0xc4>
 8010cb2:	4652      	mov	r2, sl
 8010cb4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010cb8:	ec43 2b10 	vmov	d0, r2, r3
 8010cbc:	b021      	add	sp, #132	; 0x84
 8010cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cc2:	2a2b      	cmp	r2, #43	; 0x2b
 8010cc4:	d015      	beq.n	8010cf2 <_strtod_l+0xca>
 8010cc6:	2a2d      	cmp	r2, #45	; 0x2d
 8010cc8:	d004      	beq.n	8010cd4 <_strtod_l+0xac>
 8010cca:	2a20      	cmp	r2, #32
 8010ccc:	d1ca      	bne.n	8010c64 <_strtod_l+0x3c>
 8010cce:	3301      	adds	r3, #1
 8010cd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8010cd2:	e7bf      	b.n	8010c54 <_strtod_l+0x2c>
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	920d      	str	r2, [sp, #52]	; 0x34
 8010cd8:	1c5a      	adds	r2, r3, #1
 8010cda:	921b      	str	r2, [sp, #108]	; 0x6c
 8010cdc:	785b      	ldrb	r3, [r3, #1]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d1c2      	bne.n	8010c68 <_strtod_l+0x40>
 8010ce2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ce4:	961b      	str	r6, [sp, #108]	; 0x6c
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f040 8579 	bne.w	80117de <_strtod_l+0xbb6>
 8010cec:	4652      	mov	r2, sl
 8010cee:	465b      	mov	r3, fp
 8010cf0:	e7e2      	b.n	8010cb8 <_strtod_l+0x90>
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	e7ef      	b.n	8010cd6 <_strtod_l+0xae>
 8010cf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010cf8:	b13a      	cbz	r2, 8010d0a <_strtod_l+0xe2>
 8010cfa:	2135      	movs	r1, #53	; 0x35
 8010cfc:	a81e      	add	r0, sp, #120	; 0x78
 8010cfe:	f002 fe8b 	bl	8013a18 <__copybits>
 8010d02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010d04:	4648      	mov	r0, r9
 8010d06:	f002 faf8 	bl	80132fa <_Bfree>
 8010d0a:	3c01      	subs	r4, #1
 8010d0c:	2c04      	cmp	r4, #4
 8010d0e:	d806      	bhi.n	8010d1e <_strtod_l+0xf6>
 8010d10:	e8df f004 	tbb	[pc, r4]
 8010d14:	1714030a 	.word	0x1714030a
 8010d18:	0a          	.byte	0x0a
 8010d19:	00          	.byte	0x00
 8010d1a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8010d1e:	0730      	lsls	r0, r6, #28
 8010d20:	d5c1      	bpl.n	8010ca6 <_strtod_l+0x7e>
 8010d22:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010d26:	e7be      	b.n	8010ca6 <_strtod_l+0x7e>
 8010d28:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8010d2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010d2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010d32:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010d36:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010d3a:	e7f0      	b.n	8010d1e <_strtod_l+0xf6>
 8010d3c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8010eb0 <_strtod_l+0x288>
 8010d40:	e7ed      	b.n	8010d1e <_strtod_l+0xf6>
 8010d42:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010d46:	f04f 3aff 	mov.w	sl, #4294967295
 8010d4a:	e7e8      	b.n	8010d1e <_strtod_l+0xf6>
 8010d4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d4e:	1c5a      	adds	r2, r3, #1
 8010d50:	921b      	str	r2, [sp, #108]	; 0x6c
 8010d52:	785b      	ldrb	r3, [r3, #1]
 8010d54:	2b30      	cmp	r3, #48	; 0x30
 8010d56:	d0f9      	beq.n	8010d4c <_strtod_l+0x124>
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d0a4      	beq.n	8010ca6 <_strtod_l+0x7e>
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	2500      	movs	r5, #0
 8010d60:	9306      	str	r3, [sp, #24]
 8010d62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d64:	9308      	str	r3, [sp, #32]
 8010d66:	9507      	str	r5, [sp, #28]
 8010d68:	9505      	str	r5, [sp, #20]
 8010d6a:	220a      	movs	r2, #10
 8010d6c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010d6e:	7807      	ldrb	r7, [r0, #0]
 8010d70:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8010d74:	b2d9      	uxtb	r1, r3
 8010d76:	2909      	cmp	r1, #9
 8010d78:	d929      	bls.n	8010dce <_strtod_l+0x1a6>
 8010d7a:	4622      	mov	r2, r4
 8010d7c:	f8d8 1000 	ldr.w	r1, [r8]
 8010d80:	f003 fd5a 	bl	8014838 <strncmp>
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d031      	beq.n	8010dec <_strtod_l+0x1c4>
 8010d88:	2000      	movs	r0, #0
 8010d8a:	9c05      	ldr	r4, [sp, #20]
 8010d8c:	9004      	str	r0, [sp, #16]
 8010d8e:	463b      	mov	r3, r7
 8010d90:	4602      	mov	r2, r0
 8010d92:	2b65      	cmp	r3, #101	; 0x65
 8010d94:	d001      	beq.n	8010d9a <_strtod_l+0x172>
 8010d96:	2b45      	cmp	r3, #69	; 0x45
 8010d98:	d114      	bne.n	8010dc4 <_strtod_l+0x19c>
 8010d9a:	b924      	cbnz	r4, 8010da6 <_strtod_l+0x17e>
 8010d9c:	b910      	cbnz	r0, 8010da4 <_strtod_l+0x17c>
 8010d9e:	9b06      	ldr	r3, [sp, #24]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d09e      	beq.n	8010ce2 <_strtod_l+0xba>
 8010da4:	2400      	movs	r4, #0
 8010da6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010da8:	1c73      	adds	r3, r6, #1
 8010daa:	931b      	str	r3, [sp, #108]	; 0x6c
 8010dac:	7873      	ldrb	r3, [r6, #1]
 8010dae:	2b2b      	cmp	r3, #43	; 0x2b
 8010db0:	d078      	beq.n	8010ea4 <_strtod_l+0x27c>
 8010db2:	2b2d      	cmp	r3, #45	; 0x2d
 8010db4:	d070      	beq.n	8010e98 <_strtod_l+0x270>
 8010db6:	f04f 0c00 	mov.w	ip, #0
 8010dba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8010dbe:	2f09      	cmp	r7, #9
 8010dc0:	d97c      	bls.n	8010ebc <_strtod_l+0x294>
 8010dc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8010dc4:	f04f 0e00 	mov.w	lr, #0
 8010dc8:	e09a      	b.n	8010f00 <_strtod_l+0x2d8>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	e7c7      	b.n	8010d5e <_strtod_l+0x136>
 8010dce:	9905      	ldr	r1, [sp, #20]
 8010dd0:	2908      	cmp	r1, #8
 8010dd2:	bfdd      	ittte	le
 8010dd4:	9907      	ldrle	r1, [sp, #28]
 8010dd6:	fb02 3301 	mlale	r3, r2, r1, r3
 8010dda:	9307      	strle	r3, [sp, #28]
 8010ddc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8010de0:	9b05      	ldr	r3, [sp, #20]
 8010de2:	3001      	adds	r0, #1
 8010de4:	3301      	adds	r3, #1
 8010de6:	9305      	str	r3, [sp, #20]
 8010de8:	901b      	str	r0, [sp, #108]	; 0x6c
 8010dea:	e7bf      	b.n	8010d6c <_strtod_l+0x144>
 8010dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010dee:	191a      	adds	r2, r3, r4
 8010df0:	921b      	str	r2, [sp, #108]	; 0x6c
 8010df2:	9a05      	ldr	r2, [sp, #20]
 8010df4:	5d1b      	ldrb	r3, [r3, r4]
 8010df6:	2a00      	cmp	r2, #0
 8010df8:	d037      	beq.n	8010e6a <_strtod_l+0x242>
 8010dfa:	9c05      	ldr	r4, [sp, #20]
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010e02:	2909      	cmp	r1, #9
 8010e04:	d913      	bls.n	8010e2e <_strtod_l+0x206>
 8010e06:	2101      	movs	r1, #1
 8010e08:	9104      	str	r1, [sp, #16]
 8010e0a:	e7c2      	b.n	8010d92 <_strtod_l+0x16a>
 8010e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e0e:	1c5a      	adds	r2, r3, #1
 8010e10:	921b      	str	r2, [sp, #108]	; 0x6c
 8010e12:	785b      	ldrb	r3, [r3, #1]
 8010e14:	3001      	adds	r0, #1
 8010e16:	2b30      	cmp	r3, #48	; 0x30
 8010e18:	d0f8      	beq.n	8010e0c <_strtod_l+0x1e4>
 8010e1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010e1e:	2a08      	cmp	r2, #8
 8010e20:	f200 84e4 	bhi.w	80117ec <_strtod_l+0xbc4>
 8010e24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010e26:	9208      	str	r2, [sp, #32]
 8010e28:	4602      	mov	r2, r0
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8010e32:	f100 0101 	add.w	r1, r0, #1
 8010e36:	d012      	beq.n	8010e5e <_strtod_l+0x236>
 8010e38:	440a      	add	r2, r1
 8010e3a:	eb00 0c04 	add.w	ip, r0, r4
 8010e3e:	4621      	mov	r1, r4
 8010e40:	270a      	movs	r7, #10
 8010e42:	458c      	cmp	ip, r1
 8010e44:	d113      	bne.n	8010e6e <_strtod_l+0x246>
 8010e46:	1821      	adds	r1, r4, r0
 8010e48:	2908      	cmp	r1, #8
 8010e4a:	f104 0401 	add.w	r4, r4, #1
 8010e4e:	4404      	add	r4, r0
 8010e50:	dc19      	bgt.n	8010e86 <_strtod_l+0x25e>
 8010e52:	9b07      	ldr	r3, [sp, #28]
 8010e54:	210a      	movs	r1, #10
 8010e56:	fb01 e303 	mla	r3, r1, r3, lr
 8010e5a:	9307      	str	r3, [sp, #28]
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e60:	1c58      	adds	r0, r3, #1
 8010e62:	901b      	str	r0, [sp, #108]	; 0x6c
 8010e64:	785b      	ldrb	r3, [r3, #1]
 8010e66:	4608      	mov	r0, r1
 8010e68:	e7c9      	b.n	8010dfe <_strtod_l+0x1d6>
 8010e6a:	9805      	ldr	r0, [sp, #20]
 8010e6c:	e7d3      	b.n	8010e16 <_strtod_l+0x1ee>
 8010e6e:	2908      	cmp	r1, #8
 8010e70:	f101 0101 	add.w	r1, r1, #1
 8010e74:	dc03      	bgt.n	8010e7e <_strtod_l+0x256>
 8010e76:	9b07      	ldr	r3, [sp, #28]
 8010e78:	437b      	muls	r3, r7
 8010e7a:	9307      	str	r3, [sp, #28]
 8010e7c:	e7e1      	b.n	8010e42 <_strtod_l+0x21a>
 8010e7e:	2910      	cmp	r1, #16
 8010e80:	bfd8      	it	le
 8010e82:	437d      	mulle	r5, r7
 8010e84:	e7dd      	b.n	8010e42 <_strtod_l+0x21a>
 8010e86:	2c10      	cmp	r4, #16
 8010e88:	bfdc      	itt	le
 8010e8a:	210a      	movle	r1, #10
 8010e8c:	fb01 e505 	mlale	r5, r1, r5, lr
 8010e90:	e7e4      	b.n	8010e5c <_strtod_l+0x234>
 8010e92:	2301      	movs	r3, #1
 8010e94:	9304      	str	r3, [sp, #16]
 8010e96:	e781      	b.n	8010d9c <_strtod_l+0x174>
 8010e98:	f04f 0c01 	mov.w	ip, #1
 8010e9c:	1cb3      	adds	r3, r6, #2
 8010e9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010ea0:	78b3      	ldrb	r3, [r6, #2]
 8010ea2:	e78a      	b.n	8010dba <_strtod_l+0x192>
 8010ea4:	f04f 0c00 	mov.w	ip, #0
 8010ea8:	e7f8      	b.n	8010e9c <_strtod_l+0x274>
 8010eaa:	bf00      	nop
 8010eac:	08015144 	.word	0x08015144
 8010eb0:	7ff00000 	.word	0x7ff00000
 8010eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010eb6:	1c5f      	adds	r7, r3, #1
 8010eb8:	971b      	str	r7, [sp, #108]	; 0x6c
 8010eba:	785b      	ldrb	r3, [r3, #1]
 8010ebc:	2b30      	cmp	r3, #48	; 0x30
 8010ebe:	d0f9      	beq.n	8010eb4 <_strtod_l+0x28c>
 8010ec0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8010ec4:	2f08      	cmp	r7, #8
 8010ec6:	f63f af7d 	bhi.w	8010dc4 <_strtod_l+0x19c>
 8010eca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8010ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ed4:	1c5f      	adds	r7, r3, #1
 8010ed6:	971b      	str	r7, [sp, #108]	; 0x6c
 8010ed8:	785b      	ldrb	r3, [r3, #1]
 8010eda:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8010ede:	f1b8 0f09 	cmp.w	r8, #9
 8010ee2:	d937      	bls.n	8010f54 <_strtod_l+0x32c>
 8010ee4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010ee6:	1a7f      	subs	r7, r7, r1
 8010ee8:	2f08      	cmp	r7, #8
 8010eea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010eee:	dc37      	bgt.n	8010f60 <_strtod_l+0x338>
 8010ef0:	45be      	cmp	lr, r7
 8010ef2:	bfa8      	it	ge
 8010ef4:	46be      	movge	lr, r7
 8010ef6:	f1bc 0f00 	cmp.w	ip, #0
 8010efa:	d001      	beq.n	8010f00 <_strtod_l+0x2d8>
 8010efc:	f1ce 0e00 	rsb	lr, lr, #0
 8010f00:	2c00      	cmp	r4, #0
 8010f02:	d151      	bne.n	8010fa8 <_strtod_l+0x380>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	f47f aece 	bne.w	8010ca6 <_strtod_l+0x7e>
 8010f0a:	9a06      	ldr	r2, [sp, #24]
 8010f0c:	2a00      	cmp	r2, #0
 8010f0e:	f47f aeca 	bne.w	8010ca6 <_strtod_l+0x7e>
 8010f12:	9a04      	ldr	r2, [sp, #16]
 8010f14:	2a00      	cmp	r2, #0
 8010f16:	f47f aee4 	bne.w	8010ce2 <_strtod_l+0xba>
 8010f1a:	2b4e      	cmp	r3, #78	; 0x4e
 8010f1c:	d027      	beq.n	8010f6e <_strtod_l+0x346>
 8010f1e:	dc21      	bgt.n	8010f64 <_strtod_l+0x33c>
 8010f20:	2b49      	cmp	r3, #73	; 0x49
 8010f22:	f47f aede 	bne.w	8010ce2 <_strtod_l+0xba>
 8010f26:	49a0      	ldr	r1, [pc, #640]	; (80111a8 <_strtod_l+0x580>)
 8010f28:	a81b      	add	r0, sp, #108	; 0x6c
 8010f2a:	f002 f851 	bl	8012fd0 <__match>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	f43f aed7 	beq.w	8010ce2 <_strtod_l+0xba>
 8010f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f36:	499d      	ldr	r1, [pc, #628]	; (80111ac <_strtod_l+0x584>)
 8010f38:	3b01      	subs	r3, #1
 8010f3a:	a81b      	add	r0, sp, #108	; 0x6c
 8010f3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8010f3e:	f002 f847 	bl	8012fd0 <__match>
 8010f42:	b910      	cbnz	r0, 8010f4a <_strtod_l+0x322>
 8010f44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f46:	3301      	adds	r3, #1
 8010f48:	931b      	str	r3, [sp, #108]	; 0x6c
 8010f4a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80111c0 <_strtod_l+0x598>
 8010f4e:	f04f 0a00 	mov.w	sl, #0
 8010f52:	e6a8      	b.n	8010ca6 <_strtod_l+0x7e>
 8010f54:	210a      	movs	r1, #10
 8010f56:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010f5a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010f5e:	e7b8      	b.n	8010ed2 <_strtod_l+0x2aa>
 8010f60:	46be      	mov	lr, r7
 8010f62:	e7c8      	b.n	8010ef6 <_strtod_l+0x2ce>
 8010f64:	2b69      	cmp	r3, #105	; 0x69
 8010f66:	d0de      	beq.n	8010f26 <_strtod_l+0x2fe>
 8010f68:	2b6e      	cmp	r3, #110	; 0x6e
 8010f6a:	f47f aeba 	bne.w	8010ce2 <_strtod_l+0xba>
 8010f6e:	4990      	ldr	r1, [pc, #576]	; (80111b0 <_strtod_l+0x588>)
 8010f70:	a81b      	add	r0, sp, #108	; 0x6c
 8010f72:	f002 f82d 	bl	8012fd0 <__match>
 8010f76:	2800      	cmp	r0, #0
 8010f78:	f43f aeb3 	beq.w	8010ce2 <_strtod_l+0xba>
 8010f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	2b28      	cmp	r3, #40	; 0x28
 8010f82:	d10e      	bne.n	8010fa2 <_strtod_l+0x37a>
 8010f84:	aa1e      	add	r2, sp, #120	; 0x78
 8010f86:	498b      	ldr	r1, [pc, #556]	; (80111b4 <_strtod_l+0x58c>)
 8010f88:	a81b      	add	r0, sp, #108	; 0x6c
 8010f8a:	f002 f835 	bl	8012ff8 <__hexnan>
 8010f8e:	2805      	cmp	r0, #5
 8010f90:	d107      	bne.n	8010fa2 <_strtod_l+0x37a>
 8010f92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010f94:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8010f98:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010f9c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010fa0:	e681      	b.n	8010ca6 <_strtod_l+0x7e>
 8010fa2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80111c8 <_strtod_l+0x5a0>
 8010fa6:	e7d2      	b.n	8010f4e <_strtod_l+0x326>
 8010fa8:	ebae 0302 	sub.w	r3, lr, r2
 8010fac:	9306      	str	r3, [sp, #24]
 8010fae:	9b05      	ldr	r3, [sp, #20]
 8010fb0:	9807      	ldr	r0, [sp, #28]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	bf08      	it	eq
 8010fb6:	4623      	moveq	r3, r4
 8010fb8:	2c10      	cmp	r4, #16
 8010fba:	9305      	str	r3, [sp, #20]
 8010fbc:	46a0      	mov	r8, r4
 8010fbe:	bfa8      	it	ge
 8010fc0:	f04f 0810 	movge.w	r8, #16
 8010fc4:	f7ef fab6 	bl	8000534 <__aeabi_ui2d>
 8010fc8:	2c09      	cmp	r4, #9
 8010fca:	4682      	mov	sl, r0
 8010fcc:	468b      	mov	fp, r1
 8010fce:	dc13      	bgt.n	8010ff8 <_strtod_l+0x3d0>
 8010fd0:	9b06      	ldr	r3, [sp, #24]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	f43f ae67 	beq.w	8010ca6 <_strtod_l+0x7e>
 8010fd8:	9b06      	ldr	r3, [sp, #24]
 8010fda:	dd7a      	ble.n	80110d2 <_strtod_l+0x4aa>
 8010fdc:	2b16      	cmp	r3, #22
 8010fde:	dc61      	bgt.n	80110a4 <_strtod_l+0x47c>
 8010fe0:	4a75      	ldr	r2, [pc, #468]	; (80111b8 <_strtod_l+0x590>)
 8010fe2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8010fe6:	e9de 0100 	ldrd	r0, r1, [lr]
 8010fea:	4652      	mov	r2, sl
 8010fec:	465b      	mov	r3, fp
 8010fee:	f7ef fb1b 	bl	8000628 <__aeabi_dmul>
 8010ff2:	4682      	mov	sl, r0
 8010ff4:	468b      	mov	fp, r1
 8010ff6:	e656      	b.n	8010ca6 <_strtod_l+0x7e>
 8010ff8:	4b6f      	ldr	r3, [pc, #444]	; (80111b8 <_strtod_l+0x590>)
 8010ffa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010ffe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011002:	f7ef fb11 	bl	8000628 <__aeabi_dmul>
 8011006:	4606      	mov	r6, r0
 8011008:	4628      	mov	r0, r5
 801100a:	460f      	mov	r7, r1
 801100c:	f7ef fa92 	bl	8000534 <__aeabi_ui2d>
 8011010:	4602      	mov	r2, r0
 8011012:	460b      	mov	r3, r1
 8011014:	4630      	mov	r0, r6
 8011016:	4639      	mov	r1, r7
 8011018:	f7ef f950 	bl	80002bc <__adddf3>
 801101c:	2c0f      	cmp	r4, #15
 801101e:	4682      	mov	sl, r0
 8011020:	468b      	mov	fp, r1
 8011022:	ddd5      	ble.n	8010fd0 <_strtod_l+0x3a8>
 8011024:	9b06      	ldr	r3, [sp, #24]
 8011026:	eba4 0808 	sub.w	r8, r4, r8
 801102a:	4498      	add	r8, r3
 801102c:	f1b8 0f00 	cmp.w	r8, #0
 8011030:	f340 8096 	ble.w	8011160 <_strtod_l+0x538>
 8011034:	f018 030f 	ands.w	r3, r8, #15
 8011038:	d00a      	beq.n	8011050 <_strtod_l+0x428>
 801103a:	495f      	ldr	r1, [pc, #380]	; (80111b8 <_strtod_l+0x590>)
 801103c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011040:	4652      	mov	r2, sl
 8011042:	465b      	mov	r3, fp
 8011044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011048:	f7ef faee 	bl	8000628 <__aeabi_dmul>
 801104c:	4682      	mov	sl, r0
 801104e:	468b      	mov	fp, r1
 8011050:	f038 080f 	bics.w	r8, r8, #15
 8011054:	d073      	beq.n	801113e <_strtod_l+0x516>
 8011056:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801105a:	dd47      	ble.n	80110ec <_strtod_l+0x4c4>
 801105c:	2400      	movs	r4, #0
 801105e:	46a0      	mov	r8, r4
 8011060:	9407      	str	r4, [sp, #28]
 8011062:	9405      	str	r4, [sp, #20]
 8011064:	2322      	movs	r3, #34	; 0x22
 8011066:	f8df b158 	ldr.w	fp, [pc, #344]	; 80111c0 <_strtod_l+0x598>
 801106a:	f8c9 3000 	str.w	r3, [r9]
 801106e:	f04f 0a00 	mov.w	sl, #0
 8011072:	9b07      	ldr	r3, [sp, #28]
 8011074:	2b00      	cmp	r3, #0
 8011076:	f43f ae16 	beq.w	8010ca6 <_strtod_l+0x7e>
 801107a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801107c:	4648      	mov	r0, r9
 801107e:	f002 f93c 	bl	80132fa <_Bfree>
 8011082:	9905      	ldr	r1, [sp, #20]
 8011084:	4648      	mov	r0, r9
 8011086:	f002 f938 	bl	80132fa <_Bfree>
 801108a:	4641      	mov	r1, r8
 801108c:	4648      	mov	r0, r9
 801108e:	f002 f934 	bl	80132fa <_Bfree>
 8011092:	9907      	ldr	r1, [sp, #28]
 8011094:	4648      	mov	r0, r9
 8011096:	f002 f930 	bl	80132fa <_Bfree>
 801109a:	4621      	mov	r1, r4
 801109c:	4648      	mov	r0, r9
 801109e:	f002 f92c 	bl	80132fa <_Bfree>
 80110a2:	e600      	b.n	8010ca6 <_strtod_l+0x7e>
 80110a4:	9a06      	ldr	r2, [sp, #24]
 80110a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80110aa:	4293      	cmp	r3, r2
 80110ac:	dbba      	blt.n	8011024 <_strtod_l+0x3fc>
 80110ae:	4d42      	ldr	r5, [pc, #264]	; (80111b8 <_strtod_l+0x590>)
 80110b0:	f1c4 040f 	rsb	r4, r4, #15
 80110b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80110b8:	4652      	mov	r2, sl
 80110ba:	465b      	mov	r3, fp
 80110bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110c0:	f7ef fab2 	bl	8000628 <__aeabi_dmul>
 80110c4:	9b06      	ldr	r3, [sp, #24]
 80110c6:	1b1c      	subs	r4, r3, r4
 80110c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80110cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80110d0:	e78d      	b.n	8010fee <_strtod_l+0x3c6>
 80110d2:	f113 0f16 	cmn.w	r3, #22
 80110d6:	dba5      	blt.n	8011024 <_strtod_l+0x3fc>
 80110d8:	4a37      	ldr	r2, [pc, #220]	; (80111b8 <_strtod_l+0x590>)
 80110da:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80110de:	e9d2 2300 	ldrd	r2, r3, [r2]
 80110e2:	4650      	mov	r0, sl
 80110e4:	4659      	mov	r1, fp
 80110e6:	f7ef fbc9 	bl	800087c <__aeabi_ddiv>
 80110ea:	e782      	b.n	8010ff2 <_strtod_l+0x3ca>
 80110ec:	2300      	movs	r3, #0
 80110ee:	4e33      	ldr	r6, [pc, #204]	; (80111bc <_strtod_l+0x594>)
 80110f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80110f4:	4650      	mov	r0, sl
 80110f6:	4659      	mov	r1, fp
 80110f8:	461d      	mov	r5, r3
 80110fa:	f1b8 0f01 	cmp.w	r8, #1
 80110fe:	dc21      	bgt.n	8011144 <_strtod_l+0x51c>
 8011100:	b10b      	cbz	r3, 8011106 <_strtod_l+0x4de>
 8011102:	4682      	mov	sl, r0
 8011104:	468b      	mov	fp, r1
 8011106:	4b2d      	ldr	r3, [pc, #180]	; (80111bc <_strtod_l+0x594>)
 8011108:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801110c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011110:	4652      	mov	r2, sl
 8011112:	465b      	mov	r3, fp
 8011114:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011118:	f7ef fa86 	bl	8000628 <__aeabi_dmul>
 801111c:	4b28      	ldr	r3, [pc, #160]	; (80111c0 <_strtod_l+0x598>)
 801111e:	460a      	mov	r2, r1
 8011120:	400b      	ands	r3, r1
 8011122:	4928      	ldr	r1, [pc, #160]	; (80111c4 <_strtod_l+0x59c>)
 8011124:	428b      	cmp	r3, r1
 8011126:	4682      	mov	sl, r0
 8011128:	d898      	bhi.n	801105c <_strtod_l+0x434>
 801112a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801112e:	428b      	cmp	r3, r1
 8011130:	bf86      	itte	hi
 8011132:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80111cc <_strtod_l+0x5a4>
 8011136:	f04f 3aff 	movhi.w	sl, #4294967295
 801113a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801113e:	2300      	movs	r3, #0
 8011140:	9304      	str	r3, [sp, #16]
 8011142:	e077      	b.n	8011234 <_strtod_l+0x60c>
 8011144:	f018 0f01 	tst.w	r8, #1
 8011148:	d006      	beq.n	8011158 <_strtod_l+0x530>
 801114a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011152:	f7ef fa69 	bl	8000628 <__aeabi_dmul>
 8011156:	2301      	movs	r3, #1
 8011158:	3501      	adds	r5, #1
 801115a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801115e:	e7cc      	b.n	80110fa <_strtod_l+0x4d2>
 8011160:	d0ed      	beq.n	801113e <_strtod_l+0x516>
 8011162:	f1c8 0800 	rsb	r8, r8, #0
 8011166:	f018 020f 	ands.w	r2, r8, #15
 801116a:	d00a      	beq.n	8011182 <_strtod_l+0x55a>
 801116c:	4b12      	ldr	r3, [pc, #72]	; (80111b8 <_strtod_l+0x590>)
 801116e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011172:	4650      	mov	r0, sl
 8011174:	4659      	mov	r1, fp
 8011176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117a:	f7ef fb7f 	bl	800087c <__aeabi_ddiv>
 801117e:	4682      	mov	sl, r0
 8011180:	468b      	mov	fp, r1
 8011182:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011186:	d0da      	beq.n	801113e <_strtod_l+0x516>
 8011188:	f1b8 0f1f 	cmp.w	r8, #31
 801118c:	dd20      	ble.n	80111d0 <_strtod_l+0x5a8>
 801118e:	2400      	movs	r4, #0
 8011190:	46a0      	mov	r8, r4
 8011192:	9407      	str	r4, [sp, #28]
 8011194:	9405      	str	r4, [sp, #20]
 8011196:	2322      	movs	r3, #34	; 0x22
 8011198:	f04f 0a00 	mov.w	sl, #0
 801119c:	f04f 0b00 	mov.w	fp, #0
 80111a0:	f8c9 3000 	str.w	r3, [r9]
 80111a4:	e765      	b.n	8011072 <_strtod_l+0x44a>
 80111a6:	bf00      	nop
 80111a8:	08015111 	.word	0x08015111
 80111ac:	0801519b 	.word	0x0801519b
 80111b0:	08015119 	.word	0x08015119
 80111b4:	08015158 	.word	0x08015158
 80111b8:	08015240 	.word	0x08015240
 80111bc:	08015218 	.word	0x08015218
 80111c0:	7ff00000 	.word	0x7ff00000
 80111c4:	7ca00000 	.word	0x7ca00000
 80111c8:	fff80000 	.word	0xfff80000
 80111cc:	7fefffff 	.word	0x7fefffff
 80111d0:	f018 0310 	ands.w	r3, r8, #16
 80111d4:	bf18      	it	ne
 80111d6:	236a      	movne	r3, #106	; 0x6a
 80111d8:	4da0      	ldr	r5, [pc, #640]	; (801145c <_strtod_l+0x834>)
 80111da:	9304      	str	r3, [sp, #16]
 80111dc:	4650      	mov	r0, sl
 80111de:	4659      	mov	r1, fp
 80111e0:	2300      	movs	r3, #0
 80111e2:	f1b8 0f00 	cmp.w	r8, #0
 80111e6:	f300 810a 	bgt.w	80113fe <_strtod_l+0x7d6>
 80111ea:	b10b      	cbz	r3, 80111f0 <_strtod_l+0x5c8>
 80111ec:	4682      	mov	sl, r0
 80111ee:	468b      	mov	fp, r1
 80111f0:	9b04      	ldr	r3, [sp, #16]
 80111f2:	b1bb      	cbz	r3, 8011224 <_strtod_l+0x5fc>
 80111f4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80111f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	4659      	mov	r1, fp
 8011200:	dd10      	ble.n	8011224 <_strtod_l+0x5fc>
 8011202:	2b1f      	cmp	r3, #31
 8011204:	f340 8107 	ble.w	8011416 <_strtod_l+0x7ee>
 8011208:	2b34      	cmp	r3, #52	; 0x34
 801120a:	bfde      	ittt	le
 801120c:	3b20      	suble	r3, #32
 801120e:	f04f 32ff 	movle.w	r2, #4294967295
 8011212:	fa02 f303 	lslle.w	r3, r2, r3
 8011216:	f04f 0a00 	mov.w	sl, #0
 801121a:	bfcc      	ite	gt
 801121c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011220:	ea03 0b01 	andle.w	fp, r3, r1
 8011224:	2200      	movs	r2, #0
 8011226:	2300      	movs	r3, #0
 8011228:	4650      	mov	r0, sl
 801122a:	4659      	mov	r1, fp
 801122c:	f7ef fc64 	bl	8000af8 <__aeabi_dcmpeq>
 8011230:	2800      	cmp	r0, #0
 8011232:	d1ac      	bne.n	801118e <_strtod_l+0x566>
 8011234:	9b07      	ldr	r3, [sp, #28]
 8011236:	9300      	str	r3, [sp, #0]
 8011238:	9a05      	ldr	r2, [sp, #20]
 801123a:	9908      	ldr	r1, [sp, #32]
 801123c:	4623      	mov	r3, r4
 801123e:	4648      	mov	r0, r9
 8011240:	f002 f8ad 	bl	801339e <__s2b>
 8011244:	9007      	str	r0, [sp, #28]
 8011246:	2800      	cmp	r0, #0
 8011248:	f43f af08 	beq.w	801105c <_strtod_l+0x434>
 801124c:	9a06      	ldr	r2, [sp, #24]
 801124e:	9b06      	ldr	r3, [sp, #24]
 8011250:	2a00      	cmp	r2, #0
 8011252:	f1c3 0300 	rsb	r3, r3, #0
 8011256:	bfa8      	it	ge
 8011258:	2300      	movge	r3, #0
 801125a:	930e      	str	r3, [sp, #56]	; 0x38
 801125c:	2400      	movs	r4, #0
 801125e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011262:	9316      	str	r3, [sp, #88]	; 0x58
 8011264:	46a0      	mov	r8, r4
 8011266:	9b07      	ldr	r3, [sp, #28]
 8011268:	4648      	mov	r0, r9
 801126a:	6859      	ldr	r1, [r3, #4]
 801126c:	f002 f811 	bl	8013292 <_Balloc>
 8011270:	9005      	str	r0, [sp, #20]
 8011272:	2800      	cmp	r0, #0
 8011274:	f43f aef6 	beq.w	8011064 <_strtod_l+0x43c>
 8011278:	9b07      	ldr	r3, [sp, #28]
 801127a:	691a      	ldr	r2, [r3, #16]
 801127c:	3202      	adds	r2, #2
 801127e:	f103 010c 	add.w	r1, r3, #12
 8011282:	0092      	lsls	r2, r2, #2
 8011284:	300c      	adds	r0, #12
 8011286:	f001 fff9 	bl	801327c <memcpy>
 801128a:	aa1e      	add	r2, sp, #120	; 0x78
 801128c:	a91d      	add	r1, sp, #116	; 0x74
 801128e:	ec4b ab10 	vmov	d0, sl, fp
 8011292:	4648      	mov	r0, r9
 8011294:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011298:	f002 fb3c 	bl	8013914 <__d2b>
 801129c:	901c      	str	r0, [sp, #112]	; 0x70
 801129e:	2800      	cmp	r0, #0
 80112a0:	f43f aee0 	beq.w	8011064 <_strtod_l+0x43c>
 80112a4:	2101      	movs	r1, #1
 80112a6:	4648      	mov	r0, r9
 80112a8:	f002 f905 	bl	80134b6 <__i2b>
 80112ac:	4680      	mov	r8, r0
 80112ae:	2800      	cmp	r0, #0
 80112b0:	f43f aed8 	beq.w	8011064 <_strtod_l+0x43c>
 80112b4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80112b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80112b8:	2e00      	cmp	r6, #0
 80112ba:	bfab      	itete	ge
 80112bc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80112be:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80112c0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80112c2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80112c4:	bfac      	ite	ge
 80112c6:	18f7      	addge	r7, r6, r3
 80112c8:	1b9d      	sublt	r5, r3, r6
 80112ca:	9b04      	ldr	r3, [sp, #16]
 80112cc:	1af6      	subs	r6, r6, r3
 80112ce:	4416      	add	r6, r2
 80112d0:	4b63      	ldr	r3, [pc, #396]	; (8011460 <_strtod_l+0x838>)
 80112d2:	3e01      	subs	r6, #1
 80112d4:	429e      	cmp	r6, r3
 80112d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80112da:	f280 80af 	bge.w	801143c <_strtod_l+0x814>
 80112de:	1b9b      	subs	r3, r3, r6
 80112e0:	2b1f      	cmp	r3, #31
 80112e2:	eba2 0203 	sub.w	r2, r2, r3
 80112e6:	f04f 0101 	mov.w	r1, #1
 80112ea:	f300 809b 	bgt.w	8011424 <_strtod_l+0x7fc>
 80112ee:	fa01 f303 	lsl.w	r3, r1, r3
 80112f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80112f4:	2300      	movs	r3, #0
 80112f6:	930a      	str	r3, [sp, #40]	; 0x28
 80112f8:	18be      	adds	r6, r7, r2
 80112fa:	9b04      	ldr	r3, [sp, #16]
 80112fc:	42b7      	cmp	r7, r6
 80112fe:	4415      	add	r5, r2
 8011300:	441d      	add	r5, r3
 8011302:	463b      	mov	r3, r7
 8011304:	bfa8      	it	ge
 8011306:	4633      	movge	r3, r6
 8011308:	42ab      	cmp	r3, r5
 801130a:	bfa8      	it	ge
 801130c:	462b      	movge	r3, r5
 801130e:	2b00      	cmp	r3, #0
 8011310:	bfc2      	ittt	gt
 8011312:	1af6      	subgt	r6, r6, r3
 8011314:	1aed      	subgt	r5, r5, r3
 8011316:	1aff      	subgt	r7, r7, r3
 8011318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801131a:	b1bb      	cbz	r3, 801134c <_strtod_l+0x724>
 801131c:	4641      	mov	r1, r8
 801131e:	461a      	mov	r2, r3
 8011320:	4648      	mov	r0, r9
 8011322:	f002 f967 	bl	80135f4 <__pow5mult>
 8011326:	4680      	mov	r8, r0
 8011328:	2800      	cmp	r0, #0
 801132a:	f43f ae9b 	beq.w	8011064 <_strtod_l+0x43c>
 801132e:	4601      	mov	r1, r0
 8011330:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011332:	4648      	mov	r0, r9
 8011334:	f002 f8c8 	bl	80134c8 <__multiply>
 8011338:	900c      	str	r0, [sp, #48]	; 0x30
 801133a:	2800      	cmp	r0, #0
 801133c:	f43f ae92 	beq.w	8011064 <_strtod_l+0x43c>
 8011340:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011342:	4648      	mov	r0, r9
 8011344:	f001 ffd9 	bl	80132fa <_Bfree>
 8011348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801134a:	931c      	str	r3, [sp, #112]	; 0x70
 801134c:	2e00      	cmp	r6, #0
 801134e:	dc7a      	bgt.n	8011446 <_strtod_l+0x81e>
 8011350:	9b06      	ldr	r3, [sp, #24]
 8011352:	2b00      	cmp	r3, #0
 8011354:	dd08      	ble.n	8011368 <_strtod_l+0x740>
 8011356:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011358:	9905      	ldr	r1, [sp, #20]
 801135a:	4648      	mov	r0, r9
 801135c:	f002 f94a 	bl	80135f4 <__pow5mult>
 8011360:	9005      	str	r0, [sp, #20]
 8011362:	2800      	cmp	r0, #0
 8011364:	f43f ae7e 	beq.w	8011064 <_strtod_l+0x43c>
 8011368:	2d00      	cmp	r5, #0
 801136a:	dd08      	ble.n	801137e <_strtod_l+0x756>
 801136c:	462a      	mov	r2, r5
 801136e:	9905      	ldr	r1, [sp, #20]
 8011370:	4648      	mov	r0, r9
 8011372:	f002 f98d 	bl	8013690 <__lshift>
 8011376:	9005      	str	r0, [sp, #20]
 8011378:	2800      	cmp	r0, #0
 801137a:	f43f ae73 	beq.w	8011064 <_strtod_l+0x43c>
 801137e:	2f00      	cmp	r7, #0
 8011380:	dd08      	ble.n	8011394 <_strtod_l+0x76c>
 8011382:	4641      	mov	r1, r8
 8011384:	463a      	mov	r2, r7
 8011386:	4648      	mov	r0, r9
 8011388:	f002 f982 	bl	8013690 <__lshift>
 801138c:	4680      	mov	r8, r0
 801138e:	2800      	cmp	r0, #0
 8011390:	f43f ae68 	beq.w	8011064 <_strtod_l+0x43c>
 8011394:	9a05      	ldr	r2, [sp, #20]
 8011396:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011398:	4648      	mov	r0, r9
 801139a:	f002 f9e7 	bl	801376c <__mdiff>
 801139e:	4604      	mov	r4, r0
 80113a0:	2800      	cmp	r0, #0
 80113a2:	f43f ae5f 	beq.w	8011064 <_strtod_l+0x43c>
 80113a6:	68c3      	ldr	r3, [r0, #12]
 80113a8:	930c      	str	r3, [sp, #48]	; 0x30
 80113aa:	2300      	movs	r3, #0
 80113ac:	60c3      	str	r3, [r0, #12]
 80113ae:	4641      	mov	r1, r8
 80113b0:	f002 f9c2 	bl	8013738 <__mcmp>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	da55      	bge.n	8011464 <_strtod_l+0x83c>
 80113b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113ba:	b9e3      	cbnz	r3, 80113f6 <_strtod_l+0x7ce>
 80113bc:	f1ba 0f00 	cmp.w	sl, #0
 80113c0:	d119      	bne.n	80113f6 <_strtod_l+0x7ce>
 80113c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113c6:	b9b3      	cbnz	r3, 80113f6 <_strtod_l+0x7ce>
 80113c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113cc:	0d1b      	lsrs	r3, r3, #20
 80113ce:	051b      	lsls	r3, r3, #20
 80113d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80113d4:	d90f      	bls.n	80113f6 <_strtod_l+0x7ce>
 80113d6:	6963      	ldr	r3, [r4, #20]
 80113d8:	b913      	cbnz	r3, 80113e0 <_strtod_l+0x7b8>
 80113da:	6923      	ldr	r3, [r4, #16]
 80113dc:	2b01      	cmp	r3, #1
 80113de:	dd0a      	ble.n	80113f6 <_strtod_l+0x7ce>
 80113e0:	4621      	mov	r1, r4
 80113e2:	2201      	movs	r2, #1
 80113e4:	4648      	mov	r0, r9
 80113e6:	f002 f953 	bl	8013690 <__lshift>
 80113ea:	4641      	mov	r1, r8
 80113ec:	4604      	mov	r4, r0
 80113ee:	f002 f9a3 	bl	8013738 <__mcmp>
 80113f2:	2800      	cmp	r0, #0
 80113f4:	dc67      	bgt.n	80114c6 <_strtod_l+0x89e>
 80113f6:	9b04      	ldr	r3, [sp, #16]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d171      	bne.n	80114e0 <_strtod_l+0x8b8>
 80113fc:	e63d      	b.n	801107a <_strtod_l+0x452>
 80113fe:	f018 0f01 	tst.w	r8, #1
 8011402:	d004      	beq.n	801140e <_strtod_l+0x7e6>
 8011404:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011408:	f7ef f90e 	bl	8000628 <__aeabi_dmul>
 801140c:	2301      	movs	r3, #1
 801140e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011412:	3508      	adds	r5, #8
 8011414:	e6e5      	b.n	80111e2 <_strtod_l+0x5ba>
 8011416:	f04f 32ff 	mov.w	r2, #4294967295
 801141a:	fa02 f303 	lsl.w	r3, r2, r3
 801141e:	ea03 0a0a 	and.w	sl, r3, sl
 8011422:	e6ff      	b.n	8011224 <_strtod_l+0x5fc>
 8011424:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011428:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801142c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011430:	36e2      	adds	r6, #226	; 0xe2
 8011432:	fa01 f306 	lsl.w	r3, r1, r6
 8011436:	930a      	str	r3, [sp, #40]	; 0x28
 8011438:	910f      	str	r1, [sp, #60]	; 0x3c
 801143a:	e75d      	b.n	80112f8 <_strtod_l+0x6d0>
 801143c:	2300      	movs	r3, #0
 801143e:	930a      	str	r3, [sp, #40]	; 0x28
 8011440:	2301      	movs	r3, #1
 8011442:	930f      	str	r3, [sp, #60]	; 0x3c
 8011444:	e758      	b.n	80112f8 <_strtod_l+0x6d0>
 8011446:	4632      	mov	r2, r6
 8011448:	991c      	ldr	r1, [sp, #112]	; 0x70
 801144a:	4648      	mov	r0, r9
 801144c:	f002 f920 	bl	8013690 <__lshift>
 8011450:	901c      	str	r0, [sp, #112]	; 0x70
 8011452:	2800      	cmp	r0, #0
 8011454:	f47f af7c 	bne.w	8011350 <_strtod_l+0x728>
 8011458:	e604      	b.n	8011064 <_strtod_l+0x43c>
 801145a:	bf00      	nop
 801145c:	08015170 	.word	0x08015170
 8011460:	fffffc02 	.word	0xfffffc02
 8011464:	465d      	mov	r5, fp
 8011466:	f040 8086 	bne.w	8011576 <_strtod_l+0x94e>
 801146a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801146c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011470:	b32a      	cbz	r2, 80114be <_strtod_l+0x896>
 8011472:	4aaf      	ldr	r2, [pc, #700]	; (8011730 <_strtod_l+0xb08>)
 8011474:	4293      	cmp	r3, r2
 8011476:	d153      	bne.n	8011520 <_strtod_l+0x8f8>
 8011478:	9b04      	ldr	r3, [sp, #16]
 801147a:	4650      	mov	r0, sl
 801147c:	b1d3      	cbz	r3, 80114b4 <_strtod_l+0x88c>
 801147e:	4aad      	ldr	r2, [pc, #692]	; (8011734 <_strtod_l+0xb0c>)
 8011480:	402a      	ands	r2, r5
 8011482:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011486:	f04f 31ff 	mov.w	r1, #4294967295
 801148a:	d816      	bhi.n	80114ba <_strtod_l+0x892>
 801148c:	0d12      	lsrs	r2, r2, #20
 801148e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011492:	fa01 f303 	lsl.w	r3, r1, r3
 8011496:	4298      	cmp	r0, r3
 8011498:	d142      	bne.n	8011520 <_strtod_l+0x8f8>
 801149a:	4ba7      	ldr	r3, [pc, #668]	; (8011738 <_strtod_l+0xb10>)
 801149c:	429d      	cmp	r5, r3
 801149e:	d102      	bne.n	80114a6 <_strtod_l+0x87e>
 80114a0:	3001      	adds	r0, #1
 80114a2:	f43f addf 	beq.w	8011064 <_strtod_l+0x43c>
 80114a6:	4ba3      	ldr	r3, [pc, #652]	; (8011734 <_strtod_l+0xb0c>)
 80114a8:	402b      	ands	r3, r5
 80114aa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80114ae:	f04f 0a00 	mov.w	sl, #0
 80114b2:	e7a0      	b.n	80113f6 <_strtod_l+0x7ce>
 80114b4:	f04f 33ff 	mov.w	r3, #4294967295
 80114b8:	e7ed      	b.n	8011496 <_strtod_l+0x86e>
 80114ba:	460b      	mov	r3, r1
 80114bc:	e7eb      	b.n	8011496 <_strtod_l+0x86e>
 80114be:	bb7b      	cbnz	r3, 8011520 <_strtod_l+0x8f8>
 80114c0:	f1ba 0f00 	cmp.w	sl, #0
 80114c4:	d12c      	bne.n	8011520 <_strtod_l+0x8f8>
 80114c6:	9904      	ldr	r1, [sp, #16]
 80114c8:	4a9a      	ldr	r2, [pc, #616]	; (8011734 <_strtod_l+0xb0c>)
 80114ca:	465b      	mov	r3, fp
 80114cc:	b1f1      	cbz	r1, 801150c <_strtod_l+0x8e4>
 80114ce:	ea02 010b 	and.w	r1, r2, fp
 80114d2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80114d6:	dc19      	bgt.n	801150c <_strtod_l+0x8e4>
 80114d8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80114dc:	f77f ae5b 	ble.w	8011196 <_strtod_l+0x56e>
 80114e0:	4a96      	ldr	r2, [pc, #600]	; (801173c <_strtod_l+0xb14>)
 80114e2:	2300      	movs	r3, #0
 80114e4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80114e8:	4650      	mov	r0, sl
 80114ea:	4659      	mov	r1, fp
 80114ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80114f0:	f7ef f89a 	bl	8000628 <__aeabi_dmul>
 80114f4:	4682      	mov	sl, r0
 80114f6:	468b      	mov	fp, r1
 80114f8:	2900      	cmp	r1, #0
 80114fa:	f47f adbe 	bne.w	801107a <_strtod_l+0x452>
 80114fe:	2800      	cmp	r0, #0
 8011500:	f47f adbb 	bne.w	801107a <_strtod_l+0x452>
 8011504:	2322      	movs	r3, #34	; 0x22
 8011506:	f8c9 3000 	str.w	r3, [r9]
 801150a:	e5b6      	b.n	801107a <_strtod_l+0x452>
 801150c:	4013      	ands	r3, r2
 801150e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011512:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011516:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801151a:	f04f 3aff 	mov.w	sl, #4294967295
 801151e:	e76a      	b.n	80113f6 <_strtod_l+0x7ce>
 8011520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011522:	b193      	cbz	r3, 801154a <_strtod_l+0x922>
 8011524:	422b      	tst	r3, r5
 8011526:	f43f af66 	beq.w	80113f6 <_strtod_l+0x7ce>
 801152a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801152c:	9a04      	ldr	r2, [sp, #16]
 801152e:	4650      	mov	r0, sl
 8011530:	4659      	mov	r1, fp
 8011532:	b173      	cbz	r3, 8011552 <_strtod_l+0x92a>
 8011534:	f7ff fb5b 	bl	8010bee <sulp>
 8011538:	4602      	mov	r2, r0
 801153a:	460b      	mov	r3, r1
 801153c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011540:	f7ee febc 	bl	80002bc <__adddf3>
 8011544:	4682      	mov	sl, r0
 8011546:	468b      	mov	fp, r1
 8011548:	e755      	b.n	80113f6 <_strtod_l+0x7ce>
 801154a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801154c:	ea13 0f0a 	tst.w	r3, sl
 8011550:	e7e9      	b.n	8011526 <_strtod_l+0x8fe>
 8011552:	f7ff fb4c 	bl	8010bee <sulp>
 8011556:	4602      	mov	r2, r0
 8011558:	460b      	mov	r3, r1
 801155a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801155e:	f7ee feab 	bl	80002b8 <__aeabi_dsub>
 8011562:	2200      	movs	r2, #0
 8011564:	2300      	movs	r3, #0
 8011566:	4682      	mov	sl, r0
 8011568:	468b      	mov	fp, r1
 801156a:	f7ef fac5 	bl	8000af8 <__aeabi_dcmpeq>
 801156e:	2800      	cmp	r0, #0
 8011570:	f47f ae11 	bne.w	8011196 <_strtod_l+0x56e>
 8011574:	e73f      	b.n	80113f6 <_strtod_l+0x7ce>
 8011576:	4641      	mov	r1, r8
 8011578:	4620      	mov	r0, r4
 801157a:	f002 fa1a 	bl	80139b2 <__ratio>
 801157e:	ec57 6b10 	vmov	r6, r7, d0
 8011582:	2200      	movs	r2, #0
 8011584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011588:	ee10 0a10 	vmov	r0, s0
 801158c:	4639      	mov	r1, r7
 801158e:	f7ef fac7 	bl	8000b20 <__aeabi_dcmple>
 8011592:	2800      	cmp	r0, #0
 8011594:	d077      	beq.n	8011686 <_strtod_l+0xa5e>
 8011596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011598:	2b00      	cmp	r3, #0
 801159a:	d04a      	beq.n	8011632 <_strtod_l+0xa0a>
 801159c:	4b68      	ldr	r3, [pc, #416]	; (8011740 <_strtod_l+0xb18>)
 801159e:	2200      	movs	r2, #0
 80115a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80115a4:	4f66      	ldr	r7, [pc, #408]	; (8011740 <_strtod_l+0xb18>)
 80115a6:	2600      	movs	r6, #0
 80115a8:	4b62      	ldr	r3, [pc, #392]	; (8011734 <_strtod_l+0xb0c>)
 80115aa:	402b      	ands	r3, r5
 80115ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80115ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80115b0:	4b64      	ldr	r3, [pc, #400]	; (8011744 <_strtod_l+0xb1c>)
 80115b2:	429a      	cmp	r2, r3
 80115b4:	f040 80ce 	bne.w	8011754 <_strtod_l+0xb2c>
 80115b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80115bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80115c0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80115c4:	ec4b ab10 	vmov	d0, sl, fp
 80115c8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80115cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80115d0:	f002 f92a 	bl	8013828 <__ulp>
 80115d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80115d8:	ec53 2b10 	vmov	r2, r3, d0
 80115dc:	f7ef f824 	bl	8000628 <__aeabi_dmul>
 80115e0:	4652      	mov	r2, sl
 80115e2:	465b      	mov	r3, fp
 80115e4:	f7ee fe6a 	bl	80002bc <__adddf3>
 80115e8:	460b      	mov	r3, r1
 80115ea:	4952      	ldr	r1, [pc, #328]	; (8011734 <_strtod_l+0xb0c>)
 80115ec:	4a56      	ldr	r2, [pc, #344]	; (8011748 <_strtod_l+0xb20>)
 80115ee:	4019      	ands	r1, r3
 80115f0:	4291      	cmp	r1, r2
 80115f2:	4682      	mov	sl, r0
 80115f4:	d95b      	bls.n	80116ae <_strtod_l+0xa86>
 80115f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80115fc:	4293      	cmp	r3, r2
 80115fe:	d103      	bne.n	8011608 <_strtod_l+0x9e0>
 8011600:	9b08      	ldr	r3, [sp, #32]
 8011602:	3301      	adds	r3, #1
 8011604:	f43f ad2e 	beq.w	8011064 <_strtod_l+0x43c>
 8011608:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011738 <_strtod_l+0xb10>
 801160c:	f04f 3aff 	mov.w	sl, #4294967295
 8011610:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011612:	4648      	mov	r0, r9
 8011614:	f001 fe71 	bl	80132fa <_Bfree>
 8011618:	9905      	ldr	r1, [sp, #20]
 801161a:	4648      	mov	r0, r9
 801161c:	f001 fe6d 	bl	80132fa <_Bfree>
 8011620:	4641      	mov	r1, r8
 8011622:	4648      	mov	r0, r9
 8011624:	f001 fe69 	bl	80132fa <_Bfree>
 8011628:	4621      	mov	r1, r4
 801162a:	4648      	mov	r0, r9
 801162c:	f001 fe65 	bl	80132fa <_Bfree>
 8011630:	e619      	b.n	8011266 <_strtod_l+0x63e>
 8011632:	f1ba 0f00 	cmp.w	sl, #0
 8011636:	d11a      	bne.n	801166e <_strtod_l+0xa46>
 8011638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801163c:	b9eb      	cbnz	r3, 801167a <_strtod_l+0xa52>
 801163e:	2200      	movs	r2, #0
 8011640:	4b3f      	ldr	r3, [pc, #252]	; (8011740 <_strtod_l+0xb18>)
 8011642:	4630      	mov	r0, r6
 8011644:	4639      	mov	r1, r7
 8011646:	f7ef fa61 	bl	8000b0c <__aeabi_dcmplt>
 801164a:	b9c8      	cbnz	r0, 8011680 <_strtod_l+0xa58>
 801164c:	4630      	mov	r0, r6
 801164e:	4639      	mov	r1, r7
 8011650:	2200      	movs	r2, #0
 8011652:	4b3e      	ldr	r3, [pc, #248]	; (801174c <_strtod_l+0xb24>)
 8011654:	f7ee ffe8 	bl	8000628 <__aeabi_dmul>
 8011658:	4606      	mov	r6, r0
 801165a:	460f      	mov	r7, r1
 801165c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011660:	9618      	str	r6, [sp, #96]	; 0x60
 8011662:	9319      	str	r3, [sp, #100]	; 0x64
 8011664:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011668:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801166c:	e79c      	b.n	80115a8 <_strtod_l+0x980>
 801166e:	f1ba 0f01 	cmp.w	sl, #1
 8011672:	d102      	bne.n	801167a <_strtod_l+0xa52>
 8011674:	2d00      	cmp	r5, #0
 8011676:	f43f ad8e 	beq.w	8011196 <_strtod_l+0x56e>
 801167a:	2200      	movs	r2, #0
 801167c:	4b34      	ldr	r3, [pc, #208]	; (8011750 <_strtod_l+0xb28>)
 801167e:	e78f      	b.n	80115a0 <_strtod_l+0x978>
 8011680:	2600      	movs	r6, #0
 8011682:	4f32      	ldr	r7, [pc, #200]	; (801174c <_strtod_l+0xb24>)
 8011684:	e7ea      	b.n	801165c <_strtod_l+0xa34>
 8011686:	4b31      	ldr	r3, [pc, #196]	; (801174c <_strtod_l+0xb24>)
 8011688:	4630      	mov	r0, r6
 801168a:	4639      	mov	r1, r7
 801168c:	2200      	movs	r2, #0
 801168e:	f7ee ffcb 	bl	8000628 <__aeabi_dmul>
 8011692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011694:	4606      	mov	r6, r0
 8011696:	460f      	mov	r7, r1
 8011698:	b933      	cbnz	r3, 80116a8 <_strtod_l+0xa80>
 801169a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801169e:	9010      	str	r0, [sp, #64]	; 0x40
 80116a0:	9311      	str	r3, [sp, #68]	; 0x44
 80116a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80116a6:	e7df      	b.n	8011668 <_strtod_l+0xa40>
 80116a8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80116ac:	e7f9      	b.n	80116a2 <_strtod_l+0xa7a>
 80116ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80116b2:	9b04      	ldr	r3, [sp, #16]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1ab      	bne.n	8011610 <_strtod_l+0x9e8>
 80116b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80116bc:	0d1b      	lsrs	r3, r3, #20
 80116be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80116c0:	051b      	lsls	r3, r3, #20
 80116c2:	429a      	cmp	r2, r3
 80116c4:	465d      	mov	r5, fp
 80116c6:	d1a3      	bne.n	8011610 <_strtod_l+0x9e8>
 80116c8:	4639      	mov	r1, r7
 80116ca:	4630      	mov	r0, r6
 80116cc:	f7ef fa5c 	bl	8000b88 <__aeabi_d2iz>
 80116d0:	f7ee ff40 	bl	8000554 <__aeabi_i2d>
 80116d4:	460b      	mov	r3, r1
 80116d6:	4602      	mov	r2, r0
 80116d8:	4639      	mov	r1, r7
 80116da:	4630      	mov	r0, r6
 80116dc:	f7ee fdec 	bl	80002b8 <__aeabi_dsub>
 80116e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116e2:	4606      	mov	r6, r0
 80116e4:	460f      	mov	r7, r1
 80116e6:	b933      	cbnz	r3, 80116f6 <_strtod_l+0xace>
 80116e8:	f1ba 0f00 	cmp.w	sl, #0
 80116ec:	d103      	bne.n	80116f6 <_strtod_l+0xace>
 80116ee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80116f2:	2d00      	cmp	r5, #0
 80116f4:	d06d      	beq.n	80117d2 <_strtod_l+0xbaa>
 80116f6:	a30a      	add	r3, pc, #40	; (adr r3, 8011720 <_strtod_l+0xaf8>)
 80116f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fc:	4630      	mov	r0, r6
 80116fe:	4639      	mov	r1, r7
 8011700:	f7ef fa04 	bl	8000b0c <__aeabi_dcmplt>
 8011704:	2800      	cmp	r0, #0
 8011706:	f47f acb8 	bne.w	801107a <_strtod_l+0x452>
 801170a:	a307      	add	r3, pc, #28	; (adr r3, 8011728 <_strtod_l+0xb00>)
 801170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011710:	4630      	mov	r0, r6
 8011712:	4639      	mov	r1, r7
 8011714:	f7ef fa18 	bl	8000b48 <__aeabi_dcmpgt>
 8011718:	2800      	cmp	r0, #0
 801171a:	f43f af79 	beq.w	8011610 <_strtod_l+0x9e8>
 801171e:	e4ac      	b.n	801107a <_strtod_l+0x452>
 8011720:	94a03595 	.word	0x94a03595
 8011724:	3fdfffff 	.word	0x3fdfffff
 8011728:	35afe535 	.word	0x35afe535
 801172c:	3fe00000 	.word	0x3fe00000
 8011730:	000fffff 	.word	0x000fffff
 8011734:	7ff00000 	.word	0x7ff00000
 8011738:	7fefffff 	.word	0x7fefffff
 801173c:	39500000 	.word	0x39500000
 8011740:	3ff00000 	.word	0x3ff00000
 8011744:	7fe00000 	.word	0x7fe00000
 8011748:	7c9fffff 	.word	0x7c9fffff
 801174c:	3fe00000 	.word	0x3fe00000
 8011750:	bff00000 	.word	0xbff00000
 8011754:	9b04      	ldr	r3, [sp, #16]
 8011756:	b333      	cbz	r3, 80117a6 <_strtod_l+0xb7e>
 8011758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801175a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801175e:	d822      	bhi.n	80117a6 <_strtod_l+0xb7e>
 8011760:	a327      	add	r3, pc, #156	; (adr r3, 8011800 <_strtod_l+0xbd8>)
 8011762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011766:	4630      	mov	r0, r6
 8011768:	4639      	mov	r1, r7
 801176a:	f7ef f9d9 	bl	8000b20 <__aeabi_dcmple>
 801176e:	b1a0      	cbz	r0, 801179a <_strtod_l+0xb72>
 8011770:	4639      	mov	r1, r7
 8011772:	4630      	mov	r0, r6
 8011774:	f7ef fa30 	bl	8000bd8 <__aeabi_d2uiz>
 8011778:	2800      	cmp	r0, #0
 801177a:	bf08      	it	eq
 801177c:	2001      	moveq	r0, #1
 801177e:	f7ee fed9 	bl	8000534 <__aeabi_ui2d>
 8011782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011784:	4606      	mov	r6, r0
 8011786:	460f      	mov	r7, r1
 8011788:	bb03      	cbnz	r3, 80117cc <_strtod_l+0xba4>
 801178a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801178e:	9012      	str	r0, [sp, #72]	; 0x48
 8011790:	9313      	str	r3, [sp, #76]	; 0x4c
 8011792:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011796:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801179a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801179c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801179e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80117a2:	1a9b      	subs	r3, r3, r2
 80117a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80117a6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80117aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80117ae:	f002 f83b 	bl	8013828 <__ulp>
 80117b2:	4650      	mov	r0, sl
 80117b4:	ec53 2b10 	vmov	r2, r3, d0
 80117b8:	4659      	mov	r1, fp
 80117ba:	f7ee ff35 	bl	8000628 <__aeabi_dmul>
 80117be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80117c2:	f7ee fd7b 	bl	80002bc <__adddf3>
 80117c6:	4682      	mov	sl, r0
 80117c8:	468b      	mov	fp, r1
 80117ca:	e772      	b.n	80116b2 <_strtod_l+0xa8a>
 80117cc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80117d0:	e7df      	b.n	8011792 <_strtod_l+0xb6a>
 80117d2:	a30d      	add	r3, pc, #52	; (adr r3, 8011808 <_strtod_l+0xbe0>)
 80117d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d8:	f7ef f998 	bl	8000b0c <__aeabi_dcmplt>
 80117dc:	e79c      	b.n	8011718 <_strtod_l+0xaf0>
 80117de:	2300      	movs	r3, #0
 80117e0:	930d      	str	r3, [sp, #52]	; 0x34
 80117e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80117e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117e6:	6013      	str	r3, [r2, #0]
 80117e8:	f7ff ba61 	b.w	8010cae <_strtod_l+0x86>
 80117ec:	2b65      	cmp	r3, #101	; 0x65
 80117ee:	f04f 0200 	mov.w	r2, #0
 80117f2:	f43f ab4e 	beq.w	8010e92 <_strtod_l+0x26a>
 80117f6:	2101      	movs	r1, #1
 80117f8:	4614      	mov	r4, r2
 80117fa:	9104      	str	r1, [sp, #16]
 80117fc:	f7ff bacb 	b.w	8010d96 <_strtod_l+0x16e>
 8011800:	ffc00000 	.word	0xffc00000
 8011804:	41dfffff 	.word	0x41dfffff
 8011808:	94a03595 	.word	0x94a03595
 801180c:	3fcfffff 	.word	0x3fcfffff

08011810 <_strtod_r>:
 8011810:	4b05      	ldr	r3, [pc, #20]	; (8011828 <_strtod_r+0x18>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	b410      	push	{r4}
 8011816:	6a1b      	ldr	r3, [r3, #32]
 8011818:	4c04      	ldr	r4, [pc, #16]	; (801182c <_strtod_r+0x1c>)
 801181a:	2b00      	cmp	r3, #0
 801181c:	bf08      	it	eq
 801181e:	4623      	moveq	r3, r4
 8011820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011824:	f7ff ba00 	b.w	8010c28 <_strtod_l>
 8011828:	2000000c 	.word	0x2000000c
 801182c:	20000070 	.word	0x20000070

08011830 <_strtol_l.isra.0>:
 8011830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011834:	4680      	mov	r8, r0
 8011836:	4689      	mov	r9, r1
 8011838:	4692      	mov	sl, r2
 801183a:	461e      	mov	r6, r3
 801183c:	460f      	mov	r7, r1
 801183e:	463d      	mov	r5, r7
 8011840:	9808      	ldr	r0, [sp, #32]
 8011842:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011846:	f001 fc67 	bl	8013118 <__locale_ctype_ptr_l>
 801184a:	4420      	add	r0, r4
 801184c:	7843      	ldrb	r3, [r0, #1]
 801184e:	f013 0308 	ands.w	r3, r3, #8
 8011852:	d132      	bne.n	80118ba <_strtol_l.isra.0+0x8a>
 8011854:	2c2d      	cmp	r4, #45	; 0x2d
 8011856:	d132      	bne.n	80118be <_strtol_l.isra.0+0x8e>
 8011858:	787c      	ldrb	r4, [r7, #1]
 801185a:	1cbd      	adds	r5, r7, #2
 801185c:	2201      	movs	r2, #1
 801185e:	2e00      	cmp	r6, #0
 8011860:	d05d      	beq.n	801191e <_strtol_l.isra.0+0xee>
 8011862:	2e10      	cmp	r6, #16
 8011864:	d109      	bne.n	801187a <_strtol_l.isra.0+0x4a>
 8011866:	2c30      	cmp	r4, #48	; 0x30
 8011868:	d107      	bne.n	801187a <_strtol_l.isra.0+0x4a>
 801186a:	782b      	ldrb	r3, [r5, #0]
 801186c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011870:	2b58      	cmp	r3, #88	; 0x58
 8011872:	d14f      	bne.n	8011914 <_strtol_l.isra.0+0xe4>
 8011874:	786c      	ldrb	r4, [r5, #1]
 8011876:	2610      	movs	r6, #16
 8011878:	3502      	adds	r5, #2
 801187a:	2a00      	cmp	r2, #0
 801187c:	bf14      	ite	ne
 801187e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011882:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011886:	2700      	movs	r7, #0
 8011888:	fbb1 fcf6 	udiv	ip, r1, r6
 801188c:	4638      	mov	r0, r7
 801188e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011892:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011896:	2b09      	cmp	r3, #9
 8011898:	d817      	bhi.n	80118ca <_strtol_l.isra.0+0x9a>
 801189a:	461c      	mov	r4, r3
 801189c:	42a6      	cmp	r6, r4
 801189e:	dd23      	ble.n	80118e8 <_strtol_l.isra.0+0xb8>
 80118a0:	1c7b      	adds	r3, r7, #1
 80118a2:	d007      	beq.n	80118b4 <_strtol_l.isra.0+0x84>
 80118a4:	4584      	cmp	ip, r0
 80118a6:	d31c      	bcc.n	80118e2 <_strtol_l.isra.0+0xb2>
 80118a8:	d101      	bne.n	80118ae <_strtol_l.isra.0+0x7e>
 80118aa:	45a6      	cmp	lr, r4
 80118ac:	db19      	blt.n	80118e2 <_strtol_l.isra.0+0xb2>
 80118ae:	fb00 4006 	mla	r0, r0, r6, r4
 80118b2:	2701      	movs	r7, #1
 80118b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118b8:	e7eb      	b.n	8011892 <_strtol_l.isra.0+0x62>
 80118ba:	462f      	mov	r7, r5
 80118bc:	e7bf      	b.n	801183e <_strtol_l.isra.0+0xe>
 80118be:	2c2b      	cmp	r4, #43	; 0x2b
 80118c0:	bf04      	itt	eq
 80118c2:	1cbd      	addeq	r5, r7, #2
 80118c4:	787c      	ldrbeq	r4, [r7, #1]
 80118c6:	461a      	mov	r2, r3
 80118c8:	e7c9      	b.n	801185e <_strtol_l.isra.0+0x2e>
 80118ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80118ce:	2b19      	cmp	r3, #25
 80118d0:	d801      	bhi.n	80118d6 <_strtol_l.isra.0+0xa6>
 80118d2:	3c37      	subs	r4, #55	; 0x37
 80118d4:	e7e2      	b.n	801189c <_strtol_l.isra.0+0x6c>
 80118d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80118da:	2b19      	cmp	r3, #25
 80118dc:	d804      	bhi.n	80118e8 <_strtol_l.isra.0+0xb8>
 80118de:	3c57      	subs	r4, #87	; 0x57
 80118e0:	e7dc      	b.n	801189c <_strtol_l.isra.0+0x6c>
 80118e2:	f04f 37ff 	mov.w	r7, #4294967295
 80118e6:	e7e5      	b.n	80118b4 <_strtol_l.isra.0+0x84>
 80118e8:	1c7b      	adds	r3, r7, #1
 80118ea:	d108      	bne.n	80118fe <_strtol_l.isra.0+0xce>
 80118ec:	2322      	movs	r3, #34	; 0x22
 80118ee:	f8c8 3000 	str.w	r3, [r8]
 80118f2:	4608      	mov	r0, r1
 80118f4:	f1ba 0f00 	cmp.w	sl, #0
 80118f8:	d107      	bne.n	801190a <_strtol_l.isra.0+0xda>
 80118fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118fe:	b102      	cbz	r2, 8011902 <_strtol_l.isra.0+0xd2>
 8011900:	4240      	negs	r0, r0
 8011902:	f1ba 0f00 	cmp.w	sl, #0
 8011906:	d0f8      	beq.n	80118fa <_strtol_l.isra.0+0xca>
 8011908:	b10f      	cbz	r7, 801190e <_strtol_l.isra.0+0xde>
 801190a:	f105 39ff 	add.w	r9, r5, #4294967295
 801190e:	f8ca 9000 	str.w	r9, [sl]
 8011912:	e7f2      	b.n	80118fa <_strtol_l.isra.0+0xca>
 8011914:	2430      	movs	r4, #48	; 0x30
 8011916:	2e00      	cmp	r6, #0
 8011918:	d1af      	bne.n	801187a <_strtol_l.isra.0+0x4a>
 801191a:	2608      	movs	r6, #8
 801191c:	e7ad      	b.n	801187a <_strtol_l.isra.0+0x4a>
 801191e:	2c30      	cmp	r4, #48	; 0x30
 8011920:	d0a3      	beq.n	801186a <_strtol_l.isra.0+0x3a>
 8011922:	260a      	movs	r6, #10
 8011924:	e7a9      	b.n	801187a <_strtol_l.isra.0+0x4a>
	...

08011928 <_strtol_r>:
 8011928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801192a:	4c06      	ldr	r4, [pc, #24]	; (8011944 <_strtol_r+0x1c>)
 801192c:	4d06      	ldr	r5, [pc, #24]	; (8011948 <_strtol_r+0x20>)
 801192e:	6824      	ldr	r4, [r4, #0]
 8011930:	6a24      	ldr	r4, [r4, #32]
 8011932:	2c00      	cmp	r4, #0
 8011934:	bf08      	it	eq
 8011936:	462c      	moveq	r4, r5
 8011938:	9400      	str	r4, [sp, #0]
 801193a:	f7ff ff79 	bl	8011830 <_strtol_l.isra.0>
 801193e:	b003      	add	sp, #12
 8011940:	bd30      	pop	{r4, r5, pc}
 8011942:	bf00      	nop
 8011944:	2000000c 	.word	0x2000000c
 8011948:	20000070 	.word	0x20000070

0801194c <_vsiprintf_r>:
 801194c:	b500      	push	{lr}
 801194e:	b09b      	sub	sp, #108	; 0x6c
 8011950:	9100      	str	r1, [sp, #0]
 8011952:	9104      	str	r1, [sp, #16]
 8011954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011958:	9105      	str	r1, [sp, #20]
 801195a:	9102      	str	r1, [sp, #8]
 801195c:	4905      	ldr	r1, [pc, #20]	; (8011974 <_vsiprintf_r+0x28>)
 801195e:	9103      	str	r1, [sp, #12]
 8011960:	4669      	mov	r1, sp
 8011962:	f002 f9a5 	bl	8013cb0 <_svfiprintf_r>
 8011966:	9b00      	ldr	r3, [sp, #0]
 8011968:	2200      	movs	r2, #0
 801196a:	701a      	strb	r2, [r3, #0]
 801196c:	b01b      	add	sp, #108	; 0x6c
 801196e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011972:	bf00      	nop
 8011974:	ffff0208 	.word	0xffff0208

08011978 <vsiprintf>:
 8011978:	4613      	mov	r3, r2
 801197a:	460a      	mov	r2, r1
 801197c:	4601      	mov	r1, r0
 801197e:	4802      	ldr	r0, [pc, #8]	; (8011988 <vsiprintf+0x10>)
 8011980:	6800      	ldr	r0, [r0, #0]
 8011982:	f7ff bfe3 	b.w	801194c <_vsiprintf_r>
 8011986:	bf00      	nop
 8011988:	2000000c 	.word	0x2000000c

0801198c <__swbuf_r>:
 801198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801198e:	460e      	mov	r6, r1
 8011990:	4614      	mov	r4, r2
 8011992:	4605      	mov	r5, r0
 8011994:	b118      	cbz	r0, 801199e <__swbuf_r+0x12>
 8011996:	6983      	ldr	r3, [r0, #24]
 8011998:	b90b      	cbnz	r3, 801199e <__swbuf_r+0x12>
 801199a:	f001 f80d 	bl	80129b8 <__sinit>
 801199e:	4b21      	ldr	r3, [pc, #132]	; (8011a24 <__swbuf_r+0x98>)
 80119a0:	429c      	cmp	r4, r3
 80119a2:	d12a      	bne.n	80119fa <__swbuf_r+0x6e>
 80119a4:	686c      	ldr	r4, [r5, #4]
 80119a6:	69a3      	ldr	r3, [r4, #24]
 80119a8:	60a3      	str	r3, [r4, #8]
 80119aa:	89a3      	ldrh	r3, [r4, #12]
 80119ac:	071a      	lsls	r2, r3, #28
 80119ae:	d52e      	bpl.n	8011a0e <__swbuf_r+0x82>
 80119b0:	6923      	ldr	r3, [r4, #16]
 80119b2:	b363      	cbz	r3, 8011a0e <__swbuf_r+0x82>
 80119b4:	6923      	ldr	r3, [r4, #16]
 80119b6:	6820      	ldr	r0, [r4, #0]
 80119b8:	1ac0      	subs	r0, r0, r3
 80119ba:	6963      	ldr	r3, [r4, #20]
 80119bc:	b2f6      	uxtb	r6, r6
 80119be:	4283      	cmp	r3, r0
 80119c0:	4637      	mov	r7, r6
 80119c2:	dc04      	bgt.n	80119ce <__swbuf_r+0x42>
 80119c4:	4621      	mov	r1, r4
 80119c6:	4628      	mov	r0, r5
 80119c8:	f000 ff8c 	bl	80128e4 <_fflush_r>
 80119cc:	bb28      	cbnz	r0, 8011a1a <__swbuf_r+0x8e>
 80119ce:	68a3      	ldr	r3, [r4, #8]
 80119d0:	3b01      	subs	r3, #1
 80119d2:	60a3      	str	r3, [r4, #8]
 80119d4:	6823      	ldr	r3, [r4, #0]
 80119d6:	1c5a      	adds	r2, r3, #1
 80119d8:	6022      	str	r2, [r4, #0]
 80119da:	701e      	strb	r6, [r3, #0]
 80119dc:	6963      	ldr	r3, [r4, #20]
 80119de:	3001      	adds	r0, #1
 80119e0:	4283      	cmp	r3, r0
 80119e2:	d004      	beq.n	80119ee <__swbuf_r+0x62>
 80119e4:	89a3      	ldrh	r3, [r4, #12]
 80119e6:	07db      	lsls	r3, r3, #31
 80119e8:	d519      	bpl.n	8011a1e <__swbuf_r+0x92>
 80119ea:	2e0a      	cmp	r6, #10
 80119ec:	d117      	bne.n	8011a1e <__swbuf_r+0x92>
 80119ee:	4621      	mov	r1, r4
 80119f0:	4628      	mov	r0, r5
 80119f2:	f000 ff77 	bl	80128e4 <_fflush_r>
 80119f6:	b190      	cbz	r0, 8011a1e <__swbuf_r+0x92>
 80119f8:	e00f      	b.n	8011a1a <__swbuf_r+0x8e>
 80119fa:	4b0b      	ldr	r3, [pc, #44]	; (8011a28 <__swbuf_r+0x9c>)
 80119fc:	429c      	cmp	r4, r3
 80119fe:	d101      	bne.n	8011a04 <__swbuf_r+0x78>
 8011a00:	68ac      	ldr	r4, [r5, #8]
 8011a02:	e7d0      	b.n	80119a6 <__swbuf_r+0x1a>
 8011a04:	4b09      	ldr	r3, [pc, #36]	; (8011a2c <__swbuf_r+0xa0>)
 8011a06:	429c      	cmp	r4, r3
 8011a08:	bf08      	it	eq
 8011a0a:	68ec      	ldreq	r4, [r5, #12]
 8011a0c:	e7cb      	b.n	80119a6 <__swbuf_r+0x1a>
 8011a0e:	4621      	mov	r1, r4
 8011a10:	4628      	mov	r0, r5
 8011a12:	f000 f81f 	bl	8011a54 <__swsetup_r>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d0cc      	beq.n	80119b4 <__swbuf_r+0x28>
 8011a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8011a1e:	4638      	mov	r0, r7
 8011a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a22:	bf00      	nop
 8011a24:	080151c8 	.word	0x080151c8
 8011a28:	080151e8 	.word	0x080151e8
 8011a2c:	080151a8 	.word	0x080151a8

08011a30 <_write_r>:
 8011a30:	b538      	push	{r3, r4, r5, lr}
 8011a32:	4c07      	ldr	r4, [pc, #28]	; (8011a50 <_write_r+0x20>)
 8011a34:	4605      	mov	r5, r0
 8011a36:	4608      	mov	r0, r1
 8011a38:	4611      	mov	r1, r2
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	6022      	str	r2, [r4, #0]
 8011a3e:	461a      	mov	r2, r3
 8011a40:	f7f1 f8e1 	bl	8002c06 <_write>
 8011a44:	1c43      	adds	r3, r0, #1
 8011a46:	d102      	bne.n	8011a4e <_write_r+0x1e>
 8011a48:	6823      	ldr	r3, [r4, #0]
 8011a4a:	b103      	cbz	r3, 8011a4e <_write_r+0x1e>
 8011a4c:	602b      	str	r3, [r5, #0]
 8011a4e:	bd38      	pop	{r3, r4, r5, pc}
 8011a50:	2000c610 	.word	0x2000c610

08011a54 <__swsetup_r>:
 8011a54:	4b32      	ldr	r3, [pc, #200]	; (8011b20 <__swsetup_r+0xcc>)
 8011a56:	b570      	push	{r4, r5, r6, lr}
 8011a58:	681d      	ldr	r5, [r3, #0]
 8011a5a:	4606      	mov	r6, r0
 8011a5c:	460c      	mov	r4, r1
 8011a5e:	b125      	cbz	r5, 8011a6a <__swsetup_r+0x16>
 8011a60:	69ab      	ldr	r3, [r5, #24]
 8011a62:	b913      	cbnz	r3, 8011a6a <__swsetup_r+0x16>
 8011a64:	4628      	mov	r0, r5
 8011a66:	f000 ffa7 	bl	80129b8 <__sinit>
 8011a6a:	4b2e      	ldr	r3, [pc, #184]	; (8011b24 <__swsetup_r+0xd0>)
 8011a6c:	429c      	cmp	r4, r3
 8011a6e:	d10f      	bne.n	8011a90 <__swsetup_r+0x3c>
 8011a70:	686c      	ldr	r4, [r5, #4]
 8011a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	0715      	lsls	r5, r2, #28
 8011a7a:	d42c      	bmi.n	8011ad6 <__swsetup_r+0x82>
 8011a7c:	06d0      	lsls	r0, r2, #27
 8011a7e:	d411      	bmi.n	8011aa4 <__swsetup_r+0x50>
 8011a80:	2209      	movs	r2, #9
 8011a82:	6032      	str	r2, [r6, #0]
 8011a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a88:	81a3      	strh	r3, [r4, #12]
 8011a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a8e:	e03e      	b.n	8011b0e <__swsetup_r+0xba>
 8011a90:	4b25      	ldr	r3, [pc, #148]	; (8011b28 <__swsetup_r+0xd4>)
 8011a92:	429c      	cmp	r4, r3
 8011a94:	d101      	bne.n	8011a9a <__swsetup_r+0x46>
 8011a96:	68ac      	ldr	r4, [r5, #8]
 8011a98:	e7eb      	b.n	8011a72 <__swsetup_r+0x1e>
 8011a9a:	4b24      	ldr	r3, [pc, #144]	; (8011b2c <__swsetup_r+0xd8>)
 8011a9c:	429c      	cmp	r4, r3
 8011a9e:	bf08      	it	eq
 8011aa0:	68ec      	ldreq	r4, [r5, #12]
 8011aa2:	e7e6      	b.n	8011a72 <__swsetup_r+0x1e>
 8011aa4:	0751      	lsls	r1, r2, #29
 8011aa6:	d512      	bpl.n	8011ace <__swsetup_r+0x7a>
 8011aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011aaa:	b141      	cbz	r1, 8011abe <__swsetup_r+0x6a>
 8011aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ab0:	4299      	cmp	r1, r3
 8011ab2:	d002      	beq.n	8011aba <__swsetup_r+0x66>
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f001 fff9 	bl	8013aac <_free_r>
 8011aba:	2300      	movs	r3, #0
 8011abc:	6363      	str	r3, [r4, #52]	; 0x34
 8011abe:	89a3      	ldrh	r3, [r4, #12]
 8011ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011ac4:	81a3      	strh	r3, [r4, #12]
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	6063      	str	r3, [r4, #4]
 8011aca:	6923      	ldr	r3, [r4, #16]
 8011acc:	6023      	str	r3, [r4, #0]
 8011ace:	89a3      	ldrh	r3, [r4, #12]
 8011ad0:	f043 0308 	orr.w	r3, r3, #8
 8011ad4:	81a3      	strh	r3, [r4, #12]
 8011ad6:	6923      	ldr	r3, [r4, #16]
 8011ad8:	b94b      	cbnz	r3, 8011aee <__swsetup_r+0x9a>
 8011ada:	89a3      	ldrh	r3, [r4, #12]
 8011adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ae4:	d003      	beq.n	8011aee <__swsetup_r+0x9a>
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f001 fb6d 	bl	80131c8 <__smakebuf_r>
 8011aee:	89a2      	ldrh	r2, [r4, #12]
 8011af0:	f012 0301 	ands.w	r3, r2, #1
 8011af4:	d00c      	beq.n	8011b10 <__swsetup_r+0xbc>
 8011af6:	2300      	movs	r3, #0
 8011af8:	60a3      	str	r3, [r4, #8]
 8011afa:	6963      	ldr	r3, [r4, #20]
 8011afc:	425b      	negs	r3, r3
 8011afe:	61a3      	str	r3, [r4, #24]
 8011b00:	6923      	ldr	r3, [r4, #16]
 8011b02:	b953      	cbnz	r3, 8011b1a <__swsetup_r+0xc6>
 8011b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011b0c:	d1ba      	bne.n	8011a84 <__swsetup_r+0x30>
 8011b0e:	bd70      	pop	{r4, r5, r6, pc}
 8011b10:	0792      	lsls	r2, r2, #30
 8011b12:	bf58      	it	pl
 8011b14:	6963      	ldrpl	r3, [r4, #20]
 8011b16:	60a3      	str	r3, [r4, #8]
 8011b18:	e7f2      	b.n	8011b00 <__swsetup_r+0xac>
 8011b1a:	2000      	movs	r0, #0
 8011b1c:	e7f7      	b.n	8011b0e <__swsetup_r+0xba>
 8011b1e:	bf00      	nop
 8011b20:	2000000c 	.word	0x2000000c
 8011b24:	080151c8 	.word	0x080151c8
 8011b28:	080151e8 	.word	0x080151e8
 8011b2c:	080151a8 	.word	0x080151a8

08011b30 <_close_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	4c06      	ldr	r4, [pc, #24]	; (8011b4c <_close_r+0x1c>)
 8011b34:	2300      	movs	r3, #0
 8011b36:	4605      	mov	r5, r0
 8011b38:	4608      	mov	r0, r1
 8011b3a:	6023      	str	r3, [r4, #0]
 8011b3c:	f7f2 fdc1 	bl	80046c2 <_close>
 8011b40:	1c43      	adds	r3, r0, #1
 8011b42:	d102      	bne.n	8011b4a <_close_r+0x1a>
 8011b44:	6823      	ldr	r3, [r4, #0]
 8011b46:	b103      	cbz	r3, 8011b4a <_close_r+0x1a>
 8011b48:	602b      	str	r3, [r5, #0]
 8011b4a:	bd38      	pop	{r3, r4, r5, pc}
 8011b4c:	2000c610 	.word	0x2000c610

08011b50 <quorem>:
 8011b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b54:	6903      	ldr	r3, [r0, #16]
 8011b56:	690c      	ldr	r4, [r1, #16]
 8011b58:	42a3      	cmp	r3, r4
 8011b5a:	4680      	mov	r8, r0
 8011b5c:	f2c0 8082 	blt.w	8011c64 <quorem+0x114>
 8011b60:	3c01      	subs	r4, #1
 8011b62:	f101 0714 	add.w	r7, r1, #20
 8011b66:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011b6a:	f100 0614 	add.w	r6, r0, #20
 8011b6e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011b72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011b76:	eb06 030c 	add.w	r3, r6, ip
 8011b7a:	3501      	adds	r5, #1
 8011b7c:	eb07 090c 	add.w	r9, r7, ip
 8011b80:	9301      	str	r3, [sp, #4]
 8011b82:	fbb0 f5f5 	udiv	r5, r0, r5
 8011b86:	b395      	cbz	r5, 8011bee <quorem+0x9e>
 8011b88:	f04f 0a00 	mov.w	sl, #0
 8011b8c:	4638      	mov	r0, r7
 8011b8e:	46b6      	mov	lr, r6
 8011b90:	46d3      	mov	fp, sl
 8011b92:	f850 2b04 	ldr.w	r2, [r0], #4
 8011b96:	b293      	uxth	r3, r2
 8011b98:	fb05 a303 	mla	r3, r5, r3, sl
 8011b9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	ebab 0303 	sub.w	r3, fp, r3
 8011ba6:	0c12      	lsrs	r2, r2, #16
 8011ba8:	f8de b000 	ldr.w	fp, [lr]
 8011bac:	fb05 a202 	mla	r2, r5, r2, sl
 8011bb0:	fa13 f38b 	uxtah	r3, r3, fp
 8011bb4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011bb8:	fa1f fb82 	uxth.w	fp, r2
 8011bbc:	f8de 2000 	ldr.w	r2, [lr]
 8011bc0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011bce:	4581      	cmp	r9, r0
 8011bd0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011bd4:	f84e 3b04 	str.w	r3, [lr], #4
 8011bd8:	d2db      	bcs.n	8011b92 <quorem+0x42>
 8011bda:	f856 300c 	ldr.w	r3, [r6, ip]
 8011bde:	b933      	cbnz	r3, 8011bee <quorem+0x9e>
 8011be0:	9b01      	ldr	r3, [sp, #4]
 8011be2:	3b04      	subs	r3, #4
 8011be4:	429e      	cmp	r6, r3
 8011be6:	461a      	mov	r2, r3
 8011be8:	d330      	bcc.n	8011c4c <quorem+0xfc>
 8011bea:	f8c8 4010 	str.w	r4, [r8, #16]
 8011bee:	4640      	mov	r0, r8
 8011bf0:	f001 fda2 	bl	8013738 <__mcmp>
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	db25      	blt.n	8011c44 <quorem+0xf4>
 8011bf8:	3501      	adds	r5, #1
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f04f 0c00 	mov.w	ip, #0
 8011c00:	f857 2b04 	ldr.w	r2, [r7], #4
 8011c04:	f8d0 e000 	ldr.w	lr, [r0]
 8011c08:	b293      	uxth	r3, r2
 8011c0a:	ebac 0303 	sub.w	r3, ip, r3
 8011c0e:	0c12      	lsrs	r2, r2, #16
 8011c10:	fa13 f38e 	uxtah	r3, r3, lr
 8011c14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011c18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011c22:	45b9      	cmp	r9, r7
 8011c24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011c28:	f840 3b04 	str.w	r3, [r0], #4
 8011c2c:	d2e8      	bcs.n	8011c00 <quorem+0xb0>
 8011c2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011c32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011c36:	b92a      	cbnz	r2, 8011c44 <quorem+0xf4>
 8011c38:	3b04      	subs	r3, #4
 8011c3a:	429e      	cmp	r6, r3
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	d30b      	bcc.n	8011c58 <quorem+0x108>
 8011c40:	f8c8 4010 	str.w	r4, [r8, #16]
 8011c44:	4628      	mov	r0, r5
 8011c46:	b003      	add	sp, #12
 8011c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4c:	6812      	ldr	r2, [r2, #0]
 8011c4e:	3b04      	subs	r3, #4
 8011c50:	2a00      	cmp	r2, #0
 8011c52:	d1ca      	bne.n	8011bea <quorem+0x9a>
 8011c54:	3c01      	subs	r4, #1
 8011c56:	e7c5      	b.n	8011be4 <quorem+0x94>
 8011c58:	6812      	ldr	r2, [r2, #0]
 8011c5a:	3b04      	subs	r3, #4
 8011c5c:	2a00      	cmp	r2, #0
 8011c5e:	d1ef      	bne.n	8011c40 <quorem+0xf0>
 8011c60:	3c01      	subs	r4, #1
 8011c62:	e7ea      	b.n	8011c3a <quorem+0xea>
 8011c64:	2000      	movs	r0, #0
 8011c66:	e7ee      	b.n	8011c46 <quorem+0xf6>

08011c68 <_dtoa_r>:
 8011c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c6c:	ec57 6b10 	vmov	r6, r7, d0
 8011c70:	b097      	sub	sp, #92	; 0x5c
 8011c72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011c74:	9106      	str	r1, [sp, #24]
 8011c76:	4604      	mov	r4, r0
 8011c78:	920b      	str	r2, [sp, #44]	; 0x2c
 8011c7a:	9312      	str	r3, [sp, #72]	; 0x48
 8011c7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011c80:	e9cd 6700 	strd	r6, r7, [sp]
 8011c84:	b93d      	cbnz	r5, 8011c96 <_dtoa_r+0x2e>
 8011c86:	2010      	movs	r0, #16
 8011c88:	f001 fade 	bl	8013248 <malloc>
 8011c8c:	6260      	str	r0, [r4, #36]	; 0x24
 8011c8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011c92:	6005      	str	r5, [r0, #0]
 8011c94:	60c5      	str	r5, [r0, #12]
 8011c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c98:	6819      	ldr	r1, [r3, #0]
 8011c9a:	b151      	cbz	r1, 8011cb2 <_dtoa_r+0x4a>
 8011c9c:	685a      	ldr	r2, [r3, #4]
 8011c9e:	604a      	str	r2, [r1, #4]
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	4093      	lsls	r3, r2
 8011ca4:	608b      	str	r3, [r1, #8]
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f001 fb27 	bl	80132fa <_Bfree>
 8011cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cae:	2200      	movs	r2, #0
 8011cb0:	601a      	str	r2, [r3, #0]
 8011cb2:	1e3b      	subs	r3, r7, #0
 8011cb4:	bfbb      	ittet	lt
 8011cb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011cba:	9301      	strlt	r3, [sp, #4]
 8011cbc:	2300      	movge	r3, #0
 8011cbe:	2201      	movlt	r2, #1
 8011cc0:	bfac      	ite	ge
 8011cc2:	f8c8 3000 	strge.w	r3, [r8]
 8011cc6:	f8c8 2000 	strlt.w	r2, [r8]
 8011cca:	4baf      	ldr	r3, [pc, #700]	; (8011f88 <_dtoa_r+0x320>)
 8011ccc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011cd0:	ea33 0308 	bics.w	r3, r3, r8
 8011cd4:	d114      	bne.n	8011d00 <_dtoa_r+0x98>
 8011cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011cd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8011cdc:	6013      	str	r3, [r2, #0]
 8011cde:	9b00      	ldr	r3, [sp, #0]
 8011ce0:	b923      	cbnz	r3, 8011cec <_dtoa_r+0x84>
 8011ce2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8011ce6:	2800      	cmp	r0, #0
 8011ce8:	f000 8542 	beq.w	8012770 <_dtoa_r+0xb08>
 8011cec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8011f9c <_dtoa_r+0x334>
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	f000 8544 	beq.w	8012780 <_dtoa_r+0xb18>
 8011cf8:	f10b 0303 	add.w	r3, fp, #3
 8011cfc:	f000 bd3e 	b.w	801277c <_dtoa_r+0xb14>
 8011d00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011d04:	2200      	movs	r2, #0
 8011d06:	2300      	movs	r3, #0
 8011d08:	4630      	mov	r0, r6
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	f7ee fef4 	bl	8000af8 <__aeabi_dcmpeq>
 8011d10:	4681      	mov	r9, r0
 8011d12:	b168      	cbz	r0, 8011d30 <_dtoa_r+0xc8>
 8011d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d16:	2301      	movs	r3, #1
 8011d18:	6013      	str	r3, [r2, #0]
 8011d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 8524 	beq.w	801276a <_dtoa_r+0xb02>
 8011d22:	4b9a      	ldr	r3, [pc, #616]	; (8011f8c <_dtoa_r+0x324>)
 8011d24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011d26:	f103 3bff 	add.w	fp, r3, #4294967295
 8011d2a:	6013      	str	r3, [r2, #0]
 8011d2c:	f000 bd28 	b.w	8012780 <_dtoa_r+0xb18>
 8011d30:	aa14      	add	r2, sp, #80	; 0x50
 8011d32:	a915      	add	r1, sp, #84	; 0x54
 8011d34:	ec47 6b10 	vmov	d0, r6, r7
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f001 fdeb 	bl	8013914 <__d2b>
 8011d3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011d42:	9004      	str	r0, [sp, #16]
 8011d44:	2d00      	cmp	r5, #0
 8011d46:	d07c      	beq.n	8011e42 <_dtoa_r+0x1da>
 8011d48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011d4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011d50:	46b2      	mov	sl, r6
 8011d52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8011d56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011d5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8011d5e:	2200      	movs	r2, #0
 8011d60:	4b8b      	ldr	r3, [pc, #556]	; (8011f90 <_dtoa_r+0x328>)
 8011d62:	4650      	mov	r0, sl
 8011d64:	4659      	mov	r1, fp
 8011d66:	f7ee faa7 	bl	80002b8 <__aeabi_dsub>
 8011d6a:	a381      	add	r3, pc, #516	; (adr r3, 8011f70 <_dtoa_r+0x308>)
 8011d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d70:	f7ee fc5a 	bl	8000628 <__aeabi_dmul>
 8011d74:	a380      	add	r3, pc, #512	; (adr r3, 8011f78 <_dtoa_r+0x310>)
 8011d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7a:	f7ee fa9f 	bl	80002bc <__adddf3>
 8011d7e:	4606      	mov	r6, r0
 8011d80:	4628      	mov	r0, r5
 8011d82:	460f      	mov	r7, r1
 8011d84:	f7ee fbe6 	bl	8000554 <__aeabi_i2d>
 8011d88:	a37d      	add	r3, pc, #500	; (adr r3, 8011f80 <_dtoa_r+0x318>)
 8011d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8e:	f7ee fc4b 	bl	8000628 <__aeabi_dmul>
 8011d92:	4602      	mov	r2, r0
 8011d94:	460b      	mov	r3, r1
 8011d96:	4630      	mov	r0, r6
 8011d98:	4639      	mov	r1, r7
 8011d9a:	f7ee fa8f 	bl	80002bc <__adddf3>
 8011d9e:	4606      	mov	r6, r0
 8011da0:	460f      	mov	r7, r1
 8011da2:	f7ee fef1 	bl	8000b88 <__aeabi_d2iz>
 8011da6:	2200      	movs	r2, #0
 8011da8:	4682      	mov	sl, r0
 8011daa:	2300      	movs	r3, #0
 8011dac:	4630      	mov	r0, r6
 8011dae:	4639      	mov	r1, r7
 8011db0:	f7ee feac 	bl	8000b0c <__aeabi_dcmplt>
 8011db4:	b148      	cbz	r0, 8011dca <_dtoa_r+0x162>
 8011db6:	4650      	mov	r0, sl
 8011db8:	f7ee fbcc 	bl	8000554 <__aeabi_i2d>
 8011dbc:	4632      	mov	r2, r6
 8011dbe:	463b      	mov	r3, r7
 8011dc0:	f7ee fe9a 	bl	8000af8 <__aeabi_dcmpeq>
 8011dc4:	b908      	cbnz	r0, 8011dca <_dtoa_r+0x162>
 8011dc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011dca:	f1ba 0f16 	cmp.w	sl, #22
 8011dce:	d859      	bhi.n	8011e84 <_dtoa_r+0x21c>
 8011dd0:	4970      	ldr	r1, [pc, #448]	; (8011f94 <_dtoa_r+0x32c>)
 8011dd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dde:	f7ee feb3 	bl	8000b48 <__aeabi_dcmpgt>
 8011de2:	2800      	cmp	r0, #0
 8011de4:	d050      	beq.n	8011e88 <_dtoa_r+0x220>
 8011de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011dea:	2300      	movs	r3, #0
 8011dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8011dee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011df0:	1b5d      	subs	r5, r3, r5
 8011df2:	f1b5 0801 	subs.w	r8, r5, #1
 8011df6:	bf49      	itett	mi
 8011df8:	f1c5 0301 	rsbmi	r3, r5, #1
 8011dfc:	2300      	movpl	r3, #0
 8011dfe:	9305      	strmi	r3, [sp, #20]
 8011e00:	f04f 0800 	movmi.w	r8, #0
 8011e04:	bf58      	it	pl
 8011e06:	9305      	strpl	r3, [sp, #20]
 8011e08:	f1ba 0f00 	cmp.w	sl, #0
 8011e0c:	db3e      	blt.n	8011e8c <_dtoa_r+0x224>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	44d0      	add	r8, sl
 8011e12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011e16:	9307      	str	r3, [sp, #28]
 8011e18:	9b06      	ldr	r3, [sp, #24]
 8011e1a:	2b09      	cmp	r3, #9
 8011e1c:	f200 8090 	bhi.w	8011f40 <_dtoa_r+0x2d8>
 8011e20:	2b05      	cmp	r3, #5
 8011e22:	bfc4      	itt	gt
 8011e24:	3b04      	subgt	r3, #4
 8011e26:	9306      	strgt	r3, [sp, #24]
 8011e28:	9b06      	ldr	r3, [sp, #24]
 8011e2a:	f1a3 0302 	sub.w	r3, r3, #2
 8011e2e:	bfcc      	ite	gt
 8011e30:	2500      	movgt	r5, #0
 8011e32:	2501      	movle	r5, #1
 8011e34:	2b03      	cmp	r3, #3
 8011e36:	f200 808f 	bhi.w	8011f58 <_dtoa_r+0x2f0>
 8011e3a:	e8df f003 	tbb	[pc, r3]
 8011e3e:	7f7d      	.short	0x7f7d
 8011e40:	7131      	.short	0x7131
 8011e42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8011e46:	441d      	add	r5, r3
 8011e48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011e4c:	2820      	cmp	r0, #32
 8011e4e:	dd13      	ble.n	8011e78 <_dtoa_r+0x210>
 8011e50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8011e54:	9b00      	ldr	r3, [sp, #0]
 8011e56:	fa08 f800 	lsl.w	r8, r8, r0
 8011e5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011e5e:	fa23 f000 	lsr.w	r0, r3, r0
 8011e62:	ea48 0000 	orr.w	r0, r8, r0
 8011e66:	f7ee fb65 	bl	8000534 <__aeabi_ui2d>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	4682      	mov	sl, r0
 8011e6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8011e72:	3d01      	subs	r5, #1
 8011e74:	9313      	str	r3, [sp, #76]	; 0x4c
 8011e76:	e772      	b.n	8011d5e <_dtoa_r+0xf6>
 8011e78:	9b00      	ldr	r3, [sp, #0]
 8011e7a:	f1c0 0020 	rsb	r0, r0, #32
 8011e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8011e82:	e7f0      	b.n	8011e66 <_dtoa_r+0x1fe>
 8011e84:	2301      	movs	r3, #1
 8011e86:	e7b1      	b.n	8011dec <_dtoa_r+0x184>
 8011e88:	900f      	str	r0, [sp, #60]	; 0x3c
 8011e8a:	e7b0      	b.n	8011dee <_dtoa_r+0x186>
 8011e8c:	9b05      	ldr	r3, [sp, #20]
 8011e8e:	eba3 030a 	sub.w	r3, r3, sl
 8011e92:	9305      	str	r3, [sp, #20]
 8011e94:	f1ca 0300 	rsb	r3, sl, #0
 8011e98:	9307      	str	r3, [sp, #28]
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8011e9e:	e7bb      	b.n	8011e18 <_dtoa_r+0x1b0>
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8011ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	dd59      	ble.n	8011f5e <_dtoa_r+0x2f6>
 8011eaa:	9302      	str	r3, [sp, #8]
 8011eac:	4699      	mov	r9, r3
 8011eae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	6072      	str	r2, [r6, #4]
 8011eb4:	2204      	movs	r2, #4
 8011eb6:	f102 0014 	add.w	r0, r2, #20
 8011eba:	4298      	cmp	r0, r3
 8011ebc:	6871      	ldr	r1, [r6, #4]
 8011ebe:	d953      	bls.n	8011f68 <_dtoa_r+0x300>
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f001 f9e6 	bl	8013292 <_Balloc>
 8011ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ec8:	6030      	str	r0, [r6, #0]
 8011eca:	f1b9 0f0e 	cmp.w	r9, #14
 8011ece:	f8d3 b000 	ldr.w	fp, [r3]
 8011ed2:	f200 80e6 	bhi.w	80120a2 <_dtoa_r+0x43a>
 8011ed6:	2d00      	cmp	r5, #0
 8011ed8:	f000 80e3 	beq.w	80120a2 <_dtoa_r+0x43a>
 8011edc:	ed9d 7b00 	vldr	d7, [sp]
 8011ee0:	f1ba 0f00 	cmp.w	sl, #0
 8011ee4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011ee8:	dd74      	ble.n	8011fd4 <_dtoa_r+0x36c>
 8011eea:	4a2a      	ldr	r2, [pc, #168]	; (8011f94 <_dtoa_r+0x32c>)
 8011eec:	f00a 030f 	and.w	r3, sl, #15
 8011ef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011ef4:	ed93 7b00 	vldr	d7, [r3]
 8011ef8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011efc:	06f0      	lsls	r0, r6, #27
 8011efe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011f02:	d565      	bpl.n	8011fd0 <_dtoa_r+0x368>
 8011f04:	4b24      	ldr	r3, [pc, #144]	; (8011f98 <_dtoa_r+0x330>)
 8011f06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011f0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011f0e:	f7ee fcb5 	bl	800087c <__aeabi_ddiv>
 8011f12:	e9cd 0100 	strd	r0, r1, [sp]
 8011f16:	f006 060f 	and.w	r6, r6, #15
 8011f1a:	2503      	movs	r5, #3
 8011f1c:	4f1e      	ldr	r7, [pc, #120]	; (8011f98 <_dtoa_r+0x330>)
 8011f1e:	e04c      	b.n	8011fba <_dtoa_r+0x352>
 8011f20:	2301      	movs	r3, #1
 8011f22:	930a      	str	r3, [sp, #40]	; 0x28
 8011f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f26:	4453      	add	r3, sl
 8011f28:	f103 0901 	add.w	r9, r3, #1
 8011f2c:	9302      	str	r3, [sp, #8]
 8011f2e:	464b      	mov	r3, r9
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	bfb8      	it	lt
 8011f34:	2301      	movlt	r3, #1
 8011f36:	e7ba      	b.n	8011eae <_dtoa_r+0x246>
 8011f38:	2300      	movs	r3, #0
 8011f3a:	e7b2      	b.n	8011ea2 <_dtoa_r+0x23a>
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	e7f0      	b.n	8011f22 <_dtoa_r+0x2ba>
 8011f40:	2501      	movs	r5, #1
 8011f42:	2300      	movs	r3, #0
 8011f44:	9306      	str	r3, [sp, #24]
 8011f46:	950a      	str	r5, [sp, #40]	; 0x28
 8011f48:	f04f 33ff 	mov.w	r3, #4294967295
 8011f4c:	9302      	str	r3, [sp, #8]
 8011f4e:	4699      	mov	r9, r3
 8011f50:	2200      	movs	r2, #0
 8011f52:	2312      	movs	r3, #18
 8011f54:	920b      	str	r2, [sp, #44]	; 0x2c
 8011f56:	e7aa      	b.n	8011eae <_dtoa_r+0x246>
 8011f58:	2301      	movs	r3, #1
 8011f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8011f5c:	e7f4      	b.n	8011f48 <_dtoa_r+0x2e0>
 8011f5e:	2301      	movs	r3, #1
 8011f60:	9302      	str	r3, [sp, #8]
 8011f62:	4699      	mov	r9, r3
 8011f64:	461a      	mov	r2, r3
 8011f66:	e7f5      	b.n	8011f54 <_dtoa_r+0x2ec>
 8011f68:	3101      	adds	r1, #1
 8011f6a:	6071      	str	r1, [r6, #4]
 8011f6c:	0052      	lsls	r2, r2, #1
 8011f6e:	e7a2      	b.n	8011eb6 <_dtoa_r+0x24e>
 8011f70:	636f4361 	.word	0x636f4361
 8011f74:	3fd287a7 	.word	0x3fd287a7
 8011f78:	8b60c8b3 	.word	0x8b60c8b3
 8011f7c:	3fc68a28 	.word	0x3fc68a28
 8011f80:	509f79fb 	.word	0x509f79fb
 8011f84:	3fd34413 	.word	0x3fd34413
 8011f88:	7ff00000 	.word	0x7ff00000
 8011f8c:	0801533c 	.word	0x0801533c
 8011f90:	3ff80000 	.word	0x3ff80000
 8011f94:	08015240 	.word	0x08015240
 8011f98:	08015218 	.word	0x08015218
 8011f9c:	080151a1 	.word	0x080151a1
 8011fa0:	07f1      	lsls	r1, r6, #31
 8011fa2:	d508      	bpl.n	8011fb6 <_dtoa_r+0x34e>
 8011fa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fac:	f7ee fb3c 	bl	8000628 <__aeabi_dmul>
 8011fb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011fb4:	3501      	adds	r5, #1
 8011fb6:	1076      	asrs	r6, r6, #1
 8011fb8:	3708      	adds	r7, #8
 8011fba:	2e00      	cmp	r6, #0
 8011fbc:	d1f0      	bne.n	8011fa0 <_dtoa_r+0x338>
 8011fbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fc6:	f7ee fc59 	bl	800087c <__aeabi_ddiv>
 8011fca:	e9cd 0100 	strd	r0, r1, [sp]
 8011fce:	e01a      	b.n	8012006 <_dtoa_r+0x39e>
 8011fd0:	2502      	movs	r5, #2
 8011fd2:	e7a3      	b.n	8011f1c <_dtoa_r+0x2b4>
 8011fd4:	f000 80a0 	beq.w	8012118 <_dtoa_r+0x4b0>
 8011fd8:	f1ca 0600 	rsb	r6, sl, #0
 8011fdc:	4b9f      	ldr	r3, [pc, #636]	; (801225c <_dtoa_r+0x5f4>)
 8011fde:	4fa0      	ldr	r7, [pc, #640]	; (8012260 <_dtoa_r+0x5f8>)
 8011fe0:	f006 020f 	and.w	r2, r6, #15
 8011fe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011ff0:	f7ee fb1a 	bl	8000628 <__aeabi_dmul>
 8011ff4:	e9cd 0100 	strd	r0, r1, [sp]
 8011ff8:	1136      	asrs	r6, r6, #4
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	2502      	movs	r5, #2
 8011ffe:	2e00      	cmp	r6, #0
 8012000:	d17f      	bne.n	8012102 <_dtoa_r+0x49a>
 8012002:	2b00      	cmp	r3, #0
 8012004:	d1e1      	bne.n	8011fca <_dtoa_r+0x362>
 8012006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012008:	2b00      	cmp	r3, #0
 801200a:	f000 8087 	beq.w	801211c <_dtoa_r+0x4b4>
 801200e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012012:	2200      	movs	r2, #0
 8012014:	4b93      	ldr	r3, [pc, #588]	; (8012264 <_dtoa_r+0x5fc>)
 8012016:	4630      	mov	r0, r6
 8012018:	4639      	mov	r1, r7
 801201a:	f7ee fd77 	bl	8000b0c <__aeabi_dcmplt>
 801201e:	2800      	cmp	r0, #0
 8012020:	d07c      	beq.n	801211c <_dtoa_r+0x4b4>
 8012022:	f1b9 0f00 	cmp.w	r9, #0
 8012026:	d079      	beq.n	801211c <_dtoa_r+0x4b4>
 8012028:	9b02      	ldr	r3, [sp, #8]
 801202a:	2b00      	cmp	r3, #0
 801202c:	dd35      	ble.n	801209a <_dtoa_r+0x432>
 801202e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012032:	9308      	str	r3, [sp, #32]
 8012034:	4639      	mov	r1, r7
 8012036:	2200      	movs	r2, #0
 8012038:	4b8b      	ldr	r3, [pc, #556]	; (8012268 <_dtoa_r+0x600>)
 801203a:	4630      	mov	r0, r6
 801203c:	f7ee faf4 	bl	8000628 <__aeabi_dmul>
 8012040:	e9cd 0100 	strd	r0, r1, [sp]
 8012044:	9f02      	ldr	r7, [sp, #8]
 8012046:	3501      	adds	r5, #1
 8012048:	4628      	mov	r0, r5
 801204a:	f7ee fa83 	bl	8000554 <__aeabi_i2d>
 801204e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012052:	f7ee fae9 	bl	8000628 <__aeabi_dmul>
 8012056:	2200      	movs	r2, #0
 8012058:	4b84      	ldr	r3, [pc, #528]	; (801226c <_dtoa_r+0x604>)
 801205a:	f7ee f92f 	bl	80002bc <__adddf3>
 801205e:	4605      	mov	r5, r0
 8012060:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012064:	2f00      	cmp	r7, #0
 8012066:	d15d      	bne.n	8012124 <_dtoa_r+0x4bc>
 8012068:	2200      	movs	r2, #0
 801206a:	4b81      	ldr	r3, [pc, #516]	; (8012270 <_dtoa_r+0x608>)
 801206c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012070:	f7ee f922 	bl	80002b8 <__aeabi_dsub>
 8012074:	462a      	mov	r2, r5
 8012076:	4633      	mov	r3, r6
 8012078:	e9cd 0100 	strd	r0, r1, [sp]
 801207c:	f7ee fd64 	bl	8000b48 <__aeabi_dcmpgt>
 8012080:	2800      	cmp	r0, #0
 8012082:	f040 8288 	bne.w	8012596 <_dtoa_r+0x92e>
 8012086:	462a      	mov	r2, r5
 8012088:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801208c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012090:	f7ee fd3c 	bl	8000b0c <__aeabi_dcmplt>
 8012094:	2800      	cmp	r0, #0
 8012096:	f040 827c 	bne.w	8012592 <_dtoa_r+0x92a>
 801209a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801209e:	e9cd 2300 	strd	r2, r3, [sp]
 80120a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	f2c0 8150 	blt.w	801234a <_dtoa_r+0x6e2>
 80120aa:	f1ba 0f0e 	cmp.w	sl, #14
 80120ae:	f300 814c 	bgt.w	801234a <_dtoa_r+0x6e2>
 80120b2:	4b6a      	ldr	r3, [pc, #424]	; (801225c <_dtoa_r+0x5f4>)
 80120b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80120b8:	ed93 7b00 	vldr	d7, [r3]
 80120bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120be:	2b00      	cmp	r3, #0
 80120c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80120c4:	f280 80d8 	bge.w	8012278 <_dtoa_r+0x610>
 80120c8:	f1b9 0f00 	cmp.w	r9, #0
 80120cc:	f300 80d4 	bgt.w	8012278 <_dtoa_r+0x610>
 80120d0:	f040 825e 	bne.w	8012590 <_dtoa_r+0x928>
 80120d4:	2200      	movs	r2, #0
 80120d6:	4b66      	ldr	r3, [pc, #408]	; (8012270 <_dtoa_r+0x608>)
 80120d8:	ec51 0b17 	vmov	r0, r1, d7
 80120dc:	f7ee faa4 	bl	8000628 <__aeabi_dmul>
 80120e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120e4:	f7ee fd26 	bl	8000b34 <__aeabi_dcmpge>
 80120e8:	464f      	mov	r7, r9
 80120ea:	464e      	mov	r6, r9
 80120ec:	2800      	cmp	r0, #0
 80120ee:	f040 8234 	bne.w	801255a <_dtoa_r+0x8f2>
 80120f2:	2331      	movs	r3, #49	; 0x31
 80120f4:	f10b 0501 	add.w	r5, fp, #1
 80120f8:	f88b 3000 	strb.w	r3, [fp]
 80120fc:	f10a 0a01 	add.w	sl, sl, #1
 8012100:	e22f      	b.n	8012562 <_dtoa_r+0x8fa>
 8012102:	07f2      	lsls	r2, r6, #31
 8012104:	d505      	bpl.n	8012112 <_dtoa_r+0x4aa>
 8012106:	e9d7 2300 	ldrd	r2, r3, [r7]
 801210a:	f7ee fa8d 	bl	8000628 <__aeabi_dmul>
 801210e:	3501      	adds	r5, #1
 8012110:	2301      	movs	r3, #1
 8012112:	1076      	asrs	r6, r6, #1
 8012114:	3708      	adds	r7, #8
 8012116:	e772      	b.n	8011ffe <_dtoa_r+0x396>
 8012118:	2502      	movs	r5, #2
 801211a:	e774      	b.n	8012006 <_dtoa_r+0x39e>
 801211c:	f8cd a020 	str.w	sl, [sp, #32]
 8012120:	464f      	mov	r7, r9
 8012122:	e791      	b.n	8012048 <_dtoa_r+0x3e0>
 8012124:	4b4d      	ldr	r3, [pc, #308]	; (801225c <_dtoa_r+0x5f4>)
 8012126:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801212a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801212e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012130:	2b00      	cmp	r3, #0
 8012132:	d047      	beq.n	80121c4 <_dtoa_r+0x55c>
 8012134:	4602      	mov	r2, r0
 8012136:	460b      	mov	r3, r1
 8012138:	2000      	movs	r0, #0
 801213a:	494e      	ldr	r1, [pc, #312]	; (8012274 <_dtoa_r+0x60c>)
 801213c:	f7ee fb9e 	bl	800087c <__aeabi_ddiv>
 8012140:	462a      	mov	r2, r5
 8012142:	4633      	mov	r3, r6
 8012144:	f7ee f8b8 	bl	80002b8 <__aeabi_dsub>
 8012148:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801214c:	465d      	mov	r5, fp
 801214e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012152:	f7ee fd19 	bl	8000b88 <__aeabi_d2iz>
 8012156:	4606      	mov	r6, r0
 8012158:	f7ee f9fc 	bl	8000554 <__aeabi_i2d>
 801215c:	4602      	mov	r2, r0
 801215e:	460b      	mov	r3, r1
 8012160:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012164:	f7ee f8a8 	bl	80002b8 <__aeabi_dsub>
 8012168:	3630      	adds	r6, #48	; 0x30
 801216a:	f805 6b01 	strb.w	r6, [r5], #1
 801216e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012172:	e9cd 0100 	strd	r0, r1, [sp]
 8012176:	f7ee fcc9 	bl	8000b0c <__aeabi_dcmplt>
 801217a:	2800      	cmp	r0, #0
 801217c:	d163      	bne.n	8012246 <_dtoa_r+0x5de>
 801217e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012182:	2000      	movs	r0, #0
 8012184:	4937      	ldr	r1, [pc, #220]	; (8012264 <_dtoa_r+0x5fc>)
 8012186:	f7ee f897 	bl	80002b8 <__aeabi_dsub>
 801218a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801218e:	f7ee fcbd 	bl	8000b0c <__aeabi_dcmplt>
 8012192:	2800      	cmp	r0, #0
 8012194:	f040 80b7 	bne.w	8012306 <_dtoa_r+0x69e>
 8012198:	eba5 030b 	sub.w	r3, r5, fp
 801219c:	429f      	cmp	r7, r3
 801219e:	f77f af7c 	ble.w	801209a <_dtoa_r+0x432>
 80121a2:	2200      	movs	r2, #0
 80121a4:	4b30      	ldr	r3, [pc, #192]	; (8012268 <_dtoa_r+0x600>)
 80121a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80121aa:	f7ee fa3d 	bl	8000628 <__aeabi_dmul>
 80121ae:	2200      	movs	r2, #0
 80121b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80121b4:	4b2c      	ldr	r3, [pc, #176]	; (8012268 <_dtoa_r+0x600>)
 80121b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121ba:	f7ee fa35 	bl	8000628 <__aeabi_dmul>
 80121be:	e9cd 0100 	strd	r0, r1, [sp]
 80121c2:	e7c4      	b.n	801214e <_dtoa_r+0x4e6>
 80121c4:	462a      	mov	r2, r5
 80121c6:	4633      	mov	r3, r6
 80121c8:	f7ee fa2e 	bl	8000628 <__aeabi_dmul>
 80121cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80121d0:	eb0b 0507 	add.w	r5, fp, r7
 80121d4:	465e      	mov	r6, fp
 80121d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121da:	f7ee fcd5 	bl	8000b88 <__aeabi_d2iz>
 80121de:	4607      	mov	r7, r0
 80121e0:	f7ee f9b8 	bl	8000554 <__aeabi_i2d>
 80121e4:	3730      	adds	r7, #48	; 0x30
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121ee:	f7ee f863 	bl	80002b8 <__aeabi_dsub>
 80121f2:	f806 7b01 	strb.w	r7, [r6], #1
 80121f6:	42ae      	cmp	r6, r5
 80121f8:	e9cd 0100 	strd	r0, r1, [sp]
 80121fc:	f04f 0200 	mov.w	r2, #0
 8012200:	d126      	bne.n	8012250 <_dtoa_r+0x5e8>
 8012202:	4b1c      	ldr	r3, [pc, #112]	; (8012274 <_dtoa_r+0x60c>)
 8012204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012208:	f7ee f858 	bl	80002bc <__adddf3>
 801220c:	4602      	mov	r2, r0
 801220e:	460b      	mov	r3, r1
 8012210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012214:	f7ee fc98 	bl	8000b48 <__aeabi_dcmpgt>
 8012218:	2800      	cmp	r0, #0
 801221a:	d174      	bne.n	8012306 <_dtoa_r+0x69e>
 801221c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012220:	2000      	movs	r0, #0
 8012222:	4914      	ldr	r1, [pc, #80]	; (8012274 <_dtoa_r+0x60c>)
 8012224:	f7ee f848 	bl	80002b8 <__aeabi_dsub>
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012230:	f7ee fc6c 	bl	8000b0c <__aeabi_dcmplt>
 8012234:	2800      	cmp	r0, #0
 8012236:	f43f af30 	beq.w	801209a <_dtoa_r+0x432>
 801223a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801223e:	2b30      	cmp	r3, #48	; 0x30
 8012240:	f105 32ff 	add.w	r2, r5, #4294967295
 8012244:	d002      	beq.n	801224c <_dtoa_r+0x5e4>
 8012246:	f8dd a020 	ldr.w	sl, [sp, #32]
 801224a:	e04a      	b.n	80122e2 <_dtoa_r+0x67a>
 801224c:	4615      	mov	r5, r2
 801224e:	e7f4      	b.n	801223a <_dtoa_r+0x5d2>
 8012250:	4b05      	ldr	r3, [pc, #20]	; (8012268 <_dtoa_r+0x600>)
 8012252:	f7ee f9e9 	bl	8000628 <__aeabi_dmul>
 8012256:	e9cd 0100 	strd	r0, r1, [sp]
 801225a:	e7bc      	b.n	80121d6 <_dtoa_r+0x56e>
 801225c:	08015240 	.word	0x08015240
 8012260:	08015218 	.word	0x08015218
 8012264:	3ff00000 	.word	0x3ff00000
 8012268:	40240000 	.word	0x40240000
 801226c:	401c0000 	.word	0x401c0000
 8012270:	40140000 	.word	0x40140000
 8012274:	3fe00000 	.word	0x3fe00000
 8012278:	e9dd 6700 	ldrd	r6, r7, [sp]
 801227c:	465d      	mov	r5, fp
 801227e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012282:	4630      	mov	r0, r6
 8012284:	4639      	mov	r1, r7
 8012286:	f7ee faf9 	bl	800087c <__aeabi_ddiv>
 801228a:	f7ee fc7d 	bl	8000b88 <__aeabi_d2iz>
 801228e:	4680      	mov	r8, r0
 8012290:	f7ee f960 	bl	8000554 <__aeabi_i2d>
 8012294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012298:	f7ee f9c6 	bl	8000628 <__aeabi_dmul>
 801229c:	4602      	mov	r2, r0
 801229e:	460b      	mov	r3, r1
 80122a0:	4630      	mov	r0, r6
 80122a2:	4639      	mov	r1, r7
 80122a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80122a8:	f7ee f806 	bl	80002b8 <__aeabi_dsub>
 80122ac:	f805 6b01 	strb.w	r6, [r5], #1
 80122b0:	eba5 060b 	sub.w	r6, r5, fp
 80122b4:	45b1      	cmp	r9, r6
 80122b6:	4602      	mov	r2, r0
 80122b8:	460b      	mov	r3, r1
 80122ba:	d139      	bne.n	8012330 <_dtoa_r+0x6c8>
 80122bc:	f7ed fffe 	bl	80002bc <__adddf3>
 80122c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122c4:	4606      	mov	r6, r0
 80122c6:	460f      	mov	r7, r1
 80122c8:	f7ee fc3e 	bl	8000b48 <__aeabi_dcmpgt>
 80122cc:	b9c8      	cbnz	r0, 8012302 <_dtoa_r+0x69a>
 80122ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122d2:	4630      	mov	r0, r6
 80122d4:	4639      	mov	r1, r7
 80122d6:	f7ee fc0f 	bl	8000af8 <__aeabi_dcmpeq>
 80122da:	b110      	cbz	r0, 80122e2 <_dtoa_r+0x67a>
 80122dc:	f018 0f01 	tst.w	r8, #1
 80122e0:	d10f      	bne.n	8012302 <_dtoa_r+0x69a>
 80122e2:	9904      	ldr	r1, [sp, #16]
 80122e4:	4620      	mov	r0, r4
 80122e6:	f001 f808 	bl	80132fa <_Bfree>
 80122ea:	2300      	movs	r3, #0
 80122ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80122ee:	702b      	strb	r3, [r5, #0]
 80122f0:	f10a 0301 	add.w	r3, sl, #1
 80122f4:	6013      	str	r3, [r2, #0]
 80122f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f000 8241 	beq.w	8012780 <_dtoa_r+0xb18>
 80122fe:	601d      	str	r5, [r3, #0]
 8012300:	e23e      	b.n	8012780 <_dtoa_r+0xb18>
 8012302:	f8cd a020 	str.w	sl, [sp, #32]
 8012306:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801230a:	2a39      	cmp	r2, #57	; 0x39
 801230c:	f105 33ff 	add.w	r3, r5, #4294967295
 8012310:	d108      	bne.n	8012324 <_dtoa_r+0x6bc>
 8012312:	459b      	cmp	fp, r3
 8012314:	d10a      	bne.n	801232c <_dtoa_r+0x6c4>
 8012316:	9b08      	ldr	r3, [sp, #32]
 8012318:	3301      	adds	r3, #1
 801231a:	9308      	str	r3, [sp, #32]
 801231c:	2330      	movs	r3, #48	; 0x30
 801231e:	f88b 3000 	strb.w	r3, [fp]
 8012322:	465b      	mov	r3, fp
 8012324:	781a      	ldrb	r2, [r3, #0]
 8012326:	3201      	adds	r2, #1
 8012328:	701a      	strb	r2, [r3, #0]
 801232a:	e78c      	b.n	8012246 <_dtoa_r+0x5de>
 801232c:	461d      	mov	r5, r3
 801232e:	e7ea      	b.n	8012306 <_dtoa_r+0x69e>
 8012330:	2200      	movs	r2, #0
 8012332:	4b9b      	ldr	r3, [pc, #620]	; (80125a0 <_dtoa_r+0x938>)
 8012334:	f7ee f978 	bl	8000628 <__aeabi_dmul>
 8012338:	2200      	movs	r2, #0
 801233a:	2300      	movs	r3, #0
 801233c:	4606      	mov	r6, r0
 801233e:	460f      	mov	r7, r1
 8012340:	f7ee fbda 	bl	8000af8 <__aeabi_dcmpeq>
 8012344:	2800      	cmp	r0, #0
 8012346:	d09a      	beq.n	801227e <_dtoa_r+0x616>
 8012348:	e7cb      	b.n	80122e2 <_dtoa_r+0x67a>
 801234a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801234c:	2a00      	cmp	r2, #0
 801234e:	f000 808b 	beq.w	8012468 <_dtoa_r+0x800>
 8012352:	9a06      	ldr	r2, [sp, #24]
 8012354:	2a01      	cmp	r2, #1
 8012356:	dc6e      	bgt.n	8012436 <_dtoa_r+0x7ce>
 8012358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801235a:	2a00      	cmp	r2, #0
 801235c:	d067      	beq.n	801242e <_dtoa_r+0x7c6>
 801235e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012362:	9f07      	ldr	r7, [sp, #28]
 8012364:	9d05      	ldr	r5, [sp, #20]
 8012366:	9a05      	ldr	r2, [sp, #20]
 8012368:	2101      	movs	r1, #1
 801236a:	441a      	add	r2, r3
 801236c:	4620      	mov	r0, r4
 801236e:	9205      	str	r2, [sp, #20]
 8012370:	4498      	add	r8, r3
 8012372:	f001 f8a0 	bl	80134b6 <__i2b>
 8012376:	4606      	mov	r6, r0
 8012378:	2d00      	cmp	r5, #0
 801237a:	dd0c      	ble.n	8012396 <_dtoa_r+0x72e>
 801237c:	f1b8 0f00 	cmp.w	r8, #0
 8012380:	dd09      	ble.n	8012396 <_dtoa_r+0x72e>
 8012382:	4545      	cmp	r5, r8
 8012384:	9a05      	ldr	r2, [sp, #20]
 8012386:	462b      	mov	r3, r5
 8012388:	bfa8      	it	ge
 801238a:	4643      	movge	r3, r8
 801238c:	1ad2      	subs	r2, r2, r3
 801238e:	9205      	str	r2, [sp, #20]
 8012390:	1aed      	subs	r5, r5, r3
 8012392:	eba8 0803 	sub.w	r8, r8, r3
 8012396:	9b07      	ldr	r3, [sp, #28]
 8012398:	b1eb      	cbz	r3, 80123d6 <_dtoa_r+0x76e>
 801239a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801239c:	2b00      	cmp	r3, #0
 801239e:	d067      	beq.n	8012470 <_dtoa_r+0x808>
 80123a0:	b18f      	cbz	r7, 80123c6 <_dtoa_r+0x75e>
 80123a2:	4631      	mov	r1, r6
 80123a4:	463a      	mov	r2, r7
 80123a6:	4620      	mov	r0, r4
 80123a8:	f001 f924 	bl	80135f4 <__pow5mult>
 80123ac:	9a04      	ldr	r2, [sp, #16]
 80123ae:	4601      	mov	r1, r0
 80123b0:	4606      	mov	r6, r0
 80123b2:	4620      	mov	r0, r4
 80123b4:	f001 f888 	bl	80134c8 <__multiply>
 80123b8:	9904      	ldr	r1, [sp, #16]
 80123ba:	9008      	str	r0, [sp, #32]
 80123bc:	4620      	mov	r0, r4
 80123be:	f000 ff9c 	bl	80132fa <_Bfree>
 80123c2:	9b08      	ldr	r3, [sp, #32]
 80123c4:	9304      	str	r3, [sp, #16]
 80123c6:	9b07      	ldr	r3, [sp, #28]
 80123c8:	1bda      	subs	r2, r3, r7
 80123ca:	d004      	beq.n	80123d6 <_dtoa_r+0x76e>
 80123cc:	9904      	ldr	r1, [sp, #16]
 80123ce:	4620      	mov	r0, r4
 80123d0:	f001 f910 	bl	80135f4 <__pow5mult>
 80123d4:	9004      	str	r0, [sp, #16]
 80123d6:	2101      	movs	r1, #1
 80123d8:	4620      	mov	r0, r4
 80123da:	f001 f86c 	bl	80134b6 <__i2b>
 80123de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123e0:	4607      	mov	r7, r0
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f000 81d0 	beq.w	8012788 <_dtoa_r+0xb20>
 80123e8:	461a      	mov	r2, r3
 80123ea:	4601      	mov	r1, r0
 80123ec:	4620      	mov	r0, r4
 80123ee:	f001 f901 	bl	80135f4 <__pow5mult>
 80123f2:	9b06      	ldr	r3, [sp, #24]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	4607      	mov	r7, r0
 80123f8:	dc40      	bgt.n	801247c <_dtoa_r+0x814>
 80123fa:	9b00      	ldr	r3, [sp, #0]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d139      	bne.n	8012474 <_dtoa_r+0x80c>
 8012400:	9b01      	ldr	r3, [sp, #4]
 8012402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012406:	2b00      	cmp	r3, #0
 8012408:	d136      	bne.n	8012478 <_dtoa_r+0x810>
 801240a:	9b01      	ldr	r3, [sp, #4]
 801240c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012410:	0d1b      	lsrs	r3, r3, #20
 8012412:	051b      	lsls	r3, r3, #20
 8012414:	b12b      	cbz	r3, 8012422 <_dtoa_r+0x7ba>
 8012416:	9b05      	ldr	r3, [sp, #20]
 8012418:	3301      	adds	r3, #1
 801241a:	9305      	str	r3, [sp, #20]
 801241c:	f108 0801 	add.w	r8, r8, #1
 8012420:	2301      	movs	r3, #1
 8012422:	9307      	str	r3, [sp, #28]
 8012424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012426:	2b00      	cmp	r3, #0
 8012428:	d12a      	bne.n	8012480 <_dtoa_r+0x818>
 801242a:	2001      	movs	r0, #1
 801242c:	e030      	b.n	8012490 <_dtoa_r+0x828>
 801242e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012430:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012434:	e795      	b.n	8012362 <_dtoa_r+0x6fa>
 8012436:	9b07      	ldr	r3, [sp, #28]
 8012438:	f109 37ff 	add.w	r7, r9, #4294967295
 801243c:	42bb      	cmp	r3, r7
 801243e:	bfbf      	itttt	lt
 8012440:	9b07      	ldrlt	r3, [sp, #28]
 8012442:	9707      	strlt	r7, [sp, #28]
 8012444:	1afa      	sublt	r2, r7, r3
 8012446:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012448:	bfbb      	ittet	lt
 801244a:	189b      	addlt	r3, r3, r2
 801244c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801244e:	1bdf      	subge	r7, r3, r7
 8012450:	2700      	movlt	r7, #0
 8012452:	f1b9 0f00 	cmp.w	r9, #0
 8012456:	bfb5      	itete	lt
 8012458:	9b05      	ldrlt	r3, [sp, #20]
 801245a:	9d05      	ldrge	r5, [sp, #20]
 801245c:	eba3 0509 	sublt.w	r5, r3, r9
 8012460:	464b      	movge	r3, r9
 8012462:	bfb8      	it	lt
 8012464:	2300      	movlt	r3, #0
 8012466:	e77e      	b.n	8012366 <_dtoa_r+0x6fe>
 8012468:	9f07      	ldr	r7, [sp, #28]
 801246a:	9d05      	ldr	r5, [sp, #20]
 801246c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801246e:	e783      	b.n	8012378 <_dtoa_r+0x710>
 8012470:	9a07      	ldr	r2, [sp, #28]
 8012472:	e7ab      	b.n	80123cc <_dtoa_r+0x764>
 8012474:	2300      	movs	r3, #0
 8012476:	e7d4      	b.n	8012422 <_dtoa_r+0x7ba>
 8012478:	9b00      	ldr	r3, [sp, #0]
 801247a:	e7d2      	b.n	8012422 <_dtoa_r+0x7ba>
 801247c:	2300      	movs	r3, #0
 801247e:	9307      	str	r3, [sp, #28]
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012486:	6918      	ldr	r0, [r3, #16]
 8012488:	f000 ffc7 	bl	801341a <__hi0bits>
 801248c:	f1c0 0020 	rsb	r0, r0, #32
 8012490:	4440      	add	r0, r8
 8012492:	f010 001f 	ands.w	r0, r0, #31
 8012496:	d047      	beq.n	8012528 <_dtoa_r+0x8c0>
 8012498:	f1c0 0320 	rsb	r3, r0, #32
 801249c:	2b04      	cmp	r3, #4
 801249e:	dd3b      	ble.n	8012518 <_dtoa_r+0x8b0>
 80124a0:	9b05      	ldr	r3, [sp, #20]
 80124a2:	f1c0 001c 	rsb	r0, r0, #28
 80124a6:	4403      	add	r3, r0
 80124a8:	9305      	str	r3, [sp, #20]
 80124aa:	4405      	add	r5, r0
 80124ac:	4480      	add	r8, r0
 80124ae:	9b05      	ldr	r3, [sp, #20]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	dd05      	ble.n	80124c0 <_dtoa_r+0x858>
 80124b4:	461a      	mov	r2, r3
 80124b6:	9904      	ldr	r1, [sp, #16]
 80124b8:	4620      	mov	r0, r4
 80124ba:	f001 f8e9 	bl	8013690 <__lshift>
 80124be:	9004      	str	r0, [sp, #16]
 80124c0:	f1b8 0f00 	cmp.w	r8, #0
 80124c4:	dd05      	ble.n	80124d2 <_dtoa_r+0x86a>
 80124c6:	4639      	mov	r1, r7
 80124c8:	4642      	mov	r2, r8
 80124ca:	4620      	mov	r0, r4
 80124cc:	f001 f8e0 	bl	8013690 <__lshift>
 80124d0:	4607      	mov	r7, r0
 80124d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124d4:	b353      	cbz	r3, 801252c <_dtoa_r+0x8c4>
 80124d6:	4639      	mov	r1, r7
 80124d8:	9804      	ldr	r0, [sp, #16]
 80124da:	f001 f92d 	bl	8013738 <__mcmp>
 80124de:	2800      	cmp	r0, #0
 80124e0:	da24      	bge.n	801252c <_dtoa_r+0x8c4>
 80124e2:	2300      	movs	r3, #0
 80124e4:	220a      	movs	r2, #10
 80124e6:	9904      	ldr	r1, [sp, #16]
 80124e8:	4620      	mov	r0, r4
 80124ea:	f000 ff1d 	bl	8013328 <__multadd>
 80124ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124f0:	9004      	str	r0, [sp, #16]
 80124f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	f000 814d 	beq.w	8012796 <_dtoa_r+0xb2e>
 80124fc:	2300      	movs	r3, #0
 80124fe:	4631      	mov	r1, r6
 8012500:	220a      	movs	r2, #10
 8012502:	4620      	mov	r0, r4
 8012504:	f000 ff10 	bl	8013328 <__multadd>
 8012508:	9b02      	ldr	r3, [sp, #8]
 801250a:	2b00      	cmp	r3, #0
 801250c:	4606      	mov	r6, r0
 801250e:	dc4f      	bgt.n	80125b0 <_dtoa_r+0x948>
 8012510:	9b06      	ldr	r3, [sp, #24]
 8012512:	2b02      	cmp	r3, #2
 8012514:	dd4c      	ble.n	80125b0 <_dtoa_r+0x948>
 8012516:	e011      	b.n	801253c <_dtoa_r+0x8d4>
 8012518:	d0c9      	beq.n	80124ae <_dtoa_r+0x846>
 801251a:	9a05      	ldr	r2, [sp, #20]
 801251c:	331c      	adds	r3, #28
 801251e:	441a      	add	r2, r3
 8012520:	9205      	str	r2, [sp, #20]
 8012522:	441d      	add	r5, r3
 8012524:	4498      	add	r8, r3
 8012526:	e7c2      	b.n	80124ae <_dtoa_r+0x846>
 8012528:	4603      	mov	r3, r0
 801252a:	e7f6      	b.n	801251a <_dtoa_r+0x8b2>
 801252c:	f1b9 0f00 	cmp.w	r9, #0
 8012530:	dc38      	bgt.n	80125a4 <_dtoa_r+0x93c>
 8012532:	9b06      	ldr	r3, [sp, #24]
 8012534:	2b02      	cmp	r3, #2
 8012536:	dd35      	ble.n	80125a4 <_dtoa_r+0x93c>
 8012538:	f8cd 9008 	str.w	r9, [sp, #8]
 801253c:	9b02      	ldr	r3, [sp, #8]
 801253e:	b963      	cbnz	r3, 801255a <_dtoa_r+0x8f2>
 8012540:	4639      	mov	r1, r7
 8012542:	2205      	movs	r2, #5
 8012544:	4620      	mov	r0, r4
 8012546:	f000 feef 	bl	8013328 <__multadd>
 801254a:	4601      	mov	r1, r0
 801254c:	4607      	mov	r7, r0
 801254e:	9804      	ldr	r0, [sp, #16]
 8012550:	f001 f8f2 	bl	8013738 <__mcmp>
 8012554:	2800      	cmp	r0, #0
 8012556:	f73f adcc 	bgt.w	80120f2 <_dtoa_r+0x48a>
 801255a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801255c:	465d      	mov	r5, fp
 801255e:	ea6f 0a03 	mvn.w	sl, r3
 8012562:	f04f 0900 	mov.w	r9, #0
 8012566:	4639      	mov	r1, r7
 8012568:	4620      	mov	r0, r4
 801256a:	f000 fec6 	bl	80132fa <_Bfree>
 801256e:	2e00      	cmp	r6, #0
 8012570:	f43f aeb7 	beq.w	80122e2 <_dtoa_r+0x67a>
 8012574:	f1b9 0f00 	cmp.w	r9, #0
 8012578:	d005      	beq.n	8012586 <_dtoa_r+0x91e>
 801257a:	45b1      	cmp	r9, r6
 801257c:	d003      	beq.n	8012586 <_dtoa_r+0x91e>
 801257e:	4649      	mov	r1, r9
 8012580:	4620      	mov	r0, r4
 8012582:	f000 feba 	bl	80132fa <_Bfree>
 8012586:	4631      	mov	r1, r6
 8012588:	4620      	mov	r0, r4
 801258a:	f000 feb6 	bl	80132fa <_Bfree>
 801258e:	e6a8      	b.n	80122e2 <_dtoa_r+0x67a>
 8012590:	2700      	movs	r7, #0
 8012592:	463e      	mov	r6, r7
 8012594:	e7e1      	b.n	801255a <_dtoa_r+0x8f2>
 8012596:	f8dd a020 	ldr.w	sl, [sp, #32]
 801259a:	463e      	mov	r6, r7
 801259c:	e5a9      	b.n	80120f2 <_dtoa_r+0x48a>
 801259e:	bf00      	nop
 80125a0:	40240000 	.word	0x40240000
 80125a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	f000 80fa 	beq.w	80127a4 <_dtoa_r+0xb3c>
 80125b0:	2d00      	cmp	r5, #0
 80125b2:	dd05      	ble.n	80125c0 <_dtoa_r+0x958>
 80125b4:	4631      	mov	r1, r6
 80125b6:	462a      	mov	r2, r5
 80125b8:	4620      	mov	r0, r4
 80125ba:	f001 f869 	bl	8013690 <__lshift>
 80125be:	4606      	mov	r6, r0
 80125c0:	9b07      	ldr	r3, [sp, #28]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d04c      	beq.n	8012660 <_dtoa_r+0x9f8>
 80125c6:	6871      	ldr	r1, [r6, #4]
 80125c8:	4620      	mov	r0, r4
 80125ca:	f000 fe62 	bl	8013292 <_Balloc>
 80125ce:	6932      	ldr	r2, [r6, #16]
 80125d0:	3202      	adds	r2, #2
 80125d2:	4605      	mov	r5, r0
 80125d4:	0092      	lsls	r2, r2, #2
 80125d6:	f106 010c 	add.w	r1, r6, #12
 80125da:	300c      	adds	r0, #12
 80125dc:	f000 fe4e 	bl	801327c <memcpy>
 80125e0:	2201      	movs	r2, #1
 80125e2:	4629      	mov	r1, r5
 80125e4:	4620      	mov	r0, r4
 80125e6:	f001 f853 	bl	8013690 <__lshift>
 80125ea:	9b00      	ldr	r3, [sp, #0]
 80125ec:	f8cd b014 	str.w	fp, [sp, #20]
 80125f0:	f003 0301 	and.w	r3, r3, #1
 80125f4:	46b1      	mov	r9, r6
 80125f6:	9307      	str	r3, [sp, #28]
 80125f8:	4606      	mov	r6, r0
 80125fa:	4639      	mov	r1, r7
 80125fc:	9804      	ldr	r0, [sp, #16]
 80125fe:	f7ff faa7 	bl	8011b50 <quorem>
 8012602:	4649      	mov	r1, r9
 8012604:	4605      	mov	r5, r0
 8012606:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801260a:	9804      	ldr	r0, [sp, #16]
 801260c:	f001 f894 	bl	8013738 <__mcmp>
 8012610:	4632      	mov	r2, r6
 8012612:	9000      	str	r0, [sp, #0]
 8012614:	4639      	mov	r1, r7
 8012616:	4620      	mov	r0, r4
 8012618:	f001 f8a8 	bl	801376c <__mdiff>
 801261c:	68c3      	ldr	r3, [r0, #12]
 801261e:	4602      	mov	r2, r0
 8012620:	bb03      	cbnz	r3, 8012664 <_dtoa_r+0x9fc>
 8012622:	4601      	mov	r1, r0
 8012624:	9008      	str	r0, [sp, #32]
 8012626:	9804      	ldr	r0, [sp, #16]
 8012628:	f001 f886 	bl	8013738 <__mcmp>
 801262c:	9a08      	ldr	r2, [sp, #32]
 801262e:	4603      	mov	r3, r0
 8012630:	4611      	mov	r1, r2
 8012632:	4620      	mov	r0, r4
 8012634:	9308      	str	r3, [sp, #32]
 8012636:	f000 fe60 	bl	80132fa <_Bfree>
 801263a:	9b08      	ldr	r3, [sp, #32]
 801263c:	b9a3      	cbnz	r3, 8012668 <_dtoa_r+0xa00>
 801263e:	9a06      	ldr	r2, [sp, #24]
 8012640:	b992      	cbnz	r2, 8012668 <_dtoa_r+0xa00>
 8012642:	9a07      	ldr	r2, [sp, #28]
 8012644:	b982      	cbnz	r2, 8012668 <_dtoa_r+0xa00>
 8012646:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801264a:	d029      	beq.n	80126a0 <_dtoa_r+0xa38>
 801264c:	9b00      	ldr	r3, [sp, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	dd01      	ble.n	8012656 <_dtoa_r+0x9ee>
 8012652:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012656:	9b05      	ldr	r3, [sp, #20]
 8012658:	1c5d      	adds	r5, r3, #1
 801265a:	f883 8000 	strb.w	r8, [r3]
 801265e:	e782      	b.n	8012566 <_dtoa_r+0x8fe>
 8012660:	4630      	mov	r0, r6
 8012662:	e7c2      	b.n	80125ea <_dtoa_r+0x982>
 8012664:	2301      	movs	r3, #1
 8012666:	e7e3      	b.n	8012630 <_dtoa_r+0x9c8>
 8012668:	9a00      	ldr	r2, [sp, #0]
 801266a:	2a00      	cmp	r2, #0
 801266c:	db04      	blt.n	8012678 <_dtoa_r+0xa10>
 801266e:	d125      	bne.n	80126bc <_dtoa_r+0xa54>
 8012670:	9a06      	ldr	r2, [sp, #24]
 8012672:	bb1a      	cbnz	r2, 80126bc <_dtoa_r+0xa54>
 8012674:	9a07      	ldr	r2, [sp, #28]
 8012676:	bb0a      	cbnz	r2, 80126bc <_dtoa_r+0xa54>
 8012678:	2b00      	cmp	r3, #0
 801267a:	ddec      	ble.n	8012656 <_dtoa_r+0x9ee>
 801267c:	2201      	movs	r2, #1
 801267e:	9904      	ldr	r1, [sp, #16]
 8012680:	4620      	mov	r0, r4
 8012682:	f001 f805 	bl	8013690 <__lshift>
 8012686:	4639      	mov	r1, r7
 8012688:	9004      	str	r0, [sp, #16]
 801268a:	f001 f855 	bl	8013738 <__mcmp>
 801268e:	2800      	cmp	r0, #0
 8012690:	dc03      	bgt.n	801269a <_dtoa_r+0xa32>
 8012692:	d1e0      	bne.n	8012656 <_dtoa_r+0x9ee>
 8012694:	f018 0f01 	tst.w	r8, #1
 8012698:	d0dd      	beq.n	8012656 <_dtoa_r+0x9ee>
 801269a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801269e:	d1d8      	bne.n	8012652 <_dtoa_r+0x9ea>
 80126a0:	9b05      	ldr	r3, [sp, #20]
 80126a2:	9a05      	ldr	r2, [sp, #20]
 80126a4:	1c5d      	adds	r5, r3, #1
 80126a6:	2339      	movs	r3, #57	; 0x39
 80126a8:	7013      	strb	r3, [r2, #0]
 80126aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80126ae:	2b39      	cmp	r3, #57	; 0x39
 80126b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80126b4:	d04f      	beq.n	8012756 <_dtoa_r+0xaee>
 80126b6:	3301      	adds	r3, #1
 80126b8:	7013      	strb	r3, [r2, #0]
 80126ba:	e754      	b.n	8012566 <_dtoa_r+0x8fe>
 80126bc:	9a05      	ldr	r2, [sp, #20]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f102 0501 	add.w	r5, r2, #1
 80126c4:	dd06      	ble.n	80126d4 <_dtoa_r+0xa6c>
 80126c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80126ca:	d0e9      	beq.n	80126a0 <_dtoa_r+0xa38>
 80126cc:	f108 0801 	add.w	r8, r8, #1
 80126d0:	9b05      	ldr	r3, [sp, #20]
 80126d2:	e7c2      	b.n	801265a <_dtoa_r+0x9f2>
 80126d4:	9a02      	ldr	r2, [sp, #8]
 80126d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80126da:	eba5 030b 	sub.w	r3, r5, fp
 80126de:	4293      	cmp	r3, r2
 80126e0:	d021      	beq.n	8012726 <_dtoa_r+0xabe>
 80126e2:	2300      	movs	r3, #0
 80126e4:	220a      	movs	r2, #10
 80126e6:	9904      	ldr	r1, [sp, #16]
 80126e8:	4620      	mov	r0, r4
 80126ea:	f000 fe1d 	bl	8013328 <__multadd>
 80126ee:	45b1      	cmp	r9, r6
 80126f0:	9004      	str	r0, [sp, #16]
 80126f2:	f04f 0300 	mov.w	r3, #0
 80126f6:	f04f 020a 	mov.w	r2, #10
 80126fa:	4649      	mov	r1, r9
 80126fc:	4620      	mov	r0, r4
 80126fe:	d105      	bne.n	801270c <_dtoa_r+0xaa4>
 8012700:	f000 fe12 	bl	8013328 <__multadd>
 8012704:	4681      	mov	r9, r0
 8012706:	4606      	mov	r6, r0
 8012708:	9505      	str	r5, [sp, #20]
 801270a:	e776      	b.n	80125fa <_dtoa_r+0x992>
 801270c:	f000 fe0c 	bl	8013328 <__multadd>
 8012710:	4631      	mov	r1, r6
 8012712:	4681      	mov	r9, r0
 8012714:	2300      	movs	r3, #0
 8012716:	220a      	movs	r2, #10
 8012718:	4620      	mov	r0, r4
 801271a:	f000 fe05 	bl	8013328 <__multadd>
 801271e:	4606      	mov	r6, r0
 8012720:	e7f2      	b.n	8012708 <_dtoa_r+0xaa0>
 8012722:	f04f 0900 	mov.w	r9, #0
 8012726:	2201      	movs	r2, #1
 8012728:	9904      	ldr	r1, [sp, #16]
 801272a:	4620      	mov	r0, r4
 801272c:	f000 ffb0 	bl	8013690 <__lshift>
 8012730:	4639      	mov	r1, r7
 8012732:	9004      	str	r0, [sp, #16]
 8012734:	f001 f800 	bl	8013738 <__mcmp>
 8012738:	2800      	cmp	r0, #0
 801273a:	dcb6      	bgt.n	80126aa <_dtoa_r+0xa42>
 801273c:	d102      	bne.n	8012744 <_dtoa_r+0xadc>
 801273e:	f018 0f01 	tst.w	r8, #1
 8012742:	d1b2      	bne.n	80126aa <_dtoa_r+0xa42>
 8012744:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012748:	2b30      	cmp	r3, #48	; 0x30
 801274a:	f105 32ff 	add.w	r2, r5, #4294967295
 801274e:	f47f af0a 	bne.w	8012566 <_dtoa_r+0x8fe>
 8012752:	4615      	mov	r5, r2
 8012754:	e7f6      	b.n	8012744 <_dtoa_r+0xadc>
 8012756:	4593      	cmp	fp, r2
 8012758:	d105      	bne.n	8012766 <_dtoa_r+0xafe>
 801275a:	2331      	movs	r3, #49	; 0x31
 801275c:	f10a 0a01 	add.w	sl, sl, #1
 8012760:	f88b 3000 	strb.w	r3, [fp]
 8012764:	e6ff      	b.n	8012566 <_dtoa_r+0x8fe>
 8012766:	4615      	mov	r5, r2
 8012768:	e79f      	b.n	80126aa <_dtoa_r+0xa42>
 801276a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80127d0 <_dtoa_r+0xb68>
 801276e:	e007      	b.n	8012780 <_dtoa_r+0xb18>
 8012770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012772:	f8df b060 	ldr.w	fp, [pc, #96]	; 80127d4 <_dtoa_r+0xb6c>
 8012776:	b11b      	cbz	r3, 8012780 <_dtoa_r+0xb18>
 8012778:	f10b 0308 	add.w	r3, fp, #8
 801277c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801277e:	6013      	str	r3, [r2, #0]
 8012780:	4658      	mov	r0, fp
 8012782:	b017      	add	sp, #92	; 0x5c
 8012784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012788:	9b06      	ldr	r3, [sp, #24]
 801278a:	2b01      	cmp	r3, #1
 801278c:	f77f ae35 	ble.w	80123fa <_dtoa_r+0x792>
 8012790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012792:	9307      	str	r3, [sp, #28]
 8012794:	e649      	b.n	801242a <_dtoa_r+0x7c2>
 8012796:	9b02      	ldr	r3, [sp, #8]
 8012798:	2b00      	cmp	r3, #0
 801279a:	dc03      	bgt.n	80127a4 <_dtoa_r+0xb3c>
 801279c:	9b06      	ldr	r3, [sp, #24]
 801279e:	2b02      	cmp	r3, #2
 80127a0:	f73f aecc 	bgt.w	801253c <_dtoa_r+0x8d4>
 80127a4:	465d      	mov	r5, fp
 80127a6:	4639      	mov	r1, r7
 80127a8:	9804      	ldr	r0, [sp, #16]
 80127aa:	f7ff f9d1 	bl	8011b50 <quorem>
 80127ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80127b2:	f805 8b01 	strb.w	r8, [r5], #1
 80127b6:	9a02      	ldr	r2, [sp, #8]
 80127b8:	eba5 030b 	sub.w	r3, r5, fp
 80127bc:	429a      	cmp	r2, r3
 80127be:	ddb0      	ble.n	8012722 <_dtoa_r+0xaba>
 80127c0:	2300      	movs	r3, #0
 80127c2:	220a      	movs	r2, #10
 80127c4:	9904      	ldr	r1, [sp, #16]
 80127c6:	4620      	mov	r0, r4
 80127c8:	f000 fdae 	bl	8013328 <__multadd>
 80127cc:	9004      	str	r0, [sp, #16]
 80127ce:	e7ea      	b.n	80127a6 <_dtoa_r+0xb3e>
 80127d0:	0801533b 	.word	0x0801533b
 80127d4:	08015198 	.word	0x08015198

080127d8 <__sflush_r>:
 80127d8:	898a      	ldrh	r2, [r1, #12]
 80127da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127de:	4605      	mov	r5, r0
 80127e0:	0710      	lsls	r0, r2, #28
 80127e2:	460c      	mov	r4, r1
 80127e4:	d458      	bmi.n	8012898 <__sflush_r+0xc0>
 80127e6:	684b      	ldr	r3, [r1, #4]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	dc05      	bgt.n	80127f8 <__sflush_r+0x20>
 80127ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	dc02      	bgt.n	80127f8 <__sflush_r+0x20>
 80127f2:	2000      	movs	r0, #0
 80127f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127fa:	2e00      	cmp	r6, #0
 80127fc:	d0f9      	beq.n	80127f2 <__sflush_r+0x1a>
 80127fe:	2300      	movs	r3, #0
 8012800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012804:	682f      	ldr	r7, [r5, #0]
 8012806:	6a21      	ldr	r1, [r4, #32]
 8012808:	602b      	str	r3, [r5, #0]
 801280a:	d032      	beq.n	8012872 <__sflush_r+0x9a>
 801280c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801280e:	89a3      	ldrh	r3, [r4, #12]
 8012810:	075a      	lsls	r2, r3, #29
 8012812:	d505      	bpl.n	8012820 <__sflush_r+0x48>
 8012814:	6863      	ldr	r3, [r4, #4]
 8012816:	1ac0      	subs	r0, r0, r3
 8012818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801281a:	b10b      	cbz	r3, 8012820 <__sflush_r+0x48>
 801281c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801281e:	1ac0      	subs	r0, r0, r3
 8012820:	2300      	movs	r3, #0
 8012822:	4602      	mov	r2, r0
 8012824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012826:	6a21      	ldr	r1, [r4, #32]
 8012828:	4628      	mov	r0, r5
 801282a:	47b0      	blx	r6
 801282c:	1c43      	adds	r3, r0, #1
 801282e:	89a3      	ldrh	r3, [r4, #12]
 8012830:	d106      	bne.n	8012840 <__sflush_r+0x68>
 8012832:	6829      	ldr	r1, [r5, #0]
 8012834:	291d      	cmp	r1, #29
 8012836:	d848      	bhi.n	80128ca <__sflush_r+0xf2>
 8012838:	4a29      	ldr	r2, [pc, #164]	; (80128e0 <__sflush_r+0x108>)
 801283a:	40ca      	lsrs	r2, r1
 801283c:	07d6      	lsls	r6, r2, #31
 801283e:	d544      	bpl.n	80128ca <__sflush_r+0xf2>
 8012840:	2200      	movs	r2, #0
 8012842:	6062      	str	r2, [r4, #4]
 8012844:	04d9      	lsls	r1, r3, #19
 8012846:	6922      	ldr	r2, [r4, #16]
 8012848:	6022      	str	r2, [r4, #0]
 801284a:	d504      	bpl.n	8012856 <__sflush_r+0x7e>
 801284c:	1c42      	adds	r2, r0, #1
 801284e:	d101      	bne.n	8012854 <__sflush_r+0x7c>
 8012850:	682b      	ldr	r3, [r5, #0]
 8012852:	b903      	cbnz	r3, 8012856 <__sflush_r+0x7e>
 8012854:	6560      	str	r0, [r4, #84]	; 0x54
 8012856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012858:	602f      	str	r7, [r5, #0]
 801285a:	2900      	cmp	r1, #0
 801285c:	d0c9      	beq.n	80127f2 <__sflush_r+0x1a>
 801285e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012862:	4299      	cmp	r1, r3
 8012864:	d002      	beq.n	801286c <__sflush_r+0x94>
 8012866:	4628      	mov	r0, r5
 8012868:	f001 f920 	bl	8013aac <_free_r>
 801286c:	2000      	movs	r0, #0
 801286e:	6360      	str	r0, [r4, #52]	; 0x34
 8012870:	e7c0      	b.n	80127f4 <__sflush_r+0x1c>
 8012872:	2301      	movs	r3, #1
 8012874:	4628      	mov	r0, r5
 8012876:	47b0      	blx	r6
 8012878:	1c41      	adds	r1, r0, #1
 801287a:	d1c8      	bne.n	801280e <__sflush_r+0x36>
 801287c:	682b      	ldr	r3, [r5, #0]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d0c5      	beq.n	801280e <__sflush_r+0x36>
 8012882:	2b1d      	cmp	r3, #29
 8012884:	d001      	beq.n	801288a <__sflush_r+0xb2>
 8012886:	2b16      	cmp	r3, #22
 8012888:	d101      	bne.n	801288e <__sflush_r+0xb6>
 801288a:	602f      	str	r7, [r5, #0]
 801288c:	e7b1      	b.n	80127f2 <__sflush_r+0x1a>
 801288e:	89a3      	ldrh	r3, [r4, #12]
 8012890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012894:	81a3      	strh	r3, [r4, #12]
 8012896:	e7ad      	b.n	80127f4 <__sflush_r+0x1c>
 8012898:	690f      	ldr	r7, [r1, #16]
 801289a:	2f00      	cmp	r7, #0
 801289c:	d0a9      	beq.n	80127f2 <__sflush_r+0x1a>
 801289e:	0793      	lsls	r3, r2, #30
 80128a0:	680e      	ldr	r6, [r1, #0]
 80128a2:	bf08      	it	eq
 80128a4:	694b      	ldreq	r3, [r1, #20]
 80128a6:	600f      	str	r7, [r1, #0]
 80128a8:	bf18      	it	ne
 80128aa:	2300      	movne	r3, #0
 80128ac:	eba6 0807 	sub.w	r8, r6, r7
 80128b0:	608b      	str	r3, [r1, #8]
 80128b2:	f1b8 0f00 	cmp.w	r8, #0
 80128b6:	dd9c      	ble.n	80127f2 <__sflush_r+0x1a>
 80128b8:	4643      	mov	r3, r8
 80128ba:	463a      	mov	r2, r7
 80128bc:	6a21      	ldr	r1, [r4, #32]
 80128be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80128c0:	4628      	mov	r0, r5
 80128c2:	47b0      	blx	r6
 80128c4:	2800      	cmp	r0, #0
 80128c6:	dc06      	bgt.n	80128d6 <__sflush_r+0xfe>
 80128c8:	89a3      	ldrh	r3, [r4, #12]
 80128ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128ce:	81a3      	strh	r3, [r4, #12]
 80128d0:	f04f 30ff 	mov.w	r0, #4294967295
 80128d4:	e78e      	b.n	80127f4 <__sflush_r+0x1c>
 80128d6:	4407      	add	r7, r0
 80128d8:	eba8 0800 	sub.w	r8, r8, r0
 80128dc:	e7e9      	b.n	80128b2 <__sflush_r+0xda>
 80128de:	bf00      	nop
 80128e0:	20400001 	.word	0x20400001

080128e4 <_fflush_r>:
 80128e4:	b538      	push	{r3, r4, r5, lr}
 80128e6:	690b      	ldr	r3, [r1, #16]
 80128e8:	4605      	mov	r5, r0
 80128ea:	460c      	mov	r4, r1
 80128ec:	b1db      	cbz	r3, 8012926 <_fflush_r+0x42>
 80128ee:	b118      	cbz	r0, 80128f8 <_fflush_r+0x14>
 80128f0:	6983      	ldr	r3, [r0, #24]
 80128f2:	b90b      	cbnz	r3, 80128f8 <_fflush_r+0x14>
 80128f4:	f000 f860 	bl	80129b8 <__sinit>
 80128f8:	4b0c      	ldr	r3, [pc, #48]	; (801292c <_fflush_r+0x48>)
 80128fa:	429c      	cmp	r4, r3
 80128fc:	d109      	bne.n	8012912 <_fflush_r+0x2e>
 80128fe:	686c      	ldr	r4, [r5, #4]
 8012900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012904:	b17b      	cbz	r3, 8012926 <_fflush_r+0x42>
 8012906:	4621      	mov	r1, r4
 8012908:	4628      	mov	r0, r5
 801290a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801290e:	f7ff bf63 	b.w	80127d8 <__sflush_r>
 8012912:	4b07      	ldr	r3, [pc, #28]	; (8012930 <_fflush_r+0x4c>)
 8012914:	429c      	cmp	r4, r3
 8012916:	d101      	bne.n	801291c <_fflush_r+0x38>
 8012918:	68ac      	ldr	r4, [r5, #8]
 801291a:	e7f1      	b.n	8012900 <_fflush_r+0x1c>
 801291c:	4b05      	ldr	r3, [pc, #20]	; (8012934 <_fflush_r+0x50>)
 801291e:	429c      	cmp	r4, r3
 8012920:	bf08      	it	eq
 8012922:	68ec      	ldreq	r4, [r5, #12]
 8012924:	e7ec      	b.n	8012900 <_fflush_r+0x1c>
 8012926:	2000      	movs	r0, #0
 8012928:	bd38      	pop	{r3, r4, r5, pc}
 801292a:	bf00      	nop
 801292c:	080151c8 	.word	0x080151c8
 8012930:	080151e8 	.word	0x080151e8
 8012934:	080151a8 	.word	0x080151a8

08012938 <std>:
 8012938:	2300      	movs	r3, #0
 801293a:	b510      	push	{r4, lr}
 801293c:	4604      	mov	r4, r0
 801293e:	e9c0 3300 	strd	r3, r3, [r0]
 8012942:	6083      	str	r3, [r0, #8]
 8012944:	8181      	strh	r1, [r0, #12]
 8012946:	6643      	str	r3, [r0, #100]	; 0x64
 8012948:	81c2      	strh	r2, [r0, #14]
 801294a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801294e:	6183      	str	r3, [r0, #24]
 8012950:	4619      	mov	r1, r3
 8012952:	2208      	movs	r2, #8
 8012954:	305c      	adds	r0, #92	; 0x5c
 8012956:	f7fd f9a3 	bl	800fca0 <memset>
 801295a:	4b05      	ldr	r3, [pc, #20]	; (8012970 <std+0x38>)
 801295c:	6263      	str	r3, [r4, #36]	; 0x24
 801295e:	4b05      	ldr	r3, [pc, #20]	; (8012974 <std+0x3c>)
 8012960:	62a3      	str	r3, [r4, #40]	; 0x28
 8012962:	4b05      	ldr	r3, [pc, #20]	; (8012978 <std+0x40>)
 8012964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012966:	4b05      	ldr	r3, [pc, #20]	; (801297c <std+0x44>)
 8012968:	6224      	str	r4, [r4, #32]
 801296a:	6323      	str	r3, [r4, #48]	; 0x30
 801296c:	bd10      	pop	{r4, pc}
 801296e:	bf00      	nop
 8012970:	08010b55 	.word	0x08010b55
 8012974:	08010b7b 	.word	0x08010b7b
 8012978:	08010bb3 	.word	0x08010bb3
 801297c:	08010bd7 	.word	0x08010bd7

08012980 <_cleanup_r>:
 8012980:	4901      	ldr	r1, [pc, #4]	; (8012988 <_cleanup_r+0x8>)
 8012982:	f000 b885 	b.w	8012a90 <_fwalk_reent>
 8012986:	bf00      	nop
 8012988:	080128e5 	.word	0x080128e5

0801298c <__sfmoreglue>:
 801298c:	b570      	push	{r4, r5, r6, lr}
 801298e:	1e4a      	subs	r2, r1, #1
 8012990:	2568      	movs	r5, #104	; 0x68
 8012992:	4355      	muls	r5, r2
 8012994:	460e      	mov	r6, r1
 8012996:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801299a:	f001 f8d5 	bl	8013b48 <_malloc_r>
 801299e:	4604      	mov	r4, r0
 80129a0:	b140      	cbz	r0, 80129b4 <__sfmoreglue+0x28>
 80129a2:	2100      	movs	r1, #0
 80129a4:	e9c0 1600 	strd	r1, r6, [r0]
 80129a8:	300c      	adds	r0, #12
 80129aa:	60a0      	str	r0, [r4, #8]
 80129ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80129b0:	f7fd f976 	bl	800fca0 <memset>
 80129b4:	4620      	mov	r0, r4
 80129b6:	bd70      	pop	{r4, r5, r6, pc}

080129b8 <__sinit>:
 80129b8:	6983      	ldr	r3, [r0, #24]
 80129ba:	b510      	push	{r4, lr}
 80129bc:	4604      	mov	r4, r0
 80129be:	bb33      	cbnz	r3, 8012a0e <__sinit+0x56>
 80129c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80129c4:	6503      	str	r3, [r0, #80]	; 0x50
 80129c6:	4b12      	ldr	r3, [pc, #72]	; (8012a10 <__sinit+0x58>)
 80129c8:	4a12      	ldr	r2, [pc, #72]	; (8012a14 <__sinit+0x5c>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	6282      	str	r2, [r0, #40]	; 0x28
 80129ce:	4298      	cmp	r0, r3
 80129d0:	bf04      	itt	eq
 80129d2:	2301      	moveq	r3, #1
 80129d4:	6183      	streq	r3, [r0, #24]
 80129d6:	f000 f81f 	bl	8012a18 <__sfp>
 80129da:	6060      	str	r0, [r4, #4]
 80129dc:	4620      	mov	r0, r4
 80129de:	f000 f81b 	bl	8012a18 <__sfp>
 80129e2:	60a0      	str	r0, [r4, #8]
 80129e4:	4620      	mov	r0, r4
 80129e6:	f000 f817 	bl	8012a18 <__sfp>
 80129ea:	2200      	movs	r2, #0
 80129ec:	60e0      	str	r0, [r4, #12]
 80129ee:	2104      	movs	r1, #4
 80129f0:	6860      	ldr	r0, [r4, #4]
 80129f2:	f7ff ffa1 	bl	8012938 <std>
 80129f6:	2201      	movs	r2, #1
 80129f8:	2109      	movs	r1, #9
 80129fa:	68a0      	ldr	r0, [r4, #8]
 80129fc:	f7ff ff9c 	bl	8012938 <std>
 8012a00:	2202      	movs	r2, #2
 8012a02:	2112      	movs	r1, #18
 8012a04:	68e0      	ldr	r0, [r4, #12]
 8012a06:	f7ff ff97 	bl	8012938 <std>
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	61a3      	str	r3, [r4, #24]
 8012a0e:	bd10      	pop	{r4, pc}
 8012a10:	08015108 	.word	0x08015108
 8012a14:	08012981 	.word	0x08012981

08012a18 <__sfp>:
 8012a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a1a:	4b1b      	ldr	r3, [pc, #108]	; (8012a88 <__sfp+0x70>)
 8012a1c:	681e      	ldr	r6, [r3, #0]
 8012a1e:	69b3      	ldr	r3, [r6, #24]
 8012a20:	4607      	mov	r7, r0
 8012a22:	b913      	cbnz	r3, 8012a2a <__sfp+0x12>
 8012a24:	4630      	mov	r0, r6
 8012a26:	f7ff ffc7 	bl	80129b8 <__sinit>
 8012a2a:	3648      	adds	r6, #72	; 0x48
 8012a2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012a30:	3b01      	subs	r3, #1
 8012a32:	d503      	bpl.n	8012a3c <__sfp+0x24>
 8012a34:	6833      	ldr	r3, [r6, #0]
 8012a36:	b133      	cbz	r3, 8012a46 <__sfp+0x2e>
 8012a38:	6836      	ldr	r6, [r6, #0]
 8012a3a:	e7f7      	b.n	8012a2c <__sfp+0x14>
 8012a3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012a40:	b16d      	cbz	r5, 8012a5e <__sfp+0x46>
 8012a42:	3468      	adds	r4, #104	; 0x68
 8012a44:	e7f4      	b.n	8012a30 <__sfp+0x18>
 8012a46:	2104      	movs	r1, #4
 8012a48:	4638      	mov	r0, r7
 8012a4a:	f7ff ff9f 	bl	801298c <__sfmoreglue>
 8012a4e:	6030      	str	r0, [r6, #0]
 8012a50:	2800      	cmp	r0, #0
 8012a52:	d1f1      	bne.n	8012a38 <__sfp+0x20>
 8012a54:	230c      	movs	r3, #12
 8012a56:	603b      	str	r3, [r7, #0]
 8012a58:	4604      	mov	r4, r0
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a5e:	4b0b      	ldr	r3, [pc, #44]	; (8012a8c <__sfp+0x74>)
 8012a60:	6665      	str	r5, [r4, #100]	; 0x64
 8012a62:	e9c4 5500 	strd	r5, r5, [r4]
 8012a66:	60a5      	str	r5, [r4, #8]
 8012a68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012a6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012a70:	2208      	movs	r2, #8
 8012a72:	4629      	mov	r1, r5
 8012a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012a78:	f7fd f912 	bl	800fca0 <memset>
 8012a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012a84:	e7e9      	b.n	8012a5a <__sfp+0x42>
 8012a86:	bf00      	nop
 8012a88:	08015108 	.word	0x08015108
 8012a8c:	ffff0001 	.word	0xffff0001

08012a90 <_fwalk_reent>:
 8012a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a94:	4680      	mov	r8, r0
 8012a96:	4689      	mov	r9, r1
 8012a98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012a9c:	2600      	movs	r6, #0
 8012a9e:	b914      	cbnz	r4, 8012aa6 <_fwalk_reent+0x16>
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aa6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012aaa:	3f01      	subs	r7, #1
 8012aac:	d501      	bpl.n	8012ab2 <_fwalk_reent+0x22>
 8012aae:	6824      	ldr	r4, [r4, #0]
 8012ab0:	e7f5      	b.n	8012a9e <_fwalk_reent+0xe>
 8012ab2:	89ab      	ldrh	r3, [r5, #12]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d907      	bls.n	8012ac8 <_fwalk_reent+0x38>
 8012ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012abc:	3301      	adds	r3, #1
 8012abe:	d003      	beq.n	8012ac8 <_fwalk_reent+0x38>
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	4640      	mov	r0, r8
 8012ac4:	47c8      	blx	r9
 8012ac6:	4306      	orrs	r6, r0
 8012ac8:	3568      	adds	r5, #104	; 0x68
 8012aca:	e7ee      	b.n	8012aaa <_fwalk_reent+0x1a>

08012acc <rshift>:
 8012acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ace:	6906      	ldr	r6, [r0, #16]
 8012ad0:	114b      	asrs	r3, r1, #5
 8012ad2:	429e      	cmp	r6, r3
 8012ad4:	f100 0414 	add.w	r4, r0, #20
 8012ad8:	dd30      	ble.n	8012b3c <rshift+0x70>
 8012ada:	f011 011f 	ands.w	r1, r1, #31
 8012ade:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012ae2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012ae6:	d108      	bne.n	8012afa <rshift+0x2e>
 8012ae8:	4621      	mov	r1, r4
 8012aea:	42b2      	cmp	r2, r6
 8012aec:	460b      	mov	r3, r1
 8012aee:	d211      	bcs.n	8012b14 <rshift+0x48>
 8012af0:	f852 3b04 	ldr.w	r3, [r2], #4
 8012af4:	f841 3b04 	str.w	r3, [r1], #4
 8012af8:	e7f7      	b.n	8012aea <rshift+0x1e>
 8012afa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012afe:	f1c1 0c20 	rsb	ip, r1, #32
 8012b02:	40cd      	lsrs	r5, r1
 8012b04:	3204      	adds	r2, #4
 8012b06:	4623      	mov	r3, r4
 8012b08:	42b2      	cmp	r2, r6
 8012b0a:	4617      	mov	r7, r2
 8012b0c:	d30c      	bcc.n	8012b28 <rshift+0x5c>
 8012b0e:	601d      	str	r5, [r3, #0]
 8012b10:	b105      	cbz	r5, 8012b14 <rshift+0x48>
 8012b12:	3304      	adds	r3, #4
 8012b14:	1b1a      	subs	r2, r3, r4
 8012b16:	42a3      	cmp	r3, r4
 8012b18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012b1c:	bf08      	it	eq
 8012b1e:	2300      	moveq	r3, #0
 8012b20:	6102      	str	r2, [r0, #16]
 8012b22:	bf08      	it	eq
 8012b24:	6143      	streq	r3, [r0, #20]
 8012b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b28:	683f      	ldr	r7, [r7, #0]
 8012b2a:	fa07 f70c 	lsl.w	r7, r7, ip
 8012b2e:	433d      	orrs	r5, r7
 8012b30:	f843 5b04 	str.w	r5, [r3], #4
 8012b34:	f852 5b04 	ldr.w	r5, [r2], #4
 8012b38:	40cd      	lsrs	r5, r1
 8012b3a:	e7e5      	b.n	8012b08 <rshift+0x3c>
 8012b3c:	4623      	mov	r3, r4
 8012b3e:	e7e9      	b.n	8012b14 <rshift+0x48>

08012b40 <__hexdig_fun>:
 8012b40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012b44:	2b09      	cmp	r3, #9
 8012b46:	d802      	bhi.n	8012b4e <__hexdig_fun+0xe>
 8012b48:	3820      	subs	r0, #32
 8012b4a:	b2c0      	uxtb	r0, r0
 8012b4c:	4770      	bx	lr
 8012b4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012b52:	2b05      	cmp	r3, #5
 8012b54:	d801      	bhi.n	8012b5a <__hexdig_fun+0x1a>
 8012b56:	3847      	subs	r0, #71	; 0x47
 8012b58:	e7f7      	b.n	8012b4a <__hexdig_fun+0xa>
 8012b5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012b5e:	2b05      	cmp	r3, #5
 8012b60:	d801      	bhi.n	8012b66 <__hexdig_fun+0x26>
 8012b62:	3827      	subs	r0, #39	; 0x27
 8012b64:	e7f1      	b.n	8012b4a <__hexdig_fun+0xa>
 8012b66:	2000      	movs	r0, #0
 8012b68:	4770      	bx	lr

08012b6a <__gethex>:
 8012b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b6e:	b08b      	sub	sp, #44	; 0x2c
 8012b70:	468a      	mov	sl, r1
 8012b72:	9002      	str	r0, [sp, #8]
 8012b74:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012b76:	9306      	str	r3, [sp, #24]
 8012b78:	4690      	mov	r8, r2
 8012b7a:	f000 fadf 	bl	801313c <__localeconv_l>
 8012b7e:	6803      	ldr	r3, [r0, #0]
 8012b80:	9303      	str	r3, [sp, #12]
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7ed fb3c 	bl	8000200 <strlen>
 8012b88:	9b03      	ldr	r3, [sp, #12]
 8012b8a:	9001      	str	r0, [sp, #4]
 8012b8c:	4403      	add	r3, r0
 8012b8e:	f04f 0b00 	mov.w	fp, #0
 8012b92:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012b96:	9307      	str	r3, [sp, #28]
 8012b98:	f8da 3000 	ldr.w	r3, [sl]
 8012b9c:	3302      	adds	r3, #2
 8012b9e:	461f      	mov	r7, r3
 8012ba0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012ba4:	2830      	cmp	r0, #48	; 0x30
 8012ba6:	d06c      	beq.n	8012c82 <__gethex+0x118>
 8012ba8:	f7ff ffca 	bl	8012b40 <__hexdig_fun>
 8012bac:	4604      	mov	r4, r0
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d16a      	bne.n	8012c88 <__gethex+0x11e>
 8012bb2:	9a01      	ldr	r2, [sp, #4]
 8012bb4:	9903      	ldr	r1, [sp, #12]
 8012bb6:	4638      	mov	r0, r7
 8012bb8:	f001 fe3e 	bl	8014838 <strncmp>
 8012bbc:	2800      	cmp	r0, #0
 8012bbe:	d166      	bne.n	8012c8e <__gethex+0x124>
 8012bc0:	9b01      	ldr	r3, [sp, #4]
 8012bc2:	5cf8      	ldrb	r0, [r7, r3]
 8012bc4:	18fe      	adds	r6, r7, r3
 8012bc6:	f7ff ffbb 	bl	8012b40 <__hexdig_fun>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d062      	beq.n	8012c94 <__gethex+0x12a>
 8012bce:	4633      	mov	r3, r6
 8012bd0:	7818      	ldrb	r0, [r3, #0]
 8012bd2:	2830      	cmp	r0, #48	; 0x30
 8012bd4:	461f      	mov	r7, r3
 8012bd6:	f103 0301 	add.w	r3, r3, #1
 8012bda:	d0f9      	beq.n	8012bd0 <__gethex+0x66>
 8012bdc:	f7ff ffb0 	bl	8012b40 <__hexdig_fun>
 8012be0:	fab0 f580 	clz	r5, r0
 8012be4:	096d      	lsrs	r5, r5, #5
 8012be6:	4634      	mov	r4, r6
 8012be8:	f04f 0b01 	mov.w	fp, #1
 8012bec:	463a      	mov	r2, r7
 8012bee:	4616      	mov	r6, r2
 8012bf0:	3201      	adds	r2, #1
 8012bf2:	7830      	ldrb	r0, [r6, #0]
 8012bf4:	f7ff ffa4 	bl	8012b40 <__hexdig_fun>
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d1f8      	bne.n	8012bee <__gethex+0x84>
 8012bfc:	9a01      	ldr	r2, [sp, #4]
 8012bfe:	9903      	ldr	r1, [sp, #12]
 8012c00:	4630      	mov	r0, r6
 8012c02:	f001 fe19 	bl	8014838 <strncmp>
 8012c06:	b950      	cbnz	r0, 8012c1e <__gethex+0xb4>
 8012c08:	b954      	cbnz	r4, 8012c20 <__gethex+0xb6>
 8012c0a:	9b01      	ldr	r3, [sp, #4]
 8012c0c:	18f4      	adds	r4, r6, r3
 8012c0e:	4622      	mov	r2, r4
 8012c10:	4616      	mov	r6, r2
 8012c12:	3201      	adds	r2, #1
 8012c14:	7830      	ldrb	r0, [r6, #0]
 8012c16:	f7ff ff93 	bl	8012b40 <__hexdig_fun>
 8012c1a:	2800      	cmp	r0, #0
 8012c1c:	d1f8      	bne.n	8012c10 <__gethex+0xa6>
 8012c1e:	b10c      	cbz	r4, 8012c24 <__gethex+0xba>
 8012c20:	1ba4      	subs	r4, r4, r6
 8012c22:	00a4      	lsls	r4, r4, #2
 8012c24:	7833      	ldrb	r3, [r6, #0]
 8012c26:	2b50      	cmp	r3, #80	; 0x50
 8012c28:	d001      	beq.n	8012c2e <__gethex+0xc4>
 8012c2a:	2b70      	cmp	r3, #112	; 0x70
 8012c2c:	d140      	bne.n	8012cb0 <__gethex+0x146>
 8012c2e:	7873      	ldrb	r3, [r6, #1]
 8012c30:	2b2b      	cmp	r3, #43	; 0x2b
 8012c32:	d031      	beq.n	8012c98 <__gethex+0x12e>
 8012c34:	2b2d      	cmp	r3, #45	; 0x2d
 8012c36:	d033      	beq.n	8012ca0 <__gethex+0x136>
 8012c38:	1c71      	adds	r1, r6, #1
 8012c3a:	f04f 0900 	mov.w	r9, #0
 8012c3e:	7808      	ldrb	r0, [r1, #0]
 8012c40:	f7ff ff7e 	bl	8012b40 <__hexdig_fun>
 8012c44:	1e43      	subs	r3, r0, #1
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	2b18      	cmp	r3, #24
 8012c4a:	d831      	bhi.n	8012cb0 <__gethex+0x146>
 8012c4c:	f1a0 0210 	sub.w	r2, r0, #16
 8012c50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012c54:	f7ff ff74 	bl	8012b40 <__hexdig_fun>
 8012c58:	1e43      	subs	r3, r0, #1
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	2b18      	cmp	r3, #24
 8012c5e:	d922      	bls.n	8012ca6 <__gethex+0x13c>
 8012c60:	f1b9 0f00 	cmp.w	r9, #0
 8012c64:	d000      	beq.n	8012c68 <__gethex+0xfe>
 8012c66:	4252      	negs	r2, r2
 8012c68:	4414      	add	r4, r2
 8012c6a:	f8ca 1000 	str.w	r1, [sl]
 8012c6e:	b30d      	cbz	r5, 8012cb4 <__gethex+0x14a>
 8012c70:	f1bb 0f00 	cmp.w	fp, #0
 8012c74:	bf0c      	ite	eq
 8012c76:	2706      	moveq	r7, #6
 8012c78:	2700      	movne	r7, #0
 8012c7a:	4638      	mov	r0, r7
 8012c7c:	b00b      	add	sp, #44	; 0x2c
 8012c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c82:	f10b 0b01 	add.w	fp, fp, #1
 8012c86:	e78a      	b.n	8012b9e <__gethex+0x34>
 8012c88:	2500      	movs	r5, #0
 8012c8a:	462c      	mov	r4, r5
 8012c8c:	e7ae      	b.n	8012bec <__gethex+0x82>
 8012c8e:	463e      	mov	r6, r7
 8012c90:	2501      	movs	r5, #1
 8012c92:	e7c7      	b.n	8012c24 <__gethex+0xba>
 8012c94:	4604      	mov	r4, r0
 8012c96:	e7fb      	b.n	8012c90 <__gethex+0x126>
 8012c98:	f04f 0900 	mov.w	r9, #0
 8012c9c:	1cb1      	adds	r1, r6, #2
 8012c9e:	e7ce      	b.n	8012c3e <__gethex+0xd4>
 8012ca0:	f04f 0901 	mov.w	r9, #1
 8012ca4:	e7fa      	b.n	8012c9c <__gethex+0x132>
 8012ca6:	230a      	movs	r3, #10
 8012ca8:	fb03 0202 	mla	r2, r3, r2, r0
 8012cac:	3a10      	subs	r2, #16
 8012cae:	e7cf      	b.n	8012c50 <__gethex+0xe6>
 8012cb0:	4631      	mov	r1, r6
 8012cb2:	e7da      	b.n	8012c6a <__gethex+0x100>
 8012cb4:	1bf3      	subs	r3, r6, r7
 8012cb6:	3b01      	subs	r3, #1
 8012cb8:	4629      	mov	r1, r5
 8012cba:	2b07      	cmp	r3, #7
 8012cbc:	dc49      	bgt.n	8012d52 <__gethex+0x1e8>
 8012cbe:	9802      	ldr	r0, [sp, #8]
 8012cc0:	f000 fae7 	bl	8013292 <_Balloc>
 8012cc4:	9b01      	ldr	r3, [sp, #4]
 8012cc6:	f100 0914 	add.w	r9, r0, #20
 8012cca:	f04f 0b00 	mov.w	fp, #0
 8012cce:	f1c3 0301 	rsb	r3, r3, #1
 8012cd2:	4605      	mov	r5, r0
 8012cd4:	f8cd 9010 	str.w	r9, [sp, #16]
 8012cd8:	46da      	mov	sl, fp
 8012cda:	9308      	str	r3, [sp, #32]
 8012cdc:	42b7      	cmp	r7, r6
 8012cde:	d33b      	bcc.n	8012d58 <__gethex+0x1ee>
 8012ce0:	9804      	ldr	r0, [sp, #16]
 8012ce2:	f840 ab04 	str.w	sl, [r0], #4
 8012ce6:	eba0 0009 	sub.w	r0, r0, r9
 8012cea:	1080      	asrs	r0, r0, #2
 8012cec:	6128      	str	r0, [r5, #16]
 8012cee:	0147      	lsls	r7, r0, #5
 8012cf0:	4650      	mov	r0, sl
 8012cf2:	f000 fb92 	bl	801341a <__hi0bits>
 8012cf6:	f8d8 6000 	ldr.w	r6, [r8]
 8012cfa:	1a3f      	subs	r7, r7, r0
 8012cfc:	42b7      	cmp	r7, r6
 8012cfe:	dd64      	ble.n	8012dca <__gethex+0x260>
 8012d00:	1bbf      	subs	r7, r7, r6
 8012d02:	4639      	mov	r1, r7
 8012d04:	4628      	mov	r0, r5
 8012d06:	f000 fea1 	bl	8013a4c <__any_on>
 8012d0a:	4682      	mov	sl, r0
 8012d0c:	b178      	cbz	r0, 8012d2e <__gethex+0x1c4>
 8012d0e:	1e7b      	subs	r3, r7, #1
 8012d10:	1159      	asrs	r1, r3, #5
 8012d12:	f003 021f 	and.w	r2, r3, #31
 8012d16:	f04f 0a01 	mov.w	sl, #1
 8012d1a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012d1e:	fa0a f202 	lsl.w	r2, sl, r2
 8012d22:	420a      	tst	r2, r1
 8012d24:	d003      	beq.n	8012d2e <__gethex+0x1c4>
 8012d26:	4553      	cmp	r3, sl
 8012d28:	dc46      	bgt.n	8012db8 <__gethex+0x24e>
 8012d2a:	f04f 0a02 	mov.w	sl, #2
 8012d2e:	4639      	mov	r1, r7
 8012d30:	4628      	mov	r0, r5
 8012d32:	f7ff fecb 	bl	8012acc <rshift>
 8012d36:	443c      	add	r4, r7
 8012d38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012d3c:	42a3      	cmp	r3, r4
 8012d3e:	da52      	bge.n	8012de6 <__gethex+0x27c>
 8012d40:	4629      	mov	r1, r5
 8012d42:	9802      	ldr	r0, [sp, #8]
 8012d44:	f000 fad9 	bl	80132fa <_Bfree>
 8012d48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	6013      	str	r3, [r2, #0]
 8012d4e:	27a3      	movs	r7, #163	; 0xa3
 8012d50:	e793      	b.n	8012c7a <__gethex+0x110>
 8012d52:	3101      	adds	r1, #1
 8012d54:	105b      	asrs	r3, r3, #1
 8012d56:	e7b0      	b.n	8012cba <__gethex+0x150>
 8012d58:	1e73      	subs	r3, r6, #1
 8012d5a:	9305      	str	r3, [sp, #20]
 8012d5c:	9a07      	ldr	r2, [sp, #28]
 8012d5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012d62:	4293      	cmp	r3, r2
 8012d64:	d018      	beq.n	8012d98 <__gethex+0x22e>
 8012d66:	f1bb 0f20 	cmp.w	fp, #32
 8012d6a:	d107      	bne.n	8012d7c <__gethex+0x212>
 8012d6c:	9b04      	ldr	r3, [sp, #16]
 8012d6e:	f8c3 a000 	str.w	sl, [r3]
 8012d72:	3304      	adds	r3, #4
 8012d74:	f04f 0a00 	mov.w	sl, #0
 8012d78:	9304      	str	r3, [sp, #16]
 8012d7a:	46d3      	mov	fp, sl
 8012d7c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012d80:	f7ff fede 	bl	8012b40 <__hexdig_fun>
 8012d84:	f000 000f 	and.w	r0, r0, #15
 8012d88:	fa00 f00b 	lsl.w	r0, r0, fp
 8012d8c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012d90:	f10b 0b04 	add.w	fp, fp, #4
 8012d94:	9b05      	ldr	r3, [sp, #20]
 8012d96:	e00d      	b.n	8012db4 <__gethex+0x24a>
 8012d98:	9b05      	ldr	r3, [sp, #20]
 8012d9a:	9a08      	ldr	r2, [sp, #32]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	42bb      	cmp	r3, r7
 8012da0:	d3e1      	bcc.n	8012d66 <__gethex+0x1fc>
 8012da2:	4618      	mov	r0, r3
 8012da4:	9a01      	ldr	r2, [sp, #4]
 8012da6:	9903      	ldr	r1, [sp, #12]
 8012da8:	9309      	str	r3, [sp, #36]	; 0x24
 8012daa:	f001 fd45 	bl	8014838 <strncmp>
 8012dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012db0:	2800      	cmp	r0, #0
 8012db2:	d1d8      	bne.n	8012d66 <__gethex+0x1fc>
 8012db4:	461e      	mov	r6, r3
 8012db6:	e791      	b.n	8012cdc <__gethex+0x172>
 8012db8:	1eb9      	subs	r1, r7, #2
 8012dba:	4628      	mov	r0, r5
 8012dbc:	f000 fe46 	bl	8013a4c <__any_on>
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	d0b2      	beq.n	8012d2a <__gethex+0x1c0>
 8012dc4:	f04f 0a03 	mov.w	sl, #3
 8012dc8:	e7b1      	b.n	8012d2e <__gethex+0x1c4>
 8012dca:	da09      	bge.n	8012de0 <__gethex+0x276>
 8012dcc:	1bf7      	subs	r7, r6, r7
 8012dce:	4629      	mov	r1, r5
 8012dd0:	463a      	mov	r2, r7
 8012dd2:	9802      	ldr	r0, [sp, #8]
 8012dd4:	f000 fc5c 	bl	8013690 <__lshift>
 8012dd8:	1be4      	subs	r4, r4, r7
 8012dda:	4605      	mov	r5, r0
 8012ddc:	f100 0914 	add.w	r9, r0, #20
 8012de0:	f04f 0a00 	mov.w	sl, #0
 8012de4:	e7a8      	b.n	8012d38 <__gethex+0x1ce>
 8012de6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012dea:	42a0      	cmp	r0, r4
 8012dec:	dd6a      	ble.n	8012ec4 <__gethex+0x35a>
 8012dee:	1b04      	subs	r4, r0, r4
 8012df0:	42a6      	cmp	r6, r4
 8012df2:	dc2e      	bgt.n	8012e52 <__gethex+0x2e8>
 8012df4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012df8:	2b02      	cmp	r3, #2
 8012dfa:	d022      	beq.n	8012e42 <__gethex+0x2d8>
 8012dfc:	2b03      	cmp	r3, #3
 8012dfe:	d024      	beq.n	8012e4a <__gethex+0x2e0>
 8012e00:	2b01      	cmp	r3, #1
 8012e02:	d115      	bne.n	8012e30 <__gethex+0x2c6>
 8012e04:	42a6      	cmp	r6, r4
 8012e06:	d113      	bne.n	8012e30 <__gethex+0x2c6>
 8012e08:	2e01      	cmp	r6, #1
 8012e0a:	dc0b      	bgt.n	8012e24 <__gethex+0x2ba>
 8012e0c:	9a06      	ldr	r2, [sp, #24]
 8012e0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012e12:	6013      	str	r3, [r2, #0]
 8012e14:	2301      	movs	r3, #1
 8012e16:	612b      	str	r3, [r5, #16]
 8012e18:	f8c9 3000 	str.w	r3, [r9]
 8012e1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e1e:	2762      	movs	r7, #98	; 0x62
 8012e20:	601d      	str	r5, [r3, #0]
 8012e22:	e72a      	b.n	8012c7a <__gethex+0x110>
 8012e24:	1e71      	subs	r1, r6, #1
 8012e26:	4628      	mov	r0, r5
 8012e28:	f000 fe10 	bl	8013a4c <__any_on>
 8012e2c:	2800      	cmp	r0, #0
 8012e2e:	d1ed      	bne.n	8012e0c <__gethex+0x2a2>
 8012e30:	4629      	mov	r1, r5
 8012e32:	9802      	ldr	r0, [sp, #8]
 8012e34:	f000 fa61 	bl	80132fa <_Bfree>
 8012e38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	6013      	str	r3, [r2, #0]
 8012e3e:	2750      	movs	r7, #80	; 0x50
 8012e40:	e71b      	b.n	8012c7a <__gethex+0x110>
 8012e42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d0e1      	beq.n	8012e0c <__gethex+0x2a2>
 8012e48:	e7f2      	b.n	8012e30 <__gethex+0x2c6>
 8012e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d1dd      	bne.n	8012e0c <__gethex+0x2a2>
 8012e50:	e7ee      	b.n	8012e30 <__gethex+0x2c6>
 8012e52:	1e67      	subs	r7, r4, #1
 8012e54:	f1ba 0f00 	cmp.w	sl, #0
 8012e58:	d131      	bne.n	8012ebe <__gethex+0x354>
 8012e5a:	b127      	cbz	r7, 8012e66 <__gethex+0x2fc>
 8012e5c:	4639      	mov	r1, r7
 8012e5e:	4628      	mov	r0, r5
 8012e60:	f000 fdf4 	bl	8013a4c <__any_on>
 8012e64:	4682      	mov	sl, r0
 8012e66:	117a      	asrs	r2, r7, #5
 8012e68:	2301      	movs	r3, #1
 8012e6a:	f007 071f 	and.w	r7, r7, #31
 8012e6e:	fa03 f707 	lsl.w	r7, r3, r7
 8012e72:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012e76:	4621      	mov	r1, r4
 8012e78:	421f      	tst	r7, r3
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	bf18      	it	ne
 8012e7e:	f04a 0a02 	orrne.w	sl, sl, #2
 8012e82:	1b36      	subs	r6, r6, r4
 8012e84:	f7ff fe22 	bl	8012acc <rshift>
 8012e88:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012e8c:	2702      	movs	r7, #2
 8012e8e:	f1ba 0f00 	cmp.w	sl, #0
 8012e92:	d048      	beq.n	8012f26 <__gethex+0x3bc>
 8012e94:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012e98:	2b02      	cmp	r3, #2
 8012e9a:	d015      	beq.n	8012ec8 <__gethex+0x35e>
 8012e9c:	2b03      	cmp	r3, #3
 8012e9e:	d017      	beq.n	8012ed0 <__gethex+0x366>
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d109      	bne.n	8012eb8 <__gethex+0x34e>
 8012ea4:	f01a 0f02 	tst.w	sl, #2
 8012ea8:	d006      	beq.n	8012eb8 <__gethex+0x34e>
 8012eaa:	f8d9 3000 	ldr.w	r3, [r9]
 8012eae:	ea4a 0a03 	orr.w	sl, sl, r3
 8012eb2:	f01a 0f01 	tst.w	sl, #1
 8012eb6:	d10e      	bne.n	8012ed6 <__gethex+0x36c>
 8012eb8:	f047 0710 	orr.w	r7, r7, #16
 8012ebc:	e033      	b.n	8012f26 <__gethex+0x3bc>
 8012ebe:	f04f 0a01 	mov.w	sl, #1
 8012ec2:	e7d0      	b.n	8012e66 <__gethex+0x2fc>
 8012ec4:	2701      	movs	r7, #1
 8012ec6:	e7e2      	b.n	8012e8e <__gethex+0x324>
 8012ec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012eca:	f1c3 0301 	rsb	r3, r3, #1
 8012ece:	9315      	str	r3, [sp, #84]	; 0x54
 8012ed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d0f0      	beq.n	8012eb8 <__gethex+0x34e>
 8012ed6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8012eda:	f105 0314 	add.w	r3, r5, #20
 8012ede:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012ee2:	eb03 010a 	add.w	r1, r3, sl
 8012ee6:	f04f 0c00 	mov.w	ip, #0
 8012eea:	4618      	mov	r0, r3
 8012eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ef0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012ef4:	d01c      	beq.n	8012f30 <__gethex+0x3c6>
 8012ef6:	3201      	adds	r2, #1
 8012ef8:	6002      	str	r2, [r0, #0]
 8012efa:	2f02      	cmp	r7, #2
 8012efc:	f105 0314 	add.w	r3, r5, #20
 8012f00:	d138      	bne.n	8012f74 <__gethex+0x40a>
 8012f02:	f8d8 2000 	ldr.w	r2, [r8]
 8012f06:	3a01      	subs	r2, #1
 8012f08:	42b2      	cmp	r2, r6
 8012f0a:	d10a      	bne.n	8012f22 <__gethex+0x3b8>
 8012f0c:	1171      	asrs	r1, r6, #5
 8012f0e:	2201      	movs	r2, #1
 8012f10:	f006 061f 	and.w	r6, r6, #31
 8012f14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012f18:	fa02 f606 	lsl.w	r6, r2, r6
 8012f1c:	421e      	tst	r6, r3
 8012f1e:	bf18      	it	ne
 8012f20:	4617      	movne	r7, r2
 8012f22:	f047 0720 	orr.w	r7, r7, #32
 8012f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f28:	601d      	str	r5, [r3, #0]
 8012f2a:	9b06      	ldr	r3, [sp, #24]
 8012f2c:	601c      	str	r4, [r3, #0]
 8012f2e:	e6a4      	b.n	8012c7a <__gethex+0x110>
 8012f30:	4299      	cmp	r1, r3
 8012f32:	f843 cc04 	str.w	ip, [r3, #-4]
 8012f36:	d8d8      	bhi.n	8012eea <__gethex+0x380>
 8012f38:	68ab      	ldr	r3, [r5, #8]
 8012f3a:	4599      	cmp	r9, r3
 8012f3c:	db12      	blt.n	8012f64 <__gethex+0x3fa>
 8012f3e:	6869      	ldr	r1, [r5, #4]
 8012f40:	9802      	ldr	r0, [sp, #8]
 8012f42:	3101      	adds	r1, #1
 8012f44:	f000 f9a5 	bl	8013292 <_Balloc>
 8012f48:	692a      	ldr	r2, [r5, #16]
 8012f4a:	3202      	adds	r2, #2
 8012f4c:	f105 010c 	add.w	r1, r5, #12
 8012f50:	4683      	mov	fp, r0
 8012f52:	0092      	lsls	r2, r2, #2
 8012f54:	300c      	adds	r0, #12
 8012f56:	f000 f991 	bl	801327c <memcpy>
 8012f5a:	4629      	mov	r1, r5
 8012f5c:	9802      	ldr	r0, [sp, #8]
 8012f5e:	f000 f9cc 	bl	80132fa <_Bfree>
 8012f62:	465d      	mov	r5, fp
 8012f64:	692b      	ldr	r3, [r5, #16]
 8012f66:	1c5a      	adds	r2, r3, #1
 8012f68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012f6c:	612a      	str	r2, [r5, #16]
 8012f6e:	2201      	movs	r2, #1
 8012f70:	615a      	str	r2, [r3, #20]
 8012f72:	e7c2      	b.n	8012efa <__gethex+0x390>
 8012f74:	692a      	ldr	r2, [r5, #16]
 8012f76:	454a      	cmp	r2, r9
 8012f78:	dd0b      	ble.n	8012f92 <__gethex+0x428>
 8012f7a:	2101      	movs	r1, #1
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f7ff fda5 	bl	8012acc <rshift>
 8012f82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012f86:	3401      	adds	r4, #1
 8012f88:	42a3      	cmp	r3, r4
 8012f8a:	f6ff aed9 	blt.w	8012d40 <__gethex+0x1d6>
 8012f8e:	2701      	movs	r7, #1
 8012f90:	e7c7      	b.n	8012f22 <__gethex+0x3b8>
 8012f92:	f016 061f 	ands.w	r6, r6, #31
 8012f96:	d0fa      	beq.n	8012f8e <__gethex+0x424>
 8012f98:	449a      	add	sl, r3
 8012f9a:	f1c6 0620 	rsb	r6, r6, #32
 8012f9e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012fa2:	f000 fa3a 	bl	801341a <__hi0bits>
 8012fa6:	42b0      	cmp	r0, r6
 8012fa8:	dbe7      	blt.n	8012f7a <__gethex+0x410>
 8012faa:	e7f0      	b.n	8012f8e <__gethex+0x424>

08012fac <L_shift>:
 8012fac:	f1c2 0208 	rsb	r2, r2, #8
 8012fb0:	0092      	lsls	r2, r2, #2
 8012fb2:	b570      	push	{r4, r5, r6, lr}
 8012fb4:	f1c2 0620 	rsb	r6, r2, #32
 8012fb8:	6843      	ldr	r3, [r0, #4]
 8012fba:	6804      	ldr	r4, [r0, #0]
 8012fbc:	fa03 f506 	lsl.w	r5, r3, r6
 8012fc0:	432c      	orrs	r4, r5
 8012fc2:	40d3      	lsrs	r3, r2
 8012fc4:	6004      	str	r4, [r0, #0]
 8012fc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8012fca:	4288      	cmp	r0, r1
 8012fcc:	d3f4      	bcc.n	8012fb8 <L_shift+0xc>
 8012fce:	bd70      	pop	{r4, r5, r6, pc}

08012fd0 <__match>:
 8012fd0:	b530      	push	{r4, r5, lr}
 8012fd2:	6803      	ldr	r3, [r0, #0]
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fda:	b914      	cbnz	r4, 8012fe2 <__match+0x12>
 8012fdc:	6003      	str	r3, [r0, #0]
 8012fde:	2001      	movs	r0, #1
 8012fe0:	bd30      	pop	{r4, r5, pc}
 8012fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fe6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012fea:	2d19      	cmp	r5, #25
 8012fec:	bf98      	it	ls
 8012fee:	3220      	addls	r2, #32
 8012ff0:	42a2      	cmp	r2, r4
 8012ff2:	d0f0      	beq.n	8012fd6 <__match+0x6>
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	e7f3      	b.n	8012fe0 <__match+0x10>

08012ff8 <__hexnan>:
 8012ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ffc:	680b      	ldr	r3, [r1, #0]
 8012ffe:	6801      	ldr	r1, [r0, #0]
 8013000:	115f      	asrs	r7, r3, #5
 8013002:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013006:	f013 031f 	ands.w	r3, r3, #31
 801300a:	b087      	sub	sp, #28
 801300c:	bf18      	it	ne
 801300e:	3704      	addne	r7, #4
 8013010:	2500      	movs	r5, #0
 8013012:	1f3e      	subs	r6, r7, #4
 8013014:	4682      	mov	sl, r0
 8013016:	4690      	mov	r8, r2
 8013018:	9301      	str	r3, [sp, #4]
 801301a:	f847 5c04 	str.w	r5, [r7, #-4]
 801301e:	46b1      	mov	r9, r6
 8013020:	4634      	mov	r4, r6
 8013022:	9502      	str	r5, [sp, #8]
 8013024:	46ab      	mov	fp, r5
 8013026:	784a      	ldrb	r2, [r1, #1]
 8013028:	1c4b      	adds	r3, r1, #1
 801302a:	9303      	str	r3, [sp, #12]
 801302c:	b342      	cbz	r2, 8013080 <__hexnan+0x88>
 801302e:	4610      	mov	r0, r2
 8013030:	9105      	str	r1, [sp, #20]
 8013032:	9204      	str	r2, [sp, #16]
 8013034:	f7ff fd84 	bl	8012b40 <__hexdig_fun>
 8013038:	2800      	cmp	r0, #0
 801303a:	d143      	bne.n	80130c4 <__hexnan+0xcc>
 801303c:	9a04      	ldr	r2, [sp, #16]
 801303e:	9905      	ldr	r1, [sp, #20]
 8013040:	2a20      	cmp	r2, #32
 8013042:	d818      	bhi.n	8013076 <__hexnan+0x7e>
 8013044:	9b02      	ldr	r3, [sp, #8]
 8013046:	459b      	cmp	fp, r3
 8013048:	dd13      	ble.n	8013072 <__hexnan+0x7a>
 801304a:	454c      	cmp	r4, r9
 801304c:	d206      	bcs.n	801305c <__hexnan+0x64>
 801304e:	2d07      	cmp	r5, #7
 8013050:	dc04      	bgt.n	801305c <__hexnan+0x64>
 8013052:	462a      	mov	r2, r5
 8013054:	4649      	mov	r1, r9
 8013056:	4620      	mov	r0, r4
 8013058:	f7ff ffa8 	bl	8012fac <L_shift>
 801305c:	4544      	cmp	r4, r8
 801305e:	d944      	bls.n	80130ea <__hexnan+0xf2>
 8013060:	2300      	movs	r3, #0
 8013062:	f1a4 0904 	sub.w	r9, r4, #4
 8013066:	f844 3c04 	str.w	r3, [r4, #-4]
 801306a:	f8cd b008 	str.w	fp, [sp, #8]
 801306e:	464c      	mov	r4, r9
 8013070:	461d      	mov	r5, r3
 8013072:	9903      	ldr	r1, [sp, #12]
 8013074:	e7d7      	b.n	8013026 <__hexnan+0x2e>
 8013076:	2a29      	cmp	r2, #41	; 0x29
 8013078:	d14a      	bne.n	8013110 <__hexnan+0x118>
 801307a:	3102      	adds	r1, #2
 801307c:	f8ca 1000 	str.w	r1, [sl]
 8013080:	f1bb 0f00 	cmp.w	fp, #0
 8013084:	d044      	beq.n	8013110 <__hexnan+0x118>
 8013086:	454c      	cmp	r4, r9
 8013088:	d206      	bcs.n	8013098 <__hexnan+0xa0>
 801308a:	2d07      	cmp	r5, #7
 801308c:	dc04      	bgt.n	8013098 <__hexnan+0xa0>
 801308e:	462a      	mov	r2, r5
 8013090:	4649      	mov	r1, r9
 8013092:	4620      	mov	r0, r4
 8013094:	f7ff ff8a 	bl	8012fac <L_shift>
 8013098:	4544      	cmp	r4, r8
 801309a:	d928      	bls.n	80130ee <__hexnan+0xf6>
 801309c:	4643      	mov	r3, r8
 801309e:	f854 2b04 	ldr.w	r2, [r4], #4
 80130a2:	f843 2b04 	str.w	r2, [r3], #4
 80130a6:	42a6      	cmp	r6, r4
 80130a8:	d2f9      	bcs.n	801309e <__hexnan+0xa6>
 80130aa:	2200      	movs	r2, #0
 80130ac:	f843 2b04 	str.w	r2, [r3], #4
 80130b0:	429e      	cmp	r6, r3
 80130b2:	d2fb      	bcs.n	80130ac <__hexnan+0xb4>
 80130b4:	6833      	ldr	r3, [r6, #0]
 80130b6:	b91b      	cbnz	r3, 80130c0 <__hexnan+0xc8>
 80130b8:	4546      	cmp	r6, r8
 80130ba:	d127      	bne.n	801310c <__hexnan+0x114>
 80130bc:	2301      	movs	r3, #1
 80130be:	6033      	str	r3, [r6, #0]
 80130c0:	2005      	movs	r0, #5
 80130c2:	e026      	b.n	8013112 <__hexnan+0x11a>
 80130c4:	3501      	adds	r5, #1
 80130c6:	2d08      	cmp	r5, #8
 80130c8:	f10b 0b01 	add.w	fp, fp, #1
 80130cc:	dd06      	ble.n	80130dc <__hexnan+0xe4>
 80130ce:	4544      	cmp	r4, r8
 80130d0:	d9cf      	bls.n	8013072 <__hexnan+0x7a>
 80130d2:	2300      	movs	r3, #0
 80130d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80130d8:	2501      	movs	r5, #1
 80130da:	3c04      	subs	r4, #4
 80130dc:	6822      	ldr	r2, [r4, #0]
 80130de:	f000 000f 	and.w	r0, r0, #15
 80130e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80130e6:	6020      	str	r0, [r4, #0]
 80130e8:	e7c3      	b.n	8013072 <__hexnan+0x7a>
 80130ea:	2508      	movs	r5, #8
 80130ec:	e7c1      	b.n	8013072 <__hexnan+0x7a>
 80130ee:	9b01      	ldr	r3, [sp, #4]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d0df      	beq.n	80130b4 <__hexnan+0xbc>
 80130f4:	f04f 32ff 	mov.w	r2, #4294967295
 80130f8:	f1c3 0320 	rsb	r3, r3, #32
 80130fc:	fa22 f303 	lsr.w	r3, r2, r3
 8013100:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013104:	401a      	ands	r2, r3
 8013106:	f847 2c04 	str.w	r2, [r7, #-4]
 801310a:	e7d3      	b.n	80130b4 <__hexnan+0xbc>
 801310c:	3e04      	subs	r6, #4
 801310e:	e7d1      	b.n	80130b4 <__hexnan+0xbc>
 8013110:	2004      	movs	r0, #4
 8013112:	b007      	add	sp, #28
 8013114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013118 <__locale_ctype_ptr_l>:
 8013118:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801311c:	4770      	bx	lr
	...

08013120 <__locale_ctype_ptr>:
 8013120:	4b04      	ldr	r3, [pc, #16]	; (8013134 <__locale_ctype_ptr+0x14>)
 8013122:	4a05      	ldr	r2, [pc, #20]	; (8013138 <__locale_ctype_ptr+0x18>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	6a1b      	ldr	r3, [r3, #32]
 8013128:	2b00      	cmp	r3, #0
 801312a:	bf08      	it	eq
 801312c:	4613      	moveq	r3, r2
 801312e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8013132:	4770      	bx	lr
 8013134:	2000000c 	.word	0x2000000c
 8013138:	20000070 	.word	0x20000070

0801313c <__localeconv_l>:
 801313c:	30f0      	adds	r0, #240	; 0xf0
 801313e:	4770      	bx	lr

08013140 <_localeconv_r>:
 8013140:	4b04      	ldr	r3, [pc, #16]	; (8013154 <_localeconv_r+0x14>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	6a18      	ldr	r0, [r3, #32]
 8013146:	4b04      	ldr	r3, [pc, #16]	; (8013158 <_localeconv_r+0x18>)
 8013148:	2800      	cmp	r0, #0
 801314a:	bf08      	it	eq
 801314c:	4618      	moveq	r0, r3
 801314e:	30f0      	adds	r0, #240	; 0xf0
 8013150:	4770      	bx	lr
 8013152:	bf00      	nop
 8013154:	2000000c 	.word	0x2000000c
 8013158:	20000070 	.word	0x20000070

0801315c <_lseek_r>:
 801315c:	b538      	push	{r3, r4, r5, lr}
 801315e:	4c07      	ldr	r4, [pc, #28]	; (801317c <_lseek_r+0x20>)
 8013160:	4605      	mov	r5, r0
 8013162:	4608      	mov	r0, r1
 8013164:	4611      	mov	r1, r2
 8013166:	2200      	movs	r2, #0
 8013168:	6022      	str	r2, [r4, #0]
 801316a:	461a      	mov	r2, r3
 801316c:	f7f1 fad0 	bl	8004710 <_lseek>
 8013170:	1c43      	adds	r3, r0, #1
 8013172:	d102      	bne.n	801317a <_lseek_r+0x1e>
 8013174:	6823      	ldr	r3, [r4, #0]
 8013176:	b103      	cbz	r3, 801317a <_lseek_r+0x1e>
 8013178:	602b      	str	r3, [r5, #0]
 801317a:	bd38      	pop	{r3, r4, r5, pc}
 801317c:	2000c610 	.word	0x2000c610

08013180 <__swhatbuf_r>:
 8013180:	b570      	push	{r4, r5, r6, lr}
 8013182:	460e      	mov	r6, r1
 8013184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013188:	2900      	cmp	r1, #0
 801318a:	b096      	sub	sp, #88	; 0x58
 801318c:	4614      	mov	r4, r2
 801318e:	461d      	mov	r5, r3
 8013190:	da07      	bge.n	80131a2 <__swhatbuf_r+0x22>
 8013192:	2300      	movs	r3, #0
 8013194:	602b      	str	r3, [r5, #0]
 8013196:	89b3      	ldrh	r3, [r6, #12]
 8013198:	061a      	lsls	r2, r3, #24
 801319a:	d410      	bmi.n	80131be <__swhatbuf_r+0x3e>
 801319c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131a0:	e00e      	b.n	80131c0 <__swhatbuf_r+0x40>
 80131a2:	466a      	mov	r2, sp
 80131a4:	f001 fc2e 	bl	8014a04 <_fstat_r>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	dbf2      	blt.n	8013192 <__swhatbuf_r+0x12>
 80131ac:	9a01      	ldr	r2, [sp, #4]
 80131ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80131b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80131b6:	425a      	negs	r2, r3
 80131b8:	415a      	adcs	r2, r3
 80131ba:	602a      	str	r2, [r5, #0]
 80131bc:	e7ee      	b.n	801319c <__swhatbuf_r+0x1c>
 80131be:	2340      	movs	r3, #64	; 0x40
 80131c0:	2000      	movs	r0, #0
 80131c2:	6023      	str	r3, [r4, #0]
 80131c4:	b016      	add	sp, #88	; 0x58
 80131c6:	bd70      	pop	{r4, r5, r6, pc}

080131c8 <__smakebuf_r>:
 80131c8:	898b      	ldrh	r3, [r1, #12]
 80131ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131cc:	079d      	lsls	r5, r3, #30
 80131ce:	4606      	mov	r6, r0
 80131d0:	460c      	mov	r4, r1
 80131d2:	d507      	bpl.n	80131e4 <__smakebuf_r+0x1c>
 80131d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80131d8:	6023      	str	r3, [r4, #0]
 80131da:	6123      	str	r3, [r4, #16]
 80131dc:	2301      	movs	r3, #1
 80131de:	6163      	str	r3, [r4, #20]
 80131e0:	b002      	add	sp, #8
 80131e2:	bd70      	pop	{r4, r5, r6, pc}
 80131e4:	ab01      	add	r3, sp, #4
 80131e6:	466a      	mov	r2, sp
 80131e8:	f7ff ffca 	bl	8013180 <__swhatbuf_r>
 80131ec:	9900      	ldr	r1, [sp, #0]
 80131ee:	4605      	mov	r5, r0
 80131f0:	4630      	mov	r0, r6
 80131f2:	f000 fca9 	bl	8013b48 <_malloc_r>
 80131f6:	b948      	cbnz	r0, 801320c <__smakebuf_r+0x44>
 80131f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131fc:	059a      	lsls	r2, r3, #22
 80131fe:	d4ef      	bmi.n	80131e0 <__smakebuf_r+0x18>
 8013200:	f023 0303 	bic.w	r3, r3, #3
 8013204:	f043 0302 	orr.w	r3, r3, #2
 8013208:	81a3      	strh	r3, [r4, #12]
 801320a:	e7e3      	b.n	80131d4 <__smakebuf_r+0xc>
 801320c:	4b0d      	ldr	r3, [pc, #52]	; (8013244 <__smakebuf_r+0x7c>)
 801320e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013210:	89a3      	ldrh	r3, [r4, #12]
 8013212:	6020      	str	r0, [r4, #0]
 8013214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013218:	81a3      	strh	r3, [r4, #12]
 801321a:	9b00      	ldr	r3, [sp, #0]
 801321c:	6163      	str	r3, [r4, #20]
 801321e:	9b01      	ldr	r3, [sp, #4]
 8013220:	6120      	str	r0, [r4, #16]
 8013222:	b15b      	cbz	r3, 801323c <__smakebuf_r+0x74>
 8013224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013228:	4630      	mov	r0, r6
 801322a:	f001 fbfd 	bl	8014a28 <_isatty_r>
 801322e:	b128      	cbz	r0, 801323c <__smakebuf_r+0x74>
 8013230:	89a3      	ldrh	r3, [r4, #12]
 8013232:	f023 0303 	bic.w	r3, r3, #3
 8013236:	f043 0301 	orr.w	r3, r3, #1
 801323a:	81a3      	strh	r3, [r4, #12]
 801323c:	89a3      	ldrh	r3, [r4, #12]
 801323e:	431d      	orrs	r5, r3
 8013240:	81a5      	strh	r5, [r4, #12]
 8013242:	e7cd      	b.n	80131e0 <__smakebuf_r+0x18>
 8013244:	08012981 	.word	0x08012981

08013248 <malloc>:
 8013248:	4b02      	ldr	r3, [pc, #8]	; (8013254 <malloc+0xc>)
 801324a:	4601      	mov	r1, r0
 801324c:	6818      	ldr	r0, [r3, #0]
 801324e:	f000 bc7b 	b.w	8013b48 <_malloc_r>
 8013252:	bf00      	nop
 8013254:	2000000c 	.word	0x2000000c

08013258 <__ascii_mbtowc>:
 8013258:	b082      	sub	sp, #8
 801325a:	b901      	cbnz	r1, 801325e <__ascii_mbtowc+0x6>
 801325c:	a901      	add	r1, sp, #4
 801325e:	b142      	cbz	r2, 8013272 <__ascii_mbtowc+0x1a>
 8013260:	b14b      	cbz	r3, 8013276 <__ascii_mbtowc+0x1e>
 8013262:	7813      	ldrb	r3, [r2, #0]
 8013264:	600b      	str	r3, [r1, #0]
 8013266:	7812      	ldrb	r2, [r2, #0]
 8013268:	1c10      	adds	r0, r2, #0
 801326a:	bf18      	it	ne
 801326c:	2001      	movne	r0, #1
 801326e:	b002      	add	sp, #8
 8013270:	4770      	bx	lr
 8013272:	4610      	mov	r0, r2
 8013274:	e7fb      	b.n	801326e <__ascii_mbtowc+0x16>
 8013276:	f06f 0001 	mvn.w	r0, #1
 801327a:	e7f8      	b.n	801326e <__ascii_mbtowc+0x16>

0801327c <memcpy>:
 801327c:	b510      	push	{r4, lr}
 801327e:	1e43      	subs	r3, r0, #1
 8013280:	440a      	add	r2, r1
 8013282:	4291      	cmp	r1, r2
 8013284:	d100      	bne.n	8013288 <memcpy+0xc>
 8013286:	bd10      	pop	{r4, pc}
 8013288:	f811 4b01 	ldrb.w	r4, [r1], #1
 801328c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013290:	e7f7      	b.n	8013282 <memcpy+0x6>

08013292 <_Balloc>:
 8013292:	b570      	push	{r4, r5, r6, lr}
 8013294:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013296:	4604      	mov	r4, r0
 8013298:	460e      	mov	r6, r1
 801329a:	b93d      	cbnz	r5, 80132ac <_Balloc+0x1a>
 801329c:	2010      	movs	r0, #16
 801329e:	f7ff ffd3 	bl	8013248 <malloc>
 80132a2:	6260      	str	r0, [r4, #36]	; 0x24
 80132a4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80132a8:	6005      	str	r5, [r0, #0]
 80132aa:	60c5      	str	r5, [r0, #12]
 80132ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80132ae:	68eb      	ldr	r3, [r5, #12]
 80132b0:	b183      	cbz	r3, 80132d4 <_Balloc+0x42>
 80132b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132b4:	68db      	ldr	r3, [r3, #12]
 80132b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80132ba:	b9b8      	cbnz	r0, 80132ec <_Balloc+0x5a>
 80132bc:	2101      	movs	r1, #1
 80132be:	fa01 f506 	lsl.w	r5, r1, r6
 80132c2:	1d6a      	adds	r2, r5, #5
 80132c4:	0092      	lsls	r2, r2, #2
 80132c6:	4620      	mov	r0, r4
 80132c8:	f000 fbe1 	bl	8013a8e <_calloc_r>
 80132cc:	b160      	cbz	r0, 80132e8 <_Balloc+0x56>
 80132ce:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80132d2:	e00e      	b.n	80132f2 <_Balloc+0x60>
 80132d4:	2221      	movs	r2, #33	; 0x21
 80132d6:	2104      	movs	r1, #4
 80132d8:	4620      	mov	r0, r4
 80132da:	f000 fbd8 	bl	8013a8e <_calloc_r>
 80132de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132e0:	60e8      	str	r0, [r5, #12]
 80132e2:	68db      	ldr	r3, [r3, #12]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d1e4      	bne.n	80132b2 <_Balloc+0x20>
 80132e8:	2000      	movs	r0, #0
 80132ea:	bd70      	pop	{r4, r5, r6, pc}
 80132ec:	6802      	ldr	r2, [r0, #0]
 80132ee:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80132f2:	2300      	movs	r3, #0
 80132f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80132f8:	e7f7      	b.n	80132ea <_Balloc+0x58>

080132fa <_Bfree>:
 80132fa:	b570      	push	{r4, r5, r6, lr}
 80132fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80132fe:	4606      	mov	r6, r0
 8013300:	460d      	mov	r5, r1
 8013302:	b93c      	cbnz	r4, 8013314 <_Bfree+0x1a>
 8013304:	2010      	movs	r0, #16
 8013306:	f7ff ff9f 	bl	8013248 <malloc>
 801330a:	6270      	str	r0, [r6, #36]	; 0x24
 801330c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013310:	6004      	str	r4, [r0, #0]
 8013312:	60c4      	str	r4, [r0, #12]
 8013314:	b13d      	cbz	r5, 8013326 <_Bfree+0x2c>
 8013316:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013318:	686a      	ldr	r2, [r5, #4]
 801331a:	68db      	ldr	r3, [r3, #12]
 801331c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013320:	6029      	str	r1, [r5, #0]
 8013322:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013326:	bd70      	pop	{r4, r5, r6, pc}

08013328 <__multadd>:
 8013328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801332c:	690d      	ldr	r5, [r1, #16]
 801332e:	461f      	mov	r7, r3
 8013330:	4606      	mov	r6, r0
 8013332:	460c      	mov	r4, r1
 8013334:	f101 0c14 	add.w	ip, r1, #20
 8013338:	2300      	movs	r3, #0
 801333a:	f8dc 0000 	ldr.w	r0, [ip]
 801333e:	b281      	uxth	r1, r0
 8013340:	fb02 7101 	mla	r1, r2, r1, r7
 8013344:	0c0f      	lsrs	r7, r1, #16
 8013346:	0c00      	lsrs	r0, r0, #16
 8013348:	fb02 7000 	mla	r0, r2, r0, r7
 801334c:	b289      	uxth	r1, r1
 801334e:	3301      	adds	r3, #1
 8013350:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013354:	429d      	cmp	r5, r3
 8013356:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801335a:	f84c 1b04 	str.w	r1, [ip], #4
 801335e:	dcec      	bgt.n	801333a <__multadd+0x12>
 8013360:	b1d7      	cbz	r7, 8013398 <__multadd+0x70>
 8013362:	68a3      	ldr	r3, [r4, #8]
 8013364:	42ab      	cmp	r3, r5
 8013366:	dc12      	bgt.n	801338e <__multadd+0x66>
 8013368:	6861      	ldr	r1, [r4, #4]
 801336a:	4630      	mov	r0, r6
 801336c:	3101      	adds	r1, #1
 801336e:	f7ff ff90 	bl	8013292 <_Balloc>
 8013372:	6922      	ldr	r2, [r4, #16]
 8013374:	3202      	adds	r2, #2
 8013376:	f104 010c 	add.w	r1, r4, #12
 801337a:	4680      	mov	r8, r0
 801337c:	0092      	lsls	r2, r2, #2
 801337e:	300c      	adds	r0, #12
 8013380:	f7ff ff7c 	bl	801327c <memcpy>
 8013384:	4621      	mov	r1, r4
 8013386:	4630      	mov	r0, r6
 8013388:	f7ff ffb7 	bl	80132fa <_Bfree>
 801338c:	4644      	mov	r4, r8
 801338e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013392:	3501      	adds	r5, #1
 8013394:	615f      	str	r7, [r3, #20]
 8013396:	6125      	str	r5, [r4, #16]
 8013398:	4620      	mov	r0, r4
 801339a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801339e <__s2b>:
 801339e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133a2:	460c      	mov	r4, r1
 80133a4:	4615      	mov	r5, r2
 80133a6:	461f      	mov	r7, r3
 80133a8:	2209      	movs	r2, #9
 80133aa:	3308      	adds	r3, #8
 80133ac:	4606      	mov	r6, r0
 80133ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80133b2:	2100      	movs	r1, #0
 80133b4:	2201      	movs	r2, #1
 80133b6:	429a      	cmp	r2, r3
 80133b8:	db20      	blt.n	80133fc <__s2b+0x5e>
 80133ba:	4630      	mov	r0, r6
 80133bc:	f7ff ff69 	bl	8013292 <_Balloc>
 80133c0:	9b08      	ldr	r3, [sp, #32]
 80133c2:	6143      	str	r3, [r0, #20]
 80133c4:	2d09      	cmp	r5, #9
 80133c6:	f04f 0301 	mov.w	r3, #1
 80133ca:	6103      	str	r3, [r0, #16]
 80133cc:	dd19      	ble.n	8013402 <__s2b+0x64>
 80133ce:	f104 0809 	add.w	r8, r4, #9
 80133d2:	46c1      	mov	r9, r8
 80133d4:	442c      	add	r4, r5
 80133d6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80133da:	4601      	mov	r1, r0
 80133dc:	3b30      	subs	r3, #48	; 0x30
 80133de:	220a      	movs	r2, #10
 80133e0:	4630      	mov	r0, r6
 80133e2:	f7ff ffa1 	bl	8013328 <__multadd>
 80133e6:	45a1      	cmp	r9, r4
 80133e8:	d1f5      	bne.n	80133d6 <__s2b+0x38>
 80133ea:	eb08 0405 	add.w	r4, r8, r5
 80133ee:	3c08      	subs	r4, #8
 80133f0:	1b2d      	subs	r5, r5, r4
 80133f2:	1963      	adds	r3, r4, r5
 80133f4:	42bb      	cmp	r3, r7
 80133f6:	db07      	blt.n	8013408 <__s2b+0x6a>
 80133f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133fc:	0052      	lsls	r2, r2, #1
 80133fe:	3101      	adds	r1, #1
 8013400:	e7d9      	b.n	80133b6 <__s2b+0x18>
 8013402:	340a      	adds	r4, #10
 8013404:	2509      	movs	r5, #9
 8013406:	e7f3      	b.n	80133f0 <__s2b+0x52>
 8013408:	f814 3b01 	ldrb.w	r3, [r4], #1
 801340c:	4601      	mov	r1, r0
 801340e:	3b30      	subs	r3, #48	; 0x30
 8013410:	220a      	movs	r2, #10
 8013412:	4630      	mov	r0, r6
 8013414:	f7ff ff88 	bl	8013328 <__multadd>
 8013418:	e7eb      	b.n	80133f2 <__s2b+0x54>

0801341a <__hi0bits>:
 801341a:	0c02      	lsrs	r2, r0, #16
 801341c:	0412      	lsls	r2, r2, #16
 801341e:	4603      	mov	r3, r0
 8013420:	b9b2      	cbnz	r2, 8013450 <__hi0bits+0x36>
 8013422:	0403      	lsls	r3, r0, #16
 8013424:	2010      	movs	r0, #16
 8013426:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801342a:	bf04      	itt	eq
 801342c:	021b      	lsleq	r3, r3, #8
 801342e:	3008      	addeq	r0, #8
 8013430:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013434:	bf04      	itt	eq
 8013436:	011b      	lsleq	r3, r3, #4
 8013438:	3004      	addeq	r0, #4
 801343a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801343e:	bf04      	itt	eq
 8013440:	009b      	lsleq	r3, r3, #2
 8013442:	3002      	addeq	r0, #2
 8013444:	2b00      	cmp	r3, #0
 8013446:	db06      	blt.n	8013456 <__hi0bits+0x3c>
 8013448:	005b      	lsls	r3, r3, #1
 801344a:	d503      	bpl.n	8013454 <__hi0bits+0x3a>
 801344c:	3001      	adds	r0, #1
 801344e:	4770      	bx	lr
 8013450:	2000      	movs	r0, #0
 8013452:	e7e8      	b.n	8013426 <__hi0bits+0xc>
 8013454:	2020      	movs	r0, #32
 8013456:	4770      	bx	lr

08013458 <__lo0bits>:
 8013458:	6803      	ldr	r3, [r0, #0]
 801345a:	f013 0207 	ands.w	r2, r3, #7
 801345e:	4601      	mov	r1, r0
 8013460:	d00b      	beq.n	801347a <__lo0bits+0x22>
 8013462:	07da      	lsls	r2, r3, #31
 8013464:	d423      	bmi.n	80134ae <__lo0bits+0x56>
 8013466:	0798      	lsls	r0, r3, #30
 8013468:	bf49      	itett	mi
 801346a:	085b      	lsrmi	r3, r3, #1
 801346c:	089b      	lsrpl	r3, r3, #2
 801346e:	2001      	movmi	r0, #1
 8013470:	600b      	strmi	r3, [r1, #0]
 8013472:	bf5c      	itt	pl
 8013474:	600b      	strpl	r3, [r1, #0]
 8013476:	2002      	movpl	r0, #2
 8013478:	4770      	bx	lr
 801347a:	b298      	uxth	r0, r3
 801347c:	b9a8      	cbnz	r0, 80134aa <__lo0bits+0x52>
 801347e:	0c1b      	lsrs	r3, r3, #16
 8013480:	2010      	movs	r0, #16
 8013482:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013486:	bf04      	itt	eq
 8013488:	0a1b      	lsreq	r3, r3, #8
 801348a:	3008      	addeq	r0, #8
 801348c:	071a      	lsls	r2, r3, #28
 801348e:	bf04      	itt	eq
 8013490:	091b      	lsreq	r3, r3, #4
 8013492:	3004      	addeq	r0, #4
 8013494:	079a      	lsls	r2, r3, #30
 8013496:	bf04      	itt	eq
 8013498:	089b      	lsreq	r3, r3, #2
 801349a:	3002      	addeq	r0, #2
 801349c:	07da      	lsls	r2, r3, #31
 801349e:	d402      	bmi.n	80134a6 <__lo0bits+0x4e>
 80134a0:	085b      	lsrs	r3, r3, #1
 80134a2:	d006      	beq.n	80134b2 <__lo0bits+0x5a>
 80134a4:	3001      	adds	r0, #1
 80134a6:	600b      	str	r3, [r1, #0]
 80134a8:	4770      	bx	lr
 80134aa:	4610      	mov	r0, r2
 80134ac:	e7e9      	b.n	8013482 <__lo0bits+0x2a>
 80134ae:	2000      	movs	r0, #0
 80134b0:	4770      	bx	lr
 80134b2:	2020      	movs	r0, #32
 80134b4:	4770      	bx	lr

080134b6 <__i2b>:
 80134b6:	b510      	push	{r4, lr}
 80134b8:	460c      	mov	r4, r1
 80134ba:	2101      	movs	r1, #1
 80134bc:	f7ff fee9 	bl	8013292 <_Balloc>
 80134c0:	2201      	movs	r2, #1
 80134c2:	6144      	str	r4, [r0, #20]
 80134c4:	6102      	str	r2, [r0, #16]
 80134c6:	bd10      	pop	{r4, pc}

080134c8 <__multiply>:
 80134c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134cc:	4614      	mov	r4, r2
 80134ce:	690a      	ldr	r2, [r1, #16]
 80134d0:	6923      	ldr	r3, [r4, #16]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	bfb8      	it	lt
 80134d6:	460b      	movlt	r3, r1
 80134d8:	4688      	mov	r8, r1
 80134da:	bfbc      	itt	lt
 80134dc:	46a0      	movlt	r8, r4
 80134de:	461c      	movlt	r4, r3
 80134e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80134e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80134e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80134ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80134f0:	eb07 0609 	add.w	r6, r7, r9
 80134f4:	42b3      	cmp	r3, r6
 80134f6:	bfb8      	it	lt
 80134f8:	3101      	addlt	r1, #1
 80134fa:	f7ff feca 	bl	8013292 <_Balloc>
 80134fe:	f100 0514 	add.w	r5, r0, #20
 8013502:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013506:	462b      	mov	r3, r5
 8013508:	2200      	movs	r2, #0
 801350a:	4573      	cmp	r3, lr
 801350c:	d316      	bcc.n	801353c <__multiply+0x74>
 801350e:	f104 0214 	add.w	r2, r4, #20
 8013512:	f108 0114 	add.w	r1, r8, #20
 8013516:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801351a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801351e:	9300      	str	r3, [sp, #0]
 8013520:	9b00      	ldr	r3, [sp, #0]
 8013522:	9201      	str	r2, [sp, #4]
 8013524:	4293      	cmp	r3, r2
 8013526:	d80c      	bhi.n	8013542 <__multiply+0x7a>
 8013528:	2e00      	cmp	r6, #0
 801352a:	dd03      	ble.n	8013534 <__multiply+0x6c>
 801352c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013530:	2b00      	cmp	r3, #0
 8013532:	d05d      	beq.n	80135f0 <__multiply+0x128>
 8013534:	6106      	str	r6, [r0, #16]
 8013536:	b003      	add	sp, #12
 8013538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801353c:	f843 2b04 	str.w	r2, [r3], #4
 8013540:	e7e3      	b.n	801350a <__multiply+0x42>
 8013542:	f8b2 b000 	ldrh.w	fp, [r2]
 8013546:	f1bb 0f00 	cmp.w	fp, #0
 801354a:	d023      	beq.n	8013594 <__multiply+0xcc>
 801354c:	4689      	mov	r9, r1
 801354e:	46ac      	mov	ip, r5
 8013550:	f04f 0800 	mov.w	r8, #0
 8013554:	f859 4b04 	ldr.w	r4, [r9], #4
 8013558:	f8dc a000 	ldr.w	sl, [ip]
 801355c:	b2a3      	uxth	r3, r4
 801355e:	fa1f fa8a 	uxth.w	sl, sl
 8013562:	fb0b a303 	mla	r3, fp, r3, sl
 8013566:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801356a:	f8dc 4000 	ldr.w	r4, [ip]
 801356e:	4443      	add	r3, r8
 8013570:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013574:	fb0b 840a 	mla	r4, fp, sl, r8
 8013578:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801357c:	46e2      	mov	sl, ip
 801357e:	b29b      	uxth	r3, r3
 8013580:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013584:	454f      	cmp	r7, r9
 8013586:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801358a:	f84a 3b04 	str.w	r3, [sl], #4
 801358e:	d82b      	bhi.n	80135e8 <__multiply+0x120>
 8013590:	f8cc 8004 	str.w	r8, [ip, #4]
 8013594:	9b01      	ldr	r3, [sp, #4]
 8013596:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801359a:	3204      	adds	r2, #4
 801359c:	f1ba 0f00 	cmp.w	sl, #0
 80135a0:	d020      	beq.n	80135e4 <__multiply+0x11c>
 80135a2:	682b      	ldr	r3, [r5, #0]
 80135a4:	4689      	mov	r9, r1
 80135a6:	46a8      	mov	r8, r5
 80135a8:	f04f 0b00 	mov.w	fp, #0
 80135ac:	f8b9 c000 	ldrh.w	ip, [r9]
 80135b0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80135b4:	fb0a 440c 	mla	r4, sl, ip, r4
 80135b8:	445c      	add	r4, fp
 80135ba:	46c4      	mov	ip, r8
 80135bc:	b29b      	uxth	r3, r3
 80135be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80135c2:	f84c 3b04 	str.w	r3, [ip], #4
 80135c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80135ca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80135ce:	0c1b      	lsrs	r3, r3, #16
 80135d0:	fb0a b303 	mla	r3, sl, r3, fp
 80135d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80135d8:	454f      	cmp	r7, r9
 80135da:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80135de:	d805      	bhi.n	80135ec <__multiply+0x124>
 80135e0:	f8c8 3004 	str.w	r3, [r8, #4]
 80135e4:	3504      	adds	r5, #4
 80135e6:	e79b      	b.n	8013520 <__multiply+0x58>
 80135e8:	46d4      	mov	ip, sl
 80135ea:	e7b3      	b.n	8013554 <__multiply+0x8c>
 80135ec:	46e0      	mov	r8, ip
 80135ee:	e7dd      	b.n	80135ac <__multiply+0xe4>
 80135f0:	3e01      	subs	r6, #1
 80135f2:	e799      	b.n	8013528 <__multiply+0x60>

080135f4 <__pow5mult>:
 80135f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135f8:	4615      	mov	r5, r2
 80135fa:	f012 0203 	ands.w	r2, r2, #3
 80135fe:	4606      	mov	r6, r0
 8013600:	460f      	mov	r7, r1
 8013602:	d007      	beq.n	8013614 <__pow5mult+0x20>
 8013604:	3a01      	subs	r2, #1
 8013606:	4c21      	ldr	r4, [pc, #132]	; (801368c <__pow5mult+0x98>)
 8013608:	2300      	movs	r3, #0
 801360a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801360e:	f7ff fe8b 	bl	8013328 <__multadd>
 8013612:	4607      	mov	r7, r0
 8013614:	10ad      	asrs	r5, r5, #2
 8013616:	d035      	beq.n	8013684 <__pow5mult+0x90>
 8013618:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801361a:	b93c      	cbnz	r4, 801362c <__pow5mult+0x38>
 801361c:	2010      	movs	r0, #16
 801361e:	f7ff fe13 	bl	8013248 <malloc>
 8013622:	6270      	str	r0, [r6, #36]	; 0x24
 8013624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013628:	6004      	str	r4, [r0, #0]
 801362a:	60c4      	str	r4, [r0, #12]
 801362c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013634:	b94c      	cbnz	r4, 801364a <__pow5mult+0x56>
 8013636:	f240 2171 	movw	r1, #625	; 0x271
 801363a:	4630      	mov	r0, r6
 801363c:	f7ff ff3b 	bl	80134b6 <__i2b>
 8013640:	2300      	movs	r3, #0
 8013642:	f8c8 0008 	str.w	r0, [r8, #8]
 8013646:	4604      	mov	r4, r0
 8013648:	6003      	str	r3, [r0, #0]
 801364a:	f04f 0800 	mov.w	r8, #0
 801364e:	07eb      	lsls	r3, r5, #31
 8013650:	d50a      	bpl.n	8013668 <__pow5mult+0x74>
 8013652:	4639      	mov	r1, r7
 8013654:	4622      	mov	r2, r4
 8013656:	4630      	mov	r0, r6
 8013658:	f7ff ff36 	bl	80134c8 <__multiply>
 801365c:	4639      	mov	r1, r7
 801365e:	4681      	mov	r9, r0
 8013660:	4630      	mov	r0, r6
 8013662:	f7ff fe4a 	bl	80132fa <_Bfree>
 8013666:	464f      	mov	r7, r9
 8013668:	106d      	asrs	r5, r5, #1
 801366a:	d00b      	beq.n	8013684 <__pow5mult+0x90>
 801366c:	6820      	ldr	r0, [r4, #0]
 801366e:	b938      	cbnz	r0, 8013680 <__pow5mult+0x8c>
 8013670:	4622      	mov	r2, r4
 8013672:	4621      	mov	r1, r4
 8013674:	4630      	mov	r0, r6
 8013676:	f7ff ff27 	bl	80134c8 <__multiply>
 801367a:	6020      	str	r0, [r4, #0]
 801367c:	f8c0 8000 	str.w	r8, [r0]
 8013680:	4604      	mov	r4, r0
 8013682:	e7e4      	b.n	801364e <__pow5mult+0x5a>
 8013684:	4638      	mov	r0, r7
 8013686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801368a:	bf00      	nop
 801368c:	08015308 	.word	0x08015308

08013690 <__lshift>:
 8013690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013694:	460c      	mov	r4, r1
 8013696:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801369a:	6923      	ldr	r3, [r4, #16]
 801369c:	6849      	ldr	r1, [r1, #4]
 801369e:	eb0a 0903 	add.w	r9, sl, r3
 80136a2:	68a3      	ldr	r3, [r4, #8]
 80136a4:	4607      	mov	r7, r0
 80136a6:	4616      	mov	r6, r2
 80136a8:	f109 0501 	add.w	r5, r9, #1
 80136ac:	42ab      	cmp	r3, r5
 80136ae:	db32      	blt.n	8013716 <__lshift+0x86>
 80136b0:	4638      	mov	r0, r7
 80136b2:	f7ff fdee 	bl	8013292 <_Balloc>
 80136b6:	2300      	movs	r3, #0
 80136b8:	4680      	mov	r8, r0
 80136ba:	f100 0114 	add.w	r1, r0, #20
 80136be:	461a      	mov	r2, r3
 80136c0:	4553      	cmp	r3, sl
 80136c2:	db2b      	blt.n	801371c <__lshift+0x8c>
 80136c4:	6920      	ldr	r0, [r4, #16]
 80136c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80136ca:	f104 0314 	add.w	r3, r4, #20
 80136ce:	f016 021f 	ands.w	r2, r6, #31
 80136d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80136d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80136da:	d025      	beq.n	8013728 <__lshift+0x98>
 80136dc:	f1c2 0e20 	rsb	lr, r2, #32
 80136e0:	2000      	movs	r0, #0
 80136e2:	681e      	ldr	r6, [r3, #0]
 80136e4:	468a      	mov	sl, r1
 80136e6:	4096      	lsls	r6, r2
 80136e8:	4330      	orrs	r0, r6
 80136ea:	f84a 0b04 	str.w	r0, [sl], #4
 80136ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80136f2:	459c      	cmp	ip, r3
 80136f4:	fa20 f00e 	lsr.w	r0, r0, lr
 80136f8:	d814      	bhi.n	8013724 <__lshift+0x94>
 80136fa:	6048      	str	r0, [r1, #4]
 80136fc:	b108      	cbz	r0, 8013702 <__lshift+0x72>
 80136fe:	f109 0502 	add.w	r5, r9, #2
 8013702:	3d01      	subs	r5, #1
 8013704:	4638      	mov	r0, r7
 8013706:	f8c8 5010 	str.w	r5, [r8, #16]
 801370a:	4621      	mov	r1, r4
 801370c:	f7ff fdf5 	bl	80132fa <_Bfree>
 8013710:	4640      	mov	r0, r8
 8013712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013716:	3101      	adds	r1, #1
 8013718:	005b      	lsls	r3, r3, #1
 801371a:	e7c7      	b.n	80136ac <__lshift+0x1c>
 801371c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013720:	3301      	adds	r3, #1
 8013722:	e7cd      	b.n	80136c0 <__lshift+0x30>
 8013724:	4651      	mov	r1, sl
 8013726:	e7dc      	b.n	80136e2 <__lshift+0x52>
 8013728:	3904      	subs	r1, #4
 801372a:	f853 2b04 	ldr.w	r2, [r3], #4
 801372e:	f841 2f04 	str.w	r2, [r1, #4]!
 8013732:	459c      	cmp	ip, r3
 8013734:	d8f9      	bhi.n	801372a <__lshift+0x9a>
 8013736:	e7e4      	b.n	8013702 <__lshift+0x72>

08013738 <__mcmp>:
 8013738:	6903      	ldr	r3, [r0, #16]
 801373a:	690a      	ldr	r2, [r1, #16]
 801373c:	1a9b      	subs	r3, r3, r2
 801373e:	b530      	push	{r4, r5, lr}
 8013740:	d10c      	bne.n	801375c <__mcmp+0x24>
 8013742:	0092      	lsls	r2, r2, #2
 8013744:	3014      	adds	r0, #20
 8013746:	3114      	adds	r1, #20
 8013748:	1884      	adds	r4, r0, r2
 801374a:	4411      	add	r1, r2
 801374c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013750:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013754:	4295      	cmp	r5, r2
 8013756:	d003      	beq.n	8013760 <__mcmp+0x28>
 8013758:	d305      	bcc.n	8013766 <__mcmp+0x2e>
 801375a:	2301      	movs	r3, #1
 801375c:	4618      	mov	r0, r3
 801375e:	bd30      	pop	{r4, r5, pc}
 8013760:	42a0      	cmp	r0, r4
 8013762:	d3f3      	bcc.n	801374c <__mcmp+0x14>
 8013764:	e7fa      	b.n	801375c <__mcmp+0x24>
 8013766:	f04f 33ff 	mov.w	r3, #4294967295
 801376a:	e7f7      	b.n	801375c <__mcmp+0x24>

0801376c <__mdiff>:
 801376c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013770:	460d      	mov	r5, r1
 8013772:	4607      	mov	r7, r0
 8013774:	4611      	mov	r1, r2
 8013776:	4628      	mov	r0, r5
 8013778:	4614      	mov	r4, r2
 801377a:	f7ff ffdd 	bl	8013738 <__mcmp>
 801377e:	1e06      	subs	r6, r0, #0
 8013780:	d108      	bne.n	8013794 <__mdiff+0x28>
 8013782:	4631      	mov	r1, r6
 8013784:	4638      	mov	r0, r7
 8013786:	f7ff fd84 	bl	8013292 <_Balloc>
 801378a:	2301      	movs	r3, #1
 801378c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013794:	bfa4      	itt	ge
 8013796:	4623      	movge	r3, r4
 8013798:	462c      	movge	r4, r5
 801379a:	4638      	mov	r0, r7
 801379c:	6861      	ldr	r1, [r4, #4]
 801379e:	bfa6      	itte	ge
 80137a0:	461d      	movge	r5, r3
 80137a2:	2600      	movge	r6, #0
 80137a4:	2601      	movlt	r6, #1
 80137a6:	f7ff fd74 	bl	8013292 <_Balloc>
 80137aa:	692b      	ldr	r3, [r5, #16]
 80137ac:	60c6      	str	r6, [r0, #12]
 80137ae:	6926      	ldr	r6, [r4, #16]
 80137b0:	f105 0914 	add.w	r9, r5, #20
 80137b4:	f104 0214 	add.w	r2, r4, #20
 80137b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80137bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80137c0:	f100 0514 	add.w	r5, r0, #20
 80137c4:	f04f 0e00 	mov.w	lr, #0
 80137c8:	f852 ab04 	ldr.w	sl, [r2], #4
 80137cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80137d0:	fa1e f18a 	uxtah	r1, lr, sl
 80137d4:	b2a3      	uxth	r3, r4
 80137d6:	1ac9      	subs	r1, r1, r3
 80137d8:	0c23      	lsrs	r3, r4, #16
 80137da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80137de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80137e2:	b289      	uxth	r1, r1
 80137e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80137e8:	45c8      	cmp	r8, r9
 80137ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80137ee:	4694      	mov	ip, r2
 80137f0:	f845 3b04 	str.w	r3, [r5], #4
 80137f4:	d8e8      	bhi.n	80137c8 <__mdiff+0x5c>
 80137f6:	45bc      	cmp	ip, r7
 80137f8:	d304      	bcc.n	8013804 <__mdiff+0x98>
 80137fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80137fe:	b183      	cbz	r3, 8013822 <__mdiff+0xb6>
 8013800:	6106      	str	r6, [r0, #16]
 8013802:	e7c5      	b.n	8013790 <__mdiff+0x24>
 8013804:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013808:	fa1e f381 	uxtah	r3, lr, r1
 801380c:	141a      	asrs	r2, r3, #16
 801380e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013812:	b29b      	uxth	r3, r3
 8013814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013818:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801381c:	f845 3b04 	str.w	r3, [r5], #4
 8013820:	e7e9      	b.n	80137f6 <__mdiff+0x8a>
 8013822:	3e01      	subs	r6, #1
 8013824:	e7e9      	b.n	80137fa <__mdiff+0x8e>
	...

08013828 <__ulp>:
 8013828:	4b12      	ldr	r3, [pc, #72]	; (8013874 <__ulp+0x4c>)
 801382a:	ee10 2a90 	vmov	r2, s1
 801382e:	401a      	ands	r2, r3
 8013830:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013834:	2b00      	cmp	r3, #0
 8013836:	dd04      	ble.n	8013842 <__ulp+0x1a>
 8013838:	2000      	movs	r0, #0
 801383a:	4619      	mov	r1, r3
 801383c:	ec41 0b10 	vmov	d0, r0, r1
 8013840:	4770      	bx	lr
 8013842:	425b      	negs	r3, r3
 8013844:	151b      	asrs	r3, r3, #20
 8013846:	2b13      	cmp	r3, #19
 8013848:	f04f 0000 	mov.w	r0, #0
 801384c:	f04f 0100 	mov.w	r1, #0
 8013850:	dc04      	bgt.n	801385c <__ulp+0x34>
 8013852:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013856:	fa42 f103 	asr.w	r1, r2, r3
 801385a:	e7ef      	b.n	801383c <__ulp+0x14>
 801385c:	3b14      	subs	r3, #20
 801385e:	2b1e      	cmp	r3, #30
 8013860:	f04f 0201 	mov.w	r2, #1
 8013864:	bfda      	itte	le
 8013866:	f1c3 031f 	rsble	r3, r3, #31
 801386a:	fa02 f303 	lslle.w	r3, r2, r3
 801386e:	4613      	movgt	r3, r2
 8013870:	4618      	mov	r0, r3
 8013872:	e7e3      	b.n	801383c <__ulp+0x14>
 8013874:	7ff00000 	.word	0x7ff00000

08013878 <__b2d>:
 8013878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801387a:	6905      	ldr	r5, [r0, #16]
 801387c:	f100 0714 	add.w	r7, r0, #20
 8013880:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013884:	1f2e      	subs	r6, r5, #4
 8013886:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801388a:	4620      	mov	r0, r4
 801388c:	f7ff fdc5 	bl	801341a <__hi0bits>
 8013890:	f1c0 0320 	rsb	r3, r0, #32
 8013894:	280a      	cmp	r0, #10
 8013896:	600b      	str	r3, [r1, #0]
 8013898:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013910 <__b2d+0x98>
 801389c:	dc14      	bgt.n	80138c8 <__b2d+0x50>
 801389e:	f1c0 0e0b 	rsb	lr, r0, #11
 80138a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80138a6:	42b7      	cmp	r7, r6
 80138a8:	ea41 030c 	orr.w	r3, r1, ip
 80138ac:	bf34      	ite	cc
 80138ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80138b2:	2100      	movcs	r1, #0
 80138b4:	3015      	adds	r0, #21
 80138b6:	fa04 f000 	lsl.w	r0, r4, r0
 80138ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80138be:	ea40 0201 	orr.w	r2, r0, r1
 80138c2:	ec43 2b10 	vmov	d0, r2, r3
 80138c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138c8:	42b7      	cmp	r7, r6
 80138ca:	bf3a      	itte	cc
 80138cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80138d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80138d4:	2100      	movcs	r1, #0
 80138d6:	380b      	subs	r0, #11
 80138d8:	d015      	beq.n	8013906 <__b2d+0x8e>
 80138da:	4084      	lsls	r4, r0
 80138dc:	f1c0 0520 	rsb	r5, r0, #32
 80138e0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80138e4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80138e8:	42be      	cmp	r6, r7
 80138ea:	fa21 fc05 	lsr.w	ip, r1, r5
 80138ee:	ea44 030c 	orr.w	r3, r4, ip
 80138f2:	bf8c      	ite	hi
 80138f4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80138f8:	2400      	movls	r4, #0
 80138fa:	fa01 f000 	lsl.w	r0, r1, r0
 80138fe:	40ec      	lsrs	r4, r5
 8013900:	ea40 0204 	orr.w	r2, r0, r4
 8013904:	e7dd      	b.n	80138c2 <__b2d+0x4a>
 8013906:	ea44 030c 	orr.w	r3, r4, ip
 801390a:	460a      	mov	r2, r1
 801390c:	e7d9      	b.n	80138c2 <__b2d+0x4a>
 801390e:	bf00      	nop
 8013910:	3ff00000 	.word	0x3ff00000

08013914 <__d2b>:
 8013914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013918:	460e      	mov	r6, r1
 801391a:	2101      	movs	r1, #1
 801391c:	ec59 8b10 	vmov	r8, r9, d0
 8013920:	4615      	mov	r5, r2
 8013922:	f7ff fcb6 	bl	8013292 <_Balloc>
 8013926:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801392a:	4607      	mov	r7, r0
 801392c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013930:	bb34      	cbnz	r4, 8013980 <__d2b+0x6c>
 8013932:	9301      	str	r3, [sp, #4]
 8013934:	f1b8 0300 	subs.w	r3, r8, #0
 8013938:	d027      	beq.n	801398a <__d2b+0x76>
 801393a:	a802      	add	r0, sp, #8
 801393c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013940:	f7ff fd8a 	bl	8013458 <__lo0bits>
 8013944:	9900      	ldr	r1, [sp, #0]
 8013946:	b1f0      	cbz	r0, 8013986 <__d2b+0x72>
 8013948:	9a01      	ldr	r2, [sp, #4]
 801394a:	f1c0 0320 	rsb	r3, r0, #32
 801394e:	fa02 f303 	lsl.w	r3, r2, r3
 8013952:	430b      	orrs	r3, r1
 8013954:	40c2      	lsrs	r2, r0
 8013956:	617b      	str	r3, [r7, #20]
 8013958:	9201      	str	r2, [sp, #4]
 801395a:	9b01      	ldr	r3, [sp, #4]
 801395c:	61bb      	str	r3, [r7, #24]
 801395e:	2b00      	cmp	r3, #0
 8013960:	bf14      	ite	ne
 8013962:	2102      	movne	r1, #2
 8013964:	2101      	moveq	r1, #1
 8013966:	6139      	str	r1, [r7, #16]
 8013968:	b1c4      	cbz	r4, 801399c <__d2b+0x88>
 801396a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801396e:	4404      	add	r4, r0
 8013970:	6034      	str	r4, [r6, #0]
 8013972:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013976:	6028      	str	r0, [r5, #0]
 8013978:	4638      	mov	r0, r7
 801397a:	b003      	add	sp, #12
 801397c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013984:	e7d5      	b.n	8013932 <__d2b+0x1e>
 8013986:	6179      	str	r1, [r7, #20]
 8013988:	e7e7      	b.n	801395a <__d2b+0x46>
 801398a:	a801      	add	r0, sp, #4
 801398c:	f7ff fd64 	bl	8013458 <__lo0bits>
 8013990:	9b01      	ldr	r3, [sp, #4]
 8013992:	617b      	str	r3, [r7, #20]
 8013994:	2101      	movs	r1, #1
 8013996:	6139      	str	r1, [r7, #16]
 8013998:	3020      	adds	r0, #32
 801399a:	e7e5      	b.n	8013968 <__d2b+0x54>
 801399c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80139a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80139a4:	6030      	str	r0, [r6, #0]
 80139a6:	6918      	ldr	r0, [r3, #16]
 80139a8:	f7ff fd37 	bl	801341a <__hi0bits>
 80139ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80139b0:	e7e1      	b.n	8013976 <__d2b+0x62>

080139b2 <__ratio>:
 80139b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139b6:	4688      	mov	r8, r1
 80139b8:	4669      	mov	r1, sp
 80139ba:	4681      	mov	r9, r0
 80139bc:	f7ff ff5c 	bl	8013878 <__b2d>
 80139c0:	a901      	add	r1, sp, #4
 80139c2:	4640      	mov	r0, r8
 80139c4:	ec57 6b10 	vmov	r6, r7, d0
 80139c8:	f7ff ff56 	bl	8013878 <__b2d>
 80139cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80139d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80139d4:	eba3 0c02 	sub.w	ip, r3, r2
 80139d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80139dc:	1a9b      	subs	r3, r3, r2
 80139de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80139e2:	ec5b ab10 	vmov	sl, fp, d0
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	bfce      	itee	gt
 80139ea:	463a      	movgt	r2, r7
 80139ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80139f0:	465a      	movle	r2, fp
 80139f2:	4659      	mov	r1, fp
 80139f4:	463d      	mov	r5, r7
 80139f6:	bfd4      	ite	le
 80139f8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80139fc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013a00:	4630      	mov	r0, r6
 8013a02:	ee10 2a10 	vmov	r2, s0
 8013a06:	460b      	mov	r3, r1
 8013a08:	4629      	mov	r1, r5
 8013a0a:	f7ec ff37 	bl	800087c <__aeabi_ddiv>
 8013a0e:	ec41 0b10 	vmov	d0, r0, r1
 8013a12:	b003      	add	sp, #12
 8013a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a18 <__copybits>:
 8013a18:	3901      	subs	r1, #1
 8013a1a:	b510      	push	{r4, lr}
 8013a1c:	1149      	asrs	r1, r1, #5
 8013a1e:	6914      	ldr	r4, [r2, #16]
 8013a20:	3101      	adds	r1, #1
 8013a22:	f102 0314 	add.w	r3, r2, #20
 8013a26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013a2e:	42a3      	cmp	r3, r4
 8013a30:	4602      	mov	r2, r0
 8013a32:	d303      	bcc.n	8013a3c <__copybits+0x24>
 8013a34:	2300      	movs	r3, #0
 8013a36:	428a      	cmp	r2, r1
 8013a38:	d305      	bcc.n	8013a46 <__copybits+0x2e>
 8013a3a:	bd10      	pop	{r4, pc}
 8013a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a40:	f840 2b04 	str.w	r2, [r0], #4
 8013a44:	e7f3      	b.n	8013a2e <__copybits+0x16>
 8013a46:	f842 3b04 	str.w	r3, [r2], #4
 8013a4a:	e7f4      	b.n	8013a36 <__copybits+0x1e>

08013a4c <__any_on>:
 8013a4c:	f100 0214 	add.w	r2, r0, #20
 8013a50:	6900      	ldr	r0, [r0, #16]
 8013a52:	114b      	asrs	r3, r1, #5
 8013a54:	4298      	cmp	r0, r3
 8013a56:	b510      	push	{r4, lr}
 8013a58:	db11      	blt.n	8013a7e <__any_on+0x32>
 8013a5a:	dd0a      	ble.n	8013a72 <__any_on+0x26>
 8013a5c:	f011 011f 	ands.w	r1, r1, #31
 8013a60:	d007      	beq.n	8013a72 <__any_on+0x26>
 8013a62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013a66:	fa24 f001 	lsr.w	r0, r4, r1
 8013a6a:	fa00 f101 	lsl.w	r1, r0, r1
 8013a6e:	428c      	cmp	r4, r1
 8013a70:	d10b      	bne.n	8013a8a <__any_on+0x3e>
 8013a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d803      	bhi.n	8013a82 <__any_on+0x36>
 8013a7a:	2000      	movs	r0, #0
 8013a7c:	bd10      	pop	{r4, pc}
 8013a7e:	4603      	mov	r3, r0
 8013a80:	e7f7      	b.n	8013a72 <__any_on+0x26>
 8013a82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013a86:	2900      	cmp	r1, #0
 8013a88:	d0f5      	beq.n	8013a76 <__any_on+0x2a>
 8013a8a:	2001      	movs	r0, #1
 8013a8c:	e7f6      	b.n	8013a7c <__any_on+0x30>

08013a8e <_calloc_r>:
 8013a8e:	b538      	push	{r3, r4, r5, lr}
 8013a90:	fb02 f401 	mul.w	r4, r2, r1
 8013a94:	4621      	mov	r1, r4
 8013a96:	f000 f857 	bl	8013b48 <_malloc_r>
 8013a9a:	4605      	mov	r5, r0
 8013a9c:	b118      	cbz	r0, 8013aa6 <_calloc_r+0x18>
 8013a9e:	4622      	mov	r2, r4
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	f7fc f8fd 	bl	800fca0 <memset>
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	bd38      	pop	{r3, r4, r5, pc}
	...

08013aac <_free_r>:
 8013aac:	b538      	push	{r3, r4, r5, lr}
 8013aae:	4605      	mov	r5, r0
 8013ab0:	2900      	cmp	r1, #0
 8013ab2:	d045      	beq.n	8013b40 <_free_r+0x94>
 8013ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ab8:	1f0c      	subs	r4, r1, #4
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	bfb8      	it	lt
 8013abe:	18e4      	addlt	r4, r4, r3
 8013ac0:	f000 ffdb 	bl	8014a7a <__malloc_lock>
 8013ac4:	4a1f      	ldr	r2, [pc, #124]	; (8013b44 <_free_r+0x98>)
 8013ac6:	6813      	ldr	r3, [r2, #0]
 8013ac8:	4610      	mov	r0, r2
 8013aca:	b933      	cbnz	r3, 8013ada <_free_r+0x2e>
 8013acc:	6063      	str	r3, [r4, #4]
 8013ace:	6014      	str	r4, [r2, #0]
 8013ad0:	4628      	mov	r0, r5
 8013ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ad6:	f000 bfd1 	b.w	8014a7c <__malloc_unlock>
 8013ada:	42a3      	cmp	r3, r4
 8013adc:	d90c      	bls.n	8013af8 <_free_r+0x4c>
 8013ade:	6821      	ldr	r1, [r4, #0]
 8013ae0:	1862      	adds	r2, r4, r1
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	bf04      	itt	eq
 8013ae6:	681a      	ldreq	r2, [r3, #0]
 8013ae8:	685b      	ldreq	r3, [r3, #4]
 8013aea:	6063      	str	r3, [r4, #4]
 8013aec:	bf04      	itt	eq
 8013aee:	1852      	addeq	r2, r2, r1
 8013af0:	6022      	streq	r2, [r4, #0]
 8013af2:	6004      	str	r4, [r0, #0]
 8013af4:	e7ec      	b.n	8013ad0 <_free_r+0x24>
 8013af6:	4613      	mov	r3, r2
 8013af8:	685a      	ldr	r2, [r3, #4]
 8013afa:	b10a      	cbz	r2, 8013b00 <_free_r+0x54>
 8013afc:	42a2      	cmp	r2, r4
 8013afe:	d9fa      	bls.n	8013af6 <_free_r+0x4a>
 8013b00:	6819      	ldr	r1, [r3, #0]
 8013b02:	1858      	adds	r0, r3, r1
 8013b04:	42a0      	cmp	r0, r4
 8013b06:	d10b      	bne.n	8013b20 <_free_r+0x74>
 8013b08:	6820      	ldr	r0, [r4, #0]
 8013b0a:	4401      	add	r1, r0
 8013b0c:	1858      	adds	r0, r3, r1
 8013b0e:	4282      	cmp	r2, r0
 8013b10:	6019      	str	r1, [r3, #0]
 8013b12:	d1dd      	bne.n	8013ad0 <_free_r+0x24>
 8013b14:	6810      	ldr	r0, [r2, #0]
 8013b16:	6852      	ldr	r2, [r2, #4]
 8013b18:	605a      	str	r2, [r3, #4]
 8013b1a:	4401      	add	r1, r0
 8013b1c:	6019      	str	r1, [r3, #0]
 8013b1e:	e7d7      	b.n	8013ad0 <_free_r+0x24>
 8013b20:	d902      	bls.n	8013b28 <_free_r+0x7c>
 8013b22:	230c      	movs	r3, #12
 8013b24:	602b      	str	r3, [r5, #0]
 8013b26:	e7d3      	b.n	8013ad0 <_free_r+0x24>
 8013b28:	6820      	ldr	r0, [r4, #0]
 8013b2a:	1821      	adds	r1, r4, r0
 8013b2c:	428a      	cmp	r2, r1
 8013b2e:	bf04      	itt	eq
 8013b30:	6811      	ldreq	r1, [r2, #0]
 8013b32:	6852      	ldreq	r2, [r2, #4]
 8013b34:	6062      	str	r2, [r4, #4]
 8013b36:	bf04      	itt	eq
 8013b38:	1809      	addeq	r1, r1, r0
 8013b3a:	6021      	streq	r1, [r4, #0]
 8013b3c:	605c      	str	r4, [r3, #4]
 8013b3e:	e7c7      	b.n	8013ad0 <_free_r+0x24>
 8013b40:	bd38      	pop	{r3, r4, r5, pc}
 8013b42:	bf00      	nop
 8013b44:	20007d04 	.word	0x20007d04

08013b48 <_malloc_r>:
 8013b48:	b570      	push	{r4, r5, r6, lr}
 8013b4a:	1ccd      	adds	r5, r1, #3
 8013b4c:	f025 0503 	bic.w	r5, r5, #3
 8013b50:	3508      	adds	r5, #8
 8013b52:	2d0c      	cmp	r5, #12
 8013b54:	bf38      	it	cc
 8013b56:	250c      	movcc	r5, #12
 8013b58:	2d00      	cmp	r5, #0
 8013b5a:	4606      	mov	r6, r0
 8013b5c:	db01      	blt.n	8013b62 <_malloc_r+0x1a>
 8013b5e:	42a9      	cmp	r1, r5
 8013b60:	d903      	bls.n	8013b6a <_malloc_r+0x22>
 8013b62:	230c      	movs	r3, #12
 8013b64:	6033      	str	r3, [r6, #0]
 8013b66:	2000      	movs	r0, #0
 8013b68:	bd70      	pop	{r4, r5, r6, pc}
 8013b6a:	f000 ff86 	bl	8014a7a <__malloc_lock>
 8013b6e:	4a21      	ldr	r2, [pc, #132]	; (8013bf4 <_malloc_r+0xac>)
 8013b70:	6814      	ldr	r4, [r2, #0]
 8013b72:	4621      	mov	r1, r4
 8013b74:	b991      	cbnz	r1, 8013b9c <_malloc_r+0x54>
 8013b76:	4c20      	ldr	r4, [pc, #128]	; (8013bf8 <_malloc_r+0xb0>)
 8013b78:	6823      	ldr	r3, [r4, #0]
 8013b7a:	b91b      	cbnz	r3, 8013b84 <_malloc_r+0x3c>
 8013b7c:	4630      	mov	r0, r6
 8013b7e:	f000 fe19 	bl	80147b4 <_sbrk_r>
 8013b82:	6020      	str	r0, [r4, #0]
 8013b84:	4629      	mov	r1, r5
 8013b86:	4630      	mov	r0, r6
 8013b88:	f000 fe14 	bl	80147b4 <_sbrk_r>
 8013b8c:	1c43      	adds	r3, r0, #1
 8013b8e:	d124      	bne.n	8013bda <_malloc_r+0x92>
 8013b90:	230c      	movs	r3, #12
 8013b92:	6033      	str	r3, [r6, #0]
 8013b94:	4630      	mov	r0, r6
 8013b96:	f000 ff71 	bl	8014a7c <__malloc_unlock>
 8013b9a:	e7e4      	b.n	8013b66 <_malloc_r+0x1e>
 8013b9c:	680b      	ldr	r3, [r1, #0]
 8013b9e:	1b5b      	subs	r3, r3, r5
 8013ba0:	d418      	bmi.n	8013bd4 <_malloc_r+0x8c>
 8013ba2:	2b0b      	cmp	r3, #11
 8013ba4:	d90f      	bls.n	8013bc6 <_malloc_r+0x7e>
 8013ba6:	600b      	str	r3, [r1, #0]
 8013ba8:	50cd      	str	r5, [r1, r3]
 8013baa:	18cc      	adds	r4, r1, r3
 8013bac:	4630      	mov	r0, r6
 8013bae:	f000 ff65 	bl	8014a7c <__malloc_unlock>
 8013bb2:	f104 000b 	add.w	r0, r4, #11
 8013bb6:	1d23      	adds	r3, r4, #4
 8013bb8:	f020 0007 	bic.w	r0, r0, #7
 8013bbc:	1ac3      	subs	r3, r0, r3
 8013bbe:	d0d3      	beq.n	8013b68 <_malloc_r+0x20>
 8013bc0:	425a      	negs	r2, r3
 8013bc2:	50e2      	str	r2, [r4, r3]
 8013bc4:	e7d0      	b.n	8013b68 <_malloc_r+0x20>
 8013bc6:	428c      	cmp	r4, r1
 8013bc8:	684b      	ldr	r3, [r1, #4]
 8013bca:	bf16      	itet	ne
 8013bcc:	6063      	strne	r3, [r4, #4]
 8013bce:	6013      	streq	r3, [r2, #0]
 8013bd0:	460c      	movne	r4, r1
 8013bd2:	e7eb      	b.n	8013bac <_malloc_r+0x64>
 8013bd4:	460c      	mov	r4, r1
 8013bd6:	6849      	ldr	r1, [r1, #4]
 8013bd8:	e7cc      	b.n	8013b74 <_malloc_r+0x2c>
 8013bda:	1cc4      	adds	r4, r0, #3
 8013bdc:	f024 0403 	bic.w	r4, r4, #3
 8013be0:	42a0      	cmp	r0, r4
 8013be2:	d005      	beq.n	8013bf0 <_malloc_r+0xa8>
 8013be4:	1a21      	subs	r1, r4, r0
 8013be6:	4630      	mov	r0, r6
 8013be8:	f000 fde4 	bl	80147b4 <_sbrk_r>
 8013bec:	3001      	adds	r0, #1
 8013bee:	d0cf      	beq.n	8013b90 <_malloc_r+0x48>
 8013bf0:	6025      	str	r5, [r4, #0]
 8013bf2:	e7db      	b.n	8013bac <_malloc_r+0x64>
 8013bf4:	20007d04 	.word	0x20007d04
 8013bf8:	20007d08 	.word	0x20007d08

08013bfc <__ssputs_r>:
 8013bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c00:	688e      	ldr	r6, [r1, #8]
 8013c02:	429e      	cmp	r6, r3
 8013c04:	4682      	mov	sl, r0
 8013c06:	460c      	mov	r4, r1
 8013c08:	4690      	mov	r8, r2
 8013c0a:	4699      	mov	r9, r3
 8013c0c:	d837      	bhi.n	8013c7e <__ssputs_r+0x82>
 8013c0e:	898a      	ldrh	r2, [r1, #12]
 8013c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013c14:	d031      	beq.n	8013c7a <__ssputs_r+0x7e>
 8013c16:	6825      	ldr	r5, [r4, #0]
 8013c18:	6909      	ldr	r1, [r1, #16]
 8013c1a:	1a6f      	subs	r7, r5, r1
 8013c1c:	6965      	ldr	r5, [r4, #20]
 8013c1e:	2302      	movs	r3, #2
 8013c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c24:	fb95 f5f3 	sdiv	r5, r5, r3
 8013c28:	f109 0301 	add.w	r3, r9, #1
 8013c2c:	443b      	add	r3, r7
 8013c2e:	429d      	cmp	r5, r3
 8013c30:	bf38      	it	cc
 8013c32:	461d      	movcc	r5, r3
 8013c34:	0553      	lsls	r3, r2, #21
 8013c36:	d530      	bpl.n	8013c9a <__ssputs_r+0x9e>
 8013c38:	4629      	mov	r1, r5
 8013c3a:	f7ff ff85 	bl	8013b48 <_malloc_r>
 8013c3e:	4606      	mov	r6, r0
 8013c40:	b950      	cbnz	r0, 8013c58 <__ssputs_r+0x5c>
 8013c42:	230c      	movs	r3, #12
 8013c44:	f8ca 3000 	str.w	r3, [sl]
 8013c48:	89a3      	ldrh	r3, [r4, #12]
 8013c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c4e:	81a3      	strh	r3, [r4, #12]
 8013c50:	f04f 30ff 	mov.w	r0, #4294967295
 8013c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c58:	463a      	mov	r2, r7
 8013c5a:	6921      	ldr	r1, [r4, #16]
 8013c5c:	f7ff fb0e 	bl	801327c <memcpy>
 8013c60:	89a3      	ldrh	r3, [r4, #12]
 8013c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c6a:	81a3      	strh	r3, [r4, #12]
 8013c6c:	6126      	str	r6, [r4, #16]
 8013c6e:	6165      	str	r5, [r4, #20]
 8013c70:	443e      	add	r6, r7
 8013c72:	1bed      	subs	r5, r5, r7
 8013c74:	6026      	str	r6, [r4, #0]
 8013c76:	60a5      	str	r5, [r4, #8]
 8013c78:	464e      	mov	r6, r9
 8013c7a:	454e      	cmp	r6, r9
 8013c7c:	d900      	bls.n	8013c80 <__ssputs_r+0x84>
 8013c7e:	464e      	mov	r6, r9
 8013c80:	4632      	mov	r2, r6
 8013c82:	4641      	mov	r1, r8
 8013c84:	6820      	ldr	r0, [r4, #0]
 8013c86:	f000 fedf 	bl	8014a48 <memmove>
 8013c8a:	68a3      	ldr	r3, [r4, #8]
 8013c8c:	1b9b      	subs	r3, r3, r6
 8013c8e:	60a3      	str	r3, [r4, #8]
 8013c90:	6823      	ldr	r3, [r4, #0]
 8013c92:	441e      	add	r6, r3
 8013c94:	6026      	str	r6, [r4, #0]
 8013c96:	2000      	movs	r0, #0
 8013c98:	e7dc      	b.n	8013c54 <__ssputs_r+0x58>
 8013c9a:	462a      	mov	r2, r5
 8013c9c:	f000 feef 	bl	8014a7e <_realloc_r>
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d1e2      	bne.n	8013c6c <__ssputs_r+0x70>
 8013ca6:	6921      	ldr	r1, [r4, #16]
 8013ca8:	4650      	mov	r0, sl
 8013caa:	f7ff feff 	bl	8013aac <_free_r>
 8013cae:	e7c8      	b.n	8013c42 <__ssputs_r+0x46>

08013cb0 <_svfiprintf_r>:
 8013cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cb4:	461d      	mov	r5, r3
 8013cb6:	898b      	ldrh	r3, [r1, #12]
 8013cb8:	061f      	lsls	r7, r3, #24
 8013cba:	b09d      	sub	sp, #116	; 0x74
 8013cbc:	4680      	mov	r8, r0
 8013cbe:	460c      	mov	r4, r1
 8013cc0:	4616      	mov	r6, r2
 8013cc2:	d50f      	bpl.n	8013ce4 <_svfiprintf_r+0x34>
 8013cc4:	690b      	ldr	r3, [r1, #16]
 8013cc6:	b96b      	cbnz	r3, 8013ce4 <_svfiprintf_r+0x34>
 8013cc8:	2140      	movs	r1, #64	; 0x40
 8013cca:	f7ff ff3d 	bl	8013b48 <_malloc_r>
 8013cce:	6020      	str	r0, [r4, #0]
 8013cd0:	6120      	str	r0, [r4, #16]
 8013cd2:	b928      	cbnz	r0, 8013ce0 <_svfiprintf_r+0x30>
 8013cd4:	230c      	movs	r3, #12
 8013cd6:	f8c8 3000 	str.w	r3, [r8]
 8013cda:	f04f 30ff 	mov.w	r0, #4294967295
 8013cde:	e0c8      	b.n	8013e72 <_svfiprintf_r+0x1c2>
 8013ce0:	2340      	movs	r3, #64	; 0x40
 8013ce2:	6163      	str	r3, [r4, #20]
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8013ce8:	2320      	movs	r3, #32
 8013cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013cee:	2330      	movs	r3, #48	; 0x30
 8013cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013cf4:	9503      	str	r5, [sp, #12]
 8013cf6:	f04f 0b01 	mov.w	fp, #1
 8013cfa:	4637      	mov	r7, r6
 8013cfc:	463d      	mov	r5, r7
 8013cfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013d02:	b10b      	cbz	r3, 8013d08 <_svfiprintf_r+0x58>
 8013d04:	2b25      	cmp	r3, #37	; 0x25
 8013d06:	d13e      	bne.n	8013d86 <_svfiprintf_r+0xd6>
 8013d08:	ebb7 0a06 	subs.w	sl, r7, r6
 8013d0c:	d00b      	beq.n	8013d26 <_svfiprintf_r+0x76>
 8013d0e:	4653      	mov	r3, sl
 8013d10:	4632      	mov	r2, r6
 8013d12:	4621      	mov	r1, r4
 8013d14:	4640      	mov	r0, r8
 8013d16:	f7ff ff71 	bl	8013bfc <__ssputs_r>
 8013d1a:	3001      	adds	r0, #1
 8013d1c:	f000 80a4 	beq.w	8013e68 <_svfiprintf_r+0x1b8>
 8013d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d22:	4453      	add	r3, sl
 8013d24:	9309      	str	r3, [sp, #36]	; 0x24
 8013d26:	783b      	ldrb	r3, [r7, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f000 809d 	beq.w	8013e68 <_svfiprintf_r+0x1b8>
 8013d2e:	2300      	movs	r3, #0
 8013d30:	f04f 32ff 	mov.w	r2, #4294967295
 8013d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d38:	9304      	str	r3, [sp, #16]
 8013d3a:	9307      	str	r3, [sp, #28]
 8013d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d40:	931a      	str	r3, [sp, #104]	; 0x68
 8013d42:	462f      	mov	r7, r5
 8013d44:	2205      	movs	r2, #5
 8013d46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013d4a:	4850      	ldr	r0, [pc, #320]	; (8013e8c <_svfiprintf_r+0x1dc>)
 8013d4c:	f7ec fa60 	bl	8000210 <memchr>
 8013d50:	9b04      	ldr	r3, [sp, #16]
 8013d52:	b9d0      	cbnz	r0, 8013d8a <_svfiprintf_r+0xda>
 8013d54:	06d9      	lsls	r1, r3, #27
 8013d56:	bf44      	itt	mi
 8013d58:	2220      	movmi	r2, #32
 8013d5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013d5e:	071a      	lsls	r2, r3, #28
 8013d60:	bf44      	itt	mi
 8013d62:	222b      	movmi	r2, #43	; 0x2b
 8013d64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013d68:	782a      	ldrb	r2, [r5, #0]
 8013d6a:	2a2a      	cmp	r2, #42	; 0x2a
 8013d6c:	d015      	beq.n	8013d9a <_svfiprintf_r+0xea>
 8013d6e:	9a07      	ldr	r2, [sp, #28]
 8013d70:	462f      	mov	r7, r5
 8013d72:	2000      	movs	r0, #0
 8013d74:	250a      	movs	r5, #10
 8013d76:	4639      	mov	r1, r7
 8013d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d7c:	3b30      	subs	r3, #48	; 0x30
 8013d7e:	2b09      	cmp	r3, #9
 8013d80:	d94d      	bls.n	8013e1e <_svfiprintf_r+0x16e>
 8013d82:	b1b8      	cbz	r0, 8013db4 <_svfiprintf_r+0x104>
 8013d84:	e00f      	b.n	8013da6 <_svfiprintf_r+0xf6>
 8013d86:	462f      	mov	r7, r5
 8013d88:	e7b8      	b.n	8013cfc <_svfiprintf_r+0x4c>
 8013d8a:	4a40      	ldr	r2, [pc, #256]	; (8013e8c <_svfiprintf_r+0x1dc>)
 8013d8c:	1a80      	subs	r0, r0, r2
 8013d8e:	fa0b f000 	lsl.w	r0, fp, r0
 8013d92:	4318      	orrs	r0, r3
 8013d94:	9004      	str	r0, [sp, #16]
 8013d96:	463d      	mov	r5, r7
 8013d98:	e7d3      	b.n	8013d42 <_svfiprintf_r+0x92>
 8013d9a:	9a03      	ldr	r2, [sp, #12]
 8013d9c:	1d11      	adds	r1, r2, #4
 8013d9e:	6812      	ldr	r2, [r2, #0]
 8013da0:	9103      	str	r1, [sp, #12]
 8013da2:	2a00      	cmp	r2, #0
 8013da4:	db01      	blt.n	8013daa <_svfiprintf_r+0xfa>
 8013da6:	9207      	str	r2, [sp, #28]
 8013da8:	e004      	b.n	8013db4 <_svfiprintf_r+0x104>
 8013daa:	4252      	negs	r2, r2
 8013dac:	f043 0302 	orr.w	r3, r3, #2
 8013db0:	9207      	str	r2, [sp, #28]
 8013db2:	9304      	str	r3, [sp, #16]
 8013db4:	783b      	ldrb	r3, [r7, #0]
 8013db6:	2b2e      	cmp	r3, #46	; 0x2e
 8013db8:	d10c      	bne.n	8013dd4 <_svfiprintf_r+0x124>
 8013dba:	787b      	ldrb	r3, [r7, #1]
 8013dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8013dbe:	d133      	bne.n	8013e28 <_svfiprintf_r+0x178>
 8013dc0:	9b03      	ldr	r3, [sp, #12]
 8013dc2:	1d1a      	adds	r2, r3, #4
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	9203      	str	r2, [sp, #12]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	bfb8      	it	lt
 8013dcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8013dd0:	3702      	adds	r7, #2
 8013dd2:	9305      	str	r3, [sp, #20]
 8013dd4:	4d2e      	ldr	r5, [pc, #184]	; (8013e90 <_svfiprintf_r+0x1e0>)
 8013dd6:	7839      	ldrb	r1, [r7, #0]
 8013dd8:	2203      	movs	r2, #3
 8013dda:	4628      	mov	r0, r5
 8013ddc:	f7ec fa18 	bl	8000210 <memchr>
 8013de0:	b138      	cbz	r0, 8013df2 <_svfiprintf_r+0x142>
 8013de2:	2340      	movs	r3, #64	; 0x40
 8013de4:	1b40      	subs	r0, r0, r5
 8013de6:	fa03 f000 	lsl.w	r0, r3, r0
 8013dea:	9b04      	ldr	r3, [sp, #16]
 8013dec:	4303      	orrs	r3, r0
 8013dee:	3701      	adds	r7, #1
 8013df0:	9304      	str	r3, [sp, #16]
 8013df2:	7839      	ldrb	r1, [r7, #0]
 8013df4:	4827      	ldr	r0, [pc, #156]	; (8013e94 <_svfiprintf_r+0x1e4>)
 8013df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013dfa:	2206      	movs	r2, #6
 8013dfc:	1c7e      	adds	r6, r7, #1
 8013dfe:	f7ec fa07 	bl	8000210 <memchr>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	d038      	beq.n	8013e78 <_svfiprintf_r+0x1c8>
 8013e06:	4b24      	ldr	r3, [pc, #144]	; (8013e98 <_svfiprintf_r+0x1e8>)
 8013e08:	bb13      	cbnz	r3, 8013e50 <_svfiprintf_r+0x1a0>
 8013e0a:	9b03      	ldr	r3, [sp, #12]
 8013e0c:	3307      	adds	r3, #7
 8013e0e:	f023 0307 	bic.w	r3, r3, #7
 8013e12:	3308      	adds	r3, #8
 8013e14:	9303      	str	r3, [sp, #12]
 8013e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e18:	444b      	add	r3, r9
 8013e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e1c:	e76d      	b.n	8013cfa <_svfiprintf_r+0x4a>
 8013e1e:	fb05 3202 	mla	r2, r5, r2, r3
 8013e22:	2001      	movs	r0, #1
 8013e24:	460f      	mov	r7, r1
 8013e26:	e7a6      	b.n	8013d76 <_svfiprintf_r+0xc6>
 8013e28:	2300      	movs	r3, #0
 8013e2a:	3701      	adds	r7, #1
 8013e2c:	9305      	str	r3, [sp, #20]
 8013e2e:	4619      	mov	r1, r3
 8013e30:	250a      	movs	r5, #10
 8013e32:	4638      	mov	r0, r7
 8013e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e38:	3a30      	subs	r2, #48	; 0x30
 8013e3a:	2a09      	cmp	r2, #9
 8013e3c:	d903      	bls.n	8013e46 <_svfiprintf_r+0x196>
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d0c8      	beq.n	8013dd4 <_svfiprintf_r+0x124>
 8013e42:	9105      	str	r1, [sp, #20]
 8013e44:	e7c6      	b.n	8013dd4 <_svfiprintf_r+0x124>
 8013e46:	fb05 2101 	mla	r1, r5, r1, r2
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	4607      	mov	r7, r0
 8013e4e:	e7f0      	b.n	8013e32 <_svfiprintf_r+0x182>
 8013e50:	ab03      	add	r3, sp, #12
 8013e52:	9300      	str	r3, [sp, #0]
 8013e54:	4622      	mov	r2, r4
 8013e56:	4b11      	ldr	r3, [pc, #68]	; (8013e9c <_svfiprintf_r+0x1ec>)
 8013e58:	a904      	add	r1, sp, #16
 8013e5a:	4640      	mov	r0, r8
 8013e5c:	f7fb ffbc 	bl	800fdd8 <_printf_float>
 8013e60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013e64:	4681      	mov	r9, r0
 8013e66:	d1d6      	bne.n	8013e16 <_svfiprintf_r+0x166>
 8013e68:	89a3      	ldrh	r3, [r4, #12]
 8013e6a:	065b      	lsls	r3, r3, #25
 8013e6c:	f53f af35 	bmi.w	8013cda <_svfiprintf_r+0x2a>
 8013e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e72:	b01d      	add	sp, #116	; 0x74
 8013e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e78:	ab03      	add	r3, sp, #12
 8013e7a:	9300      	str	r3, [sp, #0]
 8013e7c:	4622      	mov	r2, r4
 8013e7e:	4b07      	ldr	r3, [pc, #28]	; (8013e9c <_svfiprintf_r+0x1ec>)
 8013e80:	a904      	add	r1, sp, #16
 8013e82:	4640      	mov	r0, r8
 8013e84:	f7fc fa5e 	bl	8010344 <_printf_i>
 8013e88:	e7ea      	b.n	8013e60 <_svfiprintf_r+0x1b0>
 8013e8a:	bf00      	nop
 8013e8c:	08015314 	.word	0x08015314
 8013e90:	0801531a 	.word	0x0801531a
 8013e94:	0801531e 	.word	0x0801531e
 8013e98:	0800fdd9 	.word	0x0800fdd9
 8013e9c:	08013bfd 	.word	0x08013bfd

08013ea0 <_sungetc_r>:
 8013ea0:	b538      	push	{r3, r4, r5, lr}
 8013ea2:	1c4b      	adds	r3, r1, #1
 8013ea4:	4614      	mov	r4, r2
 8013ea6:	d103      	bne.n	8013eb0 <_sungetc_r+0x10>
 8013ea8:	f04f 35ff 	mov.w	r5, #4294967295
 8013eac:	4628      	mov	r0, r5
 8013eae:	bd38      	pop	{r3, r4, r5, pc}
 8013eb0:	8993      	ldrh	r3, [r2, #12]
 8013eb2:	f023 0320 	bic.w	r3, r3, #32
 8013eb6:	8193      	strh	r3, [r2, #12]
 8013eb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013eba:	6852      	ldr	r2, [r2, #4]
 8013ebc:	b2cd      	uxtb	r5, r1
 8013ebe:	b18b      	cbz	r3, 8013ee4 <_sungetc_r+0x44>
 8013ec0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	dd08      	ble.n	8013ed8 <_sungetc_r+0x38>
 8013ec6:	6823      	ldr	r3, [r4, #0]
 8013ec8:	1e5a      	subs	r2, r3, #1
 8013eca:	6022      	str	r2, [r4, #0]
 8013ecc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013ed0:	6863      	ldr	r3, [r4, #4]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	6063      	str	r3, [r4, #4]
 8013ed6:	e7e9      	b.n	8013eac <_sungetc_r+0xc>
 8013ed8:	4621      	mov	r1, r4
 8013eda:	f000 fd4b 	bl	8014974 <__submore>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d0f1      	beq.n	8013ec6 <_sungetc_r+0x26>
 8013ee2:	e7e1      	b.n	8013ea8 <_sungetc_r+0x8>
 8013ee4:	6921      	ldr	r1, [r4, #16]
 8013ee6:	6823      	ldr	r3, [r4, #0]
 8013ee8:	b151      	cbz	r1, 8013f00 <_sungetc_r+0x60>
 8013eea:	4299      	cmp	r1, r3
 8013eec:	d208      	bcs.n	8013f00 <_sungetc_r+0x60>
 8013eee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013ef2:	42a9      	cmp	r1, r5
 8013ef4:	d104      	bne.n	8013f00 <_sungetc_r+0x60>
 8013ef6:	3b01      	subs	r3, #1
 8013ef8:	3201      	adds	r2, #1
 8013efa:	6023      	str	r3, [r4, #0]
 8013efc:	6062      	str	r2, [r4, #4]
 8013efe:	e7d5      	b.n	8013eac <_sungetc_r+0xc>
 8013f00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f08:	6363      	str	r3, [r4, #52]	; 0x34
 8013f0a:	2303      	movs	r3, #3
 8013f0c:	63a3      	str	r3, [r4, #56]	; 0x38
 8013f0e:	4623      	mov	r3, r4
 8013f10:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013f14:	6023      	str	r3, [r4, #0]
 8013f16:	2301      	movs	r3, #1
 8013f18:	e7dc      	b.n	8013ed4 <_sungetc_r+0x34>

08013f1a <__ssrefill_r>:
 8013f1a:	b510      	push	{r4, lr}
 8013f1c:	460c      	mov	r4, r1
 8013f1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013f20:	b169      	cbz	r1, 8013f3e <__ssrefill_r+0x24>
 8013f22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f26:	4299      	cmp	r1, r3
 8013f28:	d001      	beq.n	8013f2e <__ssrefill_r+0x14>
 8013f2a:	f7ff fdbf 	bl	8013aac <_free_r>
 8013f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f30:	6063      	str	r3, [r4, #4]
 8013f32:	2000      	movs	r0, #0
 8013f34:	6360      	str	r0, [r4, #52]	; 0x34
 8013f36:	b113      	cbz	r3, 8013f3e <__ssrefill_r+0x24>
 8013f38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013f3a:	6023      	str	r3, [r4, #0]
 8013f3c:	bd10      	pop	{r4, pc}
 8013f3e:	6923      	ldr	r3, [r4, #16]
 8013f40:	6023      	str	r3, [r4, #0]
 8013f42:	2300      	movs	r3, #0
 8013f44:	6063      	str	r3, [r4, #4]
 8013f46:	89a3      	ldrh	r3, [r4, #12]
 8013f48:	f043 0320 	orr.w	r3, r3, #32
 8013f4c:	81a3      	strh	r3, [r4, #12]
 8013f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f52:	e7f3      	b.n	8013f3c <__ssrefill_r+0x22>

08013f54 <__ssvfiscanf_r>:
 8013f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f58:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013f5c:	460c      	mov	r4, r1
 8013f5e:	2100      	movs	r1, #0
 8013f60:	9144      	str	r1, [sp, #272]	; 0x110
 8013f62:	9145      	str	r1, [sp, #276]	; 0x114
 8013f64:	499f      	ldr	r1, [pc, #636]	; (80141e4 <__ssvfiscanf_r+0x290>)
 8013f66:	91a0      	str	r1, [sp, #640]	; 0x280
 8013f68:	f10d 0804 	add.w	r8, sp, #4
 8013f6c:	499e      	ldr	r1, [pc, #632]	; (80141e8 <__ssvfiscanf_r+0x294>)
 8013f6e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80141ec <__ssvfiscanf_r+0x298>
 8013f72:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013f76:	4606      	mov	r6, r0
 8013f78:	4692      	mov	sl, r2
 8013f7a:	91a1      	str	r1, [sp, #644]	; 0x284
 8013f7c:	9300      	str	r3, [sp, #0]
 8013f7e:	270a      	movs	r7, #10
 8013f80:	f89a 3000 	ldrb.w	r3, [sl]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	f000 812a 	beq.w	80141de <__ssvfiscanf_r+0x28a>
 8013f8a:	4655      	mov	r5, sl
 8013f8c:	f7ff f8c8 	bl	8013120 <__locale_ctype_ptr>
 8013f90:	f815 bb01 	ldrb.w	fp, [r5], #1
 8013f94:	4458      	add	r0, fp
 8013f96:	7843      	ldrb	r3, [r0, #1]
 8013f98:	f013 0308 	ands.w	r3, r3, #8
 8013f9c:	d01c      	beq.n	8013fd8 <__ssvfiscanf_r+0x84>
 8013f9e:	6863      	ldr	r3, [r4, #4]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	dd12      	ble.n	8013fca <__ssvfiscanf_r+0x76>
 8013fa4:	f7ff f8bc 	bl	8013120 <__locale_ctype_ptr>
 8013fa8:	6823      	ldr	r3, [r4, #0]
 8013faa:	781a      	ldrb	r2, [r3, #0]
 8013fac:	4410      	add	r0, r2
 8013fae:	7842      	ldrb	r2, [r0, #1]
 8013fb0:	0712      	lsls	r2, r2, #28
 8013fb2:	d401      	bmi.n	8013fb8 <__ssvfiscanf_r+0x64>
 8013fb4:	46aa      	mov	sl, r5
 8013fb6:	e7e3      	b.n	8013f80 <__ssvfiscanf_r+0x2c>
 8013fb8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013fba:	3201      	adds	r2, #1
 8013fbc:	9245      	str	r2, [sp, #276]	; 0x114
 8013fbe:	6862      	ldr	r2, [r4, #4]
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	3a01      	subs	r2, #1
 8013fc4:	6062      	str	r2, [r4, #4]
 8013fc6:	6023      	str	r3, [r4, #0]
 8013fc8:	e7e9      	b.n	8013f9e <__ssvfiscanf_r+0x4a>
 8013fca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013fcc:	4621      	mov	r1, r4
 8013fce:	4630      	mov	r0, r6
 8013fd0:	4798      	blx	r3
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d0e6      	beq.n	8013fa4 <__ssvfiscanf_r+0x50>
 8013fd6:	e7ed      	b.n	8013fb4 <__ssvfiscanf_r+0x60>
 8013fd8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8013fdc:	f040 8082 	bne.w	80140e4 <__ssvfiscanf_r+0x190>
 8013fe0:	9343      	str	r3, [sp, #268]	; 0x10c
 8013fe2:	9341      	str	r3, [sp, #260]	; 0x104
 8013fe4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8013fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8013fea:	d103      	bne.n	8013ff4 <__ssvfiscanf_r+0xa0>
 8013fec:	2310      	movs	r3, #16
 8013fee:	9341      	str	r3, [sp, #260]	; 0x104
 8013ff0:	f10a 0502 	add.w	r5, sl, #2
 8013ff4:	46aa      	mov	sl, r5
 8013ff6:	f815 1b01 	ldrb.w	r1, [r5], #1
 8013ffa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013ffe:	2a09      	cmp	r2, #9
 8014000:	d922      	bls.n	8014048 <__ssvfiscanf_r+0xf4>
 8014002:	2203      	movs	r2, #3
 8014004:	4879      	ldr	r0, [pc, #484]	; (80141ec <__ssvfiscanf_r+0x298>)
 8014006:	f7ec f903 	bl	8000210 <memchr>
 801400a:	b138      	cbz	r0, 801401c <__ssvfiscanf_r+0xc8>
 801400c:	eba0 0309 	sub.w	r3, r0, r9
 8014010:	2001      	movs	r0, #1
 8014012:	4098      	lsls	r0, r3
 8014014:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014016:	4318      	orrs	r0, r3
 8014018:	9041      	str	r0, [sp, #260]	; 0x104
 801401a:	46aa      	mov	sl, r5
 801401c:	f89a 3000 	ldrb.w	r3, [sl]
 8014020:	2b67      	cmp	r3, #103	; 0x67
 8014022:	f10a 0501 	add.w	r5, sl, #1
 8014026:	d82b      	bhi.n	8014080 <__ssvfiscanf_r+0x12c>
 8014028:	2b65      	cmp	r3, #101	; 0x65
 801402a:	f080 809f 	bcs.w	801416c <__ssvfiscanf_r+0x218>
 801402e:	2b47      	cmp	r3, #71	; 0x47
 8014030:	d810      	bhi.n	8014054 <__ssvfiscanf_r+0x100>
 8014032:	2b45      	cmp	r3, #69	; 0x45
 8014034:	f080 809a 	bcs.w	801416c <__ssvfiscanf_r+0x218>
 8014038:	2b00      	cmp	r3, #0
 801403a:	d06c      	beq.n	8014116 <__ssvfiscanf_r+0x1c2>
 801403c:	2b25      	cmp	r3, #37	; 0x25
 801403e:	d051      	beq.n	80140e4 <__ssvfiscanf_r+0x190>
 8014040:	2303      	movs	r3, #3
 8014042:	9347      	str	r3, [sp, #284]	; 0x11c
 8014044:	9742      	str	r7, [sp, #264]	; 0x108
 8014046:	e027      	b.n	8014098 <__ssvfiscanf_r+0x144>
 8014048:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801404a:	fb07 1303 	mla	r3, r7, r3, r1
 801404e:	3b30      	subs	r3, #48	; 0x30
 8014050:	9343      	str	r3, [sp, #268]	; 0x10c
 8014052:	e7cf      	b.n	8013ff4 <__ssvfiscanf_r+0xa0>
 8014054:	2b5b      	cmp	r3, #91	; 0x5b
 8014056:	d06a      	beq.n	801412e <__ssvfiscanf_r+0x1da>
 8014058:	d80c      	bhi.n	8014074 <__ssvfiscanf_r+0x120>
 801405a:	2b58      	cmp	r3, #88	; 0x58
 801405c:	d1f0      	bne.n	8014040 <__ssvfiscanf_r+0xec>
 801405e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014064:	9241      	str	r2, [sp, #260]	; 0x104
 8014066:	2210      	movs	r2, #16
 8014068:	9242      	str	r2, [sp, #264]	; 0x108
 801406a:	2b6e      	cmp	r3, #110	; 0x6e
 801406c:	bf8c      	ite	hi
 801406e:	2304      	movhi	r3, #4
 8014070:	2303      	movls	r3, #3
 8014072:	e010      	b.n	8014096 <__ssvfiscanf_r+0x142>
 8014074:	2b63      	cmp	r3, #99	; 0x63
 8014076:	d065      	beq.n	8014144 <__ssvfiscanf_r+0x1f0>
 8014078:	2b64      	cmp	r3, #100	; 0x64
 801407a:	d1e1      	bne.n	8014040 <__ssvfiscanf_r+0xec>
 801407c:	9742      	str	r7, [sp, #264]	; 0x108
 801407e:	e7f4      	b.n	801406a <__ssvfiscanf_r+0x116>
 8014080:	2b70      	cmp	r3, #112	; 0x70
 8014082:	d04b      	beq.n	801411c <__ssvfiscanf_r+0x1c8>
 8014084:	d826      	bhi.n	80140d4 <__ssvfiscanf_r+0x180>
 8014086:	2b6e      	cmp	r3, #110	; 0x6e
 8014088:	d062      	beq.n	8014150 <__ssvfiscanf_r+0x1fc>
 801408a:	d84c      	bhi.n	8014126 <__ssvfiscanf_r+0x1d2>
 801408c:	2b69      	cmp	r3, #105	; 0x69
 801408e:	d1d7      	bne.n	8014040 <__ssvfiscanf_r+0xec>
 8014090:	2300      	movs	r3, #0
 8014092:	9342      	str	r3, [sp, #264]	; 0x108
 8014094:	2303      	movs	r3, #3
 8014096:	9347      	str	r3, [sp, #284]	; 0x11c
 8014098:	6863      	ldr	r3, [r4, #4]
 801409a:	2b00      	cmp	r3, #0
 801409c:	dd68      	ble.n	8014170 <__ssvfiscanf_r+0x21c>
 801409e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80140a0:	0659      	lsls	r1, r3, #25
 80140a2:	d407      	bmi.n	80140b4 <__ssvfiscanf_r+0x160>
 80140a4:	f7ff f83c 	bl	8013120 <__locale_ctype_ptr>
 80140a8:	6823      	ldr	r3, [r4, #0]
 80140aa:	781a      	ldrb	r2, [r3, #0]
 80140ac:	4410      	add	r0, r2
 80140ae:	7842      	ldrb	r2, [r0, #1]
 80140b0:	0712      	lsls	r2, r2, #28
 80140b2:	d464      	bmi.n	801417e <__ssvfiscanf_r+0x22a>
 80140b4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80140b6:	2b02      	cmp	r3, #2
 80140b8:	dc73      	bgt.n	80141a2 <__ssvfiscanf_r+0x24e>
 80140ba:	466b      	mov	r3, sp
 80140bc:	4622      	mov	r2, r4
 80140be:	a941      	add	r1, sp, #260	; 0x104
 80140c0:	4630      	mov	r0, r6
 80140c2:	f000 f9d7 	bl	8014474 <_scanf_chars>
 80140c6:	2801      	cmp	r0, #1
 80140c8:	f000 8089 	beq.w	80141de <__ssvfiscanf_r+0x28a>
 80140cc:	2802      	cmp	r0, #2
 80140ce:	f47f af71 	bne.w	8013fb4 <__ssvfiscanf_r+0x60>
 80140d2:	e01d      	b.n	8014110 <__ssvfiscanf_r+0x1bc>
 80140d4:	2b75      	cmp	r3, #117	; 0x75
 80140d6:	d0d1      	beq.n	801407c <__ssvfiscanf_r+0x128>
 80140d8:	2b78      	cmp	r3, #120	; 0x78
 80140da:	d0c0      	beq.n	801405e <__ssvfiscanf_r+0x10a>
 80140dc:	2b73      	cmp	r3, #115	; 0x73
 80140de:	d1af      	bne.n	8014040 <__ssvfiscanf_r+0xec>
 80140e0:	2302      	movs	r3, #2
 80140e2:	e7d8      	b.n	8014096 <__ssvfiscanf_r+0x142>
 80140e4:	6863      	ldr	r3, [r4, #4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	dd0c      	ble.n	8014104 <__ssvfiscanf_r+0x1b0>
 80140ea:	6823      	ldr	r3, [r4, #0]
 80140ec:	781a      	ldrb	r2, [r3, #0]
 80140ee:	455a      	cmp	r2, fp
 80140f0:	d175      	bne.n	80141de <__ssvfiscanf_r+0x28a>
 80140f2:	3301      	adds	r3, #1
 80140f4:	6862      	ldr	r2, [r4, #4]
 80140f6:	6023      	str	r3, [r4, #0]
 80140f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80140fa:	3a01      	subs	r2, #1
 80140fc:	3301      	adds	r3, #1
 80140fe:	6062      	str	r2, [r4, #4]
 8014100:	9345      	str	r3, [sp, #276]	; 0x114
 8014102:	e757      	b.n	8013fb4 <__ssvfiscanf_r+0x60>
 8014104:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014106:	4621      	mov	r1, r4
 8014108:	4630      	mov	r0, r6
 801410a:	4798      	blx	r3
 801410c:	2800      	cmp	r0, #0
 801410e:	d0ec      	beq.n	80140ea <__ssvfiscanf_r+0x196>
 8014110:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014112:	2800      	cmp	r0, #0
 8014114:	d159      	bne.n	80141ca <__ssvfiscanf_r+0x276>
 8014116:	f04f 30ff 	mov.w	r0, #4294967295
 801411a:	e05c      	b.n	80141d6 <__ssvfiscanf_r+0x282>
 801411c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801411e:	f042 0220 	orr.w	r2, r2, #32
 8014122:	9241      	str	r2, [sp, #260]	; 0x104
 8014124:	e79b      	b.n	801405e <__ssvfiscanf_r+0x10a>
 8014126:	2308      	movs	r3, #8
 8014128:	9342      	str	r3, [sp, #264]	; 0x108
 801412a:	2304      	movs	r3, #4
 801412c:	e7b3      	b.n	8014096 <__ssvfiscanf_r+0x142>
 801412e:	4629      	mov	r1, r5
 8014130:	4640      	mov	r0, r8
 8014132:	f000 fb4f 	bl	80147d4 <__sccl>
 8014136:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801413c:	9341      	str	r3, [sp, #260]	; 0x104
 801413e:	4605      	mov	r5, r0
 8014140:	2301      	movs	r3, #1
 8014142:	e7a8      	b.n	8014096 <__ssvfiscanf_r+0x142>
 8014144:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801414a:	9341      	str	r3, [sp, #260]	; 0x104
 801414c:	2300      	movs	r3, #0
 801414e:	e7a2      	b.n	8014096 <__ssvfiscanf_r+0x142>
 8014150:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014152:	06c3      	lsls	r3, r0, #27
 8014154:	f53f af2e 	bmi.w	8013fb4 <__ssvfiscanf_r+0x60>
 8014158:	9b00      	ldr	r3, [sp, #0]
 801415a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801415c:	1d19      	adds	r1, r3, #4
 801415e:	9100      	str	r1, [sp, #0]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	07c0      	lsls	r0, r0, #31
 8014164:	bf4c      	ite	mi
 8014166:	801a      	strhmi	r2, [r3, #0]
 8014168:	601a      	strpl	r2, [r3, #0]
 801416a:	e723      	b.n	8013fb4 <__ssvfiscanf_r+0x60>
 801416c:	2305      	movs	r3, #5
 801416e:	e792      	b.n	8014096 <__ssvfiscanf_r+0x142>
 8014170:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014172:	4621      	mov	r1, r4
 8014174:	4630      	mov	r0, r6
 8014176:	4798      	blx	r3
 8014178:	2800      	cmp	r0, #0
 801417a:	d090      	beq.n	801409e <__ssvfiscanf_r+0x14a>
 801417c:	e7c8      	b.n	8014110 <__ssvfiscanf_r+0x1bc>
 801417e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014180:	3201      	adds	r2, #1
 8014182:	9245      	str	r2, [sp, #276]	; 0x114
 8014184:	6862      	ldr	r2, [r4, #4]
 8014186:	3a01      	subs	r2, #1
 8014188:	2a00      	cmp	r2, #0
 801418a:	6062      	str	r2, [r4, #4]
 801418c:	dd02      	ble.n	8014194 <__ssvfiscanf_r+0x240>
 801418e:	3301      	adds	r3, #1
 8014190:	6023      	str	r3, [r4, #0]
 8014192:	e787      	b.n	80140a4 <__ssvfiscanf_r+0x150>
 8014194:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014196:	4621      	mov	r1, r4
 8014198:	4630      	mov	r0, r6
 801419a:	4798      	blx	r3
 801419c:	2800      	cmp	r0, #0
 801419e:	d081      	beq.n	80140a4 <__ssvfiscanf_r+0x150>
 80141a0:	e7b6      	b.n	8014110 <__ssvfiscanf_r+0x1bc>
 80141a2:	2b04      	cmp	r3, #4
 80141a4:	dc06      	bgt.n	80141b4 <__ssvfiscanf_r+0x260>
 80141a6:	466b      	mov	r3, sp
 80141a8:	4622      	mov	r2, r4
 80141aa:	a941      	add	r1, sp, #260	; 0x104
 80141ac:	4630      	mov	r0, r6
 80141ae:	f000 f9c5 	bl	801453c <_scanf_i>
 80141b2:	e788      	b.n	80140c6 <__ssvfiscanf_r+0x172>
 80141b4:	4b0e      	ldr	r3, [pc, #56]	; (80141f0 <__ssvfiscanf_r+0x29c>)
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	f43f aefc 	beq.w	8013fb4 <__ssvfiscanf_r+0x60>
 80141bc:	466b      	mov	r3, sp
 80141be:	4622      	mov	r2, r4
 80141c0:	a941      	add	r1, sp, #260	; 0x104
 80141c2:	4630      	mov	r0, r6
 80141c4:	f7fc f9d0 	bl	8010568 <_scanf_float>
 80141c8:	e77d      	b.n	80140c6 <__ssvfiscanf_r+0x172>
 80141ca:	89a3      	ldrh	r3, [r4, #12]
 80141cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80141d0:	bf18      	it	ne
 80141d2:	f04f 30ff 	movne.w	r0, #4294967295
 80141d6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80141da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141de:	9844      	ldr	r0, [sp, #272]	; 0x110
 80141e0:	e7f9      	b.n	80141d6 <__ssvfiscanf_r+0x282>
 80141e2:	bf00      	nop
 80141e4:	08013ea1 	.word	0x08013ea1
 80141e8:	08013f1b 	.word	0x08013f1b
 80141ec:	0801531a 	.word	0x0801531a
 80141f0:	08010569 	.word	0x08010569

080141f4 <__sfputc_r>:
 80141f4:	6893      	ldr	r3, [r2, #8]
 80141f6:	3b01      	subs	r3, #1
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	b410      	push	{r4}
 80141fc:	6093      	str	r3, [r2, #8]
 80141fe:	da08      	bge.n	8014212 <__sfputc_r+0x1e>
 8014200:	6994      	ldr	r4, [r2, #24]
 8014202:	42a3      	cmp	r3, r4
 8014204:	db01      	blt.n	801420a <__sfputc_r+0x16>
 8014206:	290a      	cmp	r1, #10
 8014208:	d103      	bne.n	8014212 <__sfputc_r+0x1e>
 801420a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801420e:	f7fd bbbd 	b.w	801198c <__swbuf_r>
 8014212:	6813      	ldr	r3, [r2, #0]
 8014214:	1c58      	adds	r0, r3, #1
 8014216:	6010      	str	r0, [r2, #0]
 8014218:	7019      	strb	r1, [r3, #0]
 801421a:	4608      	mov	r0, r1
 801421c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014220:	4770      	bx	lr

08014222 <__sfputs_r>:
 8014222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014224:	4606      	mov	r6, r0
 8014226:	460f      	mov	r7, r1
 8014228:	4614      	mov	r4, r2
 801422a:	18d5      	adds	r5, r2, r3
 801422c:	42ac      	cmp	r4, r5
 801422e:	d101      	bne.n	8014234 <__sfputs_r+0x12>
 8014230:	2000      	movs	r0, #0
 8014232:	e007      	b.n	8014244 <__sfputs_r+0x22>
 8014234:	463a      	mov	r2, r7
 8014236:	f814 1b01 	ldrb.w	r1, [r4], #1
 801423a:	4630      	mov	r0, r6
 801423c:	f7ff ffda 	bl	80141f4 <__sfputc_r>
 8014240:	1c43      	adds	r3, r0, #1
 8014242:	d1f3      	bne.n	801422c <__sfputs_r+0xa>
 8014244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014248 <_vfiprintf_r>:
 8014248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801424c:	460c      	mov	r4, r1
 801424e:	b09d      	sub	sp, #116	; 0x74
 8014250:	4617      	mov	r7, r2
 8014252:	461d      	mov	r5, r3
 8014254:	4606      	mov	r6, r0
 8014256:	b118      	cbz	r0, 8014260 <_vfiprintf_r+0x18>
 8014258:	6983      	ldr	r3, [r0, #24]
 801425a:	b90b      	cbnz	r3, 8014260 <_vfiprintf_r+0x18>
 801425c:	f7fe fbac 	bl	80129b8 <__sinit>
 8014260:	4b7c      	ldr	r3, [pc, #496]	; (8014454 <_vfiprintf_r+0x20c>)
 8014262:	429c      	cmp	r4, r3
 8014264:	d158      	bne.n	8014318 <_vfiprintf_r+0xd0>
 8014266:	6874      	ldr	r4, [r6, #4]
 8014268:	89a3      	ldrh	r3, [r4, #12]
 801426a:	0718      	lsls	r0, r3, #28
 801426c:	d55e      	bpl.n	801432c <_vfiprintf_r+0xe4>
 801426e:	6923      	ldr	r3, [r4, #16]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d05b      	beq.n	801432c <_vfiprintf_r+0xe4>
 8014274:	2300      	movs	r3, #0
 8014276:	9309      	str	r3, [sp, #36]	; 0x24
 8014278:	2320      	movs	r3, #32
 801427a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801427e:	2330      	movs	r3, #48	; 0x30
 8014280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014284:	9503      	str	r5, [sp, #12]
 8014286:	f04f 0b01 	mov.w	fp, #1
 801428a:	46b8      	mov	r8, r7
 801428c:	4645      	mov	r5, r8
 801428e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014292:	b10b      	cbz	r3, 8014298 <_vfiprintf_r+0x50>
 8014294:	2b25      	cmp	r3, #37	; 0x25
 8014296:	d154      	bne.n	8014342 <_vfiprintf_r+0xfa>
 8014298:	ebb8 0a07 	subs.w	sl, r8, r7
 801429c:	d00b      	beq.n	80142b6 <_vfiprintf_r+0x6e>
 801429e:	4653      	mov	r3, sl
 80142a0:	463a      	mov	r2, r7
 80142a2:	4621      	mov	r1, r4
 80142a4:	4630      	mov	r0, r6
 80142a6:	f7ff ffbc 	bl	8014222 <__sfputs_r>
 80142aa:	3001      	adds	r0, #1
 80142ac:	f000 80c2 	beq.w	8014434 <_vfiprintf_r+0x1ec>
 80142b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142b2:	4453      	add	r3, sl
 80142b4:	9309      	str	r3, [sp, #36]	; 0x24
 80142b6:	f898 3000 	ldrb.w	r3, [r8]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f000 80ba 	beq.w	8014434 <_vfiprintf_r+0x1ec>
 80142c0:	2300      	movs	r3, #0
 80142c2:	f04f 32ff 	mov.w	r2, #4294967295
 80142c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142ca:	9304      	str	r3, [sp, #16]
 80142cc:	9307      	str	r3, [sp, #28]
 80142ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142d2:	931a      	str	r3, [sp, #104]	; 0x68
 80142d4:	46a8      	mov	r8, r5
 80142d6:	2205      	movs	r2, #5
 80142d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80142dc:	485e      	ldr	r0, [pc, #376]	; (8014458 <_vfiprintf_r+0x210>)
 80142de:	f7eb ff97 	bl	8000210 <memchr>
 80142e2:	9b04      	ldr	r3, [sp, #16]
 80142e4:	bb78      	cbnz	r0, 8014346 <_vfiprintf_r+0xfe>
 80142e6:	06d9      	lsls	r1, r3, #27
 80142e8:	bf44      	itt	mi
 80142ea:	2220      	movmi	r2, #32
 80142ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142f0:	071a      	lsls	r2, r3, #28
 80142f2:	bf44      	itt	mi
 80142f4:	222b      	movmi	r2, #43	; 0x2b
 80142f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142fa:	782a      	ldrb	r2, [r5, #0]
 80142fc:	2a2a      	cmp	r2, #42	; 0x2a
 80142fe:	d02a      	beq.n	8014356 <_vfiprintf_r+0x10e>
 8014300:	9a07      	ldr	r2, [sp, #28]
 8014302:	46a8      	mov	r8, r5
 8014304:	2000      	movs	r0, #0
 8014306:	250a      	movs	r5, #10
 8014308:	4641      	mov	r1, r8
 801430a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801430e:	3b30      	subs	r3, #48	; 0x30
 8014310:	2b09      	cmp	r3, #9
 8014312:	d969      	bls.n	80143e8 <_vfiprintf_r+0x1a0>
 8014314:	b360      	cbz	r0, 8014370 <_vfiprintf_r+0x128>
 8014316:	e024      	b.n	8014362 <_vfiprintf_r+0x11a>
 8014318:	4b50      	ldr	r3, [pc, #320]	; (801445c <_vfiprintf_r+0x214>)
 801431a:	429c      	cmp	r4, r3
 801431c:	d101      	bne.n	8014322 <_vfiprintf_r+0xda>
 801431e:	68b4      	ldr	r4, [r6, #8]
 8014320:	e7a2      	b.n	8014268 <_vfiprintf_r+0x20>
 8014322:	4b4f      	ldr	r3, [pc, #316]	; (8014460 <_vfiprintf_r+0x218>)
 8014324:	429c      	cmp	r4, r3
 8014326:	bf08      	it	eq
 8014328:	68f4      	ldreq	r4, [r6, #12]
 801432a:	e79d      	b.n	8014268 <_vfiprintf_r+0x20>
 801432c:	4621      	mov	r1, r4
 801432e:	4630      	mov	r0, r6
 8014330:	f7fd fb90 	bl	8011a54 <__swsetup_r>
 8014334:	2800      	cmp	r0, #0
 8014336:	d09d      	beq.n	8014274 <_vfiprintf_r+0x2c>
 8014338:	f04f 30ff 	mov.w	r0, #4294967295
 801433c:	b01d      	add	sp, #116	; 0x74
 801433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014342:	46a8      	mov	r8, r5
 8014344:	e7a2      	b.n	801428c <_vfiprintf_r+0x44>
 8014346:	4a44      	ldr	r2, [pc, #272]	; (8014458 <_vfiprintf_r+0x210>)
 8014348:	1a80      	subs	r0, r0, r2
 801434a:	fa0b f000 	lsl.w	r0, fp, r0
 801434e:	4318      	orrs	r0, r3
 8014350:	9004      	str	r0, [sp, #16]
 8014352:	4645      	mov	r5, r8
 8014354:	e7be      	b.n	80142d4 <_vfiprintf_r+0x8c>
 8014356:	9a03      	ldr	r2, [sp, #12]
 8014358:	1d11      	adds	r1, r2, #4
 801435a:	6812      	ldr	r2, [r2, #0]
 801435c:	9103      	str	r1, [sp, #12]
 801435e:	2a00      	cmp	r2, #0
 8014360:	db01      	blt.n	8014366 <_vfiprintf_r+0x11e>
 8014362:	9207      	str	r2, [sp, #28]
 8014364:	e004      	b.n	8014370 <_vfiprintf_r+0x128>
 8014366:	4252      	negs	r2, r2
 8014368:	f043 0302 	orr.w	r3, r3, #2
 801436c:	9207      	str	r2, [sp, #28]
 801436e:	9304      	str	r3, [sp, #16]
 8014370:	f898 3000 	ldrb.w	r3, [r8]
 8014374:	2b2e      	cmp	r3, #46	; 0x2e
 8014376:	d10e      	bne.n	8014396 <_vfiprintf_r+0x14e>
 8014378:	f898 3001 	ldrb.w	r3, [r8, #1]
 801437c:	2b2a      	cmp	r3, #42	; 0x2a
 801437e:	d138      	bne.n	80143f2 <_vfiprintf_r+0x1aa>
 8014380:	9b03      	ldr	r3, [sp, #12]
 8014382:	1d1a      	adds	r2, r3, #4
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	9203      	str	r2, [sp, #12]
 8014388:	2b00      	cmp	r3, #0
 801438a:	bfb8      	it	lt
 801438c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014390:	f108 0802 	add.w	r8, r8, #2
 8014394:	9305      	str	r3, [sp, #20]
 8014396:	4d33      	ldr	r5, [pc, #204]	; (8014464 <_vfiprintf_r+0x21c>)
 8014398:	f898 1000 	ldrb.w	r1, [r8]
 801439c:	2203      	movs	r2, #3
 801439e:	4628      	mov	r0, r5
 80143a0:	f7eb ff36 	bl	8000210 <memchr>
 80143a4:	b140      	cbz	r0, 80143b8 <_vfiprintf_r+0x170>
 80143a6:	2340      	movs	r3, #64	; 0x40
 80143a8:	1b40      	subs	r0, r0, r5
 80143aa:	fa03 f000 	lsl.w	r0, r3, r0
 80143ae:	9b04      	ldr	r3, [sp, #16]
 80143b0:	4303      	orrs	r3, r0
 80143b2:	f108 0801 	add.w	r8, r8, #1
 80143b6:	9304      	str	r3, [sp, #16]
 80143b8:	f898 1000 	ldrb.w	r1, [r8]
 80143bc:	482a      	ldr	r0, [pc, #168]	; (8014468 <_vfiprintf_r+0x220>)
 80143be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143c2:	2206      	movs	r2, #6
 80143c4:	f108 0701 	add.w	r7, r8, #1
 80143c8:	f7eb ff22 	bl	8000210 <memchr>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	d037      	beq.n	8014440 <_vfiprintf_r+0x1f8>
 80143d0:	4b26      	ldr	r3, [pc, #152]	; (801446c <_vfiprintf_r+0x224>)
 80143d2:	bb1b      	cbnz	r3, 801441c <_vfiprintf_r+0x1d4>
 80143d4:	9b03      	ldr	r3, [sp, #12]
 80143d6:	3307      	adds	r3, #7
 80143d8:	f023 0307 	bic.w	r3, r3, #7
 80143dc:	3308      	adds	r3, #8
 80143de:	9303      	str	r3, [sp, #12]
 80143e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143e2:	444b      	add	r3, r9
 80143e4:	9309      	str	r3, [sp, #36]	; 0x24
 80143e6:	e750      	b.n	801428a <_vfiprintf_r+0x42>
 80143e8:	fb05 3202 	mla	r2, r5, r2, r3
 80143ec:	2001      	movs	r0, #1
 80143ee:	4688      	mov	r8, r1
 80143f0:	e78a      	b.n	8014308 <_vfiprintf_r+0xc0>
 80143f2:	2300      	movs	r3, #0
 80143f4:	f108 0801 	add.w	r8, r8, #1
 80143f8:	9305      	str	r3, [sp, #20]
 80143fa:	4619      	mov	r1, r3
 80143fc:	250a      	movs	r5, #10
 80143fe:	4640      	mov	r0, r8
 8014400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014404:	3a30      	subs	r2, #48	; 0x30
 8014406:	2a09      	cmp	r2, #9
 8014408:	d903      	bls.n	8014412 <_vfiprintf_r+0x1ca>
 801440a:	2b00      	cmp	r3, #0
 801440c:	d0c3      	beq.n	8014396 <_vfiprintf_r+0x14e>
 801440e:	9105      	str	r1, [sp, #20]
 8014410:	e7c1      	b.n	8014396 <_vfiprintf_r+0x14e>
 8014412:	fb05 2101 	mla	r1, r5, r1, r2
 8014416:	2301      	movs	r3, #1
 8014418:	4680      	mov	r8, r0
 801441a:	e7f0      	b.n	80143fe <_vfiprintf_r+0x1b6>
 801441c:	ab03      	add	r3, sp, #12
 801441e:	9300      	str	r3, [sp, #0]
 8014420:	4622      	mov	r2, r4
 8014422:	4b13      	ldr	r3, [pc, #76]	; (8014470 <_vfiprintf_r+0x228>)
 8014424:	a904      	add	r1, sp, #16
 8014426:	4630      	mov	r0, r6
 8014428:	f7fb fcd6 	bl	800fdd8 <_printf_float>
 801442c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014430:	4681      	mov	r9, r0
 8014432:	d1d5      	bne.n	80143e0 <_vfiprintf_r+0x198>
 8014434:	89a3      	ldrh	r3, [r4, #12]
 8014436:	065b      	lsls	r3, r3, #25
 8014438:	f53f af7e 	bmi.w	8014338 <_vfiprintf_r+0xf0>
 801443c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801443e:	e77d      	b.n	801433c <_vfiprintf_r+0xf4>
 8014440:	ab03      	add	r3, sp, #12
 8014442:	9300      	str	r3, [sp, #0]
 8014444:	4622      	mov	r2, r4
 8014446:	4b0a      	ldr	r3, [pc, #40]	; (8014470 <_vfiprintf_r+0x228>)
 8014448:	a904      	add	r1, sp, #16
 801444a:	4630      	mov	r0, r6
 801444c:	f7fb ff7a 	bl	8010344 <_printf_i>
 8014450:	e7ec      	b.n	801442c <_vfiprintf_r+0x1e4>
 8014452:	bf00      	nop
 8014454:	080151c8 	.word	0x080151c8
 8014458:	08015314 	.word	0x08015314
 801445c:	080151e8 	.word	0x080151e8
 8014460:	080151a8 	.word	0x080151a8
 8014464:	0801531a 	.word	0x0801531a
 8014468:	0801531e 	.word	0x0801531e
 801446c:	0800fdd9 	.word	0x0800fdd9
 8014470:	08014223 	.word	0x08014223

08014474 <_scanf_chars>:
 8014474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014478:	4615      	mov	r5, r2
 801447a:	688a      	ldr	r2, [r1, #8]
 801447c:	4680      	mov	r8, r0
 801447e:	460c      	mov	r4, r1
 8014480:	b932      	cbnz	r2, 8014490 <_scanf_chars+0x1c>
 8014482:	698a      	ldr	r2, [r1, #24]
 8014484:	2a00      	cmp	r2, #0
 8014486:	bf14      	ite	ne
 8014488:	f04f 32ff 	movne.w	r2, #4294967295
 801448c:	2201      	moveq	r2, #1
 801448e:	608a      	str	r2, [r1, #8]
 8014490:	6822      	ldr	r2, [r4, #0]
 8014492:	06d1      	lsls	r1, r2, #27
 8014494:	bf5f      	itttt	pl
 8014496:	681a      	ldrpl	r2, [r3, #0]
 8014498:	1d11      	addpl	r1, r2, #4
 801449a:	6019      	strpl	r1, [r3, #0]
 801449c:	6817      	ldrpl	r7, [r2, #0]
 801449e:	2600      	movs	r6, #0
 80144a0:	69a3      	ldr	r3, [r4, #24]
 80144a2:	b1db      	cbz	r3, 80144dc <_scanf_chars+0x68>
 80144a4:	2b01      	cmp	r3, #1
 80144a6:	d107      	bne.n	80144b8 <_scanf_chars+0x44>
 80144a8:	682b      	ldr	r3, [r5, #0]
 80144aa:	6962      	ldr	r2, [r4, #20]
 80144ac:	781b      	ldrb	r3, [r3, #0]
 80144ae:	5cd3      	ldrb	r3, [r2, r3]
 80144b0:	b9a3      	cbnz	r3, 80144dc <_scanf_chars+0x68>
 80144b2:	2e00      	cmp	r6, #0
 80144b4:	d132      	bne.n	801451c <_scanf_chars+0xa8>
 80144b6:	e006      	b.n	80144c6 <_scanf_chars+0x52>
 80144b8:	2b02      	cmp	r3, #2
 80144ba:	d007      	beq.n	80144cc <_scanf_chars+0x58>
 80144bc:	2e00      	cmp	r6, #0
 80144be:	d12d      	bne.n	801451c <_scanf_chars+0xa8>
 80144c0:	69a3      	ldr	r3, [r4, #24]
 80144c2:	2b01      	cmp	r3, #1
 80144c4:	d12a      	bne.n	801451c <_scanf_chars+0xa8>
 80144c6:	2001      	movs	r0, #1
 80144c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144cc:	f7fe fe28 	bl	8013120 <__locale_ctype_ptr>
 80144d0:	682b      	ldr	r3, [r5, #0]
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	4418      	add	r0, r3
 80144d6:	7843      	ldrb	r3, [r0, #1]
 80144d8:	071b      	lsls	r3, r3, #28
 80144da:	d4ef      	bmi.n	80144bc <_scanf_chars+0x48>
 80144dc:	6823      	ldr	r3, [r4, #0]
 80144de:	06da      	lsls	r2, r3, #27
 80144e0:	bf5e      	ittt	pl
 80144e2:	682b      	ldrpl	r3, [r5, #0]
 80144e4:	781b      	ldrbpl	r3, [r3, #0]
 80144e6:	703b      	strbpl	r3, [r7, #0]
 80144e8:	682a      	ldr	r2, [r5, #0]
 80144ea:	686b      	ldr	r3, [r5, #4]
 80144ec:	f102 0201 	add.w	r2, r2, #1
 80144f0:	602a      	str	r2, [r5, #0]
 80144f2:	68a2      	ldr	r2, [r4, #8]
 80144f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80144f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80144fc:	606b      	str	r3, [r5, #4]
 80144fe:	f106 0601 	add.w	r6, r6, #1
 8014502:	bf58      	it	pl
 8014504:	3701      	addpl	r7, #1
 8014506:	60a2      	str	r2, [r4, #8]
 8014508:	b142      	cbz	r2, 801451c <_scanf_chars+0xa8>
 801450a:	2b00      	cmp	r3, #0
 801450c:	dcc8      	bgt.n	80144a0 <_scanf_chars+0x2c>
 801450e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014512:	4629      	mov	r1, r5
 8014514:	4640      	mov	r0, r8
 8014516:	4798      	blx	r3
 8014518:	2800      	cmp	r0, #0
 801451a:	d0c1      	beq.n	80144a0 <_scanf_chars+0x2c>
 801451c:	6823      	ldr	r3, [r4, #0]
 801451e:	f013 0310 	ands.w	r3, r3, #16
 8014522:	d105      	bne.n	8014530 <_scanf_chars+0xbc>
 8014524:	68e2      	ldr	r2, [r4, #12]
 8014526:	3201      	adds	r2, #1
 8014528:	60e2      	str	r2, [r4, #12]
 801452a:	69a2      	ldr	r2, [r4, #24]
 801452c:	b102      	cbz	r2, 8014530 <_scanf_chars+0xbc>
 801452e:	703b      	strb	r3, [r7, #0]
 8014530:	6923      	ldr	r3, [r4, #16]
 8014532:	441e      	add	r6, r3
 8014534:	6126      	str	r6, [r4, #16]
 8014536:	2000      	movs	r0, #0
 8014538:	e7c6      	b.n	80144c8 <_scanf_chars+0x54>
	...

0801453c <_scanf_i>:
 801453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014540:	469a      	mov	sl, r3
 8014542:	4b74      	ldr	r3, [pc, #464]	; (8014714 <_scanf_i+0x1d8>)
 8014544:	460c      	mov	r4, r1
 8014546:	4683      	mov	fp, r0
 8014548:	4616      	mov	r6, r2
 801454a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801454e:	b087      	sub	sp, #28
 8014550:	ab03      	add	r3, sp, #12
 8014552:	68a7      	ldr	r7, [r4, #8]
 8014554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014558:	4b6f      	ldr	r3, [pc, #444]	; (8014718 <_scanf_i+0x1dc>)
 801455a:	69a1      	ldr	r1, [r4, #24]
 801455c:	4a6f      	ldr	r2, [pc, #444]	; (801471c <_scanf_i+0x1e0>)
 801455e:	2903      	cmp	r1, #3
 8014560:	bf08      	it	eq
 8014562:	461a      	moveq	r2, r3
 8014564:	1e7b      	subs	r3, r7, #1
 8014566:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801456a:	bf84      	itt	hi
 801456c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014570:	60a3      	strhi	r3, [r4, #8]
 8014572:	6823      	ldr	r3, [r4, #0]
 8014574:	9200      	str	r2, [sp, #0]
 8014576:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801457a:	bf88      	it	hi
 801457c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014580:	f104 091c 	add.w	r9, r4, #28
 8014584:	6023      	str	r3, [r4, #0]
 8014586:	bf8c      	ite	hi
 8014588:	197f      	addhi	r7, r7, r5
 801458a:	2700      	movls	r7, #0
 801458c:	464b      	mov	r3, r9
 801458e:	f04f 0800 	mov.w	r8, #0
 8014592:	9301      	str	r3, [sp, #4]
 8014594:	6831      	ldr	r1, [r6, #0]
 8014596:	ab03      	add	r3, sp, #12
 8014598:	2202      	movs	r2, #2
 801459a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801459e:	7809      	ldrb	r1, [r1, #0]
 80145a0:	f7eb fe36 	bl	8000210 <memchr>
 80145a4:	9b01      	ldr	r3, [sp, #4]
 80145a6:	b330      	cbz	r0, 80145f6 <_scanf_i+0xba>
 80145a8:	f1b8 0f01 	cmp.w	r8, #1
 80145ac:	d15a      	bne.n	8014664 <_scanf_i+0x128>
 80145ae:	6862      	ldr	r2, [r4, #4]
 80145b0:	b92a      	cbnz	r2, 80145be <_scanf_i+0x82>
 80145b2:	6822      	ldr	r2, [r4, #0]
 80145b4:	2108      	movs	r1, #8
 80145b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80145ba:	6061      	str	r1, [r4, #4]
 80145bc:	6022      	str	r2, [r4, #0]
 80145be:	6822      	ldr	r2, [r4, #0]
 80145c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80145c4:	6022      	str	r2, [r4, #0]
 80145c6:	68a2      	ldr	r2, [r4, #8]
 80145c8:	1e51      	subs	r1, r2, #1
 80145ca:	60a1      	str	r1, [r4, #8]
 80145cc:	b19a      	cbz	r2, 80145f6 <_scanf_i+0xba>
 80145ce:	6832      	ldr	r2, [r6, #0]
 80145d0:	1c51      	adds	r1, r2, #1
 80145d2:	6031      	str	r1, [r6, #0]
 80145d4:	7812      	ldrb	r2, [r2, #0]
 80145d6:	701a      	strb	r2, [r3, #0]
 80145d8:	1c5d      	adds	r5, r3, #1
 80145da:	6873      	ldr	r3, [r6, #4]
 80145dc:	3b01      	subs	r3, #1
 80145de:	2b00      	cmp	r3, #0
 80145e0:	6073      	str	r3, [r6, #4]
 80145e2:	dc07      	bgt.n	80145f4 <_scanf_i+0xb8>
 80145e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80145e8:	4631      	mov	r1, r6
 80145ea:	4658      	mov	r0, fp
 80145ec:	4798      	blx	r3
 80145ee:	2800      	cmp	r0, #0
 80145f0:	f040 8086 	bne.w	8014700 <_scanf_i+0x1c4>
 80145f4:	462b      	mov	r3, r5
 80145f6:	f108 0801 	add.w	r8, r8, #1
 80145fa:	f1b8 0f03 	cmp.w	r8, #3
 80145fe:	d1c8      	bne.n	8014592 <_scanf_i+0x56>
 8014600:	6862      	ldr	r2, [r4, #4]
 8014602:	b90a      	cbnz	r2, 8014608 <_scanf_i+0xcc>
 8014604:	220a      	movs	r2, #10
 8014606:	6062      	str	r2, [r4, #4]
 8014608:	6862      	ldr	r2, [r4, #4]
 801460a:	4945      	ldr	r1, [pc, #276]	; (8014720 <_scanf_i+0x1e4>)
 801460c:	6960      	ldr	r0, [r4, #20]
 801460e:	9301      	str	r3, [sp, #4]
 8014610:	1a89      	subs	r1, r1, r2
 8014612:	f000 f8df 	bl	80147d4 <__sccl>
 8014616:	9b01      	ldr	r3, [sp, #4]
 8014618:	f04f 0800 	mov.w	r8, #0
 801461c:	461d      	mov	r5, r3
 801461e:	68a3      	ldr	r3, [r4, #8]
 8014620:	6822      	ldr	r2, [r4, #0]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d03a      	beq.n	801469c <_scanf_i+0x160>
 8014626:	6831      	ldr	r1, [r6, #0]
 8014628:	6960      	ldr	r0, [r4, #20]
 801462a:	f891 c000 	ldrb.w	ip, [r1]
 801462e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014632:	2800      	cmp	r0, #0
 8014634:	d032      	beq.n	801469c <_scanf_i+0x160>
 8014636:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801463a:	d121      	bne.n	8014680 <_scanf_i+0x144>
 801463c:	0510      	lsls	r0, r2, #20
 801463e:	d51f      	bpl.n	8014680 <_scanf_i+0x144>
 8014640:	f108 0801 	add.w	r8, r8, #1
 8014644:	b117      	cbz	r7, 801464c <_scanf_i+0x110>
 8014646:	3301      	adds	r3, #1
 8014648:	3f01      	subs	r7, #1
 801464a:	60a3      	str	r3, [r4, #8]
 801464c:	6873      	ldr	r3, [r6, #4]
 801464e:	3b01      	subs	r3, #1
 8014650:	2b00      	cmp	r3, #0
 8014652:	6073      	str	r3, [r6, #4]
 8014654:	dd1b      	ble.n	801468e <_scanf_i+0x152>
 8014656:	6833      	ldr	r3, [r6, #0]
 8014658:	3301      	adds	r3, #1
 801465a:	6033      	str	r3, [r6, #0]
 801465c:	68a3      	ldr	r3, [r4, #8]
 801465e:	3b01      	subs	r3, #1
 8014660:	60a3      	str	r3, [r4, #8]
 8014662:	e7dc      	b.n	801461e <_scanf_i+0xe2>
 8014664:	f1b8 0f02 	cmp.w	r8, #2
 8014668:	d1ad      	bne.n	80145c6 <_scanf_i+0x8a>
 801466a:	6822      	ldr	r2, [r4, #0]
 801466c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014670:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014674:	d1bf      	bne.n	80145f6 <_scanf_i+0xba>
 8014676:	2110      	movs	r1, #16
 8014678:	6061      	str	r1, [r4, #4]
 801467a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801467e:	e7a1      	b.n	80145c4 <_scanf_i+0x88>
 8014680:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014684:	6022      	str	r2, [r4, #0]
 8014686:	780b      	ldrb	r3, [r1, #0]
 8014688:	702b      	strb	r3, [r5, #0]
 801468a:	3501      	adds	r5, #1
 801468c:	e7de      	b.n	801464c <_scanf_i+0x110>
 801468e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014692:	4631      	mov	r1, r6
 8014694:	4658      	mov	r0, fp
 8014696:	4798      	blx	r3
 8014698:	2800      	cmp	r0, #0
 801469a:	d0df      	beq.n	801465c <_scanf_i+0x120>
 801469c:	6823      	ldr	r3, [r4, #0]
 801469e:	05d9      	lsls	r1, r3, #23
 80146a0:	d50c      	bpl.n	80146bc <_scanf_i+0x180>
 80146a2:	454d      	cmp	r5, r9
 80146a4:	d908      	bls.n	80146b8 <_scanf_i+0x17c>
 80146a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80146aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80146ae:	4632      	mov	r2, r6
 80146b0:	4658      	mov	r0, fp
 80146b2:	4798      	blx	r3
 80146b4:	1e6f      	subs	r7, r5, #1
 80146b6:	463d      	mov	r5, r7
 80146b8:	454d      	cmp	r5, r9
 80146ba:	d029      	beq.n	8014710 <_scanf_i+0x1d4>
 80146bc:	6822      	ldr	r2, [r4, #0]
 80146be:	f012 0210 	ands.w	r2, r2, #16
 80146c2:	d113      	bne.n	80146ec <_scanf_i+0x1b0>
 80146c4:	702a      	strb	r2, [r5, #0]
 80146c6:	6863      	ldr	r3, [r4, #4]
 80146c8:	9e00      	ldr	r6, [sp, #0]
 80146ca:	4649      	mov	r1, r9
 80146cc:	4658      	mov	r0, fp
 80146ce:	47b0      	blx	r6
 80146d0:	f8da 3000 	ldr.w	r3, [sl]
 80146d4:	6821      	ldr	r1, [r4, #0]
 80146d6:	1d1a      	adds	r2, r3, #4
 80146d8:	f8ca 2000 	str.w	r2, [sl]
 80146dc:	f011 0f20 	tst.w	r1, #32
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	d010      	beq.n	8014706 <_scanf_i+0x1ca>
 80146e4:	6018      	str	r0, [r3, #0]
 80146e6:	68e3      	ldr	r3, [r4, #12]
 80146e8:	3301      	adds	r3, #1
 80146ea:	60e3      	str	r3, [r4, #12]
 80146ec:	eba5 0509 	sub.w	r5, r5, r9
 80146f0:	44a8      	add	r8, r5
 80146f2:	6925      	ldr	r5, [r4, #16]
 80146f4:	4445      	add	r5, r8
 80146f6:	6125      	str	r5, [r4, #16]
 80146f8:	2000      	movs	r0, #0
 80146fa:	b007      	add	sp, #28
 80146fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014700:	f04f 0800 	mov.w	r8, #0
 8014704:	e7ca      	b.n	801469c <_scanf_i+0x160>
 8014706:	07ca      	lsls	r2, r1, #31
 8014708:	bf4c      	ite	mi
 801470a:	8018      	strhmi	r0, [r3, #0]
 801470c:	6018      	strpl	r0, [r3, #0]
 801470e:	e7ea      	b.n	80146e6 <_scanf_i+0x1aa>
 8014710:	2001      	movs	r0, #1
 8014712:	e7f2      	b.n	80146fa <_scanf_i+0x1be>
 8014714:	08014c88 	.word	0x08014c88
 8014718:	08011929 	.word	0x08011929
 801471c:	08014951 	.word	0x08014951
 8014720:	08015335 	.word	0x08015335

08014724 <_putc_r>:
 8014724:	b570      	push	{r4, r5, r6, lr}
 8014726:	460d      	mov	r5, r1
 8014728:	4614      	mov	r4, r2
 801472a:	4606      	mov	r6, r0
 801472c:	b118      	cbz	r0, 8014736 <_putc_r+0x12>
 801472e:	6983      	ldr	r3, [r0, #24]
 8014730:	b90b      	cbnz	r3, 8014736 <_putc_r+0x12>
 8014732:	f7fe f941 	bl	80129b8 <__sinit>
 8014736:	4b13      	ldr	r3, [pc, #76]	; (8014784 <_putc_r+0x60>)
 8014738:	429c      	cmp	r4, r3
 801473a:	d112      	bne.n	8014762 <_putc_r+0x3e>
 801473c:	6874      	ldr	r4, [r6, #4]
 801473e:	68a3      	ldr	r3, [r4, #8]
 8014740:	3b01      	subs	r3, #1
 8014742:	2b00      	cmp	r3, #0
 8014744:	60a3      	str	r3, [r4, #8]
 8014746:	da16      	bge.n	8014776 <_putc_r+0x52>
 8014748:	69a2      	ldr	r2, [r4, #24]
 801474a:	4293      	cmp	r3, r2
 801474c:	db02      	blt.n	8014754 <_putc_r+0x30>
 801474e:	b2eb      	uxtb	r3, r5
 8014750:	2b0a      	cmp	r3, #10
 8014752:	d110      	bne.n	8014776 <_putc_r+0x52>
 8014754:	4622      	mov	r2, r4
 8014756:	4629      	mov	r1, r5
 8014758:	4630      	mov	r0, r6
 801475a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801475e:	f7fd b915 	b.w	801198c <__swbuf_r>
 8014762:	4b09      	ldr	r3, [pc, #36]	; (8014788 <_putc_r+0x64>)
 8014764:	429c      	cmp	r4, r3
 8014766:	d101      	bne.n	801476c <_putc_r+0x48>
 8014768:	68b4      	ldr	r4, [r6, #8]
 801476a:	e7e8      	b.n	801473e <_putc_r+0x1a>
 801476c:	4b07      	ldr	r3, [pc, #28]	; (801478c <_putc_r+0x68>)
 801476e:	429c      	cmp	r4, r3
 8014770:	bf08      	it	eq
 8014772:	68f4      	ldreq	r4, [r6, #12]
 8014774:	e7e3      	b.n	801473e <_putc_r+0x1a>
 8014776:	6823      	ldr	r3, [r4, #0]
 8014778:	1c5a      	adds	r2, r3, #1
 801477a:	6022      	str	r2, [r4, #0]
 801477c:	701d      	strb	r5, [r3, #0]
 801477e:	b2e8      	uxtb	r0, r5
 8014780:	bd70      	pop	{r4, r5, r6, pc}
 8014782:	bf00      	nop
 8014784:	080151c8 	.word	0x080151c8
 8014788:	080151e8 	.word	0x080151e8
 801478c:	080151a8 	.word	0x080151a8

08014790 <_read_r>:
 8014790:	b538      	push	{r3, r4, r5, lr}
 8014792:	4c07      	ldr	r4, [pc, #28]	; (80147b0 <_read_r+0x20>)
 8014794:	4605      	mov	r5, r0
 8014796:	4608      	mov	r0, r1
 8014798:	4611      	mov	r1, r2
 801479a:	2200      	movs	r2, #0
 801479c:	6022      	str	r2, [r4, #0]
 801479e:	461a      	mov	r2, r3
 80147a0:	f7ef ff72 	bl	8004688 <_read>
 80147a4:	1c43      	adds	r3, r0, #1
 80147a6:	d102      	bne.n	80147ae <_read_r+0x1e>
 80147a8:	6823      	ldr	r3, [r4, #0]
 80147aa:	b103      	cbz	r3, 80147ae <_read_r+0x1e>
 80147ac:	602b      	str	r3, [r5, #0]
 80147ae:	bd38      	pop	{r3, r4, r5, pc}
 80147b0:	2000c610 	.word	0x2000c610

080147b4 <_sbrk_r>:
 80147b4:	b538      	push	{r3, r4, r5, lr}
 80147b6:	4c06      	ldr	r4, [pc, #24]	; (80147d0 <_sbrk_r+0x1c>)
 80147b8:	2300      	movs	r3, #0
 80147ba:	4605      	mov	r5, r0
 80147bc:	4608      	mov	r0, r1
 80147be:	6023      	str	r3, [r4, #0]
 80147c0:	f7ef ffb4 	bl	800472c <_sbrk>
 80147c4:	1c43      	adds	r3, r0, #1
 80147c6:	d102      	bne.n	80147ce <_sbrk_r+0x1a>
 80147c8:	6823      	ldr	r3, [r4, #0]
 80147ca:	b103      	cbz	r3, 80147ce <_sbrk_r+0x1a>
 80147cc:	602b      	str	r3, [r5, #0]
 80147ce:	bd38      	pop	{r3, r4, r5, pc}
 80147d0:	2000c610 	.word	0x2000c610

080147d4 <__sccl>:
 80147d4:	b570      	push	{r4, r5, r6, lr}
 80147d6:	780b      	ldrb	r3, [r1, #0]
 80147d8:	2b5e      	cmp	r3, #94	; 0x5e
 80147da:	bf13      	iteet	ne
 80147dc:	1c4a      	addne	r2, r1, #1
 80147de:	1c8a      	addeq	r2, r1, #2
 80147e0:	784b      	ldrbeq	r3, [r1, #1]
 80147e2:	2100      	movne	r1, #0
 80147e4:	bf08      	it	eq
 80147e6:	2101      	moveq	r1, #1
 80147e8:	1e44      	subs	r4, r0, #1
 80147ea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80147ee:	f804 1f01 	strb.w	r1, [r4, #1]!
 80147f2:	42ac      	cmp	r4, r5
 80147f4:	d1fb      	bne.n	80147ee <__sccl+0x1a>
 80147f6:	b913      	cbnz	r3, 80147fe <__sccl+0x2a>
 80147f8:	3a01      	subs	r2, #1
 80147fa:	4610      	mov	r0, r2
 80147fc:	bd70      	pop	{r4, r5, r6, pc}
 80147fe:	f081 0401 	eor.w	r4, r1, #1
 8014802:	54c4      	strb	r4, [r0, r3]
 8014804:	1c51      	adds	r1, r2, #1
 8014806:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801480a:	2d2d      	cmp	r5, #45	; 0x2d
 801480c:	f101 36ff 	add.w	r6, r1, #4294967295
 8014810:	460a      	mov	r2, r1
 8014812:	d006      	beq.n	8014822 <__sccl+0x4e>
 8014814:	2d5d      	cmp	r5, #93	; 0x5d
 8014816:	d0f0      	beq.n	80147fa <__sccl+0x26>
 8014818:	b90d      	cbnz	r5, 801481e <__sccl+0x4a>
 801481a:	4632      	mov	r2, r6
 801481c:	e7ed      	b.n	80147fa <__sccl+0x26>
 801481e:	462b      	mov	r3, r5
 8014820:	e7ef      	b.n	8014802 <__sccl+0x2e>
 8014822:	780e      	ldrb	r6, [r1, #0]
 8014824:	2e5d      	cmp	r6, #93	; 0x5d
 8014826:	d0fa      	beq.n	801481e <__sccl+0x4a>
 8014828:	42b3      	cmp	r3, r6
 801482a:	dcf8      	bgt.n	801481e <__sccl+0x4a>
 801482c:	3301      	adds	r3, #1
 801482e:	429e      	cmp	r6, r3
 8014830:	54c4      	strb	r4, [r0, r3]
 8014832:	dcfb      	bgt.n	801482c <__sccl+0x58>
 8014834:	3102      	adds	r1, #2
 8014836:	e7e6      	b.n	8014806 <__sccl+0x32>

08014838 <strncmp>:
 8014838:	b510      	push	{r4, lr}
 801483a:	b16a      	cbz	r2, 8014858 <strncmp+0x20>
 801483c:	3901      	subs	r1, #1
 801483e:	1884      	adds	r4, r0, r2
 8014840:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014844:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014848:	4293      	cmp	r3, r2
 801484a:	d103      	bne.n	8014854 <strncmp+0x1c>
 801484c:	42a0      	cmp	r0, r4
 801484e:	d001      	beq.n	8014854 <strncmp+0x1c>
 8014850:	2b00      	cmp	r3, #0
 8014852:	d1f5      	bne.n	8014840 <strncmp+0x8>
 8014854:	1a98      	subs	r0, r3, r2
 8014856:	bd10      	pop	{r4, pc}
 8014858:	4610      	mov	r0, r2
 801485a:	e7fc      	b.n	8014856 <strncmp+0x1e>

0801485c <_strtoul_l.isra.0>:
 801485c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014860:	4680      	mov	r8, r0
 8014862:	4689      	mov	r9, r1
 8014864:	4692      	mov	sl, r2
 8014866:	461e      	mov	r6, r3
 8014868:	460f      	mov	r7, r1
 801486a:	463d      	mov	r5, r7
 801486c:	9808      	ldr	r0, [sp, #32]
 801486e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014872:	f7fe fc51 	bl	8013118 <__locale_ctype_ptr_l>
 8014876:	4420      	add	r0, r4
 8014878:	7843      	ldrb	r3, [r0, #1]
 801487a:	f013 0308 	ands.w	r3, r3, #8
 801487e:	d130      	bne.n	80148e2 <_strtoul_l.isra.0+0x86>
 8014880:	2c2d      	cmp	r4, #45	; 0x2d
 8014882:	d130      	bne.n	80148e6 <_strtoul_l.isra.0+0x8a>
 8014884:	787c      	ldrb	r4, [r7, #1]
 8014886:	1cbd      	adds	r5, r7, #2
 8014888:	2101      	movs	r1, #1
 801488a:	2e00      	cmp	r6, #0
 801488c:	d05c      	beq.n	8014948 <_strtoul_l.isra.0+0xec>
 801488e:	2e10      	cmp	r6, #16
 8014890:	d109      	bne.n	80148a6 <_strtoul_l.isra.0+0x4a>
 8014892:	2c30      	cmp	r4, #48	; 0x30
 8014894:	d107      	bne.n	80148a6 <_strtoul_l.isra.0+0x4a>
 8014896:	782b      	ldrb	r3, [r5, #0]
 8014898:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801489c:	2b58      	cmp	r3, #88	; 0x58
 801489e:	d14e      	bne.n	801493e <_strtoul_l.isra.0+0xe2>
 80148a0:	786c      	ldrb	r4, [r5, #1]
 80148a2:	2610      	movs	r6, #16
 80148a4:	3502      	adds	r5, #2
 80148a6:	f04f 32ff 	mov.w	r2, #4294967295
 80148aa:	2300      	movs	r3, #0
 80148ac:	fbb2 f2f6 	udiv	r2, r2, r6
 80148b0:	fb06 fc02 	mul.w	ip, r6, r2
 80148b4:	ea6f 0c0c 	mvn.w	ip, ip
 80148b8:	4618      	mov	r0, r3
 80148ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80148be:	2f09      	cmp	r7, #9
 80148c0:	d817      	bhi.n	80148f2 <_strtoul_l.isra.0+0x96>
 80148c2:	463c      	mov	r4, r7
 80148c4:	42a6      	cmp	r6, r4
 80148c6:	dd23      	ble.n	8014910 <_strtoul_l.isra.0+0xb4>
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	db1e      	blt.n	801490a <_strtoul_l.isra.0+0xae>
 80148cc:	4282      	cmp	r2, r0
 80148ce:	d31c      	bcc.n	801490a <_strtoul_l.isra.0+0xae>
 80148d0:	d101      	bne.n	80148d6 <_strtoul_l.isra.0+0x7a>
 80148d2:	45a4      	cmp	ip, r4
 80148d4:	db19      	blt.n	801490a <_strtoul_l.isra.0+0xae>
 80148d6:	fb00 4006 	mla	r0, r0, r6, r4
 80148da:	2301      	movs	r3, #1
 80148dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80148e0:	e7eb      	b.n	80148ba <_strtoul_l.isra.0+0x5e>
 80148e2:	462f      	mov	r7, r5
 80148e4:	e7c1      	b.n	801486a <_strtoul_l.isra.0+0xe>
 80148e6:	2c2b      	cmp	r4, #43	; 0x2b
 80148e8:	bf04      	itt	eq
 80148ea:	1cbd      	addeq	r5, r7, #2
 80148ec:	787c      	ldrbeq	r4, [r7, #1]
 80148ee:	4619      	mov	r1, r3
 80148f0:	e7cb      	b.n	801488a <_strtoul_l.isra.0+0x2e>
 80148f2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80148f6:	2f19      	cmp	r7, #25
 80148f8:	d801      	bhi.n	80148fe <_strtoul_l.isra.0+0xa2>
 80148fa:	3c37      	subs	r4, #55	; 0x37
 80148fc:	e7e2      	b.n	80148c4 <_strtoul_l.isra.0+0x68>
 80148fe:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014902:	2f19      	cmp	r7, #25
 8014904:	d804      	bhi.n	8014910 <_strtoul_l.isra.0+0xb4>
 8014906:	3c57      	subs	r4, #87	; 0x57
 8014908:	e7dc      	b.n	80148c4 <_strtoul_l.isra.0+0x68>
 801490a:	f04f 33ff 	mov.w	r3, #4294967295
 801490e:	e7e5      	b.n	80148dc <_strtoul_l.isra.0+0x80>
 8014910:	2b00      	cmp	r3, #0
 8014912:	da09      	bge.n	8014928 <_strtoul_l.isra.0+0xcc>
 8014914:	2322      	movs	r3, #34	; 0x22
 8014916:	f8c8 3000 	str.w	r3, [r8]
 801491a:	f04f 30ff 	mov.w	r0, #4294967295
 801491e:	f1ba 0f00 	cmp.w	sl, #0
 8014922:	d107      	bne.n	8014934 <_strtoul_l.isra.0+0xd8>
 8014924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014928:	b101      	cbz	r1, 801492c <_strtoul_l.isra.0+0xd0>
 801492a:	4240      	negs	r0, r0
 801492c:	f1ba 0f00 	cmp.w	sl, #0
 8014930:	d0f8      	beq.n	8014924 <_strtoul_l.isra.0+0xc8>
 8014932:	b10b      	cbz	r3, 8014938 <_strtoul_l.isra.0+0xdc>
 8014934:	f105 39ff 	add.w	r9, r5, #4294967295
 8014938:	f8ca 9000 	str.w	r9, [sl]
 801493c:	e7f2      	b.n	8014924 <_strtoul_l.isra.0+0xc8>
 801493e:	2430      	movs	r4, #48	; 0x30
 8014940:	2e00      	cmp	r6, #0
 8014942:	d1b0      	bne.n	80148a6 <_strtoul_l.isra.0+0x4a>
 8014944:	2608      	movs	r6, #8
 8014946:	e7ae      	b.n	80148a6 <_strtoul_l.isra.0+0x4a>
 8014948:	2c30      	cmp	r4, #48	; 0x30
 801494a:	d0a4      	beq.n	8014896 <_strtoul_l.isra.0+0x3a>
 801494c:	260a      	movs	r6, #10
 801494e:	e7aa      	b.n	80148a6 <_strtoul_l.isra.0+0x4a>

08014950 <_strtoul_r>:
 8014950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014952:	4c06      	ldr	r4, [pc, #24]	; (801496c <_strtoul_r+0x1c>)
 8014954:	4d06      	ldr	r5, [pc, #24]	; (8014970 <_strtoul_r+0x20>)
 8014956:	6824      	ldr	r4, [r4, #0]
 8014958:	6a24      	ldr	r4, [r4, #32]
 801495a:	2c00      	cmp	r4, #0
 801495c:	bf08      	it	eq
 801495e:	462c      	moveq	r4, r5
 8014960:	9400      	str	r4, [sp, #0]
 8014962:	f7ff ff7b 	bl	801485c <_strtoul_l.isra.0>
 8014966:	b003      	add	sp, #12
 8014968:	bd30      	pop	{r4, r5, pc}
 801496a:	bf00      	nop
 801496c:	2000000c 	.word	0x2000000c
 8014970:	20000070 	.word	0x20000070

08014974 <__submore>:
 8014974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014978:	460c      	mov	r4, r1
 801497a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801497c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014980:	4299      	cmp	r1, r3
 8014982:	d11d      	bne.n	80149c0 <__submore+0x4c>
 8014984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014988:	f7ff f8de 	bl	8013b48 <_malloc_r>
 801498c:	b918      	cbnz	r0, 8014996 <__submore+0x22>
 801498e:	f04f 30ff 	mov.w	r0, #4294967295
 8014992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801499a:	63a3      	str	r3, [r4, #56]	; 0x38
 801499c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80149a0:	6360      	str	r0, [r4, #52]	; 0x34
 80149a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80149a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80149aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80149ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80149b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80149b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80149ba:	6020      	str	r0, [r4, #0]
 80149bc:	2000      	movs	r0, #0
 80149be:	e7e8      	b.n	8014992 <__submore+0x1e>
 80149c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80149c2:	0077      	lsls	r7, r6, #1
 80149c4:	463a      	mov	r2, r7
 80149c6:	f000 f85a 	bl	8014a7e <_realloc_r>
 80149ca:	4605      	mov	r5, r0
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d0de      	beq.n	801498e <__submore+0x1a>
 80149d0:	eb00 0806 	add.w	r8, r0, r6
 80149d4:	4601      	mov	r1, r0
 80149d6:	4632      	mov	r2, r6
 80149d8:	4640      	mov	r0, r8
 80149da:	f7fe fc4f 	bl	801327c <memcpy>
 80149de:	f8c4 8000 	str.w	r8, [r4]
 80149e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80149e6:	e7e9      	b.n	80149bc <__submore+0x48>

080149e8 <__ascii_wctomb>:
 80149e8:	b149      	cbz	r1, 80149fe <__ascii_wctomb+0x16>
 80149ea:	2aff      	cmp	r2, #255	; 0xff
 80149ec:	bf85      	ittet	hi
 80149ee:	238a      	movhi	r3, #138	; 0x8a
 80149f0:	6003      	strhi	r3, [r0, #0]
 80149f2:	700a      	strbls	r2, [r1, #0]
 80149f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80149f8:	bf98      	it	ls
 80149fa:	2001      	movls	r0, #1
 80149fc:	4770      	bx	lr
 80149fe:	4608      	mov	r0, r1
 8014a00:	4770      	bx	lr
	...

08014a04 <_fstat_r>:
 8014a04:	b538      	push	{r3, r4, r5, lr}
 8014a06:	4c07      	ldr	r4, [pc, #28]	; (8014a24 <_fstat_r+0x20>)
 8014a08:	2300      	movs	r3, #0
 8014a0a:	4605      	mov	r5, r0
 8014a0c:	4608      	mov	r0, r1
 8014a0e:	4611      	mov	r1, r2
 8014a10:	6023      	str	r3, [r4, #0]
 8014a12:	f7ef fe62 	bl	80046da <_fstat>
 8014a16:	1c43      	adds	r3, r0, #1
 8014a18:	d102      	bne.n	8014a20 <_fstat_r+0x1c>
 8014a1a:	6823      	ldr	r3, [r4, #0]
 8014a1c:	b103      	cbz	r3, 8014a20 <_fstat_r+0x1c>
 8014a1e:	602b      	str	r3, [r5, #0]
 8014a20:	bd38      	pop	{r3, r4, r5, pc}
 8014a22:	bf00      	nop
 8014a24:	2000c610 	.word	0x2000c610

08014a28 <_isatty_r>:
 8014a28:	b538      	push	{r3, r4, r5, lr}
 8014a2a:	4c06      	ldr	r4, [pc, #24]	; (8014a44 <_isatty_r+0x1c>)
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	4605      	mov	r5, r0
 8014a30:	4608      	mov	r0, r1
 8014a32:	6023      	str	r3, [r4, #0]
 8014a34:	f7ef fe61 	bl	80046fa <_isatty>
 8014a38:	1c43      	adds	r3, r0, #1
 8014a3a:	d102      	bne.n	8014a42 <_isatty_r+0x1a>
 8014a3c:	6823      	ldr	r3, [r4, #0]
 8014a3e:	b103      	cbz	r3, 8014a42 <_isatty_r+0x1a>
 8014a40:	602b      	str	r3, [r5, #0]
 8014a42:	bd38      	pop	{r3, r4, r5, pc}
 8014a44:	2000c610 	.word	0x2000c610

08014a48 <memmove>:
 8014a48:	4288      	cmp	r0, r1
 8014a4a:	b510      	push	{r4, lr}
 8014a4c:	eb01 0302 	add.w	r3, r1, r2
 8014a50:	d807      	bhi.n	8014a62 <memmove+0x1a>
 8014a52:	1e42      	subs	r2, r0, #1
 8014a54:	4299      	cmp	r1, r3
 8014a56:	d00a      	beq.n	8014a6e <memmove+0x26>
 8014a58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014a60:	e7f8      	b.n	8014a54 <memmove+0xc>
 8014a62:	4283      	cmp	r3, r0
 8014a64:	d9f5      	bls.n	8014a52 <memmove+0xa>
 8014a66:	1881      	adds	r1, r0, r2
 8014a68:	1ad2      	subs	r2, r2, r3
 8014a6a:	42d3      	cmn	r3, r2
 8014a6c:	d100      	bne.n	8014a70 <memmove+0x28>
 8014a6e:	bd10      	pop	{r4, pc}
 8014a70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a74:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014a78:	e7f7      	b.n	8014a6a <memmove+0x22>

08014a7a <__malloc_lock>:
 8014a7a:	4770      	bx	lr

08014a7c <__malloc_unlock>:
 8014a7c:	4770      	bx	lr

08014a7e <_realloc_r>:
 8014a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a80:	4607      	mov	r7, r0
 8014a82:	4614      	mov	r4, r2
 8014a84:	460e      	mov	r6, r1
 8014a86:	b921      	cbnz	r1, 8014a92 <_realloc_r+0x14>
 8014a88:	4611      	mov	r1, r2
 8014a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014a8e:	f7ff b85b 	b.w	8013b48 <_malloc_r>
 8014a92:	b922      	cbnz	r2, 8014a9e <_realloc_r+0x20>
 8014a94:	f7ff f80a 	bl	8013aac <_free_r>
 8014a98:	4625      	mov	r5, r4
 8014a9a:	4628      	mov	r0, r5
 8014a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a9e:	f000 f814 	bl	8014aca <_malloc_usable_size_r>
 8014aa2:	42a0      	cmp	r0, r4
 8014aa4:	d20f      	bcs.n	8014ac6 <_realloc_r+0x48>
 8014aa6:	4621      	mov	r1, r4
 8014aa8:	4638      	mov	r0, r7
 8014aaa:	f7ff f84d 	bl	8013b48 <_malloc_r>
 8014aae:	4605      	mov	r5, r0
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	d0f2      	beq.n	8014a9a <_realloc_r+0x1c>
 8014ab4:	4631      	mov	r1, r6
 8014ab6:	4622      	mov	r2, r4
 8014ab8:	f7fe fbe0 	bl	801327c <memcpy>
 8014abc:	4631      	mov	r1, r6
 8014abe:	4638      	mov	r0, r7
 8014ac0:	f7fe fff4 	bl	8013aac <_free_r>
 8014ac4:	e7e9      	b.n	8014a9a <_realloc_r+0x1c>
 8014ac6:	4635      	mov	r5, r6
 8014ac8:	e7e7      	b.n	8014a9a <_realloc_r+0x1c>

08014aca <_malloc_usable_size_r>:
 8014aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ace:	1f18      	subs	r0, r3, #4
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	bfbc      	itt	lt
 8014ad4:	580b      	ldrlt	r3, [r1, r0]
 8014ad6:	18c0      	addlt	r0, r0, r3
 8014ad8:	4770      	bx	lr
	...

08014adc <_init>:
 8014adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ade:	bf00      	nop
 8014ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ae2:	bc08      	pop	{r3}
 8014ae4:	469e      	mov	lr, r3
 8014ae6:	4770      	bx	lr

08014ae8 <_fini>:
 8014ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aea:	bf00      	nop
 8014aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014aee:	bc08      	pop	{r3}
 8014af0:	469e      	mov	lr, r3
 8014af2:	4770      	bx	lr
